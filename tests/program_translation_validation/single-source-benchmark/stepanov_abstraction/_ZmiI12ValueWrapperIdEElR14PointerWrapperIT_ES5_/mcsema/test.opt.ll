; ModuleID = 'mcsema/test.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_406740__rodata_type = type <{ [24 x i8], [31 x i8], [62 x i8], [43 x i8], [43 x i8], [39 x i8], [20 x i8], [34 x i8], [18 x i8], [24 x i8], [15 x i8], [15 x i8], [15 x i8], [21 x i8], [15 x i8], [27 x i8], [15 x i8], [33 x i8], [15 x i8], [29 x i8], [15 x i8], [35 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [25 x i8], [31 x i8], [37 x i8], [43 x i8], [39 x i8], [45 x i8], [21 x i8] }>
%seg_608de8__init_array_type = type <{ i64, i64, i64 }>
%seg_608ff0__got_type = type <{ i64, i64 }>
%iterations_type = type <{ [8 x i8] }>
%init_value_type = type <{ [8 x i8] }>
%dpb_type = type <{ i64 }>
%dpe_type = type <{ i64 }>
%dMpb_type = type <{ i64 }>
%dMpe_type = type <{ i64 }>
%DVpb_type = type <{ i64 }>
%DVpe_type = type <{ i64 }>
%DVMpb_type = type <{ i64 }>
%DVMpe_type = type <{ i64 }>
%DV10pb_type = type <{ i64 }>
%DV10pe_type = type <{ i64 }>
%DV10Mpb_type = type <{ i64 }>
%DV10Mpe_type = type <{ i64 }>
%results_type = type <{ [8 x i8] }>
%current_test_type = type <{ [4 x i8] }>
%allocated_results_type = type <{ [4 x i8] }>
%start_time_type = type <{ [8 x i8] }>
%end_time_type = type <{ [8 x i8] }>
%data_type = type <{ [16000 x i8] }>
%VData_type = type <{ [16000 x i8] }>
%V10Data_type = type <{ [16000 x i8] }>
%dataMaster_type = type <{ [16000 x i8] }>
%VDataMaster_type = type <{ [16000 x i8] }>
%V10DataMaster_type = type <{ [16000 x i8] }>
%dPb_type = type <{ [8 x i8] }>
%dPe_type = type <{ [8 x i8] }>
%dMPb_type = type <{ [8 x i8] }>
%dMPe_type = type <{ [8 x i8] }>
%DVPb_type = type <{ [8 x i8] }>
%DVPe_type = type <{ [8 x i8] }>
%DVMPb_type = type <{ [8 x i8] }>
%DVMPe_type = type <{ [8 x i8] }>
%DV10Pb_type = type <{ [8 x i8] }>
%DV10Pe_type = type <{ [8 x i8] }>
%DV10MPb_type = type <{ [8 x i8] }>
%DV10MPe_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_406740__rodata = internal constant %seg_406740__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\80\84.A\00\00\00\00\00@\9F@", [31 x i8] c"Could not allocate %d results\0A\00", [62 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00 \00", [43 x i8] c"number %*s time       per second   test0\0A\0A\00", [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", [34 x i8] c"\0Atest %*s description   absolute\0A\00", [18 x i8] c"number %*s time\0A\0A\00", [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", [15 x i8] c"insertion_sort ", [15 x i8] c"double pointer\00", [15 x i8] c"insertion_sort ", [21 x i8] c"double pointer_class\00", [15 x i8] c"insertion_sort ", [27 x i8] c"DoubleValueWrapper pointer\00", [15 x i8] c"insertion_sort ", [33 x i8] c"DoubleValueWrapper pointer_class\00", [15 x i8] c"insertion_sort ", [29 x i8] c"DoubleValueWrapper10 pointer\00", [15 x i8] c"insertion_sort ", [35 x i8] c"DoubleValueWrapper10 pointer_class\00", [25 x i8] c"quicksort double pointer\00", [31 x i8] c"quicksort double pointer_class\00", [37 x i8] c"quicksort DoubleValueWrapper pointer\00", [43 x i8] c"quicksort DoubleValueWrapper pointer_class\00", [39 x i8] c"quicksort DoubleValueWrapper10 pointer\00", [45 x i8] c"quicksort DoubleValueWrapper10 pointer_class\00", [25 x i8] c"heap_sort double pointer\00", [31 x i8] c"heap_sort double pointer_class\00", [37 x i8] c"heap_sort DoubleValueWrapper pointer\00", [43 x i8] c"heap_sort DoubleValueWrapper pointer_class\00", [39 x i8] c"heap_sort DoubleValueWrapper10 pointer\00", [45 x i8] c"heap_sort DoubleValueWrapper10 pointer_class\00", [21 x i8] c"sort test %i failed\0A\00" }>
@seg_608de8__init_array = internal global %seg_608de8__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400bb0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp to i64), i64 ptrtoint (void ()* @callback_sub_400b80___do_global_dtors_aux to i64) }>
@seg_608ff0__got = internal global %seg_608ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@iterations = local_unnamed_addr global %iterations_type <{ [8 x i8] c"@\0D\03\00\00\00\00\00" }>
@init_value = global %init_value_type <{ [8 x i8] c"\00\00\00\00\00\00\08@" }>
@dpb = local_unnamed_addr global %dpb_type <{ i64 ptrtoint (%data_type* @data to i64) }>
@dpe = local_unnamed_addr global %dpe_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@dMpb = local_unnamed_addr global %dMpb_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@dMpe = local_unnamed_addr global %dMpe_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVpb = local_unnamed_addr global %DVpb_type <{ i64 ptrtoint (%VData_type* @VData to i64) }>
@DVpe = local_unnamed_addr global %DVpe_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DVMpb = local_unnamed_addr global %DVMpb_type <{ i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64) }>
@DVMpe = local_unnamed_addr global %DVMpe_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10pb = local_unnamed_addr global %DV10pb_type <{ i64 ptrtoint (%V10Data_type* @V10Data to i64) }>
@DV10pe = local_unnamed_addr global %DV10pe_type <{ i64 ptrtoint (%dataMaster_type* @dataMaster to i64) }>
@DV10Mpb = local_unnamed_addr global %DV10Mpb_type <{ i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64) }>
@DV10Mpe = local_unnamed_addr global %DV10Mpe_type <{ i64 ptrtoint (%dPb_type* @dPb to i64) }>
@results = local_unnamed_addr global %results_type zeroinitializer
@current_test = local_unnamed_addr global %current_test_type zeroinitializer
@allocated_results = local_unnamed_addr global %allocated_results_type zeroinitializer
@start_time = local_unnamed_addr global %start_time_type zeroinitializer
@end_time = local_unnamed_addr global %end_time_type zeroinitializer
@data = global %data_type zeroinitializer
@VData = global %VData_type zeroinitializer
@V10Data = global %V10Data_type zeroinitializer
@dataMaster = global %dataMaster_type zeroinitializer
@VDataMaster = global %VDataMaster_type zeroinitializer
@V10DataMaster = global %V10DataMaster_type zeroinitializer
@dPb = global %dPb_type zeroinitializer
@dPe = global %dPe_type zeroinitializer
@dMPb = global %dMPb_type zeroinitializer
@dMPe = global %dMPe_type zeroinitializer
@DVPb = global %DVPb_type zeroinitializer
@DVPe = global %DVPe_type zeroinitializer
@DVMPb = global %DVMPb_type zeroinitializer
@DVMPe = global %DVMPe_type zeroinitializer
@DV10Pb = global %DV10Pb_type zeroinitializer
@DV10Pe = global %DV10Pe_type zeroinitializer
@DV10MPb = global %DV10MPb_type zeroinitializer
@DV10MPe = global %DV10MPe_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400bb0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400b80___do_global_dtors_aux_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_406730___libc_csu_fini_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4066c0___libc_csu_init_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@32 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper
@33 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper
@34 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper
@35 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@36 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@37 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper
@38 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper
@39 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper
@40 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@41 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper
@42 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper
@43 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper
@44 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper
@45 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIdEC2Ev_wrapper
@46 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper
@47 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper
@48 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper
@49 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@50 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@51 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@52 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper
@53 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper
@54 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper
@55 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper
@56 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper
@57 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper
@58 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper
@59 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9check_sumd_wrapper
@60 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@61 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper
@62 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper
@63 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper
@64 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@65 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@66 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@67 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper
@68 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@69 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper
@70 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper
@71 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@72 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper
@73 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper
@74 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper
@75 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper
@76 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@77 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper
@78 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@79 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper
@80 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@81 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@82 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper
@83 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppIdER14PointerWrapperIT_ES3__wrapper
@84 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper
@85 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper
@86 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper
@87 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper
@88 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper
@89 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper
@90 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13record_resultdPKc_wrapper
@91 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper
@92 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper
@93 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper
@94 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@95 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper
@96 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper
@97 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIPdEvT_S1__wrapper
@98 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper
@99 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper
@100 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper
@101 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper
@102 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper
@103 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper
@104 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper
@105 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper
@106 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@107 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper
@108 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper
@109 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper
@110 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper
@111 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper
@112 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper
@113 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper
@114 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper
@115 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper
@116 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z5timerv_wrapper
@117 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper
@118 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper
@119 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@120 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper
@121 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper
@122 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper
@123 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper
@124 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmIdER14PointerWrapperIT_ES3__wrapper
@125 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper
@126 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper
@127 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper
@128 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@129 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper
@130 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper
@131 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper
@132 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper
@133 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper
@134 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper
@135 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper
@136 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper
@137 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z11start_timerv_wrapper
@138 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper
@139 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper
@140 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper
@141 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper
@142 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK14PointerWrapperIdEdeEv_wrapper
@143 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper
@144 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper
@145 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper
@146 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper
@147 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper
@148 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN14PointerWrapperIdEC2EPd_wrapper
@149 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper
@150 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper
@151 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper
@152 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper
@153 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z9summarizePKciiii_wrapper
@154 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper
@155 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper
@156 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper
@157 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper
@158 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper
@159 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper
@160 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper
@161 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper
@162 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper
@163 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper
@164 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper
@165 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper
@166 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper
@167 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper
@168 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper
@169 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper
@170 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper
@171 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper
@172 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper
@173 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper
@174 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper
@175 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper
@176 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper
@177 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper
@178 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper
@179 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@seg_609100__bss.0.0 = internal unnamed_addr global i1 false, align 8

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atoi(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @log(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @rand() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exp(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @atof(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strlen(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @srand(i64) #5

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4032d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2432
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #9
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2432
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2432
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2432
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2432
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2432
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2433
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2447
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2448
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2450
  %83 = lshr i64 %37, 60
  %84 = and i64 %83, 1
  %85 = lshr i64 %62, 63
  %86 = xor i64 %81, %84
  %87 = xor i64 %81, %85
  %88 = add nuw nsw i64 %86, %87
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %58, align 1, !tbaa !2451
  %91 = add i64 %34, 16
  store i64 %91, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -8
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %94, 5
  store i64 %98, i64* %PC, align 8
  %99 = load i64, i64* %5, align 8, !tbaa !2428
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RBP, align 8, !tbaa !2428
  store i64 %100, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %94, 6
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %100 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  %106 = add i64 %99, 16
  store i64 %106, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403130:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400a30___cxx_global_var_init_21(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPe_type* @DVMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4543
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400bc0__Z13record_resultdPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400bc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %17 = add i64 %6, -16
  %18 = add i64 %9, 12
  store i64 %18, i64* %PC, align 8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %20 = load i64, i64* %19, align 1
  %21 = inttoptr i64 %17 to i64*
  store i64 %20, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %RDI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %11, align 1, !tbaa !2433
  %30 = trunc i64 %29 to i32
  %31 = and i32 %30, 255
  %32 = tail call i32 @llvm.ctpop.i32(i32 %31) #9
  %33 = trunc i32 %32 to i8
  %34 = and i8 %33, 1
  %35 = xor i8 %34, 1
  store i8 %35, i8* %12, align 1, !tbaa !2447
  store i8 0, i8* %13, align 1, !tbaa !2448
  %36 = icmp eq i64 %29, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %14, align 1, !tbaa !2449
  %38 = lshr i64 %29, 63
  %39 = trunc i64 %38 to i8
  store i8 %39, i8* %15, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2451
  %.v = select i1 %36, i64 35, i64 15
  %40 = add i64 %28, %.v
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  br i1 %36, label %block_400bc0.block_400bf4_crit_edge, label %block_400be0

block_400bc0.block_400bf4_crit_edge:              ; preds = %block_400bc0
  %.pre = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  br label %block_400bf4

block_400bf4:                                     ; preds = %block_400bc0.block_400bf4_crit_edge, %block_400be0
  %41 = phi i32 [ %193, %block_400be0 ], [ %.pre, %block_400bc0.block_400bf4_crit_edge ]
  %42 = phi i64 [ %220, %block_400be0 ], [ %40, %block_400bc0.block_400bf4_crit_edge ]
  %43 = add i32 %41, 10
  %44 = zext i32 %43 to i64
  store i64 %44, i64* %RAX, align 8, !tbaa !2428
  %45 = icmp eq i32 %43, 0
  %46 = zext i1 %45 to i8
  %47 = lshr i32 %43, 31
  %48 = trunc i32 %47 to i8
  store i32 %43, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  store i64 %29, i64* %RCX, align 8, !tbaa !2428
  %49 = sext i32 %43 to i64
  %50 = shl nsw i64 %49, 4
  store i64 %50, i64* %RDX, align 8, !tbaa !2428
  store i8 %48, i8* %11, align 1, !tbaa !2432
  %51 = trunc i64 %50 to i32
  %52 = and i32 %51, 240
  %53 = tail call i32 @llvm.ctpop.i32(i32 %52) #9
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  store i8 %56, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 %46, i8* %14, align 1, !tbaa !2432
  %57 = lshr i64 %49, 59
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  store i8 %59, i8* %15, align 1, !tbaa !2432
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  store i64 %50, i64* %RSI, align 8, !tbaa !2428
  %60 = add i64 %42, -1220
  %61 = add i64 %42, 48
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %66 = load i64, i64* %RAX, align 8
  %67 = load i64, i64* %PC, align 8
  store i64 %66, i64* bitcast (%results_type* @results to i64*), align 8
  store i8 0, i8* %11, align 1, !tbaa !2433
  %68 = trunc i64 %66 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %12, align 1, !tbaa !2447
  store i8 0, i8* %13, align 1, !tbaa !2448
  %74 = icmp eq i64 %66, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %14, align 1, !tbaa !2449
  %76 = lshr i64 %66, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %15, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2451
  %.v7 = select i1 %74, i64 23, i64 60
  %78 = add i64 %67, %.v7
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %74, label %block_400c3b, label %block_400c60

block_400c60:                                     ; preds = %block_400bf4
  %79 = add i64 %78, 5
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  %.pre5 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  br label %block_400c65

block_400c65:                                     ; preds = %block_400be0, %block_400c60
  %80 = phi i32 [ %.pre5, %block_400c60 ], [ %191, %block_400be0 ]
  %81 = phi i64 [ %66, %block_400c60 ], [ %29, %block_400be0 ]
  %82 = phi i64 [ %79, %block_400c60 ], [ %220, %block_400be0 ]
  %MEMORY.1 = phi %struct.Memory* [ %65, %block_400c60 ], [ %2, %block_400be0 ]
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -8
  %85 = add i64 %82, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %19, align 1, !tbaa !2452
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %89 = bitcast i64* %88 to double*
  store double 0.000000e+00, double* %89, align 1, !tbaa !2452
  %90 = sext i32 %80 to i64
  %91 = shl nsw i64 %90, 4
  store i64 %91, i64* %RCX, align 8, !tbaa !2428
  %92 = add i64 %91, %81
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = icmp ult i64 %92, %81
  %94 = icmp ult i64 %92, %91
  %95 = or i1 %93, %94
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %11, align 1, !tbaa !2433
  %97 = trunc i64 %92 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #9
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %12, align 1, !tbaa !2447
  %103 = xor i64 %91, %81
  %104 = xor i64 %103, %92
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %13, align 1, !tbaa !2448
  %108 = icmp eq i64 %92, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %14, align 1, !tbaa !2449
  %110 = lshr i64 %92, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %15, align 1, !tbaa !2450
  %112 = lshr i64 %81, 63
  %113 = lshr i64 %90, 59
  %114 = and i64 %113, 1
  %115 = xor i64 %110, %112
  %116 = xor i64 %110, %114
  %117 = add nuw nsw i64 %115, %116
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %16, align 1, !tbaa !2451
  %120 = inttoptr i64 %92 to i64*
  %121 = add i64 %82, 32
  store i64 %121, i64* %PC, align 8
  store i64 %87, i64* %120, align 8
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -16
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %91, i64* %RDX, align 8, !tbaa !2428
  %129 = add i64 %91, %128
  store i64 %129, i64* %RCX, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  %131 = add i64 %124, 31
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %127, i64* %132, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %135 = add i32 %134, 1
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RSI, align 8, !tbaa !2428
  store i32 %135, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 32
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -33
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %11, align 1, !tbaa !2433
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #9
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %12, align 1, !tbaa !2447
  %147 = xor i64 %138, %137
  %148 = lshr i64 %147, 4
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %13, align 1, !tbaa !2448
  %151 = icmp eq i64 %138, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %14, align 1, !tbaa !2449
  %153 = lshr i64 %138, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %15, align 1, !tbaa !2450
  %155 = lshr i64 %137, 63
  %156 = xor i64 %153, %155
  %157 = add nuw nsw i64 %156, %153
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %16, align 1, !tbaa !2451
  %160 = add i64 %133, 22
  store i64 %160, i64* %PC, align 8
  %161 = add i64 %137, 40
  %162 = inttoptr i64 %138 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RBP, align 8, !tbaa !2428
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %133, 23
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %161 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %167 = add i64 %137, 48
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400c3b:                                     ; preds = %block_400bf4
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 24), i64* %RDI, align 8, !tbaa !2428
  %168 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %169 = zext i32 %168 to i64
  store i64 %169, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %170 = add i64 %78, -1355
  %171 = add i64 %78, 24
  %172 = load i64, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174, align 8
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %175 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %65)
  %176 = load i64, i64* %PC, align 8
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -20
  %179 = load i32, i32* %EAX, align 4
  %180 = add i64 %176, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %178 to i32*
  store i32 %179, i32* %181, align 4
  %182 = load i64, i64* %PC, align 8
  %183 = add i64 %182, -1291
  %184 = add i64 %182, 5
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call fastcc %struct.Memory* @ext_620950_exit(%struct.State* nonnull %0, %struct.Memory* %175)
  %189 = load i64, i64* %PC, align 8
  %190 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %189, %struct.Memory* %188)
  ret %struct.Memory* %190

block_400be0:                                     ; preds = %block_400bc0
  %191 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = load i32, i32* bitcast (%allocated_results_type* @allocated_results to i32*), align 8
  %194 = sub i32 %191, %193
  %195 = icmp ult i32 %191, %193
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %11, align 1, !tbaa !2433
  %197 = and i32 %194, 255
  %198 = tail call i32 @llvm.ctpop.i32(i32 %197) #9
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  %201 = xor i8 %200, 1
  store i8 %201, i8* %12, align 1, !tbaa !2447
  %202 = xor i32 %193, %191
  %203 = xor i32 %202, %194
  %204 = lshr i32 %203, 4
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  store i8 %206, i8* %13, align 1, !tbaa !2448
  %207 = icmp eq i32 %194, 0
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %14, align 1, !tbaa !2449
  %209 = lshr i32 %194, 31
  %210 = trunc i32 %209 to i8
  store i8 %210, i8* %15, align 1, !tbaa !2450
  %211 = lshr i32 %191, 31
  %212 = lshr i32 %193, 31
  %213 = xor i32 %212, %211
  %214 = xor i32 %209, %211
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %16, align 1, !tbaa !2451
  %218 = icmp ne i8 %210, 0
  %219 = xor i1 %218, %216
  %.v6 = select i1 %219, i64 133, i64 20
  %220 = add i64 %40, %.v6
  store i64 %220, i64* %PC, align 8, !tbaa !2428
  br i1 %219, label %block_400c65, label %block_400bf4
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4066c0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4066c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_608de8__init_array_type* @seg_608de8__init_array to i64), i64 16), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2432
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2432
  store i8 0, i8* %45, align 1, !tbaa !2432
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2432
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2432
  store i8 0, i8* %48, align 1, !tbaa !2432
  %63 = add i64 %38, -24667
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400680__init_proc(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2433
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2447
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2449
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2450
  store i8 0, i8* %48, align 1, !tbaa !2451
  store i8 0, i8* %45, align 1, !tbaa !2448
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_406716, label %block_4066f6

block_406716.loopexit:                            ; preds = %block_406700
  br label %block_406716

block_406716:                                     ; preds = %block_406716.loopexit, %block_4066c0
  %81 = phi i64 [ %80, %block_4066c0 ], [ %179, %block_406716.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_4066c0 ], [ %149, %block_406716.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2433
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #9
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2447
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2448
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2449
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2450
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2451
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4066f6:                                     ; preds = %block_4066c0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2433
  store i8 1, i8* %44, align 1, !tbaa !2447
  store i8 1, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %47, align 1, !tbaa !2450
  store i8 0, i8* %48, align 1, !tbaa !2451
  store i8 0, i8* %45, align 1, !tbaa !2448
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_406700

block_406700:                                     ; preds = %block_406700, %block_4066f6
  %134 = phi i64 [ 0, %block_4066f6 ], [ %152, %block_406700 ]
  %135 = phi i64 [ %133, %block_4066f6 ], [ %179, %block_406700 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_4066f6 ], [ %149, %block_406700 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2433
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #9
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2447
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2448
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2449
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2450
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2451
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v2
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_406716.loopexit, label %block_406700
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4062b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -16
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -40
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = add i64 %6, -24
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -16
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RSI, align 8, !tbaa !2428
  %56 = add i64 %52, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %union.VectorReg* %3 to double*
  %60 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %58, i64* %60, align 1, !tbaa !2452
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %62 = bitcast i64* %61 to double*
  store double 0.000000e+00, double* %62, align 1, !tbaa !2452
  %63 = add i64 %50, -24
  %64 = add i64 %52, 12
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %63 to i64*
  %66 = load i64, i64* %65, align 8
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %52, 16
  store i64 %67, i64* %PC, align 8
  %68 = bitcast i64 %58 to double
  %69 = inttoptr i64 %66 to double*
  %70 = load double, double* %69, align 8
  %71 = fadd double %68, %70
  store double %71, double* %59, align 1, !tbaa !2452
  store i64 0, i64* %61, align 1, !tbaa !2452
  %72 = add i64 %50, -32
  %73 = add i64 %52, 21
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to double*
  store double %71, double* %74, align 8
  %75 = load i64, i64* %RAX, align 8
  %76 = load i64, i64* %PC, align 8
  store i64 %75, i64* %RDI, align 8, !tbaa !2428
  %77 = load i64, i64* %RCX, align 8
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = add i64 %76, -17789
  %79 = add i64 %76, 11
  %80 = load i64, i64* %RSP, align 8, !tbaa !2428
  %81 = add i64 %80, -8
  %82 = inttoptr i64 %81 to i64*
  store i64 %79, i64* %82, align 8
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  %83 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* nonnull %0, i64 %78, %struct.Memory* %2)
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -8
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 5
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %62, align 1, !tbaa !2452
  %90 = load i64, i64* %RSP, align 8
  %91 = add i64 %90, 32
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  %92 = icmp ugt i64 %90, -33
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %13, align 1, !tbaa !2433
  %94 = trunc i64 %91 to i32
  %95 = and i32 %94, 255
  %96 = tail call i32 @llvm.ctpop.i32(i32 %95) #9
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  %99 = xor i8 %98, 1
  store i8 %99, i8* %20, align 1, !tbaa !2447
  %100 = xor i64 %91, %90
  %101 = lshr i64 %100, 4
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  store i8 %103, i8* %25, align 1, !tbaa !2448
  %104 = icmp eq i64 %91, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %28, align 1, !tbaa !2449
  %106 = lshr i64 %91, 63
  %107 = trunc i64 %106 to i8
  store i8 %107, i8* %31, align 1, !tbaa !2450
  %108 = lshr i64 %90, 63
  %109 = xor i64 %106, %108
  %110 = add nuw nsw i64 %109, %106
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %37, align 1, !tbaa !2451
  %113 = add i64 %86, 10
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %90, 40
  %115 = inttoptr i64 %91 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %RBP, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %86, 11
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %114 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %PC, align 8, !tbaa !2428
  %120 = add i64 %90, 48
  store i64 %120, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %83
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405940:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -7422
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_40596c

block_4059f7:                                     ; preds = %block_4059e7
  %56 = add i64 %137, -56
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %149, -7463
  %58 = add i64 %149, 9
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %57, %struct.Memory* %MEMORY.0)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -80
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %65, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, -7480
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %71, %struct.Memory* %62)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -80
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = add i64 %79, 7
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %RCX, align 8, !tbaa !2428
  %86 = load i64*, i64** %55, align 8
  %87 = add i64 %79, 10
  store i64 %87, i64* %PC, align 8
  store i64 %85, i64* %86, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -48
  %90 = load i64, i64* %PC, align 8
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %90, -1879
  %92 = add i64 %90, 9
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %91, %struct.Memory* %76)
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -88
  %99 = load i64, i64* %RAX, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102, align 8
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, -126
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  br label %block_4059a6

block_4059f2:                                     ; preds = %block_4059e7
  %105 = add i64 %137, -48
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %149, -7458
  %107 = add i64 %149, 64
  %108 = load i64, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %108, -8
  %110 = inttoptr i64 %109 to i64*
  store i64 %107, i64* %110, align 8
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %111 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %106, %struct.Memory* %MEMORY.0)
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -24
  %114 = load i64, i64* %PC, align 8
  store i64 %113, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %115 = add i64 %112, -40
  %116 = add i64 %114, 10
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = load i64*, i64** %55, align 8
  %120 = add i64 %114, 13
  store i64 %120, i64* %PC, align 8
  store i64 %118, i64* %119, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, -7647
  %123 = add i64 %121, 5
  %124 = load i64, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %124, -8
  %126 = inttoptr i64 %125 to i64*
  store i64 %123, i64* %126, align 8
  store i64 %125, i64* %RSP, align 8, !tbaa !2428
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %127 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %122, %struct.Memory* %111)
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -64
  %130 = load i64, i64* %RAX, align 8
  %131 = load i64, i64* %PC, align 8
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %129 to i64*
  store i64 %130, i64* %133, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, -220
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  br label %block_40596c

block_4059e7:                                     ; preds = %block_4059c2, %block_4059c7
  %136 = phi i64 [ %.pre8, %block_4059c7 ], [ %262, %block_4059c2 ]
  %MEMORY.0 = phi %struct.Memory* [ %221, %block_4059c7 ], [ %MEMORY.1, %block_4059c2 ]
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -65
  %139 = add i64 %136, 3
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i8*
  %141 = load i8, i8* %140, align 1
  store i8 %141, i8* %AL, align 1, !tbaa !2432
  %142 = and i8 %141, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %143 = zext i8 %142 to i32
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #9
  %145 = trunc i32 %144 to i8
  %146 = xor i8 %145, 1
  store i8 %146, i8* %14, align 1, !tbaa !2447
  %147 = xor i8 %142, 1
  store i8 %147, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %148 = icmp eq i8 %147, 0
  %.v = select i1 %148, i64 16, i64 11
  %149 = add i64 %136, %.v
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  br i1 %148, label %block_4059f7, label %block_4059f2

block_4059a6:                                     ; preds = %block_405986, %block_4059f7
  %150 = phi i64 [ %.pre7, %block_405986 ], [ %104, %block_4059f7 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_405986 ], [ %96, %block_4059f7 ]
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -48
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %153 = add i64 %151, -8
  store i64 %153, i64* %RSI, align 8, !tbaa !2428
  %154 = add i64 %150, -7430
  %155 = add i64 %150, 13
  %156 = load i64, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %156, -8
  %158 = inttoptr i64 %157 to i64*
  store i64 %155, i64* %158, align 8
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  %159 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %154, %struct.Memory* %MEMORY.1)
  %160 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2432
  %161 = load i8, i8* %AL, align 1
  %162 = and i8 %161, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %163 = zext i8 %162 to i32
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #9
  %165 = trunc i32 %164 to i8
  %166 = xor i8 %165, 1
  store i8 %166, i8* %14, align 1, !tbaa !2447
  %167 = xor i8 %162, 1
  store i8 %167, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -65
  %170 = add i64 %160, 9
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i8*
  store i8 0, i8* %171, align 1
  %172 = load i64, i64* %PC, align 8
  %173 = load i8, i8* %16, align 1, !tbaa !2449
  %174 = icmp eq i8 %173, 0
  %.v12 = select i1 %174, i64 11, i64 6
  %175 = add i64 %172, %.v12
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  br i1 %174, label %block_4059c7, label %block_4059c2

block_40596c:                                     ; preds = %block_4059f2, %block_405940
  %176 = phi i64 [ %.pre, %block_405940 ], [ %135, %block_4059f2 ]
  %MEMORY.2 = phi %struct.Memory* [ %48, %block_405940 ], [ %127, %block_4059f2 ]
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %177, -16
  store i64 %179, i64* %RSI, align 8, !tbaa !2428
  %180 = add i64 %176, -7372
  %181 = add i64 %176, 13
  %182 = load i64, i64* %RSP, align 8, !tbaa !2428
  %183 = add i64 %182, -8
  %184 = inttoptr i64 %183 to i64*
  store i64 %181, i64* %184, align 8
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  %185 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %180, %struct.Memory* %MEMORY.2)
  %186 = load i8, i8* %AL, align 1
  %187 = load i64, i64* %PC, align 8
  %188 = and i8 %186, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %189 = zext i8 %188 to i32
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #9
  %191 = trunc i32 %190 to i8
  %192 = xor i8 %191, 1
  store i8 %192, i8* %14, align 1, !tbaa !2447
  %193 = xor i8 %188, 1
  store i8 %193, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %194 = icmp eq i8 %193, 0
  %.v9 = select i1 %194, i64 13, i64 8
  %195 = add i64 %187, %.v9
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  br i1 %194, label %block_405986, label %block_405981

block_4059c7:                                     ; preds = %block_4059a6
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -56
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = add i64 %175, -1799
  %199 = add i64 %175, 9
  %200 = load i64, i64* %RSP, align 8, !tbaa !2428
  %201 = add i64 %200, -8
  %202 = inttoptr i64 %201 to i64*
  store i64 %199, i64* %202, align 8
  store i64 %201, i64* %RSP, align 8, !tbaa !2428
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  %203 = tail call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %198, %struct.Memory* %MEMORY.1)
  %204 = load i64, i64* %RAX, align 8
  %205 = load i64, i64* %PC, align 8
  store i64 %204, i64* %RDI, align 8, !tbaa !2428
  %206 = add i64 %205, -7424
  %207 = add i64 %205, 8
  %208 = load i64, i64* %RSP, align 8, !tbaa !2428
  %209 = add i64 %208, -8
  %210 = inttoptr i64 %209 to i64*
  store i64 %207, i64* %210, align 8
  store i64 %209, i64* %RSP, align 8, !tbaa !2428
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  %211 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %206, %struct.Memory* %MEMORY.1)
  %212 = load i64, i64* %RBP, align 8
  %213 = add i64 %212, -40
  %214 = load i64, i64* %PC, align 8
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX, align 8
  store i64 %215, i64* %RSI, align 8, !tbaa !2428
  %216 = add i64 %214, -10120
  %217 = add i64 %214, 12
  %218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %216, %struct.Memory* %MEMORY.1)
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -65
  %224 = load i8, i8* %AL, align 1
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %223 to i8*
  store i8 %224, i8* %227, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4059e7

block_405986:                                     ; preds = %block_40596c
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -24
  store i64 %229, i64* %RDI, align 8, !tbaa !2428
  %230 = add i64 %195, -7350
  %231 = add i64 %195, 9
  %232 = load i64, i64* %RSP, align 8, !tbaa !2428
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %231, i64* %234, align 8
  store i64 %233, i64* %RSP, align 8, !tbaa !2428
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  %235 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %230, %struct.Memory* %MEMORY.2)
  %236 = load i64*, i64** %55, align 8
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC, align 8
  %239 = load i64, i64* %236, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = add i64 %237, 7
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %243, align 8
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -24
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %244, -48
  %251 = add i64 %246, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  store i64 %249, i64* %252, align 8
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -48
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %254 to i64*
  %258 = load i64, i64* %257, align 8
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = add i64 %253, -56
  %260 = add i64 %255, 8
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  store i64 %258, i64* %261, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4059a6

block_4059c2:                                     ; preds = %block_4059a6
  %262 = add i64 %175, 37
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br label %block_4059e7

block_405981:                                     ; preds = %block_40596c
  %263 = load i64, i64* %RSP, align 8
  %264 = add i64 %263, 96
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %265 = icmp ugt i64 %263, -97
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %13, align 1, !tbaa !2433
  %267 = trunc i64 %264 to i32
  %268 = and i32 %267, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #9
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %14, align 1, !tbaa !2447
  %273 = xor i64 %264, %263
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %15, align 1, !tbaa !2448
  %277 = icmp eq i64 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %16, align 1, !tbaa !2449
  %279 = lshr i64 %264, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %17, align 1, !tbaa !2450
  %281 = lshr i64 %263, 63
  %282 = xor i64 %279, %281
  %283 = add nuw nsw i64 %282, %279
  %284 = icmp eq i64 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %18, align 1, !tbaa !2451
  %286 = add i64 %195, 209
  store i64 %286, i64* %PC, align 8
  %287 = add i64 %263, 104
  %288 = inttoptr i64 %264 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RBP, align 8, !tbaa !2428
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %195, 210
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = add i64 %263, 112
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401df0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e01

block_401e0f:                                     ; preds = %block_401e01
  %34 = add i64 %113, 4
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %82, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -9
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %27, align 1, !tbaa !2433
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %28, align 1, !tbaa !2447
  %45 = xor i64 %36, %35
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2448
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %30, align 1, !tbaa !2449
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %31, align 1, !tbaa !2450
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %32, align 1, !tbaa !2451
  %58 = add i64 %113, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %82, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64*, i64** %33, align 8
  %66 = add i64 %61, 7
  store i64 %66, i64* %PC, align 8
  store i64 %64, i64* %65, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -36
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  br label %block_401e01

block_401e2a:                                     ; preds = %block_401e01
  %69 = add i64 %113, 1
  store i64 %69, i64* %PC, align 8
  %70 = load i64, i64* %5, align 8, !tbaa !2428
  %71 = add i64 %70, 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RBP, align 8, !tbaa !2428
  store i64 %71, i64* %5, align 8, !tbaa !2428
  %74 = add i64 %113, 2
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %77 = add i64 %70, 16
  store i64 %77, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e01:                                     ; preds = %block_401e0f, %block_401df0
  %78 = phi i64 [ %68, %block_401e0f ], [ %.pre, %block_401df0 ]
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = add i64 %78, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = add i64 %79, -24
  %85 = add i64 %78, 8
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %83, %87
  %89 = icmp ult i64 %83, %87
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %27, align 1, !tbaa !2433
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #9
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %28, align 1, !tbaa !2447
  %97 = xor i64 %87, %83
  %98 = xor i64 %97, %88
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %29, align 1, !tbaa !2448
  %102 = icmp eq i64 %88, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %88, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %31, align 1, !tbaa !2450
  %106 = lshr i64 %83, 63
  %107 = lshr i64 %87, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %104, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2451
  %.v = select i1 %102, i64 41, i64 14
  %113 = add i64 %78, %.v
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_401e2a, label %block_401e0f
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403300:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %49 = load i64, i64* %48, align 1
  %50 = inttoptr i64 %45 to i64*
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RDI, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %RDX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = add i64 %63, -48
  %70 = add i64 %65, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -48
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  %79 = lshr i64 %78, 63
  %80 = trunc i64 %79 to i8
  %81 = shl i64 %78, 1
  %82 = icmp slt i64 %78, 0
  %83 = icmp slt i64 %81, 0
  %84 = xor i1 %82, %83
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  store i8 %80, i8* %14, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 254
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %91 = icmp eq i64 %81, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %30, align 1, !tbaa !2432
  %93 = lshr i64 %78, 62
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %33, align 1, !tbaa !2432
  %96 = zext i1 %84 to i8
  store i8 %96, i8* %39, align 1, !tbaa !2432
  %97 = add i64 %72, -40
  %98 = add i64 %74, 16
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %81, i64* %99, align 8
  %100 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403334

block_403418:                                     ; preds = %block_403334
  %CL = bitcast %union.anon* %4 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %101 = add i64 %302, 4
  store i64 %101, i64* %PC, align 8
  %102 = load i64, i64* %269, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %302, 8
  store i64 %103, i64* %PC, align 8
  %104 = load i64, i64* %273, align 8
  %105 = sub i64 %102, %104
  %106 = icmp ult i64 %102, %104
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %14, align 1, !tbaa !2433
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #9
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %21, align 1, !tbaa !2447
  %114 = xor i64 %104, %102
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %27, align 1, !tbaa !2448
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %30, align 1, !tbaa !2449
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %33, align 1, !tbaa !2450
  %123 = lshr i64 %102, 63
  %124 = lshr i64 %104, 63
  %125 = xor i64 %124, %123
  %126 = xor i64 %121, %123
  %127 = add nuw nsw i64 %126, %125
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %39, align 1, !tbaa !2451
  %.v21 = select i1 %119, i64 14, i64 105
  %130 = add i64 %302, %.v21
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %119, label %block_403426, label %block_403481

block_4034f3:                                     ; preds = %block_4034e0
  %131 = add i64 %578, -40
  %132 = add i64 %590, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RSI, align 8, !tbaa !2428
  %135 = add i64 %590, -547
  %136 = add i64 %590, 13
  %137 = load i64, i64* %RSP, align 8, !tbaa !2428
  %138 = add i64 %137, -8
  %139 = inttoptr i64 %138 to i64*
  store i64 %136, i64* %139, align 8
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %140 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %135, %struct.Memory* %MEMORY.3)
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -112
  %143 = load i64, i64* %PC, align 8
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX, align 8
  %145 = add i64 %143, 8
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i64*
  store i64 %144, i64* %146, align 8
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, -1160
  %149 = add i64 %147, 5
  %150 = load i64, i64* %RSP, align 8, !tbaa !2428
  %151 = add i64 %150, -8
  %152 = inttoptr i64 %151 to i64*
  store i64 %149, i64* %152, align 8
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %153 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %148, %struct.Memory* %140)
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -8
  %156 = load i64, i64* %PC, align 8
  store i64 %155, i64* %RDI, align 8, !tbaa !2428
  %157 = add i64 %154, -48
  %158 = add i64 %156, 8
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = add i64 %154, -168
  %162 = load i64, i64* %RAX, align 8
  %163 = add i64 %156, 15
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  store i64 %162, i64* %164, align 8
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, -588
  %167 = add i64 %165, 5
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %166, %struct.Memory* %153)
  %172 = load i64, i64* %RBP, align 8
  %173 = add i64 %172, -120
  %174 = load i64, i64* %PC, align 8
  store i64 %173, i64* %RDI, align 8, !tbaa !2428
  %175 = load i64, i64* %RAX, align 8
  %176 = add i64 %174, 8
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %173 to i64*
  store i64 %175, i64* %177, align 8
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, -1193
  %180 = add i64 %178, 5
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %179, %struct.Memory* %171)
  %185 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -168
  %188 = add i64 %185, 14
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RDI, align 8, !tbaa !2428
  %191 = add i64 %185, 17
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RDX, align 8, !tbaa !2428
  %194 = load i64*, i64** %100, align 8
  %195 = add i64 %185, 20
  store i64 %195, i64* %PC, align 8
  store i64 %193, i64* %194, align 8
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -40
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %196, -48
  %203 = add i64 %198, 8
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  store i64 %201, i64* %204, align 8
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -48
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, -1
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = icmp eq i64 %210, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %14, align 1, !tbaa !2433
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #9
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %21, align 1, !tbaa !2447
  %220 = xor i64 %211, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %27, align 1, !tbaa !2448
  %224 = icmp eq i64 %211, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %30, align 1, !tbaa !2449
  %226 = lshr i64 %211, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %33, align 1, !tbaa !2450
  %228 = lshr i64 %210, 63
  %229 = xor i64 %226, %228
  %230 = add nuw nsw i64 %229, %228
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %39, align 1, !tbaa !2451
  %233 = ashr i64 %211, 63
  store i64 %233, i64* %RDX, align 8, !tbaa !2428
  %234 = load i64, i64* %RSI, align 8
  %235 = add i64 %207, 13
  store i64 %235, i64* %PC, align 8
  %236 = sext i64 %234 to i128
  %237 = and i128 %236, -18446744073709551616
  %238 = zext i64 %233 to i128
  %239 = shl nuw i128 %238, 64
  %240 = zext i64 %211 to i128
  %241 = or i128 %239, %240
  %242 = zext i64 %234 to i128
  %243 = or i128 %237, %242
  %244 = sdiv i128 %241, %243
  %245 = trunc i128 %244 to i64
  %246 = and i128 %244, 18446744073709551615
  %247 = sext i64 %245 to i128
  %248 = and i128 %247, -18446744073709551616
  %249 = or i128 %248, %246
  %250 = icmp eq i128 %244, %249
  br i1 %250, label %253, label %251

; <label>:251:                                    ; preds = %block_4034f3
  %252 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %235, %struct.Memory* %184) #12
  %.pre16 = load i64, i64* %RBP, align 8
  %.pre17 = load i64, i64* %RAX, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:253:                                    ; preds = %block_4034f3
  %254 = srem i128 %241, %243
  %255 = trunc i128 %254 to i64
  store i64 %245, i64* %661, align 8, !tbaa !2428
  store i64 %255, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %253, %251
  %256 = phi i64 [ %.pre18, %251 ], [ %235, %253 ]
  %257 = phi i64 [ %.pre17, %251 ], [ %245, %253 ]
  %258 = phi i64 [ %.pre16, %251 ], [ %205, %253 ]
  %259 = phi %struct.Memory* [ %252, %251 ], [ %184, %253 ]
  %260 = add i64 %258, -40
  %261 = add i64 %256, 4
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  store i64 %257, i64* %262, align 8
  %263 = load i64, i64* %PC, align 8
  %264 = add i64 %263, -191
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  br label %block_40349c

block_403334:                                     ; preds = %block_4033ac, %block_403300
  %265 = phi i64 [ %.pre, %block_403300 ], [ %526, %block_4033ac ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_403300 ], [ %446, %block_4033ac ]
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -40
  %268 = add i64 %265, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %266, -24
  %272 = add i64 %265, 8
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = sub i64 %270, %274
  %276 = icmp ult i64 %270, %274
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %14, align 1, !tbaa !2433
  %278 = trunc i64 %275 to i32
  %279 = and i32 %278, 255
  %280 = tail call i32 @llvm.ctpop.i32(i32 %279) #9
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  store i8 %283, i8* %21, align 1, !tbaa !2447
  %284 = xor i64 %274, %270
  %285 = xor i64 %284, %275
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %27, align 1, !tbaa !2448
  %289 = icmp eq i64 %275, 0
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %30, align 1, !tbaa !2449
  %291 = lshr i64 %275, 63
  %292 = trunc i64 %291 to i8
  store i8 %292, i8* %33, align 1, !tbaa !2450
  %293 = lshr i64 %270, 63
  %294 = lshr i64 %274, 63
  %295 = xor i64 %294, %293
  %296 = xor i64 %291, %293
  %297 = add nuw nsw i64 %296, %295
  %298 = icmp eq i64 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %39, align 1, !tbaa !2451
  %300 = icmp ne i8 %292, 0
  %301 = xor i1 %300, %298
  %.v20 = select i1 %301, i64 14, i64 228
  %302 = add i64 %265, %.v20
  store i64 %302, i64* %PC, align 8, !tbaa !2428
  br i1 %301, label %block_403342, label %block_403418

block_4034ee:                                     ; preds = %block_4034e0
  %303 = add i64 %578, -48
  %304 = add i64 %590, 122
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %303 to i64*
  %306 = load i64, i64* %305, align 8
  store i64 %306, i64* %RSI, align 8, !tbaa !2428
  %307 = add i64 %590, -542
  %308 = add i64 %590, 127
  %309 = load i64, i64* %RSP, align 8, !tbaa !2428
  %310 = add i64 %309, -8
  %311 = inttoptr i64 %310 to i64*
  store i64 %308, i64* %311, align 8
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  %312 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %307, %struct.Memory* %MEMORY.3)
  %313 = load i64, i64* %RBP, align 8
  %314 = add i64 %313, -128
  %315 = load i64, i64* %PC, align 8
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %316 = load i64, i64* %RAX, align 8
  %317 = add i64 %315, 8
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %314 to i64*
  store i64 %316, i64* %318, align 8
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, -1269
  %321 = add i64 %319, 5
  %322 = load i64, i64* %RSP, align 8, !tbaa !2428
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324, align 8
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  store i64 %320, i64* %PC, align 8, !tbaa !2428
  %325 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %320, %struct.Memory* %312)
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -16
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RSI, align 8, !tbaa !2428
  %332 = load i64*, i64** %100, align 8
  %333 = add i64 %328, 7
  store i64 %333, i64* %PC, align 8
  store i64 %331, i64* %332, align 8
  %334 = load i64, i64* %RSP, align 8
  %335 = load i64, i64* %PC, align 8
  %336 = add i64 %334, 176
  store i64 %336, i64* %RSP, align 8, !tbaa !2428
  %337 = icmp ugt i64 %334, -177
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %14, align 1, !tbaa !2433
  %339 = trunc i64 %336 to i32
  %340 = and i32 %339, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340) #9
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %21, align 1, !tbaa !2447
  %345 = xor i64 %334, 16
  %346 = xor i64 %345, %336
  %347 = lshr i64 %346, 4
  %348 = trunc i64 %347 to i8
  %349 = and i8 %348, 1
  store i8 %349, i8* %27, align 1, !tbaa !2448
  %350 = icmp eq i64 %336, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %30, align 1, !tbaa !2449
  %352 = lshr i64 %336, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %33, align 1, !tbaa !2450
  %354 = lshr i64 %334, 63
  %355 = xor i64 %352, %354
  %356 = add nuw nsw i64 %355, %352
  %357 = icmp eq i64 %356, 2
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %39, align 1, !tbaa !2451
  %359 = add i64 %335, 8
  store i64 %359, i64* %PC, align 8
  %360 = add i64 %334, 184
  %361 = inttoptr i64 %336 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RBP, align 8, !tbaa !2428
  store i64 %360, i64* %RSP, align 8, !tbaa !2428
  %363 = add i64 %335, 9
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %360 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  %366 = add i64 %334, 192
  store i64 %366, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %325

block_40339b:                                     ; preds = %block_403342
  %367 = add i64 %901, 17
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br label %block_4033ac

block_4033ac:                                     ; preds = %block_4033a0, %block_40339b
  %368 = phi i64 [ %.pre19, %block_4033a0 ], [ %367, %block_40339b ]
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -8
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = add i64 %369, -40
  %372 = add i64 %368, 8
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = add i64 %374, -1
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = icmp eq i64 %374, 0
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %14, align 1, !tbaa !2433
  %378 = trunc i64 %375 to i32
  %379 = and i32 %378, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #9
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %21, align 1, !tbaa !2447
  %384 = xor i64 %375, %374
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %27, align 1, !tbaa !2448
  %388 = icmp eq i64 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %30, align 1, !tbaa !2449
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %33, align 1, !tbaa !2450
  %392 = lshr i64 %374, 63
  %393 = xor i64 %390, %392
  %394 = add nuw nsw i64 %393, %392
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %39, align 1, !tbaa !2451
  store i64 %375, i64* %RSI, align 8, !tbaa !2428
  %397 = add i64 %368, -220
  %398 = add i64 %368, 20
  %399 = load i64, i64* %RSP, align 8, !tbaa !2428
  %400 = add i64 %399, -8
  %401 = inttoptr i64 %400 to i64*
  store i64 %398, i64* %401, align 8
  store i64 %400, i64* %RSP, align 8, !tbaa !2428
  store i64 %397, i64* %PC, align 8, !tbaa !2428
  %402 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %397, %struct.Memory* %891)
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -72
  %405 = load i64, i64* %PC, align 8
  store i64 %404, i64* %RDI, align 8, !tbaa !2428
  %406 = load i64, i64* %RAX, align 8
  %407 = add i64 %405, 8
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %404 to i64*
  store i64 %406, i64* %408, align 8
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, -840
  %411 = add i64 %409, 5
  %412 = load i64, i64* %RSP, align 8, !tbaa !2428
  %413 = add i64 %412, -8
  %414 = inttoptr i64 %413 to i64*
  store i64 %411, i64* %414, align 8
  store i64 %413, i64* %RSP, align 8, !tbaa !2428
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  %415 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %410, %struct.Memory* %402)
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -8
  %418 = load i64, i64* %PC, align 8
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %416, -48
  %420 = add i64 %418, 8
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RSI, align 8, !tbaa !2428
  %423 = add i64 %416, -144
  %424 = load i64, i64* %RAX, align 8
  %425 = add i64 %418, 15
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %423 to i64*
  store i64 %424, i64* %426, align 8
  %427 = load i64, i64* %PC, align 8
  %428 = add i64 %427, -268
  %429 = add i64 %427, 5
  %430 = load i64, i64* %RSP, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %429, i64* %432, align 8
  store i64 %431, i64* %RSP, align 8, !tbaa !2428
  store i64 %428, i64* %PC, align 8, !tbaa !2428
  %433 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %428, %struct.Memory* %415)
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -80
  %436 = load i64, i64* %PC, align 8
  store i64 %435, i64* %RDI, align 8, !tbaa !2428
  %437 = load i64, i64* %RAX, align 8
  %438 = add i64 %436, 8
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %435 to i64*
  store i64 %437, i64* %439, align 8
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, -873
  %442 = add i64 %440, 5
  %443 = load i64, i64* %RSP, align 8, !tbaa !2428
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 %442, i64* %445, align 8
  store i64 %444, i64* %RSP, align 8, !tbaa !2428
  store i64 %441, i64* %PC, align 8, !tbaa !2428
  %446 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %441, %struct.Memory* %433)
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -144
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 7
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i64*
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %RSI, align 8, !tbaa !2428
  %453 = add i64 %449, 10
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  %455 = load i64, i64* %454, align 8
  store i64 %455, i64* %RDI, align 8, !tbaa !2428
  %456 = load i64*, i64** %100, align 8
  %457 = add i64 %449, 13
  store i64 %457, i64* %PC, align 8
  store i64 %455, i64* %456, align 8
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -40
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = add i64 %463, -1
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = icmp eq i64 %463, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %14, align 1, !tbaa !2433
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #9
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %21, align 1, !tbaa !2447
  %473 = xor i64 %464, %463
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %27, align 1, !tbaa !2448
  %477 = icmp eq i64 %464, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %30, align 1, !tbaa !2449
  %479 = lshr i64 %464, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %33, align 1, !tbaa !2450
  %481 = lshr i64 %463, 63
  %482 = xor i64 %479, %481
  %483 = add nuw nsw i64 %482, %481
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %39, align 1, !tbaa !2451
  %486 = add i64 %458, -48
  %487 = add i64 %460, 12
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  store i64 %464, i64* %488, align 8
  %489 = load i64, i64* %RBP, align 8
  %490 = add i64 %489, -40
  %491 = load i64, i64* %PC, align 8
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %490 to i64*
  %494 = load i64, i64* %493, align 8
  store i64 %494, i64* %RAX, align 8, !tbaa !2428
  %495 = add i64 %491, 8
  store i64 %495, i64* %PC, align 8
  %496 = load i64, i64* %493, align 8
  %497 = add i64 %496, %494
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = icmp ult i64 %497, %494
  %499 = icmp ult i64 %497, %496
  %500 = or i1 %498, %499
  %501 = zext i1 %500 to i8
  store i8 %501, i8* %14, align 1, !tbaa !2433
  %502 = trunc i64 %497 to i32
  %503 = and i32 %502, 255
  %504 = tail call i32 @llvm.ctpop.i32(i32 %503) #9
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  %507 = xor i8 %506, 1
  store i8 %507, i8* %21, align 1, !tbaa !2447
  %508 = xor i64 %496, %494
  %509 = xor i64 %508, %497
  %510 = lshr i64 %509, 4
  %511 = trunc i64 %510 to i8
  %512 = and i8 %511, 1
  store i8 %512, i8* %27, align 1, !tbaa !2448
  %513 = icmp eq i64 %497, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %30, align 1, !tbaa !2449
  %515 = lshr i64 %497, 63
  %516 = trunc i64 %515 to i8
  store i8 %516, i8* %33, align 1, !tbaa !2450
  %517 = lshr i64 %494, 63
  %518 = lshr i64 %496, 63
  %519 = xor i64 %515, %517
  %520 = xor i64 %515, %518
  %521 = add nuw nsw i64 %519, %520
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %39, align 1, !tbaa !2451
  %524 = add i64 %491, 12
  store i64 %524, i64* %PC, align 8
  store i64 %497, i64* %493, align 8
  %525 = load i64, i64* %PC, align 8
  %526 = add i64 %525, -223
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  br label %block_403334

block_40349c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %527 = phi i64 [ %.pre14, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %264, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.2 = phi %struct.Memory* [ %683, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %259, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %528 = load i64, i64* %RBP, align 8
  %529 = add i64 %528, -48
  %530 = add i64 %527, 8
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %RDX, align 8, !tbaa !2428
  %533 = add i64 %528, -32
  %534 = add i64 %527, 12
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = sub i64 %532, %536
  %538 = icmp ult i64 %532, %536
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %14, align 1, !tbaa !2433
  %540 = trunc i64 %537 to i32
  %541 = and i32 %540, 255
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541) #9
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %21, align 1, !tbaa !2447
  %546 = xor i64 %536, %532
  %547 = xor i64 %546, %537
  %548 = lshr i64 %547, 4
  %549 = trunc i64 %548 to i8
  %550 = and i8 %549, 1
  store i8 %550, i8* %27, align 1, !tbaa !2448
  %551 = icmp eq i64 %537, 0
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %30, align 1, !tbaa !2449
  %553 = lshr i64 %537, 63
  %554 = trunc i64 %553 to i8
  store i8 %554, i8* %33, align 1, !tbaa !2450
  %555 = lshr i64 %532, 63
  %556 = lshr i64 %536, 63
  %557 = xor i64 %556, %555
  %558 = xor i64 %553, %555
  %559 = add nuw nsw i64 %558, %557
  %560 = icmp eq i64 %559, 2
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %39, align 1, !tbaa !2451
  %562 = add i64 %528, -153
  %563 = add i64 %527, 18
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i8*
  store i8 0, i8* %564, align 1
  %565 = load i64, i64* %PC, align 8
  %566 = add i64 %565, 50
  %567 = add i64 %565, 6
  %568 = load i8, i8* %30, align 1, !tbaa !2449
  %569 = icmp ne i8 %568, 0
  %570 = load i8, i8* %33, align 1, !tbaa !2450
  %571 = icmp ne i8 %570, 0
  %572 = load i8, i8* %39, align 1, !tbaa !2451
  %573 = icmp ne i8 %572, 0
  %574 = xor i1 %571, %573
  %575 = or i1 %569, %574
  %576 = select i1 %575, i64 %566, i64 %567
  store i64 %576, i64* %PC, align 8, !tbaa !2428
  br i1 %575, label %block_4034e0, label %block_4034b4

block_4034e0:                                     ; preds = %block_4034b4, %block_40349c
  %577 = phi i64 [ %566, %block_40349c ], [ %.pre15, %block_4034b4 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_40349c ], [ %626, %block_4034b4 ]
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -153
  %580 = add i64 %577, 6
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i8*
  %582 = load i8, i8* %581, align 1
  store i8 %582, i8* %AL, align 1, !tbaa !2432
  %583 = and i8 %582, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %584 = zext i8 %583 to i32
  %585 = tail call i32 @llvm.ctpop.i32(i32 %584) #9
  %586 = trunc i32 %585 to i8
  %587 = xor i8 %586, 1
  store i8 %587, i8* %21, align 1, !tbaa !2447
  %588 = xor i8 %583, 1
  store i8 %588, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %589 = icmp eq i8 %588, 0
  %.v = select i1 %589, i64 19, i64 14
  %590 = add i64 %577, %.v
  store i64 %590, i64* %PC, align 8, !tbaa !2428
  %591 = add i64 %578, -8
  store i64 %591, i64* %RDI, align 8, !tbaa !2428
  br i1 %589, label %block_4034f3, label %block_4034ee

block_4034b4:                                     ; preds = %block_40349c
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -8
  store i64 %593, i64* %RDI, align 8, !tbaa !2428
  %594 = add i64 %592, -40
  %595 = add i64 %576, 8
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %598 = add i64 %576, -484
  %599 = add i64 %576, 13
  %600 = load i64, i64* %RSP, align 8, !tbaa !2428
  %601 = add i64 %600, -8
  %602 = inttoptr i64 %601 to i64*
  store i64 %599, i64* %602, align 8
  store i64 %601, i64* %RSP, align 8, !tbaa !2428
  store i64 %598, i64* %PC, align 8, !tbaa !2428
  %603 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %598, %struct.Memory* %MEMORY.2)
  %604 = load i64, i64* %RBP, align 8
  %605 = add i64 %604, -104
  %606 = load i64, i64* %PC, align 8
  store i64 %605, i64* %RDI, align 8, !tbaa !2428
  %607 = load i64, i64* %RAX, align 8
  %608 = add i64 %606, 8
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %605 to i64*
  store i64 %607, i64* %609, align 8
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, -1097
  %612 = add i64 %610, 5
  %613 = load i64, i64* %RSP, align 8, !tbaa !2428
  %614 = add i64 %613, -8
  %615 = inttoptr i64 %614 to i64*
  store i64 %612, i64* %615, align 8
  store i64 %614, i64* %RSP, align 8, !tbaa !2428
  store i64 %611, i64* %PC, align 8, !tbaa !2428
  %616 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %611, %struct.Memory* %MEMORY.2)
  %617 = load i64, i64* %RBP, align 8
  %618 = add i64 %617, -16
  %619 = load i64, i64* %PC, align 8
  store i64 %618, i64* %RSI, align 8, !tbaa !2428
  %620 = load i64, i64* %RAX, align 8
  store i64 %620, i64* %RDI, align 8, !tbaa !2428
  %621 = add i64 %619, -1070
  %622 = add i64 %619, 12
  %623 = load i64, i64* %RSP, align 8, !tbaa !2428
  %624 = add i64 %623, -8
  %625 = inttoptr i64 %624 to i64*
  store i64 %622, i64* %625, align 8
  store i64 %624, i64* %RSP, align 8, !tbaa !2428
  store i64 %621, i64* %PC, align 8, !tbaa !2428
  %626 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %621, %struct.Memory* %MEMORY.2)
  %627 = load i64, i64* %RBP, align 8
  %628 = add i64 %627, -153
  %629 = load i8, i8* %AL, align 1
  %630 = load i64, i64* %PC, align 8
  %631 = add i64 %630, 6
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %628 to i8*
  store i8 %629, i8* %632, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_4034e0

block_403481:                                     ; preds = %block_403418, %block_403426
  %633 = phi i64 [ %266, %block_403418 ], [ %.pre10, %block_403426 ]
  %634 = phi i64 [ %130, %block_403418 ], [ %.pre9, %block_403426 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_403418 ], [ %761, %block_403426 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %635 = add i64 %633, -48
  %636 = add i64 %634, 11
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i64*
  %638 = load i64, i64* %637, align 8
  %639 = add i64 %638, -1
  %640 = icmp eq i64 %638, 0
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %14, align 1, !tbaa !2433
  %642 = trunc i64 %639 to i32
  %643 = and i32 %642, 255
  %644 = tail call i32 @llvm.ctpop.i32(i32 %643) #9
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  store i8 %647, i8* %21, align 1, !tbaa !2447
  %648 = xor i64 %639, %638
  %649 = lshr i64 %648, 4
  %650 = trunc i64 %649 to i8
  %651 = and i8 %650, 1
  store i8 %651, i8* %27, align 1, !tbaa !2448
  %652 = icmp eq i64 %639, 0
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %30, align 1, !tbaa !2449
  %654 = lshr i64 %639, 63
  %655 = trunc i64 %654 to i8
  store i8 %655, i8* %33, align 1, !tbaa !2450
  %656 = lshr i64 %638, 63
  %657 = xor i64 %654, %656
  %658 = add nuw nsw i64 %657, %656
  %659 = icmp eq i64 %658, 2
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %39, align 1, !tbaa !2451
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %662 = ashr i64 %639, 63
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = add i64 %634, 23
  store i64 %663, i64* %PC, align 8
  %664 = zext i64 %662 to i128
  %665 = shl nuw i128 %664, 64
  %666 = zext i64 %639 to i128
  %667 = or i128 %665, %666
  %668 = sdiv i128 %667, 2
  %669 = trunc i128 %668 to i64
  %670 = and i128 %668, 18446744073709551615
  %671 = sext i64 %669 to i128
  %672 = and i128 %671, -18446744073709551616
  %673 = or i128 %672, %670
  %674 = icmp eq i128 %668, %673
  br i1 %674, label %677, label %675

; <label>:675:                                    ; preds = %block_403481
  %676 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %663, %struct.Memory* %MEMORY.4) #12
  %.pre11 = load i64, i64* %RBP, align 8
  %.pre12 = load i64, i64* %RAX, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:677:                                    ; preds = %block_403481
  %678 = srem i128 %667, 2
  %679 = trunc i128 %678 to i64
  store i64 %669, i64* %661, align 8, !tbaa !2428
  store i64 %679, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %677, %675
  %680 = phi i64 [ %.pre13, %675 ], [ %663, %677 ]
  %681 = phi i64 [ %.pre12, %675 ], [ %669, %677 ]
  %682 = phi i64 [ %.pre11, %675 ], [ %633, %677 ]
  %683 = phi %struct.Memory* [ %676, %675 ], [ %MEMORY.4, %677 ]
  %684 = add i64 %682, -40
  %685 = add i64 %680, 4
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i64*
  store i64 %681, i64* %686, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_40349c

block_403426:                                     ; preds = %block_403418
  %687 = add i64 %266, -8
  store i64 %687, i64* %RDI, align 8, !tbaa !2428
  %688 = add i64 %130, 8
  store i64 %688, i64* %PC, align 8
  %689 = load i64, i64* %269, align 8
  %690 = add i64 %689, -1
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = icmp eq i64 %689, 0
  %692 = zext i1 %691 to i8
  store i8 %692, i8* %14, align 1, !tbaa !2433
  %693 = trunc i64 %690 to i32
  %694 = and i32 %693, 255
  %695 = tail call i32 @llvm.ctpop.i32(i32 %694) #9
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  store i8 %698, i8* %21, align 1, !tbaa !2447
  %699 = xor i64 %690, %689
  %700 = lshr i64 %699, 4
  %701 = trunc i64 %700 to i8
  %702 = and i8 %701, 1
  store i8 %702, i8* %27, align 1, !tbaa !2448
  %703 = icmp eq i64 %690, 0
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %30, align 1, !tbaa !2449
  %705 = lshr i64 %690, 63
  %706 = trunc i64 %705 to i8
  store i8 %706, i8* %33, align 1, !tbaa !2450
  %707 = lshr i64 %689, 63
  %708 = xor i64 %705, %707
  %709 = add nuw nsw i64 %708, %707
  %710 = icmp eq i64 %709, 2
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %39, align 1, !tbaa !2451
  store i64 %690, i64* %RSI, align 8, !tbaa !2428
  %712 = add i64 %130, -342
  %713 = add i64 %130, 20
  %714 = load i64, i64* %RSP, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %713, i64* %716, align 8
  store i64 %715, i64* %RSP, align 8, !tbaa !2428
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  %717 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %712, %struct.Memory* %MEMORY.0)
  %718 = load i64, i64* %RBP, align 8
  %719 = add i64 %718, -88
  %720 = load i64, i64* %PC, align 8
  store i64 %719, i64* %RDI, align 8, !tbaa !2428
  %721 = load i64, i64* %RAX, align 8
  %722 = add i64 %720, 8
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %719 to i64*
  store i64 %721, i64* %723, align 8
  %724 = load i64, i64* %PC, align 8
  %725 = add i64 %724, -962
  %726 = add i64 %724, 5
  %727 = load i64, i64* %RSP, align 8, !tbaa !2428
  %728 = add i64 %727, -8
  %729 = inttoptr i64 %728 to i64*
  store i64 %726, i64* %729, align 8
  store i64 %728, i64* %RSP, align 8, !tbaa !2428
  store i64 %725, i64* %PC, align 8, !tbaa !2428
  %730 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %725, %struct.Memory* %717)
  %731 = load i64, i64* %RBP, align 8
  %732 = add i64 %731, -8
  %733 = load i64, i64* %PC, align 8
  store i64 %732, i64* %RDI, align 8, !tbaa !2428
  %734 = add i64 %731, -48
  %735 = add i64 %733, 8
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to i64*
  %737 = load i64, i64* %736, align 8
  store i64 %737, i64* %RSI, align 8, !tbaa !2428
  %738 = add i64 %731, -152
  %739 = load i64, i64* %RAX, align 8
  %740 = add i64 %733, 15
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to i64*
  store i64 %739, i64* %741, align 8
  %742 = load i64, i64* %PC, align 8
  %743 = add i64 %742, -390
  %744 = add i64 %742, 5
  %745 = load i64, i64* %RSP, align 8, !tbaa !2428
  %746 = add i64 %745, -8
  %747 = inttoptr i64 %746 to i64*
  store i64 %744, i64* %747, align 8
  store i64 %746, i64* %RSP, align 8, !tbaa !2428
  store i64 %743, i64* %PC, align 8, !tbaa !2428
  %748 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %743, %struct.Memory* %730)
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -96
  %751 = load i64, i64* %PC, align 8
  store i64 %750, i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %RAX, align 8
  %753 = add i64 %751, 8
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %750 to i64*
  store i64 %752, i64* %754, align 8
  %755 = load i64, i64* %PC, align 8
  %756 = add i64 %755, -995
  %757 = add i64 %755, 5
  %758 = load i64, i64* %RSP, align 8, !tbaa !2428
  %759 = add i64 %758, -8
  %760 = inttoptr i64 %759 to i64*
  store i64 %757, i64* %760, align 8
  store i64 %759, i64* %RSP, align 8, !tbaa !2428
  store i64 %756, i64* %PC, align 8, !tbaa !2428
  %761 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %756, %struct.Memory* %748)
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -152
  %764 = load i64, i64* %PC, align 8
  %765 = add i64 %764, 7
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %763 to i64*
  %767 = load i64, i64* %766, align 8
  store i64 %767, i64* %RSI, align 8, !tbaa !2428
  %768 = add i64 %764, 10
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %767 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = load i64*, i64** %100, align 8
  %772 = add i64 %764, 13
  store i64 %772, i64* %PC, align 8
  store i64 %770, i64* %771, align 8
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -40
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %774 to i64*
  %778 = load i64, i64* %777, align 8
  %779 = add i64 %778, -1
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = icmp eq i64 %778, 0
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %14, align 1, !tbaa !2433
  %782 = trunc i64 %779 to i32
  %783 = and i32 %782, 255
  %784 = tail call i32 @llvm.ctpop.i32(i32 %783) #9
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %21, align 1, !tbaa !2447
  %788 = xor i64 %779, %778
  %789 = lshr i64 %788, 4
  %790 = trunc i64 %789 to i8
  %791 = and i8 %790, 1
  store i8 %791, i8* %27, align 1, !tbaa !2448
  %792 = icmp eq i64 %779, 0
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %30, align 1, !tbaa !2449
  %794 = lshr i64 %779, 63
  %795 = trunc i64 %794 to i8
  store i8 %795, i8* %33, align 1, !tbaa !2450
  %796 = lshr i64 %778, 63
  %797 = xor i64 %794, %796
  %798 = add nuw nsw i64 %797, %796
  %799 = icmp eq i64 %798, 2
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %39, align 1, !tbaa !2451
  %801 = add i64 %773, -48
  %802 = add i64 %775, 12
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %801 to i64*
  store i64 %779, i64* %803, align 8
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i64, i64* %RBP, align 8
  br label %block_403481

block_403342:                                     ; preds = %block_403334
  %804 = add i64 %266, -8
  store i64 %804, i64* %RDI, align 8, !tbaa !2428
  %805 = add i64 %302, 8
  store i64 %805, i64* %PC, align 8
  %806 = load i64, i64* %269, align 8
  %807 = add i64 %806, -1
  store i64 %807, i64* %RAX, align 8, !tbaa !2428
  %808 = icmp eq i64 %806, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %14, align 1, !tbaa !2433
  %810 = trunc i64 %807 to i32
  %811 = and i32 %810, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #9
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %21, align 1, !tbaa !2447
  %816 = xor i64 %807, %806
  %817 = lshr i64 %816, 4
  %818 = trunc i64 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %27, align 1, !tbaa !2448
  %820 = icmp eq i64 %807, 0
  %821 = zext i1 %820 to i8
  store i8 %821, i8* %30, align 1, !tbaa !2449
  %822 = lshr i64 %807, 63
  %823 = trunc i64 %822 to i8
  store i8 %823, i8* %33, align 1, !tbaa !2450
  %824 = lshr i64 %806, 63
  %825 = xor i64 %822, %824
  %826 = add nuw nsw i64 %825, %824
  %827 = icmp eq i64 %826, 2
  %828 = zext i1 %827 to i8
  store i8 %828, i8* %39, align 1, !tbaa !2451
  store i64 %807, i64* %RSI, align 8, !tbaa !2428
  %829 = add i64 %302, -114
  %830 = add i64 %302, 20
  %831 = load i64, i64* %RSP, align 8, !tbaa !2428
  %832 = add i64 %831, -8
  %833 = inttoptr i64 %832 to i64*
  store i64 %830, i64* %833, align 8
  store i64 %832, i64* %RSP, align 8, !tbaa !2428
  store i64 %829, i64* %PC, align 8, !tbaa !2428
  %834 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %829, %struct.Memory* %MEMORY.0)
  %835 = load i64, i64* %RBP, align 8
  %836 = add i64 %835, -56
  %837 = load i64, i64* %PC, align 8
  store i64 %836, i64* %RDI, align 8, !tbaa !2428
  %838 = load i64, i64* %RAX, align 8
  %839 = add i64 %837, 8
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %836 to i64*
  store i64 %838, i64* %840, align 8
  %841 = load i64, i64* %PC, align 8
  %842 = add i64 %841, -734
  %843 = add i64 %841, 5
  %844 = load i64, i64* %RSP, align 8, !tbaa !2428
  %845 = add i64 %844, -8
  %846 = inttoptr i64 %845 to i64*
  store i64 %843, i64* %846, align 8
  store i64 %845, i64* %RSP, align 8, !tbaa !2428
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  %847 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %842, %struct.Memory* %MEMORY.0)
  %848 = load i64, i64* %RBP, align 8
  %849 = add i64 %848, -8
  %850 = load i64, i64* %PC, align 8
  store i64 %849, i64* %RDI, align 8, !tbaa !2428
  %851 = add i64 %848, -40
  %852 = add i64 %850, 8
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %RSI, align 8, !tbaa !2428
  %855 = add i64 %848, -136
  %856 = load i64, i64* %RAX, align 8
  %857 = add i64 %850, 15
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %855 to i64*
  store i64 %856, i64* %858, align 8
  %859 = load i64, i64* %PC, align 8
  %860 = add i64 %859, -162
  %861 = add i64 %859, 5
  %862 = load i64, i64* %RSP, align 8, !tbaa !2428
  %863 = add i64 %862, -8
  %864 = inttoptr i64 %863 to i64*
  store i64 %861, i64* %864, align 8
  store i64 %863, i64* %RSP, align 8, !tbaa !2428
  store i64 %860, i64* %PC, align 8, !tbaa !2428
  %865 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %860, %struct.Memory* %MEMORY.0)
  %866 = load i64, i64* %RBP, align 8
  %867 = add i64 %866, -64
  %868 = load i64, i64* %PC, align 8
  store i64 %867, i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RAX, align 8
  %870 = add i64 %868, 8
  store i64 %870, i64* %PC, align 8
  %871 = inttoptr i64 %867 to i64*
  store i64 %869, i64* %871, align 8
  %872 = load i64, i64* %PC, align 8
  %873 = add i64 %872, -767
  %874 = add i64 %872, 5
  %875 = load i64, i64* %RSP, align 8, !tbaa !2428
  %876 = add i64 %875, -8
  %877 = inttoptr i64 %876 to i64*
  store i64 %874, i64* %877, align 8
  store i64 %876, i64* %RSP, align 8, !tbaa !2428
  store i64 %873, i64* %PC, align 8, !tbaa !2428
  %878 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %873, %struct.Memory* %MEMORY.0)
  %879 = load i64, i64* %RBP, align 8
  %880 = add i64 %879, -136
  %881 = load i64, i64* %PC, align 8
  %882 = add i64 %881, 7
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RDI, align 8, !tbaa !2428
  %885 = load i64, i64* %RAX, align 8
  store i64 %885, i64* %RSI, align 8, !tbaa !2428
  %886 = add i64 %881, -740
  %887 = add i64 %881, 15
  %888 = load i64, i64* %RSP, align 8, !tbaa !2428
  %889 = add i64 %888, -8
  %890 = inttoptr i64 %889 to i64*
  store i64 %887, i64* %890, align 8
  store i64 %889, i64* %RSP, align 8, !tbaa !2428
  store i64 %886, i64* %PC, align 8, !tbaa !2428
  %891 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %886, %struct.Memory* %MEMORY.0)
  %892 = load i8, i8* %AL, align 1
  %893 = load i64, i64* %PC, align 8
  %894 = and i8 %892, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %895 = zext i8 %894 to i32
  %896 = tail call i32 @llvm.ctpop.i32(i32 %895) #9
  %897 = trunc i32 %896 to i8
  %898 = xor i8 %897, 1
  store i8 %898, i8* %21, align 1, !tbaa !2447
  %899 = xor i8 %894, 1
  store i8 %899, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %900 = icmp eq i8 %899, 0
  %.v22 = select i1 %900, i64 13, i64 8
  %901 = add i64 %893, %.v22
  store i64 %901, i64* %PC, align 8, !tbaa !2428
  br i1 %900, label %block_4033a0, label %block_40339b

block_4033a0:                                     ; preds = %block_403342
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -40
  %904 = add i64 %901, 4
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  %906 = load i64, i64* %905, align 8
  %907 = add i64 %906, 1
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = icmp eq i64 %906, -1
  %909 = icmp eq i64 %907, 0
  %910 = or i1 %908, %909
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %14, align 1, !tbaa !2433
  %912 = trunc i64 %907 to i32
  %913 = and i32 %912, 255
  %914 = tail call i32 @llvm.ctpop.i32(i32 %913) #9
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = xor i8 %916, 1
  store i8 %917, i8* %21, align 1, !tbaa !2447
  %918 = xor i64 %907, %906
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %27, align 1, !tbaa !2448
  %922 = zext i1 %909 to i8
  store i8 %922, i8* %30, align 1, !tbaa !2449
  %923 = lshr i64 %907, 63
  %924 = trunc i64 %923 to i8
  store i8 %924, i8* %33, align 1, !tbaa !2450
  %925 = lshr i64 %906, 63
  %926 = xor i64 %923, %925
  %927 = add nuw nsw i64 %926, %923
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %39, align 1, !tbaa !2451
  %930 = add i64 %901, 12
  store i64 %930, i64* %PC, align 8
  store i64 %907, i64* %905, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4033ac
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -16
  %14 = load i64, i64* %RDI, align 8
  %15 = add i64 %12, 7
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %16, align 8
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -16
  %19 = load i64, i64* %RSI, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %22, align 8
  %23 = load i64, i64* %RBP, align 8
  %24 = add i64 %23, -24
  %25 = load i64, i64* %RDX, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -32
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %34 = load i64, i64* %33, align 1
  %35 = inttoptr i64 %30 to i64*
  store i64 %34, i64* %35, align 8
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -24
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RDX, align 8, !tbaa !2428
  %42 = add i64 %36, -48
  %43 = add i64 %38, 8
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -48
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %46 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %56 = lshr i64 %51, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %60 = shl i64 %51, 1
  %61 = icmp slt i64 %51, 0
  %62 = icmp slt i64 %60, 0
  %63 = xor i1 %61, %62
  store i64 %60, i64* %RDX, align 8, !tbaa !2428
  store i8 %57, i8* %52, align 1, !tbaa !2432
  %64 = trunc i64 %60 to i32
  %65 = and i32 %64, 254
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #9
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %53, align 1, !tbaa !2432
  store i8 0, i8* %54, align 1, !tbaa !2432
  %70 = icmp eq i64 %60, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %55, align 1, !tbaa !2432
  %72 = lshr i64 %51, 62
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %58, align 1, !tbaa !2432
  %75 = zext i1 %63 to i8
  store i8 %75, i8* %59, align 1, !tbaa !2432
  %76 = add i64 %45, -40
  %77 = add i64 %47, 16
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  store i64 %60, i64* %78, align 8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast i64* %79 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %83 = bitcast i64* %82 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404cbd

block_404cff:                                     ; preds = %block_404cf3, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %84 = phi i64 [ %.pre26, %block_404cf3 ], [ %509, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %85 = load i64, i64* %RBP, align 8
  %86 = add i64 %85, -16
  %87 = add i64 %84, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %85, -40
  %91 = add i64 %84, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, -1
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = icmp eq i64 %93, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %52, align 1, !tbaa !2433
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #9
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %53, align 1, !tbaa !2447
  %103 = xor i64 %94, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %54, align 1, !tbaa !2448
  %107 = icmp eq i64 %94, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %55, align 1, !tbaa !2449
  %109 = lshr i64 %94, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %58, align 1, !tbaa !2450
  %111 = lshr i64 %93, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %111
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %59, align 1, !tbaa !2451
  %116 = shl i64 %94, 3
  %117 = add i64 %116, %89
  %118 = add i64 %84, 17
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %121 = add i64 %84, 21
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %88, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %85, -48
  %124 = add i64 %84, 25
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %RCX, align 8, !tbaa !2428
  %127 = shl i64 %126, 3
  %128 = add i64 %122, %127
  %129 = add i64 %84, 30
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  store i64 %120, i64* %130, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -40
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, -1
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = icmp eq i64 %136, 0
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %52, align 1, !tbaa !2433
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #9
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %53, align 1, !tbaa !2447
  %146 = xor i64 %137, %136
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %54, align 1, !tbaa !2448
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %55, align 1, !tbaa !2449
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %58, align 1, !tbaa !2450
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %154
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %59, align 1, !tbaa !2451
  %159 = add i64 %131, -48
  %160 = add i64 %133, 12
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i64*
  store i64 %137, i64* %161, align 8
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -40
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %164, 8
  store i64 %168, i64* %PC, align 8
  %169 = load i64, i64* %166, align 8
  %170 = add i64 %169, %167
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = icmp ult i64 %170, %167
  %172 = icmp ult i64 %170, %169
  %173 = or i1 %171, %172
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %52, align 1, !tbaa !2433
  %175 = trunc i64 %170 to i32
  %176 = and i32 %175, 255
  %177 = tail call i32 @llvm.ctpop.i32(i32 %176) #9
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  store i8 %180, i8* %53, align 1, !tbaa !2447
  %181 = xor i64 %169, %167
  %182 = xor i64 %181, %170
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  store i8 %185, i8* %54, align 1, !tbaa !2448
  %186 = icmp eq i64 %170, 0
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %55, align 1, !tbaa !2449
  %188 = lshr i64 %170, 63
  %189 = trunc i64 %188 to i8
  store i8 %189, i8* %58, align 1, !tbaa !2450
  %190 = lshr i64 %167, 63
  %191 = lshr i64 %169, 63
  %192 = xor i64 %188, %190
  %193 = xor i64 %188, %191
  %194 = add nuw nsw i64 %192, %193
  %195 = icmp eq i64 %194, 2
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %59, align 1, !tbaa !2451
  %197 = add i64 %164, 12
  store i64 %197, i64* %PC, align 8
  store i64 %170, i64* %166, align 8
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, -120
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  br label %block_404cbd

block_404cbd:                                     ; preds = %block_404cff, %block_404c90
  %200 = phi i64 [ %.pre, %block_404c90 ], [ %199, %block_404cff ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_404c90 ], [ %506, %block_404cff ]
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %200, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %201, -8
  %207 = add i64 %200, 8
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %205, %209
  %211 = icmp ult i64 %205, %209
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %52, align 1, !tbaa !2433
  %213 = trunc i64 %210 to i32
  %214 = and i32 %213, 255
  %215 = tail call i32 @llvm.ctpop.i32(i32 %214) #9
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  store i8 %218, i8* %53, align 1, !tbaa !2447
  %219 = xor i64 %209, %205
  %220 = xor i64 %219, %210
  %221 = lshr i64 %220, 4
  %222 = trunc i64 %221 to i8
  %223 = and i8 %222, 1
  store i8 %223, i8* %54, align 1, !tbaa !2448
  %224 = icmp eq i64 %210, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %55, align 1, !tbaa !2449
  %226 = lshr i64 %210, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %58, align 1, !tbaa !2450
  %228 = lshr i64 %205, 63
  %229 = lshr i64 %209, 63
  %230 = xor i64 %229, %228
  %231 = xor i64 %226, %228
  %232 = add nuw nsw i64 %231, %230
  %233 = icmp eq i64 %232, 2
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %59, align 1, !tbaa !2451
  %235 = icmp ne i8 %227, 0
  %236 = xor i1 %235, %233
  %.v27 = select i1 %236, i64 14, i64 125
  %237 = add i64 %200, %.v27
  store i64 %237, i64* %PC, align 8, !tbaa !2428
  br i1 %236, label %block_404ccb, label %block_404d3a

block_404d72:                                     ; preds = %block_404d3a, %block_404d48
  %238 = phi i64 [ %201, %block_404d3a ], [ %.pre11, %block_404d48 ]
  %239 = phi i64 [ %736, %block_404d3a ], [ %.pre10, %block_404d48 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %240 = add i64 %238, -48
  %241 = add i64 %239, 11
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, -1
  %245 = icmp eq i64 %243, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %52, align 1, !tbaa !2433
  %247 = trunc i64 %244 to i32
  %248 = and i32 %247, 255
  %249 = tail call i32 @llvm.ctpop.i32(i32 %248) #9
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  store i8 %252, i8* %53, align 1, !tbaa !2447
  %253 = xor i64 %244, %243
  %254 = lshr i64 %253, 4
  %255 = trunc i64 %254 to i8
  %256 = and i8 %255, 1
  store i8 %256, i8* %54, align 1, !tbaa !2448
  %257 = icmp eq i64 %244, 0
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %55, align 1, !tbaa !2449
  %259 = lshr i64 %244, 63
  %260 = trunc i64 %259 to i8
  store i8 %260, i8* %58, align 1, !tbaa !2450
  %261 = lshr i64 %243, 63
  %262 = xor i64 %259, %261
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %59, align 1, !tbaa !2451
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %268 = ashr i64 %244, 63
  store i64 %268, i64* %266, align 8, !tbaa !2428
  %269 = add i64 %239, 23
  store i64 %269, i64* %PC, align 8
  %270 = zext i64 %268 to i128
  %271 = shl nuw i128 %270, 64
  %272 = zext i64 %244 to i128
  %273 = or i128 %272, %271
  %274 = sdiv i128 %273, 2
  %275 = trunc i128 %274 to i64
  %276 = and i128 %274, 18446744073709551615
  %277 = sext i64 %275 to i128
  %278 = and i128 %277, -18446744073709551616
  %279 = or i128 %278, %276
  %280 = icmp eq i128 %274, %279
  br i1 %280, label %283, label %281

; <label>:281:                                    ; preds = %block_404d72
  %282 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %269, %struct.Memory* %MEMORY.1) #12
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:283:                                    ; preds = %block_404d72
  %284 = srem i128 %273, 2
  %285 = trunc i128 %284 to i64
  store i64 %275, i64* %267, align 8, !tbaa !2428
  store i64 %285, i64* %266, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2433
  store i8 0, i8* %53, align 1, !tbaa !2447
  store i8 0, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %58, align 1, !tbaa !2450
  store i8 0, i8* %59, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %283, %281
  %286 = phi i64 [ %.pre14, %281 ], [ %269, %283 ]
  %287 = phi i64 [ %.pre13, %281 ], [ %275, %283 ]
  %288 = phi i64 [ %.pre12, %281 ], [ %238, %283 ]
  %289 = phi %struct.Memory* [ %282, %281 ], [ %MEMORY.1, %283 ]
  %290 = add i64 %288, -40
  %291 = add i64 %286, 4
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  store i64 %287, i64* %292, align 8
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404d8d

block_404dce:                                     ; preds = %block_404dbe
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %293 = add i64 %640, -16
  %294 = add i64 %652, 11
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RDX, align 8, !tbaa !2428
  %297 = add i64 %640, -40
  %298 = add i64 %652, 15
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299, align 8
  store i64 %300, i64* %RSI, align 8, !tbaa !2428
  %301 = shl i64 %300, 3
  %302 = add i64 %296, %301
  %303 = add i64 %652, 20
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %306 = add i64 %652, 24
  store i64 %306, i64* %PC, align 8
  %307 = load i64, i64* %295, align 8
  store i64 %307, i64* %RDX, align 8, !tbaa !2428
  %308 = add i64 %640, -48
  %309 = add i64 %652, 28
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %308 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %RSI, align 8, !tbaa !2428
  %312 = shl i64 %311, 3
  %313 = add i64 %307, %312
  %314 = add i64 %652, 33
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  store i64 %305, i64* %315, align 8
  %316 = load i64, i64* %RBP, align 8
  %317 = add i64 %316, -40
  %318 = load i64, i64* %PC, align 8
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %317 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = add i64 %316, -48
  %323 = add i64 %318, 8
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  store i64 %321, i64* %324, align 8
  %325 = load i64, i64* %RBP, align 8
  %326 = add i64 %325, -48
  %327 = load i64, i64* %PC, align 8
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %326 to i64*
  %330 = load i64, i64* %329, align 8
  %331 = add i64 %330, -1
  %332 = icmp eq i64 %330, 0
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %52, align 1, !tbaa !2433
  %334 = trunc i64 %331 to i32
  %335 = and i32 %334, 255
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #9
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  store i8 %339, i8* %53, align 1, !tbaa !2447
  %340 = xor i64 %331, %330
  %341 = lshr i64 %340, 4
  %342 = trunc i64 %341 to i8
  %343 = and i8 %342, 1
  store i8 %343, i8* %54, align 1, !tbaa !2448
  %344 = icmp eq i64 %331, 0
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %55, align 1, !tbaa !2449
  %346 = lshr i64 %331, 63
  %347 = trunc i64 %346 to i8
  store i8 %347, i8* %58, align 1, !tbaa !2450
  %348 = lshr i64 %330, 63
  %349 = xor i64 %346, %348
  %350 = add nuw nsw i64 %349, %348
  %351 = icmp eq i64 %350, 2
  %352 = zext i1 %351 to i8
  store i8 %352, i8* %59, align 1, !tbaa !2451
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %353 = ashr i64 %331, 63
  store i64 %353, i64* %266, align 8, !tbaa !2428
  %354 = load i64, i64* %RCX, align 8
  %355 = add i64 %327, 16
  store i64 %355, i64* %PC, align 8
  %356 = sext i64 %354 to i128
  %357 = and i128 %356, -18446744073709551616
  %358 = zext i64 %353 to i128
  %359 = shl nuw i128 %358, 64
  %360 = zext i64 %331 to i128
  %361 = or i128 %359, %360
  %362 = zext i64 %354 to i128
  %363 = or i128 %357, %362
  %364 = sdiv i128 %361, %363
  %365 = trunc i128 %364 to i64
  %366 = and i128 %364, 18446744073709551615
  %367 = sext i64 %365 to i128
  %368 = and i128 %367, -18446744073709551616
  %369 = or i128 %368, %366
  %370 = icmp eq i128 %364, %369
  br i1 %370, label %373, label %371

; <label>:371:                                    ; preds = %block_404dce
  %372 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %355, %struct.Memory* %MEMORY.4) #12
  %.pre20 = load i64, i64* %RBP, align 8
  %.pre21 = load i64, i64* %RAX, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:373:                                    ; preds = %block_404dce
  %374 = srem i128 %361, %363
  %375 = trunc i128 %374 to i64
  store i64 %365, i64* %267, align 8, !tbaa !2428
  store i64 %375, i64* %266, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2433
  store i8 0, i8* %53, align 1, !tbaa !2447
  store i8 0, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %58, align 1, !tbaa !2450
  store i8 0, i8* %59, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %373, %371
  %376 = phi i64 [ %.pre22, %371 ], [ %355, %373 ]
  %377 = phi i64 [ %.pre21, %371 ], [ %365, %373 ]
  %378 = phi i64 [ %.pre20, %371 ], [ %325, %373 ]
  %379 = phi %struct.Memory* [ %372, %371 ], [ %MEMORY.4, %373 ]
  %380 = add i64 %378, -40
  %381 = add i64 %376, 4
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  store i64 %377, i64* %382, align 8
  %383 = load i64, i64* %PC, align 8
  %384 = add i64 %383, -126
  store i64 %384, i64* %PC, align 8, !tbaa !2428
  br label %block_404d8d

block_404d8d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %385 = phi i64 [ %.pre15, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ], [ %384, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %289, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2 ], [ %379, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %52, align 1, !tbaa !2433
  store i8 1, i8* %53, align 1, !tbaa !2447
  store i8 1, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %58, align 1, !tbaa !2450
  store i8 0, i8* %59, align 1, !tbaa !2451
  store i8 0, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -48
  %388 = add i64 %385, 8
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  store i64 %390, i64* %RDX, align 8, !tbaa !2428
  %391 = add i64 %386, -24
  %392 = add i64 %385, 12
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %391 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = sub i64 %390, %394
  %396 = icmp ult i64 %390, %394
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %52, align 1, !tbaa !2433
  %398 = trunc i64 %395 to i32
  %399 = and i32 %398, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #9
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %53, align 1, !tbaa !2447
  %404 = xor i64 %394, %390
  %405 = xor i64 %404, %395
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  store i8 %408, i8* %54, align 1, !tbaa !2448
  %409 = icmp eq i64 %395, 0
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %55, align 1, !tbaa !2449
  %411 = lshr i64 %395, 63
  %412 = trunc i64 %411 to i8
  store i8 %412, i8* %58, align 1, !tbaa !2450
  %413 = lshr i64 %390, 63
  %414 = lshr i64 %394, 63
  %415 = xor i64 %414, %413
  %416 = xor i64 %411, %413
  %417 = add nuw nsw i64 %416, %415
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %59, align 1, !tbaa !2451
  %420 = add i64 %386, -49
  %421 = add i64 %385, 15
  store i64 %421, i64* %PC, align 8
  %422 = inttoptr i64 %420 to i8*
  store i8 0, i8* %422, align 1
  %423 = load i64, i64* %PC, align 8
  %424 = add i64 %423, 34
  %425 = add i64 %423, 6
  %426 = load i8, i8* %55, align 1, !tbaa !2449
  %427 = icmp ne i8 %426, 0
  %428 = load i8, i8* %58, align 1, !tbaa !2450
  %429 = icmp ne i8 %428, 0
  %430 = load i8, i8* %59, align 1, !tbaa !2451
  %431 = icmp ne i8 %430, 0
  %432 = xor i1 %429, %431
  %433 = or i1 %427, %432
  %434 = select i1 %433, i64 %424, i64 %425
  store i64 %434, i64* %PC, align 8, !tbaa !2428
  br i1 %433, label %block_404dbe, label %block_404da2

block_404ccb:                                     ; preds = %block_404cbd
  %435 = add i64 %201, -16
  %436 = add i64 %237, 4
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i64*
  %438 = load i64, i64* %437, align 8
  store i64 %438, i64* %RAX, align 8, !tbaa !2428
  %439 = add i64 %237, 8
  store i64 %439, i64* %PC, align 8
  %440 = load i64, i64* %204, align 8
  %441 = add i64 %440, -1
  store i64 %441, i64* %RCX, align 8, !tbaa !2428
  %442 = icmp eq i64 %440, 0
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %52, align 1, !tbaa !2433
  %444 = trunc i64 %441 to i32
  %445 = and i32 %444, 255
  %446 = tail call i32 @llvm.ctpop.i32(i32 %445) #9
  %447 = trunc i32 %446 to i8
  %448 = and i8 %447, 1
  %449 = xor i8 %448, 1
  store i8 %449, i8* %53, align 1, !tbaa !2447
  %450 = xor i64 %441, %440
  %451 = lshr i64 %450, 4
  %452 = trunc i64 %451 to i8
  %453 = and i8 %452, 1
  store i8 %453, i8* %54, align 1, !tbaa !2448
  %454 = icmp eq i64 %441, 0
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %55, align 1, !tbaa !2449
  %456 = lshr i64 %441, 63
  %457 = trunc i64 %456 to i8
  store i8 %457, i8* %58, align 1, !tbaa !2450
  %458 = lshr i64 %440, 63
  %459 = xor i64 %456, %458
  %460 = add nuw nsw i64 %459, %458
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %59, align 1, !tbaa !2451
  %463 = shl i64 %441, 3
  %464 = add i64 %463, %438
  %465 = add i64 %237, 17
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %464 to i64*
  %467 = load i64, i64* %466, align 8
  store i64 %467, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %468 = add i64 %237, 21
  store i64 %468, i64* %PC, align 8
  %469 = load i64, i64* %437, align 8
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = add i64 %237, 25
  store i64 %470, i64* %PC, align 8
  %471 = load i64, i64* %204, align 8
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = shl i64 %471, 3
  %473 = add i64 %469, %472
  %474 = add i64 %237, 30
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to i64*
  %476 = load i64, i64* %475, align 8
  store i64 %476, i64* %81, align 1, !tbaa !2452
  store double 0.000000e+00, double* %83, align 1, !tbaa !2452
  %477 = add i64 %237, 34
  store i64 %477, i64* %PC, align 8
  %.cast7 = bitcast i64 %476 to double
  %478 = bitcast i64 %467 to double
  %479 = fcmp uno double %.cast7, %478
  br i1 %479, label %480, label %490

; <label>:480:                                    ; preds = %block_404ccb
  %481 = fadd double %.cast7, %478
  %482 = bitcast double %481 to i64
  %483 = and i64 %482, 9221120237041090560
  %484 = icmp eq i64 %483, 9218868437227405312
  %485 = and i64 %482, 2251799813685247
  %486 = icmp ne i64 %485, 0
  %487 = and i1 %484, %486
  br i1 %487, label %488, label %496

; <label>:488:                                    ; preds = %480
  %489 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %477, %struct.Memory* %MEMORY.1) #12
  %.pre23 = load i64, i64* %PC, align 8
  %.pre24 = load i8, i8* %52, align 1, !tbaa !2433
  %.pre25 = load i8, i8* %55, align 1, !tbaa !2449
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:490:                                    ; preds = %block_404ccb
  %491 = fcmp ogt double %.cast7, %478
  br i1 %491, label %496, label %492

; <label>:492:                                    ; preds = %490
  %493 = fcmp olt double %.cast7, %478
  br i1 %493, label %496, label %494

; <label>:494:                                    ; preds = %492
  %495 = fcmp oeq double %.cast7, %478
  br i1 %495, label %496, label %500

; <label>:496:                                    ; preds = %494, %492, %490, %480
  %497 = phi i8 [ 0, %490 ], [ 0, %492 ], [ 1, %494 ], [ 1, %480 ]
  %498 = phi i8 [ 0, %490 ], [ 0, %492 ], [ 0, %494 ], [ 1, %480 ]
  %499 = phi i8 [ 0, %490 ], [ 1, %492 ], [ 0, %494 ], [ 1, %480 ]
  store i8 %497, i8* %55, align 1, !tbaa !2432
  store i8 %498, i8* %53, align 1, !tbaa !2432
  store i8 %499, i8* %52, align 1, !tbaa !2432
  br label %500

; <label>:500:                                    ; preds = %496, %494
  %501 = phi i8 [ %497, %496 ], [ %455, %494 ]
  %502 = phi i8 [ %499, %496 ], [ %443, %494 ]
  store i8 0, i8* %59, align 1, !tbaa !2432
  store i8 0, i8* %58, align 1, !tbaa !2432
  store i8 0, i8* %54, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %500, %488
  %503 = phi i8 [ %.pre25, %488 ], [ %501, %500 ]
  %504 = phi i8 [ %.pre24, %488 ], [ %502, %500 ]
  %505 = phi i64 [ %.pre23, %488 ], [ %477, %500 ]
  %506 = phi %struct.Memory* [ %489, %488 ], [ %MEMORY.1, %500 ]
  %507 = or i8 %503, %504
  %508 = icmp ne i8 %507, 0
  %.v29 = select i1 %508, i64 18, i64 6
  %509 = add i64 %505, %.v29
  store i64 %509, i64* %PC, align 8, !tbaa !2428
  br i1 %508, label %block_404cff, label %block_404cf3

block_404dc9:                                     ; preds = %block_404dbe
  %510 = add i64 %640, -32
  %511 = add i64 %652, 76
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i64*
  %513 = load i64, i64* %512, align 8
  store i64 %513, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %514 = add i64 %640, -16
  %515 = add i64 %652, 80
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %514 to i64*
  %517 = load i64, i64* %516, align 8
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = add i64 %640, -48
  %519 = add i64 %652, 84
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i64*
  %521 = load i64, i64* %520, align 8
  store i64 %521, i64* %RCX, align 8, !tbaa !2428
  %522 = shl i64 %521, 3
  %523 = add i64 %517, %522
  %524 = add i64 %652, 89
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  store i64 %513, i64* %525, align 8
  %526 = load i64, i64* %PC, align 8
  %527 = add i64 %526, 1
  store i64 %527, i64* %PC, align 8
  %528 = load i64, i64* %8, align 8, !tbaa !2428
  %529 = add i64 %528, 8
  %530 = inttoptr i64 %528 to i64*
  %531 = load i64, i64* %530, align 8
  store i64 %531, i64* %RBP, align 8, !tbaa !2428
  store i64 %529, i64* %8, align 8, !tbaa !2428
  %532 = add i64 %526, 2
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %529 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %PC, align 8, !tbaa !2428
  %535 = add i64 %528, 16
  store i64 %535, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_404cf3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -40
  %538 = add i64 %509, 4
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  %541 = add i64 %540, 1
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = icmp eq i64 %540, -1
  %543 = icmp eq i64 %541, 0
  %544 = or i1 %542, %543
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %52, align 1, !tbaa !2433
  %546 = trunc i64 %541 to i32
  %547 = and i32 %546, 255
  %548 = tail call i32 @llvm.ctpop.i32(i32 %547) #9
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = xor i8 %550, 1
  store i8 %551, i8* %53, align 1, !tbaa !2447
  %552 = xor i64 %541, %540
  %553 = lshr i64 %552, 4
  %554 = trunc i64 %553 to i8
  %555 = and i8 %554, 1
  store i8 %555, i8* %54, align 1, !tbaa !2448
  %556 = zext i1 %543 to i8
  store i8 %556, i8* %55, align 1, !tbaa !2449
  %557 = lshr i64 %541, 63
  %558 = trunc i64 %557 to i8
  store i8 %558, i8* %58, align 1, !tbaa !2450
  %559 = lshr i64 %540, 63
  %560 = xor i64 %557, %559
  %561 = add nuw nsw i64 %560, %557
  %562 = icmp eq i64 %561, 2
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %59, align 1, !tbaa !2451
  %564 = add i64 %509, 12
  store i64 %564, i64* %PC, align 8
  store i64 %541, i64* %539, align 8
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_404cff

block_404d48:                                     ; preds = %block_404d3a
  %565 = add i64 %201, -16
  %566 = add i64 %736, 4
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %567, align 8
  store i64 %568, i64* %RAX, align 8, !tbaa !2428
  %569 = add i64 %736, 8
  store i64 %569, i64* %PC, align 8
  %570 = load i64, i64* %204, align 8
  %571 = add i64 %570, -1
  store i64 %571, i64* %RCX, align 8, !tbaa !2428
  %572 = icmp eq i64 %570, 0
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %52, align 1, !tbaa !2433
  %574 = trunc i64 %571 to i32
  %575 = and i32 %574, 255
  %576 = tail call i32 @llvm.ctpop.i32(i32 %575) #9
  %577 = trunc i32 %576 to i8
  %578 = and i8 %577, 1
  %579 = xor i8 %578, 1
  store i8 %579, i8* %53, align 1, !tbaa !2447
  %580 = xor i64 %571, %570
  %581 = lshr i64 %580, 4
  %582 = trunc i64 %581 to i8
  %583 = and i8 %582, 1
  store i8 %583, i8* %54, align 1, !tbaa !2448
  %584 = icmp eq i64 %571, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %55, align 1, !tbaa !2449
  %586 = lshr i64 %571, 63
  %587 = trunc i64 %586 to i8
  store i8 %587, i8* %58, align 1, !tbaa !2450
  %588 = lshr i64 %570, 63
  %589 = xor i64 %586, %588
  %590 = add nuw nsw i64 %589, %588
  %591 = icmp eq i64 %590, 2
  %592 = zext i1 %591 to i8
  store i8 %592, i8* %59, align 1, !tbaa !2451
  %593 = shl i64 %571, 3
  %594 = add i64 %593, %568
  %595 = add i64 %736, 17
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %598 = add i64 %736, 21
  store i64 %598, i64* %PC, align 8
  %599 = load i64, i64* %567, align 8
  store i64 %599, i64* %RAX, align 8, !tbaa !2428
  %600 = add i64 %201, -48
  %601 = add i64 %736, 25
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i64*
  %603 = load i64, i64* %602, align 8
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = shl i64 %603, 3
  %605 = add i64 %599, %604
  %606 = add i64 %736, 30
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  store i64 %597, i64* %607, align 8
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -40
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612, align 8
  %614 = add i64 %613, -1
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = icmp eq i64 %613, 0
  %616 = zext i1 %615 to i8
  store i8 %616, i8* %52, align 1, !tbaa !2433
  %617 = trunc i64 %614 to i32
  %618 = and i32 %617, 255
  %619 = tail call i32 @llvm.ctpop.i32(i32 %618) #9
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  %622 = xor i8 %621, 1
  store i8 %622, i8* %53, align 1, !tbaa !2447
  %623 = xor i64 %614, %613
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %54, align 1, !tbaa !2448
  %627 = icmp eq i64 %614, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %55, align 1, !tbaa !2449
  %629 = lshr i64 %614, 63
  %630 = trunc i64 %629 to i8
  store i8 %630, i8* %58, align 1, !tbaa !2450
  %631 = lshr i64 %613, 63
  %632 = xor i64 %629, %631
  %633 = add nuw nsw i64 %632, %631
  %634 = icmp eq i64 %633, 2
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %59, align 1, !tbaa !2451
  %636 = add i64 %608, -48
  %637 = add i64 %610, 12
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %636 to i64*
  store i64 %614, i64* %638, align 8
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i64, i64* %RBP, align 8
  br label %block_404d72

block_404dbe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_404d8d
  %639 = phi i64 [ %424, %block_404d8d ], [ %.pre19, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_404d8d ], [ %699, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %640 = load i64, i64* %RBP, align 8
  %641 = add i64 %640, -49
  %642 = add i64 %639, 3
  store i64 %642, i64* %PC, align 8
  %643 = inttoptr i64 %641 to i8*
  %644 = load i8, i8* %643, align 1
  store i8 %644, i8* %AL, align 1, !tbaa !2432
  %645 = and i8 %644, 1
  store i8 0, i8* %52, align 1, !tbaa !2433
  %646 = zext i8 %645 to i32
  %647 = tail call i32 @llvm.ctpop.i32(i32 %646) #9
  %648 = trunc i32 %647 to i8
  %649 = xor i8 %648, 1
  store i8 %649, i8* %53, align 1, !tbaa !2447
  %650 = xor i8 %645, 1
  store i8 %650, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %58, align 1, !tbaa !2450
  store i8 0, i8* %59, align 1, !tbaa !2451
  store i8 0, i8* %54, align 1, !tbaa !2448
  %651 = icmp eq i8 %650, 0
  %.v = select i1 %651, i64 16, i64 11
  %652 = add i64 %639, %.v
  store i64 %652, i64* %PC, align 8, !tbaa !2428
  br i1 %651, label %block_404dce, label %block_404dc9

block_404da2:                                     ; preds = %block_404d8d
  %653 = load i64, i64* %RBP, align 8
  %654 = add i64 %653, -16
  %655 = add i64 %434, 4
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RAX, align 8, !tbaa !2428
  %658 = add i64 %653, -40
  %659 = add i64 %434, 8
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %658 to i64*
  %661 = load i64, i64* %660, align 8
  store i64 %661, i64* %RCX, align 8, !tbaa !2428
  %662 = shl i64 %661, 3
  %663 = add i64 %657, %662
  %664 = add i64 %434, 13
  store i64 %664, i64* %PC, align 8
  %665 = inttoptr i64 %663 to i64*
  %666 = load i64, i64* %665, align 8
  store i64 %666, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %667 = add i64 %653, -32
  %668 = add i64 %434, 18
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %81, align 1, !tbaa !2452
  store double 0.000000e+00, double* %83, align 1, !tbaa !2452
  %671 = add i64 %434, 22
  store i64 %671, i64* %PC, align 8
  %.cast = bitcast i64 %670 to double
  %672 = bitcast i64 %666 to double
  %673 = fcmp uno double %.cast, %672
  br i1 %673, label %674, label %684

; <label>:674:                                    ; preds = %block_404da2
  %675 = fadd double %.cast, %672
  %676 = bitcast double %675 to i64
  %677 = and i64 %676, 9221120237041090560
  %678 = icmp eq i64 %677, 9218868437227405312
  %679 = and i64 %676, 2251799813685247
  %680 = icmp ne i64 %679, 0
  %681 = and i1 %678, %680
  br i1 %681, label %682, label %690

; <label>:682:                                    ; preds = %674
  %683 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %671, %struct.Memory* %MEMORY.3) #12
  %.pre16 = load i64, i64* %PC, align 8
  %.pre17 = load i8, i8* %55, align 1, !tbaa !2449
  %.pre18 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:684:                                    ; preds = %block_404da2
  %685 = fcmp ogt double %.cast, %672
  br i1 %685, label %690, label %686

; <label>:686:                                    ; preds = %684
  %687 = fcmp olt double %.cast, %672
  br i1 %687, label %690, label %688

; <label>:688:                                    ; preds = %686
  %689 = fcmp oeq double %.cast, %672
  br i1 %689, label %690, label %694

; <label>:690:                                    ; preds = %688, %686, %684, %674
  %691 = phi i8 [ 0, %684 ], [ 0, %686 ], [ 1, %688 ], [ 1, %674 ]
  %692 = phi i8 [ 0, %684 ], [ 0, %686 ], [ 0, %688 ], [ 1, %674 ]
  %693 = phi i8 [ 0, %684 ], [ 1, %686 ], [ 0, %688 ], [ 1, %674 ]
  store i8 %691, i8* %55, align 1, !tbaa !2432
  store i8 %692, i8* %53, align 1, !tbaa !2432
  store i8 %693, i8* %52, align 1, !tbaa !2432
  br label %694

; <label>:694:                                    ; preds = %690, %688
  %695 = phi i8 [ %691, %690 ], [ 0, %688 ]
  store i8 0, i8* %59, align 1, !tbaa !2432
  store i8 0, i8* %58, align 1, !tbaa !2432
  store i8 0, i8* %54, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %694, %682
  %696 = phi i64 [ %.pre18, %682 ], [ %653, %694 ]
  %697 = phi i8 [ %.pre17, %682 ], [ %695, %694 ]
  %698 = phi i64 [ %.pre16, %682 ], [ %671, %694 ]
  %699 = phi %struct.Memory* [ %683, %682 ], [ %MEMORY.3, %694 ]
  %700 = load i8, i8* %52, align 1, !tbaa !2433
  %701 = or i8 %697, %700
  %702 = icmp eq i8 %701, 0
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %DL, align 1, !tbaa !2432
  %704 = add i64 %696, -49
  %705 = add i64 %698, 6
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i8*
  store i8 %703, i8* %706, align 1
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_404dbe

block_404d3a:                                     ; preds = %block_404cbd
  %AL = bitcast %union.anon* %3 to i8*
  %CL = bitcast %union.anon* %4 to i8*
  %707 = add i64 %237, 4
  store i64 %707, i64* %PC, align 8
  %708 = load i64, i64* %204, align 8
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = add i64 %237, 8
  store i64 %709, i64* %PC, align 8
  %710 = load i64, i64* %208, align 8
  %711 = sub i64 %708, %710
  %712 = icmp ult i64 %708, %710
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %52, align 1, !tbaa !2433
  %714 = trunc i64 %711 to i32
  %715 = and i32 %714, 255
  %716 = tail call i32 @llvm.ctpop.i32(i32 %715) #9
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  store i8 %719, i8* %53, align 1, !tbaa !2447
  %720 = xor i64 %710, %708
  %721 = xor i64 %720, %711
  %722 = lshr i64 %721, 4
  %723 = trunc i64 %722 to i8
  %724 = and i8 %723, 1
  store i8 %724, i8* %54, align 1, !tbaa !2448
  %725 = icmp eq i64 %711, 0
  %726 = zext i1 %725 to i8
  store i8 %726, i8* %55, align 1, !tbaa !2449
  %727 = lshr i64 %711, 63
  %728 = trunc i64 %727 to i8
  store i8 %728, i8* %58, align 1, !tbaa !2450
  %729 = lshr i64 %708, 63
  %730 = lshr i64 %710, 63
  %731 = xor i64 %730, %729
  %732 = xor i64 %727, %729
  %733 = add nuw nsw i64 %732, %731
  %734 = icmp eq i64 %733, 2
  %735 = zext i1 %734 to i8
  store i8 %735, i8* %59, align 1, !tbaa !2451
  %.v28 = select i1 %725, i64 14, i64 56
  %736 = add i64 %237, %.v28
  store i64 %736, i64* %PC, align 8, !tbaa !2428
  br i1 %725, label %block_404d48, label %block_404d72
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_405d50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405d65

block_405d7f:                                     ; preds = %block_405d65
  %56 = add i64 %170, -16
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %57 = add i64 %169, -11631
  %58 = add i64 %169, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -11538
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = add i64 %78, 473
  %81 = add i64 %78, 12
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -40
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %53, align 1
  %91 = inttoptr i64 %87 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -40
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %92, -32
  %99 = add i64 %94, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, -75
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br label %block_405d65

block_405d7a:                                     ; preds = %block_405d65
  %103 = add i64 %170, -32
  %104 = add i64 %169, 63
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = add i64 %170, -8
  %108 = add i64 %169, 67
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i64*
  store i64 %106, i64* %109, align 8
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -8
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %53, align 1, !tbaa !2452
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %117 = bitcast i64* %116 to double*
  store double 0.000000e+00, double* %117, align 1, !tbaa !2452
  %118 = load i64, i64* %RSP, align 8
  %119 = add i64 %118, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  %120 = icmp ugt i64 %118, -49
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %13, align 1, !tbaa !2433
  %122 = trunc i64 %119 to i32
  %123 = and i32 %122, 255
  %124 = tail call i32 @llvm.ctpop.i32(i32 %123) #9
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  store i8 %127, i8* %20, align 1, !tbaa !2447
  %128 = xor i64 %118, 16
  %129 = xor i64 %128, %119
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %26, align 1, !tbaa !2448
  %133 = icmp eq i64 %119, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %29, align 1, !tbaa !2449
  %135 = lshr i64 %119, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %32, align 1, !tbaa !2450
  %137 = lshr i64 %118, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %38, align 1, !tbaa !2451
  %142 = add i64 %112, 10
  store i64 %142, i64* %PC, align 8
  %143 = add i64 %118, 56
  %144 = inttoptr i64 %119 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %RBP, align 8, !tbaa !2428
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %146 = add i64 %112, 11
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %143 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = add i64 %118, 64
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_405d65:                                     ; preds = %block_405d7f, %block_405d50
  %150 = phi i64 [ %102, %block_405d7f ], [ %.pre, %block_405d50 ]
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -16
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %153 = add i64 %151, -24
  store i64 %153, i64* %RSI, align 8, !tbaa !2428
  %154 = add i64 %150, -11541
  %155 = add i64 %150, 13
  %156 = load i64, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %156, -8
  %158 = inttoptr i64 %157 to i64*
  store i64 %155, i64* %158, align 8
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  %159 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %154, %struct.Memory* %2)
  %160 = load i8, i8* %AL, align 1
  %161 = load i64, i64* %PC, align 8
  %162 = and i8 %160, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %163 = zext i8 %162 to i32
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #9
  %165 = trunc i32 %164 to i8
  %166 = xor i8 %165, 1
  store i8 %166, i8* %20, align 1, !tbaa !2447
  %167 = xor i8 %162, 1
  store i8 %167, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %168 = icmp eq i8 %167, 0
  %.v = select i1 %168, i64 13, i64 8
  %169 = add i64 %161, %.v
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP, align 8
  br i1 %168, label %block_405d7f, label %block_405d7a
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401200__Z11start_timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401200:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, -2865
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call fastcc %struct.Memory* @ext_6208a0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %15 = load i64, i64* %RAX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %17 = add i64 %16, 9
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 10
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %14
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4065d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402990:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4029b8

block_402a01:                                     ; preds = %block_4029b8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4029c8:                                     ; preds = %block_4029b8
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 8376
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 8439
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 8666
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4029b8

block_4029b8:                                     ; preds = %block_4029c8, %block_402990
  %190 = phi i64 [ %.pre, %block_402990 ], [ %189, %block_4029c8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402990 ], [ %157, %block_4029c8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4029c8, label %block_402a01
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406540:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402bf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c18

block_402c61:                                     ; preds = %block_402c18
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402c28:                                     ; preds = %block_402c18
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 2408
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 2471
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 2714
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402c18

block_402c18:                                     ; preds = %block_402c28, %block_402bf0
  %190 = phi i64 [ %.pre, %block_402bf0 ], [ %189, %block_402c28 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402bf0 ], [ %157, %block_402c28 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402c28, label %block_402c61
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400a70___cxx_global_var_init_23(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pe_type* @DV10Pe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4447
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404460:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -104
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 96
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  store i64 %37, i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  store i64 %38, i64* %RCX, align 8, !tbaa !2428
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 19
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RAX, align 8
  %49 = load i64, i64* %PC, align 8
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %50 = load i64, i64* %RCX, align 8
  store i64 %50, i64* %RSI, align 8, !tbaa !2428
  %51 = add i64 %49, 760
  %52 = add i64 %49, 11
  %53 = load i64, i64* %RSP, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55, align 8
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  store i64 %51, i64* %PC, align 8, !tbaa !2428
  %56 = tail call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %51, %struct.Memory* %2)
  %57 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %RAX, align 8
  %61 = add i64 %57, 11
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %70 = ashr i64 %68, 63
  store i64 %70, i64* %69, align 8, !tbaa !2428
  %71 = load i64, i64* %RCX, align 8
  %72 = add i64 %65, 9
  store i64 %72, i64* %PC, align 8
  %73 = sext i64 %71 to i128
  %74 = and i128 %73, -18446744073709551616
  %75 = zext i64 %70 to i128
  %76 = shl nuw i128 %75, 64
  %77 = zext i64 %68 to i128
  %78 = or i128 %77, %76
  %79 = zext i64 %71 to i128
  %80 = or i128 %74, %79
  %81 = sdiv i128 %78, %80
  %82 = trunc i128 %81 to i64
  %83 = and i128 %81, 18446744073709551615
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = or i128 %85, %83
  %87 = icmp eq i128 %81, %86
  br i1 %87, label %90, label %88

; <label>:88:                                     ; preds = %block_404460
  %89 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %72, %struct.Memory* %56) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:90:                                     ; preds = %block_404460
  %91 = srem i128 %78, %80
  %92 = trunc i128 %91 to i64
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  store i64 %92, i64* %69, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %90, %88
  %93 = phi i64 [ %.pre7, %88 ], [ %63, %90 ]
  %94 = phi i64 [ %.pre6, %88 ], [ %72, %90 ]
  %95 = phi i64 [ %.pre, %88 ], [ %82, %90 ]
  %96 = phi %struct.Memory* [ %89, %88 ], [ %56, %90 ]
  %97 = add i64 %95, -1
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp eq i64 %95, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %12, align 1, !tbaa !2433
  %100 = trunc i64 %97 to i32
  %101 = and i32 %100, 255
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #9
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  store i8 %105, i8* %19, align 1, !tbaa !2447
  %106 = xor i64 %97, %95
  %107 = lshr i64 %106, 4
  %108 = trunc i64 %107 to i8
  %109 = and i8 %108, 1
  store i8 %109, i8* %24, align 1, !tbaa !2448
  %110 = icmp eq i64 %97, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %27, align 1, !tbaa !2449
  %112 = lshr i64 %97, 63
  %113 = trunc i64 %112 to i8
  store i8 %113, i8* %30, align 1, !tbaa !2450
  %114 = lshr i64 %95, 63
  %115 = xor i64 %112, %114
  %116 = add nuw nsw i64 %115, %114
  %117 = icmp eq i64 %116, 2
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %36, align 1, !tbaa !2451
  %119 = add i64 %93, -24
  %120 = add i64 %94, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  store i64 %97, i64* %121, align 8
  %122 = bitcast i64* %RAX to i64**
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %125 = bitcast i64* %124 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40449f

block_4044fc:                                     ; preds = %block_40449f
  %126 = add i64 %422, -32
  %127 = add i64 %438, 4
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, -1
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = icmp eq i64 %129, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %12, align 1, !tbaa !2433
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #9
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %19, align 1, !tbaa !2447
  %139 = xor i64 %130, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %24, align 1, !tbaa !2448
  %143 = icmp eq i64 %130, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %27, align 1, !tbaa !2449
  %145 = lshr i64 %130, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %30, align 1, !tbaa !2450
  %147 = lshr i64 %129, 63
  %148 = xor i64 %145, %147
  %149 = add nuw nsw i64 %148, %147
  %150 = icmp eq i64 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %36, align 1, !tbaa !2451
  %152 = add i64 %438, 12
  store i64 %152, i64* %PC, align 8
  store i64 %130, i64* %425, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_404508

block_40459a:                                     ; preds = %block_404508
  %153 = load i64, i64* %RSP, align 8
  %154 = add i64 %153, 96
  store i64 %154, i64* %RSP, align 8, !tbaa !2428
  %155 = icmp ugt i64 %153, -97
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %12, align 1, !tbaa !2433
  %157 = trunc i64 %154 to i32
  %158 = and i32 %157, 255
  %159 = tail call i32 @llvm.ctpop.i32(i32 %158) #9
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  store i8 %162, i8* %19, align 1, !tbaa !2447
  %163 = xor i64 %154, %153
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %24, align 1, !tbaa !2448
  %167 = icmp eq i64 %154, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %27, align 1, !tbaa !2449
  %169 = lshr i64 %154, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %30, align 1, !tbaa !2450
  %171 = lshr i64 %153, 63
  %172 = xor i64 %169, %171
  %173 = add nuw nsw i64 %172, %169
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %36, align 1, !tbaa !2451
  %176 = add i64 %469, 5
  store i64 %176, i64* %PC, align 8
  %177 = add i64 %153, 104
  %178 = inttoptr i64 %154 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RBP, align 8, !tbaa !2428
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  %180 = add i64 %469, 6
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %177 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  %183 = add i64 %153, 112
  store i64 %183, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404513:                                     ; preds = %block_404508
  %184 = add i64 %440, -8
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = add i64 %469, 8
  store i64 %185, i64* %PC, align 8
  %186 = load i64, i64* %443, align 8
  store i64 %186, i64* %RSI, align 8, !tbaa !2428
  %187 = add i64 %469, 653
  %188 = add i64 %469, 13
  %189 = load i64, i64* %RSP, align 8, !tbaa !2428
  %190 = add i64 %189, -8
  %191 = inttoptr i64 %190 to i64*
  store i64 %188, i64* %191, align 8
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  store i64 %187, i64* %PC, align 8, !tbaa !2428
  %192 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %187, %struct.Memory* %MEMORY.1)
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -72
  %195 = load i64, i64* %PC, align 8
  store i64 %194, i64* %RDI, align 8, !tbaa !2428
  %196 = load i64, i64* %RAX, align 8
  %197 = add i64 %195, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %194 to i64*
  store i64 %196, i64* %198, align 8
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, 520
  %201 = add i64 %199, 5
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.1)
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -8
  %208 = load i64, i64* %PC, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %209 = load i64*, i64** %122, align 8
  %210 = add i64 %208, 8
  store i64 %210, i64* %PC, align 8
  %211 = load i64, i64* %209, align 8
  store i64 %211, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %212 = add i64 %206, -64
  %213 = add i64 %208, 13
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i64*
  store i64 %211, i64* %214, align 8
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 502
  %217 = add i64 %215, 5
  %218 = load i64, i64* %RSP, align 8, !tbaa !2428
  %219 = add i64 %218, -8
  %220 = inttoptr i64 %219 to i64*
  store i64 %217, i64* %220, align 8
  store i64 %219, i64* %RSP, align 8, !tbaa !2428
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %221 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %216, %struct.Memory* %MEMORY.1)
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -8
  %224 = load i64, i64* %PC, align 8
  store i64 %223, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64*, i64** %122, align 8
  %226 = add i64 %224, 8
  store i64 %226, i64* %PC, align 8
  %227 = load i64, i64* %225, align 8
  store i64 %227, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %228 = add i64 %222, -24
  %229 = add i64 %224, 12
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %RSI, align 8, !tbaa !2428
  %232 = add i64 %222, -96
  %233 = add i64 %224, 17
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  store i64 %227, i64* %234, align 8
  %235 = load i64, i64* %PC, align 8
  %236 = add i64 %235, 592
  %237 = add i64 %235, 5
  %238 = load i64, i64* %RSP, align 8, !tbaa !2428
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240, align 8
  store i64 %239, i64* %RSP, align 8, !tbaa !2428
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %241 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %236, %struct.Memory* %MEMORY.1)
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -80
  %244 = load i64, i64* %PC, align 8
  store i64 %243, i64* %RDI, align 8, !tbaa !2428
  %245 = load i64, i64* %RAX, align 8
  %246 = add i64 %244, 8
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %243 to i64*
  store i64 %245, i64* %247, align 8
  %248 = load i64, i64* %PC, align 8
  %249 = add i64 %248, 467
  %250 = add i64 %248, 5
  %251 = load i64, i64* %RSP, align 8, !tbaa !2428
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i64*
  store i64 %250, i64* %253, align 8
  store i64 %252, i64* %RSP, align 8, !tbaa !2428
  store i64 %249, i64* %PC, align 8, !tbaa !2428
  %254 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %249, %struct.Memory* %MEMORY.1)
  %255 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -96
  %258 = add i64 %255, 9
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %261 = load i64*, i64** %122, align 8
  %262 = add i64 %255, 13
  store i64 %262, i64* %PC, align 8
  store i64 %260, i64* %261, align 8
  %263 = load i64, i64* %RBP, align 8
  %264 = add i64 %263, -24
  %265 = load i64, i64* %PC, align 8
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %264 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RDI, align 8, !tbaa !2428
  %269 = add i64 %263, -8
  %270 = add i64 %265, 8
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %RAX, align 8, !tbaa !2428
  %273 = add i64 %263, -88
  %274 = add i64 %265, 12
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  store i64 %272, i64* %275, align 8
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -64
  %278 = load i64, i64* %PC, align 8
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %277 to i64*
  %281 = load i64, i64* %280, align 8
  store i64 %281, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %282 = add i64 %276, -88
  %283 = add i64 %278, 9
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RSI, align 8, !tbaa !2428
  %286 = add i64 %278, 597
  %287 = add i64 %278, 14
  %288 = load i64, i64* %RSP, align 8, !tbaa !2428
  %289 = add i64 %288, -8
  %290 = inttoptr i64 %289 to i64*
  store i64 %287, i64* %290, align 8
  store i64 %289, i64* %RSP, align 8, !tbaa !2428
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  %291 = tail call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* nonnull %0, i64 %286, %struct.Memory* %MEMORY.1)
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -24
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = add i64 %297, -1
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = icmp ne i64 %297, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %12, align 1, !tbaa !2433
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #9
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %19, align 1, !tbaa !2447
  %307 = xor i64 %297, 16
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %24, align 1, !tbaa !2448
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %27, align 1, !tbaa !2449
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %30, align 1, !tbaa !2450
  %316 = lshr i64 %297, 63
  %317 = xor i64 %314, %316
  %318 = xor i64 %314, 1
  %319 = add nuw nsw i64 %317, %318
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %36, align 1, !tbaa !2451
  %322 = add i64 %294, 12
  store i64 %322, i64* %PC, align 8
  store i64 %298, i64* %296, align 8
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, -141
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  br label %block_404508

block_4044aa:                                     ; preds = %block_40449f
  %325 = add i64 %422, -8
  store i64 %325, i64* %RDI, align 8, !tbaa !2428
  %326 = add i64 %438, 8
  store i64 %326, i64* %PC, align 8
  %327 = load i64, i64* %425, align 8
  store i64 %327, i64* %RSI, align 8, !tbaa !2428
  %328 = add i64 %438, 758
  %329 = add i64 %438, 13
  %330 = load i64, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %330, -8
  %332 = inttoptr i64 %331 to i64*
  store i64 %329, i64* %332, align 8
  store i64 %331, i64* %RSP, align 8, !tbaa !2428
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %333 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %328, %struct.Memory* %MEMORY.0)
  %334 = load i64, i64* %RBP, align 8
  %335 = add i64 %334, -48
  %336 = load i64, i64* %PC, align 8
  store i64 %335, i64* %RDI, align 8, !tbaa !2428
  %337 = load i64, i64* %RAX, align 8
  %338 = add i64 %336, 8
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %335 to i64*
  store i64 %337, i64* %339, align 8
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 625
  %342 = add i64 %340, 5
  %343 = load i64, i64* %RSP, align 8, !tbaa !2428
  %344 = add i64 %343, -8
  %345 = inttoptr i64 %344 to i64*
  store i64 %342, i64* %345, align 8
  store i64 %344, i64* %RSP, align 8, !tbaa !2428
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  %346 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %341, %struct.Memory* %MEMORY.0)
  %347 = load i64*, i64** %122, align 8
  %348 = load i64, i64* %PC, align 8
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC, align 8
  %350 = load i64, i64* %347, align 8
  store i64 %350, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -40
  %353 = add i64 %348, 9
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to i64*
  store i64 %350, i64* %354, align 8
  %355 = load i64, i64* %RBP, align 8
  %356 = add i64 %355, -32
  %357 = load i64, i64* %PC, align 8
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %RDI, align 8, !tbaa !2428
  %361 = add i64 %355, -8
  %362 = add i64 %357, 8
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %361 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %355, -56
  %366 = add i64 %357, 12
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  store i64 %364, i64* %367, align 8
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -24
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 4
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i64*
  %373 = load i64, i64* %372, align 8
  store i64 %373, i64* %RDX, align 8, !tbaa !2428
  %374 = add i64 %368, -40
  %375 = add i64 %370, 9
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %123, align 1, !tbaa !2452
  store double 0.000000e+00, double* %125, align 1, !tbaa !2452
  %378 = add i64 %368, -56
  %379 = add i64 %370, 13
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RSI, align 8, !tbaa !2428
  %382 = add i64 %370, 759
  %383 = add i64 %370, 18
  %384 = load i64, i64* %RSP, align 8, !tbaa !2428
  %385 = add i64 %384, -8
  %386 = inttoptr i64 %385 to i64*
  store i64 %383, i64* %386, align 8
  store i64 %385, i64* %RSP, align 8, !tbaa !2428
  store i64 %382, i64* %PC, align 8, !tbaa !2428
  %387 = tail call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* nonnull %0, i64 %382, %struct.Memory* %MEMORY.0)
  %388 = load i64, i64* %RBP, align 8
  %389 = add i64 %388, -24
  %390 = load i64, i64* %PC, align 8
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %389 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = add i64 %393, -1
  store i64 %394, i64* %RAX, align 8, !tbaa !2428
  %395 = icmp ne i64 %393, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %12, align 1, !tbaa !2433
  %397 = trunc i64 %394 to i32
  %398 = and i32 %397, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #9
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %19, align 1, !tbaa !2447
  %403 = xor i64 %393, 16
  %404 = xor i64 %403, %394
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  store i8 %407, i8* %24, align 1, !tbaa !2448
  %408 = icmp eq i64 %394, 0
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %27, align 1, !tbaa !2449
  %410 = lshr i64 %394, 63
  %411 = trunc i64 %410 to i8
  store i8 %411, i8* %30, align 1, !tbaa !2450
  %412 = lshr i64 %393, 63
  %413 = xor i64 %410, %412
  %414 = xor i64 %410, 1
  %415 = add nuw nsw i64 %413, %414
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %36, align 1, !tbaa !2451
  %418 = add i64 %390, 12
  store i64 %418, i64* %PC, align 8
  store i64 %394, i64* %392, align 8
  %419 = load i64, i64* %PC, align 8
  %420 = add i64 %419, -88
  store i64 %420, i64* %PC, align 8, !tbaa !2428
  br label %block_40449f

block_40449f:                                     ; preds = %block_4044aa, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %421 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %420, %block_4044aa ]
  %MEMORY.0 = phi %struct.Memory* [ %96, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %387, %block_4044aa ]
  %422 = load i64, i64* %RBP, align 8
  %423 = add i64 %422, -24
  %424 = add i64 %421, 5
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %427 = trunc i64 %426 to i32
  %428 = and i32 %427, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428) #9
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  %433 = icmp eq i64 %426, 0
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %27, align 1, !tbaa !2449
  %435 = lshr i64 %426, 63
  %436 = trunc i64 %435 to i8
  store i8 %436, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  %437 = icmp ne i8 %436, 0
  %.v = select i1 %437, i64 88, i64 6
  %438 = add i64 %424, %.v
  store i64 %438, i64* %PC, align 8, !tbaa !2428
  br i1 %437, label %block_4044fc, label %block_4044aa

block_404508:                                     ; preds = %block_404513, %block_4044fc
  %439 = phi i64 [ %.pre9, %block_4044fc ], [ %324, %block_404513 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4044fc ], [ %291, %block_404513 ]
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -24
  %442 = add i64 %439, 5
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  %444 = load i64, i64* %443, align 8
  %445 = add i64 %444, -1
  %446 = icmp eq i64 %444, 0
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %12, align 1, !tbaa !2433
  %448 = trunc i64 %445 to i32
  %449 = and i32 %448, 255
  %450 = tail call i32 @llvm.ctpop.i32(i32 %449) #9
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  store i8 %453, i8* %19, align 1, !tbaa !2447
  %454 = xor i64 %445, %444
  %455 = lshr i64 %454, 4
  %456 = trunc i64 %455 to i8
  %457 = and i8 %456, 1
  store i8 %457, i8* %24, align 1, !tbaa !2448
  %458 = icmp eq i64 %445, 0
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %27, align 1, !tbaa !2449
  %460 = lshr i64 %445, 63
  %461 = trunc i64 %460 to i8
  store i8 %461, i8* %30, align 1, !tbaa !2450
  %462 = lshr i64 %444, 63
  %463 = xor i64 %460, %462
  %464 = add nuw nsw i64 %463, %462
  %465 = icmp eq i64 %464, 2
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %36, align 1, !tbaa !2451
  %467 = icmp ne i8 %461, 0
  %468 = xor i1 %467, %465
  %.v10 = select i1 %468, i64 146, i64 11
  %469 = add i64 %439, %.v10
  store i64 %469, i64* %PC, align 8, !tbaa !2428
  br i1 %468, label %block_40459a, label %block_404513
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405fb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403280:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2449
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2450
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404c10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -24
  %13 = load i64, i64* %RDI, align 8
  %14 = add i64 %11, 7
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -24
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RSI, align 8, !tbaa !2428
  %28 = add i64 %22, -32
  %29 = add i64 %24, 8
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %28 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -16
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 4
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %32 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 8
  store i64 %37, i64* %RSI, align 8, !tbaa !2428
  %38 = icmp ugt i64 %36, -9
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2433
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = tail call i32 @llvm.ctpop.i32(i32 %42) #9
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2447
  %48 = xor i64 %37, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2448
  %53 = icmp eq i64 %37, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %37, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %36, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %56
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2451
  %65 = add i64 %33, 12
  store i64 %65, i64* %PC, align 8
  store i64 %37, i64* %35, align 8
  %66 = bitcast %union.anon* %3 to i64**
  %67 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %69 = bitcast i64* %68 to double*
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %72 = bitcast i64* %71 to double*
  %73 = bitcast [32 x %union.VectorReg]* %4 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404c30

block_404c7c:                                     ; preds = %block_404c30
  %74 = add i64 %79, -1
  %75 = add i64 %113, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i8*
  store i8 1, i8* %76, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404c80

block_404c77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %77 = add i64 %211, -71
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  br label %block_404c30

block_404c30:                                     ; preds = %block_404c77, %block_404c10
  %78 = phi i64 [ %.pre, %block_404c10 ], [ %77, %block_404c77 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_404c10 ], [ %206, %block_404c77 ]
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = add i64 %78, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = add i64 %79, -24
  %85 = add i64 %78, 8
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %83, %87
  %89 = icmp ult i64 %83, %87
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %40, align 1, !tbaa !2433
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #9
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %47, align 1, !tbaa !2447
  %97 = xor i64 %87, %83
  %98 = xor i64 %97, %88
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %52, align 1, !tbaa !2448
  %102 = icmp eq i64 %88, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %55, align 1, !tbaa !2449
  %104 = lshr i64 %88, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %58, align 1, !tbaa !2450
  %106 = lshr i64 %83, 63
  %107 = lshr i64 %87, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %104, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %64, align 1, !tbaa !2451
  %.v = select i1 %102, i64 76, i64 14
  %113 = add i64 %78, %.v
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_404c7c, label %block_404c3e

block_404c6e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -1
  %116 = add i64 %211, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i8*
  store i8 0, i8* %117, align 1
  %118 = load i64, i64* %PC, align 8
  %119 = add i64 %118, 14
  store i64 %119, i64* %PC, align 8, !tbaa !2428
  br label %block_404c80

block_404c3e:                                     ; preds = %block_404c30
  %120 = add i64 %113, 4
  store i64 %120, i64* %PC, align 8
  %121 = load i64, i64* %82, align 8
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = add i64 %121, 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = icmp ugt i64 %121, -9
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %40, align 1, !tbaa !2433
  %125 = trunc i64 %122 to i32
  %126 = and i32 %125, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #9
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %47, align 1, !tbaa !2447
  %131 = xor i64 %122, %121
  %132 = lshr i64 %131, 4
  %133 = trunc i64 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %52, align 1, !tbaa !2448
  %135 = icmp eq i64 %122, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %55, align 1, !tbaa !2449
  %137 = lshr i64 %122, 63
  %138 = trunc i64 %137 to i8
  store i8 %138, i8* %58, align 1, !tbaa !2450
  %139 = lshr i64 %121, 63
  %140 = xor i64 %137, %139
  %141 = add nuw nsw i64 %140, %137
  %142 = icmp eq i64 %141, 2
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %64, align 1, !tbaa !2451
  %144 = add i64 %113, 15
  store i64 %144, i64* %PC, align 8
  store i64 %122, i64* %82, align 8
  %145 = load i64*, i64** %66, align 8
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC, align 8
  %148 = load i64, i64* %145, align 8
  store i64 %148, i64* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -32
  %151 = add i64 %146, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %153, 8
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = icmp ugt i64 %153, -9
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %40, align 1, !tbaa !2433
  %157 = trunc i64 %154 to i32
  %158 = and i32 %157, 255
  %159 = tail call i32 @llvm.ctpop.i32(i32 %158) #9
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  store i8 %162, i8* %47, align 1, !tbaa !2447
  %163 = xor i64 %154, %153
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  store i8 %166, i8* %52, align 1, !tbaa !2448
  %167 = icmp eq i64 %154, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %55, align 1, !tbaa !2449
  %169 = lshr i64 %154, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %58, align 1, !tbaa !2450
  %171 = lshr i64 %153, 63
  %172 = xor i64 %169, %171
  %173 = add nuw nsw i64 %172, %169
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %64, align 1, !tbaa !2451
  %176 = add i64 %146, 19
  store i64 %176, i64* %PC, align 8
  store i64 %154, i64* %152, align 8
  %177 = load i64*, i64** %66, align 8
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC, align 8
  %180 = load i64, i64* %177, align 8
  store i64 %180, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %72, align 1, !tbaa !2452
  %181 = add i64 %178, 8
  store i64 %181, i64* %PC, align 8
  %.cast = bitcast i64 %180 to double
  %182 = load double, double* %73, align 1
  %183 = fcmp uno double %.cast, %182
  br i1 %183, label %184, label %194

; <label>:184:                                    ; preds = %block_404c3e
  %185 = fadd double %.cast, %182
  %186 = bitcast double %185 to i64
  %187 = and i64 %186, 9221120237041090560
  %188 = icmp eq i64 %187, 9218868437227405312
  %189 = and i64 %186, 2251799813685247
  %190 = icmp ne i64 %189, 0
  %191 = and i1 %188, %190
  br i1 %191, label %192, label %200

; <label>:192:                                    ; preds = %184
  %193 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %181, %struct.Memory* %MEMORY.0) #12
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:194:                                    ; preds = %block_404c3e
  %195 = fcmp ogt double %.cast, %182
  br i1 %195, label %200, label %196

; <label>:196:                                    ; preds = %194
  %197 = fcmp olt double %.cast, %182
  br i1 %197, label %200, label %198

; <label>:198:                                    ; preds = %196
  %199 = fcmp oeq double %.cast, %182
  br i1 %199, label %200, label %204

; <label>:200:                                    ; preds = %198, %196, %194, %184
  %201 = phi i8 [ 0, %194 ], [ 0, %196 ], [ 1, %198 ], [ 1, %184 ]
  %202 = phi i8 [ 0, %194 ], [ 0, %196 ], [ 0, %198 ], [ 1, %184 ]
  %203 = phi i8 [ 0, %194 ], [ 1, %196 ], [ 0, %198 ], [ 1, %184 ]
  store i8 %201, i8* %55, align 1, !tbaa !2432
  store i8 %202, i8* %47, align 1, !tbaa !2432
  store i8 %203, i8* %40, align 1, !tbaa !2432
  br label %204

; <label>:204:                                    ; preds = %200, %198
  store i8 0, i8* %64, align 1, !tbaa !2432
  store i8 0, i8* %58, align 1, !tbaa !2432
  store i8 0, i8* %52, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %204, %192
  %205 = phi i64 [ %.pre14, %192 ], [ %181, %204 ]
  %206 = phi %struct.Memory* [ %193, %192 ], [ %MEMORY.0, %204 ]
  %207 = load i8, i8* %40, align 1, !tbaa !2433
  %208 = load i8, i8* %55, align 1, !tbaa !2449
  %209 = or i8 %208, %207
  %210 = icmp ne i8 %209, 0
  %.v22 = select i1 %210, i64 15, i64 6
  %211 = add i64 %205, %.v22
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_404c77, label %block_404c6e

block_404c80:                                     ; preds = %block_404c6e, %block_404c7c
  %212 = phi i64 [ %.pre15, %block_404c7c ], [ %119, %block_404c6e ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404c7c ], [ %206, %block_404c6e ]
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -1
  %215 = add i64 %212, 3
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i8*
  %217 = load i8, i8* %216, align 1
  %218 = and i8 %217, 1
  store i8 0, i8* %40, align 1, !tbaa !2433
  %219 = zext i8 %218 to i32
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #9
  %221 = trunc i32 %220 to i8
  %222 = xor i8 %221, 1
  store i8 %222, i8* %47, align 1, !tbaa !2447
  %223 = xor i8 %218, 1
  store i8 %223, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %58, align 1, !tbaa !2450
  store i8 0, i8* %64, align 1, !tbaa !2451
  store i8 0, i8* %52, align 1, !tbaa !2448
  %224 = zext i8 %218 to i64
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = add i64 %212, 9
  store i64 %225, i64* %PC, align 8
  %226 = load i64, i64* %7, align 8, !tbaa !2428
  %227 = add i64 %226, 8
  %228 = inttoptr i64 %226 to i64*
  %229 = load i64, i64* %228, align 8
  store i64 %229, i64* %RBP, align 8, !tbaa !2428
  store i64 %227, i64* %7, align 8, !tbaa !2428
  %230 = add i64 %212, 10
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %227 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  %233 = add i64 %226, 16
  store i64 %233, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4023a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4023c8

block_402411:                                     ; preds = %block_4023c8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4023d8:                                     ; preds = %block_4023c8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 7208
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13943
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 7514
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4023c8

block_4023c8:                                     ; preds = %block_4023d8, %block_4023a0
  %190 = phi i64 [ %.pre, %block_4023a0 ], [ %189, %block_4023d8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4023a0 ], [ %157, %block_4023d8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4023d8, label %block_402411
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400a10___cxx_global_var_init_20(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVMPb_type* @DVMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4575
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401f40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401f60

block_401f70:                                     ; preds = %block_401f60
  %67 = add i64 %178, -16
  %68 = add i64 %211, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDI, align 8, !tbaa !2428
  %71 = add i64 %178, -24
  %72 = add i64 %211, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RSI, align 8, !tbaa !2428
  %75 = add i64 %178, -8
  %76 = add i64 %211, 12
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %178, -48
  %80 = add i64 %211, 16
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %39, align 1, !tbaa !2452
  store double 0.000000e+00, double* %66, align 1, !tbaa !2452
  %88 = add i64 %84, 17552
  %89 = add i64 %84, 10
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %MEMORY.0)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -56
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %96, 9
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %39, align 1
  %99 = inttoptr i64 %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 16317
  %102 = add i64 %100, 5
  %103 = load i64, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  store i64 %101, i64* %PC, align 8, !tbaa !2428
  %106 = tail call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* nonnull %0, i64 %101, %struct.Memory* %93)
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 15960
  %109 = add i64 %107, 5
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %108, %struct.Memory* %106)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -36
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, 1
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = icmp eq i32 %119, -1
  %123 = icmp eq i32 %120, 0
  %124 = or i1 %122, %123
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %12, align 1, !tbaa !2433
  %126 = and i32 %120, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #9
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %19, align 1, !tbaa !2447
  %131 = xor i32 %120, %119
  %132 = lshr i32 %131, 4
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %24, align 1, !tbaa !2448
  %135 = zext i1 %123 to i8
  store i8 %135, i8* %27, align 1, !tbaa !2449
  %136 = lshr i32 %120, 31
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %30, align 1, !tbaa !2450
  %138 = lshr i32 %119, 31
  %139 = xor i32 %136, %138
  %140 = add nuw nsw i32 %139, %136
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %36, align 1, !tbaa !2451
  %143 = add i64 %116, 9
  store i64 %143, i64* %PC, align 8
  store i32 %120, i32* %118, align 4
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -70
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  br label %block_401f60

block_401fab:                                     ; preds = %block_401f60
  %146 = load i64, i64* %RSP, align 8
  %147 = add i64 %146, 64
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ugt i64 %146, -65
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %12, align 1, !tbaa !2433
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #9
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %19, align 1, !tbaa !2447
  %156 = xor i64 %147, %146
  %157 = lshr i64 %156, 4
  %158 = trunc i64 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %24, align 1, !tbaa !2448
  %160 = icmp eq i64 %147, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %27, align 1, !tbaa !2449
  %162 = lshr i64 %147, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %30, align 1, !tbaa !2450
  %164 = lshr i64 %146, 63
  %165 = xor i64 %162, %164
  %166 = add nuw nsw i64 %165, %162
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %36, align 1, !tbaa !2451
  %169 = add i64 %211, 5
  store i64 %169, i64* %PC, align 8
  %170 = add i64 %146, 72
  %171 = inttoptr i64 %147 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RBP, align 8, !tbaa !2428
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %211, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %176 = add i64 %146, 80
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401f60:                                     ; preds = %block_401f70, %block_401f40
  %177 = phi i64 [ %.pre, %block_401f40 ], [ %145, %block_401f70 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401f40 ], [ %113, %block_401f70 ]
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -36
  %180 = add i64 %177, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %185 = sub i32 %182, %184
  %186 = icmp ult i32 %182, %184
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %12, align 1, !tbaa !2433
  %188 = and i32 %185, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #9
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %19, align 1, !tbaa !2447
  %193 = xor i32 %184, %182
  %194 = xor i32 %193, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %24, align 1, !tbaa !2448
  %198 = icmp eq i32 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %27, align 1, !tbaa !2449
  %200 = lshr i32 %185, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %30, align 1, !tbaa !2450
  %202 = lshr i32 %182, 31
  %203 = lshr i32 %184, 31
  %204 = xor i32 %203, %202
  %205 = xor i32 %200, %202
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %36, align 1, !tbaa !2451
  %209 = icmp ne i8 %201, 0
  %210 = xor i1 %209, %207
  %.v = select i1 %210, i64 16, i64 75
  %211 = add i64 %177, %.v
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_401f70, label %block_401fab
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402420:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402448

block_4024c9:                                     ; preds = %block_402448
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402458:                                     ; preds = %block_402448
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 5376
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 13487
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 5778
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402448

block_402448:                                     ; preds = %block_402458, %block_402420
  %255 = phi i64 [ %.pre, %block_402420 ], [ %254, %block_402458 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402420 ], [ %222, %block_402458 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402458, label %block_4024c9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402628

block_402671:                                     ; preds = %block_402628
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402638:                                     ; preds = %block_402628
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 9288
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 12247
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 9578
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402628

block_402628:                                     ; preds = %block_402638, %block_402600
  %190 = phi i64 [ %.pre, %block_402600 ], [ %189, %block_402638 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402600 ], [ %157, %block_402638 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402638, label %block_402671
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403c60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2433
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2447
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2448
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2449
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2450
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2451
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4055f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2433
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #9
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2447
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %39, align 1, !tbaa !2448
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405ff0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = add i64 %9, 8
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %13 = load i64, i64* %12, align 1
  %14 = inttoptr i64 %10 to i64*
  store i64 %13, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RDI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e41

block_401e4f:                                     ; preds = %block_401e41
  %34 = add i64 %113, 4
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %82, align 8
  store i64 %35, i64* %RAX, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  store i64 %36, i64* %RCX, align 8, !tbaa !2428
  %37 = icmp ugt i64 %35, -9
  %38 = zext i1 %37 to i8
  store i8 %38, i8* %27, align 1, !tbaa !2433
  %39 = trunc i64 %36 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  store i8 %44, i8* %28, align 1, !tbaa !2447
  %45 = xor i64 %36, %35
  %46 = lshr i64 %45, 4
  %47 = trunc i64 %46 to i8
  %48 = and i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2448
  %49 = icmp eq i64 %36, 0
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %30, align 1, !tbaa !2449
  %51 = lshr i64 %36, 63
  %52 = trunc i64 %51 to i8
  store i8 %52, i8* %31, align 1, !tbaa !2450
  %53 = lshr i64 %35, 63
  %54 = xor i64 %51, %53
  %55 = add nuw nsw i64 %54, %51
  %56 = icmp eq i64 %55, 2
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %32, align 1, !tbaa !2451
  %58 = add i64 %113, 15
  store i64 %58, i64* %PC, align 8
  store i64 %36, i64* %82, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RCX, align 8, !tbaa !2428
  %65 = load i64*, i64** %33, align 8
  %66 = add i64 %61, 7
  store i64 %66, i64* %PC, align 8
  store i64 %64, i64* %65, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -36
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  br label %block_401e41

block_401e6a:                                     ; preds = %block_401e41
  %69 = add i64 %113, 1
  store i64 %69, i64* %PC, align 8
  %70 = load i64, i64* %5, align 8, !tbaa !2428
  %71 = add i64 %70, 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RBP, align 8, !tbaa !2428
  store i64 %71, i64* %5, align 8, !tbaa !2428
  %74 = add i64 %113, 2
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %77 = add i64 %70, 16
  store i64 %77, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e41:                                     ; preds = %block_401e4f, %block_401e30
  %78 = phi i64 [ %68, %block_401e4f ], [ %.pre, %block_401e30 ]
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = add i64 %78, 4
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = add i64 %79, -24
  %85 = add i64 %78, 8
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %83, %87
  %89 = icmp ult i64 %83, %87
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %27, align 1, !tbaa !2433
  %91 = trunc i64 %88 to i32
  %92 = and i32 %91, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #9
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %28, align 1, !tbaa !2447
  %97 = xor i64 %87, %83
  %98 = xor i64 %97, %88
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %29, align 1, !tbaa !2448
  %102 = icmp eq i64 %88, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2449
  %104 = lshr i64 %88, 63
  %105 = trunc i64 %104 to i8
  store i8 %105, i8* %31, align 1, !tbaa !2450
  %106 = lshr i64 %83, 63
  %107 = lshr i64 %87, 63
  %108 = xor i64 %107, %106
  %109 = xor i64 %104, %106
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %32, align 1, !tbaa !2451
  %.v = select i1 %102, i64 41, i64 14
  %113 = add i64 %78, %.v
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %102, label %block_401e6a, label %block_401e4f
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -88
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 80
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401fe0

block_401ff0:                                     ; preds = %block_401fe0
  %68 = add i64 %198, -8
  %69 = add i64 %231, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %198, -48
  %73 = add i64 %231, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -16
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %75, -56
  %82 = add i64 %77, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 %80, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -24
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -64
  %91 = add i64 %86, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -48
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = add i64 %93, -56
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = add i64 %93, -64
  %104 = add i64 %95, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %52, align 1, !tbaa !2452
  store double 0.000000e+00, double* %67, align 1, !tbaa !2452
  %107 = add i64 %95, 17288
  %108 = add i64 %95, 18
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %MEMORY.0)
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -72
  %115 = load i64, i64* %PC, align 8
  store i64 %114, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %115, 9
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %52, align 1
  %118 = inttoptr i64 %114 to i64*
  store i64 %117, i64* %118, align 8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 16173
  %121 = add i64 %119, 5
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* nonnull %0, i64 %120, %struct.Memory* %112)
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 15816
  %128 = add i64 %126, 5
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %127, %struct.Memory* %125)
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -36
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %138, 1
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = icmp eq i32 %138, -1
  %142 = icmp eq i32 %139, 0
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %12, align 1, !tbaa !2433
  %145 = and i32 %139, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #9
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %19, align 1, !tbaa !2447
  %150 = xor i32 %139, %138
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2448
  %154 = zext i1 %142 to i8
  store i8 %154, i8* %28, align 1, !tbaa !2449
  %155 = lshr i32 %139, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %31, align 1, !tbaa !2450
  %157 = lshr i32 %138, 31
  %158 = xor i32 %155, %157
  %159 = add nuw nsw i32 %158, %155
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %37, align 1, !tbaa !2451
  %162 = add i64 %135, 9
  store i64 %162, i64* %PC, align 8
  store i32 %139, i32* %137, align 4
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -86
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  br label %block_401fe0

block_40203b:                                     ; preds = %block_401fe0
  %165 = load i64, i64* %RSP, align 8
  %166 = add i64 %165, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -81
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %12, align 1, !tbaa !2433
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i64 %165, 16
  %176 = xor i64 %175, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %25, align 1, !tbaa !2448
  %180 = icmp eq i64 %166, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %28, align 1, !tbaa !2449
  %182 = lshr i64 %166, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %31, align 1, !tbaa !2450
  %184 = lshr i64 %165, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %37, align 1, !tbaa !2451
  %189 = add i64 %231, 5
  store i64 %189, i64* %PC, align 8
  %190 = add i64 %165, 88
  %191 = inttoptr i64 %166 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RBP, align 8, !tbaa !2428
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %231, 6
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %190 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  %196 = add i64 %165, 96
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401fe0:                                     ; preds = %block_401ff0, %block_401fc0
  %197 = phi i64 [ %.pre, %block_401fc0 ], [ %164, %block_401ff0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401fc0 ], [ %132, %block_401ff0 ]
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -36
  %200 = add i64 %197, 3
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %205 = sub i32 %202, %204
  %206 = icmp ult i32 %202, %204
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %12, align 1, !tbaa !2433
  %208 = and i32 %205, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #9
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2447
  %213 = xor i32 %204, %202
  %214 = xor i32 %213, %205
  %215 = lshr i32 %214, 4
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %25, align 1, !tbaa !2448
  %218 = icmp eq i32 %205, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %28, align 1, !tbaa !2449
  %220 = lshr i32 %205, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %31, align 1, !tbaa !2450
  %222 = lshr i32 %202, 31
  %223 = lshr i32 %204, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %220, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2451
  %229 = icmp ne i8 %221, 0
  %230 = xor i1 %229, %227
  %.v = select i1 %230, i64 16, i64 91
  %231 = add i64 %197, %.v
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br i1 %230, label %block_401ff0, label %block_40203b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400bb0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400bb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400b40_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403100:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403d70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 5
  store i64 %47, i64* %PC, align 8
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %49 = load i64, i64* %48, align 1
  %50 = inttoptr i64 %45 to i64*
  store i64 %49, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RDI, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -32
  %59 = load i64, i64* %RDX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  store i64 %59, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -32
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = add i64 %63, -48
  %70 = add i64 %65, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -48
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  %79 = lshr i64 %78, 63
  %80 = trunc i64 %79 to i8
  %81 = shl i64 %78, 1
  %82 = icmp slt i64 %78, 0
  %83 = icmp slt i64 %81, 0
  %84 = xor i1 %82, %83
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  store i8 %80, i8* %14, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 254
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %91 = icmp eq i64 %81, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %30, align 1, !tbaa !2432
  %93 = lshr i64 %78, 62
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %33, align 1, !tbaa !2432
  %96 = zext i1 %84 to i8
  store i8 %96, i8* %39, align 1, !tbaa !2432
  %97 = add i64 %72, -40
  %98 = add i64 %74, 16
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %81, i64* %99, align 8
  %100 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403da4

block_403e96:                                     ; preds = %block_403e88
  %101 = add i64 %731, -8
  store i64 %101, i64* %RDI, align 8, !tbaa !2428
  %102 = add i64 %570, 8
  store i64 %102, i64* %PC, align 8
  %103 = load i64, i64* %734, align 8
  %104 = add i64 %103, -1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = icmp eq i64 %103, 0
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %14, align 1, !tbaa !2433
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %21, align 1, !tbaa !2447
  %113 = xor i64 %104, %103
  %114 = lshr i64 %113, 4
  %115 = trunc i64 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %27, align 1, !tbaa !2448
  %117 = icmp eq i64 %104, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %30, align 1, !tbaa !2449
  %119 = lshr i64 %104, 63
  %120 = trunc i64 %119 to i8
  store i8 %120, i8* %33, align 1, !tbaa !2450
  %121 = lshr i64 %103, 63
  %122 = xor i64 %119, %121
  %123 = add nuw nsw i64 %122, %121
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %39, align 1, !tbaa !2451
  store i64 %104, i64* %RSI, align 8, !tbaa !2428
  %126 = add i64 %570, -342
  %127 = add i64 %570, 20
  %128 = load i64, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %128, -8
  %130 = inttoptr i64 %129 to i64*
  store i64 %127, i64* %130, align 8
  store i64 %129, i64* %RSP, align 8, !tbaa !2428
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  %131 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %126, %struct.Memory* %MEMORY.4)
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -88
  %134 = load i64, i64* %PC, align 8
  store i64 %133, i64* %RDI, align 8, !tbaa !2428
  %135 = load i64, i64* %RAX, align 8
  %136 = add i64 %134, 8
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  store i64 %135, i64* %137, align 8
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %138, -482
  %140 = add i64 %138, 5
  %141 = load i64, i64* %RSP, align 8, !tbaa !2428
  %142 = add i64 %141, -8
  %143 = inttoptr i64 %142 to i64*
  store i64 %140, i64* %143, align 8
  store i64 %142, i64* %RSP, align 8, !tbaa !2428
  store i64 %139, i64* %PC, align 8, !tbaa !2428
  %144 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %139, %struct.Memory* %131)
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -8
  %147 = load i64, i64* %PC, align 8
  store i64 %146, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %145, -48
  %149 = add i64 %147, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %145, -152
  %153 = load i64, i64* %RAX, align 8
  %154 = add i64 %147, 15
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %152 to i64*
  store i64 %153, i64* %155, align 8
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, -390
  %158 = add i64 %156, 5
  %159 = load i64, i64* %RSP, align 8, !tbaa !2428
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %158, i64* %161, align 8
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  store i64 %157, i64* %PC, align 8, !tbaa !2428
  %162 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %157, %struct.Memory* %144)
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -96
  %165 = load i64, i64* %PC, align 8
  store i64 %164, i64* %RDI, align 8, !tbaa !2428
  %166 = load i64, i64* %RAX, align 8
  %167 = add i64 %165, 8
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  store i64 %166, i64* %168, align 8
  %169 = load i64, i64* %PC, align 8
  %170 = add i64 %169, -515
  %171 = add i64 %169, 5
  %172 = load i64, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174, align 8
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %175 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %170, %struct.Memory* %162)
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -152
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %RSI, align 8, !tbaa !2428
  %182 = add i64 %178, 10
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64*, i64** %100, align 8
  %186 = add i64 %178, 13
  store i64 %186, i64* %PC, align 8
  store i64 %184, i64* %185, align 8
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -40
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = add i64 %192, -1
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = icmp eq i64 %192, 0
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %14, align 1, !tbaa !2433
  %196 = trunc i64 %193 to i32
  %197 = and i32 %196, 255
  %198 = tail call i32 @llvm.ctpop.i32(i32 %197) #9
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  %201 = xor i8 %200, 1
  store i8 %201, i8* %21, align 1, !tbaa !2447
  %202 = xor i64 %193, %192
  %203 = lshr i64 %202, 4
  %204 = trunc i64 %203 to i8
  %205 = and i8 %204, 1
  store i8 %205, i8* %27, align 1, !tbaa !2448
  %206 = icmp eq i64 %193, 0
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %30, align 1, !tbaa !2449
  %208 = lshr i64 %193, 63
  %209 = trunc i64 %208 to i8
  store i8 %209, i8* %33, align 1, !tbaa !2450
  %210 = lshr i64 %192, 63
  %211 = xor i64 %208, %210
  %212 = add nuw nsw i64 %211, %210
  %213 = icmp eq i64 %212, 2
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %39, align 1, !tbaa !2451
  %215 = add i64 %187, -48
  %216 = add i64 %189, 12
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  store i64 %193, i64* %217, align 8
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i64, i64* %RBP, align 8
  br label %block_403ef1

block_403db2:                                     ; preds = %block_403da4
  %218 = add i64 %731, -8
  store i64 %218, i64* %RDI, align 8, !tbaa !2428
  %219 = add i64 %767, 8
  store i64 %219, i64* %PC, align 8
  %220 = load i64, i64* %734, align 8
  %221 = add i64 %220, -1
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = icmp eq i64 %220, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %14, align 1, !tbaa !2433
  %224 = trunc i64 %221 to i32
  %225 = and i32 %224, 255
  %226 = tail call i32 @llvm.ctpop.i32(i32 %225) #9
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  store i8 %229, i8* %21, align 1, !tbaa !2447
  %230 = xor i64 %221, %220
  %231 = lshr i64 %230, 4
  %232 = trunc i64 %231 to i8
  %233 = and i8 %232, 1
  store i8 %233, i8* %27, align 1, !tbaa !2448
  %234 = icmp eq i64 %221, 0
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %30, align 1, !tbaa !2449
  %236 = lshr i64 %221, 63
  %237 = trunc i64 %236 to i8
  store i8 %237, i8* %33, align 1, !tbaa !2450
  %238 = lshr i64 %220, 63
  %239 = xor i64 %236, %238
  %240 = add nuw nsw i64 %239, %238
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %39, align 1, !tbaa !2451
  store i64 %221, i64* %RSI, align 8, !tbaa !2428
  %243 = add i64 %767, -114
  %244 = add i64 %767, 20
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %243, %struct.Memory* %MEMORY.4)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -56
  %251 = load i64, i64* %PC, align 8
  store i64 %250, i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* %RAX, align 8
  %253 = add i64 %251, 8
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %250 to i64*
  store i64 %252, i64* %254, align 8
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, -254
  %257 = add i64 %255, 5
  %258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260, align 8
  store i64 %259, i64* %RSP, align 8, !tbaa !2428
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  %261 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %256, %struct.Memory* %MEMORY.4)
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -8
  %264 = load i64, i64* %PC, align 8
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %265 = add i64 %262, -40
  %266 = add i64 %264, 8
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RSI, align 8, !tbaa !2428
  %269 = add i64 %262, -136
  %270 = load i64, i64* %RAX, align 8
  %271 = add i64 %264, 15
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %269 to i64*
  store i64 %270, i64* %272, align 8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -162
  %275 = add i64 %273, 5
  %276 = load i64, i64* %RSP, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %275, i64* %278, align 8
  store i64 %277, i64* %RSP, align 8, !tbaa !2428
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  %279 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %274, %struct.Memory* %MEMORY.4)
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -64
  %282 = load i64, i64* %PC, align 8
  store i64 %281, i64* %RDI, align 8, !tbaa !2428
  %283 = load i64, i64* %RAX, align 8
  %284 = add i64 %282, 8
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %281 to i64*
  store i64 %283, i64* %285, align 8
  %286 = load i64, i64* %PC, align 8
  %287 = add i64 %286, -287
  %288 = add i64 %286, 5
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %287, %struct.Memory* %MEMORY.4)
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -136
  %295 = load i64, i64* %PC, align 8
  %296 = add i64 %295, 7
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RDI, align 8, !tbaa !2428
  %299 = load i64, i64* %RAX, align 8
  store i64 %299, i64* %RSI, align 8, !tbaa !2428
  %300 = add i64 %295, -2980
  %301 = add i64 %295, 15
  %302 = load i64, i64* %RSP, align 8, !tbaa !2428
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %304, align 8
  store i64 %303, i64* %RSP, align 8, !tbaa !2428
  store i64 %300, i64* %PC, align 8, !tbaa !2428
  %305 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %300, %struct.Memory* %MEMORY.4)
  %306 = load i8, i8* %AL, align 1
  %307 = load i64, i64* %PC, align 8
  %308 = and i8 %306, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %309 = zext i8 %308 to i32
  %310 = tail call i32 @llvm.ctpop.i32(i32 %309) #9
  %311 = trunc i32 %310 to i8
  %312 = xor i8 %311, 1
  store i8 %312, i8* %21, align 1, !tbaa !2447
  %313 = xor i8 %308, 1
  store i8 %313, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %314 = icmp eq i8 %313, 0
  %.v22 = select i1 %314, i64 13, i64 8
  %315 = add i64 %307, %.v22
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  br i1 %314, label %block_403e10, label %block_403e0b

block_403f50:                                     ; preds = %block_403f24, %block_403f0c
  %316 = phi i64 [ %370, %block_403f0c ], [ %.pre15, %block_403f24 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403f0c ], [ %605, %block_403f24 ]
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -153
  %319 = add i64 %316, 6
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i8*
  %321 = load i8, i8* %320, align 1
  store i8 %321, i8* %AL, align 1, !tbaa !2432
  %322 = and i8 %321, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %323 = zext i8 %322 to i32
  %324 = tail call i32 @llvm.ctpop.i32(i32 %323) #9
  %325 = trunc i32 %324 to i8
  %326 = xor i8 %325, 1
  store i8 %326, i8* %21, align 1, !tbaa !2447
  %327 = xor i8 %322, 1
  store i8 %327, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %328 = icmp eq i8 %327, 0
  %.v = select i1 %328, i64 19, i64 14
  %329 = add i64 %316, %.v
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  %330 = add i64 %317, -8
  store i64 %330, i64* %RDI, align 8, !tbaa !2428
  br i1 %328, label %block_403f63, label %block_403f5e

block_403f0c:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %331 = phi i64 [ %.pre14, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %901, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %662, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %896, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -48
  %334 = add i64 %331, 8
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RDX, align 8, !tbaa !2428
  %337 = add i64 %332, -32
  %338 = add i64 %331, 12
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = sub i64 %336, %340
  %342 = icmp ult i64 %336, %340
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %14, align 1, !tbaa !2433
  %344 = trunc i64 %341 to i32
  %345 = and i32 %344, 255
  %346 = tail call i32 @llvm.ctpop.i32(i32 %345) #9
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  %349 = xor i8 %348, 1
  store i8 %349, i8* %21, align 1, !tbaa !2447
  %350 = xor i64 %340, %336
  %351 = xor i64 %350, %341
  %352 = lshr i64 %351, 4
  %353 = trunc i64 %352 to i8
  %354 = and i8 %353, 1
  store i8 %354, i8* %27, align 1, !tbaa !2448
  %355 = icmp eq i64 %341, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %30, align 1, !tbaa !2449
  %357 = lshr i64 %341, 63
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %33, align 1, !tbaa !2450
  %359 = lshr i64 %336, 63
  %360 = lshr i64 %340, 63
  %361 = xor i64 %360, %359
  %362 = xor i64 %357, %359
  %363 = add nuw nsw i64 %362, %361
  %364 = icmp eq i64 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %39, align 1, !tbaa !2451
  %366 = add i64 %332, -153
  %367 = add i64 %331, 18
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i8*
  store i8 0, i8* %368, align 1
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 50
  %371 = add i64 %369, 6
  %372 = load i8, i8* %30, align 1, !tbaa !2449
  %373 = icmp ne i8 %372, 0
  %374 = load i8, i8* %33, align 1, !tbaa !2450
  %375 = icmp ne i8 %374, 0
  %376 = load i8, i8* %39, align 1, !tbaa !2451
  %377 = icmp ne i8 %376, 0
  %378 = xor i1 %375, %377
  %379 = or i1 %373, %378
  %380 = select i1 %379, i64 %370, i64 %371
  store i64 %380, i64* %PC, align 8, !tbaa !2428
  br i1 %379, label %block_403f50, label %block_403f24

block_403e1c:                                     ; preds = %block_403e10, %block_403e0b
  %381 = phi i64 [ %.pre19, %block_403e10 ], [ %540, %block_403e0b ]
  %382 = load i64, i64* %RBP, align 8
  %383 = add i64 %382, -8
  store i64 %383, i64* %RDI, align 8, !tbaa !2428
  %384 = add i64 %382, -40
  %385 = add i64 %381, 8
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %384 to i64*
  %387 = load i64, i64* %386, align 8
  %388 = add i64 %387, -1
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = icmp eq i64 %387, 0
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %14, align 1, !tbaa !2433
  %391 = trunc i64 %388 to i32
  %392 = and i32 %391, 255
  %393 = tail call i32 @llvm.ctpop.i32(i32 %392) #9
  %394 = trunc i32 %393 to i8
  %395 = and i8 %394, 1
  %396 = xor i8 %395, 1
  store i8 %396, i8* %21, align 1, !tbaa !2447
  %397 = xor i64 %388, %387
  %398 = lshr i64 %397, 4
  %399 = trunc i64 %398 to i8
  %400 = and i8 %399, 1
  store i8 %400, i8* %27, align 1, !tbaa !2448
  %401 = icmp eq i64 %388, 0
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %30, align 1, !tbaa !2449
  %403 = lshr i64 %388, 63
  %404 = trunc i64 %403 to i8
  store i8 %404, i8* %33, align 1, !tbaa !2450
  %405 = lshr i64 %387, 63
  %406 = xor i64 %403, %405
  %407 = add nuw nsw i64 %406, %405
  %408 = icmp eq i64 %407, 2
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %39, align 1, !tbaa !2451
  store i64 %388, i64* %RSI, align 8, !tbaa !2428
  %410 = add i64 %381, -220
  %411 = add i64 %381, 20
  %412 = load i64, i64* %RSP, align 8, !tbaa !2428
  %413 = add i64 %412, -8
  %414 = inttoptr i64 %413 to i64*
  store i64 %411, i64* %414, align 8
  store i64 %413, i64* %RSP, align 8, !tbaa !2428
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  %415 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %410, %struct.Memory* %305)
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -72
  %418 = load i64, i64* %PC, align 8
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %419 = load i64, i64* %RAX, align 8
  %420 = add i64 %418, 8
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %417 to i64*
  store i64 %419, i64* %421, align 8
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, -360
  %424 = add i64 %422, 5
  %425 = load i64, i64* %RSP, align 8, !tbaa !2428
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %424, i64* %427, align 8
  store i64 %426, i64* %RSP, align 8, !tbaa !2428
  store i64 %423, i64* %PC, align 8, !tbaa !2428
  %428 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %423, %struct.Memory* %415)
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -8
  %431 = load i64, i64* %PC, align 8
  store i64 %430, i64* %RDI, align 8, !tbaa !2428
  %432 = add i64 %429, -48
  %433 = add i64 %431, 8
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %432 to i64*
  %435 = load i64, i64* %434, align 8
  store i64 %435, i64* %RSI, align 8, !tbaa !2428
  %436 = add i64 %429, -144
  %437 = load i64, i64* %RAX, align 8
  %438 = add i64 %431, 15
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %436 to i64*
  store i64 %437, i64* %439, align 8
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, -268
  %442 = add i64 %440, 5
  %443 = load i64, i64* %RSP, align 8, !tbaa !2428
  %444 = add i64 %443, -8
  %445 = inttoptr i64 %444 to i64*
  store i64 %442, i64* %445, align 8
  store i64 %444, i64* %RSP, align 8, !tbaa !2428
  store i64 %441, i64* %PC, align 8, !tbaa !2428
  %446 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %441, %struct.Memory* %428)
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -80
  %449 = load i64, i64* %PC, align 8
  store i64 %448, i64* %RDI, align 8, !tbaa !2428
  %450 = load i64, i64* %RAX, align 8
  %451 = add i64 %449, 8
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %448 to i64*
  store i64 %450, i64* %452, align 8
  %453 = load i64, i64* %PC, align 8
  %454 = add i64 %453, -393
  %455 = add i64 %453, 5
  %456 = load i64, i64* %RSP, align 8, !tbaa !2428
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %455, i64* %458, align 8
  store i64 %457, i64* %RSP, align 8, !tbaa !2428
  store i64 %454, i64* %PC, align 8, !tbaa !2428
  %459 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %454, %struct.Memory* %446)
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -144
  %462 = load i64, i64* %PC, align 8
  %463 = add i64 %462, 7
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %461 to i64*
  %465 = load i64, i64* %464, align 8
  store i64 %465, i64* %RSI, align 8, !tbaa !2428
  %466 = add i64 %462, 10
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  %468 = load i64, i64* %467, align 8
  store i64 %468, i64* %RDI, align 8, !tbaa !2428
  %469 = load i64*, i64** %100, align 8
  %470 = add i64 %462, 13
  store i64 %470, i64* %PC, align 8
  store i64 %468, i64* %469, align 8
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -40
  %473 = load i64, i64* %PC, align 8
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = add i64 %476, -1
  store i64 %477, i64* %RAX, align 8, !tbaa !2428
  %478 = icmp eq i64 %476, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %14, align 1, !tbaa !2433
  %480 = trunc i64 %477 to i32
  %481 = and i32 %480, 255
  %482 = tail call i32 @llvm.ctpop.i32(i32 %481) #9
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  store i8 %485, i8* %21, align 1, !tbaa !2447
  %486 = xor i64 %477, %476
  %487 = lshr i64 %486, 4
  %488 = trunc i64 %487 to i8
  %489 = and i8 %488, 1
  store i8 %489, i8* %27, align 1, !tbaa !2448
  %490 = icmp eq i64 %477, 0
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %30, align 1, !tbaa !2449
  %492 = lshr i64 %477, 63
  %493 = trunc i64 %492 to i8
  store i8 %493, i8* %33, align 1, !tbaa !2450
  %494 = lshr i64 %476, 63
  %495 = xor i64 %492, %494
  %496 = add nuw nsw i64 %495, %494
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  store i8 %498, i8* %39, align 1, !tbaa !2451
  %499 = add i64 %471, -48
  %500 = add i64 %473, 12
  store i64 %500, i64* %PC, align 8
  %501 = inttoptr i64 %499 to i64*
  store i64 %477, i64* %501, align 8
  %502 = load i64, i64* %RBP, align 8
  %503 = add i64 %502, -40
  %504 = load i64, i64* %PC, align 8
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = add i64 %504, 8
  store i64 %508, i64* %PC, align 8
  %509 = load i64, i64* %506, align 8
  %510 = add i64 %509, %507
  store i64 %510, i64* %RAX, align 8, !tbaa !2428
  %511 = icmp ult i64 %510, %507
  %512 = icmp ult i64 %510, %509
  %513 = or i1 %511, %512
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %14, align 1, !tbaa !2433
  %515 = trunc i64 %510 to i32
  %516 = and i32 %515, 255
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516) #9
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %21, align 1, !tbaa !2447
  %521 = xor i64 %509, %507
  %522 = xor i64 %521, %510
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %27, align 1, !tbaa !2448
  %526 = icmp eq i64 %510, 0
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %30, align 1, !tbaa !2449
  %528 = lshr i64 %510, 63
  %529 = trunc i64 %528 to i8
  store i8 %529, i8* %33, align 1, !tbaa !2450
  %530 = lshr i64 %507, 63
  %531 = lshr i64 %509, 63
  %532 = xor i64 %528, %530
  %533 = xor i64 %528, %531
  %534 = add nuw nsw i64 %532, %533
  %535 = icmp eq i64 %534, 2
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %39, align 1, !tbaa !2451
  %537 = add i64 %504, 12
  store i64 %537, i64* %PC, align 8
  store i64 %510, i64* %506, align 8
  %538 = load i64, i64* %PC, align 8
  %539 = add i64 %538, -223
  store i64 %539, i64* %PC, align 8, !tbaa !2428
  br label %block_403da4

block_403e0b:                                     ; preds = %block_403db2
  %540 = add i64 %315, 17
  store i64 %540, i64* %PC, align 8, !tbaa !2428
  br label %block_403e1c

block_403e88:                                     ; preds = %block_403da4
  %CL = bitcast %union.anon* %4 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %541 = add i64 %767, 4
  store i64 %541, i64* %PC, align 8
  %542 = load i64, i64* %734, align 8
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = add i64 %767, 8
  store i64 %543, i64* %PC, align 8
  %544 = load i64, i64* %738, align 8
  %545 = sub i64 %542, %544
  %546 = icmp ult i64 %542, %544
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %14, align 1, !tbaa !2433
  %548 = trunc i64 %545 to i32
  %549 = and i32 %548, 255
  %550 = tail call i32 @llvm.ctpop.i32(i32 %549) #9
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  store i8 %553, i8* %21, align 1, !tbaa !2447
  %554 = xor i64 %544, %542
  %555 = xor i64 %554, %545
  %556 = lshr i64 %555, 4
  %557 = trunc i64 %556 to i8
  %558 = and i8 %557, 1
  store i8 %558, i8* %27, align 1, !tbaa !2448
  %559 = icmp eq i64 %545, 0
  %560 = zext i1 %559 to i8
  store i8 %560, i8* %30, align 1, !tbaa !2449
  %561 = lshr i64 %545, 63
  %562 = trunc i64 %561 to i8
  store i8 %562, i8* %33, align 1, !tbaa !2450
  %563 = lshr i64 %542, 63
  %564 = lshr i64 %544, 63
  %565 = xor i64 %564, %563
  %566 = xor i64 %561, %563
  %567 = add nuw nsw i64 %566, %565
  %568 = icmp eq i64 %567, 2
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %39, align 1, !tbaa !2451
  %.v21 = select i1 %559, i64 14, i64 105
  %570 = add i64 %767, %.v21
  store i64 %570, i64* %PC, align 8, !tbaa !2428
  br i1 %559, label %block_403e96, label %block_403ef1

block_403f24:                                     ; preds = %block_403f0c
  %571 = load i64, i64* %RBP, align 8
  %572 = add i64 %571, -8
  store i64 %572, i64* %RDI, align 8, !tbaa !2428
  %573 = add i64 %571, -40
  %574 = add i64 %380, 8
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i64*
  %576 = load i64, i64* %575, align 8
  store i64 %576, i64* %RSI, align 8, !tbaa !2428
  %577 = add i64 %380, -484
  %578 = add i64 %380, 13
  %579 = load i64, i64* %RSP, align 8, !tbaa !2428
  %580 = add i64 %579, -8
  %581 = inttoptr i64 %580 to i64*
  store i64 %578, i64* %581, align 8
  store i64 %580, i64* %RSP, align 8, !tbaa !2428
  store i64 %577, i64* %PC, align 8, !tbaa !2428
  %582 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %577, %struct.Memory* %MEMORY.1)
  %583 = load i64, i64* %RBP, align 8
  %584 = add i64 %583, -104
  %585 = load i64, i64* %PC, align 8
  store i64 %584, i64* %RDI, align 8, !tbaa !2428
  %586 = load i64, i64* %RAX, align 8
  %587 = add i64 %585, 8
  store i64 %587, i64* %PC, align 8
  %588 = inttoptr i64 %584 to i64*
  store i64 %586, i64* %588, align 8
  %589 = load i64, i64* %PC, align 8
  %590 = add i64 %589, -617
  %591 = add i64 %589, 5
  %592 = load i64, i64* %RSP, align 8, !tbaa !2428
  %593 = add i64 %592, -8
  %594 = inttoptr i64 %593 to i64*
  store i64 %591, i64* %594, align 8
  store i64 %593, i64* %RSP, align 8, !tbaa !2428
  store i64 %590, i64* %PC, align 8, !tbaa !2428
  %595 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %590, %struct.Memory* %MEMORY.1)
  %596 = load i64, i64* %RBP, align 8
  %597 = add i64 %596, -16
  %598 = load i64, i64* %PC, align 8
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %599 = load i64, i64* %RAX, align 8
  store i64 %599, i64* %RDI, align 8, !tbaa !2428
  %600 = add i64 %598, -3310
  %601 = add i64 %598, 12
  %602 = load i64, i64* %RSP, align 8, !tbaa !2428
  %603 = add i64 %602, -8
  %604 = inttoptr i64 %603 to i64*
  store i64 %601, i64* %604, align 8
  store i64 %603, i64* %RSP, align 8, !tbaa !2428
  store i64 %600, i64* %PC, align 8, !tbaa !2428
  %605 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %600, %struct.Memory* %MEMORY.1)
  %606 = load i64, i64* %RBP, align 8
  %607 = add i64 %606, -153
  %608 = load i8, i8* %AL, align 1
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, 6
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %607 to i8*
  store i8 %608, i8* %611, align 1
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_403f50

block_403ef1:                                     ; preds = %block_403e88, %block_403e96
  %612 = phi i64 [ %731, %block_403e88 ], [ %.pre10, %block_403e96 ]
  %613 = phi i64 [ %570, %block_403e88 ], [ %.pre9, %block_403e96 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_403e88 ], [ %175, %block_403e96 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %614 = add i64 %612, -48
  %615 = add i64 %613, 11
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %614 to i64*
  %617 = load i64, i64* %616, align 8
  %618 = add i64 %617, -1
  %619 = icmp eq i64 %617, 0
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %14, align 1, !tbaa !2433
  %621 = trunc i64 %618 to i32
  %622 = and i32 %621, 255
  %623 = tail call i32 @llvm.ctpop.i32(i32 %622) #9
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  store i8 %626, i8* %21, align 1, !tbaa !2447
  %627 = xor i64 %618, %617
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %27, align 1, !tbaa !2448
  %631 = icmp eq i64 %618, 0
  %632 = zext i1 %631 to i8
  store i8 %632, i8* %30, align 1, !tbaa !2449
  %633 = lshr i64 %618, 63
  %634 = trunc i64 %633 to i8
  store i8 %634, i8* %33, align 1, !tbaa !2450
  %635 = lshr i64 %617, 63
  %636 = xor i64 %633, %635
  %637 = add nuw nsw i64 %636, %635
  %638 = icmp eq i64 %637, 2
  %639 = zext i1 %638 to i8
  store i8 %639, i8* %39, align 1, !tbaa !2451
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %641 = ashr i64 %618, 63
  store i64 %641, i64* %RDX, align 8, !tbaa !2428
  %642 = add i64 %613, 23
  store i64 %642, i64* %PC, align 8
  %643 = zext i64 %641 to i128
  %644 = shl nuw i128 %643, 64
  %645 = zext i64 %618 to i128
  %646 = or i128 %644, %645
  %647 = sdiv i128 %646, 2
  %648 = trunc i128 %647 to i64
  %649 = and i128 %647, 18446744073709551615
  %650 = sext i64 %648 to i128
  %651 = and i128 %650, -18446744073709551616
  %652 = or i128 %651, %649
  %653 = icmp eq i128 %647, %652
  br i1 %653, label %656, label %654

; <label>:654:                                    ; preds = %block_403ef1
  %655 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %642, %struct.Memory* %MEMORY.3) #12
  %.pre11 = load i64, i64* %RBP, align 8
  %.pre12 = load i64, i64* %RAX, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:656:                                    ; preds = %block_403ef1
  %657 = srem i128 %646, 2
  %658 = trunc i128 %657 to i64
  store i64 %648, i64* %640, align 8, !tbaa !2428
  store i64 %658, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %656, %654
  %659 = phi i64 [ %.pre13, %654 ], [ %642, %656 ]
  %660 = phi i64 [ %.pre12, %654 ], [ %648, %656 ]
  %661 = phi i64 [ %.pre11, %654 ], [ %612, %656 ]
  %662 = phi %struct.Memory* [ %655, %654 ], [ %MEMORY.3, %656 ]
  %663 = add i64 %661, -40
  %664 = add i64 %659, 4
  store i64 %664, i64* %PC, align 8
  %665 = inttoptr i64 %663 to i64*
  store i64 %660, i64* %665, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_403f0c

block_403f5e:                                     ; preds = %block_403f50
  %666 = add i64 %317, -48
  %667 = add i64 %329, 122
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i64*
  %669 = load i64, i64* %668, align 8
  store i64 %669, i64* %RSI, align 8, !tbaa !2428
  %670 = add i64 %329, -542
  %671 = add i64 %329, 127
  %672 = load i64, i64* %RSP, align 8, !tbaa !2428
  %673 = add i64 %672, -8
  %674 = inttoptr i64 %673 to i64*
  store i64 %671, i64* %674, align 8
  store i64 %673, i64* %RSP, align 8, !tbaa !2428
  store i64 %670, i64* %PC, align 8, !tbaa !2428
  %675 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %670, %struct.Memory* %MEMORY.0)
  %676 = load i64, i64* %RBP, align 8
  %677 = add i64 %676, -128
  %678 = load i64, i64* %PC, align 8
  store i64 %677, i64* %RDI, align 8, !tbaa !2428
  %679 = load i64, i64* %RAX, align 8
  %680 = add i64 %678, 8
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %677 to i64*
  store i64 %679, i64* %681, align 8
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, -789
  %684 = add i64 %682, 5
  %685 = load i64, i64* %RSP, align 8, !tbaa !2428
  %686 = add i64 %685, -8
  %687 = inttoptr i64 %686 to i64*
  store i64 %684, i64* %687, align 8
  store i64 %686, i64* %RSP, align 8, !tbaa !2428
  store i64 %683, i64* %PC, align 8, !tbaa !2428
  %688 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %683, %struct.Memory* %675)
  %689 = load i64, i64* %RBP, align 8
  %690 = add i64 %689, -16
  %691 = load i64, i64* %PC, align 8
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693, align 8
  store i64 %694, i64* %RSI, align 8, !tbaa !2428
  %695 = load i64*, i64** %100, align 8
  %696 = add i64 %691, 7
  store i64 %696, i64* %PC, align 8
  store i64 %694, i64* %695, align 8
  %697 = load i64, i64* %RSP, align 8
  %698 = load i64, i64* %PC, align 8
  %699 = add i64 %697, 176
  store i64 %699, i64* %RSP, align 8, !tbaa !2428
  %700 = icmp ugt i64 %697, -177
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %14, align 1, !tbaa !2433
  %702 = trunc i64 %699 to i32
  %703 = and i32 %702, 255
  %704 = tail call i32 @llvm.ctpop.i32(i32 %703) #9
  %705 = trunc i32 %704 to i8
  %706 = and i8 %705, 1
  %707 = xor i8 %706, 1
  store i8 %707, i8* %21, align 1, !tbaa !2447
  %708 = xor i64 %697, 16
  %709 = xor i64 %708, %699
  %710 = lshr i64 %709, 4
  %711 = trunc i64 %710 to i8
  %712 = and i8 %711, 1
  store i8 %712, i8* %27, align 1, !tbaa !2448
  %713 = icmp eq i64 %699, 0
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %30, align 1, !tbaa !2449
  %715 = lshr i64 %699, 63
  %716 = trunc i64 %715 to i8
  store i8 %716, i8* %33, align 1, !tbaa !2450
  %717 = lshr i64 %697, 63
  %718 = xor i64 %715, %717
  %719 = add nuw nsw i64 %718, %715
  %720 = icmp eq i64 %719, 2
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %39, align 1, !tbaa !2451
  %722 = add i64 %698, 8
  store i64 %722, i64* %PC, align 8
  %723 = add i64 %697, 184
  %724 = inttoptr i64 %699 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %RBP, align 8, !tbaa !2428
  store i64 %723, i64* %RSP, align 8, !tbaa !2428
  %726 = add i64 %698, 9
  store i64 %726, i64* %PC, align 8
  %727 = inttoptr i64 %723 to i64*
  %728 = load i64, i64* %727, align 8
  store i64 %728, i64* %PC, align 8, !tbaa !2428
  %729 = add i64 %697, 192
  store i64 %729, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %688

block_403da4:                                     ; preds = %block_403e1c, %block_403d70
  %730 = phi i64 [ %.pre, %block_403d70 ], [ %539, %block_403e1c ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_403d70 ], [ %459, %block_403e1c ]
  %731 = load i64, i64* %RBP, align 8
  %732 = add i64 %731, -40
  %733 = add i64 %730, 4
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %RAX, align 8, !tbaa !2428
  %736 = add i64 %731, -24
  %737 = add i64 %730, 8
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %736 to i64*
  %739 = load i64, i64* %738, align 8
  %740 = sub i64 %735, %739
  %741 = icmp ult i64 %735, %739
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %14, align 1, !tbaa !2433
  %743 = trunc i64 %740 to i32
  %744 = and i32 %743, 255
  %745 = tail call i32 @llvm.ctpop.i32(i32 %744) #9
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = xor i8 %747, 1
  store i8 %748, i8* %21, align 1, !tbaa !2447
  %749 = xor i64 %739, %735
  %750 = xor i64 %749, %740
  %751 = lshr i64 %750, 4
  %752 = trunc i64 %751 to i8
  %753 = and i8 %752, 1
  store i8 %753, i8* %27, align 1, !tbaa !2448
  %754 = icmp eq i64 %740, 0
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %30, align 1, !tbaa !2449
  %756 = lshr i64 %740, 63
  %757 = trunc i64 %756 to i8
  store i8 %757, i8* %33, align 1, !tbaa !2450
  %758 = lshr i64 %735, 63
  %759 = lshr i64 %739, 63
  %760 = xor i64 %759, %758
  %761 = xor i64 %756, %758
  %762 = add nuw nsw i64 %761, %760
  %763 = icmp eq i64 %762, 2
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %39, align 1, !tbaa !2451
  %765 = icmp ne i8 %757, 0
  %766 = xor i1 %765, %763
  %.v20 = select i1 %766, i64 14, i64 228
  %767 = add i64 %730, %.v20
  store i64 %767, i64* %PC, align 8, !tbaa !2428
  br i1 %766, label %block_403db2, label %block_403e88

block_403f63:                                     ; preds = %block_403f50
  %768 = add i64 %317, -40
  %769 = add i64 %329, 8
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %768 to i64*
  %771 = load i64, i64* %770, align 8
  store i64 %771, i64* %RSI, align 8, !tbaa !2428
  %772 = add i64 %329, -547
  %773 = add i64 %329, 13
  %774 = load i64, i64* %RSP, align 8, !tbaa !2428
  %775 = add i64 %774, -8
  %776 = inttoptr i64 %775 to i64*
  store i64 %773, i64* %776, align 8
  store i64 %775, i64* %RSP, align 8, !tbaa !2428
  store i64 %772, i64* %PC, align 8, !tbaa !2428
  %777 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %772, %struct.Memory* %MEMORY.0)
  %778 = load i64, i64* %RBP, align 8
  %779 = add i64 %778, -112
  %780 = load i64, i64* %PC, align 8
  store i64 %779, i64* %RDI, align 8, !tbaa !2428
  %781 = load i64, i64* %RAX, align 8
  %782 = add i64 %780, 8
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %779 to i64*
  store i64 %781, i64* %783, align 8
  %784 = load i64, i64* %PC, align 8
  %785 = add i64 %784, -680
  %786 = add i64 %784, 5
  %787 = load i64, i64* %RSP, align 8, !tbaa !2428
  %788 = add i64 %787, -8
  %789 = inttoptr i64 %788 to i64*
  store i64 %786, i64* %789, align 8
  store i64 %788, i64* %RSP, align 8, !tbaa !2428
  store i64 %785, i64* %PC, align 8, !tbaa !2428
  %790 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %785, %struct.Memory* %777)
  %791 = load i64, i64* %RBP, align 8
  %792 = add i64 %791, -8
  %793 = load i64, i64* %PC, align 8
  store i64 %792, i64* %RDI, align 8, !tbaa !2428
  %794 = add i64 %791, -48
  %795 = add i64 %793, 8
  store i64 %795, i64* %PC, align 8
  %796 = inttoptr i64 %794 to i64*
  %797 = load i64, i64* %796, align 8
  store i64 %797, i64* %RSI, align 8, !tbaa !2428
  %798 = add i64 %791, -168
  %799 = load i64, i64* %RAX, align 8
  %800 = add i64 %793, 15
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %798 to i64*
  store i64 %799, i64* %801, align 8
  %802 = load i64, i64* %PC, align 8
  %803 = add i64 %802, -588
  %804 = add i64 %802, 5
  %805 = load i64, i64* %RSP, align 8, !tbaa !2428
  %806 = add i64 %805, -8
  %807 = inttoptr i64 %806 to i64*
  store i64 %804, i64* %807, align 8
  store i64 %806, i64* %RSP, align 8, !tbaa !2428
  store i64 %803, i64* %PC, align 8, !tbaa !2428
  %808 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %803, %struct.Memory* %790)
  %809 = load i64, i64* %RBP, align 8
  %810 = add i64 %809, -120
  %811 = load i64, i64* %PC, align 8
  store i64 %810, i64* %RDI, align 8, !tbaa !2428
  %812 = load i64, i64* %RAX, align 8
  %813 = add i64 %811, 8
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %810 to i64*
  store i64 %812, i64* %814, align 8
  %815 = load i64, i64* %PC, align 8
  %816 = add i64 %815, -713
  %817 = add i64 %815, 5
  %818 = load i64, i64* %RSP, align 8, !tbaa !2428
  %819 = add i64 %818, -8
  %820 = inttoptr i64 %819 to i64*
  store i64 %817, i64* %820, align 8
  store i64 %819, i64* %RSP, align 8, !tbaa !2428
  store i64 %816, i64* %PC, align 8, !tbaa !2428
  %821 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %816, %struct.Memory* %808)
  %822 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %823 = load i64, i64* %RBP, align 8
  %824 = add i64 %823, -168
  %825 = add i64 %822, 14
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %824 to i64*
  %827 = load i64, i64* %826, align 8
  store i64 %827, i64* %RDI, align 8, !tbaa !2428
  %828 = add i64 %822, 17
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i64*
  %830 = load i64, i64* %829, align 8
  store i64 %830, i64* %RDX, align 8, !tbaa !2428
  %831 = load i64*, i64** %100, align 8
  %832 = add i64 %822, 20
  store i64 %832, i64* %PC, align 8
  store i64 %830, i64* %831, align 8
  %833 = load i64, i64* %RBP, align 8
  %834 = add i64 %833, -40
  %835 = load i64, i64* %PC, align 8
  %836 = add i64 %835, 4
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %834 to i64*
  %838 = load i64, i64* %837, align 8
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = add i64 %833, -48
  %840 = add i64 %835, 8
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i64*
  store i64 %838, i64* %841, align 8
  %842 = load i64, i64* %RBP, align 8
  %843 = add i64 %842, -48
  %844 = load i64, i64* %PC, align 8
  %845 = add i64 %844, 4
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %843 to i64*
  %847 = load i64, i64* %846, align 8
  %848 = add i64 %847, -1
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = icmp eq i64 %847, 0
  %850 = zext i1 %849 to i8
  store i8 %850, i8* %14, align 1, !tbaa !2433
  %851 = trunc i64 %848 to i32
  %852 = and i32 %851, 255
  %853 = tail call i32 @llvm.ctpop.i32(i32 %852) #9
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = xor i8 %855, 1
  store i8 %856, i8* %21, align 1, !tbaa !2447
  %857 = xor i64 %848, %847
  %858 = lshr i64 %857, 4
  %859 = trunc i64 %858 to i8
  %860 = and i8 %859, 1
  store i8 %860, i8* %27, align 1, !tbaa !2448
  %861 = icmp eq i64 %848, 0
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %30, align 1, !tbaa !2449
  %863 = lshr i64 %848, 63
  %864 = trunc i64 %863 to i8
  store i8 %864, i8* %33, align 1, !tbaa !2450
  %865 = lshr i64 %847, 63
  %866 = xor i64 %863, %865
  %867 = add nuw nsw i64 %866, %865
  %868 = icmp eq i64 %867, 2
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %39, align 1, !tbaa !2451
  %870 = ashr i64 %848, 63
  store i64 %870, i64* %RDX, align 8, !tbaa !2428
  %871 = load i64, i64* %RSI, align 8
  %872 = add i64 %844, 13
  store i64 %872, i64* %PC, align 8
  %873 = sext i64 %871 to i128
  %874 = and i128 %873, -18446744073709551616
  %875 = zext i64 %870 to i128
  %876 = shl nuw i128 %875, 64
  %877 = zext i64 %848 to i128
  %878 = or i128 %876, %877
  %879 = zext i64 %871 to i128
  %880 = or i128 %874, %879
  %881 = sdiv i128 %878, %880
  %882 = trunc i128 %881 to i64
  %883 = and i128 %881, 18446744073709551615
  %884 = sext i64 %882 to i128
  %885 = and i128 %884, -18446744073709551616
  %886 = or i128 %885, %883
  %887 = icmp eq i128 %881, %886
  br i1 %887, label %890, label %888

; <label>:888:                                    ; preds = %block_403f63
  %889 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %872, %struct.Memory* %821) #12
  %.pre16 = load i64, i64* %RBP, align 8
  %.pre17 = load i64, i64* %RAX, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:890:                                    ; preds = %block_403f63
  %891 = srem i128 %878, %880
  %892 = trunc i128 %891 to i64
  store i64 %882, i64* %640, align 8, !tbaa !2428
  store i64 %892, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %890, %888
  %893 = phi i64 [ %.pre18, %888 ], [ %872, %890 ]
  %894 = phi i64 [ %.pre17, %888 ], [ %882, %890 ]
  %895 = phi i64 [ %.pre16, %888 ], [ %842, %890 ]
  %896 = phi %struct.Memory* [ %889, %888 ], [ %821, %890 ]
  %897 = add i64 %895, -40
  %898 = add i64 %893, 4
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  store i64 %894, i64* %899, align 8
  %900 = load i64, i64* %PC, align 8
  %901 = add i64 %900, -191
  store i64 %901, i64* %PC, align 8, !tbaa !2428
  br label %block_403f0c

block_403e10:                                     ; preds = %block_403db2
  %902 = load i64, i64* %RBP, align 8
  %903 = add i64 %902, -40
  %904 = add i64 %315, 4
  store i64 %904, i64* %PC, align 8
  %905 = inttoptr i64 %903 to i64*
  %906 = load i64, i64* %905, align 8
  %907 = add i64 %906, 1
  store i64 %907, i64* %RAX, align 8, !tbaa !2428
  %908 = icmp eq i64 %906, -1
  %909 = icmp eq i64 %907, 0
  %910 = or i1 %908, %909
  %911 = zext i1 %910 to i8
  store i8 %911, i8* %14, align 1, !tbaa !2433
  %912 = trunc i64 %907 to i32
  %913 = and i32 %912, 255
  %914 = tail call i32 @llvm.ctpop.i32(i32 %913) #9
  %915 = trunc i32 %914 to i8
  %916 = and i8 %915, 1
  %917 = xor i8 %916, 1
  store i8 %917, i8* %21, align 1, !tbaa !2447
  %918 = xor i64 %907, %906
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %27, align 1, !tbaa !2448
  %922 = zext i1 %909 to i8
  store i8 %922, i8* %30, align 1, !tbaa !2449
  %923 = lshr i64 %907, 63
  %924 = trunc i64 %923 to i8
  store i8 %924, i8* %33, align 1, !tbaa !2450
  %925 = lshr i64 %906, 63
  %926 = xor i64 %923, %925
  %927 = add nuw nsw i64 %926, %923
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %39, align 1, !tbaa !2451
  %930 = add i64 %315, 12
  store i64 %930, i64* %PC, align 8
  store i64 %907, i64* %905, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_403e1c
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400a50___cxx_global_var_init_22(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10Pb_type* @DV10Pb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4479
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400970___cxx_global_var_init_15(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400970:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPe_type* @dPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4767
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4047a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2432
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #9
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2432
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2432
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2432
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2432
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2432
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2433
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2447
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2448
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2450
  %83 = lshr i64 %37, 60
  %84 = and i64 %83, 1
  %85 = lshr i64 %62, 63
  %86 = xor i64 %81, %84
  %87 = xor i64 %81, %85
  %88 = add nuw nsw i64 %86, %87
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %58, align 1, !tbaa !2451
  %91 = add i64 %34, 16
  store i64 %91, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -8
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %94, 5
  store i64 %98, i64* %PC, align 8
  %99 = load i64, i64* %5, align 8, !tbaa !2428
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RBP, align 8, !tbaa !2428
  store i64 %100, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %94, 6
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %100 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  %106 = add i64 %99, 16
  store i64 %106, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400ab0___cxx_global_var_init_25(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400ab0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPe_type* @DV10MPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4383
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403250:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 8
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %28, i64* %29, align 1, !tbaa !2452
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %31 = bitcast i64* %30 to double*
  store double 0.000000e+00, double* %31, align 1, !tbaa !2452
  %32 = add i64 %20, -16
  %33 = add i64 %22, 12
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RSI, align 8, !tbaa !2428
  %36 = add i64 %22, 16
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %38, i64* %39, align 1, !tbaa !2452
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %41 = bitcast i64* %40 to double*
  store double 0.000000e+00, double* %41, align 1, !tbaa !2452
  %42 = add i64 %22, 20
  store i64 %42, i64* %PC, align 8
  %43 = bitcast i64 %38 to double
  %44 = bitcast i64 %28 to double
  %45 = fcmp uno double %43, %44
  br i1 %45, label %46, label %56

; <label>:46:                                     ; preds = %block_403250
  %47 = fadd double %43, %44
  %48 = bitcast double %47 to i64
  %49 = and i64 %48, 9221120237041090560
  %50 = icmp eq i64 %49, 9218868437227405312
  %51 = and i64 %48, 2251799813685247
  %52 = icmp ne i64 %51, 0
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %62

; <label>:54:                                     ; preds = %46
  %55 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %42, %struct.Memory* %2) #12
  %.pre = load i64, i64* %PC, align 8
  %.pre1 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre2 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:56:                                     ; preds = %block_403250
  %57 = fcmp ogt double %43, %44
  br i1 %57, label %62, label %58

; <label>:58:                                     ; preds = %56
  %59 = fcmp olt double %43, %44
  br i1 %59, label %62, label %60

; <label>:60:                                     ; preds = %58
  %61 = fcmp oeq double %43, %44
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %60, %58, %56, %46
  %63 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 1, %60 ], [ 1, %46 ]
  %64 = phi i8 [ 0, %56 ], [ 0, %58 ], [ 0, %60 ], [ 1, %46 ]
  %65 = phi i8 [ 0, %56 ], [ 1, %58 ], [ 0, %60 ], [ 1, %46 ]
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %63, i8* %66, align 1, !tbaa !2432
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %67, align 1, !tbaa !2432
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %65, i8* %68, align 1, !tbaa !2432
  br label %69

; <label>:69:                                     ; preds = %62, %60
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %70, align 1, !tbaa !2432
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %71, align 1, !tbaa !2432
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %72, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %69, %54
  %.pre-phi5 = phi i8* [ %72, %69 ], [ %.pre4, %54 ]
  %.pre-phi3 = phi i8* [ %70, %69 ], [ %.pre2, %54 ]
  %.pre-phi = phi i8* [ %71, %69 ], [ %.pre1, %54 ]
  %73 = phi i64 [ %42, %69 ], [ %.pre, %54 ]
  %74 = phi %struct.Memory* [ %2, %69 ], [ %55, %54 ]
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %76 = load i8, i8* %75, align 1, !tbaa !2433
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = load i8, i8* %77, align 1, !tbaa !2449
  %79 = or i8 %78, %76
  %80 = icmp eq i8 %79, 0
  store i8 0, i8* %75, align 1, !tbaa !2433
  %81 = zext i1 %80 to i32
  %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #9
  %83 = trunc i32 %82 to i8
  %84 = xor i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %84, i8* %85, align 1, !tbaa !2447
  %86 = xor i1 %80, true
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %77, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2450
  store i8 0, i8* %.pre-phi3, align 1, !tbaa !2451
  store i8 0, i8* %.pre-phi5, align 1, !tbaa !2448
  %88 = zext i1 %80 to i64
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %73, 9
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %5, align 8, !tbaa !2428
  %91 = add i64 %90, 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RBP, align 8, !tbaa !2428
  store i64 %91, i64* %5, align 8, !tbaa !2428
  %94 = add i64 %73, 10
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %91 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %97 = add i64 %90, 16
  store i64 %97, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %74
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404230:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %14, align 1, !tbaa !2432
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2432
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2432
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2432
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404261

block_40437d:                                     ; preds = %block_404372
  %99 = add i64 %252, -24
  %100 = add i64 %264, 73
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %252, -48
  %104 = add i64 %264, 77
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = add i64 %252, -8
  %108 = add i64 %264, 81
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = shl i64 %106, 3
  %112 = add i64 %111, %102
  %113 = add i64 %264, 85
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %114, align 8
  %115 = load i64, i64* %RSP, align 8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %115, 64
  store i64 %117, i64* %RSP, align 8, !tbaa !2428
  %118 = icmp ugt i64 %115, -65
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %14, align 1, !tbaa !2433
  %120 = trunc i64 %117 to i32
  %121 = and i32 %120, 255
  %122 = tail call i32 @llvm.ctpop.i32(i32 %121) #9
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  store i8 %125, i8* %21, align 1, !tbaa !2447
  %126 = xor i64 %117, %115
  %127 = lshr i64 %126, 4
  %128 = trunc i64 %127 to i8
  %129 = and i8 %128, 1
  store i8 %129, i8* %26, align 1, !tbaa !2448
  %130 = icmp eq i64 %117, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %29, align 1, !tbaa !2449
  %132 = lshr i64 %117, 63
  %133 = trunc i64 %132 to i8
  store i8 %133, i8* %32, align 1, !tbaa !2450
  %134 = lshr i64 %115, 63
  %135 = xor i64 %132, %134
  %136 = add nuw nsw i64 %135, %132
  %137 = icmp eq i64 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %38, align 1, !tbaa !2451
  %139 = add i64 %116, 5
  store i64 %139, i64* %PC, align 8
  %140 = add i64 %115, 72
  %141 = inttoptr i64 %117 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RBP, align 8, !tbaa !2428
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  %143 = add i64 %116, 6
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %140 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %146 = add i64 %115, 80
  store i64 %146, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_404324:                                     ; preds = %block_4042ee, %block_4042fc
  %147 = phi i64 [ %750, %block_4042ee ], [ %.pre13, %block_4042fc ]
  %148 = phi i64 [ %510, %block_4042ee ], [ %.pre12, %block_4042fc ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %147, -48
  %150 = add i64 %148, 11
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = add i64 %152, -1
  %154 = icmp eq i64 %152, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %14, align 1, !tbaa !2433
  %156 = trunc i64 %153 to i32
  %157 = and i32 %156, 255
  %158 = tail call i32 @llvm.ctpop.i32(i32 %157) #9
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = xor i8 %160, 1
  store i8 %161, i8* %21, align 1, !tbaa !2447
  %162 = xor i64 %153, %152
  %163 = lshr i64 %162, 4
  %164 = trunc i64 %163 to i8
  %165 = and i8 %164, 1
  store i8 %165, i8* %26, align 1, !tbaa !2448
  %166 = icmp eq i64 %153, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %29, align 1, !tbaa !2449
  %168 = lshr i64 %153, 63
  %169 = trunc i64 %168 to i8
  store i8 %169, i8* %32, align 1, !tbaa !2450
  %170 = lshr i64 %152, 63
  %171 = xor i64 %168, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %38, align 1, !tbaa !2451
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %176 = ashr i64 %153, 63
  store i64 %176, i64* %RDX, align 8, !tbaa !2428
  %177 = add i64 %148, 23
  store i64 %177, i64* %PC, align 8
  %178 = zext i64 %176 to i128
  %179 = shl nuw i128 %178, 64
  %180 = zext i64 %153 to i128
  %181 = or i128 %179, %180
  %182 = sdiv i128 %181, 2
  %183 = trunc i128 %182 to i64
  %184 = and i128 %182, 18446744073709551615
  %185 = sext i64 %183 to i128
  %186 = and i128 %185, -18446744073709551616
  %187 = or i128 %186, %184
  %188 = icmp eq i128 %182, %187
  br i1 %188, label %191, label %189

; <label>:189:                                    ; preds = %block_404324
  %190 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %177, %struct.Memory* %MEMORY.4) #12
  %.pre14 = load i64, i64* %RBP, align 8
  %.pre15 = load i64, i64* %RAX, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:191:                                    ; preds = %block_404324
  %192 = srem i128 %181, 2
  %193 = trunc i128 %192 to i64
  store i64 %183, i64* %175, align 8, !tbaa !2428
  store i64 %193, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %191, %189
  %194 = phi i64 [ %.pre16, %189 ], [ %177, %191 ]
  %195 = phi i64 [ %.pre15, %189 ], [ %183, %191 ]
  %196 = phi i64 [ %.pre14, %189 ], [ %147, %191 ]
  %197 = phi %struct.Memory* [ %190, %189 ], [ %MEMORY.4, %191 ]
  %198 = add i64 %196, -40
  %199 = add i64 %194, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  store i64 %195, i64* %200, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_40433f

block_40433f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %201 = phi i64 [ %.pre17, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %748, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %197, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %743, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -48
  %204 = add i64 %201, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RDX, align 8, !tbaa !2428
  %207 = add i64 %202, -32
  %208 = add i64 %201, 12
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %206, %210
  %212 = icmp ult i64 %206, %210
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %14, align 1, !tbaa !2433
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #9
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %21, align 1, !tbaa !2447
  %220 = xor i64 %210, %206
  %221 = xor i64 %220, %211
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %26, align 1, !tbaa !2448
  %225 = icmp eq i64 %211, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %29, align 1, !tbaa !2449
  %227 = lshr i64 %211, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %32, align 1, !tbaa !2450
  %229 = lshr i64 %206, 63
  %230 = lshr i64 %210, 63
  %231 = xor i64 %230, %229
  %232 = xor i64 %227, %229
  %233 = add nuw nsw i64 %232, %231
  %234 = icmp eq i64 %233, 2
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %38, align 1, !tbaa !2451
  %236 = add i64 %202, -49
  %237 = add i64 %201, 15
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i8*
  store i8 0, i8* %238, align 1
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 36
  %241 = add i64 %239, 6
  %242 = load i8, i8* %29, align 1, !tbaa !2449
  %243 = icmp ne i8 %242, 0
  %244 = load i8, i8* %32, align 1, !tbaa !2450
  %245 = icmp ne i8 %244, 0
  %246 = load i8, i8* %38, align 1, !tbaa !2451
  %247 = icmp ne i8 %246, 0
  %248 = xor i1 %245, %247
  %249 = or i1 %243, %248
  %250 = select i1 %249, i64 %240, i64 %241
  store i64 %250, i64* %PC, align 8, !tbaa !2428
  br i1 %249, label %block_404372, label %block_404354

block_404372:                                     ; preds = %block_404354, %block_40433f
  %251 = phi i64 [ %240, %block_40433f ], [ %.pre18, %block_404354 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_40433f ], [ %474, %block_404354 ]
  %252 = load i64, i64* %RBP, align 8
  %253 = add i64 %252, -49
  %254 = add i64 %251, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i8*
  %256 = load i8, i8* %255, align 1
  store i8 %256, i8* %AL, align 1, !tbaa !2432
  %257 = and i8 %256, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %258 = zext i8 %257 to i32
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #9
  %260 = trunc i32 %259 to i8
  %261 = xor i8 %260, 1
  store i8 %261, i8* %21, align 1, !tbaa !2447
  %262 = xor i8 %257, 1
  store i8 %262, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %263 = icmp eq i8 %262, 0
  %.v = select i1 %263, i64 16, i64 11
  %264 = add i64 %251, %.v
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  br i1 %263, label %block_404382, label %block_40437d

block_4042fc:                                     ; preds = %block_4042ee
  %265 = add i64 %750, -24
  %266 = add i64 %510, 4
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = add i64 %510, 8
  store i64 %269, i64* %PC, align 8
  %270 = load i64, i64* %753, align 8
  %271 = add i64 %270, -1
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = icmp eq i64 %270, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %14, align 1, !tbaa !2433
  %274 = trunc i64 %271 to i32
  %275 = and i32 %274, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #9
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %21, align 1, !tbaa !2447
  %280 = xor i64 %271, %270
  %281 = lshr i64 %280, 4
  %282 = trunc i64 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %26, align 1, !tbaa !2448
  %284 = icmp eq i64 %271, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %29, align 1, !tbaa !2449
  %286 = lshr i64 %271, 63
  %287 = trunc i64 %286 to i8
  store i8 %287, i8* %32, align 1, !tbaa !2450
  %288 = lshr i64 %270, 63
  %289 = xor i64 %286, %288
  %290 = add nuw nsw i64 %289, %288
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %38, align 1, !tbaa !2451
  %293 = add i64 %510, 16
  store i64 %293, i64* %PC, align 8
  %294 = load i64, i64* %267, align 8
  store i64 %294, i64* %RDX, align 8, !tbaa !2428
  %295 = add i64 %750, -48
  %296 = add i64 %510, 20
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = shl i64 %271, 3
  %300 = add i64 %299, %268
  %301 = add i64 %510, 24
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = shl i64 %298, 3
  %305 = add i64 %304, %294
  %306 = add i64 %510, 28
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i64*
  store i64 %303, i64* %307, align 8
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -40
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %309 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = add i64 %313, -1
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = icmp eq i64 %313, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %14, align 1, !tbaa !2433
  %317 = trunc i64 %314 to i32
  %318 = and i32 %317, 255
  %319 = tail call i32 @llvm.ctpop.i32(i32 %318) #9
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  store i8 %322, i8* %21, align 1, !tbaa !2447
  %323 = xor i64 %314, %313
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %26, align 1, !tbaa !2448
  %327 = icmp eq i64 %314, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %29, align 1, !tbaa !2449
  %329 = lshr i64 %314, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %32, align 1, !tbaa !2450
  %331 = lshr i64 %313, 63
  %332 = xor i64 %329, %331
  %333 = add nuw nsw i64 %332, %331
  %334 = icmp eq i64 %333, 2
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %38, align 1, !tbaa !2451
  %336 = add i64 %308, -48
  %337 = add i64 %310, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  store i64 %314, i64* %338, align 8
  %.pre12 = load i64, i64* %PC, align 8
  %.pre13 = load i64, i64* %RBP, align 8
  br label %block_404324

block_40426f:                                     ; preds = %block_404261
  %339 = add i64 %750, -24
  %340 = add i64 %786, 4
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = add i64 %786, 8
  store i64 %343, i64* %PC, align 8
  %344 = load i64, i64* %753, align 8
  %345 = add i64 %344, -1
  %346 = shl i64 %345, 3
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = add i64 %346, %342
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = icmp ult i64 %347, %342
  %349 = icmp ult i64 %347, %346
  %350 = or i1 %348, %349
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %14, align 1, !tbaa !2433
  %352 = trunc i64 %347 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #9
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %21, align 1, !tbaa !2447
  %358 = xor i64 %346, %342
  %359 = xor i64 %358, %347
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %26, align 1, !tbaa !2448
  %363 = icmp eq i64 %347, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %29, align 1, !tbaa !2449
  %365 = lshr i64 %347, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %32, align 1, !tbaa !2450
  %367 = lshr i64 %342, 63
  %368 = lshr i64 %345, 60
  %369 = and i64 %368, 1
  %370 = xor i64 %365, %367
  %371 = xor i64 %365, %369
  %372 = add nuw nsw i64 %370, %371
  %373 = icmp eq i64 %372, 2
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %38, align 1, !tbaa !2451
  %375 = load i64, i64* %RBP, align 8
  %376 = add i64 %375, -24
  %377 = add i64 %786, 23
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i64*
  %379 = load i64, i64* %378, align 8
  store i64 %379, i64* %RCX, align 8, !tbaa !2428
  %380 = add i64 %375, -40
  %381 = add i64 %786, 27
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = shl i64 %383, 3
  store i64 %384, i64* %RDX, align 8, !tbaa !2428
  %385 = add i64 %384, %379
  store i64 %385, i64* %RCX, align 8, !tbaa !2428
  %386 = icmp ult i64 %385, %379
  %387 = icmp ult i64 %385, %384
  %388 = or i1 %386, %387
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %14, align 1, !tbaa !2433
  %390 = trunc i64 %385 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #9
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %21, align 1, !tbaa !2447
  %396 = xor i64 %384, %379
  %397 = xor i64 %396, %385
  %398 = lshr i64 %397, 4
  %399 = trunc i64 %398 to i8
  %400 = and i8 %399, 1
  store i8 %400, i8* %26, align 1, !tbaa !2448
  %401 = icmp eq i64 %385, 0
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %29, align 1, !tbaa !2449
  %403 = lshr i64 %385, 63
  %404 = trunc i64 %403 to i8
  store i8 %404, i8* %32, align 1, !tbaa !2450
  %405 = lshr i64 %379, 63
  %406 = lshr i64 %383, 60
  %407 = and i64 %406, 1
  %408 = xor i64 %403, %405
  %409 = xor i64 %403, %407
  %410 = add nuw nsw i64 %408, %409
  %411 = icmp eq i64 %410, 2
  %412 = zext i1 %411 to i8
  store i8 %412, i8* %38, align 1, !tbaa !2451
  %413 = load i64, i64* %RAX, align 8
  store i64 %413, i64* %RDI, align 8, !tbaa !2428
  store i64 %385, i64* %RSI, align 8, !tbaa !2428
  %414 = add i64 %786, -4127
  %415 = add i64 %786, 45
  %416 = load i64, i64* %RSP, align 8, !tbaa !2428
  %417 = add i64 %416, -8
  %418 = inttoptr i64 %417 to i64*
  store i64 %415, i64* %418, align 8
  store i64 %417, i64* %RSP, align 8, !tbaa !2428
  store i64 %414, i64* %PC, align 8, !tbaa !2428
  %419 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %414, %struct.Memory* %MEMORY.4)
  %420 = load i8, i8* %AL, align 1
  %421 = load i64, i64* %PC, align 8
  %422 = and i8 %420, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %423 = zext i8 %422 to i32
  %424 = tail call i32 @llvm.ctpop.i32(i32 %423) #9
  %425 = trunc i32 %424 to i8
  %426 = xor i8 %425, 1
  store i8 %426, i8* %21, align 1, !tbaa !2447
  %427 = xor i8 %422, 1
  store i8 %427, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %428 = icmp eq i8 %427, 0
  %.v25 = select i1 %428, i64 13, i64 8
  %429 = add i64 %421, %.v25
  store i64 %429, i64* %PC, align 8, !tbaa !2428
  br i1 %428, label %block_4042a9, label %block_4042a4

block_404354:                                     ; preds = %block_40433f
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -8
  store i64 %431, i64* %RSI, align 8, !tbaa !2428
  %432 = add i64 %430, -24
  %433 = add i64 %250, 8
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %432 to i64*
  %435 = load i64, i64* %434, align 8
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = add i64 %430, -40
  %437 = add i64 %250, 12
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %436 to i64*
  %439 = load i64, i64* %438, align 8
  %440 = shl i64 %439, 3
  store i64 %440, i64* %RCX, align 8, !tbaa !2428
  %441 = add i64 %440, %435
  store i64 %441, i64* %RAX, align 8, !tbaa !2428
  %442 = icmp ult i64 %441, %435
  %443 = icmp ult i64 %441, %440
  %444 = or i1 %442, %443
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %14, align 1, !tbaa !2433
  %446 = trunc i64 %441 to i32
  %447 = and i32 %446, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #9
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %21, align 1, !tbaa !2447
  %452 = xor i64 %440, %435
  %453 = xor i64 %452, %441
  %454 = lshr i64 %453, 4
  %455 = trunc i64 %454 to i8
  %456 = and i8 %455, 1
  store i8 %456, i8* %26, align 1, !tbaa !2448
  %457 = icmp eq i64 %441, 0
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %29, align 1, !tbaa !2449
  %459 = lshr i64 %441, 63
  %460 = trunc i64 %459 to i8
  store i8 %460, i8* %32, align 1, !tbaa !2450
  %461 = lshr i64 %435, 63
  %462 = lshr i64 %439, 60
  %463 = and i64 %462, 1
  %464 = xor i64 %459, %461
  %465 = xor i64 %459, %463
  %466 = add nuw nsw i64 %464, %465
  %467 = icmp eq i64 %466, 2
  %468 = zext i1 %467 to i8
  store i8 %468, i8* %38, align 1, !tbaa !2451
  store i64 %441, i64* %RDI, align 8, !tbaa !2428
  %469 = add i64 %250, -4356
  %470 = add i64 %250, 27
  %471 = load i64, i64* %RSP, align 8, !tbaa !2428
  %472 = add i64 %471, -8
  %473 = inttoptr i64 %472 to i64*
  store i64 %470, i64* %473, align 8
  store i64 %472, i64* %RSP, align 8, !tbaa !2428
  store i64 %469, i64* %PC, align 8, !tbaa !2428
  %474 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %469, %struct.Memory* %MEMORY.1)
  %475 = load i64, i64* %RBP, align 8
  %476 = add i64 %475, -49
  %477 = load i8, i8* %AL, align 1
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 3
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %476 to i8*
  store i8 %477, i8* %480, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_404372

block_4042ee:                                     ; preds = %block_404261
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %481 = add i64 %786, 4
  store i64 %481, i64* %PC, align 8
  %482 = load i64, i64* %753, align 8
  store i64 %482, i64* %RAX, align 8, !tbaa !2428
  %483 = add i64 %786, 8
  store i64 %483, i64* %PC, align 8
  %484 = load i64, i64* %757, align 8
  %485 = sub i64 %482, %484
  %486 = icmp ult i64 %482, %484
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %14, align 1, !tbaa !2433
  %488 = trunc i64 %485 to i32
  %489 = and i32 %488, 255
  %490 = tail call i32 @llvm.ctpop.i32(i32 %489) #9
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  store i8 %493, i8* %21, align 1, !tbaa !2447
  %494 = xor i64 %484, %482
  %495 = xor i64 %494, %485
  %496 = lshr i64 %495, 4
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %26, align 1, !tbaa !2448
  %499 = icmp eq i64 %485, 0
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %29, align 1, !tbaa !2449
  %501 = lshr i64 %485, 63
  %502 = trunc i64 %501 to i8
  store i8 %502, i8* %32, align 1, !tbaa !2450
  %503 = lshr i64 %482, 63
  %504 = lshr i64 %484, 63
  %505 = xor i64 %504, %503
  %506 = xor i64 %501, %503
  %507 = add nuw nsw i64 %506, %505
  %508 = icmp eq i64 %507, 2
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %38, align 1, !tbaa !2451
  %.v24 = select i1 %499, i64 14, i64 54
  %510 = add i64 %786, %.v24
  store i64 %510, i64* %PC, align 8, !tbaa !2428
  br i1 %499, label %block_4042fc, label %block_404324

block_4042a9:                                     ; preds = %block_40426f
  %511 = load i64, i64* %RBP, align 8
  %512 = add i64 %511, -40
  %513 = add i64 %429, 4
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %512 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = add i64 %515, 1
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = icmp eq i64 %515, -1
  %518 = icmp eq i64 %516, 0
  %519 = or i1 %517, %518
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %14, align 1, !tbaa !2433
  %521 = trunc i64 %516 to i32
  %522 = and i32 %521, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #9
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %21, align 1, !tbaa !2447
  %527 = xor i64 %516, %515
  %528 = lshr i64 %527, 4
  %529 = trunc i64 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %26, align 1, !tbaa !2448
  %531 = zext i1 %518 to i8
  store i8 %531, i8* %29, align 1, !tbaa !2449
  %532 = lshr i64 %516, 63
  %533 = trunc i64 %532 to i8
  store i8 %533, i8* %32, align 1, !tbaa !2450
  %534 = lshr i64 %515, 63
  %535 = xor i64 %532, %534
  %536 = add nuw nsw i64 %535, %532
  %537 = icmp eq i64 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %38, align 1, !tbaa !2451
  %539 = add i64 %429, 12
  store i64 %539, i64* %PC, align 8
  store i64 %516, i64* %514, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_4042b5

block_4042b5:                                     ; preds = %block_4042a4, %block_4042a9
  %540 = phi i64 [ %656, %block_4042a4 ], [ %.pre22, %block_4042a9 ]
  %541 = load i64, i64* %RBP, align 8
  %542 = add i64 %541, -24
  %543 = add i64 %540, 4
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = add i64 %541, -40
  %547 = add i64 %540, 8
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i64*
  %549 = load i64, i64* %548, align 8
  %550 = add i64 %549, -1
  store i64 %550, i64* %RCX, align 8, !tbaa !2428
  %551 = icmp eq i64 %549, 0
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %14, align 1, !tbaa !2433
  %553 = trunc i64 %550 to i32
  %554 = and i32 %553, 255
  %555 = tail call i32 @llvm.ctpop.i32(i32 %554) #9
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  store i8 %558, i8* %21, align 1, !tbaa !2447
  %559 = xor i64 %550, %549
  %560 = lshr i64 %559, 4
  %561 = trunc i64 %560 to i8
  %562 = and i8 %561, 1
  store i8 %562, i8* %26, align 1, !tbaa !2448
  %563 = icmp eq i64 %550, 0
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %29, align 1, !tbaa !2449
  %565 = lshr i64 %550, 63
  %566 = trunc i64 %565 to i8
  store i8 %566, i8* %32, align 1, !tbaa !2450
  %567 = lshr i64 %549, 63
  %568 = xor i64 %565, %567
  %569 = add nuw nsw i64 %568, %567
  %570 = icmp eq i64 %569, 2
  %571 = zext i1 %570 to i8
  store i8 %571, i8* %38, align 1, !tbaa !2451
  %572 = add i64 %540, 16
  store i64 %572, i64* %PC, align 8
  %573 = load i64, i64* %544, align 8
  store i64 %573, i64* %RDX, align 8, !tbaa !2428
  %574 = add i64 %541, -48
  %575 = add i64 %540, 20
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i64*
  %577 = load i64, i64* %576, align 8
  store i64 %577, i64* %RSI, align 8, !tbaa !2428
  %578 = shl i64 %550, 3
  %579 = add i64 %578, %545
  %580 = add i64 %540, 24
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i64*
  %582 = load i64, i64* %581, align 8
  store i64 %582, i64* %RAX, align 8, !tbaa !2428
  %583 = shl i64 %577, 3
  %584 = add i64 %583, %573
  %585 = add i64 %540, 28
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i64*
  store i64 %582, i64* %586, align 8
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, -40
  %589 = load i64, i64* %PC, align 8
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %588 to i64*
  %592 = load i64, i64* %591, align 8
  %593 = add i64 %592, -1
  store i64 %593, i64* %RAX, align 8, !tbaa !2428
  %594 = icmp eq i64 %592, 0
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %14, align 1, !tbaa !2433
  %596 = trunc i64 %593 to i32
  %597 = and i32 %596, 255
  %598 = tail call i32 @llvm.ctpop.i32(i32 %597) #9
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  store i8 %601, i8* %21, align 1, !tbaa !2447
  %602 = xor i64 %593, %592
  %603 = lshr i64 %602, 4
  %604 = trunc i64 %603 to i8
  %605 = and i8 %604, 1
  store i8 %605, i8* %26, align 1, !tbaa !2448
  %606 = icmp eq i64 %593, 0
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %29, align 1, !tbaa !2449
  %608 = lshr i64 %593, 63
  %609 = trunc i64 %608 to i8
  store i8 %609, i8* %32, align 1, !tbaa !2450
  %610 = lshr i64 %592, 63
  %611 = xor i64 %608, %610
  %612 = add nuw nsw i64 %611, %610
  %613 = icmp eq i64 %612, 2
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %38, align 1, !tbaa !2451
  %615 = add i64 %587, -48
  %616 = add i64 %589, 12
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i64*
  store i64 %593, i64* %617, align 8
  %618 = load i64, i64* %RBP, align 8
  %619 = add i64 %618, -40
  %620 = load i64, i64* %PC, align 8
  %621 = add i64 %620, 4
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %619 to i64*
  %623 = load i64, i64* %622, align 8
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = add i64 %620, 8
  store i64 %624, i64* %PC, align 8
  %625 = load i64, i64* %622, align 8
  %626 = add i64 %625, %623
  store i64 %626, i64* %RAX, align 8, !tbaa !2428
  %627 = icmp ult i64 %626, %623
  %628 = icmp ult i64 %626, %625
  %629 = or i1 %627, %628
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %14, align 1, !tbaa !2433
  %631 = trunc i64 %626 to i32
  %632 = and i32 %631, 255
  %633 = tail call i32 @llvm.ctpop.i32(i32 %632) #9
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  store i8 %636, i8* %21, align 1, !tbaa !2447
  %637 = xor i64 %625, %623
  %638 = xor i64 %637, %626
  %639 = lshr i64 %638, 4
  %640 = trunc i64 %639 to i8
  %641 = and i8 %640, 1
  store i8 %641, i8* %26, align 1, !tbaa !2448
  %642 = icmp eq i64 %626, 0
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %29, align 1, !tbaa !2449
  %644 = lshr i64 %626, 63
  %645 = trunc i64 %644 to i8
  store i8 %645, i8* %32, align 1, !tbaa !2450
  %646 = lshr i64 %623, 63
  %647 = lshr i64 %625, 63
  %648 = xor i64 %644, %646
  %649 = xor i64 %644, %647
  %650 = add nuw nsw i64 %648, %649
  %651 = icmp eq i64 %650, 2
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %38, align 1, !tbaa !2451
  %653 = add i64 %620, 12
  store i64 %653, i64* %PC, align 8
  store i64 %626, i64* %622, align 8
  %654 = load i64, i64* %PC, align 8
  %655 = add i64 %654, -136
  store i64 %655, i64* %PC, align 8, !tbaa !2428
  br label %block_404261

block_4042a4:                                     ; preds = %block_40426f
  %656 = add i64 %429, 17
  store i64 %656, i64* %PC, align 8, !tbaa !2428
  br label %block_4042b5

block_404382:                                     ; preds = %block_404372
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %657 = add i64 %252, -24
  %658 = add i64 %264, 11
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RDX, align 8, !tbaa !2428
  %661 = add i64 %252, -40
  %662 = add i64 %264, 15
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %RSI, align 8, !tbaa !2428
  %665 = add i64 %264, 19
  store i64 %665, i64* %PC, align 8
  %666 = load i64, i64* %659, align 8
  store i64 %666, i64* %RDI, align 8, !tbaa !2428
  %667 = add i64 %252, -48
  %668 = add i64 %264, 23
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %R8, align 8, !tbaa !2428
  %671 = shl i64 %664, 3
  %672 = add i64 %671, %660
  %673 = add i64 %264, 27
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i64*
  %675 = load i64, i64* %674, align 8
  store i64 %675, i64* %RDX, align 8, !tbaa !2428
  %676 = shl i64 %670, 3
  %677 = add i64 %676, %666
  %678 = add i64 %264, 31
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i64*
  store i64 %675, i64* %679, align 8
  %680 = load i64, i64* %RBP, align 8
  %681 = add i64 %680, -40
  %682 = load i64, i64* %PC, align 8
  %683 = add i64 %682, 4
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %681 to i64*
  %685 = load i64, i64* %684, align 8
  store i64 %685, i64* %RDX, align 8, !tbaa !2428
  %686 = add i64 %680, -48
  %687 = add i64 %682, 8
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %686 to i64*
  store i64 %685, i64* %688, align 8
  %689 = load i64, i64* %RBP, align 8
  %690 = add i64 %689, -48
  %691 = load i64, i64* %PC, align 8
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC, align 8
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693, align 8
  %695 = add i64 %694, -1
  %696 = icmp eq i64 %694, 0
  %697 = zext i1 %696 to i8
  store i8 %697, i8* %14, align 1, !tbaa !2433
  %698 = trunc i64 %695 to i32
  %699 = and i32 %698, 255
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #9
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %21, align 1, !tbaa !2447
  %704 = xor i64 %695, %694
  %705 = lshr i64 %704, 4
  %706 = trunc i64 %705 to i8
  %707 = and i8 %706, 1
  store i8 %707, i8* %26, align 1, !tbaa !2448
  %708 = icmp eq i64 %695, 0
  %709 = zext i1 %708 to i8
  store i8 %709, i8* %29, align 1, !tbaa !2449
  %710 = lshr i64 %695, 63
  %711 = trunc i64 %710 to i8
  store i8 %711, i8* %32, align 1, !tbaa !2450
  %712 = lshr i64 %694, 63
  %713 = xor i64 %710, %712
  %714 = add nuw nsw i64 %713, %712
  %715 = icmp eq i64 %714, 2
  %716 = zext i1 %715 to i8
  store i8 %716, i8* %38, align 1, !tbaa !2451
  store i64 %695, i64* %RAX, align 8, !tbaa !2428
  %717 = ashr i64 %695, 63
  store i64 %717, i64* %RDX, align 8, !tbaa !2428
  %718 = load i64, i64* %RCX, align 8
  %719 = add i64 %691, 16
  store i64 %719, i64* %PC, align 8
  %720 = sext i64 %718 to i128
  %721 = and i128 %720, -18446744073709551616
  %722 = zext i64 %717 to i128
  %723 = shl nuw i128 %722, 64
  %724 = zext i64 %695 to i128
  %725 = or i128 %723, %724
  %726 = zext i64 %718 to i128
  %727 = or i128 %721, %726
  %728 = sdiv i128 %725, %727
  %729 = trunc i128 %728 to i64
  %730 = and i128 %728, 18446744073709551615
  %731 = sext i64 %729 to i128
  %732 = and i128 %731, -18446744073709551616
  %733 = or i128 %732, %730
  %734 = icmp eq i128 %728, %733
  br i1 %734, label %737, label %735

; <label>:735:                                    ; preds = %block_404382
  %736 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %719, %struct.Memory* %MEMORY.2) #12
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:737:                                    ; preds = %block_404382
  %738 = srem i128 %725, %727
  %739 = trunc i128 %738 to i64
  store i64 %729, i64* %175, align 8, !tbaa !2428
  store i64 %739, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %737, %735
  %740 = phi i64 [ %.pre21, %735 ], [ %719, %737 ]
  %741 = phi i64 [ %.pre20, %735 ], [ %729, %737 ]
  %742 = phi i64 [ %.pre19, %735 ], [ %689, %737 ]
  %743 = phi %struct.Memory* [ %736, %735 ], [ %MEMORY.2, %737 ]
  %744 = add i64 %742, -40
  %745 = add i64 %740, 4
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to i64*
  store i64 %741, i64* %746, align 8
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, -126
  store i64 %748, i64* %PC, align 8, !tbaa !2428
  br label %block_40433f

block_404261:                                     ; preds = %block_4042b5, %block_404230
  %749 = phi i64 [ %.pre, %block_404230 ], [ %655, %block_4042b5 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_404230 ], [ %419, %block_4042b5 ]
  %750 = load i64, i64* %RBP, align 8
  %751 = add i64 %750, -40
  %752 = add i64 %749, 4
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %751 to i64*
  %754 = load i64, i64* %753, align 8
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = add i64 %750, -16
  %756 = add i64 %749, 8
  store i64 %756, i64* %PC, align 8
  %757 = inttoptr i64 %755 to i64*
  %758 = load i64, i64* %757, align 8
  %759 = sub i64 %754, %758
  %760 = icmp ult i64 %754, %758
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %14, align 1, !tbaa !2433
  %762 = trunc i64 %759 to i32
  %763 = and i32 %762, 255
  %764 = tail call i32 @llvm.ctpop.i32(i32 %763) #9
  %765 = trunc i32 %764 to i8
  %766 = and i8 %765, 1
  %767 = xor i8 %766, 1
  store i8 %767, i8* %21, align 1, !tbaa !2447
  %768 = xor i64 %758, %754
  %769 = xor i64 %768, %759
  %770 = lshr i64 %769, 4
  %771 = trunc i64 %770 to i8
  %772 = and i8 %771, 1
  store i8 %772, i8* %26, align 1, !tbaa !2448
  %773 = icmp eq i64 %759, 0
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %29, align 1, !tbaa !2449
  %775 = lshr i64 %759, 63
  %776 = trunc i64 %775 to i8
  store i8 %776, i8* %32, align 1, !tbaa !2450
  %777 = lshr i64 %754, 63
  %778 = lshr i64 %758, 63
  %779 = xor i64 %778, %777
  %780 = xor i64 %775, %777
  %781 = add nuw nsw i64 %780, %779
  %782 = icmp eq i64 %781, 2
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %38, align 1, !tbaa !2451
  %784 = icmp ne i8 %776, 0
  %785 = xor i1 %784, %782
  %.v23 = select i1 %785, i64 14, i64 141
  %786 = add i64 %749, %.v23
  store i64 %786, i64* %PC, align 8, !tbaa !2428
  br i1 %785, label %block_40426f, label %block_4042ee
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406050:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404770:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2432
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #9
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2432
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2432
  store i8 0, i8* %42, align 1, !tbaa !2432
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404fc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405ed0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401220__Z5timerv(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401220:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %11, -2897
  %13 = add i64 %11, 8
  %14 = add i64 %8, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %13, i64* %15, align 8
  store i64 %14, i64* %7, align 8, !tbaa !2428
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %16 = tail call fastcc %struct.Memory* @ext_6208a0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %17 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %18 = load i64, i64* %PC, align 8
  %19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 8) to double*), align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %21 = load i64, i64* %RAX, align 8
  store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8
  %22 = load i64, i64* bitcast (%start_time_type* @start_time to i64*), align 8
  %23 = sub i64 %21, %22
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ult i64 %21, %22
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %22, %21
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = lshr i64 %21, 63
  %47 = lshr i64 %22, 63
  %48 = xor i64 %47, %46
  %49 = xor i64 %43, %46
  %50 = add nuw nsw i64 %49, %48
  %51 = icmp eq i64 %50, 2
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %52, i8* %53, align 1, !tbaa !2451
  %54 = sitofp i64 %23 to double
  %55 = bitcast %union.VectorReg* %4 to double*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to <2 x i32>*
  %58 = load <2 x i32>, <2 x i32>* %57, align 1
  %59 = fdiv double %54, %19
  store double %59, double* %55, align 1, !tbaa !2452
  %.cast = bitcast double %59 to <2 x i32>
  %60 = extractelement <2 x i32> %.cast, i32 0
  %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %60, i32* %61, align 1, !tbaa !2454
  %62 = extractelement <2 x i32> %.cast, i32 1
  %63 = getelementptr inbounds i8, i8* %17, i64 4
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 1, !tbaa !2454
  %65 = extractelement <2 x i32> %58, i32 0
  %66 = bitcast i64* %20 to i32*
  store i32 %65, i32* %66, align 1, !tbaa !2454
  %67 = extractelement <2 x i32> %58, i32 1
  %68 = getelementptr inbounds i8, i8* %17, i64 12
  %69 = bitcast i8* %68 to i32*
  store i32 %67, i32* %69, align 1, !tbaa !2454
  %70 = add i64 %18, 45
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %7, align 8, !tbaa !2428
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RBP, align 8, !tbaa !2428
  store i64 %72, i64* %7, align 8, !tbaa !2428
  %75 = add i64 %18, 46
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %72 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %78 = add i64 %71, 16
  store i64 %78, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %16
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_406410:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -24
  %39 = add i64 %8, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_406425

block_406425:                                     ; preds = %block_406433, %block_406410
  %55 = phi i64 [ %142, %block_406433 ], [ %.pre, %block_406410 ]
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -24
  %58 = add i64 %55, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RAX, align 8, !tbaa !2428
  %61 = add i64 %56, -32
  %62 = add i64 %55, 8
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %60, %64
  %66 = icmp ult i64 %60, %64
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %12, align 1, !tbaa !2433
  %68 = trunc i64 %65 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %19, align 1, !tbaa !2447
  %74 = xor i64 %64, %60
  %75 = xor i64 %74, %65
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %25, align 1, !tbaa !2448
  %79 = icmp eq i64 %65, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2449
  %81 = lshr i64 %65, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2450
  %83 = lshr i64 %60, 63
  %84 = lshr i64 %64, 63
  %85 = xor i64 %84, %83
  %86 = xor i64 %81, %83
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %37, align 1, !tbaa !2451
  %.v = select i1 %79, i64 59, i64 14
  %90 = add i64 %55, %.v
  %91 = add i64 %56, -16
  %92 = add i64 %90, 4
  store i64 %92, i64* %PC, align 8
  br i1 %79, label %block_406460, label %block_406433

block_406433:                                     ; preds = %block_406425
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %90, 8
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %59, align 8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -9
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %12, align 1, !tbaa !2433
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #9
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %19, align 1, !tbaa !2447
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2448
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2449
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2450
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2451
  %117 = add i64 %90, 19
  store i64 %117, i64* %PC, align 8
  store i64 %95, i64* %59, align 8
  %118 = load i64, i64* %RAX, align 8
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RSI, align 8, !tbaa !2428
  %120 = add i64 %119, -406
  %121 = add i64 %119, 8
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -40
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %40, align 1
  %131 = inttoptr i64 %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -40
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -16
  %139 = add i64 %134, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %137, i64* %140, align 8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, -54
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  br label %block_406425

block_406460:                                     ; preds = %block_406425
  %143 = inttoptr i64 %91 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RAX, align 8, !tbaa !2428
  %145 = add i64 %56, -8
  %146 = add i64 %90, 8
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %40, align 1, !tbaa !2452
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %155 = bitcast i64* %154 to double*
  store double 0.000000e+00, double* %155, align 1, !tbaa !2452
  %156 = load i64, i64* %RSP, align 8
  %157 = add i64 %156, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  %158 = icmp ugt i64 %156, -49
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %12, align 1, !tbaa !2433
  %160 = trunc i64 %157 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #9
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %19, align 1, !tbaa !2447
  %166 = xor i64 %156, 16
  %167 = xor i64 %166, %157
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %25, align 1, !tbaa !2448
  %171 = icmp eq i64 %157, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %28, align 1, !tbaa !2449
  %173 = lshr i64 %157, 63
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %31, align 1, !tbaa !2450
  %175 = lshr i64 %156, 63
  %176 = xor i64 %173, %175
  %177 = add nuw nsw i64 %176, %173
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %37, align 1, !tbaa !2451
  %180 = add i64 %150, 10
  store i64 %180, i64* %PC, align 8
  %181 = add i64 %156, 56
  %182 = inttoptr i64 %157 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RBP, align 8, !tbaa !2428
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %150, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  %187 = add i64 %156, 64
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4036e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #9
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_403720, label %block_403705

block_403705:                                     ; preds = %block_4036e0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %76 = add i64 %73, -12309
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_403720

block_403720:                                     ; preds = %block_403705, %block_4036e0
  %88 = phi i64 [ %73, %block_4036e0 ], [ %.pre, %block_403705 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_4036e0 ], [ %81, %block_403705 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #9
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2447
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2448
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2449
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2450
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2451
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4009b0___cxx_global_var_init_17(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPe_type* @dMPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4703
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403cd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_403970:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_403984

block_40399e:                                     ; preds = %block_403984
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %58 = add i64 %168, 706
  %59 = add i64 %168, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 799
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %71, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -24
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %80 = add i64 %77, -48
  %81 = load i64, i64* %RAX, align 8
  %82 = add i64 %79, 10
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %83, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 672
  %86 = add i64 %84, 5
  %87 = load i64, i64* %RSP, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89, align 8
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %90 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %85, %struct.Memory* %2)
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -40
  %93 = load i64, i64* %PC, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RAX, align 8
  %95 = add i64 %93, 8
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %92 to i64*
  store i64 %94, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 771
  %99 = add i64 %97, 5
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %98, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -48
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %106, 7
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = load i64*, i64** %55, align 8
  %114 = add i64 %106, 10
  store i64 %114, i64* %PC, align 8
  store i64 %112, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_403984

block_403999:                                     ; preds = %block_403984
  %117 = load i64, i64* %RSP, align 8
  %118 = add i64 %117, 48
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %119 = icmp ugt i64 %117, -49
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %13, align 1, !tbaa !2433
  %121 = trunc i64 %118 to i32
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #9
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %20, align 1, !tbaa !2447
  %127 = xor i64 %117, 16
  %128 = xor i64 %127, %118
  %129 = lshr i64 %128, 4
  %130 = trunc i64 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %26, align 1, !tbaa !2448
  %132 = icmp eq i64 %118, 0
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %29, align 1, !tbaa !2449
  %134 = lshr i64 %118, 63
  %135 = trunc i64 %134 to i8
  store i8 %135, i8* %32, align 1, !tbaa !2450
  %136 = lshr i64 %117, 63
  %137 = xor i64 %134, %136
  %138 = add nuw nsw i64 %137, %134
  %139 = icmp eq i64 %138, 2
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %38, align 1, !tbaa !2451
  %141 = add i64 %168, 77
  store i64 %141, i64* %PC, align 8
  %142 = add i64 %117, 56
  %143 = inttoptr i64 %118 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RBP, align 8, !tbaa !2428
  store i64 %142, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %168, 78
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %142 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %PC, align 8, !tbaa !2428
  %148 = add i64 %117, 64
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_403984:                                     ; preds = %block_40399e, %block_403970
  %149 = phi i64 [ %116, %block_40399e ], [ %.pre, %block_403970 ]
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %150, -16
  store i64 %152, i64* %RSI, align 8, !tbaa !2428
  %153 = add i64 %149, 796
  %154 = add i64 %149, 13
  %155 = load i64, i64* %RSP, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %154, i64* %157, align 8
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  store i64 %153, i64* %PC, align 8, !tbaa !2428
  %158 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %153, %struct.Memory* %2)
  %159 = load i8, i8* %AL, align 1
  %160 = load i64, i64* %PC, align 8
  %161 = and i8 %159, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %162 = zext i8 %161 to i32
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #9
  %164 = trunc i32 %163 to i8
  %165 = xor i8 %164, 1
  store i8 %165, i8* %20, align 1, !tbaa !2447
  %166 = xor i8 %161, 1
  store i8 %166, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %167 = icmp eq i8 %166, 0
  %.v = select i1 %167, i64 13, i64 8
  %168 = add i64 %160, %.v
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_40399e, label %block_403999
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401cf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4031f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2433
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2448
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2449
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2450
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2451
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40512a, label %block_405039

block_4050d9:                                     ; preds = %block_4050b0
  %87 = add i64 %236, 4
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %209, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %236, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %293, -48
  %93 = add i64 %236, 11
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -32
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -40
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %RCX, align 8, !tbaa !2428
  %105 = inttoptr i64 %100 to i64*
  %106 = add i64 %97, 11
  store i64 %106, i64* %PC, align 8
  %107 = load i64, i64* %105, align 8
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %104 to i64*
  %108 = add i64 %97, 14
  store i64 %108, i64* %PC, align 8
  store i64 %107, i64* %.cast, align 8
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -32
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RAX, align 8, !tbaa !2428
  %115 = add i64 %109, -48
  %116 = add i64 %111, 8
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = inttoptr i64 %114 to i64*
  %120 = add i64 %111, 11
  store i64 %120, i64* %PC, align 8
  store i64 %118, i64* %119, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, -169
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  br label %block_405054

block_405059:                                     ; preds = %block_405059, %block_405054
  %.sink8 = phi i64 [ %434, %block_405054 ], [ %172, %block_405059 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405054 ], [ %161, %block_405059 ]
  %123 = load i64, i64* %RBP, align 8
  %124 = add i64 %123, -24
  store i64 %124, i64* %RDI, align 8, !tbaa !2428
  %125 = add i64 %123, -40
  %126 = add i64 %.sink8, 8
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %128, -8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = icmp ugt i64 %128, 7
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %13, align 1, !tbaa !2433
  %132 = trunc i64 %129 to i32
  %133 = and i32 %132, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #9
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %20, align 1, !tbaa !2447
  %138 = xor i64 %128, 16
  %139 = xor i64 %138, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %26, align 1, !tbaa !2448
  %143 = icmp eq i64 %129, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %29, align 1, !tbaa !2449
  %145 = lshr i64 %129, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %32, align 1, !tbaa !2450
  %147 = lshr i64 %128, 63
  %148 = xor i64 %145, %147
  %149 = xor i64 %145, 1
  %150 = add nuw nsw i64 %148, %149
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %38, align 1, !tbaa !2451
  %153 = add i64 %.sink8, 16
  store i64 %153, i64* %PC, align 8
  store i64 %129, i64* %127, align 8
  %154 = load i64, i64* %RAX, align 8
  %155 = load i64, i64* %PC, align 8
  store i64 %154, i64* %RSI, align 8, !tbaa !2428
  %156 = add i64 %155, -8137
  %157 = add i64 %155, 8
  %158 = load i64, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %158, -8
  %160 = inttoptr i64 %159 to i64*
  store i64 %157, i64* %160, align 8
  store i64 %159, i64* %RSP, align 8, !tbaa !2428
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %161 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %156, %struct.Memory* %MEMORY.0)
  %162 = load i8, i8* %AL, align 1
  %163 = load i64, i64* %PC, align 8
  %164 = and i8 %162, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %165 = zext i8 %164 to i32
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #9
  %167 = trunc i32 %166 to i8
  %168 = xor i8 %167, 1
  store i8 %168, i8* %20, align 1, !tbaa !2447
  %169 = xor i8 %164, 1
  store i8 %169, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %170 = icmp eq i8 %169, 0
  %.v32 = select i1 %170, i64 13, i64 8
  %171 = add i64 %163, %.v32
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %172 = add i64 %171, -37
  br i1 %170, label %block_405059, label %block_405079

block_405096:                                     ; preds = %block_405079
  %173 = add i64 %329, 5
  br label %block_40509b

block_4050d4:                                     ; preds = %block_4050b0
  %174 = add i64 %236, 46
  br label %block_405102

block_405039:                                     ; preds = %block_405010
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -8
  %177 = add i64 %86, 4
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = add i64 %86, 7
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = add i64 %175, -24
  %184 = add i64 %86, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  store i64 %182, i64* %185, align 8
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -8
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %RAX, align 8, !tbaa !2428
  %192 = add i64 %186, -32
  %193 = add i64 %188, 8
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i64*
  store i64 %191, i64* %194, align 8
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -16
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = add i64 %195, -40
  %202 = add i64 %197, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  store i64 %200, i64* %203, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405054

block_4050b0:                                     ; preds = %block_40509b
  %204 = add i64 %292, 26
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %294 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = add i64 %293, -40
  %208 = add i64 %292, 30
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %206, %210
  %212 = icmp ult i64 %206, %210
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %13, align 1, !tbaa !2433
  %214 = trunc i64 %211 to i32
  %215 = and i32 %214, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #9
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %20, align 1, !tbaa !2447
  %220 = xor i64 %210, %206
  %221 = xor i64 %220, %211
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  store i8 %224, i8* %26, align 1, !tbaa !2448
  %225 = icmp eq i64 %211, 0
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %29, align 1, !tbaa !2449
  %227 = lshr i64 %211, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %32, align 1, !tbaa !2450
  %229 = lshr i64 %206, 63
  %230 = lshr i64 %210, 63
  %231 = xor i64 %230, %229
  %232 = xor i64 %227, %229
  %233 = add nuw nsw i64 %232, %231
  %234 = icmp eq i64 %233, 2
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %38, align 1, !tbaa !2451
  %.v35 = select i1 %212, i64 41, i64 36
  %236 = add i64 %292, %.v35
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  br i1 %212, label %block_4050d9, label %block_4050d4

block_405091:                                     ; preds = %block_405079
  %237 = add i64 %329, 113
  br label %block_405102

block_40512a:                                     ; preds = %block_405102, %block_405010
  %238 = phi i64 [ %86, %block_405010 ], [ %.pre31, %block_405102 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405010 ], [ %432, %block_405102 ]
  %239 = load i64, i64* %RSP, align 8
  %240 = add i64 %239, 48
  store i64 %240, i64* %RSP, align 8, !tbaa !2428
  %241 = icmp ugt i64 %239, -49
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %13, align 1, !tbaa !2433
  %243 = trunc i64 %240 to i32
  %244 = and i32 %243, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #9
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %20, align 1, !tbaa !2447
  %249 = xor i64 %239, 16
  %250 = xor i64 %249, %240
  %251 = lshr i64 %250, 4
  %252 = trunc i64 %251 to i8
  %253 = and i8 %252, 1
  store i8 %253, i8* %26, align 1, !tbaa !2448
  %254 = icmp eq i64 %240, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %29, align 1, !tbaa !2449
  %256 = lshr i64 %240, 63
  %257 = trunc i64 %256 to i8
  store i8 %257, i8* %32, align 1, !tbaa !2450
  %258 = lshr i64 %239, 63
  %259 = xor i64 %256, %258
  %260 = add nuw nsw i64 %259, %256
  %261 = icmp eq i64 %260, 2
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %38, align 1, !tbaa !2451
  %263 = add i64 %238, 5
  store i64 %263, i64* %PC, align 8
  %264 = add i64 %239, 56
  %265 = inttoptr i64 %240 to i64*
  %266 = load i64, i64* %265, align 8
  store i64 %266, i64* %RBP, align 8, !tbaa !2428
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %238, 6
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %264 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %PC, align 8, !tbaa !2428
  %270 = add i64 %239, 64
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40509b:                                     ; preds = %block_4050b5, %block_405096
  %271 = phi i64 [ %.pre30, %block_4050b5 ], [ %295, %block_405096 ]
  %.sink = phi i64 [ %357, %block_4050b5 ], [ %173, %block_405096 ]
  %MEMORY.2 = phi %struct.Memory* [ %282, %block_4050b5 ], [ %161, %block_405096 ]
  %272 = add i64 %271, -24
  store i64 %272, i64* %RSI, align 8, !tbaa !2428
  %273 = add i64 %271, -32
  %274 = add i64 %.sink, 8
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RDI, align 8, !tbaa !2428
  %277 = add i64 %.sink, -8187
  %278 = add i64 %.sink, 13
  %279 = load i64, i64* %RSP, align 8, !tbaa !2428
  %280 = add i64 %279, -8
  %281 = inttoptr i64 %280 to i64*
  store i64 %278, i64* %281, align 8
  store i64 %280, i64* %RSP, align 8, !tbaa !2428
  store i64 %277, i64* %PC, align 8, !tbaa !2428
  %282 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %277, %struct.Memory* %MEMORY.2)
  %283 = load i8, i8* %AL, align 1
  %284 = load i64, i64* %PC, align 8
  %285 = and i8 %283, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %286 = zext i8 %285 to i32
  %287 = tail call i32 @llvm.ctpop.i32(i32 %286) #9
  %288 = trunc i32 %287 to i8
  %289 = xor i8 %288, 1
  store i8 %289, i8* %20, align 1, !tbaa !2447
  %290 = xor i8 %285, 1
  store i8 %290, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %291 = icmp eq i8 %290, 0
  %.v34 = select i1 %291, i64 13, i64 8
  %292 = add i64 %284, %.v34
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = load i64, i64* %RBP, align 8
  %294 = add i64 %293, -32
  br i1 %291, label %block_4050b5, label %block_4050b0

block_405079:                                     ; preds = %block_405059
  %295 = load i64, i64* %RBP, align 8
  %296 = add i64 %295, -32
  %297 = add i64 %171, 14
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = add i64 %295, -40
  %301 = add i64 %171, 18
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = sub i64 %299, %303
  %305 = icmp ult i64 %299, %303
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %13, align 1, !tbaa !2433
  %307 = trunc i64 %304 to i32
  %308 = and i32 %307, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #9
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %20, align 1, !tbaa !2447
  %313 = xor i64 %303, %299
  %314 = xor i64 %313, %304
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %26, align 1, !tbaa !2448
  %318 = icmp eq i64 %304, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %29, align 1, !tbaa !2449
  %320 = lshr i64 %304, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %32, align 1, !tbaa !2450
  %322 = lshr i64 %299, 63
  %323 = lshr i64 %303, 63
  %324 = xor i64 %323, %322
  %325 = xor i64 %320, %322
  %326 = add nuw nsw i64 %325, %324
  %327 = icmp eq i64 %326, 2
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %38, align 1, !tbaa !2451
  %.v33 = select i1 %305, i64 29, i64 24
  %329 = add i64 %171, %.v33
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  br i1 %305, label %block_405096, label %block_405091

block_4050b5:                                     ; preds = %block_40509b
  %330 = add i64 %292, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %294 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = add i64 %332, 8
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ugt i64 %332, -9
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %13, align 1, !tbaa !2433
  %336 = trunc i64 %333 to i32
  %337 = and i32 %336, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #9
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %20, align 1, !tbaa !2447
  %342 = xor i64 %333, %332
  %343 = lshr i64 %342, 4
  %344 = trunc i64 %343 to i8
  %345 = and i8 %344, 1
  store i8 %345, i8* %26, align 1, !tbaa !2448
  %346 = icmp eq i64 %333, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %29, align 1, !tbaa !2449
  %348 = lshr i64 %333, 63
  %349 = trunc i64 %348 to i8
  store i8 %349, i8* %32, align 1, !tbaa !2450
  %350 = lshr i64 %332, 63
  %351 = xor i64 %348, %350
  %352 = add nuw nsw i64 %351, %348
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %38, align 1, !tbaa !2451
  %355 = add i64 %292, 12
  store i64 %355, i64* %PC, align 8
  store i64 %333, i64* %331, align 8
  %356 = load i64, i64* %PC, align 8
  %357 = add i64 %356, -38
  %.pre30 = load i64, i64* %RBP, align 8
  br label %block_40509b

block_405102:                                     ; preds = %block_405091, %block_4050d4
  %358 = phi i64 [ %295, %block_405091 ], [ %293, %block_4050d4 ]
  %.sink4 = phi i64 [ %237, %block_405091 ], [ %174, %block_4050d4 ]
  %MEMORY.3 = phi %struct.Memory* [ %161, %block_405091 ], [ %282, %block_4050d4 ]
  %359 = add i64 %358, -8
  %360 = add i64 %.sink4, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %358, -40
  %364 = add i64 %.sink4, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %366, 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = icmp ugt i64 %366, -9
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %13, align 1, !tbaa !2433
  %370 = trunc i64 %367 to i32
  %371 = and i32 %370, 255
  %372 = tail call i32 @llvm.ctpop.i32(i32 %371) #9
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %20, align 1, !tbaa !2447
  %376 = xor i64 %367, %366
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %26, align 1, !tbaa !2448
  %380 = icmp eq i64 %367, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %29, align 1, !tbaa !2449
  %382 = lshr i64 %367, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %32, align 1, !tbaa !2450
  %384 = lshr i64 %366, 63
  %385 = xor i64 %382, %384
  %386 = add nuw nsw i64 %385, %382
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %38, align 1, !tbaa !2451
  store i64 %367, i64* %RSI, align 8, !tbaa !2428
  %389 = add i64 %.sink4, -242
  %390 = add i64 %.sink4, 20
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.3)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -40
  %397 = load i64, i64* %PC, align 8
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp ugt i64 %400, -9
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %13, align 1, !tbaa !2433
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #9
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %20, align 1, !tbaa !2447
  %410 = xor i64 %401, %400
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2448
  %414 = icmp eq i64 %401, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %29, align 1, !tbaa !2449
  %416 = lshr i64 %401, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %32, align 1, !tbaa !2450
  %418 = lshr i64 %400, 63
  %419 = xor i64 %416, %418
  %420 = add nuw nsw i64 %419, %416
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %38, align 1, !tbaa !2451
  %423 = add i64 %395, -16
  %424 = add i64 %397, 12
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RSI, align 8, !tbaa !2428
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %397, -262
  %428 = add i64 %397, 20
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* nonnull %0, i64 %427, %struct.Memory* %394)
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40512a

block_405054:                                     ; preds = %block_405039, %block_4050d9
  %433 = phi i64 [ %.pre, %block_405039 ], [ %122, %block_4050d9 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_405039 ], [ %282, %block_4050d9 ]
  %434 = add i64 %433, 5
  br label %block_405059
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405df0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 16) to i64*), align 16
  %41 = bitcast %union.VectorReg* %4 to double*
  %42 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %40, i64* %42, align 1, !tbaa !2452
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %44 = bitcast i64* %43 to double*
  store double 0.000000e+00, double* %44, align 1, !tbaa !2452
  %45 = add i64 %7, -16
  %46 = add i64 %10, 20
  store i64 %46, i64* %PC, align 8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %48 = load i64, i64* %47, align 1
  %49 = inttoptr i64 %45 to i64*
  store i64 %48, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %47, align 1, !tbaa !2452
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %57 = bitcast i64* %56 to double*
  store double 0.000000e+00, double* %57, align 1, !tbaa !2452
  %58 = load double, double* %41, align 1
  %59 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  %60 = fmul double %58, %59
  store double %60, double* %41, align 1, !tbaa !2452
  %61 = add i64 %52, 18
  store i64 %61, i64* %PC, align 8
  %62 = bitcast i64 %55 to double
  %63 = fcmp uno double %62, %60
  br i1 %63, label %64, label %74

; <label>:64:                                     ; preds = %block_405df0
  %65 = fadd double %60, %62
  %66 = bitcast double %65 to i64
  %67 = and i64 %66, 9221120237041090560
  %68 = icmp eq i64 %67, 9218868437227405312
  %69 = and i64 %66, 2251799813685247
  %70 = icmp ne i64 %69, 0
  %71 = and i1 %68, %70
  br i1 %71, label %72, label %80

; <label>:72:                                     ; preds = %64
  %73 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %61, %struct.Memory* %2) #12
  %.pre = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:74:                                     ; preds = %block_405df0
  %75 = fcmp ogt double %62, %60
  br i1 %75, label %80, label %76

; <label>:76:                                     ; preds = %74
  %77 = fcmp olt double %62, %60
  br i1 %77, label %80, label %78

; <label>:78:                                     ; preds = %76
  %79 = fcmp oeq double %62, %60
  br i1 %79, label %80, label %84

; <label>:80:                                     ; preds = %78, %76, %74, %64
  %81 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 1, %78 ], [ 1, %64 ]
  %82 = phi i8 [ 0, %74 ], [ 0, %76 ], [ 0, %78 ], [ 1, %64 ]
  %83 = phi i8 [ 0, %74 ], [ 1, %76 ], [ 0, %78 ], [ 1, %64 ]
  store i8 %81, i8* %30, align 1, !tbaa !2432
  store i8 %82, i8* %21, align 1, !tbaa !2432
  store i8 %83, i8* %14, align 1, !tbaa !2432
  br label %84

; <label>:84:                                     ; preds = %80, %78
  store i8 0, i8* %39, align 1, !tbaa !2432
  store i8 0, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %84, %72
  %85 = phi i64 [ %.pre, %72 ], [ %61, %84 ]
  %86 = phi %struct.Memory* [ %73, %72 ], [ %2, %84 ]
  %87 = add i64 %85, 17
  %88 = add i64 %85, 6
  %89 = load i8, i8* %30, align 1, !tbaa !2449
  %90 = icmp eq i8 %89, 0
  %91 = select i1 %90, i64 %87, i64 %88
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br i1 %90, label %block_405e28, label %block_405e1d

block_405e1d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %92 = load i8, i8* %21, align 1, !tbaa !2447
  %93 = icmp ne i8 %92, 0
  %.v = select i1 %93, i64 11, i64 6
  %94 = add i64 %91, %.v
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  %95 = icmp eq i8 %92, 1
  br i1 %95, label %block_405e28, label %block_405e23

block_405e23:                                     ; preds = %block_405e1d
  %96 = add i64 %94, 32
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  br label %block_405e43

block_405e28:                                     ; preds = %block_405e1d, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %97 = phi i64 [ %94, %block_405e1d ], [ %87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1033), i64* %RDI, align 8, !tbaa !2428
  %98 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %99 = zext i32 %98 to i64
  store i64 %99, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %100 = add i64 %97, -22328
  %101 = add i64 %97, 24
  %102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %86)
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -12
  %108 = load i32, i32* %EAX, align 4
  %109 = load i64, i64* %PC, align 8
  %110 = add i64 %109, 3
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %111, align 4
  %.pre2 = load i64, i64* %PC, align 8
  br label %block_405e43

block_405e43:                                     ; preds = %block_405e28, %block_405e23
  %112 = phi i64 [ %.pre2, %block_405e28 ], [ %96, %block_405e23 ]
  %MEMORY.1 = phi %struct.Memory* [ %105, %block_405e28 ], [ %86, %block_405e23 ]
  %113 = load i64, i64* %RSP, align 8
  %114 = add i64 %113, 16
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ugt i64 %113, -17
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %14, align 1, !tbaa !2433
  %117 = trunc i64 %114 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #9
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %21, align 1, !tbaa !2447
  %123 = xor i64 %113, 16
  %124 = xor i64 %123, %114
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %27, align 1, !tbaa !2448
  %128 = icmp eq i64 %114, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %30, align 1, !tbaa !2449
  %130 = lshr i64 %114, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %33, align 1, !tbaa !2450
  %132 = lshr i64 %113, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %39, align 1, !tbaa !2451
  %137 = add i64 %112, 5
  store i64 %137, i64* %PC, align 8
  %138 = add i64 %113, 24
  %139 = inttoptr i64 %114 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RBP, align 8, !tbaa !2428
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %141 = add i64 %112, 6
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %144 = add i64 %113, 32
  store i64 %144, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_4021b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_4021c4

block_4021d2:                                     ; preds = %block_4021c4
  %54 = add i64 %159, -32
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %193, 8
  store i64 %55, i64* %PC, align 8
  %56 = load i64, i64* %162, align 8
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %56, 8
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %58 = icmp ugt i64 %56, -9
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %12, align 1, !tbaa !2433
  %60 = trunc i64 %57 to i32
  %61 = and i32 %60, 255
  %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* %19, align 1, !tbaa !2447
  %66 = xor i64 %57, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %24, align 1, !tbaa !2448
  %70 = icmp eq i64 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %27, align 1, !tbaa !2449
  %72 = lshr i64 %57, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2450
  %74 = lshr i64 %56, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %36, align 1, !tbaa !2451
  %79 = add i64 %193, 19
  store i64 %79, i64* %PC, align 8
  store i64 %57, i64* %162, align 8
  %80 = load i64, i64* %RAX, align 8
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %82 = add i64 %81, -1157
  %83 = add i64 %81, 8
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %2)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, -9
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %12, align 1, !tbaa !2433
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #9
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %19, align 1, !tbaa !2447
  %103 = xor i64 %94, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %24, align 1, !tbaa !2448
  %107 = icmp eq i64 %94, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %27, align 1, !tbaa !2449
  %109 = lshr i64 %94, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2450
  %111 = lshr i64 %93, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %109
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %36, align 1, !tbaa !2451
  %116 = add i64 %90, 15
  store i64 %116, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -32
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64*, i64** %53, align 8
  %124 = add i64 %119, 7
  store i64 %124, i64* %PC, align 8
  store i64 %122, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_4021c4

block_402208:                                     ; preds = %block_4021c4
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2433
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #9
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2447
  %137 = xor i64 %128, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2448
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2449
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2450
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2451
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4021c4:                                     ; preds = %block_4021d2, %block_4021b0
  %158 = phi i64 [ %126, %block_4021d2 ], [ %.pre, %block_4021b0 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2433
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #9
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2447
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2448
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2449
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2450
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2451
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %158, %.v
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_402208, label %block_4021d2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4039f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %5, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %8, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, 776
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %RAX, align 8
  %62 = add i64 %58, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %71 = ashr i64 %69, 63
  store i64 %71, i64* %70, align 8, !tbaa !2428
  %72 = load i64, i64* %RCX, align 8
  %73 = add i64 %66, 9
  store i64 %73, i64* %PC, align 8
  %74 = sext i64 %72 to i128
  %75 = and i128 %74, -18446744073709551616
  %76 = zext i64 %71 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %69 to i128
  %79 = or i128 %78, %77
  %80 = zext i64 %72 to i128
  %81 = or i128 %75, %80
  %82 = sdiv i128 %79, %81
  %83 = trunc i128 %82 to i64
  %84 = and i128 %82, 18446744073709551615
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = or i128 %86, %84
  %88 = icmp eq i128 %82, %87
  br i1 %88, label %91, label %89

; <label>:89:                                     ; preds = %block_4039f0
  %90 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %57) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:91:                                     ; preds = %block_4039f0
  %92 = srem i128 %79, %81
  %93 = trunc i128 %92 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  store i64 %93, i64* %70, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %91, %89
  %94 = phi i64 [ %.pre7, %89 ], [ %64, %91 ]
  %95 = phi i64 [ %.pre6, %89 ], [ %73, %91 ]
  %96 = phi i64 [ %.pre, %89 ], [ %83, %91 ]
  %97 = phi %struct.Memory* [ %90, %89 ], [ %57, %91 ]
  %98 = add i64 %96, -1
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = icmp eq i64 %96, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %12, align 1, !tbaa !2433
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #9
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %19, align 1, !tbaa !2447
  %107 = xor i64 %98, %96
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %25, align 1, !tbaa !2448
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %28, align 1, !tbaa !2449
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %31, align 1, !tbaa !2450
  %115 = lshr i64 %96, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %37, align 1, !tbaa !2451
  %120 = add i64 %94, -24
  %121 = add i64 %95, 8
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i64*
  store i64 %98, i64* %122, align 8
  %123 = bitcast i64* %RAX to i64**
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %126 = bitcast i64* %125 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_403a2f

block_403b32:                                     ; preds = %block_403a9e
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 112
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -113
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2433
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #9
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2447
  %137 = xor i64 %127, 16
  %138 = xor i64 %137, %128
  %139 = lshr i64 %138, 4
  %140 = trunc i64 %139 to i8
  %141 = and i8 %140, 1
  store i8 %141, i8* %25, align 1, !tbaa !2448
  %142 = icmp eq i64 %128, 0
  %143 = zext i1 %142 to i8
  store i8 %143, i8* %28, align 1, !tbaa !2449
  %144 = lshr i64 %128, 63
  %145 = trunc i64 %144 to i8
  store i8 %145, i8* %31, align 1, !tbaa !2450
  %146 = lshr i64 %127, 63
  %147 = xor i64 %144, %146
  %148 = add nuw nsw i64 %147, %144
  %149 = icmp eq i64 %148, 2
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %37, align 1, !tbaa !2451
  %151 = add i64 %339, 5
  store i64 %151, i64* %PC, align 8
  %152 = add i64 %127, 120
  %153 = inttoptr i64 %128 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %RBP, align 8, !tbaa !2428
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %339, 6
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %PC, align 8, !tbaa !2428
  %158 = add i64 %127, 128
  store i64 %158, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_403a3a:                                     ; preds = %block_403a2f
  %159 = add i64 %265, -8
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %160 = add i64 %281, 8
  store i64 %160, i64* %PC, align 8
  %161 = load i64, i64* %268, align 8
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = add i64 %281, 774
  %163 = add i64 %281, 13
  %164 = load i64, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166, align 8
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  %167 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %162, %struct.Memory* %MEMORY.0)
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -48
  %170 = load i64, i64* %PC, align 8
  store i64 %169, i64* %RDI, align 8, !tbaa !2428
  %171 = load i64, i64* %RAX, align 8
  %172 = add i64 %170, 8
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %169 to i64*
  store i64 %171, i64* %173, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 641
  %176 = add i64 %174, 5
  %177 = load i64, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179, align 8
  store i64 %178, i64* %RSP, align 8, !tbaa !2428
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %180 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %175, %struct.Memory* %MEMORY.0)
  %181 = load i64*, i64** %123, align 8
  %182 = load i64, i64* %PC, align 8
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC, align 8
  %184 = load i64, i64* %181, align 8
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = load i64, i64* %RBP, align 8
  %186 = add i64 %185, -40
  %187 = add i64 %182, 7
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %188, align 8
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -32
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RDI, align 8, !tbaa !2428
  %195 = add i64 %189, -8
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = add i64 %189, -56
  %200 = add i64 %191, 12
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  store i64 %198, i64* %201, align 8
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -24
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RDX, align 8, !tbaa !2428
  %208 = add i64 %202, -40
  %209 = add i64 %204, 8
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %202, -64
  %213 = add i64 %204, 12
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i64*
  store i64 %211, i64* %214, align 8
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -56
  %217 = load i64, i64* %PC, align 8
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %RSI, align 8, !tbaa !2428
  %221 = add i64 %215, -64
  %222 = add i64 %217, 9
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %124, align 1, !tbaa !2452
  store double 0.000000e+00, double* %126, align 1, !tbaa !2452
  %225 = add i64 %217, 765
  %226 = add i64 %217, 14
  %227 = load i64, i64* %RSP, align 8, !tbaa !2428
  %228 = add i64 %227, -8
  %229 = inttoptr i64 %228 to i64*
  store i64 %226, i64* %229, align 8
  store i64 %228, i64* %RSP, align 8, !tbaa !2428
  store i64 %225, i64* %PC, align 8, !tbaa !2428
  %230 = tail call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* nonnull %0, i64 %225, %struct.Memory* %MEMORY.0)
  %231 = load i64, i64* %RBP, align 8
  %232 = add i64 %231, -24
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = add i64 %236, -1
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = icmp ne i64 %236, 0
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %12, align 1, !tbaa !2433
  %240 = trunc i64 %237 to i32
  %241 = and i32 %240, 255
  %242 = tail call i32 @llvm.ctpop.i32(i32 %241) #9
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %19, align 1, !tbaa !2447
  %246 = xor i64 %236, 16
  %247 = xor i64 %246, %237
  %248 = lshr i64 %247, 4
  %249 = trunc i64 %248 to i8
  %250 = and i8 %249, 1
  store i8 %250, i8* %25, align 1, !tbaa !2448
  %251 = icmp eq i64 %237, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %28, align 1, !tbaa !2449
  %253 = lshr i64 %237, 63
  %254 = trunc i64 %253 to i8
  store i8 %254, i8* %31, align 1, !tbaa !2450
  %255 = lshr i64 %236, 63
  %256 = xor i64 %253, %255
  %257 = xor i64 %253, 1
  %258 = add nuw nsw i64 %256, %257
  %259 = icmp eq i64 %258, 2
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %37, align 1, !tbaa !2451
  %261 = add i64 %233, 12
  store i64 %261, i64* %PC, align 8
  store i64 %237, i64* %235, align 8
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, -94
  store i64 %263, i64* %PC, align 8, !tbaa !2428
  br label %block_403a2f

block_403a2f:                                     ; preds = %block_403a3a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %264 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %263, %block_403a3a ]
  %MEMORY.0 = phi %struct.Memory* [ %97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %230, %block_403a3a ]
  %265 = load i64, i64* %RBP, align 8
  %266 = add i64 %265, -24
  %267 = add i64 %264, 5
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %270 = trunc i64 %269 to i32
  %271 = and i32 %270, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #9
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i64 %269, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i64 %269, 63
  %279 = trunc i64 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  %280 = icmp ne i8 %279, 0
  %.v = select i1 %280, i64 94, i64 6
  %281 = add i64 %267, %.v
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  br i1 %280, label %block_403a92, label %block_403a3a

block_403a92:                                     ; preds = %block_403a2f
  %282 = add i64 %265, -32
  %283 = add i64 %281, 4
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, -1
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = icmp eq i64 %285, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %12, align 1, !tbaa !2433
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #9
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %19, align 1, !tbaa !2447
  %295 = xor i64 %286, %285
  %296 = lshr i64 %295, 4
  %297 = trunc i64 %296 to i8
  %298 = and i8 %297, 1
  store i8 %298, i8* %25, align 1, !tbaa !2448
  %299 = icmp eq i64 %286, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %28, align 1, !tbaa !2449
  %301 = lshr i64 %286, 63
  %302 = trunc i64 %301 to i8
  store i8 %302, i8* %31, align 1, !tbaa !2450
  %303 = lshr i64 %285, 63
  %304 = xor i64 %301, %303
  %305 = add nuw nsw i64 %304, %303
  %306 = icmp eq i64 %305, 2
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %37, align 1, !tbaa !2451
  %308 = add i64 %281, 12
  store i64 %308, i64* %PC, align 8
  store i64 %286, i64* %268, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403a9e

block_403a9e:                                     ; preds = %block_403aa9, %block_403a92
  %309 = phi i64 [ %.pre9, %block_403a92 ], [ %490, %block_403aa9 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_403a92 ], [ %457, %block_403aa9 ]
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -24
  %312 = add i64 %309, 5
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = add i64 %314, -1
  %316 = icmp eq i64 %314, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %12, align 1, !tbaa !2433
  %318 = trunc i64 %315 to i32
  %319 = and i32 %318, 255
  %320 = tail call i32 @llvm.ctpop.i32(i32 %319) #9
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  store i8 %323, i8* %19, align 1, !tbaa !2447
  %324 = xor i64 %315, %314
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  store i8 %327, i8* %25, align 1, !tbaa !2448
  %328 = icmp eq i64 %315, 0
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %28, align 1, !tbaa !2449
  %330 = lshr i64 %315, 63
  %331 = trunc i64 %330 to i8
  store i8 %331, i8* %31, align 1, !tbaa !2450
  %332 = lshr i64 %314, 63
  %333 = xor i64 %330, %332
  %334 = add nuw nsw i64 %333, %332
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %37, align 1, !tbaa !2451
  %337 = icmp ne i8 %331, 0
  %338 = xor i1 %337, %335
  %.v10 = select i1 %338, i64 148, i64 11
  %339 = add i64 %309, %.v10
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  br i1 %338, label %block_403b32, label %block_403aa9

block_403aa9:                                     ; preds = %block_403a9e
  %340 = add i64 %310, -8
  store i64 %340, i64* %RDI, align 8, !tbaa !2428
  %341 = add i64 %339, 8
  store i64 %341, i64* %PC, align 8
  %342 = load i64, i64* %313, align 8
  store i64 %342, i64* %RSI, align 8, !tbaa !2428
  %343 = add i64 %339, 663
  %344 = add i64 %339, 13
  %345 = load i64, i64* %RSP, align 8, !tbaa !2428
  %346 = add i64 %345, -8
  %347 = inttoptr i64 %346 to i64*
  store i64 %344, i64* %347, align 8
  store i64 %346, i64* %RSP, align 8, !tbaa !2428
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  %348 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %343, %struct.Memory* %MEMORY.1)
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -80
  %351 = load i64, i64* %PC, align 8
  store i64 %350, i64* %RDI, align 8, !tbaa !2428
  %352 = load i64, i64* %RAX, align 8
  %353 = add i64 %351, 8
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %350 to i64*
  store i64 %352, i64* %354, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, 530
  %357 = add i64 %355, 5
  %358 = load i64, i64* %RSP, align 8, !tbaa !2428
  %359 = add i64 %358, -8
  %360 = inttoptr i64 %359 to i64*
  store i64 %357, i64* %360, align 8
  store i64 %359, i64* %RSP, align 8, !tbaa !2428
  store i64 %356, i64* %PC, align 8, !tbaa !2428
  %361 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %356, %struct.Memory* %MEMORY.1)
  %362 = load i64, i64* %RBP, align 8
  %363 = add i64 %362, -8
  %364 = load i64, i64* %PC, align 8
  store i64 %363, i64* %RDI, align 8, !tbaa !2428
  %365 = load i64*, i64** %123, align 8
  %366 = add i64 %364, 7
  store i64 %366, i64* %PC, align 8
  %367 = load i64, i64* %365, align 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = add i64 %362, -72
  %369 = add i64 %364, 11
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i64*
  store i64 %367, i64* %370, align 8
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 514
  %373 = add i64 %371, 5
  %374 = load i64, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %374, -8
  %376 = inttoptr i64 %375 to i64*
  store i64 %373, i64* %376, align 8
  store i64 %375, i64* %RSP, align 8, !tbaa !2428
  store i64 %372, i64* %PC, align 8, !tbaa !2428
  %377 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %372, %struct.Memory* %MEMORY.1)
  %378 = load i64, i64* %RBP, align 8
  %379 = add i64 %378, -8
  %380 = load i64, i64* %PC, align 8
  store i64 %379, i64* %RDI, align 8, !tbaa !2428
  %381 = add i64 %378, -24
  %382 = add i64 %380, 8
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %RSI, align 8, !tbaa !2428
  %385 = add i64 %378, -112
  %386 = load i64, i64* %RAX, align 8
  %387 = add i64 %380, 12
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %385 to i64*
  store i64 %386, i64* %388, align 8
  %389 = load i64, i64* %PC, align 8
  %390 = add i64 %389, 609
  %391 = add i64 %389, 5
  %392 = load i64, i64* %RSP, align 8, !tbaa !2428
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394, align 8
  store i64 %393, i64* %RSP, align 8, !tbaa !2428
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  %395 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %390, %struct.Memory* %MEMORY.1)
  %396 = load i64, i64* %RBP, align 8
  %397 = add i64 %396, -88
  %398 = load i64, i64* %PC, align 8
  store i64 %397, i64* %RDI, align 8, !tbaa !2428
  %399 = load i64, i64* %RAX, align 8
  %400 = add i64 %398, 8
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %397 to i64*
  store i64 %399, i64* %401, align 8
  %402 = load i64, i64* %PC, align 8
  %403 = add i64 %402, 484
  %404 = add i64 %402, 5
  %405 = load i64, i64* %RSP, align 8, !tbaa !2428
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %404, i64* %407, align 8
  store i64 %406, i64* %RSP, align 8, !tbaa !2428
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  %408 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %403, %struct.Memory* %MEMORY.1)
  %409 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -112
  %412 = add i64 %409, 8
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %RSI, align 8, !tbaa !2428
  %415 = add i64 %409, 11
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %RDI, align 8, !tbaa !2428
  %418 = load i64*, i64** %123, align 8
  %419 = add i64 %409, 14
  store i64 %419, i64* %PC, align 8
  store i64 %417, i64* %418, align 8
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -24
  %422 = load i64, i64* %PC, align 8
  %423 = add i64 %422, 4
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = add i64 %420, -8
  %427 = add i64 %422, 8
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = add i64 %420, -96
  %431 = add i64 %422, 12
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i64*
  store i64 %429, i64* %432, align 8
  %433 = load i64, i64* %RBP, align 8
  %434 = add i64 %433, -72
  %435 = load i64, i64* %PC, align 8
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437, align 8
  store i64 %438, i64* %RAX, align 8, !tbaa !2428
  %439 = add i64 %433, -104
  %440 = add i64 %435, 8
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %439 to i64*
  store i64 %438, i64* %441, align 8
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -96
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, 4
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %443 to i64*
  %447 = load i64, i64* %446, align 8
  store i64 %447, i64* %RSI, align 8, !tbaa !2428
  %448 = add i64 %442, -104
  %449 = add i64 %444, 9
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  %451 = load i64, i64* %450, align 8
  store i64 %451, i64* %124, align 1, !tbaa !2452
  store double 0.000000e+00, double* %126, align 1, !tbaa !2452
  %452 = add i64 %444, 605
  %453 = add i64 %444, 14
  %454 = load i64, i64* %RSP, align 8, !tbaa !2428
  %455 = add i64 %454, -8
  %456 = inttoptr i64 %455 to i64*
  store i64 %453, i64* %456, align 8
  store i64 %455, i64* %RSP, align 8, !tbaa !2428
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  %457 = tail call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* nonnull %0, i64 %452, %struct.Memory* %MEMORY.1)
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -24
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = add i64 %463, -1
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = icmp ne i64 %463, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %12, align 1, !tbaa !2433
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #9
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %19, align 1, !tbaa !2447
  %473 = xor i64 %463, 16
  %474 = xor i64 %473, %464
  %475 = lshr i64 %474, 4
  %476 = trunc i64 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %25, align 1, !tbaa !2448
  %478 = icmp eq i64 %464, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %28, align 1, !tbaa !2449
  %480 = lshr i64 %464, 63
  %481 = trunc i64 %480 to i8
  store i8 %481, i8* %31, align 1, !tbaa !2450
  %482 = lshr i64 %463, 63
  %483 = xor i64 %480, %482
  %484 = xor i64 %480, 1
  %485 = add nuw nsw i64 %483, %484
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %37, align 1, !tbaa !2451
  %488 = add i64 %460, 12
  store i64 %488, i64* %PC, align 8
  store i64 %464, i64* %462, align 8
  %489 = load i64, i64* %PC, align 8
  %490 = add i64 %489, -143
  store i64 %490, i64* %PC, align 8, !tbaa !2428
  br label %block_403a9e
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401bd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400cc0__Z9summarizePKciiii(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400cc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %7 to i32*
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %13 = load i64, i64* %RBP, align 8
  %14 = add i64 %1, 1
  store i64 %14, i64* %PC, align 8
  %15 = load i64, i64* %RSP, align 8, !tbaa !2428
  %16 = add i64 %15, -8
  %17 = inttoptr i64 %16 to i64*
  store i64 %13, i64* %17, align 8
  %18 = load i64, i64* %PC, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %15, -136
  store i64 %19, i64* %RSP, align 8, !tbaa !2428
  %20 = icmp ult i64 %16, 128
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %21, i8* %22, align 1, !tbaa !2433
  %23 = trunc i64 %19 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %28, i8* %29, align 1, !tbaa !2447
  %30 = xor i64 %16, %19
  %31 = lshr i64 %30, 4
  %32 = trunc i64 %31 to i8
  %33 = and i8 %32, 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = icmp eq i64 %19, 0
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %19, 63
  %39 = trunc i64 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = lshr i64 %16, 63
  %42 = xor i64 %38, %41
  %43 = add nuw nsw i64 %42, %41
  %44 = icmp eq i64 %43, 2
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %46, align 1, !tbaa !2451
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %48 = bitcast [32 x %union.VectorReg]* %9 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %48, align 1, !tbaa !2456
  %49 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 8) to i64*), align 8
  %50 = bitcast %union.VectorReg* %10 to double*
  %51 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %49, i64* %51, align 1, !tbaa !2452
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %53 = bitcast i64* %52 to double*
  store double 0.000000e+00, double* %53, align 1, !tbaa !2452
  %54 = add i64 %15, -16
  %55 = load i64, i64* %RDI, align 8
  %56 = add i64 %18, 25
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -12
  %60 = load i32, i32* %ESI, align 4
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i32*
  store i32 %60, i32* %63, align 4
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = load i32, i32* %EDX, align 4
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i32*
  store i32 %66, i32* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -20
  %72 = load i32, i32* %ECX, align 4
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %71 to i32*
  store i32 %72, i32* %75, align 4
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -24
  %78 = load i32, i32* %R8D, align 4
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i32*
  store i32 %78, i32* %81, align 4
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -12
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = sitofp i32 %87 to double
  %89 = bitcast %union.VectorReg* %11 to double*
  store double %88, double* %89, align 1, !tbaa !2452
  %90 = add i64 %82, -16
  %91 = add i64 %84, 10
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = sitofp i32 %93 to double
  %95 = bitcast %union.VectorReg* %12 to double*
  store double %94, double* %95, align 1, !tbaa !2452
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %97 = fmul double %94, %88
  %98 = load double, double* %50, align 1
  %99 = fdiv double %97, %98
  store double %99, double* %89, align 1, !tbaa !2452
  %100 = add i64 %82, -40
  %101 = add i64 %84, 23
  store i64 %101, i64* %PC, align 8
  %102 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  %103 = inttoptr i64 %100 to double*
  store double %99, double* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -48
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 5
  store i64 %107, i64* %PC, align 8
  %108 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %9, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %109 = load i64, i64* %108, align 1
  %110 = inttoptr i64 %105 to i64*
  store i64 %109, i64* %110, align 8
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -56
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC, align 8
  %115 = load i64, i64* %108, align 1
  %116 = inttoptr i64 %112 to i64*
  store i64 %115, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -60
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i32*
  store i32 12, i32* %121, align 4
  %122 = load i64, i64* %RBP, align 8
  %123 = add i64 %122, -28
  %124 = load i64, i64* %PC, align 8
  %125 = add i64 %124, 7
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %123 to i32*
  store i32 0, i32* %126, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400d16

block_400ebd:                                     ; preds = %block_400ecd, %block_400eb6
  %127 = phi i64 [ %422, %block_400ecd ], [ %.pre21, %block_400eb6 ]
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -28
  %130 = add i64 %127, 3
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %135 = sub i32 %132, %134
  %136 = icmp ult i32 %132, %134
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %22, align 1, !tbaa !2433
  %138 = and i32 %135, 255
  %139 = tail call i32 @llvm.ctpop.i32(i32 %138) #9
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  store i8 %142, i8* %29, align 1, !tbaa !2447
  %143 = xor i32 %134, %132
  %144 = xor i32 %143, %135
  %145 = lshr i32 %144, 4
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  store i8 %147, i8* %34, align 1, !tbaa !2448
  %148 = icmp eq i32 %135, 0
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %37, align 1, !tbaa !2449
  %150 = lshr i32 %135, 31
  %151 = trunc i32 %150 to i8
  store i8 %151, i8* %40, align 1, !tbaa !2450
  %152 = lshr i32 %132, 31
  %153 = lshr i32 %134, 31
  %154 = xor i32 %153, %152
  %155 = xor i32 %150, %152
  %156 = add nuw nsw i32 %155, %154
  %157 = icmp eq i32 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %46, align 1, !tbaa !2451
  %159 = icmp ne i8 %151, 0
  %160 = xor i1 %159, %157
  %.v27 = select i1 %160, i64 16, i64 63
  %161 = add i64 %127, %.v27
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  br i1 %160, label %block_400ecd, label %block_400efc

block_400efc:                                     ; preds = %block_400ebd
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 203), i64* %RDI, align 8, !tbaa !2428
  %162 = add i64 %128, -8
  %163 = add i64 %161, 14
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %162 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RSI, align 8, !tbaa !2428
  %166 = add i64 %128, -48
  %167 = add i64 %161, 19
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %108, align 1, !tbaa !2452
  store double 0.000000e+00, double* %519, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %170 = add i64 %161, -2060
  %171 = add i64 %161, 26
  %172 = load i64, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174, align 8
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %175 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %176 = load i64, i64* %PC, align 8
  %177 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %178 = add i32 %177, -1
  %179 = icmp eq i32 %177, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %22, align 1, !tbaa !2433
  %181 = and i32 %178, 255
  %182 = tail call i32 @llvm.ctpop.i32(i32 %181) #9
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  %185 = xor i8 %184, 1
  store i8 %185, i8* %29, align 1, !tbaa !2447
  %186 = xor i32 %178, %177
  %187 = lshr i32 %186, 4
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  store i8 %189, i8* %34, align 1, !tbaa !2448
  %190 = icmp eq i32 %178, 0
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %37, align 1, !tbaa !2449
  %192 = lshr i32 %178, 31
  %193 = trunc i32 %192 to i8
  store i8 %193, i8* %40, align 1, !tbaa !2450
  %194 = lshr i32 %177, 31
  %195 = xor i32 %192, %194
  %196 = add nuw nsw i32 %195, %194
  %197 = icmp eq i32 %196, 2
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %46, align 1, !tbaa !2451
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -112
  %201 = load i32, i32* %EAX, align 4
  %202 = add i64 %176, 11
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %200 to i32*
  store i32 %201, i32* %203, align 4
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 163
  %206 = add i64 %204, 6
  %207 = load i8, i8* %37, align 1, !tbaa !2449
  %208 = icmp ne i8 %207, 0
  %209 = load i8, i8* %40, align 1, !tbaa !2450
  %210 = icmp ne i8 %209, 0
  %211 = load i8, i8* %46, align 1, !tbaa !2451
  %212 = icmp ne i8 %211, 0
  %213 = xor i1 %210, %212
  %214 = or i1 %208, %213
  %215 = select i1 %214, i64 %205, i64 %206
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_400fc4, label %block_400f27

block_400dba:                                     ; preds = %block_400dca, %block_400d6c
  %216 = phi i64 [ %.pre20, %block_400d6c ], [ %1090, %block_400dca ]
  %MEMORY.1 = phi %struct.Memory* [ %507, %block_400d6c ], [ %1052, %block_400dca ]
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -28
  %219 = add i64 %216, 3
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = zext i32 %221 to i64
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %224 = sub i32 %221, %223
  %225 = icmp ult i32 %221, %223
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %22, align 1, !tbaa !2433
  %227 = and i32 %224, 255
  %228 = tail call i32 @llvm.ctpop.i32(i32 %227) #9
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  store i8 %231, i8* %29, align 1, !tbaa !2447
  %232 = xor i32 %223, %221
  %233 = xor i32 %232, %224
  %234 = lshr i32 %233, 4
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  store i8 %236, i8* %34, align 1, !tbaa !2448
  %237 = icmp eq i32 %224, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %37, align 1, !tbaa !2449
  %239 = lshr i32 %224, 31
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %40, align 1, !tbaa !2450
  %241 = lshr i32 %221, 31
  %242 = lshr i32 %223, 31
  %243 = xor i32 %242, %241
  %244 = xor i32 %239, %241
  %245 = add nuw nsw i32 %244, %243
  %246 = icmp eq i32 %245, 2
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %46, align 1, !tbaa !2451
  %248 = icmp ne i8 %240, 0
  %249 = xor i1 %248, %246
  %.v26 = select i1 %249, i64 16, i64 252
  %250 = add i64 %216, %.v26
  store i64 %250, i64* %PC, align 8, !tbaa !2428
  br i1 %249, label %block_400dca, label %block_400eb6

block_400d59:                                     ; preds = %block_400d26, %block_400d53
  %251 = phi i64 [ %664, %block_400d26 ], [ %.pre25, %block_400d53 ]
  %252 = phi i64 [ %702, %block_400d26 ], [ %.pre24, %block_400d53 ]
  %253 = add i64 %251, -28
  %254 = add i64 %252, 8
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = add i32 %256, 1
  %258 = zext i32 %257 to i64
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = icmp eq i32 %256, -1
  %260 = icmp eq i32 %257, 0
  %261 = or i1 %259, %260
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %22, align 1, !tbaa !2433
  %263 = and i32 %257, 255
  %264 = tail call i32 @llvm.ctpop.i32(i32 %263) #9
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  store i8 %267, i8* %29, align 1, !tbaa !2447
  %268 = xor i32 %257, %256
  %269 = lshr i32 %268, 4
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  store i8 %271, i8* %34, align 1, !tbaa !2448
  %272 = zext i1 %260 to i8
  store i8 %272, i8* %37, align 1, !tbaa !2449
  %273 = lshr i32 %257, 31
  %274 = trunc i32 %273 to i8
  store i8 %274, i8* %40, align 1, !tbaa !2450
  %275 = lshr i32 %256, 31
  %276 = xor i32 %273, %275
  %277 = add nuw nsw i32 %276, %273
  %278 = icmp eq i32 %277, 2
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %46, align 1, !tbaa !2451
  %280 = add i64 %252, 14
  store i64 %280, i64* %PC, align 8
  store i32 %257, i32* %255, align 4
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, -81
  store i64 %282, i64* %PC, align 8, !tbaa !2428
  br label %block_400d16

block_400d53:                                     ; preds = %block_400d26
  %283 = add i64 %702, 3
  store i64 %283, i64* %PC, align 8
  %284 = load i32, i32* %668, align 4
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = add i64 %702, 6
  store i64 %286, i64* %PC, align 8
  store i32 %284, i32* %673, align 4
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i64, i64* %RBP, align 8
  br label %block_400d59

block_400f88:                                     ; preds = %block_400f38
  %287 = add i64 %424, -8
  %288 = add i64 %457, 4
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %RSI, align 8, !tbaa !2428
  %291 = add i64 %424, -56
  %292 = add i64 %457, 9
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to double*
  %294 = load double, double* %293, align 8
  %295 = add i32 %430, -1
  %296 = zext i32 %295 to i64
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = icmp eq i32 %430, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %22, align 1, !tbaa !2433
  %299 = and i32 %295, 255
  %300 = tail call i32 @llvm.ctpop.i32(i32 %299) #9
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  store i8 %303, i8* %29, align 1, !tbaa !2447
  %304 = xor i32 %295, %430
  %305 = lshr i32 %304, 4
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  store i8 %307, i8* %34, align 1, !tbaa !2448
  %308 = icmp eq i32 %295, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %37, align 1, !tbaa !2449
  %310 = lshr i32 %295, 31
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %40, align 1, !tbaa !2450
  %312 = xor i32 %310, %449
  %313 = add nuw nsw i32 %312, %449
  %314 = icmp eq i32 %313, 2
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %46, align 1, !tbaa !2451
  %316 = sitofp i32 %295 to double
  store double %316, double* %50, align 1, !tbaa !2452
  %317 = fdiv double %294, %316
  store double %317, double* %347, align 1, !tbaa !2452
  store i64 0, i64* %47, align 1, !tbaa !2452
  %318 = add i64 %424, -120
  %319 = add i64 %457, 31
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  store i64 %290, i64* %320, align 8
  %321 = load i64, i64* %PC, align 8
  %322 = add i64 %321, -2295
  %323 = add i64 %321, 5
  %324 = load i64, i64* %RSP, align 8, !tbaa !2428
  %325 = add i64 %324, -8
  %326 = inttoptr i64 %325 to i64*
  store i64 %323, i64* %326, align 8
  store i64 %325, i64* %RSP, align 8, !tbaa !2428
  store i64 %322, i64* %PC, align 8, !tbaa !2428
  %327 = tail call fastcc %struct.Memory* @ext_6208f8_exp(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %328 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 242), i64* %RDI, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -120
  %331 = add i64 %328, 14
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i64*
  %333 = load i64, i64* %332, align 8
  store i64 %333, i64* %RSI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %334 = add i64 %328, -2236
  %335 = add i64 %328, 21
  %336 = load i64, i64* %RSP, align 8, !tbaa !2428
  %337 = add i64 %336, -8
  %338 = inttoptr i64 %337 to i64*
  store i64 %335, i64* %338, align 8
  store i64 %337, i64* %RSP, align 8, !tbaa !2428
  store i64 %334, i64* %PC, align 8, !tbaa !2428
  %339 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %327)
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -124
  %342 = load i32, i32* %EAX, align 4
  %343 = load i64, i64* %PC, align 8
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %345, align 4
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_400fc4

block_400eb6:                                     ; preds = %block_400dba
  %346 = add i64 %250, 7
  store i64 %346, i64* %PC, align 8
  store i32 0, i32* %220, align 4
  %347 = bitcast [32 x %union.VectorReg]* %9 to double*
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_400ebd

block_400ecd:                                     ; preds = %block_400ebd
  %348 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = add i64 %161, 12
  store i64 %349, i64* %PC, align 8
  %350 = load i32, i32* %131, align 4
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 4
  store i64 %352, i64* %RCX, align 8, !tbaa !2428
  %353 = add i64 %352, %348
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = icmp ult i64 %353, %348
  %355 = icmp ult i64 %353, %352
  %356 = or i1 %354, %355
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %22, align 1, !tbaa !2433
  %358 = trunc i64 %353 to i32
  %359 = and i32 %358, 255
  %360 = tail call i32 @llvm.ctpop.i32(i32 %359) #9
  %361 = trunc i32 %360 to i8
  %362 = and i8 %361, 1
  %363 = xor i8 %362, 1
  store i8 %363, i8* %29, align 1, !tbaa !2447
  %364 = xor i64 %352, %348
  %365 = xor i64 %364, %353
  %366 = lshr i64 %365, 4
  %367 = trunc i64 %366 to i8
  %368 = and i8 %367, 1
  store i8 %368, i8* %34, align 1, !tbaa !2448
  %369 = icmp eq i64 %353, 0
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %37, align 1, !tbaa !2449
  %371 = lshr i64 %353, 63
  %372 = trunc i64 %371 to i8
  store i8 %372, i8* %40, align 1, !tbaa !2450
  %373 = lshr i64 %348, 63
  %374 = lshr i64 %351, 59
  %375 = and i64 %374, 1
  %376 = xor i64 %371, %373
  %377 = xor i64 %371, %375
  %378 = add nuw nsw i64 %376, %377
  %379 = icmp eq i64 %378, 2
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %46, align 1, !tbaa !2451
  %381 = inttoptr i64 %353 to i64*
  %382 = add i64 %161, 23
  store i64 %382, i64* %PC, align 8
  %383 = load i64, i64* %381, align 8
  store i64 %383, i64* %108, align 1, !tbaa !2452
  store double 0.000000e+00, double* %519, align 1, !tbaa !2452
  %384 = add i64 %128, -48
  %385 = add i64 %161, 28
  store i64 %385, i64* %PC, align 8
  %.cast = bitcast i64 %383 to double
  %386 = inttoptr i64 %384 to double*
  %387 = load double, double* %386, align 8
  %388 = fadd double %.cast, %387
  store double %388, double* %347, align 1, !tbaa !2452
  store i64 0, i64* %47, align 1, !tbaa !2452
  %389 = add i64 %161, 33
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %384 to double*
  store double %388, double* %390, align 8
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -28
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i32*
  %396 = load i32, i32* %395, align 4
  %397 = add i32 %396, 1
  %398 = zext i32 %397 to i64
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = icmp eq i32 %396, -1
  %400 = icmp eq i32 %397, 0
  %401 = or i1 %399, %400
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %22, align 1, !tbaa !2433
  %403 = and i32 %397, 255
  %404 = tail call i32 @llvm.ctpop.i32(i32 %403) #9
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  store i8 %407, i8* %29, align 1, !tbaa !2447
  %408 = xor i32 %397, %396
  %409 = lshr i32 %408, 4
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  store i8 %411, i8* %34, align 1, !tbaa !2448
  %412 = zext i1 %400 to i8
  store i8 %412, i8* %37, align 1, !tbaa !2449
  %413 = lshr i32 %397, 31
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %40, align 1, !tbaa !2450
  %415 = lshr i32 %396, 31
  %416 = xor i32 %413, %415
  %417 = add nuw nsw i32 %416, %413
  %418 = icmp eq i32 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %46, align 1, !tbaa !2451
  %420 = add i64 %393, 9
  store i64 %420, i64* %PC, align 8
  store i32 %397, i32* %395, align 4
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, -58
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  br label %block_400ebd

block_400f38:                                     ; preds = %block_400f48, %block_400f31
  %423 = phi i64 [ %.pre22, %block_400f31 ], [ %613, %block_400f48 ]
  %MEMORY.3 = phi %struct.Memory* [ %175, %block_400f31 ], [ %571, %block_400f48 ]
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -28
  %426 = add i64 %423, 3
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i32*
  %428 = load i32, i32* %427, align 4
  %429 = zext i32 %428 to i64
  store i64 %429, i64* %RAX, align 8, !tbaa !2428
  %430 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %431 = sub i32 %428, %430
  %432 = icmp ult i32 %428, %430
  %433 = zext i1 %432 to i8
  store i8 %433, i8* %22, align 1, !tbaa !2433
  %434 = and i32 %431, 255
  %435 = tail call i32 @llvm.ctpop.i32(i32 %434) #9
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  store i8 %438, i8* %29, align 1, !tbaa !2447
  %439 = xor i32 %430, %428
  %440 = xor i32 %439, %431
  %441 = lshr i32 %440, 4
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  store i8 %443, i8* %34, align 1, !tbaa !2448
  %444 = icmp eq i32 %431, 0
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %37, align 1, !tbaa !2449
  %446 = lshr i32 %431, 31
  %447 = trunc i32 %446 to i8
  store i8 %447, i8* %40, align 1, !tbaa !2450
  %448 = lshr i32 %428, 31
  %449 = lshr i32 %430, 31
  %450 = xor i32 %449, %448
  %451 = xor i32 %446, %448
  %452 = add nuw nsw i32 %451, %450
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %46, align 1, !tbaa !2451
  %455 = icmp ne i8 %447, 0
  %456 = xor i1 %455, %453
  %.v29 = select i1 %456, i64 16, i64 80
  %457 = add i64 %423, %.v29
  store i64 %457, i64* %PC, align 8, !tbaa !2428
  br i1 %456, label %block_400f48, label %block_400f88

block_400d6c:                                     ; preds = %block_400d16
  %AL = bitcast %union.anon* %3 to i8*
  %R9D = bitcast %union.anon* %8 to i32*
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 55), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %458 = add i64 %719, -60
  %459 = add i64 %752, 23
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %458 to i32*
  %461 = load i32, i32* %460, align 4
  %462 = add i32 %461, -12
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = icmp ult i32 %461, 12
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %22, align 1, !tbaa !2433
  %466 = and i32 %462, 255
  %467 = tail call i32 @llvm.ctpop.i32(i32 %466) #9
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  store i8 %470, i8* %29, align 1, !tbaa !2447
  %471 = xor i32 %462, %461
  %472 = lshr i32 %471, 4
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  store i8 %474, i8* %34, align 1, !tbaa !2448
  %475 = icmp eq i32 %462, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %37, align 1, !tbaa !2449
  %477 = lshr i32 %462, 31
  %478 = trunc i32 %477 to i8
  store i8 %478, i8* %40, align 1, !tbaa !2450
  %479 = lshr i32 %461, 31
  %480 = xor i32 %477, %479
  %481 = add nuw nsw i32 %480, %479
  %482 = icmp eq i32 %481, 2
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %46, align 1, !tbaa !2451
  store i64 %463, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %484 = add i64 %752, -1660
  %485 = add i64 %752, 35
  %486 = load i64, i64* %RSP, align 8, !tbaa !2428
  %487 = add i64 %486, -8
  %488 = inttoptr i64 %487 to i64*
  store i64 %485, i64* %488, align 8
  store i64 %487, i64* %RSP, align 8, !tbaa !2428
  store i64 %484, i64* %PC, align 8, !tbaa !2428
  %489 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %490 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 117), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RDX, align 8, !tbaa !2428
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -60
  %493 = add i64 %490, 23
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RSI, align 8, !tbaa !2428
  %497 = add i64 %491, -68
  %498 = load i32, i32* %EAX, align 4
  %499 = add i64 %490, 26
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %497 to i32*
  store i32 %498, i32* %500, align 4
  %501 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %502 = add i64 %501, -1721
  %503 = add i64 %501, 7
  %504 = load i64, i64* %RSP, align 8, !tbaa !2428
  %505 = add i64 %504, -8
  %506 = inttoptr i64 %505 to i64*
  store i64 %503, i64* %506, align 8
  store i64 %505, i64* %RSP, align 8, !tbaa !2428
  store i64 %502, i64* %PC, align 8, !tbaa !2428
  %507 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %489)
  %508 = load i64, i64* %RBP, align 8
  %509 = add i64 %508, -28
  %510 = load i64, i64* %PC, align 8
  %511 = add i64 %510, 7
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %509 to i32*
  store i32 0, i32* %512, align 4
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -72
  %515 = load i32, i32* %EAX, align 4
  %516 = load i64, i64* %PC, align 8
  %517 = add i64 %516, 3
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %514 to i32*
  store i32 %515, i32* %518, align 4
  %519 = bitcast i64* %47 to double*
  %520 = bitcast i64* %96 to double*
  %521 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_400dba

block_400f31:                                     ; preds = %block_400f27
  %522 = add i64 %703, -28
  %523 = add i64 %717, 7
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %522 to i32*
  store i32 1, i32* %524, align 4
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_400f38

block_400f48:                                     ; preds = %block_400f38
  %525 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = add i64 %457, 12
  store i64 %526, i64* %PC, align 8
  %527 = load i32, i32* %427, align 4
  %528 = sext i32 %527 to i64
  %529 = shl nsw i64 %528, 4
  store i64 %529, i64* %RCX, align 8, !tbaa !2428
  %530 = add i64 %529, %525
  store i64 %530, i64* %RAX, align 8, !tbaa !2428
  %531 = icmp ult i64 %530, %525
  %532 = icmp ult i64 %530, %529
  %533 = or i1 %531, %532
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %22, align 1, !tbaa !2433
  %535 = trunc i64 %530 to i32
  %536 = and i32 %535, 255
  %537 = tail call i32 @llvm.ctpop.i32(i32 %536) #9
  %538 = trunc i32 %537 to i8
  %539 = and i8 %538, 1
  %540 = xor i8 %539, 1
  store i8 %540, i8* %29, align 1, !tbaa !2447
  %541 = xor i64 %529, %525
  %542 = xor i64 %541, %530
  %543 = lshr i64 %542, 4
  %544 = trunc i64 %543 to i8
  %545 = and i8 %544, 1
  store i8 %545, i8* %34, align 1, !tbaa !2448
  %546 = icmp eq i64 %530, 0
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %37, align 1, !tbaa !2449
  %548 = lshr i64 %530, 63
  %549 = trunc i64 %548 to i8
  store i8 %549, i8* %40, align 1, !tbaa !2450
  %550 = lshr i64 %525, 63
  %551 = lshr i64 %528, 59
  %552 = and i64 %551, 1
  %553 = xor i64 %548, %550
  %554 = xor i64 %548, %552
  %555 = add nuw nsw i64 %553, %554
  %556 = icmp eq i64 %555, 2
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %46, align 1, !tbaa !2451
  %558 = inttoptr i64 %530 to i64*
  %559 = add i64 %457, 23
  store i64 %559, i64* %PC, align 8
  %560 = load i64, i64* %558, align 8
  store i64 %560, i64* %108, align 1, !tbaa !2452
  store double 0.000000e+00, double* %519, align 1, !tbaa !2452
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %561 = add i64 %457, 35
  store i64 %561, i64* %PC, align 8
  %562 = bitcast i64 %560 to double
  %563 = inttoptr i64 %525 to double*
  %564 = load double, double* %563, align 8
  %565 = fdiv double %562, %564
  store double %565, double* %347, align 1, !tbaa !2452
  store i64 0, i64* %47, align 1, !tbaa !2452
  %566 = add i64 %457, -2120
  %567 = add i64 %457, 40
  %568 = load i64, i64* %RSP, align 8, !tbaa !2428
  %569 = add i64 %568, -8
  %570 = inttoptr i64 %569 to i64*
  store i64 %567, i64* %570, align 8
  store i64 %569, i64* %RSP, align 8, !tbaa !2428
  store i64 %566, i64* %PC, align 8, !tbaa !2428
  %571 = tail call fastcc %struct.Memory* @ext_6208b8_log(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %572 = load i64, i64* %RBP, align 8
  %573 = add i64 %572, -56
  %574 = load i64, i64* %PC, align 8
  %575 = add i64 %574, 5
  store i64 %575, i64* %PC, align 8
  %576 = load double, double* %347, align 1
  %577 = inttoptr i64 %573 to double*
  %578 = load double, double* %577, align 8
  %579 = fadd double %576, %578
  store double %579, double* %347, align 1, !tbaa !2452
  %580 = add i64 %574, 10
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %573 to double*
  store double %579, double* %581, align 8
  %582 = load i64, i64* %RBP, align 8
  %583 = add i64 %582, -28
  %584 = load i64, i64* %PC, align 8
  %585 = add i64 %584, 3
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %583 to i32*
  %587 = load i32, i32* %586, align 4
  %588 = add i32 %587, 1
  %589 = zext i32 %588 to i64
  store i64 %589, i64* %RAX, align 8, !tbaa !2428
  %590 = icmp eq i32 %587, -1
  %591 = icmp eq i32 %588, 0
  %592 = or i1 %590, %591
  %593 = zext i1 %592 to i8
  store i8 %593, i8* %22, align 1, !tbaa !2433
  %594 = and i32 %588, 255
  %595 = tail call i32 @llvm.ctpop.i32(i32 %594) #9
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  store i8 %598, i8* %29, align 1, !tbaa !2447
  %599 = xor i32 %588, %587
  %600 = lshr i32 %599, 4
  %601 = trunc i32 %600 to i8
  %602 = and i8 %601, 1
  store i8 %602, i8* %34, align 1, !tbaa !2448
  %603 = zext i1 %591 to i8
  store i8 %603, i8* %37, align 1, !tbaa !2449
  %604 = lshr i32 %588, 31
  %605 = trunc i32 %604 to i8
  store i8 %605, i8* %40, align 1, !tbaa !2450
  %606 = lshr i32 %587, 31
  %607 = xor i32 %604, %606
  %608 = add nuw nsw i32 %607, %604
  %609 = icmp eq i32 %608, 2
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %46, align 1, !tbaa !2451
  %611 = add i64 %584, 9
  store i64 %611, i64* %PC, align 8
  store i32 %588, i32* %586, align 4
  %612 = load i64, i64* %PC, align 8
  %613 = add i64 %612, -75
  store i64 %613, i64* %PC, align 8, !tbaa !2428
  br label %block_400f38

block_400d26:                                     ; preds = %block_400d16
  %614 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = add i64 %752, 12
  store i64 %615, i64* %PC, align 8
  %616 = load i32, i32* %722, align 4
  %617 = sext i32 %616 to i64
  %618 = shl nsw i64 %617, 4
  store i64 %618, i64* %RCX, align 8, !tbaa !2428
  %619 = add i64 %618, %614
  store i64 %619, i64* %RAX, align 8, !tbaa !2428
  %620 = icmp ult i64 %619, %614
  %621 = icmp ult i64 %619, %618
  %622 = or i1 %620, %621
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %22, align 1, !tbaa !2433
  %624 = trunc i64 %619 to i32
  %625 = and i32 %624, 255
  %626 = tail call i32 @llvm.ctpop.i32(i32 %625) #9
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  %629 = xor i8 %628, 1
  store i8 %629, i8* %29, align 1, !tbaa !2447
  %630 = xor i64 %618, %614
  %631 = xor i64 %630, %619
  %632 = lshr i64 %631, 4
  %633 = trunc i64 %632 to i8
  %634 = and i8 %633, 1
  store i8 %634, i8* %34, align 1, !tbaa !2448
  %635 = icmp eq i64 %619, 0
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %37, align 1, !tbaa !2449
  %637 = lshr i64 %619, 63
  %638 = trunc i64 %637 to i8
  store i8 %638, i8* %40, align 1, !tbaa !2450
  %639 = lshr i64 %614, 63
  %640 = lshr i64 %617, 59
  %641 = and i64 %640, 1
  %642 = xor i64 %637, %639
  %643 = xor i64 %637, %641
  %644 = add nuw nsw i64 %642, %643
  %645 = icmp eq i64 %644, 2
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %46, align 1, !tbaa !2451
  %647 = add i64 %619, 8
  %648 = add i64 %752, 23
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i64*
  %650 = load i64, i64* %649, align 8
  store i64 %650, i64* %RDI, align 8, !tbaa !2428
  %651 = add i64 %752, -1606
  %652 = add i64 %752, 28
  %653 = load i64, i64* %RSP, align 8, !tbaa !2428
  %654 = add i64 %653, -8
  %655 = inttoptr i64 %654 to i64*
  store i64 %652, i64* %655, align 8
  store i64 %654, i64* %RSP, align 8, !tbaa !2428
  store i64 %651, i64* %PC, align 8, !tbaa !2428
  %656 = tail call fastcc %struct.Memory* @ext_4006e0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %657 = load i32, i32* %EAX, align 4
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC, align 8
  store i64 %658, i64* %RDX, align 8, !tbaa !2428
  %660 = load i64, i64* %RBP, align 8
  %661 = add i64 %660, -64
  %662 = add i64 %659, 5
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i32*
  store i32 %657, i32* %663, align 4
  %664 = load i64, i64* %RBP, align 8
  %665 = add i64 %664, -64
  %666 = load i64, i64* %PC, align 8
  %667 = add i64 %666, 3
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %665 to i32*
  %669 = load i32, i32* %668, align 4
  %670 = zext i32 %669 to i64
  store i64 %670, i64* %RDX, align 8, !tbaa !2428
  %671 = add i64 %664, -60
  %672 = add i64 %666, 6
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = sub i32 %669, %674
  %676 = icmp ult i32 %669, %674
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %22, align 1, !tbaa !2433
  %678 = and i32 %675, 255
  %679 = tail call i32 @llvm.ctpop.i32(i32 %678) #9
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  store i8 %682, i8* %29, align 1, !tbaa !2447
  %683 = xor i32 %674, %669
  %684 = xor i32 %683, %675
  %685 = lshr i32 %684, 4
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  store i8 %687, i8* %34, align 1, !tbaa !2448
  %688 = icmp eq i32 %675, 0
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %37, align 1, !tbaa !2449
  %690 = lshr i32 %675, 31
  %691 = trunc i32 %690 to i8
  store i8 %691, i8* %40, align 1, !tbaa !2450
  %692 = lshr i32 %669, 31
  %693 = lshr i32 %674, 31
  %694 = xor i32 %693, %692
  %695 = xor i32 %690, %692
  %696 = add nuw nsw i32 %695, %694
  %697 = icmp eq i32 %696, 2
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %46, align 1, !tbaa !2451
  %699 = icmp ne i8 %691, 0
  %700 = xor i1 %699, %697
  %701 = or i1 %688, %700
  %.v30 = select i1 %701, i64 18, i64 12
  %702 = add i64 %666, %.v30
  store i64 %702, i64* %PC, align 8, !tbaa !2428
  br i1 %701, label %block_400d59, label %block_400d53

block_400f27:                                     ; preds = %block_400efc
  %703 = load i64, i64* %RBP, align 8
  %704 = add i64 %703, -24
  %705 = add i64 %215, 4
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i32*
  %707 = load i32, i32* %706, align 4
  store i8 0, i8* %22, align 1, !tbaa !2433
  %708 = and i32 %707, 255
  %709 = tail call i32 @llvm.ctpop.i32(i32 %708) #9
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = xor i8 %711, 1
  store i8 %712, i8* %29, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %713 = icmp eq i32 %707, 0
  %714 = zext i1 %713 to i8
  store i8 %714, i8* %37, align 1, !tbaa !2449
  %715 = lshr i32 %707, 31
  %716 = trunc i32 %715 to i8
  store i8 %716, i8* %40, align 1, !tbaa !2450
  store i8 0, i8* %46, align 1, !tbaa !2451
  %.v28 = select i1 %713, i64 157, i64 10
  %717 = add i64 %215, %.v28
  store i64 %717, i64* %PC, align 8, !tbaa !2428
  br i1 %713, label %block_400fc4, label %block_400f31

block_400d16:                                     ; preds = %block_400d59, %block_400cc0
  %718 = phi i64 [ %.pre, %block_400cc0 ], [ %282, %block_400d59 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_400cc0 ], [ %656, %block_400d59 ]
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -28
  %721 = add i64 %718, 3
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to i32*
  %723 = load i32, i32* %722, align 4
  %724 = zext i32 %723 to i64
  store i64 %724, i64* %RAX, align 8, !tbaa !2428
  %725 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %726 = sub i32 %723, %725
  %727 = icmp ult i32 %723, %725
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %22, align 1, !tbaa !2433
  %729 = and i32 %726, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #9
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %29, align 1, !tbaa !2447
  %734 = xor i32 %725, %723
  %735 = xor i32 %734, %726
  %736 = lshr i32 %735, 4
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  store i8 %738, i8* %34, align 1, !tbaa !2448
  %739 = icmp eq i32 %726, 0
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %37, align 1, !tbaa !2449
  %741 = lshr i32 %726, 31
  %742 = trunc i32 %741 to i8
  store i8 %742, i8* %40, align 1, !tbaa !2450
  %743 = lshr i32 %723, 31
  %744 = lshr i32 %725, 31
  %745 = xor i32 %744, %743
  %746 = xor i32 %741, %743
  %747 = add nuw nsw i32 %746, %745
  %748 = icmp eq i32 %747, 2
  %749 = zext i1 %748 to i8
  store i8 %749, i8* %46, align 1, !tbaa !2451
  %750 = icmp ne i8 %742, 0
  %751 = xor i1 %750, %748
  %.v = select i1 %751, i64 16, i64 86
  %752 = add i64 %718, %.v
  store i64 %752, i64* %PC, align 8, !tbaa !2428
  br i1 %751, label %block_400d26, label %block_400d6c

block_400dca:                                     ; preds = %block_400dba
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 160), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 159), i64* %RCX, align 8, !tbaa !2428
  %753 = add i64 %250, 23
  store i64 %753, i64* %PC, align 8
  %754 = load i32, i32* %220, align 4
  %755 = zext i32 %754 to i64
  store i64 %755, i64* %RSI, align 8, !tbaa !2428
  %756 = add i64 %217, -60
  %757 = add i64 %250, 27
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %756 to i32*
  %759 = load i32, i32* %758, align 4
  %760 = sext i32 %759 to i64
  store i64 %760, i64* %RAX, align 8, !tbaa !2428
  %761 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %761, i64* %RDX, align 8, !tbaa !2428
  %762 = add i64 %250, 39
  store i64 %762, i64* %PC, align 8
  %763 = load i32, i32* %220, align 4
  %764 = sext i32 %763 to i64
  %765 = shl nsw i64 %764, 4
  store i64 %765, i64* %R8, align 8, !tbaa !2428
  %766 = add i64 %765, %761
  store i64 %766, i64* %RDX, align 8, !tbaa !2428
  %767 = icmp ult i64 %766, %761
  %768 = icmp ult i64 %766, %765
  %769 = or i1 %767, %768
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %22, align 1, !tbaa !2433
  %771 = trunc i64 %766 to i32
  %772 = and i32 %771, 255
  %773 = tail call i32 @llvm.ctpop.i32(i32 %772) #9
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = xor i8 %775, 1
  store i8 %776, i8* %29, align 1, !tbaa !2447
  %777 = xor i64 %765, %761
  %778 = xor i64 %777, %766
  %779 = lshr i64 %778, 4
  %780 = trunc i64 %779 to i8
  %781 = and i8 %780, 1
  store i8 %781, i8* %34, align 1, !tbaa !2448
  %782 = icmp eq i64 %766, 0
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %37, align 1, !tbaa !2449
  %784 = lshr i64 %766, 63
  %785 = trunc i64 %784 to i8
  store i8 %785, i8* %40, align 1, !tbaa !2450
  %786 = lshr i64 %761, 63
  %787 = lshr i64 %764, 59
  %788 = and i64 %787, 1
  %789 = xor i64 %784, %786
  %790 = xor i64 %784, %788
  %791 = add nuw nsw i64 %789, %790
  %792 = icmp eq i64 %791, 2
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %46, align 1, !tbaa !2451
  %794 = add i64 %766, 8
  %795 = add i64 %250, 50
  store i64 %795, i64* %PC, align 8
  %796 = inttoptr i64 %794 to i64*
  %797 = load i64, i64* %796, align 8
  store i64 %797, i64* %RDX, align 8, !tbaa !2428
  %798 = add i64 %217, -80
  %799 = add i64 %250, 54
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i64*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 160), i64* %800, align 8
  %801 = load i64, i64* %RDX, align 8
  %802 = load i64, i64* %PC, align 8
  store i64 %801, i64* %RDI, align 8, !tbaa !2428
  %803 = load i64, i64* %RBP, align 8
  %804 = add i64 %803, -88
  %805 = load i64, i64* %RAX, align 8
  %806 = add i64 %802, 7
  store i64 %806, i64* %PC, align 8
  %807 = inttoptr i64 %804 to i64*
  store i64 %805, i64* %807, align 8
  %808 = load i64, i64* %RBP, align 8
  %809 = add i64 %808, -96
  %810 = load i64, i64* %RCX, align 8
  %811 = load i64, i64* %PC, align 8
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC, align 8
  %813 = inttoptr i64 %809 to i64*
  store i64 %810, i64* %813, align 8
  %814 = load i64, i64* %RBP, align 8
  %815 = add i64 %814, -100
  %816 = load i32, i32* %ESI, align 4
  %817 = load i64, i64* %PC, align 8
  %818 = add i64 %817, 3
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %815 to i32*
  store i32 %816, i32* %819, align 4
  %820 = load i64, i64* %PC, align 8
  %821 = add i64 %820, -1838
  %822 = add i64 %820, 5
  %823 = load i64, i64* %RSP, align 8, !tbaa !2428
  %824 = add i64 %823, -8
  %825 = inttoptr i64 %824 to i64*
  store i64 %822, i64* %825, align 8
  store i64 %824, i64* %RSP, align 8, !tbaa !2428
  store i64 %821, i64* %PC, align 8, !tbaa !2428
  %826 = tail call fastcc %struct.Memory* @ext_4006e0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %827 = load i64, i64* %RBP, align 8
  %828 = add i64 %827, -88
  %829 = load i64, i64* %PC, align 8
  %830 = add i64 %829, 4
  store i64 %830, i64* %PC, align 8
  %831 = inttoptr i64 %828 to i64*
  %832 = load i64, i64* %831, align 8
  %833 = load i64, i64* %RAX, align 8
  %834 = sub i64 %832, %833
  store i64 %834, i64* %RCX, align 8, !tbaa !2428
  %835 = icmp ult i64 %832, %833
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %22, align 1, !tbaa !2433
  %837 = trunc i64 %834 to i32
  %838 = and i32 %837, 255
  %839 = tail call i32 @llvm.ctpop.i32(i32 %838) #9
  %840 = trunc i32 %839 to i8
  %841 = and i8 %840, 1
  %842 = xor i8 %841, 1
  store i8 %842, i8* %29, align 1, !tbaa !2447
  %843 = xor i64 %833, %832
  %844 = xor i64 %843, %834
  %845 = lshr i64 %844, 4
  %846 = trunc i64 %845 to i8
  %847 = and i8 %846, 1
  store i8 %847, i8* %34, align 1, !tbaa !2448
  %848 = icmp eq i64 %834, 0
  %849 = zext i1 %848 to i8
  store i8 %849, i8* %37, align 1, !tbaa !2449
  %850 = lshr i64 %834, 63
  %851 = trunc i64 %850 to i8
  store i8 %851, i8* %40, align 1, !tbaa !2450
  %852 = lshr i64 %832, 63
  %853 = lshr i64 %833, 63
  %854 = xor i64 %853, %852
  %855 = xor i64 %850, %852
  %856 = add nuw nsw i64 %855, %854
  %857 = icmp eq i64 %856, 2
  %858 = zext i1 %857 to i8
  store i8 %858, i8* %46, align 1, !tbaa !2451
  %859 = and i64 %834, 4294967295
  store i64 %859, i64* %RSI, align 8, !tbaa !2428
  %860 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = add i64 %827, -28
  %862 = add i64 %829, 21
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = sext i32 %864 to i64
  %866 = shl nsw i64 %865, 4
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = add i64 %866, %860
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = icmp ult i64 %867, %860
  %869 = icmp ult i64 %867, %866
  %870 = or i1 %868, %869
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %22, align 1, !tbaa !2433
  %872 = trunc i64 %867 to i32
  %873 = and i32 %872, 255
  %874 = tail call i32 @llvm.ctpop.i32(i32 %873) #9
  %875 = trunc i32 %874 to i8
  %876 = and i8 %875, 1
  %877 = xor i8 %876, 1
  store i8 %877, i8* %29, align 1, !tbaa !2447
  %878 = xor i64 %866, %860
  %879 = xor i64 %878, %867
  %880 = lshr i64 %879, 4
  %881 = trunc i64 %880 to i8
  %882 = and i8 %881, 1
  store i8 %882, i8* %34, align 1, !tbaa !2448
  %883 = icmp eq i64 %867, 0
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %37, align 1, !tbaa !2449
  %885 = lshr i64 %867, 63
  %886 = trunc i64 %885 to i8
  store i8 %886, i8* %40, align 1, !tbaa !2450
  %887 = lshr i64 %860, 63
  %888 = lshr i64 %865, 59
  %889 = and i64 %888, 1
  %890 = xor i64 %885, %887
  %891 = xor i64 %885, %889
  %892 = add nuw nsw i64 %890, %891
  %893 = icmp eq i64 %892, 2
  %894 = zext i1 %893 to i8
  store i8 %894, i8* %46, align 1, !tbaa !2451
  %895 = add i64 %867, 8
  %896 = add i64 %829, 32
  store i64 %896, i64* %PC, align 8
  %897 = inttoptr i64 %895 to i64*
  %898 = load i64, i64* %897, align 8
  store i64 %898, i64* %R8, align 8, !tbaa !2428
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %899 = load i64, i64* %RBP, align 8
  %900 = add i64 %899, -28
  %901 = add i64 %829, 44
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i32*
  %903 = load i32, i32* %902, align 4
  %904 = sext i32 %903 to i64
  %905 = shl nsw i64 %904, 4
  store i64 %905, i64* %RCX, align 8, !tbaa !2428
  %906 = add i64 %905, %860
  store i64 %906, i64* %RAX, align 8, !tbaa !2428
  %907 = icmp ult i64 %906, %860
  %908 = icmp ult i64 %906, %905
  %909 = or i1 %907, %908
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %22, align 1, !tbaa !2433
  %911 = trunc i64 %906 to i32
  %912 = and i32 %911, 255
  %913 = tail call i32 @llvm.ctpop.i32(i32 %912) #9
  %914 = trunc i32 %913 to i8
  %915 = and i8 %914, 1
  %916 = xor i8 %915, 1
  store i8 %916, i8* %29, align 1, !tbaa !2447
  %917 = xor i64 %905, %860
  %918 = xor i64 %917, %906
  %919 = lshr i64 %918, 4
  %920 = trunc i64 %919 to i8
  %921 = and i8 %920, 1
  store i8 %921, i8* %34, align 1, !tbaa !2448
  %922 = icmp eq i64 %906, 0
  %923 = zext i1 %922 to i8
  store i8 %923, i8* %37, align 1, !tbaa !2449
  %924 = lshr i64 %906, 63
  %925 = trunc i64 %924 to i8
  store i8 %925, i8* %40, align 1, !tbaa !2450
  %926 = lshr i64 %904, 59
  %927 = and i64 %926, 1
  %928 = xor i64 %924, %887
  %929 = xor i64 %924, %927
  %930 = add nuw nsw i64 %928, %929
  %931 = icmp eq i64 %930, 2
  %932 = zext i1 %931 to i8
  store i8 %932, i8* %46, align 1, !tbaa !2451
  %933 = inttoptr i64 %906 to i64*
  %934 = add i64 %829, 55
  store i64 %934, i64* %PC, align 8
  %935 = load i64, i64* %933, align 8
  store i64 %935, i64* %108, align 1, !tbaa !2452
  store double 0.000000e+00, double* %519, align 1, !tbaa !2452
  %936 = add i64 %899, -40
  %937 = add i64 %829, 60
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i64*
  %939 = load i64, i64* %938, align 8
  store i64 %939, i64* %51, align 1, !tbaa !2452
  store double 0.000000e+00, double* %53, align 1, !tbaa !2452
  %940 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %940, i64* %RAX, align 8, !tbaa !2428
  %941 = add i64 %829, 72
  store i64 %941, i64* %PC, align 8
  %942 = load i32, i32* %902, align 4
  %943 = sext i32 %942 to i64
  %944 = shl nsw i64 %943, 4
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %945 = add i64 %944, %940
  store i64 %945, i64* %RAX, align 8, !tbaa !2428
  %946 = icmp ult i64 %945, %940
  %947 = icmp ult i64 %945, %944
  %948 = or i1 %946, %947
  %949 = zext i1 %948 to i8
  store i8 %949, i8* %22, align 1, !tbaa !2433
  %950 = trunc i64 %945 to i32
  %951 = and i32 %950, 255
  %952 = tail call i32 @llvm.ctpop.i32(i32 %951) #9
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  %955 = xor i8 %954, 1
  store i8 %955, i8* %29, align 1, !tbaa !2447
  %956 = xor i64 %944, %940
  %957 = xor i64 %956, %945
  %958 = lshr i64 %957, 4
  %959 = trunc i64 %958 to i8
  %960 = and i8 %959, 1
  store i8 %960, i8* %34, align 1, !tbaa !2448
  %961 = icmp eq i64 %945, 0
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %37, align 1, !tbaa !2449
  %963 = lshr i64 %945, 63
  %964 = trunc i64 %963 to i8
  store i8 %964, i8* %40, align 1, !tbaa !2450
  %965 = lshr i64 %940, 63
  %966 = lshr i64 %943, 59
  %967 = and i64 %966, 1
  %968 = xor i64 %963, %965
  %969 = xor i64 %963, %967
  %970 = add nuw nsw i64 %968, %969
  %971 = icmp eq i64 %970, 2
  %972 = zext i1 %971 to i8
  store i8 %972, i8* %46, align 1, !tbaa !2451
  %973 = inttoptr i64 %945 to double*
  %974 = add i64 %829, 83
  store i64 %974, i64* %PC, align 8
  %975 = bitcast i64 %939 to double
  %976 = load double, double* %973, align 8
  %977 = fdiv double %975, %976
  store double %977, double* %50, align 1, !tbaa !2452
  store i64 0, i64* %52, align 1, !tbaa !2452
  store i64 %940, i64* %RAX, align 8, !tbaa !2428
  %978 = load i64, i64* %RBP, align 8
  %979 = add i64 %978, -28
  %980 = add i64 %829, 95
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = sext i32 %982 to i64
  %984 = shl nsw i64 %983, 4
  store i64 %984, i64* %RCX, align 8, !tbaa !2428
  %985 = add i64 %984, %940
  store i64 %985, i64* %RAX, align 8, !tbaa !2428
  %986 = icmp ult i64 %985, %940
  %987 = icmp ult i64 %985, %984
  %988 = or i1 %986, %987
  %989 = zext i1 %988 to i8
  store i8 %989, i8* %22, align 1, !tbaa !2433
  %990 = trunc i64 %985 to i32
  %991 = and i32 %990, 255
  %992 = tail call i32 @llvm.ctpop.i32(i32 %991) #9
  %993 = trunc i32 %992 to i8
  %994 = and i8 %993, 1
  %995 = xor i8 %994, 1
  store i8 %995, i8* %29, align 1, !tbaa !2447
  %996 = xor i64 %984, %940
  %997 = xor i64 %996, %985
  %998 = lshr i64 %997, 4
  %999 = trunc i64 %998 to i8
  %1000 = and i8 %999, 1
  store i8 %1000, i8* %34, align 1, !tbaa !2448
  %1001 = icmp eq i64 %985, 0
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %37, align 1, !tbaa !2449
  %1003 = lshr i64 %985, 63
  %1004 = trunc i64 %1003 to i8
  store i8 %1004, i8* %40, align 1, !tbaa !2450
  %1005 = lshr i64 %983, 59
  %1006 = and i64 %1005, 1
  %1007 = xor i64 %1003, %965
  %1008 = xor i64 %1003, %1006
  %1009 = add nuw nsw i64 %1007, %1008
  %1010 = icmp eq i64 %1009, 2
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %46, align 1, !tbaa !2451
  %1012 = inttoptr i64 %985 to i64*
  %1013 = add i64 %829, 106
  store i64 %1013, i64* %PC, align 8
  %1014 = load i64, i64* %1012, align 8
  store i64 %1014, i64* %102, align 1, !tbaa !2452
  store double 0.000000e+00, double* %520, align 1, !tbaa !2452
  %1015 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %1015, i64* %RAX, align 8, !tbaa !2428
  %1016 = add i64 %829, 118
  store i64 %1016, i64* %PC, align 8
  %1017 = bitcast i64 %1014 to double
  %1018 = inttoptr i64 %1015 to double*
  %1019 = load double, double* %1018, align 8
  %1020 = fdiv double %1017, %1019
  store double %1020, double* %89, align 1, !tbaa !2452
  store i64 0, i64* %96, align 1, !tbaa !2452
  %1021 = add i64 %978, -80
  %1022 = add i64 %829, 122
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1021 to i64*
  %1024 = load i64, i64* %1023, align 8
  store i64 %1024, i64* %RDI, align 8, !tbaa !2428
  %1025 = add i64 %978, -100
  %1026 = add i64 %829, 126
  store i64 %1026, i64* %PC, align 8
  %1027 = inttoptr i64 %1025 to i32*
  %1028 = load i32, i32* %1027, align 4
  %1029 = zext i32 %1028 to i64
  store i64 %1029, i64* %521, align 8, !tbaa !2428
  %1030 = add i64 %978, -104
  %1031 = load i32, i32* %ESI, align 4
  %1032 = add i64 %829, 129
  store i64 %1032, i64* %PC, align 8
  %1033 = inttoptr i64 %1030 to i32*
  store i32 %1031, i32* %1033, align 4
  %1034 = load i32, i32* %R9D, align 4
  %1035 = zext i32 %1034 to i64
  %1036 = load i64, i64* %PC, align 8
  store i64 %1035, i64* %RSI, align 8, !tbaa !2428
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %1037, -104
  %1039 = add i64 %1036, 6
  store i64 %1039, i64* %PC, align 8
  %1040 = inttoptr i64 %1038 to i32*
  %1041 = load i32, i32* %1040, align 4
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RDX, align 8, !tbaa !2428
  %1043 = add i64 %1037, -96
  %1044 = add i64 %1036, 10
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1043 to i64*
  %1046 = load i64, i64* %1045, align 8
  store i64 %1046, i64* %RCX, align 8, !tbaa !2428
  store i8 3, i8* %AL, align 1, !tbaa !2432
  %1047 = add i64 %1036, -1956
  %1048 = add i64 %1036, 17
  %1049 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1050 = add i64 %1049, -8
  %1051 = inttoptr i64 %1050 to i64*
  store i64 %1048, i64* %1051, align 8
  store i64 %1050, i64* %RSP, align 8, !tbaa !2428
  store i64 %1047, i64* %PC, align 8, !tbaa !2428
  %1052 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %826)
  %1053 = load i64, i64* %RBP, align 8
  %1054 = add i64 %1053, -108
  %1055 = load i32, i32* %EAX, align 4
  %1056 = load i64, i64* %PC, align 8
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC, align 8
  %1058 = inttoptr i64 %1054 to i32*
  store i32 %1055, i32* %1058, align 4
  %1059 = load i64, i64* %RBP, align 8
  %1060 = add i64 %1059, -28
  %1061 = load i64, i64* %PC, align 8
  %1062 = add i64 %1061, 3
  store i64 %1062, i64* %PC, align 8
  %1063 = inttoptr i64 %1060 to i32*
  %1064 = load i32, i32* %1063, align 4
  %1065 = add i32 %1064, 1
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = icmp eq i32 %1064, -1
  %1068 = icmp eq i32 %1065, 0
  %1069 = or i1 %1067, %1068
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %22, align 1, !tbaa !2433
  %1071 = and i32 %1065, 255
  %1072 = tail call i32 @llvm.ctpop.i32(i32 %1071) #9
  %1073 = trunc i32 %1072 to i8
  %1074 = and i8 %1073, 1
  %1075 = xor i8 %1074, 1
  store i8 %1075, i8* %29, align 1, !tbaa !2447
  %1076 = xor i32 %1065, %1064
  %1077 = lshr i32 %1076, 4
  %1078 = trunc i32 %1077 to i8
  %1079 = and i8 %1078, 1
  store i8 %1079, i8* %34, align 1, !tbaa !2448
  %1080 = zext i1 %1068 to i8
  store i8 %1080, i8* %37, align 1, !tbaa !2449
  %1081 = lshr i32 %1065, 31
  %1082 = trunc i32 %1081 to i8
  store i8 %1082, i8* %40, align 1, !tbaa !2450
  %1083 = lshr i32 %1064, 31
  %1084 = xor i32 %1081, %1083
  %1085 = add nuw nsw i32 %1084, %1081
  %1086 = icmp eq i32 %1085, 2
  %1087 = zext i1 %1086 to i8
  store i8 %1087, i8* %46, align 1, !tbaa !2451
  %1088 = add i64 %1061, 9
  store i64 %1088, i64* %PC, align 8
  store i32 %1065, i32* %1063, align 4
  %1089 = load i64, i64* %PC, align 8
  %1090 = add i64 %1089, -247
  store i64 %1090, i64* %PC, align 8, !tbaa !2428
  br label %block_400dba

block_400fc4:                                     ; preds = %block_400f27, %block_400f88, %block_400efc
  %1091 = phi i64 [ %205, %block_400efc ], [ %717, %block_400f27 ], [ %.pre23, %block_400f88 ]
  %MEMORY.5 = phi %struct.Memory* [ %175, %block_400efc ], [ %175, %block_400f27 ], [ %339, %block_400f88 ]
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %1092 = load i64, i64* %RSP, align 8
  %1093 = add i64 %1092, 128
  store i64 %1093, i64* %RSP, align 8, !tbaa !2428
  %1094 = icmp ugt i64 %1092, -129
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %22, align 1, !tbaa !2433
  %1096 = trunc i64 %1093 to i32
  %1097 = and i32 %1096, 255
  %1098 = tail call i32 @llvm.ctpop.i32(i32 %1097) #9
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = xor i8 %1100, 1
  store i8 %1101, i8* %29, align 1, !tbaa !2447
  %1102 = xor i64 %1093, %1092
  %1103 = lshr i64 %1102, 4
  %1104 = trunc i64 %1103 to i8
  %1105 = and i8 %1104, 1
  store i8 %1105, i8* %34, align 1, !tbaa !2448
  %1106 = icmp eq i64 %1093, 0
  %1107 = zext i1 %1106 to i8
  store i8 %1107, i8* %37, align 1, !tbaa !2449
  %1108 = lshr i64 %1093, 63
  %1109 = trunc i64 %1108 to i8
  store i8 %1109, i8* %40, align 1, !tbaa !2450
  %1110 = lshr i64 %1092, 63
  %1111 = xor i64 %1108, %1110
  %1112 = add nuw nsw i64 %1111, %1108
  %1113 = icmp eq i64 %1112, 2
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %46, align 1, !tbaa !2451
  %1115 = add i64 %1091, 19
  store i64 %1115, i64* %PC, align 8
  %1116 = add i64 %1092, 136
  %1117 = inttoptr i64 %1093 to i64*
  %1118 = load i64, i64* %1117, align 8
  store i64 %1118, i64* %RBP, align 8, !tbaa !2428
  store i64 %1116, i64* %RSP, align 8, !tbaa !2428
  %1119 = add i64 %1091, 20
  store i64 %1119, i64* %PC, align 8
  %1120 = inttoptr i64 %1116 to i64*
  %1121 = load i64, i64* %1120, align 8
  store i64 %1121, i64* %PC, align 8, !tbaa !2428
  %1122 = add i64 %1092, 144
  store i64 %1122, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_404730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4020d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -88
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 80
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4020f0

block_402100:                                     ; preds = %block_4020f0
  %68 = add i64 %198, -8
  %69 = add i64 %231, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %198, -48
  %73 = add i64 %231, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -16
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %75, -56
  %82 = add i64 %77, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 %80, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -24
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = add i64 %84, -64
  %91 = add i64 %86, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 %89, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -48
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = add i64 %93, -56
  %100 = add i64 %95, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RSI, align 8, !tbaa !2428
  %103 = add i64 %93, -64
  %104 = add i64 %95, 13
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %52, align 1, !tbaa !2452
  store double 0.000000e+00, double* %67, align 1, !tbaa !2452
  %107 = add i64 %95, 15416
  %108 = add i64 %95, 18
  %109 = load i64, i64* %RSP, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* nonnull %0, i64 %107, %struct.Memory* %MEMORY.0)
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -72
  %115 = load i64, i64* %PC, align 8
  store i64 %114, i64* %RDI, align 8, !tbaa !2428
  %116 = add i64 %115, 9
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %52, align 1
  %118 = inttoptr i64 %114 to i64*
  store i64 %117, i64* %118, align 8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 15517
  %121 = add i64 %119, 5
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %120, %struct.Memory* %112)
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 15544
  %128 = add i64 %126, 5
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %127, %struct.Memory* %125)
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -36
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 3
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = add i32 %138, 1
  %140 = zext i32 %139 to i64
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = icmp eq i32 %138, -1
  %142 = icmp eq i32 %139, 0
  %143 = or i1 %141, %142
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %12, align 1, !tbaa !2433
  %145 = and i32 %139, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #9
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %19, align 1, !tbaa !2447
  %150 = xor i32 %139, %138
  %151 = lshr i32 %150, 4
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %25, align 1, !tbaa !2448
  %154 = zext i1 %142 to i8
  store i8 %154, i8* %28, align 1, !tbaa !2449
  %155 = lshr i32 %139, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %31, align 1, !tbaa !2450
  %157 = lshr i32 %138, 31
  %158 = xor i32 %155, %157
  %159 = add nuw nsw i32 %158, %155
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %37, align 1, !tbaa !2451
  %162 = add i64 %135, 9
  store i64 %162, i64* %PC, align 8
  store i32 %139, i32* %137, align 4
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -86
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  br label %block_4020f0

block_40214b:                                     ; preds = %block_4020f0
  %165 = load i64, i64* %RSP, align 8
  %166 = add i64 %165, 80
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -81
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %12, align 1, !tbaa !2433
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i64 %165, 16
  %176 = xor i64 %175, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %25, align 1, !tbaa !2448
  %180 = icmp eq i64 %166, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %28, align 1, !tbaa !2449
  %182 = lshr i64 %166, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %31, align 1, !tbaa !2450
  %184 = lshr i64 %165, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %182
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %37, align 1, !tbaa !2451
  %189 = add i64 %231, 5
  store i64 %189, i64* %PC, align 8
  %190 = add i64 %165, 88
  %191 = inttoptr i64 %166 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RBP, align 8, !tbaa !2428
  store i64 %190, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %231, 6
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %190 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  %196 = add i64 %165, 96
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4020f0:                                     ; preds = %block_402100, %block_4020d0
  %197 = phi i64 [ %.pre, %block_4020d0 ], [ %164, %block_402100 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4020d0 ], [ %132, %block_402100 ]
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -36
  %200 = add i64 %197, 3
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %205 = sub i32 %202, %204
  %206 = icmp ult i32 %202, %204
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %12, align 1, !tbaa !2433
  %208 = and i32 %205, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #9
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2447
  %213 = xor i32 %204, %202
  %214 = xor i32 %213, %205
  %215 = lshr i32 %214, 4
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %25, align 1, !tbaa !2448
  %218 = icmp eq i32 %205, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %28, align 1, !tbaa !2449
  %220 = lshr i32 %205, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %31, align 1, !tbaa !2450
  %222 = lshr i32 %202, 31
  %223 = lshr i32 %204, 31
  %224 = xor i32 %223, %222
  %225 = xor i32 %220, %222
  %226 = add nuw nsw i32 %225, %224
  %227 = icmp eq i32 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2451
  %229 = icmp ne i8 %221, 0
  %230 = xor i1 %229, %227
  %.v = select i1 %230, i64 16, i64 91
  %231 = add i64 %197, %.v
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br i1 %230, label %block_402100, label %block_40214b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406734__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406734:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2433
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2447
  store i8 %10, i8* %11, align 1, !tbaa !2448
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2449
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2450
  store i8 %19, i8* %20, align 1, !tbaa !2451
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402758

block_4027a1:                                     ; preds = %block_402758
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402768:                                     ; preds = %block_402758
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 6296
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 11159
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 6602
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402758

block_402758:                                     ; preds = %block_402768, %block_402730
  %190 = phi i64 [ %.pre, %block_402730 ], [ %189, %block_402768 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402730 ], [ %157, %block_402768 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402768, label %block_4027a1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406630:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4035e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 18
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %47, -8
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = sub i64 %52, %56
  %58 = lshr i64 %57, 2
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = ashr i64 %57, 3
  store i64 %61, i64* %RSI, align 8, !tbaa !2428
  store i8 %60, i8* %12, align 1, !tbaa !2432
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #9
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %19, align 1, !tbaa !2432
  store i8 0, i8* %24, align 1, !tbaa !2432
  %68 = icmp eq i64 %61, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %27, align 1, !tbaa !2432
  %70 = lshr i64 %61, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %30, align 1, !tbaa !2432
  store i8 0, i8* %36, align 1, !tbaa !2432
  %72 = add i64 %47, -32
  %73 = add i64 %49, 19
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %61, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = ashr i64 %80, 63
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX, align 8
  %83 = add i64 %77, 9
  store i64 %83, i64* %PC, align 8
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = zext i64 %81 to i128
  %87 = shl nuw i128 %86, 64
  %88 = zext i64 %80 to i128
  %89 = or i128 %87, %88
  %90 = zext i64 %82 to i128
  %91 = or i128 %85, %90
  %92 = sdiv i128 %89, %91
  %93 = trunc i128 %92 to i64
  %94 = and i128 %92, 18446744073709551615
  %95 = sext i64 %93 to i128
  %96 = and i128 %95, -18446744073709551616
  %97 = or i128 %96, %94
  %98 = icmp eq i128 %92, %97
  br i1 %98, label %101, label %99

; <label>:99:                                     ; preds = %block_4035e0
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %83, %struct.Memory* %2) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:101:                                    ; preds = %block_4035e0
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %103 = srem i128 %89, %91
  %104 = trunc i128 %103 to i64
  store i64 %93, i64* %102, align 8, !tbaa !2428
  store i64 %104, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %101, %99
  %105 = phi i64 [ %.pre7, %99 ], [ %75, %101 ]
  %106 = phi i64 [ %.pre6, %99 ], [ %83, %101 ]
  %107 = phi i64 [ %.pre, %99 ], [ %93, %101 ]
  %108 = phi %struct.Memory* [ %100, %99 ], [ %2, %101 ]
  %109 = add i64 %107, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %107, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %12, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %19, align 1, !tbaa !2447
  %118 = xor i64 %109, %107
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %24, align 1, !tbaa !2448
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %27, align 1, !tbaa !2449
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %30, align 1, !tbaa !2450
  %126 = lshr i64 %107, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %36, align 1, !tbaa !2451
  %131 = add i64 %105, -24
  %132 = add i64 %106, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  store i64 %109, i64* %133, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %136 = bitcast i64* %135 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40361b

block_40367c:                                     ; preds = %block_403671
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %137 = add i64 %233, -8
  %138 = add i64 %262, 8
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RCX, align 8, !tbaa !2428
  %141 = add i64 %262, 12
  store i64 %141, i64* %PC, align 8
  %142 = load i64, i64* %236, align 8
  store i64 %142, i64* %RSI, align 8, !tbaa !2428
  %143 = shl i64 %142, 3
  %144 = add i64 %140, %143
  %145 = add i64 %262, 16
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RCX, align 8, !tbaa !2428
  %148 = add i64 %233, -56
  %149 = add i64 %262, 20
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  store i64 %147, i64* %150, align 8
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -8
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RCX, align 8, !tbaa !2428
  %157 = add i64 %153, 8
  store i64 %157, i64* %PC, align 8
  %158 = load i64, i64* %155, align 8
  store i64 %158, i64* %RSI, align 8, !tbaa !2428
  %159 = add i64 %151, -24
  %160 = add i64 %153, 12
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %159 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RDI, align 8, !tbaa !2428
  %163 = inttoptr i64 %156 to i64*
  %164 = add i64 %153, 15
  store i64 %164, i64* %PC, align 8
  %165 = load i64, i64* %163, align 8
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = shl i64 %162, 3
  %167 = add i64 %166, %158
  %168 = add i64 %153, 19
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %169, align 8
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -24
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %RDI, align 8, !tbaa !2428
  %176 = add i64 %170, -8
  %177 = add i64 %172, 8
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RSI, align 8, !tbaa !2428
  %180 = add i64 %170, -56
  %181 = add i64 %172, 12
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = add i64 %170, -64
  %185 = add i64 %172, 16
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i64*
  store i64 %183, i64* %186, align 8
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -64
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 5
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %134, align 1, !tbaa !2452
  store double 0.000000e+00, double* %136, align 1, !tbaa !2452
  %193 = add i64 %189, 269
  %194 = add i64 %189, 10
  %195 = load i64, i64* %RSP, align 8, !tbaa !2428
  %196 = add i64 %195, -8
  %197 = inttoptr i64 %196 to i64*
  store i64 %194, i64* %197, align 8
  store i64 %196, i64* %RSP, align 8, !tbaa !2428
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %198 = tail call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* nonnull %0, i64 %193, %struct.Memory* %MEMORY.0)
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -24
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, -1
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = icmp ne i64 %204, 0
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %12, align 1, !tbaa !2433
  %208 = trunc i64 %205 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #9
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %19, align 1, !tbaa !2447
  %214 = xor i64 %204, 16
  %215 = xor i64 %214, %205
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %24, align 1, !tbaa !2448
  %219 = icmp eq i64 %205, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %27, align 1, !tbaa !2449
  %221 = lshr i64 %205, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %30, align 1, !tbaa !2450
  %223 = lshr i64 %204, 63
  %224 = xor i64 %221, %223
  %225 = xor i64 %221, 1
  %226 = add nuw nsw i64 %224, %225
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %36, align 1, !tbaa !2451
  %229 = add i64 %201, 12
  store i64 %229, i64* %PC, align 8
  store i64 %205, i64* %203, align 8
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, -88
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br label %block_403671

block_403671:                                     ; preds = %block_403665, %block_40367c
  %232 = phi i64 [ %.pre9, %block_403665 ], [ %231, %block_40367c ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_403665 ], [ %198, %block_40367c ]
  %233 = load i64, i64* %RBP, align 8
  %234 = add i64 %233, -24
  %235 = add i64 %232, 5
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %237, -1
  %239 = icmp eq i64 %237, 0
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %12, align 1, !tbaa !2433
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 255
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #9
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  store i8 %246, i8* %19, align 1, !tbaa !2447
  %247 = xor i64 %238, %237
  %248 = lshr i64 %247, 4
  %249 = trunc i64 %248 to i8
  %250 = and i8 %249, 1
  store i8 %250, i8* %24, align 1, !tbaa !2448
  %251 = icmp eq i64 %238, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %27, align 1, !tbaa !2449
  %253 = lshr i64 %238, 63
  %254 = trunc i64 %253 to i8
  store i8 %254, i8* %30, align 1, !tbaa !2450
  %255 = lshr i64 %237, 63
  %256 = xor i64 %253, %255
  %257 = add nuw nsw i64 %256, %255
  %258 = icmp eq i64 %257, 2
  %259 = zext i1 %258 to i8
  store i8 %259, i8* %36, align 1, !tbaa !2451
  %260 = icmp ne i8 %254, 0
  %261 = xor i1 %260, %258
  %.v10 = select i1 %261, i64 93, i64 11
  %262 = add i64 %232, %.v10
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br i1 %261, label %block_4036ce, label %block_40367c

block_4036ce:                                     ; preds = %block_403671
  %263 = load i64, i64* %RSP, align 8
  %264 = add i64 %263, 64
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  %265 = icmp ugt i64 %263, -65
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %12, align 1, !tbaa !2433
  %267 = trunc i64 %264 to i32
  %268 = and i32 %267, 255
  %269 = tail call i32 @llvm.ctpop.i32(i32 %268) #9
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  store i8 %272, i8* %19, align 1, !tbaa !2447
  %273 = xor i64 %264, %263
  %274 = lshr i64 %273, 4
  %275 = trunc i64 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %24, align 1, !tbaa !2448
  %277 = icmp eq i64 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %27, align 1, !tbaa !2449
  %279 = lshr i64 %264, 63
  %280 = trunc i64 %279 to i8
  store i8 %280, i8* %30, align 1, !tbaa !2450
  %281 = lshr i64 %263, 63
  %282 = xor i64 %279, %281
  %283 = add nuw nsw i64 %282, %279
  %284 = icmp eq i64 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %36, align 1, !tbaa !2451
  %286 = add i64 %262, 5
  store i64 %286, i64* %PC, align 8
  %287 = add i64 %263, 72
  %288 = inttoptr i64 %264 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RBP, align 8, !tbaa !2428
  store i64 %287, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %262, 6
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %293 = add i64 %263, 80
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40361b:                                     ; preds = %block_403626, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %294 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %391, %block_403626 ]
  %MEMORY.1 = phi %struct.Memory* [ %108, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %358, %block_403626 ]
  %295 = load i64, i64* %RBP, align 8
  %296 = add i64 %295, -24
  %297 = add i64 %294, 5
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %300 = trunc i64 %299 to i32
  %301 = and i32 %300, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #9
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  %306 = icmp eq i64 %299, 0
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %27, align 1, !tbaa !2449
  %308 = lshr i64 %299, 63
  %309 = trunc i64 %308 to i8
  store i8 %309, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  %310 = icmp ne i8 %309, 0
  %.v = select i1 %310, i64 69, i64 6
  %311 = add i64 %297, %.v
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  br i1 %310, label %block_403665, label %block_403626

block_403626:                                     ; preds = %block_40361b
  %312 = add i64 %295, -8
  %313 = add i64 %311, 4
  store i64 %313, i64* %PC, align 8
  %314 = inttoptr i64 %312 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = add i64 %311, 8
  store i64 %316, i64* %PC, align 8
  %317 = load i64, i64* %298, align 8
  store i64 %317, i64* %RCX, align 8, !tbaa !2428
  %318 = shl i64 %317, 3
  %319 = add i64 %315, %318
  %320 = add i64 %311, 12
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %295, -40
  %324 = add i64 %311, 16
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  store i64 %322, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -32
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = add i64 %326, -8
  %333 = add i64 %328, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RSI, align 8, !tbaa !2428
  %336 = add i64 %326, -24
  %337 = add i64 %328, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RDX, align 8, !tbaa !2428
  %340 = add i64 %326, -40
  %341 = add i64 %328, 16
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  %343 = load i64, i64* %342, align 8
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %326, -48
  %345 = add i64 %328, 20
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i64*
  store i64 %343, i64* %346, align 8
  %347 = load i64, i64* %RBP, align 8
  %348 = add i64 %347, -48
  %349 = load i64, i64* %PC, align 8
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %348 to i64*
  %352 = load i64, i64* %351, align 8
  store i64 %352, i64* %134, align 1, !tbaa !2452
  store double 0.000000e+00, double* %136, align 1, !tbaa !2452
  %353 = add i64 %349, 374
  %354 = add i64 %349, 10
  %355 = load i64, i64* %RSP, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %354, i64* %357, align 8
  store i64 %356, i64* %RSP, align 8, !tbaa !2428
  store i64 %353, i64* %PC, align 8, !tbaa !2428
  %358 = tail call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* nonnull %0, i64 %353, %struct.Memory* %MEMORY.1)
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -24
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = add i64 %364, -1
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = icmp ne i64 %364, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %12, align 1, !tbaa !2433
  %368 = trunc i64 %365 to i32
  %369 = and i32 %368, 255
  %370 = tail call i32 @llvm.ctpop.i32(i32 %369) #9
  %371 = trunc i32 %370 to i8
  %372 = and i8 %371, 1
  %373 = xor i8 %372, 1
  store i8 %373, i8* %19, align 1, !tbaa !2447
  %374 = xor i64 %364, 16
  %375 = xor i64 %374, %365
  %376 = lshr i64 %375, 4
  %377 = trunc i64 %376 to i8
  %378 = and i8 %377, 1
  store i8 %378, i8* %24, align 1, !tbaa !2448
  %379 = icmp eq i64 %365, 0
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %27, align 1, !tbaa !2449
  %381 = lshr i64 %365, 63
  %382 = trunc i64 %381 to i8
  store i8 %382, i8* %30, align 1, !tbaa !2450
  %383 = lshr i64 %364, 63
  %384 = xor i64 %381, %383
  %385 = xor i64 %381, 1
  %386 = add nuw nsw i64 %384, %385
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %36, align 1, !tbaa !2451
  %389 = add i64 %361, 12
  store i64 %389, i64* %PC, align 8
  store i64 %365, i64* %363, align 8
  %390 = load i64, i64* %PC, align 8
  %391 = add i64 %390, -69
  store i64 %391, i64* %PC, align 8, !tbaa !2428
  br label %block_40361b

block_403665:                                     ; preds = %block_40361b
  %392 = add i64 %295, -32
  %393 = add i64 %311, 4
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %392 to i64*
  %395 = load i64, i64* %394, align 8
  %396 = add i64 %395, -1
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp eq i64 %395, 0
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %12, align 1, !tbaa !2433
  %399 = trunc i64 %396 to i32
  %400 = and i32 %399, 255
  %401 = tail call i32 @llvm.ctpop.i32(i32 %400) #9
  %402 = trunc i32 %401 to i8
  %403 = and i8 %402, 1
  %404 = xor i8 %403, 1
  store i8 %404, i8* %19, align 1, !tbaa !2447
  %405 = xor i64 %396, %395
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  store i8 %408, i8* %24, align 1, !tbaa !2448
  %409 = icmp eq i64 %396, 0
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %27, align 1, !tbaa !2449
  %411 = lshr i64 %396, 63
  %412 = trunc i64 %411 to i8
  store i8 %412, i8* %30, align 1, !tbaa !2450
  %413 = lshr i64 %395, 63
  %414 = xor i64 %411, %413
  %415 = add nuw nsw i64 %414, %413
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %36, align 1, !tbaa !2451
  %418 = add i64 %311, 12
  store i64 %418, i64* %PC, align 8
  store i64 %396, i64* %298, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_403671
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4041a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2433
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #9
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2447
  %72 = xor i64 %63, %62
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2448
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2449
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2450
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2451
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4041c4

block_40421a:                                     ; preds = %block_404208, %block_404216
  %86 = phi i64 [ %.pre14, %block_404216 ], [ %206, %block_404208 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_404216 ], [ %190, %block_404208 ]
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -1
  %89 = add i64 %86, 3
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i8*
  %91 = load i8, i8* %90, align 1
  %92 = and i8 %91, 1
  %93 = zext i8 %92 to i64
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = load i64, i64* %RSP, align 8
  %95 = add i64 %94, 32
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -33
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %13, align 1, !tbaa !2433
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #9
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %20, align 1, !tbaa !2447
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2448
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2449
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2450
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2451
  %117 = add i64 %86, 13
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %94, 40
  %119 = inttoptr i64 %95 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RBP, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %86, 14
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %118 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = add i64 %94, 48
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404216:                                     ; preds = %block_4041c4
  %125 = add i64 %208, -1
  %126 = add i64 %242, 4
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i8*
  store i8 1, i8* %127, align 1
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_40421a

block_4041d2:                                     ; preds = %block_4041c4
  %128 = add i64 %242, 4
  store i64 %128, i64* %PC, align 8
  %129 = load i64, i64* %211, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %129, 8
  store i64 %130, i64* %RCX, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -9
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %13, align 1, !tbaa !2433
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #9
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %20, align 1, !tbaa !2447
  %139 = xor i64 %130, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %25, align 1, !tbaa !2448
  %143 = icmp eq i64 %130, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !2449
  %145 = lshr i64 %130, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %31, align 1, !tbaa !2450
  %147 = lshr i64 %129, 63
  %148 = xor i64 %145, %147
  %149 = add nuw nsw i64 %148, %145
  %150 = icmp eq i64 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %37, align 1, !tbaa !2451
  %152 = add i64 %242, 15
  store i64 %152, i64* %PC, align 8
  store i64 %130, i64* %211, align 8
  %153 = load i64, i64* %RBP, align 8
  %154 = add i64 %153, -32
  %155 = load i64, i64* %PC, align 8
  %156 = add i64 %155, 4
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %154 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = add i64 %158, 8
  store i64 %159, i64* %RDX, align 8, !tbaa !2428
  %160 = icmp ugt i64 %158, -9
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %13, align 1, !tbaa !2433
  %162 = trunc i64 %159 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #9
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %20, align 1, !tbaa !2447
  %168 = xor i64 %159, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %25, align 1, !tbaa !2448
  %172 = icmp eq i64 %159, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %28, align 1, !tbaa !2449
  %174 = lshr i64 %159, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %31, align 1, !tbaa !2450
  %176 = lshr i64 %158, 63
  %177 = xor i64 %174, %176
  %178 = add nuw nsw i64 %177, %174
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %37, align 1, !tbaa !2451
  %181 = add i64 %155, 15
  store i64 %181, i64* %PC, align 8
  store i64 %159, i64* %157, align 8
  %182 = load i64, i64* %RAX, align 8
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = load i64, i64* %RCX, align 8
  store i64 %184, i64* %RSI, align 8, !tbaa !2428
  %185 = add i64 %183, -4000
  %186 = add i64 %183, 11
  %187 = load i64, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %186, i64* %189, align 8
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  store i64 %185, i64* %PC, align 8, !tbaa !2428
  %190 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %185, %struct.Memory* %MEMORY.1)
  %191 = load i8, i8* %AL, align 1
  %192 = load i64, i64* %PC, align 8
  %193 = and i8 %191, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %194 = zext i8 %193 to i32
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #9
  %196 = trunc i32 %195 to i8
  %197 = xor i8 %196, 1
  store i8 %197, i8* %20, align 1, !tbaa !2447
  %198 = xor i8 %193, 1
  store i8 %198, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %199 = icmp eq i8 %198, 0
  %.v15 = select i1 %199, i64 13, i64 8
  %200 = add i64 %192, %.v15
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  br i1 %199, label %block_404208, label %block_404203

block_404208:                                     ; preds = %block_4041d2
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -1
  %203 = add i64 %200, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i8*
  store i8 0, i8* %204, align 1
  %205 = load i64, i64* %PC, align 8
  %206 = add i64 %205, 14
  store i64 %206, i64* %PC, align 8, !tbaa !2428
  br label %block_40421a

block_4041c4:                                     ; preds = %block_404203, %block_4041a0
  %207 = phi i64 [ %.pre, %block_4041a0 ], [ %243, %block_404203 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4041a0 ], [ %190, %block_404203 ]
  %208 = load i64, i64* %RBP, align 8
  %209 = add i64 %208, -16
  %210 = add i64 %207, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %209 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %208, -24
  %214 = add i64 %207, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %212, %216
  %218 = icmp ult i64 %212, %216
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %13, align 1, !tbaa !2433
  %220 = trunc i64 %217 to i32
  %221 = and i32 %220, 255
  %222 = tail call i32 @llvm.ctpop.i32(i32 %221) #9
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  store i8 %225, i8* %20, align 1, !tbaa !2447
  %226 = xor i64 %216, %212
  %227 = xor i64 %226, %217
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %25, align 1, !tbaa !2448
  %231 = icmp eq i64 %217, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %28, align 1, !tbaa !2449
  %233 = lshr i64 %217, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %31, align 1, !tbaa !2450
  %235 = lshr i64 %212, 63
  %236 = lshr i64 %216, 63
  %237 = xor i64 %236, %235
  %238 = xor i64 %233, %235
  %239 = add nuw nsw i64 %238, %237
  %240 = icmp eq i64 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %37, align 1, !tbaa !2451
  %.v = select i1 %231, i64 82, i64 14
  %242 = add i64 %207, %.v
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  br i1 %231, label %block_404216, label %block_4041d2

block_404203:                                     ; preds = %block_4041d2
  %243 = add i64 %200, -63
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br label %block_4041c4
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406300:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4065a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b40_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 6328568, i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = add i64 %8, -6328568
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2432
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %13, align 1, !tbaa !2432
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2432
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2432
  store i8 0, i8* %16, align 1, !tbaa !2432
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %9, %.v
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_400b78, label %block_400b63

block_400b78:                                     ; preds = %block_400b63, %block_400b40
  %34 = phi i64 [ %44, %block_400b63 ], [ %33, %block_400b40 ]
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %RSP, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %40 = add i64 %34, 2
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b63:                                     ; preds = %block_400b40
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2433
  store i8 1, i8* %12, align 1, !tbaa !2447
  store i8 1, i8* %14, align 1, !tbaa !2449
  store i8 0, i8* %15, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2451
  store i8 0, i8* %13, align 1, !tbaa !2448
  %44 = add i64 %33, 21
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  br label %block_400b78
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406730___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401c10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404150:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #9
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_404190, label %block_404175

block_404175:                                     ; preds = %block_404150
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %76 = add i64 %73, -14981
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404190

block_404190:                                     ; preds = %block_404175, %block_404150
  %88 = phi i64 [ %73, %block_404150 ], [ %.pre, %block_404175 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404150 ], [ %81, %block_404175 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #9
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2447
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2448
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2449
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2450
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2451
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405f70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 48
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 86
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2433
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2448
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2449
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2450
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2451
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 269, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40573d, label %block_405649

block_40573d:                                     ; preds = %block_405715, %block_405620
  %87 = phi i64 [ %86, %block_405620 ], [ %.pre39, %block_405715 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405620 ], [ %316, %block_405715 ]
  %88 = load i64, i64* %RSP, align 8
  %89 = add i64 %88, 48
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %90 = icmp ugt i64 %88, -49
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %13, align 1, !tbaa !2433
  %92 = trunc i64 %89 to i32
  %93 = and i32 %92, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #9
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %20, align 1, !tbaa !2447
  %98 = xor i64 %88, 16
  %99 = xor i64 %98, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %26, align 1, !tbaa !2448
  %103 = icmp eq i64 %89, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %29, align 1, !tbaa !2449
  %105 = lshr i64 %89, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %32, align 1, !tbaa !2450
  %107 = lshr i64 %88, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %38, align 1, !tbaa !2451
  %112 = add i64 %87, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %88, 56
  %114 = inttoptr i64 %89 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %87, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %88, 64
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405693:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -32
  %122 = add i64 %427, 4
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = add i64 %120, -40
  %126 = add i64 %427, 8
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %124, %128
  %130 = icmp ult i64 %124, %128
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %13, align 1, !tbaa !2433
  %132 = trunc i64 %129 to i32
  %133 = and i32 %132, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #9
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %20, align 1, !tbaa !2447
  %138 = xor i64 %128, %124
  %139 = xor i64 %138, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %26, align 1, !tbaa !2448
  %143 = icmp eq i64 %129, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %29, align 1, !tbaa !2449
  %145 = lshr i64 %129, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %32, align 1, !tbaa !2450
  %147 = lshr i64 %124, 63
  %148 = lshr i64 %128, 63
  %149 = xor i64 %148, %147
  %150 = xor i64 %145, %147
  %151 = add nuw nsw i64 %150, %149
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %38, align 1, !tbaa !2451
  %.v41 = select i1 %130, i64 19, i64 14
  %154 = add i64 %427, %.v41
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br i1 %130, label %block_4056a6, label %block_4056a1

block_4056e6:                                     ; preds = %block_4056d3
  %155 = add i64 %457, 4
  store i64 %155, i64* %PC, align 8
  %156 = load i64, i64* %430, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %457, 8
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %325, align 1, !tbaa !2452
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %160 = add i64 %228, -48
  %161 = add i64 %457, 13
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  store i64 %159, i64* %162, align 8
  %163 = load i64, i64* %RBP, align 8
  %164 = add i64 %163, -32
  %165 = load i64, i64* %PC, align 8
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %164 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %165, 8
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %325, align 1, !tbaa !2452
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %172 = add i64 %163, -40
  %173 = add i64 %165, 12
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = add i64 %165, 16
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  store i64 %171, i64* %177, align 8
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -48
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %325, align 1, !tbaa !2452
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %184 = add i64 %178, -32
  %185 = add i64 %180, 9
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = add i64 %180, 13
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %183, i64* %189, align 8
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, -170
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  br label %block_405666

block_4056ab:                                     ; preds = %block_4056c2, %block_4056a6
  %192 = phi i64 [ %.pre36, %block_4056c2 ], [ %120, %block_4056a6 ]
  %.sink8 = phi i64 [ %482, %block_4056c2 ], [ %241, %block_4056a6 ]
  %MEMORY.1 = phi %struct.Memory* [ %230, %block_4056c2 ], [ %420, %block_4056a6 ]
  %193 = add i64 %192, -32
  %194 = add i64 %.sink8, 4
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = add i64 %.sink8, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %325, align 1, !tbaa !2452
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %200 = add i64 %192, -24
  %201 = add i64 %.sink8, 13
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %350, align 1, !tbaa !2452
  store double 0.000000e+00, double* %352, align 1, !tbaa !2452
  %204 = add i64 %.sink8, 17
  store i64 %204, i64* %PC, align 8
  %.cast = bitcast i64 %203 to double
  %205 = bitcast i64 %199 to double
  %206 = fcmp uno double %.cast, %205
  br i1 %206, label %207, label %217

; <label>:207:                                    ; preds = %block_4056ab
  %208 = fadd double %.cast, %205
  %209 = bitcast double %208 to i64
  %210 = and i64 %209, 9221120237041090560
  %211 = icmp eq i64 %210, 9218868437227405312
  %212 = and i64 %209, 2251799813685247
  %213 = icmp ne i64 %212, 0
  %214 = and i1 %211, %213
  br i1 %214, label %215, label %223

; <label>:215:                                    ; preds = %207
  %216 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %204, %struct.Memory* %MEMORY.1) #12
  %.pre37 = load i64, i64* %PC, align 8
  %.pre38 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:217:                                    ; preds = %block_4056ab
  %218 = fcmp ogt double %.cast, %205
  br i1 %218, label %223, label %219

; <label>:219:                                    ; preds = %217
  %220 = fcmp olt double %.cast, %205
  br i1 %220, label %223, label %221

; <label>:221:                                    ; preds = %219
  %222 = fcmp oeq double %.cast, %205
  br i1 %222, label %223, label %227

; <label>:223:                                    ; preds = %221, %219, %217, %207
  %224 = phi i8 [ 0, %217 ], [ 0, %219 ], [ 1, %221 ], [ 1, %207 ]
  %225 = phi i8 [ 0, %217 ], [ 0, %219 ], [ 0, %221 ], [ 1, %207 ]
  %226 = phi i8 [ 0, %217 ], [ 1, %219 ], [ 0, %221 ], [ 1, %207 ]
  store i8 %224, i8* %29, align 1, !tbaa !2432
  store i8 %225, i8* %20, align 1, !tbaa !2432
  store i8 %226, i8* %13, align 1, !tbaa !2432
  br label %227

; <label>:227:                                    ; preds = %223, %221
  store i8 0, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %32, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %227, %215
  %228 = phi i64 [ %.pre38, %215 ], [ %192, %227 ]
  %229 = phi i64 [ %.pre37, %215 ], [ %204, %227 ]
  %230 = phi %struct.Memory* [ %216, %215 ], [ %MEMORY.1, %227 ]
  %231 = load i8, i8* %13, align 1, !tbaa !2433
  %232 = load i8, i8* %29, align 1, !tbaa !2449
  %233 = or i8 %232, %231
  %234 = icmp ne i8 %233, 0
  %.v54 = select i1 %234, i64 23, i64 6
  %235 = add i64 %229, %.v54
  %236 = add i64 %228, -32
  %237 = add i64 %235, 4
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i64*
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %RAX, align 8, !tbaa !2428
  br i1 %234, label %block_4056d3, label %block_4056c2

block_4056e1:                                     ; preds = %block_4056d3
  %240 = add i64 %457, 52
  br label %block_405715

block_405666:                                     ; preds = %block_405649, %block_4056e6
  %.pre = phi i64 [ %.pre.pre, %block_405649 ], [ %191, %block_4056e6 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405649 ], [ %230, %block_4056e6 ]
  br label %block_40566b

block_4056a6:                                     ; preds = %block_405693
  %241 = add i64 %154, 5
  br label %block_4056ab

block_405715:                                     ; preds = %block_4056a1, %block_4056e1
  %242 = phi i64 [ %120, %block_4056a1 ], [ %228, %block_4056e1 ]
  %.sink4 = phi i64 [ %483, %block_4056a1 ], [ %240, %block_4056e1 ]
  %MEMORY.3 = phi %struct.Memory* [ %420, %block_4056a1 ], [ %230, %block_4056e1 ]
  %243 = add i64 %242, -8
  %244 = add i64 %.sink4, 4
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %RDI, align 8, !tbaa !2428
  %247 = add i64 %242, -40
  %248 = add i64 %.sink4, 8
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = add i64 %250, 8
  store i64 %251, i64* %RAX, align 8, !tbaa !2428
  %252 = icmp ugt i64 %250, -9
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %13, align 1, !tbaa !2433
  %254 = trunc i64 %251 to i32
  %255 = and i32 %254, 255
  %256 = tail call i32 @llvm.ctpop.i32(i32 %255) #9
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = xor i8 %258, 1
  store i8 %259, i8* %20, align 1, !tbaa !2447
  %260 = xor i64 %251, %250
  %261 = lshr i64 %260, 4
  %262 = trunc i64 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %26, align 1, !tbaa !2448
  %264 = icmp eq i64 %251, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %29, align 1, !tbaa !2449
  %266 = lshr i64 %251, 63
  %267 = trunc i64 %266 to i8
  store i8 %267, i8* %32, align 1, !tbaa !2450
  %268 = lshr i64 %250, 63
  %269 = xor i64 %266, %268
  %270 = add nuw nsw i64 %269, %266
  %271 = icmp eq i64 %270, 2
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %38, align 1, !tbaa !2451
  store i64 %251, i64* %RSI, align 8, !tbaa !2428
  %273 = add i64 %.sink4, -245
  %274 = add i64 %.sink4, 20
  %275 = load i64, i64* %RSP, align 8, !tbaa !2428
  %276 = add i64 %275, -8
  %277 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %277, align 8
  store i64 %276, i64* %RSP, align 8, !tbaa !2428
  store i64 %273, i64* %PC, align 8, !tbaa !2428
  %278 = tail call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* nonnull %0, i64 %273, %struct.Memory* %MEMORY.3)
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -40
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %284, 8
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = icmp ugt i64 %284, -9
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %13, align 1, !tbaa !2433
  %288 = trunc i64 %285 to i32
  %289 = and i32 %288, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #9
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %20, align 1, !tbaa !2447
  %294 = xor i64 %285, %284
  %295 = lshr i64 %294, 4
  %296 = trunc i64 %295 to i8
  %297 = and i8 %296, 1
  store i8 %297, i8* %26, align 1, !tbaa !2448
  %298 = icmp eq i64 %285, 0
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %29, align 1, !tbaa !2449
  %300 = lshr i64 %285, 63
  %301 = trunc i64 %300 to i8
  store i8 %301, i8* %32, align 1, !tbaa !2450
  %302 = lshr i64 %284, 63
  %303 = xor i64 %300, %302
  %304 = add nuw nsw i64 %303, %300
  %305 = icmp eq i64 %304, 2
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %38, align 1, !tbaa !2451
  %307 = add i64 %279, -16
  %308 = add i64 %281, 12
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RSI, align 8, !tbaa !2428
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %311 = add i64 %281, -265
  %312 = add i64 %281, 20
  %313 = load i64, i64* %RSP, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %312, i64* %315, align 8
  store i64 %314, i64* %RSP, align 8, !tbaa !2428
  store i64 %311, i64* %PC, align 8, !tbaa !2428
  %316 = tail call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* nonnull %0, i64 %311, %struct.Memory* %278)
  %.pre39 = load i64, i64* %PC, align 8
  br label %block_40573d

block_405649:                                     ; preds = %block_405620
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -8
  %319 = add i64 %86, 4
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = add i64 %86, 8
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %324, i64* %325, align 1, !tbaa !2452
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %327 = bitcast i64* %326 to double*
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %328 = add i64 %317, -24
  %329 = add i64 %86, 13
  store i64 %329, i64* %PC, align 8
  %330 = bitcast [32 x %union.VectorReg]* %3 to double*
  %331 = inttoptr i64 %328 to i64*
  store i64 %324, i64* %331, align 8
  %332 = load i64, i64* %RBP, align 8
  %333 = add i64 %332, -8
  %334 = load i64, i64* %PC, align 8
  %335 = add i64 %334, 4
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %333 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %337, i64* %RAX, align 8, !tbaa !2428
  %338 = add i64 %332, -32
  %339 = add i64 %334, 8
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i64*
  store i64 %337, i64* %340, align 8
  %341 = load i64, i64* %RBP, align 8
  %342 = add i64 %341, -16
  %343 = load i64, i64* %PC, align 8
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %342 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = add i64 %341, -40
  %348 = add i64 %343, 8
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %346, i64* %349, align 8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %352 = bitcast i64* %351 to double*
  %.pre.pre = load i64, i64* %PC, align 8
  br label %block_405666

block_40566b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_405666
  %353 = phi i64 [ %.pre, %block_405666 ], [ %422, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %.sink17 = phi i64 [ 5, %block_405666 ], [ -35, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_405666 ], [ %420, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %354 = add i64 %353, %.sink17
  %355 = load i64, i64* %RBP, align 8
  %356 = add i64 %355, -24
  %357 = add i64 %354, 5
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  %359 = load i64, i64* %358, align 8
  store i64 %359, i64* %325, align 1, !tbaa !2452
  store double 0.000000e+00, double* %327, align 1, !tbaa !2452
  %360 = add i64 %355, -40
  %361 = add i64 %354, 9
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %363, -8
  store i64 %364, i64* %RCX, align 8, !tbaa !2428
  %365 = icmp ugt i64 %363, 7
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %13, align 1, !tbaa !2433
  %367 = trunc i64 %364 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #9
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %20, align 1, !tbaa !2447
  %373 = xor i64 %363, 16
  %374 = xor i64 %373, %364
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %26, align 1, !tbaa !2448
  %378 = icmp eq i64 %364, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %29, align 1, !tbaa !2449
  %380 = lshr i64 %364, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %32, align 1, !tbaa !2450
  %382 = lshr i64 %363, 63
  %383 = xor i64 %380, %382
  %384 = xor i64 %380, 1
  %385 = add nuw nsw i64 %383, %384
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %38, align 1, !tbaa !2451
  %388 = add i64 %354, 20
  store i64 %388, i64* %PC, align 8
  store i64 %364, i64* %362, align 8
  %389 = load i64, i64* %RAX, align 8
  %390 = add i64 %389, -8
  %391 = load i64, i64* %PC, align 8
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC, align 8
  %393 = inttoptr i64 %390 to i64*
  %394 = load i64, i64* %393, align 8
  store i64 %394, i64* %350, align 1, !tbaa !2452
  store double 0.000000e+00, double* %352, align 1, !tbaa !2452
  %395 = add i64 %391, 9
  store i64 %395, i64* %PC, align 8
  %.cast27 = bitcast i64 %394 to double
  %396 = load double, double* %330, align 1
  %397 = fcmp uno double %.cast27, %396
  br i1 %397, label %398, label %408

; <label>:398:                                    ; preds = %block_40566b
  %399 = fadd double %.cast27, %396
  %400 = bitcast double %399 to i64
  %401 = and i64 %400, 9221120237041090560
  %402 = icmp eq i64 %401, 9218868437227405312
  %403 = and i64 %400, 2251799813685247
  %404 = icmp ne i64 %403, 0
  %405 = and i1 %402, %404
  br i1 %405, label %406, label %414

; <label>:406:                                    ; preds = %398
  %407 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %395, %struct.Memory* %MEMORY.4) #12
  %.pre35 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:408:                                    ; preds = %block_40566b
  %409 = fcmp ogt double %.cast27, %396
  br i1 %409, label %414, label %410

; <label>:410:                                    ; preds = %408
  %411 = fcmp olt double %.cast27, %396
  br i1 %411, label %414, label %412

; <label>:412:                                    ; preds = %410
  %413 = fcmp oeq double %.cast27, %396
  br i1 %413, label %414, label %418

; <label>:414:                                    ; preds = %412, %410, %408, %398
  %415 = phi i8 [ 0, %408 ], [ 0, %410 ], [ 1, %412 ], [ 1, %398 ]
  %416 = phi i8 [ 0, %408 ], [ 0, %410 ], [ 0, %412 ], [ 1, %398 ]
  %417 = phi i8 [ 0, %408 ], [ 1, %410 ], [ 0, %412 ], [ 1, %398 ]
  store i8 %415, i8* %29, align 1, !tbaa !2432
  store i8 %416, i8* %20, align 1, !tbaa !2432
  store i8 %417, i8* %13, align 1, !tbaa !2432
  br label %418

; <label>:418:                                    ; preds = %414, %412
  store i8 0, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %32, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %418, %406
  %419 = phi i64 [ %.pre35, %406 ], [ %395, %418 ]
  %420 = phi %struct.Memory* [ %407, %406 ], [ %MEMORY.4, %418 ]
  %421 = add i64 %419, 11
  %422 = add i64 %419, 6
  %423 = load i8, i8* %13, align 1, !tbaa !2433
  %424 = load i8, i8* %29, align 1, !tbaa !2449
  %425 = or i8 %424, %423
  %426 = icmp ne i8 %425, 0
  %427 = select i1 %426, i64 %421, i64 %422
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  br i1 %426, label %block_405693, label %block_40566b

block_4056d3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %428 = add i64 %228, -40
  %429 = add i64 %235, 8
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %428 to i64*
  %431 = load i64, i64* %430, align 8
  %432 = sub i64 %239, %431
  %433 = icmp ult i64 %239, %431
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %13, align 1, !tbaa !2433
  %435 = trunc i64 %432 to i32
  %436 = and i32 %435, 255
  %437 = tail call i32 @llvm.ctpop.i32(i32 %436) #9
  %438 = trunc i32 %437 to i8
  %439 = and i8 %438, 1
  %440 = xor i8 %439, 1
  store i8 %440, i8* %20, align 1, !tbaa !2447
  %441 = xor i64 %431, %239
  %442 = xor i64 %441, %432
  %443 = lshr i64 %442, 4
  %444 = trunc i64 %443 to i8
  %445 = and i8 %444, 1
  store i8 %445, i8* %26, align 1, !tbaa !2448
  %446 = icmp eq i64 %432, 0
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %29, align 1, !tbaa !2449
  %448 = lshr i64 %432, 63
  %449 = trunc i64 %448 to i8
  store i8 %449, i8* %32, align 1, !tbaa !2450
  %450 = lshr i64 %239, 63
  %451 = lshr i64 %431, 63
  %452 = xor i64 %451, %450
  %453 = xor i64 %448, %450
  %454 = add nuw nsw i64 %453, %452
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %38, align 1, !tbaa !2451
  %.v42 = select i1 %433, i64 19, i64 14
  %457 = add i64 %235, %.v42
  store i64 %457, i64* %PC, align 8, !tbaa !2428
  br i1 %433, label %block_4056e6, label %block_4056e1

block_4056c2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %458 = add i64 %239, 8
  store i64 %458, i64* %RAX, align 8, !tbaa !2428
  %459 = icmp ugt i64 %239, -9
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %13, align 1, !tbaa !2433
  %461 = trunc i64 %458 to i32
  %462 = and i32 %461, 255
  %463 = tail call i32 @llvm.ctpop.i32(i32 %462) #9
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  store i8 %466, i8* %20, align 1, !tbaa !2447
  %467 = xor i64 %458, %239
  %468 = lshr i64 %467, 4
  %469 = trunc i64 %468 to i8
  %470 = and i8 %469, 1
  store i8 %470, i8* %26, align 1, !tbaa !2448
  %471 = icmp eq i64 %458, 0
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %29, align 1, !tbaa !2449
  %473 = lshr i64 %458, 63
  %474 = trunc i64 %473 to i8
  store i8 %474, i8* %32, align 1, !tbaa !2450
  %475 = lshr i64 %239, 63
  %476 = xor i64 %473, %475
  %477 = add nuw nsw i64 %476, %473
  %478 = icmp eq i64 %477, 2
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %38, align 1, !tbaa !2451
  %480 = add i64 %235, 12
  store i64 %480, i64* %PC, align 8
  store i64 %458, i64* %238, align 8
  %481 = load i64, i64* %PC, align 8
  %482 = add i64 %481, -35
  %.pre36 = load i64, i64* %RBP, align 8
  br label %block_4056ab

block_4056a1:                                     ; preds = %block_405693
  %483 = add i64 %154, 116
  br label %block_405715
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400ad0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400ad0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2433
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2447
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2449
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2450
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2451
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2448
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2433
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2447
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2449
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2451
  store i8 0, i8* %8, align 1, !tbaa !2448
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_406730___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_4066c0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_608ff0__got_type, %seg_608ff0__got_type* @seg_608ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4009d0___cxx_global_var_init_18(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPb_type* @DVPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4639
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401ed0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 5
  store i64 %50, i64* %PC, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %52 = load i64, i64* %51, align 1
  %53 = inttoptr i64 %48 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401ef0

block_401f00:                                     ; preds = %block_401ef0
  %67 = add i64 %174, -8
  %68 = add i64 %207, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = add i64 %174, -48
  %72 = add i64 %207, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  store i64 %70, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -16
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %74, -56
  %81 = add i64 %76, 8
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 %79, i64* %82, align 8
  %83 = load i64, i64* %RBP, align 8
  %84 = add i64 %83, -24
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 5
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %51, align 1, !tbaa !2452
  store double 0.000000e+00, double* %66, align 1, !tbaa !2452
  %89 = add i64 %83, -48
  %90 = add i64 %85, 9
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %89 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %83, -56
  %94 = add i64 %85, 13
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RSI, align 8, !tbaa !2428
  %97 = add i64 %85, 17776
  %98 = add i64 %85, 18
  %99 = load i64, i64* %RSP, align 8, !tbaa !2428
  %100 = add i64 %99, -8
  %101 = inttoptr i64 %100 to i64*
  store i64 %98, i64* %101, align 8
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  %102 = tail call %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* nonnull %0, i64 %97, %struct.Memory* %MEMORY.0)
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 16078
  %105 = add i64 %103, 5
  %106 = load i64, i64* %RSP, align 8, !tbaa !2428
  %107 = add i64 %106, -8
  %108 = inttoptr i64 %107 to i64*
  store i64 %105, i64* %108, align 8
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  store i64 %104, i64* %PC, align 8, !tbaa !2428
  %109 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %104, %struct.Memory* %102)
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -36
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  %117 = zext i32 %116 to i64
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = icmp eq i32 %115, -1
  %119 = icmp eq i32 %116, 0
  %120 = or i1 %118, %119
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %12, align 1, !tbaa !2433
  %122 = and i32 %116, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #9
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %19, align 1, !tbaa !2447
  %127 = xor i32 %116, %115
  %128 = lshr i32 %127, 4
  %129 = trunc i32 %128 to i8
  %130 = and i8 %129, 1
  store i8 %130, i8* %24, align 1, !tbaa !2448
  %131 = zext i1 %119 to i8
  store i8 %131, i8* %27, align 1, !tbaa !2449
  %132 = lshr i32 %116, 31
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %30, align 1, !tbaa !2450
  %134 = lshr i32 %115, 31
  %135 = xor i32 %132, %134
  %136 = add nuw nsw i32 %135, %132
  %137 = icmp eq i32 %136, 2
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %36, align 1, !tbaa !2451
  %139 = add i64 %112, 9
  store i64 %139, i64* %PC, align 8
  store i32 %116, i32* %114, align 4
  %140 = load i64, i64* %PC, align 8
  %141 = add i64 %140, -64
  store i64 %141, i64* %PC, align 8, !tbaa !2428
  br label %block_401ef0

block_401f35:                                     ; preds = %block_401ef0
  %142 = load i64, i64* %RSP, align 8
  %143 = add i64 %142, 64
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %144 = icmp ugt i64 %142, -65
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %12, align 1, !tbaa !2433
  %146 = trunc i64 %143 to i32
  %147 = and i32 %146, 255
  %148 = tail call i32 @llvm.ctpop.i32(i32 %147) #9
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  store i8 %151, i8* %19, align 1, !tbaa !2447
  %152 = xor i64 %143, %142
  %153 = lshr i64 %152, 4
  %154 = trunc i64 %153 to i8
  %155 = and i8 %154, 1
  store i8 %155, i8* %24, align 1, !tbaa !2448
  %156 = icmp eq i64 %143, 0
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %27, align 1, !tbaa !2449
  %158 = lshr i64 %143, 63
  %159 = trunc i64 %158 to i8
  store i8 %159, i8* %30, align 1, !tbaa !2450
  %160 = lshr i64 %142, 63
  %161 = xor i64 %158, %160
  %162 = add nuw nsw i64 %161, %158
  %163 = icmp eq i64 %162, 2
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %36, align 1, !tbaa !2451
  %165 = add i64 %207, 5
  store i64 %165, i64* %PC, align 8
  %166 = add i64 %142, 72
  %167 = inttoptr i64 %143 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RBP, align 8, !tbaa !2428
  store i64 %166, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %207, 6
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %166 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %172 = add i64 %142, 80
  store i64 %172, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401ef0:                                     ; preds = %block_401f00, %block_401ed0
  %173 = phi i64 [ %.pre, %block_401ed0 ], [ %141, %block_401f00 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401ed0 ], [ %109, %block_401f00 ]
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -36
  %176 = add i64 %173, 3
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %181 = sub i32 %178, %180
  %182 = icmp ult i32 %178, %180
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %12, align 1, !tbaa !2433
  %184 = and i32 %181, 255
  %185 = tail call i32 @llvm.ctpop.i32(i32 %184) #9
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  store i8 %188, i8* %19, align 1, !tbaa !2447
  %189 = xor i32 %180, %178
  %190 = xor i32 %189, %181
  %191 = lshr i32 %190, 4
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  store i8 %193, i8* %24, align 1, !tbaa !2448
  %194 = icmp eq i32 %181, 0
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %27, align 1, !tbaa !2449
  %196 = lshr i32 %181, 31
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %30, align 1, !tbaa !2450
  %198 = lshr i32 %178, 31
  %199 = lshr i32 %180, 31
  %200 = xor i32 %199, %198
  %201 = xor i32 %196, %198
  %202 = add nuw nsw i32 %201, %200
  %203 = icmp eq i32 %202, 2
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %36, align 1, !tbaa !2451
  %205 = icmp ne i8 %197, 0
  %206 = xor i1 %205, %203
  %.v = select i1 %206, i64 16, i64 69
  %207 = add i64 %173, %.v
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_401f00, label %block_401f35
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403cf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2449
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2450
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4052e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2433
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #9
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2447
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %39, align 1, !tbaa !2448
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4061f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403ca0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2433
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2447
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %38, align 1, !tbaa !2448
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4060b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402ef0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2447
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_402f40, label %block_402f25

block_402f25:                                     ; preds = %block_402ef0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %95 = add i64 %92, -10293
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f40

block_402f40:                                     ; preds = %block_402f25, %block_402ef0
  %107 = phi i64 [ %92, %block_402ef0 ], [ %.pre, %block_402f25 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_402ef0 ], [ %100, %block_402f25 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2447
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2448
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2450
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2451
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4047d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDX, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 5
  store i64 %59, i64* %PC, align 8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %61 = load i64, i64* %60, align 1
  %62 = inttoptr i64 %57 to i64*
  store i64 %61, i64* %62, align 8
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -24
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = add i64 %63, -48
  %70 = add i64 %65, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -48
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = add i64 %77, 1
  %79 = lshr i64 %78, 63
  %80 = trunc i64 %79 to i8
  %81 = shl i64 %78, 1
  %82 = icmp slt i64 %78, 0
  %83 = icmp slt i64 %81, 0
  %84 = xor i1 %82, %83
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  store i8 %80, i8* %14, align 1, !tbaa !2432
  %85 = trunc i64 %81 to i32
  %86 = and i32 %85, 254
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %91 = icmp eq i64 %81, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %30, align 1, !tbaa !2432
  %93 = lshr i64 %78, 62
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %33, align 1, !tbaa !2432
  %96 = zext i1 %84 to i8
  store i8 %96, i8* %39, align 1, !tbaa !2432
  %97 = add i64 %72, -40
  %98 = add i64 %74, 16
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %81, i64* %99, align 8
  %100 = bitcast %union.anon* %3 to i64**
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %102 = bitcast i64* %101 to double*
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %105 = bitcast i64* %104 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404804

block_4048f9:                                     ; preds = %block_4048eb
  %106 = add i64 %872, -8
  store i64 %106, i64* %RDI, align 8, !tbaa !2428
  %107 = add i64 %988, 8
  store i64 %107, i64* %PC, align 8
  %108 = load i64, i64* %875, align 8
  %109 = add i64 %108, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %108, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %14, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2447
  %118 = xor i64 %109, %108
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %27, align 1, !tbaa !2448
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %30, align 1, !tbaa !2449
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %33, align 1, !tbaa !2450
  %126 = lshr i64 %108, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %39, align 1, !tbaa !2451
  store i64 %109, i64* %RSI, align 8, !tbaa !2428
  %131 = add i64 %988, -345
  %132 = add i64 %988, 20
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %131, %struct.Memory* %MEMORY.3)
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -88
  %139 = load i64, i64* %PC, align 8
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %RAX, align 8
  %141 = add i64 %139, 8
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %138 to i64*
  store i64 %140, i64* %142, align 8
  %143 = load i64, i64* %PC, align 8
  %144 = add i64 %143, -485
  %145 = add i64 %143, 5
  %146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148, align 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %144, %struct.Memory* %136)
  %150 = load i64, i64* %RBP, align 8
  %151 = add i64 %150, -8
  %152 = load i64, i64* %PC, align 8
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %153 = load i64*, i64** %100, align 8
  %154 = add i64 %152, 8
  store i64 %154, i64* %PC, align 8
  %155 = load i64, i64* %153, align 8
  store i64 %155, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %156 = add i64 %150, -48
  %157 = add i64 %152, 12
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %RSI, align 8, !tbaa !2428
  %160 = add i64 %150, -152
  %161 = add i64 %152, 20
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  store i64 %155, i64* %162, align 8
  %163 = load i64, i64* %PC, align 8
  %164 = add i64 %163, -398
  %165 = add i64 %163, 5
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %164, %struct.Memory* %149)
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -96
  %172 = load i64, i64* %PC, align 8
  store i64 %171, i64* %RDI, align 8, !tbaa !2428
  %173 = load i64, i64* %RAX, align 8
  %174 = add i64 %172, 8
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %173, i64* %175, align 8
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, -523
  %178 = add i64 %176, 5
  %179 = load i64, i64* %RSP, align 8, !tbaa !2428
  %180 = add i64 %179, -8
  %181 = inttoptr i64 %180 to i64*
  store i64 %178, i64* %181, align 8
  store i64 %180, i64* %RSP, align 8, !tbaa !2428
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  %182 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %177, %struct.Memory* %169)
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -152
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 8
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %189 = load i64*, i64** %100, align 8
  %190 = add i64 %185, 12
  store i64 %190, i64* %PC, align 8
  store i64 %188, i64* %189, align 8
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -40
  %193 = load i64, i64* %PC, align 8
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %192 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = add i64 %196, -1
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = icmp eq i64 %196, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %14, align 1, !tbaa !2433
  %200 = trunc i64 %197 to i32
  %201 = and i32 %200, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %21, align 1, !tbaa !2447
  %206 = xor i64 %197, %196
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  store i8 %209, i8* %27, align 1, !tbaa !2448
  %210 = icmp eq i64 %197, 0
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %30, align 1, !tbaa !2449
  %212 = lshr i64 %197, 63
  %213 = trunc i64 %212 to i8
  store i8 %213, i8* %33, align 1, !tbaa !2450
  %214 = lshr i64 %196, 63
  %215 = xor i64 %212, %214
  %216 = add nuw nsw i64 %215, %214
  %217 = icmp eq i64 %216, 2
  %218 = zext i1 %217 to i8
  store i8 %218, i8* %39, align 1, !tbaa !2451
  %219 = add i64 %191, -48
  %220 = add i64 %193, 12
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i64*
  store i64 %197, i64* %221, align 8
  %.pre10 = load i64, i64* %PC, align 8
  %.pre11 = load i64, i64* %RBP, align 8
  br label %block_404958

block_4049bb:                                     ; preds = %block_404973, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %222 = phi i64 [ %948, %block_404973 ], [ %.pre18, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_404973 ], [ %862, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -153
  %225 = add i64 %222, 6
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %224 to i8*
  %227 = load i8, i8* %226, align 1
  store i8 %227, i8* %AL, align 1, !tbaa !2432
  %228 = and i8 %227, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %229 = zext i8 %228 to i32
  %230 = tail call i32 @llvm.ctpop.i32(i32 %229) #9
  %231 = trunc i32 %230 to i8
  %232 = xor i8 %231, 1
  store i8 %232, i8* %21, align 1, !tbaa !2447
  %233 = xor i8 %228, 1
  store i8 %233, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %234 = icmp eq i8 %233, 0
  %.v = select i1 %234, i64 19, i64 14
  %235 = add i64 %222, %.v
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  %236 = add i64 %223, -8
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  br i1 %234, label %block_4049ce, label %block_4049c9

block_404812:                                     ; preds = %block_404804
  %237 = add i64 %872, -8
  store i64 %237, i64* %RDI, align 8, !tbaa !2428
  %238 = add i64 %908, 8
  store i64 %238, i64* %PC, align 8
  %239 = load i64, i64* %875, align 8
  %240 = add i64 %239, -1
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = icmp eq i64 %239, 0
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %14, align 1, !tbaa !2433
  %243 = trunc i64 %240 to i32
  %244 = and i32 %243, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #9
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %21, align 1, !tbaa !2447
  %249 = xor i64 %240, %239
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  store i8 %252, i8* %27, align 1, !tbaa !2448
  %253 = icmp eq i64 %240, 0
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %30, align 1, !tbaa !2449
  %255 = lshr i64 %240, 63
  %256 = trunc i64 %255 to i8
  store i8 %256, i8* %33, align 1, !tbaa !2450
  %257 = lshr i64 %239, 63
  %258 = xor i64 %255, %257
  %259 = add nuw nsw i64 %258, %257
  %260 = icmp eq i64 %259, 2
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %39, align 1, !tbaa !2451
  store i64 %240, i64* %RSI, align 8, !tbaa !2428
  %262 = add i64 %908, -114
  %263 = add i64 %908, 20
  %264 = load i64, i64* %RSP, align 8, !tbaa !2428
  %265 = add i64 %264, -8
  %266 = inttoptr i64 %265 to i64*
  store i64 %263, i64* %266, align 8
  store i64 %265, i64* %RSP, align 8, !tbaa !2428
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  %267 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %262, %struct.Memory* %MEMORY.3)
  %268 = load i64, i64* %RBP, align 8
  %269 = add i64 %268, -56
  %270 = load i64, i64* %PC, align 8
  store i64 %269, i64* %RDI, align 8, !tbaa !2428
  %271 = load i64, i64* %RAX, align 8
  %272 = add i64 %270, 8
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %269 to i64*
  store i64 %271, i64* %273, align 8
  %274 = load i64, i64* %PC, align 8
  %275 = add i64 %274, -254
  %276 = add i64 %274, 5
  %277 = load i64, i64* %RSP, align 8, !tbaa !2428
  %278 = add i64 %277, -8
  %279 = inttoptr i64 %278 to i64*
  store i64 %276, i64* %279, align 8
  store i64 %278, i64* %RSP, align 8, !tbaa !2428
  store i64 %275, i64* %PC, align 8, !tbaa !2428
  %280 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %275, %struct.Memory* %MEMORY.3)
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -8
  %283 = load i64, i64* %PC, align 8
  store i64 %282, i64* %RDI, align 8, !tbaa !2428
  %284 = load i64*, i64** %100, align 8
  %285 = add i64 %283, 8
  store i64 %285, i64* %PC, align 8
  %286 = load i64, i64* %284, align 8
  store i64 %286, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %287 = add i64 %281, -40
  %288 = add i64 %283, 12
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %RSI, align 8, !tbaa !2428
  %291 = add i64 %281, -136
  %292 = add i64 %283, 20
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i64*
  store i64 %286, i64* %293, align 8
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, -167
  %296 = add i64 %294, 5
  %297 = load i64, i64* %RSP, align 8, !tbaa !2428
  %298 = add i64 %297, -8
  %299 = inttoptr i64 %298 to i64*
  store i64 %296, i64* %299, align 8
  store i64 %298, i64* %RSP, align 8, !tbaa !2428
  store i64 %295, i64* %PC, align 8, !tbaa !2428
  %300 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %295, %struct.Memory* %MEMORY.3)
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -64
  %303 = load i64, i64* %PC, align 8
  store i64 %302, i64* %RDI, align 8, !tbaa !2428
  %304 = load i64, i64* %RAX, align 8
  %305 = add i64 %303, 8
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %302 to i64*
  store i64 %304, i64* %306, align 8
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, -292
  %309 = add i64 %307, 5
  %310 = load i64, i64* %RSP, align 8, !tbaa !2428
  %311 = add i64 %310, -8
  %312 = inttoptr i64 %311 to i64*
  store i64 %309, i64* %312, align 8
  store i64 %311, i64* %RSP, align 8, !tbaa !2428
  store i64 %308, i64* %PC, align 8, !tbaa !2428
  %313 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %308, %struct.Memory* %MEMORY.3)
  %314 = load i64*, i64** %100, align 8
  %315 = load i64, i64* %PC, align 8
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC, align 8
  %317 = load i64, i64* %314, align 8
  store i64 %317, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %318 = load i64, i64* %RBP, align 8
  %319 = add i64 %318, -136
  %320 = add i64 %315, 12
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %103, align 1, !tbaa !2452
  store double 0.000000e+00, double* %105, align 1, !tbaa !2452
  %323 = add i64 %315, 16
  store i64 %323, i64* %PC, align 8
  %324 = bitcast i64 %317 to double
  %.cast7 = bitcast i64 %322 to double
  %325 = fcmp uno double %324, %.cast7
  br i1 %325, label %326, label %336

; <label>:326:                                    ; preds = %block_404812
  %327 = fadd double %324, %.cast7
  %328 = bitcast double %327 to i64
  %329 = and i64 %328, 9221120237041090560
  %330 = icmp eq i64 %329, 9218868437227405312
  %331 = and i64 %328, 2251799813685247
  %332 = icmp ne i64 %331, 0
  %333 = and i1 %330, %332
  br i1 %333, label %334, label %342

; <label>:334:                                    ; preds = %326
  %335 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %323, %struct.Memory* %MEMORY.3) #12
  %.pre22 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:336:                                    ; preds = %block_404812
  %337 = fcmp ogt double %324, %.cast7
  br i1 %337, label %342, label %338

; <label>:338:                                    ; preds = %336
  %339 = fcmp olt double %324, %.cast7
  br i1 %339, label %342, label %340

; <label>:340:                                    ; preds = %338
  %341 = fcmp oeq double %324, %.cast7
  br i1 %341, label %342, label %346

; <label>:342:                                    ; preds = %340, %338, %336, %326
  %343 = phi i8 [ 0, %336 ], [ 0, %338 ], [ 1, %340 ], [ 1, %326 ]
  %344 = phi i8 [ 0, %336 ], [ 0, %338 ], [ 0, %340 ], [ 1, %326 ]
  %345 = phi i8 [ 0, %336 ], [ 1, %338 ], [ 0, %340 ], [ 1, %326 ]
  store i8 %343, i8* %30, align 1, !tbaa !2432
  store i8 %344, i8* %21, align 1, !tbaa !2432
  store i8 %345, i8* %14, align 1, !tbaa !2432
  br label %346

; <label>:346:                                    ; preds = %342, %340
  store i8 0, i8* %39, align 1, !tbaa !2432
  store i8 0, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %346, %334
  %347 = phi i64 [ %.pre22, %334 ], [ %323, %346 ]
  %348 = phi %struct.Memory* [ %335, %334 ], [ %MEMORY.3, %346 ]
  %349 = add i64 %347, 18
  %350 = add i64 %347, 6
  %351 = load i8, i8* %14, align 1, !tbaa !2433
  %352 = load i8, i8* %30, align 1, !tbaa !2449
  %353 = or i8 %352, %351
  %354 = icmp ne i8 %353, 0
  %355 = select i1 %354, i64 %349, i64 %350
  store i64 %355, i64* %PC, align 8, !tbaa !2428
  br i1 %354, label %block_40487b, label %block_40486f

block_40486f:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %356 = load i64, i64* %RBP, align 8
  %357 = add i64 %356, -40
  %358 = add i64 %355, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %357 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = icmp eq i64 %360, -1
  %363 = icmp eq i64 %361, 0
  %364 = or i1 %362, %363
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %14, align 1, !tbaa !2433
  %366 = trunc i64 %361 to i32
  %367 = and i32 %366, 255
  %368 = tail call i32 @llvm.ctpop.i32(i32 %367) #9
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  store i8 %371, i8* %21, align 1, !tbaa !2447
  %372 = xor i64 %361, %360
  %373 = lshr i64 %372, 4
  %374 = trunc i64 %373 to i8
  %375 = and i8 %374, 1
  store i8 %375, i8* %27, align 1, !tbaa !2448
  %376 = zext i1 %363 to i8
  store i8 %376, i8* %30, align 1, !tbaa !2449
  %377 = lshr i64 %361, 63
  %378 = trunc i64 %377 to i8
  store i8 %378, i8* %33, align 1, !tbaa !2450
  %379 = lshr i64 %360, 63
  %380 = xor i64 %377, %379
  %381 = add nuw nsw i64 %380, %377
  %382 = icmp eq i64 %381, 2
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %39, align 1, !tbaa !2451
  %384 = add i64 %355, 12
  store i64 %384, i64* %PC, align 8
  store i64 %361, i64* %359, align 8
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_40487b

block_4049ce:                                     ; preds = %block_4049bb
  %385 = add i64 %223, -40
  %386 = add i64 %235, 8
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i64*
  %388 = load i64, i64* %387, align 8
  store i64 %388, i64* %RSI, align 8, !tbaa !2428
  %389 = add i64 %235, -558
  %390 = add i64 %235, 13
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.0)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -112
  %397 = load i64, i64* %PC, align 8
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %398 = load i64, i64* %RAX, align 8
  %399 = add i64 %397, 8
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %396 to i64*
  store i64 %398, i64* %400, align 8
  %401 = load i64, i64* %PC, align 8
  %402 = add i64 %401, -691
  %403 = add i64 %401, 5
  %404 = load i64, i64* %RSP, align 8, !tbaa !2428
  %405 = add i64 %404, -8
  %406 = inttoptr i64 %405 to i64*
  store i64 %403, i64* %406, align 8
  store i64 %405, i64* %RSP, align 8, !tbaa !2428
  store i64 %402, i64* %PC, align 8, !tbaa !2428
  %407 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %402, %struct.Memory* %394)
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -8
  %410 = load i64, i64* %PC, align 8
  store i64 %409, i64* %RDI, align 8, !tbaa !2428
  %411 = load i64*, i64** %100, align 8
  %412 = add i64 %410, 8
  store i64 %412, i64* %PC, align 8
  %413 = load i64, i64* %411, align 8
  store i64 %413, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %414 = add i64 %408, -48
  %415 = add i64 %410, 12
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %RSI, align 8, !tbaa !2428
  %418 = add i64 %408, -168
  %419 = add i64 %410, 20
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i64*
  store i64 %413, i64* %420, align 8
  %421 = load i64, i64* %PC, align 8
  %422 = add i64 %421, -604
  %423 = add i64 %421, 5
  %424 = load i64, i64* %RSP, align 8, !tbaa !2428
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 %423, i64* %426, align 8
  store i64 %425, i64* %RSP, align 8, !tbaa !2428
  store i64 %422, i64* %PC, align 8, !tbaa !2428
  %427 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %422, %struct.Memory* %407)
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -120
  %430 = load i64, i64* %PC, align 8
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %431 = load i64, i64* %RAX, align 8
  %432 = add i64 %430, 8
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %429 to i64*
  store i64 %431, i64* %433, align 8
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, -729
  %436 = add i64 %434, 5
  %437 = load i64, i64* %RSP, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %436, i64* %439, align 8
  store i64 %438, i64* %RSP, align 8, !tbaa !2428
  store i64 %435, i64* %PC, align 8, !tbaa !2428
  %440 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %435, %struct.Memory* %427)
  %441 = load i64, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -168
  %444 = add i64 %441, 15
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %443 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %447 = load i64*, i64** %100, align 8
  %448 = add i64 %441, 19
  store i64 %448, i64* %PC, align 8
  store i64 %446, i64* %447, align 8
  %449 = load i64, i64* %RBP, align 8
  %450 = add i64 %449, -40
  %451 = load i64, i64* %PC, align 8
  %452 = add i64 %451, 4
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %450 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = add i64 %449, -48
  %456 = add i64 %451, 8
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i64*
  store i64 %454, i64* %457, align 8
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -48
  %460 = load i64, i64* %PC, align 8
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = add i64 %463, -1
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = icmp eq i64 %463, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %14, align 1, !tbaa !2433
  %467 = trunc i64 %464 to i32
  %468 = and i32 %467, 255
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468) #9
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %21, align 1, !tbaa !2447
  %473 = xor i64 %464, %463
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  store i8 %476, i8* %27, align 1, !tbaa !2448
  %477 = icmp eq i64 %464, 0
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %30, align 1, !tbaa !2449
  %479 = lshr i64 %464, 63
  %480 = trunc i64 %479 to i8
  store i8 %480, i8* %33, align 1, !tbaa !2450
  %481 = lshr i64 %463, 63
  %482 = xor i64 %479, %481
  %483 = add nuw nsw i64 %482, %481
  %484 = icmp eq i64 %483, 2
  %485 = zext i1 %484 to i8
  store i8 %485, i8* %39, align 1, !tbaa !2451
  %486 = ashr i64 %464, 63
  store i64 %486, i64* %RDX, align 8, !tbaa !2428
  %487 = load i64, i64* %RSI, align 8
  %488 = add i64 %460, 13
  store i64 %488, i64* %PC, align 8
  %489 = sext i64 %487 to i128
  %490 = and i128 %489, -18446744073709551616
  %491 = zext i64 %486 to i128
  %492 = shl nuw i128 %491, 64
  %493 = zext i64 %464 to i128
  %494 = or i128 %492, %493
  %495 = zext i64 %487 to i128
  %496 = or i128 %490, %495
  %497 = sdiv i128 %494, %496
  %498 = trunc i128 %497 to i64
  %499 = and i128 %497, 18446744073709551615
  %500 = sext i64 %498 to i128
  %501 = and i128 %500, -18446744073709551616
  %502 = or i128 %501, %499
  %503 = icmp eq i128 %497, %502
  br i1 %503, label %506, label %504

; <label>:504:                                    ; preds = %block_4049ce
  %505 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %488, %struct.Memory* %440) #12
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:506:                                    ; preds = %block_4049ce
  %507 = srem i128 %494, %496
  %508 = trunc i128 %507 to i64
  store i64 %498, i64* %776, align 8, !tbaa !2428
  store i64 %508, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %506, %504
  %509 = phi i64 [ %.pre21, %504 ], [ %488, %506 ]
  %510 = phi i64 [ %.pre20, %504 ], [ %498, %506 ]
  %511 = phi i64 [ %.pre19, %504 ], [ %458, %506 ]
  %512 = phi %struct.Memory* [ %505, %504 ], [ %440, %506 ]
  %513 = add i64 %511, -40
  %514 = add i64 %509, 4
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i64*
  store i64 %510, i64* %515, align 8
  %516 = load i64, i64* %PC, align 8
  %517 = add i64 %516, -199
  store i64 %517, i64* %PC, align 8, !tbaa !2428
  br label %block_404973

block_4049c9:                                     ; preds = %block_4049bb
  %518 = add i64 %223, -32
  %519 = add i64 %235, 127
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i64*
  %521 = load i64, i64* %520, align 8
  store i64 %521, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %522 = add i64 %223, -48
  %523 = add i64 %235, 131
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %522 to i64*
  %525 = load i64, i64* %524, align 8
  store i64 %525, i64* %RSI, align 8, !tbaa !2428
  %526 = add i64 %223, -176
  %527 = add i64 %235, 139
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i64*
  store i64 %521, i64* %528, align 8
  %529 = load i64, i64* %PC, align 8
  %530 = add i64 %529, -692
  %531 = add i64 %529, 5
  %532 = load i64, i64* %RSP, align 8, !tbaa !2428
  %533 = add i64 %532, -8
  %534 = inttoptr i64 %533 to i64*
  store i64 %531, i64* %534, align 8
  store i64 %533, i64* %RSP, align 8, !tbaa !2428
  store i64 %530, i64* %PC, align 8, !tbaa !2428
  %535 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %530, %struct.Memory* %MEMORY.0)
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -128
  %538 = load i64, i64* %PC, align 8
  store i64 %537, i64* %RDI, align 8, !tbaa !2428
  %539 = load i64, i64* %RAX, align 8
  %540 = add i64 %538, 8
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %537 to i64*
  store i64 %539, i64* %541, align 8
  %542 = load i64, i64* %PC, align 8
  %543 = add i64 %542, -817
  %544 = add i64 %542, 5
  %545 = load i64, i64* %RSP, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %544, i64* %547, align 8
  store i64 %546, i64* %RSP, align 8, !tbaa !2428
  store i64 %543, i64* %PC, align 8, !tbaa !2428
  %548 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %543, %struct.Memory* %535)
  %549 = load i64, i64* %RBP, align 8
  %550 = add i64 %549, -176
  %551 = load i64, i64* %PC, align 8
  %552 = add i64 %551, 8
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %550 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %555 = load i64*, i64** %100, align 8
  %556 = add i64 %551, 12
  store i64 %556, i64* %PC, align 8
  store i64 %554, i64* %555, align 8
  %557 = load i64, i64* %RSP, align 8
  %558 = load i64, i64* %PC, align 8
  %559 = add i64 %557, 176
  store i64 %559, i64* %RSP, align 8, !tbaa !2428
  %560 = icmp ugt i64 %557, -177
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %14, align 1, !tbaa !2433
  %562 = trunc i64 %559 to i32
  %563 = and i32 %562, 255
  %564 = tail call i32 @llvm.ctpop.i32(i32 %563) #9
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  store i8 %567, i8* %21, align 1, !tbaa !2447
  %568 = xor i64 %557, 16
  %569 = xor i64 %568, %559
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %27, align 1, !tbaa !2448
  %573 = icmp eq i64 %559, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %30, align 1, !tbaa !2449
  %575 = lshr i64 %559, 63
  %576 = trunc i64 %575 to i8
  store i8 %576, i8* %33, align 1, !tbaa !2450
  %577 = lshr i64 %557, 63
  %578 = xor i64 %575, %577
  %579 = add nuw nsw i64 %578, %575
  %580 = icmp eq i64 %579, 2
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %39, align 1, !tbaa !2451
  %582 = add i64 %558, 8
  store i64 %582, i64* %PC, align 8
  %583 = add i64 %557, 184
  %584 = inttoptr i64 %559 to i64*
  %585 = load i64, i64* %584, align 8
  store i64 %585, i64* %RBP, align 8, !tbaa !2428
  store i64 %583, i64* %RSP, align 8, !tbaa !2428
  %586 = add i64 %558, 9
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %583 to i64*
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %PC, align 8, !tbaa !2428
  %589 = add i64 %557, 192
  store i64 %589, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %548

block_40487b:                                     ; preds = %block_40486f, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %590 = phi i64 [ %.pre23, %block_40486f ], [ %349, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2 ]
  %591 = load i64, i64* %RBP, align 8
  %592 = add i64 %591, -8
  store i64 %592, i64* %RDI, align 8, !tbaa !2428
  %593 = add i64 %591, -40
  %594 = add i64 %590, 8
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  %596 = load i64, i64* %595, align 8
  %597 = add i64 %596, -1
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = icmp eq i64 %596, 0
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %14, align 1, !tbaa !2433
  %600 = trunc i64 %597 to i32
  %601 = and i32 %600, 255
  %602 = tail call i32 @llvm.ctpop.i32(i32 %601) #9
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* %21, align 1, !tbaa !2447
  %606 = xor i64 %597, %596
  %607 = lshr i64 %606, 4
  %608 = trunc i64 %607 to i8
  %609 = and i8 %608, 1
  store i8 %609, i8* %27, align 1, !tbaa !2448
  %610 = icmp eq i64 %597, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %30, align 1, !tbaa !2449
  %612 = lshr i64 %597, 63
  %613 = trunc i64 %612 to i8
  store i8 %613, i8* %33, align 1, !tbaa !2450
  %614 = lshr i64 %596, 63
  %615 = xor i64 %612, %614
  %616 = add nuw nsw i64 %615, %614
  %617 = icmp eq i64 %616, 2
  %618 = zext i1 %617 to i8
  store i8 %618, i8* %39, align 1, !tbaa !2451
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %619 = add i64 %590, -219
  %620 = add i64 %590, 20
  %621 = load i64, i64* %RSP, align 8, !tbaa !2428
  %622 = add i64 %621, -8
  %623 = inttoptr i64 %622 to i64*
  store i64 %620, i64* %623, align 8
  store i64 %622, i64* %RSP, align 8, !tbaa !2428
  store i64 %619, i64* %PC, align 8, !tbaa !2428
  %624 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %619, %struct.Memory* %348)
  %625 = load i64, i64* %RBP, align 8
  %626 = add i64 %625, -72
  %627 = load i64, i64* %PC, align 8
  store i64 %626, i64* %RDI, align 8, !tbaa !2428
  %628 = load i64, i64* %RAX, align 8
  %629 = add i64 %627, 8
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %626 to i64*
  store i64 %628, i64* %630, align 8
  %631 = load i64, i64* %PC, align 8
  %632 = add i64 %631, -359
  %633 = add i64 %631, 5
  %634 = load i64, i64* %RSP, align 8, !tbaa !2428
  %635 = add i64 %634, -8
  %636 = inttoptr i64 %635 to i64*
  store i64 %633, i64* %636, align 8
  store i64 %635, i64* %RSP, align 8, !tbaa !2428
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  %637 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %632, %struct.Memory* %624)
  %638 = load i64, i64* %RBP, align 8
  %639 = add i64 %638, -8
  %640 = load i64, i64* %PC, align 8
  store i64 %639, i64* %RDI, align 8, !tbaa !2428
  %641 = load i64*, i64** %100, align 8
  %642 = add i64 %640, 8
  store i64 %642, i64* %PC, align 8
  %643 = load i64, i64* %641, align 8
  store i64 %643, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %644 = add i64 %638, -48
  %645 = add i64 %640, 12
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %644 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RSI, align 8, !tbaa !2428
  %648 = add i64 %638, -144
  %649 = add i64 %640, 20
  store i64 %649, i64* %PC, align 8
  %650 = inttoptr i64 %648 to i64*
  store i64 %643, i64* %650, align 8
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, -272
  %653 = add i64 %651, 5
  %654 = load i64, i64* %RSP, align 8, !tbaa !2428
  %655 = add i64 %654, -8
  %656 = inttoptr i64 %655 to i64*
  store i64 %653, i64* %656, align 8
  store i64 %655, i64* %RSP, align 8, !tbaa !2428
  store i64 %652, i64* %PC, align 8, !tbaa !2428
  %657 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %652, %struct.Memory* %637)
  %658 = load i64, i64* %RBP, align 8
  %659 = add i64 %658, -80
  %660 = load i64, i64* %PC, align 8
  store i64 %659, i64* %RDI, align 8, !tbaa !2428
  %661 = load i64, i64* %RAX, align 8
  %662 = add i64 %660, 8
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %659 to i64*
  store i64 %661, i64* %663, align 8
  %664 = load i64, i64* %PC, align 8
  %665 = add i64 %664, -397
  %666 = add i64 %664, 5
  %667 = load i64, i64* %RSP, align 8, !tbaa !2428
  %668 = add i64 %667, -8
  %669 = inttoptr i64 %668 to i64*
  store i64 %666, i64* %669, align 8
  store i64 %668, i64* %RSP, align 8, !tbaa !2428
  store i64 %665, i64* %PC, align 8, !tbaa !2428
  %670 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %665, %struct.Memory* %657)
  %671 = load i64, i64* %RBP, align 8
  %672 = add i64 %671, -144
  %673 = load i64, i64* %PC, align 8
  %674 = add i64 %673, 8
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %672 to i64*
  %676 = load i64, i64* %675, align 8
  store i64 %676, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %677 = load i64*, i64** %100, align 8
  %678 = add i64 %673, 12
  store i64 %678, i64* %PC, align 8
  store i64 %676, i64* %677, align 8
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -40
  %681 = load i64, i64* %PC, align 8
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683, align 8
  %685 = add i64 %684, -1
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = icmp eq i64 %684, 0
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %14, align 1, !tbaa !2433
  %688 = trunc i64 %685 to i32
  %689 = and i32 %688, 255
  %690 = tail call i32 @llvm.ctpop.i32(i32 %689) #9
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = xor i8 %692, 1
  store i8 %693, i8* %21, align 1, !tbaa !2447
  %694 = xor i64 %685, %684
  %695 = lshr i64 %694, 4
  %696 = trunc i64 %695 to i8
  %697 = and i8 %696, 1
  store i8 %697, i8* %27, align 1, !tbaa !2448
  %698 = icmp eq i64 %685, 0
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %30, align 1, !tbaa !2449
  %700 = lshr i64 %685, 63
  %701 = trunc i64 %700 to i8
  store i8 %701, i8* %33, align 1, !tbaa !2450
  %702 = lshr i64 %684, 63
  %703 = xor i64 %700, %702
  %704 = add nuw nsw i64 %703, %702
  %705 = icmp eq i64 %704, 2
  %706 = zext i1 %705 to i8
  store i8 %706, i8* %39, align 1, !tbaa !2451
  %707 = add i64 %679, -48
  %708 = add i64 %681, 12
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i64*
  store i64 %685, i64* %709, align 8
  %710 = load i64, i64* %RBP, align 8
  %711 = add i64 %710, -40
  %712 = load i64, i64* %PC, align 8
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %711 to i64*
  %715 = load i64, i64* %714, align 8
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = add i64 %712, 8
  store i64 %716, i64* %PC, align 8
  %717 = load i64, i64* %714, align 8
  %718 = add i64 %717, %715
  store i64 %718, i64* %RAX, align 8, !tbaa !2428
  %719 = icmp ult i64 %718, %715
  %720 = icmp ult i64 %718, %717
  %721 = or i1 %719, %720
  %722 = zext i1 %721 to i8
  store i8 %722, i8* %14, align 1, !tbaa !2433
  %723 = trunc i64 %718 to i32
  %724 = and i32 %723, 255
  %725 = tail call i32 @llvm.ctpop.i32(i32 %724) #9
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  %728 = xor i8 %727, 1
  store i8 %728, i8* %21, align 1, !tbaa !2447
  %729 = xor i64 %717, %715
  %730 = xor i64 %729, %718
  %731 = lshr i64 %730, 4
  %732 = trunc i64 %731 to i8
  %733 = and i8 %732, 1
  store i8 %733, i8* %27, align 1, !tbaa !2448
  %734 = icmp eq i64 %718, 0
  %735 = zext i1 %734 to i8
  store i8 %735, i8* %30, align 1, !tbaa !2449
  %736 = lshr i64 %718, 63
  %737 = trunc i64 %736 to i8
  store i8 %737, i8* %33, align 1, !tbaa !2450
  %738 = lshr i64 %715, 63
  %739 = lshr i64 %717, 63
  %740 = xor i64 %736, %738
  %741 = xor i64 %736, %739
  %742 = add nuw nsw i64 %740, %741
  %743 = icmp eq i64 %742, 2
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %39, align 1, !tbaa !2451
  %745 = add i64 %712, 12
  store i64 %745, i64* %PC, align 8
  store i64 %718, i64* %714, align 8
  %746 = load i64, i64* %PC, align 8
  %747 = add i64 %746, -226
  store i64 %747, i64* %PC, align 8, !tbaa !2428
  br label %block_404804

block_404958:                                     ; preds = %block_4048eb, %block_4048f9
  %748 = phi i64 [ %872, %block_4048eb ], [ %.pre11, %block_4048f9 ]
  %749 = phi i64 [ %988, %block_4048eb ], [ %.pre10, %block_4048f9 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4048eb ], [ %182, %block_4048f9 ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %750 = add i64 %748, -48
  %751 = add i64 %749, 11
  store i64 %751, i64* %PC, align 8
  %752 = inttoptr i64 %750 to i64*
  %753 = load i64, i64* %752, align 8
  %754 = add i64 %753, -1
  %755 = icmp eq i64 %753, 0
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %14, align 1, !tbaa !2433
  %757 = trunc i64 %754 to i32
  %758 = and i32 %757, 255
  %759 = tail call i32 @llvm.ctpop.i32(i32 %758) #9
  %760 = trunc i32 %759 to i8
  %761 = and i8 %760, 1
  %762 = xor i8 %761, 1
  store i8 %762, i8* %21, align 1, !tbaa !2447
  %763 = xor i64 %754, %753
  %764 = lshr i64 %763, 4
  %765 = trunc i64 %764 to i8
  %766 = and i8 %765, 1
  store i8 %766, i8* %27, align 1, !tbaa !2448
  %767 = icmp eq i64 %754, 0
  %768 = zext i1 %767 to i8
  store i8 %768, i8* %30, align 1, !tbaa !2449
  %769 = lshr i64 %754, 63
  %770 = trunc i64 %769 to i8
  store i8 %770, i8* %33, align 1, !tbaa !2450
  %771 = lshr i64 %753, 63
  %772 = xor i64 %769, %771
  %773 = add nuw nsw i64 %772, %771
  %774 = icmp eq i64 %773, 2
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %39, align 1, !tbaa !2451
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %777 = ashr i64 %754, 63
  store i64 %777, i64* %RDX, align 8, !tbaa !2428
  %778 = add i64 %749, 23
  store i64 %778, i64* %PC, align 8
  %779 = zext i64 %777 to i128
  %780 = shl nuw i128 %779, 64
  %781 = zext i64 %754 to i128
  %782 = or i128 %780, %781
  %783 = sdiv i128 %782, 2
  %784 = trunc i128 %783 to i64
  %785 = and i128 %783, 18446744073709551615
  %786 = sext i64 %784 to i128
  %787 = and i128 %786, -18446744073709551616
  %788 = or i128 %787, %785
  %789 = icmp eq i128 %783, %788
  br i1 %789, label %792, label %790

; <label>:790:                                    ; preds = %block_404958
  %791 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %778, %struct.Memory* %MEMORY.2) #12
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:792:                                    ; preds = %block_404958
  %793 = srem i128 %782, 2
  %794 = trunc i128 %793 to i64
  store i64 %784, i64* %776, align 8, !tbaa !2428
  store i64 %794, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %792, %790
  %795 = phi i64 [ %.pre14, %790 ], [ %778, %792 ]
  %796 = phi i64 [ %.pre13, %790 ], [ %784, %792 ]
  %797 = phi i64 [ %.pre12, %790 ], [ %748, %792 ]
  %798 = phi %struct.Memory* [ %791, %790 ], [ %MEMORY.2, %792 ]
  %799 = add i64 %797, -40
  %800 = add i64 %795, 4
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %799 to i64*
  store i64 %796, i64* %801, align 8
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_404973

block_40498b:                                     ; preds = %block_404973
  %802 = load i64, i64* %RBP, align 8
  %803 = add i64 %802, -8
  store i64 %803, i64* %RDI, align 8, !tbaa !2428
  %804 = add i64 %802, -40
  %805 = add i64 %958, 8
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %804 to i64*
  %807 = load i64, i64* %806, align 8
  store i64 %807, i64* %RSI, align 8, !tbaa !2428
  %808 = add i64 %958, -491
  %809 = add i64 %958, 13
  %810 = load i64, i64* %RSP, align 8, !tbaa !2428
  %811 = add i64 %810, -8
  %812 = inttoptr i64 %811 to i64*
  store i64 %809, i64* %812, align 8
  store i64 %811, i64* %RSP, align 8, !tbaa !2428
  store i64 %808, i64* %PC, align 8, !tbaa !2428
  %813 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %808, %struct.Memory* %MEMORY.4)
  %814 = load i64, i64* %RBP, align 8
  %815 = add i64 %814, -104
  %816 = load i64, i64* %PC, align 8
  store i64 %815, i64* %RDI, align 8, !tbaa !2428
  %817 = load i64, i64* %RAX, align 8
  %818 = add i64 %816, 8
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %815 to i64*
  store i64 %817, i64* %819, align 8
  %820 = load i64, i64* %PC, align 8
  %821 = add i64 %820, -624
  %822 = add i64 %820, 5
  %823 = load i64, i64* %RSP, align 8, !tbaa !2428
  %824 = add i64 %823, -8
  %825 = inttoptr i64 %824 to i64*
  store i64 %822, i64* %825, align 8
  store i64 %824, i64* %RSP, align 8, !tbaa !2428
  store i64 %821, i64* %PC, align 8, !tbaa !2428
  %826 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %821, %struct.Memory* %MEMORY.4)
  %827 = load i64*, i64** %100, align 8
  %828 = load i64, i64* %PC, align 8
  %829 = add i64 %828, 4
  store i64 %829, i64* %PC, align 8
  %830 = load i64, i64* %827, align 8
  store i64 %830, i64* %60, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %831 = load i64, i64* %RBP, align 8
  %832 = add i64 %831, -32
  %833 = add i64 %828, 9
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %832 to i64*
  %835 = load i64, i64* %834, align 8
  store i64 %835, i64* %103, align 1, !tbaa !2452
  store double 0.000000e+00, double* %105, align 1, !tbaa !2452
  %836 = add i64 %828, 13
  store i64 %836, i64* %PC, align 8
  %.cast = bitcast i64 %835 to double
  %837 = bitcast i64 %830 to double
  %838 = fcmp uno double %.cast, %837
  br i1 %838, label %839, label %849

; <label>:839:                                    ; preds = %block_40498b
  %840 = fadd double %.cast, %837
  %841 = bitcast double %840 to i64
  %842 = and i64 %841, 9221120237041090560
  %843 = icmp eq i64 %842, 9218868437227405312
  %844 = and i64 %841, 2251799813685247
  %845 = icmp ne i64 %844, 0
  %846 = and i1 %843, %845
  br i1 %846, label %847, label %855

; <label>:847:                                    ; preds = %839
  %848 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %836, %struct.Memory* %MEMORY.4) #12
  %.pre16 = load i64, i64* %PC, align 8
  %.pre17 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:849:                                    ; preds = %block_40498b
  %850 = fcmp ogt double %.cast, %837
  br i1 %850, label %855, label %851

; <label>:851:                                    ; preds = %849
  %852 = fcmp olt double %.cast, %837
  br i1 %852, label %855, label %853

; <label>:853:                                    ; preds = %851
  %854 = fcmp oeq double %.cast, %837
  br i1 %854, label %855, label %859

; <label>:855:                                    ; preds = %853, %851, %849, %839
  %856 = phi i8 [ 0, %849 ], [ 0, %851 ], [ 1, %853 ], [ 1, %839 ]
  %857 = phi i8 [ 0, %849 ], [ 0, %851 ], [ 0, %853 ], [ 1, %839 ]
  %858 = phi i8 [ 0, %849 ], [ 1, %851 ], [ 0, %853 ], [ 1, %839 ]
  store i8 %856, i8* %30, align 1, !tbaa !2432
  store i8 %857, i8* %21, align 1, !tbaa !2432
  store i8 %858, i8* %14, align 1, !tbaa !2432
  br label %859

; <label>:859:                                    ; preds = %855, %853
  store i8 0, i8* %39, align 1, !tbaa !2432
  store i8 0, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %859, %847
  %860 = phi i64 [ %.pre17, %847 ], [ %831, %859 ]
  %861 = phi i64 [ %.pre16, %847 ], [ %836, %859 ]
  %862 = phi %struct.Memory* [ %848, %847 ], [ %MEMORY.4, %859 ]
  %863 = load i8, i8* %14, align 1, !tbaa !2433
  %864 = load i8, i8* %30, align 1, !tbaa !2449
  %865 = or i8 %864, %863
  %866 = icmp eq i8 %865, 0
  %867 = zext i1 %866 to i8
  store i8 %867, i8* %CL, align 1, !tbaa !2432
  %868 = add i64 %860, -153
  %869 = add i64 %861, 9
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i8*
  store i8 %867, i8* %870, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_4049bb

block_404804:                                     ; preds = %block_40487b, %block_4047d0
  %871 = phi i64 [ %.pre, %block_4047d0 ], [ %747, %block_40487b ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4047d0 ], [ %670, %block_40487b ]
  %872 = load i64, i64* %RBP, align 8
  %873 = add i64 %872, -40
  %874 = add i64 %871, 4
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = add i64 %872, -16
  %878 = add i64 %871, 8
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  %881 = sub i64 %876, %880
  %882 = icmp ult i64 %876, %880
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %14, align 1, !tbaa !2433
  %884 = trunc i64 %881 to i32
  %885 = and i32 %884, 255
  %886 = tail call i32 @llvm.ctpop.i32(i32 %885) #9
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = xor i8 %888, 1
  store i8 %889, i8* %21, align 1, !tbaa !2447
  %890 = xor i64 %880, %876
  %891 = xor i64 %890, %881
  %892 = lshr i64 %891, 4
  %893 = trunc i64 %892 to i8
  %894 = and i8 %893, 1
  store i8 %894, i8* %27, align 1, !tbaa !2448
  %895 = icmp eq i64 %881, 0
  %896 = zext i1 %895 to i8
  store i8 %896, i8* %30, align 1, !tbaa !2449
  %897 = lshr i64 %881, 63
  %898 = trunc i64 %897 to i8
  store i8 %898, i8* %33, align 1, !tbaa !2450
  %899 = lshr i64 %876, 63
  %900 = lshr i64 %880, 63
  %901 = xor i64 %900, %899
  %902 = xor i64 %897, %899
  %903 = add nuw nsw i64 %902, %901
  %904 = icmp eq i64 %903, 2
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %39, align 1, !tbaa !2451
  %906 = icmp ne i8 %898, 0
  %907 = xor i1 %906, %904
  %.v24 = select i1 %907, i64 14, i64 231
  %908 = add i64 %871, %.v24
  store i64 %908, i64* %PC, align 8, !tbaa !2428
  br i1 %907, label %block_404812, label %block_4048eb

block_404973:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %909 = phi i64 [ %.pre15, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %517, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.4 = phi %struct.Memory* [ %798, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %512, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %910 = load i64, i64* %RBP, align 8
  %911 = add i64 %910, -48
  %912 = add i64 %909, 8
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  %914 = load i64, i64* %913, align 8
  store i64 %914, i64* %RDX, align 8, !tbaa !2428
  %915 = add i64 %910, -24
  %916 = add i64 %909, 12
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to i64*
  %918 = load i64, i64* %917, align 8
  %919 = sub i64 %914, %918
  %920 = icmp ult i64 %914, %918
  %921 = zext i1 %920 to i8
  store i8 %921, i8* %14, align 1, !tbaa !2433
  %922 = trunc i64 %919 to i32
  %923 = and i32 %922, 255
  %924 = tail call i32 @llvm.ctpop.i32(i32 %923) #9
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  store i8 %927, i8* %21, align 1, !tbaa !2447
  %928 = xor i64 %918, %914
  %929 = xor i64 %928, %919
  %930 = lshr i64 %929, 4
  %931 = trunc i64 %930 to i8
  %932 = and i8 %931, 1
  store i8 %932, i8* %27, align 1, !tbaa !2448
  %933 = icmp eq i64 %919, 0
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %30, align 1, !tbaa !2449
  %935 = lshr i64 %919, 63
  %936 = trunc i64 %935 to i8
  store i8 %936, i8* %33, align 1, !tbaa !2450
  %937 = lshr i64 %914, 63
  %938 = lshr i64 %918, 63
  %939 = xor i64 %938, %937
  %940 = xor i64 %935, %937
  %941 = add nuw nsw i64 %940, %939
  %942 = icmp eq i64 %941, 2
  %943 = zext i1 %942 to i8
  store i8 %943, i8* %39, align 1, !tbaa !2451
  %944 = add i64 %910, -153
  %945 = add i64 %909, 18
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %944 to i8*
  store i8 0, i8* %946, align 1
  %947 = load i64, i64* %PC, align 8
  %948 = add i64 %947, 54
  %949 = add i64 %947, 6
  %950 = load i8, i8* %30, align 1, !tbaa !2449
  %951 = icmp ne i8 %950, 0
  %952 = load i8, i8* %33, align 1, !tbaa !2450
  %953 = icmp ne i8 %952, 0
  %954 = load i8, i8* %39, align 1, !tbaa !2451
  %955 = icmp ne i8 %954, 0
  %956 = xor i1 %953, %955
  %957 = or i1 %951, %956
  %958 = select i1 %957, i64 %948, i64 %949
  store i64 %958, i64* %PC, align 8, !tbaa !2428
  br i1 %957, label %block_4049bb, label %block_40498b

block_4048eb:                                     ; preds = %block_404804
  %AL = bitcast %union.anon* %3 to i8*
  %CL = bitcast %union.anon* %4 to i8*
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %959 = add i64 %908, 4
  store i64 %959, i64* %PC, align 8
  %960 = load i64, i64* %875, align 8
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = add i64 %908, 8
  store i64 %961, i64* %PC, align 8
  %962 = load i64, i64* %879, align 8
  %963 = sub i64 %960, %962
  %964 = icmp ult i64 %960, %962
  %965 = zext i1 %964 to i8
  store i8 %965, i8* %14, align 1, !tbaa !2433
  %966 = trunc i64 %963 to i32
  %967 = and i32 %966, 255
  %968 = tail call i32 @llvm.ctpop.i32(i32 %967) #9
  %969 = trunc i32 %968 to i8
  %970 = and i8 %969, 1
  %971 = xor i8 %970, 1
  store i8 %971, i8* %21, align 1, !tbaa !2447
  %972 = xor i64 %962, %960
  %973 = xor i64 %972, %963
  %974 = lshr i64 %973, 4
  %975 = trunc i64 %974 to i8
  %976 = and i8 %975, 1
  store i8 %976, i8* %27, align 1, !tbaa !2448
  %977 = icmp eq i64 %963, 0
  %978 = zext i1 %977 to i8
  store i8 %978, i8* %30, align 1, !tbaa !2449
  %979 = lshr i64 %963, 63
  %980 = trunc i64 %979 to i8
  store i8 %980, i8* %33, align 1, !tbaa !2450
  %981 = lshr i64 %960, 63
  %982 = lshr i64 %962, 63
  %983 = xor i64 %982, %981
  %984 = xor i64 %979, %981
  %985 = add nuw nsw i64 %984, %983
  %986 = icmp eq i64 %985, 2
  %987 = zext i1 %986 to i8
  store i8 %987, i8* %39, align 1, !tbaa !2451
  %.v25 = select i1 %977, i64 14, i64 109
  %988 = add i64 %908, %.v25
  store i64 %988, i64* %PC, align 8, !tbaa !2428
  br i1 %977, label %block_4048f9, label %block_404958
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400fe0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400fe0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -104
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 96
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2433
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #9
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2447
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %42 = bitcast %union.VectorReg* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %42, align 1, !tbaa !2456
  %43 = add i64 %9, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = add i64 %12, 14
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %RSI, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 5
  store i64 %56, i64* %PC, align 8
  %57 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %58 = load i64, i64* %57, align 1
  %59 = inttoptr i64 %54 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 12, i32* %64, align 4
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -20
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i32*
  store i32 0, i32* %69, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_401006

block_401192:                                     ; preds = %block_401182
  %70 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %70, i64* %RAX, align 8, !tbaa !2428
  %71 = add i64 %179, 12
  store i64 %71, i64* %PC, align 8
  %72 = load i32, i32* %149, align 4
  %73 = sext i32 %72 to i64
  %74 = shl nsw i64 %73, 4
  store i64 %74, i64* %RCX, align 8, !tbaa !2428
  %75 = add i64 %74, %70
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = icmp ult i64 %75, %70
  %77 = icmp ult i64 %75, %74
  %78 = or i1 %76, %77
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %16, align 1, !tbaa !2433
  %80 = trunc i64 %75 to i32
  %81 = and i32 %80, 255
  %82 = tail call i32 @llvm.ctpop.i32(i32 %81) #9
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %23, align 1, !tbaa !2447
  %86 = xor i64 %74, %70
  %87 = xor i64 %86, %75
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %28, align 1, !tbaa !2448
  %91 = icmp eq i64 %75, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %31, align 1, !tbaa !2449
  %93 = lshr i64 %75, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %34, align 1, !tbaa !2450
  %95 = lshr i64 %70, 63
  %96 = lshr i64 %73, 59
  %97 = and i64 %96, 1
  %98 = xor i64 %93, %95
  %99 = xor i64 %93, %97
  %100 = add nuw nsw i64 %98, %99
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %40, align 1, !tbaa !2451
  %103 = inttoptr i64 %75 to i64*
  %104 = add i64 %179, 23
  store i64 %104, i64* %PC, align 8
  %105 = load i64, i64* %103, align 8
  store i64 %105, i64* %57, align 1, !tbaa !2452
  store double 0.000000e+00, double* %446, align 1, !tbaa !2452
  %106 = add i64 %146, -32
  %107 = add i64 %179, 28
  store i64 %107, i64* %PC, align 8
  %.cast = bitcast i64 %105 to double
  %108 = inttoptr i64 %106 to double*
  %109 = load double, double* %108, align 8
  %110 = fadd double %.cast, %109
  store double %110, double* %181, align 1, !tbaa !2452
  store i64 0, i64* %41, align 1, !tbaa !2452
  %111 = add i64 %179, 33
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %106 to double*
  store double %110, double* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -20
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = add i32 %118, 1
  %120 = zext i32 %119 to i64
  store i64 %120, i64* %RAX, align 8, !tbaa !2428
  %121 = icmp eq i32 %118, -1
  %122 = icmp eq i32 %119, 0
  %123 = or i1 %121, %122
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %16, align 1, !tbaa !2433
  %125 = and i32 %119, 255
  %126 = tail call i32 @llvm.ctpop.i32(i32 %125) #9
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  store i8 %129, i8* %23, align 1, !tbaa !2447
  %130 = xor i32 %119, %118
  %131 = lshr i32 %130, 4
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  store i8 %133, i8* %28, align 1, !tbaa !2448
  %134 = zext i1 %122 to i8
  store i8 %134, i8* %31, align 1, !tbaa !2449
  %135 = lshr i32 %119, 31
  %136 = trunc i32 %135 to i8
  store i8 %136, i8* %34, align 1, !tbaa !2450
  %137 = lshr i32 %118, 31
  %138 = xor i32 %135, %137
  %139 = add nuw nsw i32 %138, %135
  %140 = icmp eq i32 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %40, align 1, !tbaa !2451
  %142 = add i64 %115, 9
  store i64 %142, i64* %PC, align 8
  store i32 %119, i32* %117, align 4
  %143 = load i64, i64* %PC, align 8
  %144 = add i64 %143, -58
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  br label %block_401182

block_401182:                                     ; preds = %block_40117b, %block_401192
  %145 = phi i64 [ %.pre13, %block_40117b ], [ %144, %block_401192 ]
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -20
  %148 = add i64 %145, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %153 = sub i32 %150, %152
  %154 = icmp ult i32 %150, %152
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %16, align 1, !tbaa !2433
  %156 = and i32 %153, 255
  %157 = tail call i32 @llvm.ctpop.i32(i32 %156) #9
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  store i8 %160, i8* %23, align 1, !tbaa !2447
  %161 = xor i32 %152, %150
  %162 = xor i32 %161, %153
  %163 = lshr i32 %162, 4
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  store i8 %165, i8* %28, align 1, !tbaa !2448
  %166 = icmp eq i32 %153, 0
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %31, align 1, !tbaa !2449
  %168 = lshr i32 %153, 31
  %169 = trunc i32 %168 to i8
  store i8 %169, i8* %34, align 1, !tbaa !2450
  %170 = lshr i32 %150, 31
  %171 = lshr i32 %152, 31
  %172 = xor i32 %171, %170
  %173 = xor i32 %168, %170
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %40, align 1, !tbaa !2451
  %177 = icmp ne i8 %169, 0
  %178 = xor i1 %177, %175
  %.v17 = select i1 %178, i64 16, i64 63
  %179 = add i64 %145, %.v17
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %178, label %block_401192, label %block_4011c1

block_40117b:                                     ; preds = %block_4010b2
  %180 = add i64 %337, 7
  store i64 %180, i64* %PC, align 8
  store i32 0, i32* %307, align 4
  %181 = bitcast %union.VectorReg* %6 to double*
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_401182

block_401016:                                     ; preds = %block_401006
  %182 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = add i64 %372, 12
  store i64 %183, i64* %PC, align 8
  %184 = load i32, i32* %342, align 4
  %185 = sext i32 %184 to i64
  %186 = shl nsw i64 %185, 4
  store i64 %186, i64* %RCX, align 8, !tbaa !2428
  %187 = add i64 %186, %182
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = icmp ult i64 %187, %182
  %189 = icmp ult i64 %187, %186
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %16, align 1, !tbaa !2433
  %192 = trunc i64 %187 to i32
  %193 = and i32 %192, 255
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193) #9
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  store i8 %197, i8* %23, align 1, !tbaa !2447
  %198 = xor i64 %186, %182
  %199 = xor i64 %198, %187
  %200 = lshr i64 %199, 4
  %201 = trunc i64 %200 to i8
  %202 = and i8 %201, 1
  store i8 %202, i8* %28, align 1, !tbaa !2448
  %203 = icmp eq i64 %187, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %31, align 1, !tbaa !2449
  %205 = lshr i64 %187, 63
  %206 = trunc i64 %205 to i8
  store i8 %206, i8* %34, align 1, !tbaa !2450
  %207 = lshr i64 %182, 63
  %208 = lshr i64 %185, 59
  %209 = and i64 %208, 1
  %210 = xor i64 %205, %207
  %211 = xor i64 %205, %209
  %212 = add nuw nsw i64 %210, %211
  %213 = icmp eq i64 %212, 2
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %40, align 1, !tbaa !2451
  %215 = add i64 %187, 8
  %216 = add i64 %372, 23
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RDI, align 8, !tbaa !2428
  %219 = add i64 %372, -2358
  %220 = add i64 %372, 28
  %221 = load i64, i64* %RSP, align 8, !tbaa !2428
  %222 = add i64 %221, -8
  %223 = inttoptr i64 %222 to i64*
  store i64 %220, i64* %223, align 8
  store i64 %222, i64* %RSP, align 8, !tbaa !2428
  store i64 %219, i64* %PC, align 8, !tbaa !2428
  %224 = tail call fastcc %struct.Memory* @ext_4006e0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %225 = load i32, i32* %EAX, align 4
  %226 = zext i32 %225 to i64
  %227 = load i64, i64* %PC, align 8
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -40
  %230 = add i64 %227, 5
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i32*
  store i32 %225, i32* %231, align 4
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -40
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RDX, align 8, !tbaa !2428
  %239 = add i64 %232, -36
  %240 = add i64 %234, 6
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = sub i32 %237, %242
  %244 = icmp ult i32 %237, %242
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %16, align 1, !tbaa !2433
  %246 = and i32 %243, 255
  %247 = tail call i32 @llvm.ctpop.i32(i32 %246) #9
  %248 = trunc i32 %247 to i8
  %249 = and i8 %248, 1
  %250 = xor i8 %249, 1
  store i8 %250, i8* %23, align 1, !tbaa !2447
  %251 = xor i32 %242, %237
  %252 = xor i32 %251, %243
  %253 = lshr i32 %252, 4
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  store i8 %255, i8* %28, align 1, !tbaa !2448
  %256 = icmp eq i32 %243, 0
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %31, align 1, !tbaa !2449
  %258 = lshr i32 %243, 31
  %259 = trunc i32 %258 to i8
  store i8 %259, i8* %34, align 1, !tbaa !2450
  %260 = lshr i32 %237, 31
  %261 = lshr i32 %242, 31
  %262 = xor i32 %261, %260
  %263 = xor i32 %258, %260
  %264 = add nuw nsw i32 %263, %262
  %265 = icmp eq i32 %264, 2
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %40, align 1, !tbaa !2451
  %267 = icmp ne i8 %259, 0
  %268 = xor i1 %267, %265
  %269 = or i1 %256, %268
  %.v18 = select i1 %269, i64 18, i64 12
  %270 = add i64 %234, %.v18
  store i64 %270, i64* %PC, align 8, !tbaa !2428
  br i1 %269, label %block_401049, label %block_401043

block_401049:                                     ; preds = %block_401043, %block_401016
  %271 = phi i64 [ %.pre15, %block_401043 ], [ %232, %block_401016 ]
  %272 = phi i64 [ %.pre14, %block_401043 ], [ %270, %block_401016 ]
  %273 = add i64 %271, -20
  %274 = add i64 %272, 8
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i32*
  %276 = load i32, i32* %275, align 4
  %277 = add i32 %276, 1
  %278 = zext i32 %277 to i64
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = icmp eq i32 %276, -1
  %280 = icmp eq i32 %277, 0
  %281 = or i1 %279, %280
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %16, align 1, !tbaa !2433
  %283 = and i32 %277, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283) #9
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %23, align 1, !tbaa !2447
  %288 = xor i32 %277, %276
  %289 = lshr i32 %288, 4
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  store i8 %291, i8* %28, align 1, !tbaa !2448
  %292 = zext i1 %280 to i8
  store i8 %292, i8* %31, align 1, !tbaa !2449
  %293 = lshr i32 %277, 31
  %294 = trunc i32 %293 to i8
  store i8 %294, i8* %34, align 1, !tbaa !2450
  %295 = lshr i32 %276, 31
  %296 = xor i32 %293, %295
  %297 = add nuw nsw i32 %296, %293
  %298 = icmp eq i32 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %40, align 1, !tbaa !2451
  %300 = add i64 %272, 14
  store i64 %300, i64* %PC, align 8
  store i32 %277, i32* %275, align 4
  %301 = load i64, i64* %PC, align 8
  %302 = add i64 %301, -81
  store i64 %302, i64* %PC, align 8, !tbaa !2428
  br label %block_401006

block_4010b2:                                     ; preds = %block_4010c2, %block_40105c
  %303 = phi i64 [ %.pre12, %block_40105c ], [ %714, %block_4010c2 ]
  %MEMORY.2 = phi %struct.Memory* [ %434, %block_40105c ], [ %676, %block_4010c2 ]
  %304 = load i64, i64* %RBP, align 8
  %305 = add i64 %304, -20
  %306 = add i64 %303, 3
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %311 = sub i32 %308, %310
  %312 = icmp ult i32 %308, %310
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %16, align 1, !tbaa !2433
  %314 = and i32 %311, 255
  %315 = tail call i32 @llvm.ctpop.i32(i32 %314) #9
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  store i8 %318, i8* %23, align 1, !tbaa !2447
  %319 = xor i32 %310, %308
  %320 = xor i32 %319, %311
  %321 = lshr i32 %320, 4
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  store i8 %323, i8* %28, align 1, !tbaa !2448
  %324 = icmp eq i32 %311, 0
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %31, align 1, !tbaa !2449
  %326 = lshr i32 %311, 31
  %327 = trunc i32 %326 to i8
  store i8 %327, i8* %34, align 1, !tbaa !2450
  %328 = lshr i32 %308, 31
  %329 = lshr i32 %310, 31
  %330 = xor i32 %329, %328
  %331 = xor i32 %326, %328
  %332 = add nuw nsw i32 %331, %330
  %333 = icmp eq i32 %332, 2
  %334 = zext i1 %333 to i8
  store i8 %334, i8* %40, align 1, !tbaa !2451
  %335 = icmp ne i8 %327, 0
  %336 = xor i1 %335, %333
  %.v16 = select i1 %336, i64 16, i64 201
  %337 = add i64 %303, %.v16
  store i64 %337, i64* %PC, align 8, !tbaa !2428
  br i1 %336, label %block_4010c2, label %block_40117b

block_401006:                                     ; preds = %block_401049, %block_400fe0
  %338 = phi i64 [ %.pre, %block_400fe0 ], [ %302, %block_401049 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400fe0 ], [ %224, %block_401049 ]
  %339 = load i64, i64* %RBP, align 8
  %340 = add i64 %339, -20
  %341 = add i64 %338, 3
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %346 = sub i32 %343, %345
  %347 = icmp ult i32 %343, %345
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %16, align 1, !tbaa !2433
  %349 = and i32 %346, 255
  %350 = tail call i32 @llvm.ctpop.i32(i32 %349) #9
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = xor i8 %352, 1
  store i8 %353, i8* %23, align 1, !tbaa !2447
  %354 = xor i32 %345, %343
  %355 = xor i32 %354, %346
  %356 = lshr i32 %355, 4
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %28, align 1, !tbaa !2448
  %359 = icmp eq i32 %346, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %31, align 1, !tbaa !2449
  %361 = lshr i32 %346, 31
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %34, align 1, !tbaa !2450
  %363 = lshr i32 %343, 31
  %364 = lshr i32 %345, 31
  %365 = xor i32 %364, %363
  %366 = xor i32 %361, %363
  %367 = add nuw nsw i32 %366, %365
  %368 = icmp eq i32 %367, 2
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %40, align 1, !tbaa !2451
  %370 = icmp ne i8 %362, 0
  %371 = xor i1 %370, %368
  %.v = select i1 %371, i64 16, i64 86
  %372 = add i64 %338, %.v
  store i64 %372, i64* %PC, align 8, !tbaa !2428
  br i1 %371, label %block_401016, label %block_40105c

block_401043:                                     ; preds = %block_401016
  %373 = add i64 %270, 3
  store i64 %373, i64* %PC, align 8
  %374 = load i32, i32* %236, align 4
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = add i64 %270, 6
  store i64 %376, i64* %PC, align 8
  store i32 %374, i32* %241, align 4
  %.pre14 = load i64, i64* %PC, align 8
  %.pre15 = load i64, i64* %RBP, align 8
  br label %block_401049

block_40105c:                                     ; preds = %block_401006
  %AL = bitcast %union.anon* %3 to i8*
  %R10D = bitcast %union.anon* %5 to i32*
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 262), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %377 = add i64 %339, -8
  %378 = add i64 %372, 24
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %377 to i64*
  %380 = load i64, i64* %379, align 8
  store i64 %380, i64* %RDI, align 8, !tbaa !2428
  %381 = add i64 %339, -36
  %382 = add i64 %372, 27
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = add i32 %384, -12
  %386 = zext i32 %385 to i64
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = icmp ult i32 %384, 12
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %16, align 1, !tbaa !2433
  %389 = and i32 %385, 255
  %390 = tail call i32 @llvm.ctpop.i32(i32 %389) #9
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  store i8 %393, i8* %23, align 1, !tbaa !2447
  %394 = xor i32 %385, %384
  %395 = lshr i32 %394, 4
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  store i8 %397, i8* %28, align 1, !tbaa !2448
  %398 = icmp eq i32 %385, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %31, align 1, !tbaa !2449
  %400 = lshr i32 %385, 31
  %401 = trunc i32 %400 to i8
  store i8 %401, i8* %34, align 1, !tbaa !2450
  %402 = lshr i32 %384, 31
  %403 = xor i32 %400, %402
  %404 = add nuw nsw i32 %403, %402
  %405 = icmp eq i32 %404, 2
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %40, align 1, !tbaa !2451
  store i64 %386, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %407 = add i64 %372, -2364
  %408 = add i64 %372, 39
  %409 = load i64, i64* %RSP, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %408, i64* %411, align 8
  store i64 %410, i64* %RSP, align 8, !tbaa !2428
  store i64 %407, i64* %PC, align 8, !tbaa !2428
  %412 = tail call fastcc %struct.Memory* @ext_400720_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %413 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 296), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 115), i64* %RCX, align 8, !tbaa !2428
  %414 = load i64, i64* %RBP, align 8
  %415 = add i64 %414, -8
  %416 = add i64 %413, 24
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %414, -36
  %420 = add i64 %413, 27
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RDX, align 8, !tbaa !2428
  %424 = add i64 %414, -44
  %425 = load i32, i32* %EAX, align 4
  %426 = add i64 %413, 30
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %424 to i32*
  store i32 %425, i32* %427, align 4
  %428 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %429 = add i64 %428, -2433
  %430 = add i64 %428, 7
  %431 = load i64, i64* %RSP, align 8, !tbaa !2428
  %432 = add i64 %431, -8
  %433 = inttoptr i64 %432 to i64*
  store i64 %430, i64* %433, align 8
  store i64 %432, i64* %RSP, align 8, !tbaa !2428
  store i64 %429, i64* %PC, align 8, !tbaa !2428
  %434 = tail call fastcc %struct.Memory* @ext_400720_fprintf(%struct.State* nonnull %0, %struct.Memory* %412)
  %435 = load i64, i64* %RBP, align 8
  %436 = add i64 %435, -20
  %437 = load i64, i64* %PC, align 8
  %438 = add i64 %437, 7
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %436 to i32*
  store i32 0, i32* %439, align 4
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -48
  %442 = load i32, i32* %EAX, align 4
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 3
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %441 to i32*
  store i32 %442, i32* %445, align 4
  %446 = bitcast i64* %41 to double*
  %447 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_4010b2

block_4010c2:                                     ; preds = %block_4010b2
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 314), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 159), i64* %R8, align 8, !tbaa !2428
  %448 = add i64 %304, -8
  %449 = add i64 %337, 24
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  %451 = load i64, i64* %450, align 8
  store i64 %451, i64* %RDI, align 8, !tbaa !2428
  %452 = add i64 %337, 27
  store i64 %452, i64* %PC, align 8
  %453 = load i32, i32* %307, align 4
  %454 = zext i32 %453 to i64
  store i64 %454, i64* %RDX, align 8, !tbaa !2428
  %455 = add i64 %304, -36
  %456 = add i64 %337, 31
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = sext i32 %458 to i64
  store i64 %459, i64* %RAX, align 8, !tbaa !2428
  %460 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %460, i64* %RCX, align 8, !tbaa !2428
  %461 = add i64 %337, 43
  store i64 %461, i64* %PC, align 8
  %462 = load i32, i32* %307, align 4
  %463 = sext i32 %462 to i64
  %464 = shl nsw i64 %463, 4
  store i64 %464, i64* %R9, align 8, !tbaa !2428
  %465 = add i64 %464, %460
  store i64 %465, i64* %RCX, align 8, !tbaa !2428
  %466 = icmp ult i64 %465, %460
  %467 = icmp ult i64 %465, %464
  %468 = or i1 %466, %467
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %16, align 1, !tbaa !2433
  %470 = trunc i64 %465 to i32
  %471 = and i32 %470, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471) #9
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %23, align 1, !tbaa !2447
  %476 = xor i64 %464, %460
  %477 = xor i64 %476, %465
  %478 = lshr i64 %477, 4
  %479 = trunc i64 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %28, align 1, !tbaa !2448
  %481 = icmp eq i64 %465, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %31, align 1, !tbaa !2449
  %483 = lshr i64 %465, 63
  %484 = trunc i64 %483 to i8
  store i8 %484, i8* %34, align 1, !tbaa !2450
  %485 = lshr i64 %460, 63
  %486 = lshr i64 %463, 59
  %487 = and i64 %486, 1
  %488 = xor i64 %483, %485
  %489 = xor i64 %483, %487
  %490 = add nuw nsw i64 %488, %489
  %491 = icmp eq i64 %490, 2
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %40, align 1, !tbaa !2451
  %493 = add i64 %465, 8
  %494 = add i64 %337, 54
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %RCX, align 8, !tbaa !2428
  %497 = add i64 %304, -56
  %498 = add i64 %337, 58
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  store i64 %451, i64* %499, align 8
  %500 = load i64, i64* %RCX, align 8
  %501 = load i64, i64* %PC, align 8
  store i64 %500, i64* %RDI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP, align 8
  %503 = add i64 %502, -64
  %504 = load i64, i64* %RSI, align 8
  %505 = add i64 %501, 7
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %503 to i64*
  store i64 %504, i64* %506, align 8
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -72
  %509 = load i64, i64* %R8, align 8
  %510 = load i64, i64* %PC, align 8
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %508 to i64*
  store i64 %509, i64* %512, align 8
  %513 = load i64, i64* %RBP, align 8
  %514 = add i64 %513, -80
  %515 = load i64, i64* %RAX, align 8
  %516 = load i64, i64* %PC, align 8
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %514 to i64*
  store i64 %515, i64* %518, align 8
  %519 = load i64, i64* %RBP, align 8
  %520 = add i64 %519, -84
  %521 = load i32, i32* %EDX, align 4
  %522 = load i64, i64* %PC, align 8
  %523 = add i64 %522, 3
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %520 to i32*
  store i32 %521, i32* %524, align 4
  %525 = load i64, i64* %PC, align 8
  %526 = add i64 %525, -2606
  %527 = add i64 %525, 5
  %528 = load i64, i64* %RSP, align 8, !tbaa !2428
  %529 = add i64 %528, -8
  %530 = inttoptr i64 %529 to i64*
  store i64 %527, i64* %530, align 8
  store i64 %529, i64* %RSP, align 8, !tbaa !2428
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  %531 = tail call fastcc %struct.Memory* @ext_4006e0_strlen(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %532 = load i64, i64* %RBP, align 8
  %533 = add i64 %532, -80
  %534 = load i64, i64* %PC, align 8
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %533 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = load i64, i64* %RAX, align 8
  %539 = sub i64 %537, %538
  store i64 %539, i64* %RCX, align 8, !tbaa !2428
  %540 = icmp ult i64 %537, %538
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %16, align 1, !tbaa !2433
  %542 = trunc i64 %539 to i32
  %543 = and i32 %542, 255
  %544 = tail call i32 @llvm.ctpop.i32(i32 %543) #9
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  %547 = xor i8 %546, 1
  store i8 %547, i8* %23, align 1, !tbaa !2447
  %548 = xor i64 %538, %537
  %549 = xor i64 %548, %539
  %550 = lshr i64 %549, 4
  %551 = trunc i64 %550 to i8
  %552 = and i8 %551, 1
  store i8 %552, i8* %28, align 1, !tbaa !2448
  %553 = icmp eq i64 %539, 0
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %31, align 1, !tbaa !2449
  %555 = lshr i64 %539, 63
  %556 = trunc i64 %555 to i8
  store i8 %556, i8* %34, align 1, !tbaa !2450
  %557 = lshr i64 %537, 63
  %558 = lshr i64 %538, 63
  %559 = xor i64 %558, %557
  %560 = xor i64 %555, %557
  %561 = add nuw nsw i64 %560, %559
  %562 = icmp eq i64 %561, 2
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %40, align 1, !tbaa !2451
  %564 = and i64 %539, 4294967295
  store i64 %564, i64* %RDX, align 8, !tbaa !2428
  %565 = load i64, i64* bitcast (%results_type* @results to i64*), align 8
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = add i64 %532, -20
  %567 = add i64 %534, 21
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i32*
  %569 = load i32, i32* %568, align 4
  %570 = sext i32 %569 to i64
  %571 = shl nsw i64 %570, 4
  store i64 %571, i64* %RCX, align 8, !tbaa !2428
  %572 = add i64 %571, %565
  store i64 %572, i64* %RAX, align 8, !tbaa !2428
  %573 = icmp ult i64 %572, %565
  %574 = icmp ult i64 %572, %571
  %575 = or i1 %573, %574
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %16, align 1, !tbaa !2433
  %577 = trunc i64 %572 to i32
  %578 = and i32 %577, 255
  %579 = tail call i32 @llvm.ctpop.i32(i32 %578) #9
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = xor i8 %581, 1
  store i8 %582, i8* %23, align 1, !tbaa !2447
  %583 = xor i64 %571, %565
  %584 = xor i64 %583, %572
  %585 = lshr i64 %584, 4
  %586 = trunc i64 %585 to i8
  %587 = and i8 %586, 1
  store i8 %587, i8* %28, align 1, !tbaa !2448
  %588 = icmp eq i64 %572, 0
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %31, align 1, !tbaa !2449
  %590 = lshr i64 %572, 63
  %591 = trunc i64 %590 to i8
  store i8 %591, i8* %34, align 1, !tbaa !2450
  %592 = lshr i64 %565, 63
  %593 = lshr i64 %570, 59
  %594 = and i64 %593, 1
  %595 = xor i64 %590, %592
  %596 = xor i64 %590, %594
  %597 = add nuw nsw i64 %595, %596
  %598 = icmp eq i64 %597, 2
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %40, align 1, !tbaa !2451
  %600 = add i64 %572, 8
  %601 = add i64 %534, 32
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i64*
  %603 = load i64, i64* %602, align 8
  store i64 %603, i64* %R9, align 8, !tbaa !2428
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %604 = load i64, i64* %RBP, align 8
  %605 = add i64 %604, -20
  %606 = add i64 %534, 44
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i32*
  %608 = load i32, i32* %607, align 4
  %609 = sext i32 %608 to i64
  %610 = shl nsw i64 %609, 4
  store i64 %610, i64* %RCX, align 8, !tbaa !2428
  %611 = add i64 %610, %565
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = icmp ult i64 %611, %565
  %613 = icmp ult i64 %611, %610
  %614 = or i1 %612, %613
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %16, align 1, !tbaa !2433
  %616 = trunc i64 %611 to i32
  %617 = and i32 %616, 255
  %618 = tail call i32 @llvm.ctpop.i32(i32 %617) #9
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  store i8 %621, i8* %23, align 1, !tbaa !2447
  %622 = xor i64 %610, %565
  %623 = xor i64 %622, %611
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  store i8 %626, i8* %28, align 1, !tbaa !2448
  %627 = icmp eq i64 %611, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %31, align 1, !tbaa !2449
  %629 = lshr i64 %611, 63
  %630 = trunc i64 %629 to i8
  store i8 %630, i8* %34, align 1, !tbaa !2450
  %631 = lshr i64 %609, 59
  %632 = and i64 %631, 1
  %633 = xor i64 %629, %592
  %634 = xor i64 %629, %632
  %635 = add nuw nsw i64 %633, %634
  %636 = icmp eq i64 %635, 2
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %40, align 1, !tbaa !2451
  %638 = inttoptr i64 %611 to i64*
  %639 = add i64 %534, 55
  store i64 %639, i64* %PC, align 8
  %640 = load i64, i64* %638, align 8
  store i64 %640, i64* %57, align 1, !tbaa !2452
  store double 0.000000e+00, double* %446, align 1, !tbaa !2452
  %641 = add i64 %604, -56
  %642 = add i64 %534, 59
  store i64 %642, i64* %PC, align 8
  %643 = inttoptr i64 %641 to i64*
  %644 = load i64, i64* %643, align 8
  store i64 %644, i64* %RDI, align 8, !tbaa !2428
  %645 = add i64 %604, -64
  %646 = add i64 %534, 63
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %645 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %RSI, align 8, !tbaa !2428
  %649 = add i64 %604, -84
  %650 = add i64 %534, 67
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %447, align 8, !tbaa !2428
  %654 = add i64 %604, -88
  %655 = load i32, i32* %EDX, align 4
  %656 = add i64 %534, 70
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %654 to i32*
  store i32 %655, i32* %657, align 4
  %658 = load i32, i32* %R10D, align 4
  %659 = zext i32 %658 to i64
  %660 = load i64, i64* %PC, align 8
  store i64 %659, i64* %RDX, align 8, !tbaa !2428
  %661 = load i64, i64* %RBP, align 8
  %662 = add i64 %661, -88
  %663 = add i64 %660, 6
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i32*
  %665 = load i32, i32* %664, align 4
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RCX, align 8, !tbaa !2428
  %667 = add i64 %661, -72
  %668 = add i64 %660, 10
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669, align 8
  store i64 %670, i64* %R8, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %671 = add i64 %660, -2617
  %672 = add i64 %660, 17
  %673 = load i64, i64* %RSP, align 8, !tbaa !2428
  %674 = add i64 %673, -8
  %675 = inttoptr i64 %674 to i64*
  store i64 %672, i64* %675, align 8
  store i64 %674, i64* %RSP, align 8, !tbaa !2428
  store i64 %671, i64* %PC, align 8, !tbaa !2428
  %676 = tail call fastcc %struct.Memory* @ext_400720_fprintf(%struct.State* nonnull %0, %struct.Memory* %531)
  %677 = load i64, i64* %RBP, align 8
  %678 = add i64 %677, -92
  %679 = load i32, i32* %EAX, align 4
  %680 = load i64, i64* %PC, align 8
  %681 = add i64 %680, 3
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %678 to i32*
  store i32 %679, i32* %682, align 4
  %683 = load i64, i64* %RBP, align 8
  %684 = add i64 %683, -20
  %685 = load i64, i64* %PC, align 8
  %686 = add i64 %685, 3
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %684 to i32*
  %688 = load i32, i32* %687, align 4
  %689 = add i32 %688, 1
  %690 = zext i32 %689 to i64
  store i64 %690, i64* %RAX, align 8, !tbaa !2428
  %691 = icmp eq i32 %688, -1
  %692 = icmp eq i32 %689, 0
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %16, align 1, !tbaa !2433
  %695 = and i32 %689, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #9
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %23, align 1, !tbaa !2447
  %700 = xor i32 %689, %688
  %701 = lshr i32 %700, 4
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  store i8 %703, i8* %28, align 1, !tbaa !2448
  %704 = zext i1 %692 to i8
  store i8 %704, i8* %31, align 1, !tbaa !2449
  %705 = lshr i32 %689, 31
  %706 = trunc i32 %705 to i8
  store i8 %706, i8* %34, align 1, !tbaa !2450
  %707 = lshr i32 %688, 31
  %708 = xor i32 %705, %707
  %709 = add nuw nsw i32 %708, %705
  %710 = icmp eq i32 %709, 2
  %711 = zext i1 %710 to i8
  store i8 %711, i8* %40, align 1, !tbaa !2451
  %712 = add i64 %685, 9
  store i64 %712, i64* %PC, align 8
  store i32 %689, i32* %687, align 4
  %713 = load i64, i64* %PC, align 8
  %714 = add i64 %713, -196
  store i64 %714, i64* %PC, align 8, !tbaa !2428
  br label %block_4010b2

block_4011c1:                                     ; preds = %block_401182
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 203), i64* %RSI, align 8, !tbaa !2428
  %715 = add i64 %146, -8
  %716 = add i64 %179, 14
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i64*
  %718 = load i64, i64* %717, align 8
  store i64 %718, i64* %RDI, align 8, !tbaa !2428
  %719 = add i64 %146, -16
  %720 = add i64 %179, 18
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %719 to i64*
  %722 = load i64, i64* %721, align 8
  store i64 %722, i64* %RDX, align 8, !tbaa !2428
  %723 = add i64 %146, -32
  %724 = add i64 %179, 23
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %723 to i64*
  %726 = load i64, i64* %725, align 8
  store i64 %726, i64* %57, align 1, !tbaa !2452
  store double 0.000000e+00, double* %446, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %727 = add i64 %179, -2721
  %728 = add i64 %179, 30
  %729 = load i64, i64* %RSP, align 8, !tbaa !2428
  %730 = add i64 %729, -8
  %731 = inttoptr i64 %730 to i64*
  store i64 %728, i64* %731, align 8
  store i64 %730, i64* %RSP, align 8, !tbaa !2428
  store i64 %727, i64* %PC, align 8, !tbaa !2428
  %732 = tail call fastcc %struct.Memory* @ext_400720_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %733 = load i64, i64* %PC, align 8
  store i32 0, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %734 = load i64, i64* %RBP, align 8
  %735 = add i64 %734, -96
  %736 = load i32, i32* %EAX, align 4
  %737 = add i64 %733, 14
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %735 to i32*
  store i32 %736, i32* %738, align 4
  %739 = load i64, i64* %RSP, align 8
  %740 = load i64, i64* %PC, align 8
  %741 = add i64 %739, 96
  store i64 %741, i64* %RSP, align 8, !tbaa !2428
  %742 = icmp ugt i64 %739, -97
  %743 = zext i1 %742 to i8
  store i8 %743, i8* %16, align 1, !tbaa !2433
  %744 = trunc i64 %741 to i32
  %745 = and i32 %744, 255
  %746 = tail call i32 @llvm.ctpop.i32(i32 %745) #9
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  %749 = xor i8 %748, 1
  store i8 %749, i8* %23, align 1, !tbaa !2447
  %750 = xor i64 %741, %739
  %751 = lshr i64 %750, 4
  %752 = trunc i64 %751 to i8
  %753 = and i8 %752, 1
  store i8 %753, i8* %28, align 1, !tbaa !2448
  %754 = icmp eq i64 %741, 0
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %31, align 1, !tbaa !2449
  %756 = lshr i64 %741, 63
  %757 = trunc i64 %756 to i8
  store i8 %757, i8* %34, align 1, !tbaa !2450
  %758 = lshr i64 %739, 63
  %759 = xor i64 %756, %758
  %760 = add nuw nsw i64 %759, %756
  %761 = icmp eq i64 %760, 2
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %40, align 1, !tbaa !2451
  %763 = add i64 %740, 5
  store i64 %763, i64* %PC, align 8
  %764 = add i64 %739, 104
  %765 = inttoptr i64 %741 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RBP, align 8, !tbaa !2428
  store i64 %764, i64* %RSP, align 8, !tbaa !2428
  %767 = add i64 %740, 6
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %764 to i64*
  %769 = load i64, i64* %768, align 8
  store i64 %769, i64* %PC, align 8, !tbaa !2428
  %770 = add i64 %739, 112
  store i64 %770, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %732
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405b30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -120
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -5262
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %58 = bitcast i64* %57 to double*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %61 = bitcast i64* %60 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405b5c

block_405bb9:                                     ; preds = %block_405b98
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -56
  store i64 %63, i64* %RDI, align 8, !tbaa !2428
  %64 = add i64 %62, -40
  %65 = add i64 %297, 9
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %68 = add i64 %62, -80
  %69 = add i64 %297, 14
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, -1527
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %MEMORY.1)
  %78 = load i64, i64* %RAX, align 8
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  %80 = add i64 %79, -5276
  %81 = add i64 %79, 8
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %80, %struct.Memory* %MEMORY.1)
  %86 = load i64*, i64** %55, align 8
  %87 = load i64, i64* %PC, align 8
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC, align 8
  %89 = load i64, i64* %86, align 8
  store i64 %89, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -80
  %92 = add i64 %87, 9
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %59, align 1, !tbaa !2452
  store double 0.000000e+00, double* %61, align 1, !tbaa !2452
  %95 = add i64 %87, 13
  store i64 %95, i64* %PC, align 8
  %96 = bitcast i64 %89 to double
  %.cast = bitcast i64 %94 to double
  %97 = fcmp uno double %96, %.cast
  br i1 %97, label %98, label %108

; <label>:98:                                     ; preds = %block_405bb9
  %99 = fadd double %96, %.cast
  %100 = bitcast double %99 to i64
  %101 = and i64 %100, 9221120237041090560
  %102 = icmp eq i64 %101, 9218868437227405312
  %103 = and i64 %100, 2251799813685247
  %104 = icmp ne i64 %103, 0
  %105 = and i1 %102, %104
  br i1 %105, label %106, label %114

; <label>:106:                                    ; preds = %98
  %107 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %95, %struct.Memory* %MEMORY.1) #12
  %.pre8 = load i64, i64* %PC, align 8
  %.pre9 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:108:                                    ; preds = %block_405bb9
  %109 = fcmp ogt double %96, %.cast
  br i1 %109, label %114, label %110

; <label>:110:                                    ; preds = %108
  %111 = fcmp olt double %96, %.cast
  br i1 %111, label %114, label %112

; <label>:112:                                    ; preds = %110
  %113 = fcmp oeq double %96, %.cast
  br i1 %113, label %114, label %118

; <label>:114:                                    ; preds = %112, %110, %108, %98
  %115 = phi i8 [ 0, %108 ], [ 0, %110 ], [ 1, %112 ], [ 1, %98 ]
  %116 = phi i8 [ 0, %108 ], [ 0, %110 ], [ 0, %112 ], [ 1, %98 ]
  %117 = phi i8 [ 0, %108 ], [ 1, %110 ], [ 0, %112 ], [ 1, %98 ]
  store i8 %115, i8* %16, align 1, !tbaa !2432
  store i8 %116, i8* %14, align 1, !tbaa !2432
  store i8 %117, i8* %13, align 1, !tbaa !2432
  br label %118

; <label>:118:                                    ; preds = %114, %112
  store i8 0, i8* %18, align 1, !tbaa !2432
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 0, i8* %15, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %118, %106
  %119 = phi i64 [ %.pre9, %106 ], [ %90, %118 ]
  %120 = phi i64 [ %.pre8, %106 ], [ %95, %118 ]
  %121 = phi %struct.Memory* [ %107, %106 ], [ %MEMORY.1, %118 ]
  %122 = load i8, i8* %13, align 1, !tbaa !2433
  %123 = load i8, i8* %16, align 1, !tbaa !2449
  %124 = or i8 %123, %122
  %125 = icmp eq i8 %124, 0
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %CL, align 1, !tbaa !2432
  %127 = add i64 %119, -65
  %128 = add i64 %120, 6
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i8*
  store i8 %126, i8* %129, align 1
  %.pre10 = load i64, i64* %PC, align 8
  br label %block_405be7

block_405bf7:                                     ; preds = %block_405be7
  %130 = add i64 %331, -56
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %131 = add i64 %343, -5319
  %132 = add i64 %343, 9
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %131, %struct.Memory* %MEMORY.2)
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -48
  %139 = load i64, i64* %PC, align 8
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64*, i64** %55, align 8
  %141 = add i64 %139, 8
  store i64 %141, i64* %PC, align 8
  %142 = load i64, i64* %140, align 8
  store i64 %142, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %143 = add i64 %137, -88
  %144 = add i64 %139, 13
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  store i64 %142, i64* %145, align 8
  %146 = load i64, i64* %PC, align 8
  %147 = add i64 %146, -5341
  %148 = add i64 %146, 5
  %149 = load i64, i64* %RSP, align 8, !tbaa !2428
  %150 = add i64 %149, -8
  %151 = inttoptr i64 %150 to i64*
  store i64 %148, i64* %151, align 8
  store i64 %150, i64* %RSP, align 8, !tbaa !2428
  store i64 %147, i64* %PC, align 8, !tbaa !2428
  %152 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %147, %struct.Memory* %136)
  %153 = load i64, i64* %RBP, align 8
  %154 = add i64 %153, -88
  %155 = load i64, i64* %PC, align 8
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC, align 8
  %157 = inttoptr i64 %154 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %159 = load i64*, i64** %55, align 8
  %160 = add i64 %155, 9
  store i64 %160, i64* %PC, align 8
  store i64 %158, i64* %159, align 8
  %161 = load i64, i64* %RBP, align 8
  %162 = add i64 %161, -48
  %163 = load i64, i64* %PC, align 8
  store i64 %162, i64* %RDI, align 8, !tbaa !2428
  %164 = add i64 %163, -1611
  %165 = add i64 %163, 9
  %166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %166, -8
  %168 = inttoptr i64 %167 to i64*
  store i64 %165, i64* %168, align 8
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  %169 = tail call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %164, %struct.Memory* %152)
  %170 = load i64, i64* %RBP, align 8
  %171 = add i64 %170, -96
  %172 = load i64, i64* %RAX, align 8
  %173 = load i64, i64* %PC, align 8
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175, align 8
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, -144
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  br label %block_405b98

block_405b5c:                                     ; preds = %block_405bf2, %block_405b30
  %178 = phi i64 [ %.pre, %block_405b30 ], [ %271, %block_405bf2 ]
  %MEMORY.0 = phi %struct.Memory* [ %48, %block_405b30 ], [ %263, %block_405bf2 ]
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -24
  store i64 %180, i64* %RDI, align 8, !tbaa !2428
  %181 = add i64 %179, -16
  store i64 %181, i64* %RSI, align 8, !tbaa !2428
  %182 = add i64 %178, -5212
  %183 = add i64 %178, 13
  %184 = load i64, i64* %RSP, align 8, !tbaa !2428
  %185 = add i64 %184, -8
  %186 = inttoptr i64 %185 to i64*
  store i64 %183, i64* %186, align 8
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  %187 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %182, %struct.Memory* %MEMORY.0)
  %188 = load i8, i8* %AL, align 1
  %189 = load i64, i64* %PC, align 8
  %190 = and i8 %188, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %191 = zext i8 %190 to i32
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191) #9
  %193 = trunc i32 %192 to i8
  %194 = xor i8 %193, 1
  store i8 %194, i8* %14, align 1, !tbaa !2447
  %195 = xor i8 %190, 1
  store i8 %195, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %196 = icmp eq i8 %195, 0
  %.v11 = select i1 %196, i64 13, i64 8
  %197 = add i64 %189, %.v11
  store i64 %197, i64* %PC, align 8, !tbaa !2428
  br i1 %196, label %block_405b76, label %block_405b71

block_405b76:                                     ; preds = %block_405b5c
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -24
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = add i64 %197, -5190
  %201 = add i64 %197, 9
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %200, %struct.Memory* %MEMORY.0)
  %206 = load i64*, i64** %55, align 8
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC, align 8
  %209 = load i64, i64* %206, align 8
  store i64 %209, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -40
  %212 = add i64 %207, 9
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i64*
  store i64 %209, i64* %213, align 8
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -24
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = add i64 %214, -48
  %221 = add i64 %216, 8
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %220 to i64*
  store i64 %219, i64* %222, align 8
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -48
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = add i64 %223, -56
  %230 = add i64 %225, 8
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i64*
  store i64 %228, i64* %231, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_405b98

block_405bb4:                                     ; preds = %block_405b98
  %232 = add i64 %297, 51
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  br label %block_405be7

block_405bf2:                                     ; preds = %block_405be7
  %233 = add i64 %331, -48
  store i64 %233, i64* %RDI, align 8, !tbaa !2428
  %234 = add i64 %331, -40
  %235 = add i64 %343, 68
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %238 = add i64 %331, -104
  %239 = add i64 %343, 73
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  store i64 %237, i64* %240, align 8
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, -5387
  %243 = add i64 %241, 5
  %244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %245 = add i64 %244, -8
  %246 = inttoptr i64 %245 to i64*
  store i64 %243, i64* %246, align 8
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  %247 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %242, %struct.Memory* %MEMORY.2)
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -24
  %250 = load i64, i64* %PC, align 8
  store i64 %249, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %251 = add i64 %248, -104
  %252 = add i64 %250, 11
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %255 = load i64*, i64** %55, align 8
  %256 = add i64 %250, 15
  store i64 %256, i64* %PC, align 8
  store i64 %254, i64* %255, align 8
  %257 = load i64, i64* %PC, align 8
  %258 = add i64 %257, -5519
  %259 = add i64 %257, 5
  %260 = load i64, i64* %RSP, align 8, !tbaa !2428
  %261 = add i64 %260, -8
  %262 = inttoptr i64 %261 to i64*
  store i64 %259, i64* %262, align 8
  store i64 %261, i64* %RSP, align 8, !tbaa !2428
  store i64 %258, i64* %PC, align 8, !tbaa !2428
  %263 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %258, %struct.Memory* %247)
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -64
  %266 = load i64, i64* %RAX, align 8
  %267 = load i64, i64* %PC, align 8
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %265 to i64*
  store i64 %266, i64* %269, align 8
  %270 = load i64, i64* %PC, align 8
  %271 = add i64 %270, -252
  store i64 %271, i64* %PC, align 8, !tbaa !2428
  br label %block_405b5c

block_405b98:                                     ; preds = %block_405b76, %block_405bf7
  %272 = phi i64 [ %.pre7, %block_405b76 ], [ %177, %block_405bf7 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405b76 ], [ %169, %block_405bf7 ]
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -48
  store i64 %274, i64* %RDI, align 8, !tbaa !2428
  %275 = add i64 %273, -8
  store i64 %275, i64* %RSI, align 8, !tbaa !2428
  %276 = add i64 %272, -5272
  %277 = add i64 %272, 13
  %278 = load i64, i64* %RSP, align 8, !tbaa !2428
  %279 = add i64 %278, -8
  %280 = inttoptr i64 %279 to i64*
  store i64 %277, i64* %280, align 8
  store i64 %279, i64* %RSP, align 8, !tbaa !2428
  store i64 %276, i64* %PC, align 8, !tbaa !2428
  %281 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %276, %struct.Memory* %MEMORY.1)
  %282 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2432
  %283 = load i8, i8* %AL, align 1
  %284 = and i8 %283, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %285 = zext i8 %284 to i32
  %286 = tail call i32 @llvm.ctpop.i32(i32 %285) #9
  %287 = trunc i32 %286 to i8
  %288 = xor i8 %287, 1
  store i8 %288, i8* %14, align 1, !tbaa !2447
  %289 = xor i8 %284, 1
  store i8 %289, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -65
  %292 = add i64 %282, 9
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i8*
  store i8 0, i8* %293, align 1
  %294 = load i64, i64* %PC, align 8
  %295 = load i8, i8* %16, align 1, !tbaa !2449
  %296 = icmp eq i8 %295, 0
  %.v14 = select i1 %296, i64 11, i64 6
  %297 = add i64 %294, %.v14
  store i64 %297, i64* %PC, align 8, !tbaa !2428
  br i1 %296, label %block_405bb9, label %block_405bb4

block_405b71:                                     ; preds = %block_405b5c
  %298 = load i64, i64* %RSP, align 8
  %299 = add i64 %298, 112
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -113
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %13, align 1, !tbaa !2433
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #9
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %14, align 1, !tbaa !2447
  %308 = xor i64 %298, 16
  %309 = xor i64 %308, %299
  %310 = lshr i64 %309, 4
  %311 = trunc i64 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %15, align 1, !tbaa !2448
  %313 = icmp eq i64 %299, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %16, align 1, !tbaa !2449
  %315 = lshr i64 %299, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %17, align 1, !tbaa !2450
  %317 = lshr i64 %298, 63
  %318 = xor i64 %315, %317
  %319 = add nuw nsw i64 %318, %315
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %18, align 1, !tbaa !2451
  %322 = add i64 %197, 241
  store i64 %322, i64* %PC, align 8
  %323 = add i64 %298, 120
  %324 = inttoptr i64 %299 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %RBP, align 8, !tbaa !2428
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  %326 = add i64 %197, 242
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %323 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %329 = add i64 %298, 128
  store i64 %329, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405be7:                                     ; preds = %block_405bb4, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %330 = phi i64 [ %.pre10, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %232, %block_405bb4 ]
  %MEMORY.2 = phi %struct.Memory* [ %121, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %MEMORY.1, %block_405bb4 ]
  %331 = load i64, i64* %RBP, align 8
  %332 = add i64 %331, -65
  %333 = add i64 %330, 3
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i8*
  %335 = load i8, i8* %334, align 1
  store i8 %335, i8* %AL, align 1, !tbaa !2432
  %336 = and i8 %335, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %337 = zext i8 %336 to i32
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #9
  %339 = trunc i32 %338 to i8
  %340 = xor i8 %339, 1
  store i8 %340, i8* %14, align 1, !tbaa !2447
  %341 = xor i8 %336, 1
  store i8 %341, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %342 = icmp eq i8 %341, 0
  %.v = select i1 %342, i64 16, i64 11
  %343 = add i64 %330, %.v
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  br i1 %342, label %block_405bf7, label %block_405bf2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403d10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2432
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #9
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2432
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2432
  store i8 0, i8* %42, align 1, !tbaa !2432
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4009f0___cxx_global_var_init_19(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DVPe_type* @DVPe to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4607
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405dd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 116
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4030a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4045a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2447
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_4045f0, label %block_4045d5

block_4045d5:                                     ; preds = %block_4045a0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %95 = add i64 %92, -16101
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4045f0

block_4045f0:                                     ; preds = %block_4045d5, %block_4045a0
  %107 = phi i64 [ %92, %block_4045a0 ], [ %.pre, %block_4045d5 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_4045a0 ], [ %100, %block_4045d5 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2447
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2448
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2450
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2451
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404050:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 18
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %47, -8
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = sub i64 %52, %56
  %58 = lshr i64 %57, 2
  %59 = trunc i64 %58 to i8
  %60 = and i8 %59, 1
  %61 = ashr i64 %57, 3
  store i64 %61, i64* %RSI, align 8, !tbaa !2428
  store i8 %60, i8* %12, align 1, !tbaa !2432
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #9
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %19, align 1, !tbaa !2432
  store i8 0, i8* %24, align 1, !tbaa !2432
  %68 = icmp eq i64 %61, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %27, align 1, !tbaa !2432
  %70 = lshr i64 %61, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %30, align 1, !tbaa !2432
  store i8 0, i8* %36, align 1, !tbaa !2432
  %72 = add i64 %47, -32
  %73 = add i64 %49, 19
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %61, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -32
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = ashr i64 %80, 63
  store i64 %81, i64* %RDX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX, align 8
  %83 = add i64 %77, 9
  store i64 %83, i64* %PC, align 8
  %84 = sext i64 %82 to i128
  %85 = and i128 %84, -18446744073709551616
  %86 = zext i64 %81 to i128
  %87 = shl nuw i128 %86, 64
  %88 = zext i64 %80 to i128
  %89 = or i128 %87, %88
  %90 = zext i64 %82 to i128
  %91 = or i128 %85, %90
  %92 = sdiv i128 %89, %91
  %93 = trunc i128 %92 to i64
  %94 = and i128 %92, 18446744073709551615
  %95 = sext i64 %93 to i128
  %96 = and i128 %95, -18446744073709551616
  %97 = or i128 %96, %94
  %98 = icmp eq i128 %92, %97
  br i1 %98, label %101, label %99

; <label>:99:                                     ; preds = %block_404050
  %100 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %83, %struct.Memory* %2) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:101:                                    ; preds = %block_404050
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %103 = srem i128 %89, %91
  %104 = trunc i128 %103 to i64
  store i64 %93, i64* %102, align 8, !tbaa !2428
  store i64 %104, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i8 0, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %101, %99
  %105 = phi i64 [ %.pre7, %99 ], [ %75, %101 ]
  %106 = phi i64 [ %.pre6, %99 ], [ %83, %101 ]
  %107 = phi i64 [ %.pre, %99 ], [ %93, %101 ]
  %108 = phi %struct.Memory* [ %100, %99 ], [ %2, %101 ]
  %109 = add i64 %107, -1
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = icmp eq i64 %107, 0
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %12, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %19, align 1, !tbaa !2447
  %118 = xor i64 %109, %107
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  store i8 %121, i8* %24, align 1, !tbaa !2448
  %122 = icmp eq i64 %109, 0
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %27, align 1, !tbaa !2449
  %124 = lshr i64 %109, 63
  %125 = trunc i64 %124 to i8
  store i8 %125, i8* %30, align 1, !tbaa !2450
  %126 = lshr i64 %107, 63
  %127 = xor i64 %124, %126
  %128 = add nuw nsw i64 %127, %126
  %129 = icmp eq i64 %128, 2
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %36, align 1, !tbaa !2451
  %131 = add i64 %105, -24
  %132 = add i64 %106, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  store i64 %109, i64* %133, align 8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %136 = bitcast i64* %135 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_40408b

block_40413e:                                     ; preds = %block_4040e1
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 64
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -65
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %12, align 1, !tbaa !2433
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #9
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %19, align 1, !tbaa !2447
  %147 = xor i64 %138, %137
  %148 = lshr i64 %147, 4
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %24, align 1, !tbaa !2448
  %151 = icmp eq i64 %138, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %27, align 1, !tbaa !2449
  %153 = lshr i64 %138, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %30, align 1, !tbaa !2450
  %155 = lshr i64 %137, 63
  %156 = xor i64 %153, %155
  %157 = add nuw nsw i64 %156, %153
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %36, align 1, !tbaa !2451
  %160 = add i64 %418, 5
  store i64 %160, i64* %PC, align 8
  %161 = add i64 %137, 72
  %162 = inttoptr i64 %138 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RBP, align 8, !tbaa !2428
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %418, 6
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %161 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %167 = add i64 %137, 80
  store i64 %167, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4040d5:                                     ; preds = %block_40408b
  %168 = add i64 %276, -32
  %169 = add i64 %292, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, -1
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = icmp eq i64 %171, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %12, align 1, !tbaa !2433
  %175 = trunc i64 %172 to i32
  %176 = and i32 %175, 255
  %177 = tail call i32 @llvm.ctpop.i32(i32 %176) #9
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  store i8 %180, i8* %19, align 1, !tbaa !2447
  %181 = xor i64 %172, %171
  %182 = lshr i64 %181, 4
  %183 = trunc i64 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %24, align 1, !tbaa !2448
  %185 = icmp eq i64 %172, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %27, align 1, !tbaa !2449
  %187 = lshr i64 %172, 63
  %188 = trunc i64 %187 to i8
  store i8 %188, i8* %30, align 1, !tbaa !2450
  %189 = lshr i64 %171, 63
  %190 = xor i64 %187, %189
  %191 = add nuw nsw i64 %190, %189
  %192 = icmp eq i64 %191, 2
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %36, align 1, !tbaa !2451
  %194 = add i64 %292, 12
  store i64 %194, i64* %PC, align 8
  store i64 %172, i64* %279, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4040e1

block_404096:                                     ; preds = %block_40408b
  %195 = add i64 %276, -8
  %196 = add i64 %292, 4
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %RAX, align 8, !tbaa !2428
  %199 = add i64 %292, 8
  store i64 %199, i64* %PC, align 8
  %200 = load i64, i64* %279, align 8
  store i64 %200, i64* %RCX, align 8, !tbaa !2428
  %201 = shl i64 %200, 3
  %202 = add i64 %198, %201
  %203 = add i64 %292, 12
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %276, -40
  %207 = add i64 %292, 16
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  store i64 %205, i64* %208, align 8
  %209 = load i64, i64* %RBP, align 8
  %210 = add i64 %209, -32
  %211 = load i64, i64* %PC, align 8
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %210 to i64*
  %214 = load i64, i64* %213, align 8
  store i64 %214, i64* %RDI, align 8, !tbaa !2428
  %215 = add i64 %209, -8
  %216 = add i64 %211, 8
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RSI, align 8, !tbaa !2428
  %219 = add i64 %209, -24
  %220 = add i64 %211, 12
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %RDX, align 8, !tbaa !2428
  %223 = add i64 %209, -40
  %224 = add i64 %211, 16
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i64*
  %226 = load i64, i64* %225, align 8
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = add i64 %209, -48
  %228 = add i64 %211, 20
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i64*
  store i64 %226, i64* %229, align 8
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -48
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 5
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %134, align 1, !tbaa !2452
  store double 0.000000e+00, double* %136, align 1, !tbaa !2452
  %236 = add i64 %232, 374
  %237 = add i64 %232, 10
  %238 = load i64, i64* %RSP, align 8, !tbaa !2428
  %239 = add i64 %238, -8
  %240 = inttoptr i64 %239 to i64*
  store i64 %237, i64* %240, align 8
  store i64 %239, i64* %RSP, align 8, !tbaa !2428
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %241 = tail call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* nonnull %0, i64 %236, %struct.Memory* %MEMORY.0)
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -24
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = add i64 %247, -1
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = icmp ne i64 %247, 0
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %12, align 1, !tbaa !2433
  %251 = trunc i64 %248 to i32
  %252 = and i32 %251, 255
  %253 = tail call i32 @llvm.ctpop.i32(i32 %252) #9
  %254 = trunc i32 %253 to i8
  %255 = and i8 %254, 1
  %256 = xor i8 %255, 1
  store i8 %256, i8* %19, align 1, !tbaa !2447
  %257 = xor i64 %247, 16
  %258 = xor i64 %257, %248
  %259 = lshr i64 %258, 4
  %260 = trunc i64 %259 to i8
  %261 = and i8 %260, 1
  store i8 %261, i8* %24, align 1, !tbaa !2448
  %262 = icmp eq i64 %248, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %27, align 1, !tbaa !2449
  %264 = lshr i64 %248, 63
  %265 = trunc i64 %264 to i8
  store i8 %265, i8* %30, align 1, !tbaa !2450
  %266 = lshr i64 %247, 63
  %267 = xor i64 %264, %266
  %268 = xor i64 %264, 1
  %269 = add nuw nsw i64 %267, %268
  %270 = icmp eq i64 %269, 2
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %36, align 1, !tbaa !2451
  %272 = add i64 %244, 12
  store i64 %272, i64* %PC, align 8
  store i64 %248, i64* %246, align 8
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -69
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  br label %block_40408b

block_40408b:                                     ; preds = %block_404096, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %275 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %274, %block_404096 ]
  %MEMORY.0 = phi %struct.Memory* [ %108, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %241, %block_404096 ]
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -24
  %278 = add i64 %275, 5
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %281 = trunc i64 %280 to i32
  %282 = and i32 %281, 255
  %283 = tail call i32 @llvm.ctpop.i32(i32 %282) #9
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  store i8 %286, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %24, align 1, !tbaa !2448
  %287 = icmp eq i64 %280, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %27, align 1, !tbaa !2449
  %289 = lshr i64 %280, 63
  %290 = trunc i64 %289 to i8
  store i8 %290, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  %291 = icmp ne i8 %290, 0
  %.v = select i1 %291, i64 69, i64 6
  %292 = add i64 %278, %.v
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  br i1 %291, label %block_4040d5, label %block_404096

block_4040ec:                                     ; preds = %block_4040e1
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %27, align 1, !tbaa !2449
  store i8 0, i8* %30, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2451
  store i8 0, i8* %24, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %293 = add i64 %389, -8
  %294 = add i64 %418, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %418, 12
  store i64 %297, i64* %PC, align 8
  %298 = load i64, i64* %392, align 8
  store i64 %298, i64* %RSI, align 8, !tbaa !2428
  %299 = shl i64 %298, 3
  %300 = add i64 %296, %299
  %301 = add i64 %418, 16
  store i64 %301, i64* %PC, align 8
  %302 = inttoptr i64 %300 to i64*
  %303 = load i64, i64* %302, align 8
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = add i64 %389, -56
  %305 = add i64 %418, 20
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  store i64 %303, i64* %306, align 8
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -8
  %309 = load i64, i64* %PC, align 8
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %308 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RCX, align 8, !tbaa !2428
  %313 = add i64 %309, 8
  store i64 %313, i64* %PC, align 8
  %314 = load i64, i64* %311, align 8
  store i64 %314, i64* %RSI, align 8, !tbaa !2428
  %315 = add i64 %307, -24
  %316 = add i64 %309, 12
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %RDI, align 8, !tbaa !2428
  %319 = inttoptr i64 %312 to i64*
  %320 = add i64 %309, 15
  store i64 %320, i64* %PC, align 8
  %321 = load i64, i64* %319, align 8
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = shl i64 %318, 3
  %323 = add i64 %322, %314
  %324 = add i64 %309, 19
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -24
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 4
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to i64*
  %331 = load i64, i64* %330, align 8
  store i64 %331, i64* %RDI, align 8, !tbaa !2428
  %332 = add i64 %326, -8
  %333 = add i64 %328, 8
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RSI, align 8, !tbaa !2428
  %336 = add i64 %326, -56
  %337 = add i64 %328, 12
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = add i64 %326, -64
  %341 = add i64 %328, 16
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  store i64 %339, i64* %342, align 8
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -64
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347, align 8
  store i64 %348, i64* %134, align 1, !tbaa !2452
  store double 0.000000e+00, double* %136, align 1, !tbaa !2452
  %349 = add i64 %345, 269
  %350 = add i64 %345, 10
  %351 = load i64, i64* %RSP, align 8, !tbaa !2428
  %352 = add i64 %351, -8
  %353 = inttoptr i64 %352 to i64*
  store i64 %350, i64* %353, align 8
  store i64 %352, i64* %RSP, align 8, !tbaa !2428
  store i64 %349, i64* %PC, align 8, !tbaa !2428
  %354 = tail call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* nonnull %0, i64 %349, %struct.Memory* %MEMORY.1)
  %355 = load i64, i64* %RBP, align 8
  %356 = add i64 %355, -24
  %357 = load i64, i64* %PC, align 8
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC, align 8
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359, align 8
  %361 = add i64 %360, -1
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = icmp ne i64 %360, 0
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %12, align 1, !tbaa !2433
  %364 = trunc i64 %361 to i32
  %365 = and i32 %364, 255
  %366 = tail call i32 @llvm.ctpop.i32(i32 %365) #9
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  store i8 %369, i8* %19, align 1, !tbaa !2447
  %370 = xor i64 %360, 16
  %371 = xor i64 %370, %361
  %372 = lshr i64 %371, 4
  %373 = trunc i64 %372 to i8
  %374 = and i8 %373, 1
  store i8 %374, i8* %24, align 1, !tbaa !2448
  %375 = icmp eq i64 %361, 0
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %27, align 1, !tbaa !2449
  %377 = lshr i64 %361, 63
  %378 = trunc i64 %377 to i8
  store i8 %378, i8* %30, align 1, !tbaa !2450
  %379 = lshr i64 %360, 63
  %380 = xor i64 %377, %379
  %381 = xor i64 %377, 1
  %382 = add nuw nsw i64 %380, %381
  %383 = icmp eq i64 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %36, align 1, !tbaa !2451
  %385 = add i64 %357, 12
  store i64 %385, i64* %PC, align 8
  store i64 %361, i64* %359, align 8
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, -88
  store i64 %387, i64* %PC, align 8, !tbaa !2428
  br label %block_4040e1

block_4040e1:                                     ; preds = %block_4040ec, %block_4040d5
  %388 = phi i64 [ %.pre9, %block_4040d5 ], [ %387, %block_4040ec ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4040d5 ], [ %354, %block_4040ec ]
  %389 = load i64, i64* %RBP, align 8
  %390 = add i64 %389, -24
  %391 = add i64 %388, 5
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = add i64 %393, -1
  %395 = icmp eq i64 %393, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %12, align 1, !tbaa !2433
  %397 = trunc i64 %394 to i32
  %398 = and i32 %397, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #9
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %19, align 1, !tbaa !2447
  %403 = xor i64 %394, %393
  %404 = lshr i64 %403, 4
  %405 = trunc i64 %404 to i8
  %406 = and i8 %405, 1
  store i8 %406, i8* %24, align 1, !tbaa !2448
  %407 = icmp eq i64 %394, 0
  %408 = zext i1 %407 to i8
  store i8 %408, i8* %27, align 1, !tbaa !2449
  %409 = lshr i64 %394, 63
  %410 = trunc i64 %409 to i8
  store i8 %410, i8* %30, align 1, !tbaa !2450
  %411 = lshr i64 %393, 63
  %412 = xor i64 %409, %411
  %413 = add nuw nsw i64 %412, %411
  %414 = icmp eq i64 %413, 2
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %36, align 1, !tbaa !2451
  %416 = icmp ne i8 %410, 0
  %417 = xor i1 %416, %414
  %.v10 = select i1 %417, i64 93, i64 11
  %418 = add i64 %388, %.v10
  store i64 %418, i64* %PC, align 8, !tbaa !2428
  br i1 %417, label %block_40413e, label %block_4040ec
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405e70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401cb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402680:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4026a8

block_402729:                                     ; preds = %block_4026a8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4026b8:                                     ; preds = %block_4026a8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 7440
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 11583
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 7826
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4026a8

block_4026a8:                                     ; preds = %block_4026b8, %block_402680
  %255 = phi i64 [ %.pre, %block_402680 ], [ %254, %block_4026b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402680 ], [ %222, %block_4026b8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4026b8, label %block_402729
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403590:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = bitcast i64* %RCX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_4035a0

block_4035d7:                                     ; preds = %block_4035a0
  %34 = add i64 %78, 1
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %78, 2
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4035a0:                                     ; preds = %block_4035ae, %block_403590
  %43 = phi i64 [ %140, %block_4035ae ], [ %.pre, %block_403590 ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 8
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %48, %52
  %54 = icmp ult i64 %48, %52
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %26, align 1, !tbaa !2433
  %56 = trunc i64 %53 to i32
  %57 = and i32 %56, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #9
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %27, align 1, !tbaa !2447
  %62 = xor i64 %52, %48
  %63 = xor i64 %62, %53
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  store i8 %66, i8* %28, align 1, !tbaa !2448
  %67 = icmp eq i64 %53, 0
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %29, align 1, !tbaa !2449
  %69 = lshr i64 %53, 63
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %30, align 1, !tbaa !2450
  %71 = lshr i64 %48, 63
  %72 = lshr i64 %52, 63
  %73 = xor i64 %72, %71
  %74 = xor i64 %69, %71
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %31, align 1, !tbaa !2451
  %.v = select i1 %67, i64 55, i64 14
  %78 = add i64 %43, %.v
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %67, label %block_4035d7, label %block_4035ae

block_4035ae:                                     ; preds = %block_4035a0
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = load i64, i64* %47, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %80, 8
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = icmp ugt i64 %80, -9
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %26, align 1, !tbaa !2433
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %27, align 1, !tbaa !2447
  %90 = xor i64 %81, %80
  %91 = lshr i64 %90, 4
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %28, align 1, !tbaa !2448
  %94 = icmp eq i64 %81, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %29, align 1, !tbaa !2449
  %96 = lshr i64 %81, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* %30, align 1, !tbaa !2450
  %98 = lshr i64 %80, 63
  %99 = xor i64 %96, %98
  %100 = add nuw nsw i64 %99, %96
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %31, align 1, !tbaa !2451
  %103 = add i64 %78, 15
  store i64 %103, i64* %PC, align 8
  store i64 %81, i64* %47, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -24
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RCX, align 8, !tbaa !2428
  %110 = add i64 %109, 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -9
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %26, align 1, !tbaa !2433
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #9
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %27, align 1, !tbaa !2447
  %119 = xor i64 %110, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %28, align 1, !tbaa !2448
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %30, align 1, !tbaa !2450
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2451
  %132 = add i64 %106, 15
  store i64 %132, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  %133 = load i64*, i64** %32, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %133, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64*, i64** %33, align 8
  %138 = add i64 %134, 6
  store i64 %138, i64* %PC, align 8
  store i64 %136, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_4035a0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400890___cxx_global_var_init_12(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_400890:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000) to i32), i32 255)) #9
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_4008ab

block_4008ab:                                     ; preds = %block_4008ab, %block_400890
  %47 = phi i64 [ %98, %block_4008ab ], [ %42, %block_400890 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5274
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2433
  store i8 %46, i8* %19, align 1, !tbaa !2447
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2448
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2449
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2450
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2433
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #9
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2447
  %80 = xor i64 %69, add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2448
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2449
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2450
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VDataMaster_type* @VDataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2451
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2449
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_4008ab, label %block_4008e0

block_4008e0:                                     ; preds = %block_4008ab
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2433
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2447
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2448
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2449
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2450
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2451
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401d10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast %union.anon* %3 to i64**
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %56 = bitcast i64* %55 to double*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40462c

block_404692:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -1
  %62 = add i64 %154, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i8*
  store i8 0, i8* %63, align 1
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 14
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br label %block_4046a4

block_404646:                                     ; preds = %block_40462c
  %66 = add i64 %218, -16
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %67 = add i64 %217, 122
  %68 = add i64 %217, 11
  %69 = load i64, i64* %RSP, align 8, !tbaa !2428
  %70 = add i64 %69, -8
  %71 = inttoptr i64 %70 to i64*
  store i64 %68, i64* %71, align 8
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  store i64 %67, i64* %PC, align 8, !tbaa !2428
  %72 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %67, %struct.Memory* %MEMORY.1)
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -48
  %75 = load i64, i64* %PC, align 8
  store i64 %74, i64* %RDI, align 8, !tbaa !2428
  %76 = load i64, i64* %RAX, align 8
  %77 = add i64 %75, 8
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %74 to i64*
  store i64 %76, i64* %78, align 8
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 215
  %81 = add i64 %79, 5
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %80, %struct.Memory* %MEMORY.1)
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -32
  %88 = load i64, i64* %PC, align 8
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %89 = load i64*, i64** %53, align 8
  %90 = add i64 %88, 10
  store i64 %90, i64* %PC, align 8
  %91 = load i64, i64* %89, align 8
  store i64 %91, i64* %54, align 1, !tbaa !2452
  store double 0.000000e+00, double* %56, align 1, !tbaa !2452
  %92 = add i64 %86, -64
  %93 = add i64 %88, 15
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 83
  %97 = add i64 %95, 5
  %98 = load i64, i64* %RSP, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %RSP, align 8, !tbaa !2428
  store i64 %96, i64* %PC, align 8, !tbaa !2428
  %101 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %96, %struct.Memory* %MEMORY.1)
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -56
  %104 = load i64, i64* %PC, align 8
  store i64 %103, i64* %RDI, align 8, !tbaa !2428
  %105 = load i64, i64* %RAX, align 8
  %106 = add i64 %104, 8
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  store i64 %105, i64* %107, align 8
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 182
  %110 = add i64 %108, 5
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !tbaa !2428
  %114 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %109, %struct.Memory* %MEMORY.1)
  %115 = load i64*, i64** %53, align 8
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC, align 8
  %118 = load i64, i64* %115, align 8
  store i64 %118, i64* %54, align 1, !tbaa !2452
  store double 0.000000e+00, double* %56, align 1, !tbaa !2452
  %119 = load i64, i64* %RBP, align 8
  %120 = add i64 %119, -64
  %121 = add i64 %116, 9
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %57, align 1, !tbaa !2452
  store double 0.000000e+00, double* %59, align 1, !tbaa !2452
  %124 = add i64 %116, 13
  store i64 %124, i64* %PC, align 8
  %125 = bitcast i64 %118 to double
  %.cast = bitcast i64 %123 to double
  %126 = fcmp uno double %125, %.cast
  br i1 %126, label %127, label %137

; <label>:127:                                    ; preds = %block_404646
  %128 = fadd double %125, %.cast
  %129 = bitcast double %128 to i64
  %130 = and i64 %129, 9221120237041090560
  %131 = icmp eq i64 %130, 9218868437227405312
  %132 = and i64 %129, 2251799813685247
  %133 = icmp ne i64 %132, 0
  %134 = and i1 %131, %133
  br i1 %134, label %135, label %143

; <label>:135:                                    ; preds = %127
  %136 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %124, %struct.Memory* %MEMORY.1) #12
  %.pre12 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:137:                                    ; preds = %block_404646
  %138 = fcmp ogt double %125, %.cast
  br i1 %138, label %143, label %139

; <label>:139:                                    ; preds = %137
  %140 = fcmp olt double %125, %.cast
  br i1 %140, label %143, label %141

; <label>:141:                                    ; preds = %139
  %142 = fcmp oeq double %125, %.cast
  br i1 %142, label %143, label %147

; <label>:143:                                    ; preds = %141, %139, %137, %127
  %144 = phi i8 [ 0, %137 ], [ 0, %139 ], [ 1, %141 ], [ 1, %127 ]
  %145 = phi i8 [ 0, %137 ], [ 0, %139 ], [ 0, %141 ], [ 1, %127 ]
  %146 = phi i8 [ 0, %137 ], [ 1, %139 ], [ 0, %141 ], [ 1, %127 ]
  store i8 %144, i8* %15, align 1, !tbaa !2432
  store i8 %145, i8* %13, align 1, !tbaa !2432
  store i8 %146, i8* %12, align 1, !tbaa !2432
  br label %147

; <label>:147:                                    ; preds = %143, %141
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 0, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %14, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %147, %135
  %148 = phi i64 [ %.pre12, %135 ], [ %124, %147 ]
  %149 = phi %struct.Memory* [ %136, %135 ], [ %MEMORY.1, %147 ]
  %150 = load i8, i8* %12, align 1, !tbaa !2433
  %151 = load i8, i8* %15, align 1, !tbaa !2449
  %152 = or i8 %151, %150
  %153 = icmp ne i8 %152, 0
  %.v18 = select i1 %153, i64 15, i64 6
  %154 = add i64 %148, %.v18
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br i1 %153, label %block_40469b, label %block_404692

block_40469b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %155 = add i64 %154, -111
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  br label %block_40462c

block_4046a4:                                     ; preds = %block_404641, %block_404692
  %156 = phi i64 [ %65, %block_404692 ], [ %.pre13, %block_404641 ]
  %MEMORY.0 = phi %struct.Memory* [ %149, %block_404692 ], [ %MEMORY.1, %block_404641 ]
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -1
  %159 = add i64 %156, 3
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i8*
  %161 = load i8, i8* %160, align 1
  %162 = and i8 %161, 1
  %163 = zext i8 %162 to i64
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = load i64, i64* %RSP, align 8
  %165 = add i64 %164, 64
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  %166 = icmp ugt i64 %164, -65
  %167 = zext i1 %166 to i8
  store i8 %167, i8* %12, align 1, !tbaa !2433
  %168 = trunc i64 %165 to i32
  %169 = and i32 %168, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #9
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %13, align 1, !tbaa !2447
  %174 = xor i64 %165, %164
  %175 = lshr i64 %174, 4
  %176 = trunc i64 %175 to i8
  %177 = and i8 %176, 1
  store i8 %177, i8* %14, align 1, !tbaa !2448
  %178 = icmp eq i64 %165, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %15, align 1, !tbaa !2449
  %180 = lshr i64 %165, 63
  %181 = trunc i64 %180 to i8
  store i8 %181, i8* %16, align 1, !tbaa !2450
  %182 = lshr i64 %164, 63
  %183 = xor i64 %180, %182
  %184 = add nuw nsw i64 %183, %180
  %185 = icmp eq i64 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %17, align 1, !tbaa !2451
  %187 = add i64 %156, 13
  store i64 %187, i64* %PC, align 8
  %188 = add i64 %164, 72
  %189 = inttoptr i64 %165 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RBP, align 8, !tbaa !2428
  store i64 %188, i64* %RSP, align 8, !tbaa !2428
  %191 = add i64 %156, 14
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %188 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %194 = add i64 %164, 80
  store i64 %194, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404641:                                     ; preds = %block_40462c
  %195 = add i64 %218, -1
  %196 = add i64 %217, 99
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i8*
  store i8 1, i8* %197, align 1
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_4046a4

block_40462c:                                     ; preds = %block_40469b, %block_404600
  %198 = phi i64 [ %.pre, %block_404600 ], [ %155, %block_40469b ]
  %MEMORY.1 = phi %struct.Memory* [ %46, %block_404600 ], [ %149, %block_40469b ]
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -16
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %199, -24
  store i64 %201, i64* %RSI, align 8, !tbaa !2428
  %202 = add i64 %198, 212
  %203 = add i64 %198, 13
  %204 = load i64, i64* %RSP, align 8, !tbaa !2428
  %205 = add i64 %204, -8
  %206 = inttoptr i64 %205 to i64*
  store i64 %203, i64* %206, align 8
  store i64 %205, i64* %RSP, align 8, !tbaa !2428
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  %207 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %202, %struct.Memory* %MEMORY.1)
  %208 = load i8, i8* %AL, align 1
  %209 = load i64, i64* %PC, align 8
  %210 = and i8 %208, 1
  store i8 0, i8* %12, align 1, !tbaa !2433
  %211 = zext i8 %210 to i32
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #9
  %213 = trunc i32 %212 to i8
  %214 = xor i8 %213, 1
  store i8 %214, i8* %13, align 1, !tbaa !2447
  %215 = xor i8 %210, 1
  store i8 %215, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %216 = icmp eq i8 %215, 0
  %.v = select i1 %216, i64 13, i64 8
  %217 = add i64 %209, %.v
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %218 = load i64, i64* %RBP, align 8
  br i1 %216, label %block_404646, label %block_404641
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402da0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %5, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %8, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, 1256
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -32
  %61 = load i64, i64* %RAX, align 8
  %62 = add i64 %58, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %63, align 8
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RAX, align 8, !tbaa !2428
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %71 = ashr i64 %69, 63
  store i64 %71, i64* %70, align 8, !tbaa !2428
  %72 = load i64, i64* %RCX, align 8
  %73 = add i64 %66, 9
  store i64 %73, i64* %PC, align 8
  %74 = sext i64 %72 to i128
  %75 = and i128 %74, -18446744073709551616
  %76 = zext i64 %71 to i128
  %77 = shl nuw i128 %76, 64
  %78 = zext i64 %69 to i128
  %79 = or i128 %78, %77
  %80 = zext i64 %72 to i128
  %81 = or i128 %75, %80
  %82 = sdiv i128 %79, %81
  %83 = trunc i128 %82 to i64
  %84 = and i128 %82, 18446744073709551615
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = or i128 %86, %84
  %88 = icmp eq i128 %82, %87
  br i1 %88, label %91, label %89

; <label>:89:                                     ; preds = %block_402da0
  %90 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %57) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:91:                                     ; preds = %block_402da0
  %92 = srem i128 %79, %81
  %93 = trunc i128 %92 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  store i64 %93, i64* %70, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %91, %89
  %94 = phi i64 [ %.pre7, %89 ], [ %64, %91 ]
  %95 = phi i64 [ %.pre6, %89 ], [ %73, %91 ]
  %96 = phi i64 [ %.pre, %89 ], [ %83, %91 ]
  %97 = phi %struct.Memory* [ %90, %89 ], [ %57, %91 ]
  %98 = add i64 %96, -1
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = icmp eq i64 %96, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %12, align 1, !tbaa !2433
  %101 = trunc i64 %98 to i32
  %102 = and i32 %101, 255
  %103 = tail call i32 @llvm.ctpop.i32(i32 %102) #9
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  store i8 %106, i8* %19, align 1, !tbaa !2447
  %107 = xor i64 %98, %96
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  store i8 %110, i8* %25, align 1, !tbaa !2448
  %111 = icmp eq i64 %98, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %28, align 1, !tbaa !2449
  %113 = lshr i64 %98, 63
  %114 = trunc i64 %113 to i8
  store i8 %114, i8* %31, align 1, !tbaa !2450
  %115 = lshr i64 %96, 63
  %116 = xor i64 %113, %115
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %37, align 1, !tbaa !2451
  %120 = add i64 %94, -24
  %121 = add i64 %95, 8
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i64*
  store i64 %98, i64* %122, align 8
  %123 = bitcast i64* %RAX to i64**
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %126 = bitcast i64* %125 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_402ddf

block_402ddf:                                     ; preds = %block_402dea, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %127 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %276, %block_402dea ]
  %MEMORY.0 = phi %struct.Memory* [ %97, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %243, %block_402dea ]
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -24
  %130 = add i64 %127, 5
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %133 = trunc i64 %132 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #9
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  %139 = icmp eq i64 %132, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %28, align 1, !tbaa !2449
  %141 = lshr i64 %132, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  %143 = icmp ne i8 %142, 0
  %.v = select i1 %143, i64 94, i64 6
  %144 = add i64 %130, %.v
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  br i1 %143, label %block_402e42, label %block_402dea

block_402e42:                                     ; preds = %block_402ddf
  %145 = add i64 %128, -32
  %146 = add i64 %144, 4
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = add i64 %148, -1
  store i64 %149, i64* %RAX, align 8, !tbaa !2428
  %150 = icmp eq i64 %148, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %12, align 1, !tbaa !2433
  %152 = trunc i64 %149 to i32
  %153 = and i32 %152, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #9
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* %19, align 1, !tbaa !2447
  %158 = xor i64 %149, %148
  %159 = lshr i64 %158, 4
  %160 = trunc i64 %159 to i8
  %161 = and i8 %160, 1
  store i8 %161, i8* %25, align 1, !tbaa !2448
  %162 = icmp eq i64 %149, 0
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %28, align 1, !tbaa !2449
  %164 = lshr i64 %149, 63
  %165 = trunc i64 %164 to i8
  store i8 %165, i8* %31, align 1, !tbaa !2450
  %166 = lshr i64 %148, 63
  %167 = xor i64 %164, %166
  %168 = add nuw nsw i64 %167, %166
  %169 = icmp eq i64 %168, 2
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %37, align 1, !tbaa !2451
  %171 = add i64 %144, 12
  store i64 %171, i64* %PC, align 8
  store i64 %149, i64* %131, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402e4e

block_402dea:                                     ; preds = %block_402ddf
  %172 = add i64 %128, -8
  store i64 %172, i64* %RDI, align 8, !tbaa !2428
  %173 = add i64 %144, 8
  store i64 %173, i64* %PC, align 8
  %174 = load i64, i64* %131, align 8
  store i64 %174, i64* %RSI, align 8, !tbaa !2428
  %175 = add i64 %144, 1254
  %176 = add i64 %144, 13
  %177 = load i64, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179, align 8
  store i64 %178, i64* %RSP, align 8, !tbaa !2428
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %180 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %175, %struct.Memory* %MEMORY.0)
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -48
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = load i64, i64* %RAX, align 8
  %185 = add i64 %183, 8
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %182 to i64*
  store i64 %184, i64* %186, align 8
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, 641
  %189 = add i64 %187, 5
  %190 = load i64, i64* %RSP, align 8, !tbaa !2428
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %189, i64* %192, align 8
  store i64 %191, i64* %RSP, align 8, !tbaa !2428
  store i64 %188, i64* %PC, align 8, !tbaa !2428
  %193 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %188, %struct.Memory* %MEMORY.0)
  %194 = load i64*, i64** %123, align 8
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %194, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -40
  %200 = add i64 %195, 7
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %201, align 8
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -32
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %208 = add i64 %202, -8
  %209 = add i64 %204, 8
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %202, -56
  %213 = add i64 %204, 12
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i64*
  store i64 %211, i64* %214, align 8
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -24
  %217 = load i64, i64* %PC, align 8
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %RDX, align 8, !tbaa !2428
  %221 = add i64 %215, -40
  %222 = add i64 %217, 8
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = add i64 %215, -64
  %226 = add i64 %217, 12
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i64*
  store i64 %224, i64* %227, align 8
  %228 = load i64, i64* %RBP, align 8
  %229 = add i64 %228, -56
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %229 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %RSI, align 8, !tbaa !2428
  %234 = add i64 %228, -64
  %235 = add i64 %230, 9
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %124, align 1, !tbaa !2452
  store double 0.000000e+00, double* %126, align 1, !tbaa !2452
  %238 = add i64 %230, 1245
  %239 = add i64 %230, 14
  %240 = load i64, i64* %RSP, align 8, !tbaa !2428
  %241 = add i64 %240, -8
  %242 = inttoptr i64 %241 to i64*
  store i64 %239, i64* %242, align 8
  store i64 %241, i64* %RSP, align 8, !tbaa !2428
  store i64 %238, i64* %PC, align 8, !tbaa !2428
  %243 = tail call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* nonnull %0, i64 %238, %struct.Memory* %MEMORY.0)
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -24
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = add i64 %249, -1
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = icmp ne i64 %249, 0
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %12, align 1, !tbaa !2433
  %253 = trunc i64 %250 to i32
  %254 = and i32 %253, 255
  %255 = tail call i32 @llvm.ctpop.i32(i32 %254) #9
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  store i8 %258, i8* %19, align 1, !tbaa !2447
  %259 = xor i64 %249, 16
  %260 = xor i64 %259, %250
  %261 = lshr i64 %260, 4
  %262 = trunc i64 %261 to i8
  %263 = and i8 %262, 1
  store i8 %263, i8* %25, align 1, !tbaa !2448
  %264 = icmp eq i64 %250, 0
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %28, align 1, !tbaa !2449
  %266 = lshr i64 %250, 63
  %267 = trunc i64 %266 to i8
  store i8 %267, i8* %31, align 1, !tbaa !2450
  %268 = lshr i64 %249, 63
  %269 = xor i64 %266, %268
  %270 = xor i64 %266, 1
  %271 = add nuw nsw i64 %269, %270
  %272 = icmp eq i64 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %37, align 1, !tbaa !2451
  %274 = add i64 %246, 12
  store i64 %274, i64* %PC, align 8
  store i64 %250, i64* %248, align 8
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, -94
  store i64 %276, i64* %PC, align 8, !tbaa !2428
  br label %block_402ddf

block_402e59:                                     ; preds = %block_402e4e
  %277 = add i64 %429, -8
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %278 = add i64 %458, 8
  store i64 %278, i64* %PC, align 8
  %279 = load i64, i64* %432, align 8
  store i64 %279, i64* %RSI, align 8, !tbaa !2428
  %280 = add i64 %458, 1143
  %281 = add i64 %458, 13
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %280, %struct.Memory* %MEMORY.1)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -80
  %288 = load i64, i64* %PC, align 8
  store i64 %287, i64* %RDI, align 8, !tbaa !2428
  %289 = load i64, i64* %RAX, align 8
  %290 = add i64 %288, 8
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  store i64 %289, i64* %291, align 8
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, 530
  %294 = add i64 %292, 5
  %295 = load i64, i64* %RSP, align 8, !tbaa !2428
  %296 = add i64 %295, -8
  %297 = inttoptr i64 %296 to i64*
  store i64 %294, i64* %297, align 8
  store i64 %296, i64* %RSP, align 8, !tbaa !2428
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  %298 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %293, %struct.Memory* %MEMORY.1)
  %299 = load i64, i64* %RBP, align 8
  %300 = add i64 %299, -8
  %301 = load i64, i64* %PC, align 8
  store i64 %300, i64* %RDI, align 8, !tbaa !2428
  %302 = load i64*, i64** %123, align 8
  %303 = add i64 %301, 7
  store i64 %303, i64* %PC, align 8
  %304 = load i64, i64* %302, align 8
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = add i64 %299, -72
  %306 = add i64 %301, 11
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i64*
  store i64 %304, i64* %307, align 8
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, 514
  %310 = add i64 %308, 5
  %311 = load i64, i64* %RSP, align 8, !tbaa !2428
  %312 = add i64 %311, -8
  %313 = inttoptr i64 %312 to i64*
  store i64 %310, i64* %313, align 8
  store i64 %312, i64* %RSP, align 8, !tbaa !2428
  store i64 %309, i64* %PC, align 8, !tbaa !2428
  %314 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %309, %struct.Memory* %MEMORY.1)
  %315 = load i64, i64* %RBP, align 8
  %316 = add i64 %315, -8
  %317 = load i64, i64* %PC, align 8
  store i64 %316, i64* %RDI, align 8, !tbaa !2428
  %318 = add i64 %315, -24
  %319 = add i64 %317, 8
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RSI, align 8, !tbaa !2428
  %322 = add i64 %315, -112
  %323 = load i64, i64* %RAX, align 8
  %324 = add i64 %317, 12
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %325, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 1089
  %328 = add i64 %326, 5
  %329 = load i64, i64* %RSP, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %328, i64* %331, align 8
  store i64 %330, i64* %RSP, align 8, !tbaa !2428
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  %332 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %327, %struct.Memory* %MEMORY.1)
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -88
  %335 = load i64, i64* %PC, align 8
  store i64 %334, i64* %RDI, align 8, !tbaa !2428
  %336 = load i64, i64* %RAX, align 8
  %337 = add i64 %335, 8
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %334 to i64*
  store i64 %336, i64* %338, align 8
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 484
  %341 = add i64 %339, 5
  %342 = load i64, i64* %RSP, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %341, i64* %344, align 8
  store i64 %343, i64* %RSP, align 8, !tbaa !2428
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  %345 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %340, %struct.Memory* %MEMORY.1)
  %346 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %347 = load i64, i64* %RBP, align 8
  %348 = add i64 %347, -112
  %349 = add i64 %346, 8
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  %351 = load i64, i64* %350, align 8
  store i64 %351, i64* %RSI, align 8, !tbaa !2428
  %352 = add i64 %346, 11
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %RDI, align 8, !tbaa !2428
  %355 = load i64*, i64** %123, align 8
  %356 = add i64 %346, 14
  store i64 %356, i64* %PC, align 8
  store i64 %354, i64* %355, align 8
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -24
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %357, -8
  %364 = add i64 %359, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = add i64 %357, -96
  %368 = add i64 %359, 12
  store i64 %368, i64* %PC, align 8
  %369 = inttoptr i64 %367 to i64*
  store i64 %366, i64* %369, align 8
  %370 = load i64, i64* %RBP, align 8
  %371 = add i64 %370, -72
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %371 to i64*
  %375 = load i64, i64* %374, align 8
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = add i64 %370, -104
  %377 = add i64 %372, 8
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i64*
  store i64 %375, i64* %378, align 8
  %379 = load i64, i64* %RBP, align 8
  %380 = add i64 %379, -96
  %381 = load i64, i64* %PC, align 8
  %382 = add i64 %381, 4
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %380 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %RSI, align 8, !tbaa !2428
  %385 = add i64 %379, -104
  %386 = add i64 %381, 9
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %385 to i64*
  %388 = load i64, i64* %387, align 8
  store i64 %388, i64* %124, align 1, !tbaa !2452
  store double 0.000000e+00, double* %126, align 1, !tbaa !2452
  %389 = add i64 %381, 1085
  %390 = add i64 %381, 14
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.1)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -24
  %397 = load i64, i64* %PC, align 8
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, -1
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp ne i64 %400, 0
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %12, align 1, !tbaa !2433
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #9
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %19, align 1, !tbaa !2447
  %410 = xor i64 %400, 16
  %411 = xor i64 %410, %401
  %412 = lshr i64 %411, 4
  %413 = trunc i64 %412 to i8
  %414 = and i8 %413, 1
  store i8 %414, i8* %25, align 1, !tbaa !2448
  %415 = icmp eq i64 %401, 0
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %28, align 1, !tbaa !2449
  %417 = lshr i64 %401, 63
  %418 = trunc i64 %417 to i8
  store i8 %418, i8* %31, align 1, !tbaa !2450
  %419 = lshr i64 %400, 63
  %420 = xor i64 %417, %419
  %421 = xor i64 %417, 1
  %422 = add nuw nsw i64 %420, %421
  %423 = icmp eq i64 %422, 2
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %37, align 1, !tbaa !2451
  %425 = add i64 %397, 12
  store i64 %425, i64* %PC, align 8
  store i64 %401, i64* %399, align 8
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, -143
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  br label %block_402e4e

block_402e4e:                                     ; preds = %block_402e59, %block_402e42
  %428 = phi i64 [ %.pre9, %block_402e42 ], [ %427, %block_402e59 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_402e42 ], [ %394, %block_402e59 ]
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -24
  %431 = add i64 %428, 5
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = add i64 %433, -1
  %435 = icmp eq i64 %433, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %12, align 1, !tbaa !2433
  %437 = trunc i64 %434 to i32
  %438 = and i32 %437, 255
  %439 = tail call i32 @llvm.ctpop.i32(i32 %438) #9
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  store i8 %442, i8* %19, align 1, !tbaa !2447
  %443 = xor i64 %434, %433
  %444 = lshr i64 %443, 4
  %445 = trunc i64 %444 to i8
  %446 = and i8 %445, 1
  store i8 %446, i8* %25, align 1, !tbaa !2448
  %447 = icmp eq i64 %434, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %28, align 1, !tbaa !2449
  %449 = lshr i64 %434, 63
  %450 = trunc i64 %449 to i8
  store i8 %450, i8* %31, align 1, !tbaa !2450
  %451 = lshr i64 %433, 63
  %452 = xor i64 %449, %451
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %37, align 1, !tbaa !2451
  %456 = icmp ne i8 %450, 0
  %457 = xor i1 %456, %454
  %.v10 = select i1 %457, i64 148, i64 11
  %458 = add i64 %428, %.v10
  store i64 %458, i64* %PC, align 8, !tbaa !2428
  br i1 %457, label %block_402ee2, label %block_402e59

block_402ee2:                                     ; preds = %block_402e4e
  %459 = load i64, i64* %RSP, align 8
  %460 = add i64 %459, 112
  store i64 %460, i64* %RSP, align 8, !tbaa !2428
  %461 = icmp ugt i64 %459, -113
  %462 = zext i1 %461 to i8
  store i8 %462, i8* %12, align 1, !tbaa !2433
  %463 = trunc i64 %460 to i32
  %464 = and i32 %463, 255
  %465 = tail call i32 @llvm.ctpop.i32(i32 %464) #9
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  store i8 %468, i8* %19, align 1, !tbaa !2447
  %469 = xor i64 %459, 16
  %470 = xor i64 %469, %460
  %471 = lshr i64 %470, 4
  %472 = trunc i64 %471 to i8
  %473 = and i8 %472, 1
  store i8 %473, i8* %25, align 1, !tbaa !2448
  %474 = icmp eq i64 %460, 0
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %28, align 1, !tbaa !2449
  %476 = lshr i64 %460, 63
  %477 = trunc i64 %476 to i8
  store i8 %477, i8* %31, align 1, !tbaa !2450
  %478 = lshr i64 %459, 63
  %479 = xor i64 %476, %478
  %480 = add nuw nsw i64 %479, %476
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %37, align 1, !tbaa !2451
  %483 = add i64 %458, 5
  store i64 %483, i64* %PC, align 8
  %484 = add i64 %459, 120
  %485 = inttoptr i64 %460 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %RBP, align 8, !tbaa !2428
  store i64 %484, i64* %RSP, align 8, !tbaa !2428
  %487 = add i64 %458, 6
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %484 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %PC, align 8, !tbaa !2428
  %490 = add i64 %459, 128
  store i64 %490, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404bc0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 64
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i8, i8* %AL, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = and i8 %64, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #9
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i8 %66, 1
  store i8 %71, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %72 = icmp eq i8 %71, 0
  %.v = select i1 %72, i64 35, i64 8
  %73 = add i64 %65, %.v
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  br i1 %72, label %block_404c00, label %block_404be5

block_404be5:                                     ; preds = %block_404bc0
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %74 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %75 = zext i32 %74 to i64
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %76 = add i64 %73, -17653
  %77 = add i64 %73, 24
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %63)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -20
  %84 = load i32, i32* %EAX, align 4
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %87, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_404c00

block_404c00:                                     ; preds = %block_404be5, %block_404bc0
  %88 = phi i64 [ %73, %block_404bc0 ], [ %.pre, %block_404be5 ]
  %MEMORY.0 = phi %struct.Memory* [ %63, %block_404bc0 ], [ %81, %block_404be5 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 32
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -33
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #9
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2447
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2448
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2449
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2450
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2451
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 40
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400680__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400680:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_608ff0__got_type* @seg_608ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2433
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #9
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2447
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2449
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2450
  store i8 0, i8* %10, align 1, !tbaa !2451
  store i8 0, i8* %7, align 1, !tbaa !2448
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400692, label %block_400690

block_400690:                                     ; preds = %block_400680
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400692

block_400692:                                     ; preds = %block_400690, %block_400680
  %27 = phi i64 [ %22, %block_400680 ], [ %.pre1, %block_400690 ]
  %28 = phi i64 [ %4, %block_400680 ], [ %.pre, %block_400690 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400680 ], [ %26, %block_400690 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2433
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #9
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2447
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2448
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2449
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2450
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2451
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405310:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -8
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = sub i64 %54, %58
  %60 = ashr i64 %59, 3
  store i64 %60, i64* %RSI, align 8, !tbaa !2428
  %61 = icmp eq i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = lshr i64 %60, 63
  %64 = add nsw i64 %60, -1
  store i8 %62, i8* %13, align 1, !tbaa !2433
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %20, align 1, !tbaa !2447
  %71 = xor i64 %64, %60
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2448
  %75 = icmp eq i64 %64, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2449
  %77 = lshr i64 %64, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2450
  %79 = xor i64 %77, %63
  %80 = add nuw nsw i64 %79, %63
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2451
  %83 = icmp ne i8 %78, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %75, %84
  %.v = select i1 %85, i64 266, i64 25
  %86 = add i64 %51, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_40542a, label %block_405339

block_4053d4:                                     ; preds = %block_4053b0
  %87 = add i64 %266, 46
  br label %block_405402

block_405359:                                     ; preds = %block_405359, %block_405354
  %.sink = phi i64 [ %434, %block_405354 ], [ %137, %block_405359 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_405354 ], [ %126, %block_405359 ]
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %88, -40
  %91 = add i64 %.sink, 8
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, -8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, 7
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %13, align 1, !tbaa !2433
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #9
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %20, align 1, !tbaa !2447
  %103 = xor i64 %93, 16
  %104 = xor i64 %103, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %26, align 1, !tbaa !2448
  %108 = icmp eq i64 %94, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %29, align 1, !tbaa !2449
  %110 = lshr i64 %94, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %32, align 1, !tbaa !2450
  %112 = lshr i64 %93, 63
  %113 = xor i64 %110, %112
  %114 = xor i64 %110, 1
  %115 = add nuw nsw i64 %113, %114
  %116 = icmp eq i64 %115, 2
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %38, align 1, !tbaa !2451
  %118 = add i64 %.sink, 16
  store i64 %118, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %119 = load i64, i64* %RAX, align 8
  %120 = load i64, i64* %PC, align 8
  store i64 %119, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %120, -8473
  %122 = add i64 %120, 8
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %MEMORY.0)
  %127 = load i8, i8* %AL, align 1
  %128 = load i64, i64* %PC, align 8
  %129 = and i8 %127, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %130 = zext i8 %129 to i32
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #9
  %132 = trunc i32 %131 to i8
  %133 = xor i8 %132, 1
  store i8 %133, i8* %20, align 1, !tbaa !2447
  %134 = xor i8 %129, 1
  store i8 %134, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %135 = icmp eq i8 %134, 0
  %.v32 = select i1 %135, i64 13, i64 8
  %136 = add i64 %128, %.v32
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %137 = add i64 %136, -37
  br i1 %135, label %block_405359, label %block_405379

block_4053d9:                                     ; preds = %block_4053b0
  %138 = add i64 %266, 4
  store i64 %138, i64* %PC, align 8
  %139 = load i64, i64* %239, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %266, 7
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = add i64 %197, -48
  %144 = add i64 %266, 11
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  store i64 %142, i64* %145, align 8
  %146 = load i64, i64* %RBP, align 8
  %147 = add i64 %146, -32
  %148 = load i64, i64* %PC, align 8
  %149 = add i64 %148, 4
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %146, -40
  %153 = add i64 %148, 8
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RCX, align 8, !tbaa !2428
  %156 = inttoptr i64 %151 to i64*
  %157 = add i64 %148, 11
  store i64 %157, i64* %PC, align 8
  %158 = load i64, i64* %156, align 8
  store i64 %158, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %155 to i64*
  %159 = add i64 %148, 14
  store i64 %159, i64* %PC, align 8
  store i64 %158, i64* %.cast, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -32
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = add i64 %160, -48
  %167 = add i64 %162, 8
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RCX, align 8, !tbaa !2428
  %170 = inttoptr i64 %165 to i64*
  %171 = add i64 %162, 11
  store i64 %171, i64* %PC, align 8
  store i64 %169, i64* %170, align 8
  %172 = load i64, i64* %PC, align 8
  %173 = add i64 %172, -169
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  br label %block_405354

block_405396:                                     ; preds = %block_405379
  %174 = add i64 %233, 5
  br label %block_40539b

block_40539b:                                     ; preds = %block_4053b5, %block_405396
  %175 = phi i64 [ %.pre30, %block_4053b5 ], [ %199, %block_405396 ]
  %.sink8 = phi i64 [ %357, %block_4053b5 ], [ %174, %block_405396 ]
  %MEMORY.1 = phi %struct.Memory* [ %186, %block_4053b5 ], [ %126, %block_405396 ]
  %176 = add i64 %175, -24
  store i64 %176, i64* %RSI, align 8, !tbaa !2428
  %177 = add i64 %175, -32
  %178 = add i64 %.sink8, 8
  store i64 %178, i64* %PC, align 8
  %179 = inttoptr i64 %177 to i64*
  %180 = load i64, i64* %179, align 8
  store i64 %180, i64* %RDI, align 8, !tbaa !2428
  %181 = add i64 %.sink8, -8523
  %182 = add i64 %.sink8, 13
  %183 = load i64, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %183, -8
  %185 = inttoptr i64 %184 to i64*
  store i64 %182, i64* %185, align 8
  store i64 %184, i64* %RSP, align 8, !tbaa !2428
  store i64 %181, i64* %PC, align 8, !tbaa !2428
  %186 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %181, %struct.Memory* %MEMORY.1)
  %187 = load i8, i8* %AL, align 1
  %188 = load i64, i64* %PC, align 8
  %189 = and i8 %187, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %190 = zext i8 %189 to i32
  %191 = tail call i32 @llvm.ctpop.i32(i32 %190) #9
  %192 = trunc i32 %191 to i8
  %193 = xor i8 %192, 1
  store i8 %193, i8* %20, align 1, !tbaa !2447
  %194 = xor i8 %189, 1
  store i8 %194, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %195 = icmp eq i8 %194, 0
  %.v34 = select i1 %195, i64 13, i64 8
  %196 = add i64 %188, %.v34
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -32
  br i1 %195, label %block_4053b5, label %block_4053b0

block_405379:                                     ; preds = %block_405359
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -32
  %201 = add i64 %136, 14
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %199, -40
  %205 = add i64 %136, 18
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = sub i64 %203, %207
  %209 = icmp ult i64 %203, %207
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %13, align 1, !tbaa !2433
  %211 = trunc i64 %208 to i32
  %212 = and i32 %211, 255
  %213 = tail call i32 @llvm.ctpop.i32(i32 %212) #9
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = xor i8 %215, 1
  store i8 %216, i8* %20, align 1, !tbaa !2447
  %217 = xor i64 %207, %203
  %218 = xor i64 %217, %208
  %219 = lshr i64 %218, 4
  %220 = trunc i64 %219 to i8
  %221 = and i8 %220, 1
  store i8 %221, i8* %26, align 1, !tbaa !2448
  %222 = icmp eq i64 %208, 0
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %29, align 1, !tbaa !2449
  %224 = lshr i64 %208, 63
  %225 = trunc i64 %224 to i8
  store i8 %225, i8* %32, align 1, !tbaa !2450
  %226 = lshr i64 %203, 63
  %227 = lshr i64 %207, 63
  %228 = xor i64 %227, %226
  %229 = xor i64 %224, %226
  %230 = add nuw nsw i64 %229, %228
  %231 = icmp eq i64 %230, 2
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %38, align 1, !tbaa !2451
  %.v33 = select i1 %209, i64 29, i64 24
  %233 = add i64 %136, %.v33
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  br i1 %209, label %block_405396, label %block_405391

block_4053b0:                                     ; preds = %block_40539b
  %234 = add i64 %196, 26
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %198 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = add i64 %197, -40
  %238 = add i64 %196, 30
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = sub i64 %236, %240
  %242 = icmp ult i64 %236, %240
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %13, align 1, !tbaa !2433
  %244 = trunc i64 %241 to i32
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #9
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %20, align 1, !tbaa !2447
  %250 = xor i64 %240, %236
  %251 = xor i64 %250, %241
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %26, align 1, !tbaa !2448
  %255 = icmp eq i64 %241, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %29, align 1, !tbaa !2449
  %257 = lshr i64 %241, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %32, align 1, !tbaa !2450
  %259 = lshr i64 %236, 63
  %260 = lshr i64 %240, 63
  %261 = xor i64 %260, %259
  %262 = xor i64 %257, %259
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %38, align 1, !tbaa !2451
  %.v35 = select i1 %242, i64 41, i64 36
  %266 = add i64 %196, %.v35
  store i64 %266, i64* %PC, align 8, !tbaa !2428
  br i1 %242, label %block_4053d9, label %block_4053d4

block_405339:                                     ; preds = %block_405310
  %267 = load i64, i64* %RBP, align 8
  %268 = add i64 %267, -8
  %269 = add i64 %86, 4
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = add i64 %86, 7
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  store i64 %274, i64* %RAX, align 8, !tbaa !2428
  %275 = add i64 %267, -24
  %276 = add i64 %86, 11
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %275 to i64*
  store i64 %274, i64* %277, align 8
  %278 = load i64, i64* %RBP, align 8
  %279 = add i64 %278, -8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %279 to i64*
  %283 = load i64, i64* %282, align 8
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = add i64 %278, -32
  %285 = add i64 %280, 8
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i64*
  store i64 %283, i64* %286, align 8
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -16
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = add i64 %287, -40
  %294 = add i64 %289, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  store i64 %292, i64* %295, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405354

block_405391:                                     ; preds = %block_405379
  %296 = add i64 %233, 113
  br label %block_405402

block_40542a:                                     ; preds = %block_405402, %block_405310
  %297 = phi i64 [ %86, %block_405310 ], [ %.pre31, %block_405402 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405310 ], [ %432, %block_405402 ]
  %298 = load i64, i64* %RSP, align 8
  %299 = add i64 %298, 48
  store i64 %299, i64* %RSP, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, -49
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %13, align 1, !tbaa !2433
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #9
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %20, align 1, !tbaa !2447
  %308 = xor i64 %298, 16
  %309 = xor i64 %308, %299
  %310 = lshr i64 %309, 4
  %311 = trunc i64 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %26, align 1, !tbaa !2448
  %313 = icmp eq i64 %299, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %29, align 1, !tbaa !2449
  %315 = lshr i64 %299, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %32, align 1, !tbaa !2450
  %317 = lshr i64 %298, 63
  %318 = xor i64 %315, %317
  %319 = add nuw nsw i64 %318, %315
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %38, align 1, !tbaa !2451
  %322 = add i64 %297, 5
  store i64 %322, i64* %PC, align 8
  %323 = add i64 %298, 56
  %324 = inttoptr i64 %299 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %RBP, align 8, !tbaa !2428
  store i64 %323, i64* %RSP, align 8, !tbaa !2428
  %326 = add i64 %297, 6
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %323 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %PC, align 8, !tbaa !2428
  %329 = add i64 %298, 64
  store i64 %329, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4053b5:                                     ; preds = %block_40539b
  %330 = add i64 %196, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %198 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = add i64 %332, 8
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = icmp ugt i64 %332, -9
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %13, align 1, !tbaa !2433
  %336 = trunc i64 %333 to i32
  %337 = and i32 %336, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337) #9
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %20, align 1, !tbaa !2447
  %342 = xor i64 %333, %332
  %343 = lshr i64 %342, 4
  %344 = trunc i64 %343 to i8
  %345 = and i8 %344, 1
  store i8 %345, i8* %26, align 1, !tbaa !2448
  %346 = icmp eq i64 %333, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %29, align 1, !tbaa !2449
  %348 = lshr i64 %333, 63
  %349 = trunc i64 %348 to i8
  store i8 %349, i8* %32, align 1, !tbaa !2450
  %350 = lshr i64 %332, 63
  %351 = xor i64 %348, %350
  %352 = add nuw nsw i64 %351, %348
  %353 = icmp eq i64 %352, 2
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %38, align 1, !tbaa !2451
  %355 = add i64 %196, 12
  store i64 %355, i64* %PC, align 8
  store i64 %333, i64* %331, align 8
  %356 = load i64, i64* %PC, align 8
  %357 = add i64 %356, -38
  %.pre30 = load i64, i64* %RBP, align 8
  br label %block_40539b

block_405402:                                     ; preds = %block_405391, %block_4053d4
  %358 = phi i64 [ %199, %block_405391 ], [ %197, %block_4053d4 ]
  %.sink4 = phi i64 [ %296, %block_405391 ], [ %87, %block_4053d4 ]
  %MEMORY.3 = phi %struct.Memory* [ %126, %block_405391 ], [ %186, %block_4053d4 ]
  %359 = add i64 %358, -8
  %360 = add i64 %.sink4, 4
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDI, align 8, !tbaa !2428
  %363 = add i64 %358, -40
  %364 = add i64 %.sink4, 8
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %366, 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = icmp ugt i64 %366, -9
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %13, align 1, !tbaa !2433
  %370 = trunc i64 %367 to i32
  %371 = and i32 %370, 255
  %372 = tail call i32 @llvm.ctpop.i32(i32 %371) #9
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %20, align 1, !tbaa !2447
  %376 = xor i64 %367, %366
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %26, align 1, !tbaa !2448
  %380 = icmp eq i64 %367, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %29, align 1, !tbaa !2449
  %382 = lshr i64 %367, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %32, align 1, !tbaa !2450
  %384 = lshr i64 %366, 63
  %385 = xor i64 %382, %384
  %386 = add nuw nsw i64 %385, %382
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %38, align 1, !tbaa !2451
  store i64 %367, i64* %RSI, align 8, !tbaa !2428
  %389 = add i64 %.sink4, -242
  %390 = add i64 %.sink4, 20
  %391 = load i64, i64* %RSP, align 8, !tbaa !2428
  %392 = add i64 %391, -8
  %393 = inttoptr i64 %392 to i64*
  store i64 %390, i64* %393, align 8
  store i64 %392, i64* %RSP, align 8, !tbaa !2428
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %394 = tail call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* nonnull %0, i64 %389, %struct.Memory* %MEMORY.3)
  %395 = load i64, i64* %RBP, align 8
  %396 = add i64 %395, -40
  %397 = load i64, i64* %PC, align 8
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp ugt i64 %400, -9
  %403 = zext i1 %402 to i8
  store i8 %403, i8* %13, align 1, !tbaa !2433
  %404 = trunc i64 %401 to i32
  %405 = and i32 %404, 255
  %406 = tail call i32 @llvm.ctpop.i32(i32 %405) #9
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  store i8 %409, i8* %20, align 1, !tbaa !2447
  %410 = xor i64 %401, %400
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2448
  %414 = icmp eq i64 %401, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %29, align 1, !tbaa !2449
  %416 = lshr i64 %401, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %32, align 1, !tbaa !2450
  %418 = lshr i64 %400, 63
  %419 = xor i64 %416, %418
  %420 = add nuw nsw i64 %419, %416
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %38, align 1, !tbaa !2451
  %423 = add i64 %395, -16
  %424 = add i64 %397, 12
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RSI, align 8, !tbaa !2428
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %427 = add i64 %397, -262
  %428 = add i64 %397, 20
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* nonnull %0, i64 %427, %struct.Memory* %394)
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_40542a

block_405354:                                     ; preds = %block_405339, %block_4053d9
  %433 = phi i64 [ %.pre, %block_405339 ], [ %173, %block_4053d9 ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_405339 ], [ %186, %block_4053d9 ]
  %434 = add i64 %433, 5
  br label %block_405359
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = load i64, i64* %RSP, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %6, i64* %10, align 8
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -104
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %8, -32
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %20 = add i64 %8, -16
  %21 = load i64, i64* %RDI, align 8
  %22 = add i64 %11, 17
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -16
  %26 = load i64, i64* %RSI, align 8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %30, -24
  %37 = add i64 %32, 8
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %38, align 8
  %39 = load i64, i64* %RAX, align 8
  %40 = load i64, i64* %PC, align 8
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %41 = load i32, i32* %ECX, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RSI, align 8, !tbaa !2428
  %43 = add i64 %40, -10078
  %44 = add i64 %40, 10
  %45 = load i64, i64* %RSP, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %44, i64* %47, align 8
  store i64 %46, i64* %RSP, align 8, !tbaa !2428
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %48 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %43, %struct.Memory* %2)
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RAX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_40577c

block_4057d2:                                     ; preds = %block_4057b6
  %56 = add i64 %262, 37
  store i64 %56, i64* %PC, align 8, !tbaa !2428
  br label %block_4057f7

block_405791:                                     ; preds = %block_40577c
  %57 = load i64, i64* %RSP, align 8
  %58 = add i64 %57, 96
  store i64 %58, i64* %RSP, align 8, !tbaa !2428
  %59 = icmp ugt i64 %57, -97
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %13, align 1, !tbaa !2433
  %61 = trunc i64 %58 to i32
  %62 = and i32 %61, 255
  %63 = tail call i32 @llvm.ctpop.i32(i32 %62) #9
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  store i8 %66, i8* %14, align 1, !tbaa !2447
  %67 = xor i64 %58, %57
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  store i8 %70, i8* %15, align 1, !tbaa !2448
  %71 = icmp eq i64 %58, 0
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %16, align 1, !tbaa !2449
  %73 = lshr i64 %58, 63
  %74 = trunc i64 %73 to i8
  store i8 %74, i8* %17, align 1, !tbaa !2450
  %75 = lshr i64 %57, 63
  %76 = xor i64 %73, %75
  %77 = add nuw nsw i64 %76, %73
  %78 = icmp eq i64 %77, 2
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %18, align 1, !tbaa !2451
  %80 = add i64 %107, 209
  store i64 %80, i64* %PC, align 8
  %81 = add i64 %57, 104
  %82 = inttoptr i64 %58 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RBP, align 8, !tbaa !2428
  store i64 %81, i64* %RSP, align 8, !tbaa !2428
  %84 = add i64 %107, 210
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %81 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %87 = add i64 %57, 112
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40577c:                                     ; preds = %block_405802, %block_405750
  %88 = phi i64 [ %.pre, %block_405750 ], [ %293, %block_405802 ]
  %MEMORY.0 = phi %struct.Memory* [ %48, %block_405750 ], [ %285, %block_405802 ]
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -24
  store i64 %90, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %89, -16
  store i64 %91, i64* %RSI, align 8, !tbaa !2428
  %92 = add i64 %88, -10028
  %93 = add i64 %88, 13
  %94 = load i64, i64* %RSP, align 8, !tbaa !2428
  %95 = add i64 %94, -8
  %96 = inttoptr i64 %95 to i64*
  store i64 %93, i64* %96, align 8
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  %97 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %92, %struct.Memory* %MEMORY.0)
  %98 = load i8, i8* %AL, align 1
  %99 = load i64, i64* %PC, align 8
  %100 = and i8 %98, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %101 = zext i8 %100 to i32
  %102 = tail call i32 @llvm.ctpop.i32(i32 %101) #9
  %103 = trunc i32 %102 to i8
  %104 = xor i8 %103, 1
  store i8 %104, i8* %14, align 1, !tbaa !2447
  %105 = xor i8 %100, 1
  store i8 %105, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %106 = icmp eq i8 %105, 0
  %.v9 = select i1 %106, i64 13, i64 8
  %107 = add i64 %99, %.v9
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  br i1 %106, label %block_405796, label %block_405791

block_405796:                                     ; preds = %block_40577c
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -24
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %107, -10006
  %111 = add i64 %107, 9
  %112 = load i64, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %111, i64* %114, align 8
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  store i64 %110, i64* %PC, align 8, !tbaa !2428
  %115 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %110, %struct.Memory* %MEMORY.0)
  %116 = load i64*, i64** %55, align 8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 3
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %116, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -40
  %122 = add i64 %117, 7
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %123, align 8
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -24
  %126 = load i64, i64* %PC, align 8
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128, align 8
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = add i64 %124, -48
  %131 = add i64 %126, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  store i64 %129, i64* %132, align 8
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -48
  %135 = load i64, i64* %PC, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %134 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = add i64 %133, -56
  %140 = add i64 %135, 8
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %139 to i64*
  store i64 %138, i64* %141, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4057b6

block_4057d7:                                     ; preds = %block_4057b6
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -56
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = add i64 %262, -2071
  %145 = add i64 %262, 9
  %146 = load i64, i64* %RSP, align 8, !tbaa !2428
  %147 = add i64 %146, -8
  %148 = inttoptr i64 %147 to i64*
  store i64 %145, i64* %148, align 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  store i64 %144, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %144, %struct.Memory* %MEMORY.2)
  %150 = load i64, i64* %RAX, align 8
  %151 = load i64, i64* %PC, align 8
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %152 = add i64 %151, -10080
  %153 = add i64 %151, 8
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %152, %struct.Memory* %MEMORY.2)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -40
  %160 = load i64, i64* %PC, align 8
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX, align 8
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = add i64 %160, -10056
  %163 = add i64 %160, 12
  %164 = load i64, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %164, -8
  %166 = inttoptr i64 %165 to i64*
  store i64 %163, i64* %166, align 8
  store i64 %165, i64* %RSP, align 8, !tbaa !2428
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  %167 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %162, %struct.Memory* %MEMORY.2)
  %168 = load i64, i64* %RBP, align 8
  %169 = add i64 %168, -65
  %170 = load i8, i8* %AL, align 1
  %171 = load i64, i64* %PC, align 8
  %172 = add i64 %171, 3
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %169 to i8*
  store i8 %170, i8* %173, align 1
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4057f7

block_405807:                                     ; preds = %block_4057f7
  %174 = add i64 %224, -56
  store i64 %174, i64* %RDI, align 8, !tbaa !2428
  %175 = add i64 %236, -10119
  %176 = add i64 %236, 9
  %177 = load i64, i64* %RSP, align 8, !tbaa !2428
  %178 = add i64 %177, -8
  %179 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %179, align 8
  store i64 %178, i64* %RSP, align 8, !tbaa !2428
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %180 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %175, %struct.Memory* %MEMORY.1)
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -48
  %183 = load i64, i64* %PC, align 8
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %184 = add i64 %181, -80
  %185 = load i64, i64* %RAX, align 8
  %186 = add i64 %183, 8
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  store i64 %185, i64* %187, align 8
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -10136
  %190 = add i64 %188, 5
  %191 = load i64, i64* %RSP, align 8, !tbaa !2428
  %192 = add i64 %191, -8
  %193 = inttoptr i64 %192 to i64*
  store i64 %190, i64* %193, align 8
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  %194 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %189, %struct.Memory* %180)
  %195 = load i64, i64* %RBP, align 8
  %196 = add i64 %195, -80
  %197 = load i64, i64* %PC, align 8
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %196 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %197, 7
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RCX, align 8, !tbaa !2428
  %204 = load i64*, i64** %55, align 8
  %205 = add i64 %197, 10
  store i64 %205, i64* %PC, align 8
  store i64 %203, i64* %204, align 8
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -48
  %208 = load i64, i64* %PC, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %209 = add i64 %208, -2151
  %210 = add i64 %208, 9
  %211 = load i64, i64* %RSP, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213, align 8
  store i64 %212, i64* %RSP, align 8, !tbaa !2428
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  %214 = tail call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %209, %struct.Memory* %194)
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -88
  %217 = load i64, i64* %RAX, align 8
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %216 to i64*
  store i64 %217, i64* %220, align 8
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, -126
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  br label %block_4057b6

block_4057f7:                                     ; preds = %block_4057d7, %block_4057d2
  %223 = phi i64 [ %.pre8, %block_4057d7 ], [ %56, %block_4057d2 ]
  %MEMORY.1 = phi %struct.Memory* [ %167, %block_4057d7 ], [ %MEMORY.2, %block_4057d2 ]
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -65
  %226 = add i64 %223, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i8*
  %228 = load i8, i8* %227, align 1
  store i8 %228, i8* %AL, align 1, !tbaa !2432
  %229 = and i8 %228, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %230 = zext i8 %229 to i32
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #9
  %232 = trunc i32 %231 to i8
  %233 = xor i8 %232, 1
  store i8 %233, i8* %14, align 1, !tbaa !2447
  %234 = xor i8 %229, 1
  store i8 %234, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %235 = icmp eq i8 %234, 0
  %.v = select i1 %235, i64 16, i64 11
  %236 = add i64 %223, %.v
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  br i1 %235, label %block_405807, label %block_405802

block_4057b6:                                     ; preds = %block_405807, %block_405796
  %237 = phi i64 [ %.pre7, %block_405796 ], [ %222, %block_405807 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_405796 ], [ %214, %block_405807 ]
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -48
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = add i64 %238, -8
  store i64 %240, i64* %RSI, align 8, !tbaa !2428
  %241 = add i64 %237, -10086
  %242 = add i64 %237, 13
  %243 = load i64, i64* %RSP, align 8, !tbaa !2428
  %244 = add i64 %243, -8
  %245 = inttoptr i64 %244 to i64*
  store i64 %242, i64* %245, align 8
  store i64 %244, i64* %RSP, align 8, !tbaa !2428
  store i64 %241, i64* %PC, align 8, !tbaa !2428
  %246 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %241, %struct.Memory* %MEMORY.2)
  %247 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %DL, align 1, !tbaa !2432
  %248 = load i8, i8* %AL, align 1
  %249 = and i8 %248, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %250 = zext i8 %249 to i32
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #9
  %252 = trunc i32 %251 to i8
  %253 = xor i8 %252, 1
  store i8 %253, i8* %14, align 1, !tbaa !2447
  %254 = xor i8 %249, 1
  store i8 %254, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %255 = load i64, i64* %RBP, align 8
  %256 = add i64 %255, -65
  %257 = add i64 %247, 9
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i8*
  store i8 0, i8* %258, align 1
  %259 = load i64, i64* %PC, align 8
  %260 = load i8, i8* %16, align 1, !tbaa !2449
  %261 = icmp eq i8 %260, 0
  %.v12 = select i1 %261, i64 11, i64 6
  %262 = add i64 %259, %.v12
  store i64 %262, i64* %PC, align 8, !tbaa !2428
  br i1 %261, label %block_4057d7, label %block_4057d2

block_405802:                                     ; preds = %block_4057f7
  %263 = add i64 %224, -48
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %236, -10114
  %265 = add i64 %236, 64
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %264, %struct.Memory* %MEMORY.1)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -24
  %272 = load i64, i64* %PC, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %18, align 1, !tbaa !2451
  store i8 0, i8* %15, align 1, !tbaa !2448
  %273 = add i64 %270, -40
  %274 = add i64 %272, 10
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RCX, align 8, !tbaa !2428
  %277 = load i64*, i64** %55, align 8
  %278 = add i64 %272, 13
  store i64 %278, i64* %PC, align 8
  store i64 %276, i64* %277, align 8
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, -10303
  %281 = add i64 %279, 5
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %280, %struct.Memory* %269)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -64
  %288 = load i64, i64* %RAX, align 8
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %291, align 8
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, -220
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  br label %block_40577c
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406660:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406250:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 134
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400830___cxx_global_var_init_11(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_400830:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10Data_type* @V10Data to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000) to i32), i32 255)) #9
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_40084b

block_40084b:                                     ; preds = %block_40084b, %block_400830
  %47 = phi i64 [ %98, %block_40084b ], [ %42, %block_400830 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5082
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 ptrtoint (%V10Data_type* @V10Data to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2433
  store i8 %46, i8* %19, align 1, !tbaa !2447
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2448
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2449
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2450
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2433
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #9
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2447
  %80 = xor i64 %69, add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2448
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2449
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2450
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10Data_type* @V10Data to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2451
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2449
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_40084b, label %block_400880

block_400880:                                     ; preds = %block_40084b
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2433
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2447
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2448
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2449
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2450
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2451
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406290:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4030d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b80___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %.b = load i1, i1* @seg_609100__bss.0.0, align 8
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2433
  %4 = zext i1 %.b to i32
  %5 = tail call i32 @llvm.ctpop.i32(i32 %4) #9
  %6 = trunc i32 %5 to i8
  %7 = xor i8 %6, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7, i8* %8, align 1, !tbaa !2447
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9, align 1, !tbaa !2448
  %10 = xor i1 %.b, true
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11, i8* %12, align 1, !tbaa !2449
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2450
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2451
  %.v = select i1 %.b, i64 32, i64 9
  %15 = add i64 %.v, %1
  store i64 %15, i64* %PC, align 8, !tbaa !2428
  br i1 %.b, label %block_400ba0, label %block_400b89

block_400ba0:                                     ; preds = %block_400b80
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC, align 8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !2428
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %21 = add i64 %18, 8
  store i64 %21, i64* %17, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400b89:                                     ; preds = %block_400b80
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %15, 1
  store i64 %23, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %22, i64* %27, align 8
  %28 = load i64, i64* %PC, align 8
  store i64 %26, i64* %RBP, align 8, !tbaa !2428
  %29 = add i64 %28, -122
  %30 = add i64 %28, 8
  %31 = add i64 %25, -16
  %32 = inttoptr i64 %31 to i64*
  store i64 %30, i64* %32, align 8
  store i64 %31, i64* %24, align 8, !tbaa !2428
  store i64 %29, i64* %PC, align 8, !tbaa !2428
  %33 = tail call %struct.Memory* @sub_400b10_deregister_tm_clones(%struct.State* nonnull %0, i64 %29, %struct.Memory* %2)
  %34 = load i64, i64* %PC, align 8
  store i1 true, i1* @seg_609100__bss.0.0, align 8
  %35 = add i64 %34, 8
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %24, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %24, align 8, !tbaa !2428
  %40 = add i64 %34, 9
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %24, align 8, !tbaa !2428
  ret %struct.Memory* %33
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403d40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -24
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -8
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = shl i64 %37, 3
  store i64 %38, i64* %RSI, align 8, !tbaa !2428
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %40 = lshr i64 %37, 61
  %41 = trunc i64 %40 to i8
  %42 = and i8 %41, 1
  store i8 %42, i8* %39, align 1, !tbaa !2432
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %44 = trunc i64 %38 to i32
  %45 = and i32 %44, 248
  %46 = tail call i32 @llvm.ctpop.i32(i32 %45) #9
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  store i8 %49, i8* %43, align 1, !tbaa !2432
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %50, align 1, !tbaa !2432
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %52 = icmp eq i64 %38, 0
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %51, align 1, !tbaa !2432
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %55 = lshr i64 %37, 60
  %56 = trunc i64 %55 to i8
  %57 = and i8 %56, 1
  store i8 %57, i8* %54, align 1, !tbaa !2432
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %58, align 1, !tbaa !2432
  %59 = add i64 %32, -8
  %60 = add i64 %34, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %38
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %38
  %65 = icmp ult i64 %63, %62
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %39, align 1, !tbaa !2433
  %68 = trunc i64 %63 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %43, align 1, !tbaa !2447
  %74 = xor i64 %62, %38
  %75 = xor i64 %74, %63
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %50, align 1, !tbaa !2448
  %79 = icmp eq i64 %63, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %51, align 1, !tbaa !2449
  %81 = lshr i64 %63, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2450
  %83 = lshr i64 %37, 60
  %84 = and i64 %83, 1
  %85 = lshr i64 %62, 63
  %86 = xor i64 %81, %84
  %87 = xor i64 %81, %85
  %88 = add nuw nsw i64 %86, %87
  %89 = icmp eq i64 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %58, align 1, !tbaa !2451
  %91 = add i64 %34, 16
  store i64 %91, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -8
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %94, 5
  store i64 %98, i64* %PC, align 8
  %99 = load i64, i64* %5, align 8, !tbaa !2428
  %100 = add i64 %99, 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RBP, align 8, !tbaa !2428
  store i64 %100, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %94, 6
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %100 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %PC, align 8, !tbaa !2428
  %106 = add i64 %99, 16
  store i64 %106, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405e90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403160:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_406480:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -56
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 48
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 5
  store i64 %53, i64* %PC, align 8
  %54 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %55 = load i64, i64* %54, align 1
  %56 = inttoptr i64 %51 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %union.VectorReg* %4 to double*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %59 = bitcast i64* %58 to double*
  %60 = bitcast %union.anon* %3 to double**
  %.pre = load i64, i64* %PC, align 8
  br label %block_406495

block_4064af:                                     ; preds = %block_406495
  %61 = add i64 %124, -8
  store i64 %61, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %62 = add i64 %124, -24
  %63 = add i64 %123, 11
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %54, align 1, !tbaa !2452
  store double 0.000000e+00, double* %59, align 1, !tbaa !2452
  %66 = add i64 %124, -40
  %67 = add i64 %123, 16
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  store i64 %65, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -7679
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %78, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %77 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, -7580
  %84 = add i64 %82, 5
  %85 = load i64, i64* %RSP, align 8, !tbaa !2428
  %86 = add i64 %85, -8
  %87 = inttoptr i64 %86 to i64*
  store i64 %84, i64* %87, align 8
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  %88 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %83, %struct.Memory* %2)
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -40
  %91 = load i64, i64* %PC, align 8
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %54, align 1, !tbaa !2452
  store double 0.000000e+00, double* %59, align 1, !tbaa !2452
  %95 = load double*, double** %60, align 8
  %96 = add i64 %91, 9
  store i64 %96, i64* %PC, align 8
  %.cast = bitcast i64 %94 to double
  %97 = load double, double* %95, align 8
  %98 = fadd double %.cast, %97
  store double %98, double* %57, align 1, !tbaa !2452
  store i64 0, i64* %58, align 1, !tbaa !2452
  %99 = add i64 %89, -24
  %100 = add i64 %91, 14
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to double*
  store double %98, double* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, -74
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  br label %block_406495

block_406495:                                     ; preds = %block_4064af, %block_406480
  %104 = phi i64 [ %103, %block_4064af ], [ %.pre, %block_406480 ]
  %105 = load i64, i64* %RBP, align 8
  %106 = add i64 %105, -8
  store i64 %106, i64* %RDI, align 8, !tbaa !2428
  %107 = add i64 %105, -16
  store i64 %107, i64* %RSI, align 8, !tbaa !2428
  %108 = add i64 %104, -7573
  %109 = add i64 %104, 13
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %108, %struct.Memory* %2)
  %114 = load i8, i8* %AL, align 1
  %115 = load i64, i64* %PC, align 8
  %116 = and i8 %114, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %117 = zext i8 %116 to i32
  %118 = tail call i32 @llvm.ctpop.i32(i32 %117) #9
  %119 = trunc i32 %118 to i8
  %120 = xor i8 %119, 1
  store i8 %120, i8* %21, align 1, !tbaa !2447
  %121 = xor i8 %116, 1
  store i8 %121, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %33, align 1, !tbaa !2450
  store i8 0, i8* %39, align 1, !tbaa !2451
  store i8 0, i8* %27, align 1, !tbaa !2448
  %122 = icmp eq i8 %121, 0
  %.v = select i1 %122, i64 13, i64 8
  %123 = add i64 %115, %.v
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %124 = load i64, i64* %RBP, align 8
  br i1 %122, label %block_4064af, label %block_4064aa

block_4064aa:                                     ; preds = %block_406495
  %125 = add i64 %124, -24
  %126 = add i64 %123, 63
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %54, align 1, !tbaa !2452
  store double 0.000000e+00, double* %59, align 1, !tbaa !2452
  %129 = load i64, i64* %RSP, align 8
  %130 = add i64 %129, 48
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -49
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %14, align 1, !tbaa !2433
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #9
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %21, align 1, !tbaa !2447
  %139 = xor i64 %129, 16
  %140 = xor i64 %139, %130
  %141 = lshr i64 %140, 4
  %142 = trunc i64 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %27, align 1, !tbaa !2448
  %144 = icmp eq i64 %130, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %30, align 1, !tbaa !2449
  %146 = lshr i64 %130, 63
  %147 = trunc i64 %146 to i8
  store i8 %147, i8* %33, align 1, !tbaa !2450
  %148 = lshr i64 %129, 63
  %149 = xor i64 %146, %148
  %150 = add nuw nsw i64 %149, %146
  %151 = icmp eq i64 %150, 2
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %39, align 1, !tbaa !2451
  %153 = add i64 %123, 68
  store i64 %153, i64* %PC, align 8
  %154 = add i64 %129, 56
  %155 = inttoptr i64 %130 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RBP, align 8, !tbaa !2428
  store i64 %154, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %123, 69
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %154 to i64*
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  %160 = add i64 %129, 64
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_406320:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -24
  %39 = add i64 %8, 12
  store i64 %39, i64* %PC, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %41 = load i64, i64* %40, align 1
  %42 = inttoptr i64 %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RDI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %RSI, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_406335

block_406335:                                     ; preds = %block_406343, %block_406320
  %55 = phi i64 [ %142, %block_406343 ], [ %.pre, %block_406320 ]
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -24
  %58 = add i64 %55, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RAX, align 8, !tbaa !2428
  %61 = add i64 %56, -32
  %62 = add i64 %55, 8
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %60, %64
  %66 = icmp ult i64 %60, %64
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %12, align 1, !tbaa !2433
  %68 = trunc i64 %65 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #9
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %19, align 1, !tbaa !2447
  %74 = xor i64 %64, %60
  %75 = xor i64 %74, %65
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %25, align 1, !tbaa !2448
  %79 = icmp eq i64 %65, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %28, align 1, !tbaa !2449
  %81 = lshr i64 %65, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %31, align 1, !tbaa !2450
  %83 = lshr i64 %60, 63
  %84 = lshr i64 %64, 63
  %85 = xor i64 %84, %83
  %86 = xor i64 %81, %83
  %87 = add nuw nsw i64 %86, %85
  %88 = icmp eq i64 %87, 2
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %37, align 1, !tbaa !2451
  %.v = select i1 %79, i64 59, i64 14
  %90 = add i64 %55, %.v
  %91 = add i64 %56, -16
  %92 = add i64 %90, 4
  store i64 %92, i64* %PC, align 8
  br i1 %79, label %block_406370, label %block_406343

block_406343:                                     ; preds = %block_406335
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %90, 8
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %59, align 8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %94, 8
  store i64 %95, i64* %RCX, align 8, !tbaa !2428
  %96 = icmp ugt i64 %94, -9
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %12, align 1, !tbaa !2433
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #9
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %19, align 1, !tbaa !2447
  %104 = xor i64 %95, %94
  %105 = lshr i64 %104, 4
  %106 = trunc i64 %105 to i8
  %107 = and i8 %106, 1
  store i8 %107, i8* %25, align 1, !tbaa !2448
  %108 = icmp eq i64 %95, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %28, align 1, !tbaa !2449
  %110 = lshr i64 %95, 63
  %111 = trunc i64 %110 to i8
  store i8 %111, i8* %31, align 1, !tbaa !2450
  %112 = lshr i64 %94, 63
  %113 = xor i64 %110, %112
  %114 = add nuw nsw i64 %113, %110
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %37, align 1, !tbaa !2451
  %117 = add i64 %90, 19
  store i64 %117, i64* %PC, align 8
  store i64 %95, i64* %59, align 8
  %118 = load i64, i64* %RAX, align 8
  %119 = load i64, i64* %PC, align 8
  store i64 %118, i64* %RSI, align 8, !tbaa !2428
  %120 = add i64 %119, -998
  %121 = add i64 %119, 8
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %2)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -40
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %40, align 1
  %131 = inttoptr i64 %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -40
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -16
  %139 = add i64 %134, 8
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i64*
  store i64 %137, i64* %140, align 8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, -54
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  br label %block_406335

block_406370:                                     ; preds = %block_406335
  %143 = inttoptr i64 %91 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RAX, align 8, !tbaa !2428
  %145 = add i64 %56, -8
  %146 = add i64 %90, 8
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -8
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 5
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %40, align 1, !tbaa !2452
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %155 = bitcast i64* %154 to double*
  store double 0.000000e+00, double* %155, align 1, !tbaa !2452
  %156 = load i64, i64* %RSP, align 8
  %157 = add i64 %156, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  %158 = icmp ugt i64 %156, -49
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %12, align 1, !tbaa !2433
  %160 = trunc i64 %157 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #9
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %19, align 1, !tbaa !2447
  %166 = xor i64 %156, 16
  %167 = xor i64 %166, %157
  %168 = lshr i64 %167, 4
  %169 = trunc i64 %168 to i8
  %170 = and i8 %169, 1
  store i8 %170, i8* %25, align 1, !tbaa !2448
  %171 = icmp eq i64 %157, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %28, align 1, !tbaa !2449
  %173 = lshr i64 %157, 63
  %174 = trunc i64 %173 to i8
  store i8 %174, i8* %31, align 1, !tbaa !2450
  %175 = lshr i64 %156, 63
  %176 = xor i64 %173, %175
  %177 = add nuw nsw i64 %176, %173
  %178 = icmp eq i64 %177, 2
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %37, align 1, !tbaa !2451
  %180 = add i64 %150, 10
  store i64 %180, i64* %PC, align 8
  %181 = add i64 %156, 56
  %182 = inttoptr i64 %157 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RBP, align 8, !tbaa !2428
  store i64 %181, i64* %RSP, align 8, !tbaa !2428
  %184 = add i64 %150, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %181 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  %187 = add i64 %156, 64
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400950___cxx_global_var_init_14(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400950:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dPb_type* @dPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4799
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403190:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4008f0___cxx_global_var_init_13(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_4008f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000) to i32), i32 255)) #9
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_40090b

block_40090b:                                     ; preds = %block_40090b, %block_4008f0
  %47 = phi i64 [ %98, %block_40090b ], [ %42, %block_4008f0 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4890
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2433
  store i8 %46, i8* %19, align 1, !tbaa !2447
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2448
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2449
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2450
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2433
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #9
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2447
  %80 = xor i64 %69, add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2448
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2449
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2450
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%V10DataMaster_type* @V10DataMaster to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2451
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2449
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_40090b, label %block_400940

block_400940:                                     ; preds = %block_40090b
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2433
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2447
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2448
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2449
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2450
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2451
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402f50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f7c

block_402f7c:                                     ; preds = %block_402fde, %block_402f50
  %53 = phi i64 [ %.pre, %block_402f50 ], [ %113, %block_402fde ]
  %MEMORY.0 = phi %struct.Memory* [ %46, %block_402f50 ], [ %176, %block_402fde ]
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  store i64 %55, i64* %RDI, align 8, !tbaa !2428
  %56 = add i64 %54, -24
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %53, 212
  %58 = add i64 %53, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %MEMORY.0)
  %63 = load i8, i8* %AL, align 1
  %64 = load i64, i64* %PC, align 8
  %65 = and i8 %63, 1
  store i8 0, i8* %12, align 1, !tbaa !2433
  %66 = zext i8 %65 to i32
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #9
  %68 = trunc i32 %67 to i8
  %69 = xor i8 %68, 1
  store i8 %69, i8* %13, align 1, !tbaa !2447
  %70 = xor i8 %65, 1
  store i8 %70, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %71 = icmp eq i8 %70, 0
  %.v = select i1 %71, i64 13, i64 8
  %72 = add i64 %64, %.v
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %73 = load i64, i64* %RBP, align 8
  br i1 %71, label %block_402f96, label %block_402f91

block_402ff5:                                     ; preds = %block_402fe3, %block_402f91
  %74 = phi i64 [ %192, %block_402fe3 ], [ %.pre12, %block_402f91 ]
  %MEMORY.1 = phi %struct.Memory* [ %176, %block_402fe3 ], [ %MEMORY.0, %block_402f91 ]
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -1
  %77 = add i64 %74, 3
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i8*
  %79 = load i8, i8* %78, align 1
  %80 = and i8 %79, 1
  %81 = zext i8 %80 to i64
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 64
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -65
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %12, align 1, !tbaa !2433
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #9
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %13, align 1, !tbaa !2447
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %14, align 1, !tbaa !2448
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %15, align 1, !tbaa !2449
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %16, align 1, !tbaa !2450
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %17, align 1, !tbaa !2451
  %105 = add i64 %74, 13
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 72
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBP, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %74, 14
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %106 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %112 = add i64 %82, 80
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402fde:                                     ; preds = %block_402f96
  %113 = add i64 %186, -98
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br label %block_402f7c

block_402f91:                                     ; preds = %block_402f7c
  %114 = add i64 %73, -1
  %115 = add i64 %72, 100
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i8*
  store i8 1, i8* %116, align 1
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_402ff5

block_402f96:                                     ; preds = %block_402f7c
  %117 = add i64 %73, -16
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %118 = add i64 %72, 122
  %119 = add i64 %72, 11
  %120 = load i64, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %RSP, align 8, !tbaa !2428
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %123 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %118, %struct.Memory* %MEMORY.0)
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -48
  %126 = load i64, i64* %PC, align 8
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %127 = load i64, i64* %RAX, align 8
  %128 = add i64 %126, 8
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %127, i64* %129, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, 215
  %132 = add i64 %130, 5
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %131, %struct.Memory* %MEMORY.0)
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -32
  %139 = load i64, i64* %PC, align 8
  store i64 %138, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %140 = add i64 %137, -64
  %141 = load i64, i64* %RAX, align 8
  %142 = add i64 %139, 10
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  store i64 %141, i64* %143, align 8
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 88
  %146 = add i64 %144, 5
  %147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %148 = add i64 %147, -8
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  store i64 %148, i64* %RSP, align 8, !tbaa !2428
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  %150 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %145, %struct.Memory* %MEMORY.0)
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -56
  %153 = load i64, i64* %PC, align 8
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX, align 8
  %155 = add i64 %153, 8
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %152 to i64*
  store i64 %154, i64* %156, align 8
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 187
  %159 = add i64 %157, 5
  %160 = load i64, i64* %RSP, align 8, !tbaa !2428
  %161 = add i64 %160, -8
  %162 = inttoptr i64 %161 to i64*
  store i64 %159, i64* %162, align 8
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  %163 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %158, %struct.Memory* %MEMORY.0)
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -64
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RAX, align 8
  store i64 %170, i64* %RSI, align 8, !tbaa !2428
  %171 = add i64 %166, 214
  %172 = add i64 %166, 12
  %173 = load i64, i64* %RSP, align 8, !tbaa !2428
  %174 = add i64 %173, -8
  %175 = inttoptr i64 %174 to i64*
  store i64 %172, i64* %175, align 8
  store i64 %174, i64* %RSP, align 8, !tbaa !2428
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  %176 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %171, %struct.Memory* %MEMORY.0)
  %177 = load i8, i8* %AL, align 1
  %178 = load i64, i64* %PC, align 8
  %179 = and i8 %177, 1
  store i8 0, i8* %12, align 1, !tbaa !2433
  %180 = zext i8 %179 to i32
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #9
  %182 = trunc i32 %181 to i8
  %183 = xor i8 %182, 1
  store i8 %183, i8* %13, align 1, !tbaa !2447
  %184 = xor i8 %179, 1
  store i8 %184, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %185 = icmp eq i8 %184, 0
  %.v13 = select i1 %185, i64 13, i64 8
  %186 = add i64 %178, %.v13
  store i64 %186, i64* %PC, align 8, !tbaa !2428
  br i1 %185, label %block_402fe3, label %block_402fde

block_402fe3:                                     ; preds = %block_402f96
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -1
  %189 = add i64 %186, 4
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i8*
  store i8 0, i8* %190, align 1
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 14
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_402ff5
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4061d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4052c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_400770:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 95
  %11 = add i64 %9, 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %5, align 8, !tbaa !2428
  store i64 %10, i64* %PC, align 8, !tbaa !2428
  %14 = tail call %struct.Memory* @sub_4007d0___cxx_global_var_init(%struct.State* nonnull %0, i64 %10, %struct.Memory* %2)
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 183
  %17 = add i64 %15, 5
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, -8
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %5, align 8, !tbaa !2428
  store i64 %16, i64* %PC, align 8, !tbaa !2428
  %21 = tail call %struct.Memory* @sub_400830___cxx_global_var_init_11(%struct.State* nonnull %0, i64 %16, %struct.Memory* %14)
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 274
  %24 = add i64 %22, 5
  %25 = load i64, i64* %5, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %24, i64* %27, align 8
  store i64 %26, i64* %5, align 8, !tbaa !2428
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %28 = tail call %struct.Memory* @sub_400890___cxx_global_var_init_12(%struct.State* nonnull %0, i64 %23, %struct.Memory* %21)
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 365
  %31 = add i64 %29, 5
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %31, i64* %34, align 8
  store i64 %33, i64* %5, align 8, !tbaa !2428
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %35 = tail call %struct.Memory* @sub_4008f0___cxx_global_var_init_13(%struct.State* nonnull %0, i64 %30, %struct.Memory* %28)
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 456
  %38 = add i64 %36, 5
  %39 = load i64, i64* %5, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %38, i64* %41, align 8
  store i64 %40, i64* %5, align 8, !tbaa !2428
  store i64 %37, i64* %PC, align 8, !tbaa !2428
  %42 = tail call %struct.Memory* @sub_400950___cxx_global_var_init_14(%struct.State* nonnull %0, i64 %37, %struct.Memory* %35)
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 483
  %45 = add i64 %43, 5
  %46 = load i64, i64* %5, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %45, i64* %48, align 8
  store i64 %47, i64* %5, align 8, !tbaa !2428
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %49 = tail call %struct.Memory* @sub_400970___cxx_global_var_init_15(%struct.State* nonnull %0, i64 %44, %struct.Memory* %42)
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 510
  %52 = add i64 %50, 5
  %53 = load i64, i64* %5, align 8, !tbaa !2428
  %54 = add i64 %53, -8
  %55 = inttoptr i64 %54 to i64*
  store i64 %52, i64* %55, align 8
  store i64 %54, i64* %5, align 8, !tbaa !2428
  store i64 %51, i64* %PC, align 8, !tbaa !2428
  %56 = tail call %struct.Memory* @sub_400990___cxx_global_var_init_16(%struct.State* nonnull %0, i64 %51, %struct.Memory* %49)
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 537
  %59 = add i64 %57, 5
  %60 = load i64, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %5, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4009b0___cxx_global_var_init_17(%struct.State* nonnull %0, i64 %58, %struct.Memory* %56)
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 564
  %66 = add i64 %64, 5
  %67 = load i64, i64* %5, align 8, !tbaa !2428
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to i64*
  store i64 %66, i64* %69, align 8
  store i64 %68, i64* %5, align 8, !tbaa !2428
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %70 = tail call %struct.Memory* @sub_4009d0___cxx_global_var_init_18(%struct.State* nonnull %0, i64 %65, %struct.Memory* %63)
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 591
  %73 = add i64 %71, 5
  %74 = load i64, i64* %5, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %5, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4009f0___cxx_global_var_init_19(%struct.State* nonnull %0, i64 %72, %struct.Memory* %70)
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 618
  %80 = add i64 %78, 5
  %81 = load i64, i64* %5, align 8, !tbaa !2428
  %82 = add i64 %81, -8
  %83 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %83, align 8
  store i64 %82, i64* %5, align 8, !tbaa !2428
  store i64 %79, i64* %PC, align 8, !tbaa !2428
  %84 = tail call %struct.Memory* @sub_400a10___cxx_global_var_init_20(%struct.State* nonnull %0, i64 %79, %struct.Memory* %77)
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 645
  %87 = add i64 %85, 5
  %88 = load i64, i64* %5, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %87, i64* %90, align 8
  store i64 %89, i64* %5, align 8, !tbaa !2428
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  %91 = tail call %struct.Memory* @sub_400a30___cxx_global_var_init_21(%struct.State* nonnull %0, i64 %86, %struct.Memory* %84)
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 672
  %94 = add i64 %92, 5
  %95 = load i64, i64* %5, align 8, !tbaa !2428
  %96 = add i64 %95, -8
  %97 = inttoptr i64 %96 to i64*
  store i64 %94, i64* %97, align 8
  store i64 %96, i64* %5, align 8, !tbaa !2428
  store i64 %93, i64* %PC, align 8, !tbaa !2428
  %98 = tail call %struct.Memory* @sub_400a50___cxx_global_var_init_22(%struct.State* nonnull %0, i64 %93, %struct.Memory* %91)
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 699
  %101 = add i64 %99, 5
  %102 = load i64, i64* %5, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %5, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_400a70___cxx_global_var_init_23(%struct.State* nonnull %0, i64 %100, %struct.Memory* %98)
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 726
  %108 = add i64 %106, 5
  %109 = load i64, i64* %5, align 8, !tbaa !2428
  %110 = add i64 %109, -8
  %111 = inttoptr i64 %110 to i64*
  store i64 %108, i64* %111, align 8
  store i64 %110, i64* %5, align 8, !tbaa !2428
  store i64 %107, i64* %PC, align 8, !tbaa !2428
  %112 = tail call %struct.Memory* @sub_400a90___cxx_global_var_init_24(%struct.State* nonnull %0, i64 %107, %struct.Memory* %105)
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 753
  %115 = add i64 %113, 5
  %116 = load i64, i64* %5, align 8, !tbaa !2428
  %117 = add i64 %116, -8
  %118 = inttoptr i64 %117 to i64*
  store i64 %115, i64* %118, align 8
  store i64 %117, i64* %5, align 8, !tbaa !2428
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %119 = tail call %struct.Memory* @sub_400ab0___cxx_global_var_init_25(%struct.State* nonnull %0, i64 %114, %struct.Memory* %112)
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %PC, align 8
  %122 = load i64, i64* %5, align 8, !tbaa !2428
  %123 = add i64 %122, 8
  %124 = inttoptr i64 %122 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RBP, align 8, !tbaa !2428
  store i64 %123, i64* %5, align 8, !tbaa !2428
  %126 = add i64 %120, 2
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %123 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  %129 = add i64 %122, 16
  store i64 %129, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %119
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402050:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -36
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64, align 4
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %66 = bitcast i64* %65 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402070

block_402080:                                     ; preds = %block_402070
  %67 = add i64 %178, -16
  %68 = add i64 %211, 4
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %RDI, align 8, !tbaa !2428
  %71 = add i64 %178, -24
  %72 = add i64 %211, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %71 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %RSI, align 8, !tbaa !2428
  %75 = add i64 %178, -8
  %76 = add i64 %211, 12
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %75 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %RAX, align 8, !tbaa !2428
  %79 = add i64 %178, -48
  %80 = add i64 %211, 16
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %78, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %39, align 1, !tbaa !2452
  store double 0.000000e+00, double* %66, align 1, !tbaa !2452
  %88 = add i64 %84, 17040
  %89 = add i64 %84, 10
  %90 = load i64, i64* %RSP, align 8, !tbaa !2428
  %91 = add i64 %90, -8
  %92 = inttoptr i64 %91 to i64*
  store i64 %89, i64* %92, align 8
  store i64 %91, i64* %RSP, align 8, !tbaa !2428
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  %93 = tail call %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* nonnull %0, i64 %88, %struct.Memory* %MEMORY.0)
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -56
  %96 = load i64, i64* %PC, align 8
  store i64 %95, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %96, 9
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %39, align 1
  %99 = inttoptr i64 %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 15661
  %102 = add i64 %100, 5
  %103 = load i64, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %102, i64* %105, align 8
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  store i64 %101, i64* %PC, align 8, !tbaa !2428
  %106 = tail call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %101, %struct.Memory* %93)
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 15688
  %109 = add i64 %107, 5
  %110 = load i64, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %RSP, align 8, !tbaa !2428
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %113 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %108, %struct.Memory* %106)
  %114 = load i64, i64* %RBP, align 8
  %115 = add i64 %114, -36
  %116 = load i64, i64* %PC, align 8
  %117 = add i64 %116, 3
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %115 to i32*
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %119, 1
  %121 = zext i32 %120 to i64
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = icmp eq i32 %119, -1
  %123 = icmp eq i32 %120, 0
  %124 = or i1 %122, %123
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %12, align 1, !tbaa !2433
  %126 = and i32 %120, 255
  %127 = tail call i32 @llvm.ctpop.i32(i32 %126) #9
  %128 = trunc i32 %127 to i8
  %129 = and i8 %128, 1
  %130 = xor i8 %129, 1
  store i8 %130, i8* %19, align 1, !tbaa !2447
  %131 = xor i32 %120, %119
  %132 = lshr i32 %131, 4
  %133 = trunc i32 %132 to i8
  %134 = and i8 %133, 1
  store i8 %134, i8* %24, align 1, !tbaa !2448
  %135 = zext i1 %123 to i8
  store i8 %135, i8* %27, align 1, !tbaa !2449
  %136 = lshr i32 %120, 31
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %30, align 1, !tbaa !2450
  %138 = lshr i32 %119, 31
  %139 = xor i32 %136, %138
  %140 = add nuw nsw i32 %139, %136
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %36, align 1, !tbaa !2451
  %143 = add i64 %116, 9
  store i64 %143, i64* %PC, align 8
  store i32 %120, i32* %118, align 4
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, -70
  store i64 %145, i64* %PC, align 8, !tbaa !2428
  br label %block_402070

block_4020bb:                                     ; preds = %block_402070
  %146 = load i64, i64* %RSP, align 8
  %147 = add i64 %146, 64
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ugt i64 %146, -65
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %12, align 1, !tbaa !2433
  %150 = trunc i64 %147 to i32
  %151 = and i32 %150, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #9
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %19, align 1, !tbaa !2447
  %156 = xor i64 %147, %146
  %157 = lshr i64 %156, 4
  %158 = trunc i64 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %24, align 1, !tbaa !2448
  %160 = icmp eq i64 %147, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %27, align 1, !tbaa !2449
  %162 = lshr i64 %147, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %30, align 1, !tbaa !2450
  %164 = lshr i64 %146, 63
  %165 = xor i64 %162, %164
  %166 = add nuw nsw i64 %165, %162
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %36, align 1, !tbaa !2451
  %169 = add i64 %211, 5
  store i64 %169, i64* %PC, align 8
  %170 = add i64 %146, 72
  %171 = inttoptr i64 %147 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RBP, align 8, !tbaa !2428
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %211, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %170 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  %176 = add i64 %146, 80
  store i64 %176, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402070:                                     ; preds = %block_402080, %block_402050
  %177 = phi i64 [ %.pre, %block_402050 ], [ %145, %block_402080 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402050 ], [ %113, %block_402080 ]
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -36
  %180 = add i64 %177, 3
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %185 = sub i32 %182, %184
  %186 = icmp ult i32 %182, %184
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %12, align 1, !tbaa !2433
  %188 = and i32 %185, 255
  %189 = tail call i32 @llvm.ctpop.i32(i32 %188) #9
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %19, align 1, !tbaa !2447
  %193 = xor i32 %184, %182
  %194 = xor i32 %193, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %24, align 1, !tbaa !2448
  %198 = icmp eq i32 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %27, align 1, !tbaa !2449
  %200 = lshr i32 %185, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %30, align 1, !tbaa !2450
  %202 = lshr i32 %182, 31
  %203 = lshr i32 %184, 31
  %204 = xor i32 %203, %202
  %205 = xor i32 %200, %202
  %206 = add nuw nsw i32 %205, %204
  %207 = icmp eq i32 %206, 2
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %36, align 1, !tbaa !2451
  %209 = icmp ne i8 %201, 0
  %210 = xor i1 %209, %207
  %.v = select i1 %210, i64 16, i64 75
  %211 = add i64 %177, %.v
  store i64 %211, i64* %PC, align 8, !tbaa !2428
  br i1 %210, label %block_402080, label %block_4020bb
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403730:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -24
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -32
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = icmp ugt i64 %62, -9
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %13, align 1, !tbaa !2433
  %66 = trunc i64 %63 to i32
  %67 = and i32 %66, 255
  %68 = tail call i32 @llvm.ctpop.i32(i32 %67) #9
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 1
  %71 = xor i8 %70, 1
  store i8 %71, i8* %20, align 1, !tbaa !2447
  %72 = xor i64 %63, %62
  %73 = lshr i64 %72, 4
  %74 = trunc i64 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %25, align 1, !tbaa !2448
  %76 = icmp eq i64 %63, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %28, align 1, !tbaa !2449
  %78 = lshr i64 %63, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2450
  %80 = lshr i64 %62, 63
  %81 = xor i64 %78, %80
  %82 = add nuw nsw i64 %81, %78
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %37, align 1, !tbaa !2451
  %85 = add i64 %59, 12
  store i64 %85, i64* %PC, align 8
  store i64 %63, i64* %61, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403754

block_403798:                                     ; preds = %block_403762
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -1
  %88 = add i64 %207, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i8*
  store i8 0, i8* %89, align 1
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 14
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br label %block_4037aa

block_403793:                                     ; preds = %block_403762
  %92 = add i64 %207, -63
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br label %block_403754

block_4037aa:                                     ; preds = %block_4037a6, %block_403798
  %93 = phi i64 [ %.pre14, %block_4037a6 ], [ %91, %block_403798 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4037a6 ], [ %197, %block_403798 ]
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -1
  %96 = add i64 %93, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i8*
  %98 = load i8, i8* %97, align 1
  %99 = and i8 %98, 1
  %100 = zext i8 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RSP, align 8
  %102 = add i64 %101, 32
  store i64 %102, i64* %RSP, align 8, !tbaa !2428
  %103 = icmp ugt i64 %101, -33
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %13, align 1, !tbaa !2433
  %105 = trunc i64 %102 to i32
  %106 = and i32 %105, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #9
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %20, align 1, !tbaa !2447
  %111 = xor i64 %102, %101
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %25, align 1, !tbaa !2448
  %115 = icmp eq i64 %102, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %28, align 1, !tbaa !2449
  %117 = lshr i64 %102, 63
  %118 = trunc i64 %117 to i8
  store i8 %118, i8* %31, align 1, !tbaa !2450
  %119 = lshr i64 %101, 63
  %120 = xor i64 %117, %119
  %121 = add nuw nsw i64 %120, %117
  %122 = icmp eq i64 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2451
  %124 = add i64 %93, 13
  store i64 %124, i64* %PC, align 8
  %125 = add i64 %101, 40
  %126 = inttoptr i64 %102 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RBP, align 8, !tbaa !2428
  store i64 %125, i64* %RSP, align 8, !tbaa !2428
  %128 = add i64 %93, 14
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  %131 = add i64 %101, 48
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4037a6:                                     ; preds = %block_403754
  %132 = add i64 %209, -1
  %133 = add i64 %243, 4
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i8*
  store i8 1, i8* %134, align 1
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_4037aa

block_403762:                                     ; preds = %block_403754
  %135 = add i64 %243, 4
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %212, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %136, 8
  store i64 %137, i64* %RCX, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -9
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %13, align 1, !tbaa !2433
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #9
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %20, align 1, !tbaa !2447
  %146 = xor i64 %137, %136
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %25, align 1, !tbaa !2448
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %28, align 1, !tbaa !2449
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %31, align 1, !tbaa !2450
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %37, align 1, !tbaa !2451
  %159 = add i64 %243, 15
  store i64 %159, i64* %PC, align 8
  store i64 %137, i64* %212, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -32
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RCX, align 8, !tbaa !2428
  %166 = add i64 %165, 8
  store i64 %166, i64* %RDX, align 8, !tbaa !2428
  %167 = icmp ugt i64 %165, -9
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %13, align 1, !tbaa !2433
  %169 = trunc i64 %166 to i32
  %170 = and i32 %169, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %20, align 1, !tbaa !2447
  %175 = xor i64 %166, %165
  %176 = lshr i64 %175, 4
  %177 = trunc i64 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %25, align 1, !tbaa !2448
  %179 = icmp eq i64 %166, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %28, align 1, !tbaa !2449
  %181 = lshr i64 %166, 63
  %182 = trunc i64 %181 to i8
  store i8 %182, i8* %31, align 1, !tbaa !2450
  %183 = lshr i64 %165, 63
  %184 = xor i64 %181, %183
  %185 = add nuw nsw i64 %184, %181
  %186 = icmp eq i64 %185, 2
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %37, align 1, !tbaa !2451
  %188 = add i64 %162, 15
  store i64 %188, i64* %PC, align 8
  store i64 %166, i64* %164, align 8
  %189 = load i64, i64* %RAX, align 8
  %190 = load i64, i64* %PC, align 8
  store i64 %189, i64* %RDI, align 8, !tbaa !2428
  %191 = load i64, i64* %RCX, align 8
  store i64 %191, i64* %RSI, align 8, !tbaa !2428
  %192 = add i64 %190, -1760
  %193 = add i64 %190, 11
  %194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %195 = add i64 %194, -8
  %196 = inttoptr i64 %195 to i64*
  store i64 %193, i64* %196, align 8
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %197 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %192, %struct.Memory* %MEMORY.1)
  %198 = load i8, i8* %AL, align 1
  %199 = load i64, i64* %PC, align 8
  %200 = and i8 %198, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %201 = zext i8 %200 to i32
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = xor i8 %203, 1
  store i8 %204, i8* %20, align 1, !tbaa !2447
  %205 = xor i8 %200, 1
  store i8 %205, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %206 = icmp eq i8 %205, 0
  %.v15 = select i1 %206, i64 13, i64 8
  %207 = add i64 %199, %.v15
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_403798, label %block_403793

block_403754:                                     ; preds = %block_403793, %block_403730
  %208 = phi i64 [ %.pre, %block_403730 ], [ %92, %block_403793 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_403730 ], [ %197, %block_403793 ]
  %209 = load i64, i64* %RBP, align 8
  %210 = add i64 %209, -16
  %211 = add i64 %208, 4
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = add i64 %209, -24
  %215 = add i64 %208, 8
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = sub i64 %213, %217
  %219 = icmp ult i64 %213, %217
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %13, align 1, !tbaa !2433
  %221 = trunc i64 %218 to i32
  %222 = and i32 %221, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #9
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %20, align 1, !tbaa !2447
  %227 = xor i64 %217, %213
  %228 = xor i64 %227, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %25, align 1, !tbaa !2448
  %232 = icmp eq i64 %218, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %28, align 1, !tbaa !2449
  %234 = lshr i64 %218, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %31, align 1, !tbaa !2450
  %236 = lshr i64 %213, 63
  %237 = lshr i64 %217, 63
  %238 = xor i64 %237, %236
  %239 = xor i64 %234, %236
  %240 = add nuw nsw i64 %239, %238
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %37, align 1, !tbaa !2451
  %.v = select i1 %232, i64 82, i64 14
  %243 = add i64 %208, %.v
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br i1 %232, label %block_4037a6, label %block_403762
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402ac0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402ae8

block_402b31:                                     ; preds = %block_402ae8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402af8:                                     ; preds = %block_402ae8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 5384
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 5447
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 5690
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402ae8

block_402ae8:                                     ; preds = %block_402af8, %block_402ac0
  %190 = phi i64 [ %.pre, %block_402ac0 ], [ %189, %block_402af8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402ac0 ], [ %157, %block_402af8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402af8, label %block_402b31
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4032a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RDI, align 8, !tbaa !2428
  %36 = sub i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = lshr i64 %36, 2
  %44 = trunc i64 %43 to i8
  %45 = and i8 %44, 1
  %46 = ashr i64 %36, 3
  store i64 %46, i64* %RSI, align 8, !tbaa !2428
  store i8 %45, i8* %37, align 1, !tbaa !2432
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 255
  %49 = tail call i32 @llvm.ctpop.i32(i32 %48) #9
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  store i8 %52, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %53 = icmp eq i64 %46, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %40, align 1, !tbaa !2432
  %55 = lshr i64 %46, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %41, align 1, !tbaa !2432
  store i8 0, i8* %42, align 1, !tbaa !2432
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %22, 25
  store i64 %57, i64* %PC, align 8
  %58 = load i64, i64* %5, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RBP, align 8, !tbaa !2428
  store i64 %59, i64* %5, align 8, !tbaa !2428
  %62 = add i64 %22, 26
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %59 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %PC, align 8, !tbaa !2428
  %65 = add i64 %58, 16
  store i64 %65, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403220:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_405f50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 8
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %22, i64* %23, align 1, !tbaa !2452
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %25 = bitcast i64* %24 to double*
  store double 0.000000e+00, double* %25, align 1, !tbaa !2452
  %26 = add i64 %16, 9
  store i64 %26, i64* %PC, align 8
  %27 = load i64, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %5, align 8, !tbaa !2428
  %31 = add i64 %16, 10
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  %34 = add i64 %27, 16
  store i64 %34, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_402210:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_402224

block_402232:                                     ; preds = %block_402224
  %54 = add i64 %159, -32
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %193, 8
  store i64 %55, i64* %PC, align 8
  %56 = load i64, i64* %162, align 8
  store i64 %56, i64* %RAX, align 8, !tbaa !2428
  %57 = add i64 %56, 8
  store i64 %57, i64* %RCX, align 8, !tbaa !2428
  %58 = icmp ugt i64 %56, -9
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %12, align 1, !tbaa !2433
  %60 = trunc i64 %57 to i32
  %61 = and i32 %60, 255
  %62 = tail call i32 @llvm.ctpop.i32(i32 %61) #9
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  store i8 %65, i8* %19, align 1, !tbaa !2447
  %66 = xor i64 %57, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %24, align 1, !tbaa !2448
  %70 = icmp eq i64 %57, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %27, align 1, !tbaa !2449
  %72 = lshr i64 %57, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2450
  %74 = lshr i64 %56, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %36, align 1, !tbaa !2451
  %79 = add i64 %193, 19
  store i64 %79, i64* %PC, align 8
  store i64 %57, i64* %162, align 8
  %80 = load i64, i64* %RAX, align 8
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %82 = add i64 %81, -1221
  %83 = add i64 %81, 8
  %84 = load i64, i64* %RSP, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %83, i64* %86, align 8
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  %87 = tail call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %82, %struct.Memory* %2)
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -24
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RAX, align 8, !tbaa !2428
  %94 = add i64 %93, 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = icmp ugt i64 %93, -9
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %12, align 1, !tbaa !2433
  %97 = trunc i64 %94 to i32
  %98 = and i32 %97, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #9
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %19, align 1, !tbaa !2447
  %103 = xor i64 %94, %93
  %104 = lshr i64 %103, 4
  %105 = trunc i64 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %24, align 1, !tbaa !2448
  %107 = icmp eq i64 %94, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %27, align 1, !tbaa !2449
  %109 = lshr i64 %94, 63
  %110 = trunc i64 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2450
  %111 = lshr i64 %93, 63
  %112 = xor i64 %109, %111
  %113 = add nuw nsw i64 %112, %109
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %36, align 1, !tbaa !2451
  %116 = add i64 %90, 15
  store i64 %116, i64* %PC, align 8
  store i64 %94, i64* %92, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -32
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i64*, i64** %53, align 8
  %124 = add i64 %119, 7
  store i64 %124, i64* %PC, align 8
  store i64 %122, i64* %123, align 8
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, -63
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_402224

block_402268:                                     ; preds = %block_402224
  %127 = load i64, i64* %RSP, align 8
  %128 = add i64 %127, 32
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %129 = icmp ugt i64 %127, -33
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %12, align 1, !tbaa !2433
  %131 = trunc i64 %128 to i32
  %132 = and i32 %131, 255
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #9
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %19, align 1, !tbaa !2447
  %137 = xor i64 %128, %127
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %24, align 1, !tbaa !2448
  %141 = icmp eq i64 %128, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %27, align 1, !tbaa !2449
  %143 = lshr i64 %128, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %30, align 1, !tbaa !2450
  %145 = lshr i64 %127, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %36, align 1, !tbaa !2451
  %150 = add i64 %193, 5
  store i64 %150, i64* %PC, align 8
  %151 = add i64 %127, 40
  %152 = inttoptr i64 %128 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RBP, align 8, !tbaa !2428
  store i64 %151, i64* %RSP, align 8, !tbaa !2428
  %154 = add i64 %193, 6
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %PC, align 8, !tbaa !2428
  %157 = add i64 %127, 48
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402224:                                     ; preds = %block_402232, %block_402210
  %158 = phi i64 [ %126, %block_402232 ], [ %.pre, %block_402210 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -8
  %161 = add i64 %158, 4
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %159, -16
  %165 = add i64 %158, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %163, %167
  %169 = icmp ult i64 %163, %167
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %12, align 1, !tbaa !2433
  %171 = trunc i64 %168 to i32
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #9
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %19, align 1, !tbaa !2447
  %177 = xor i64 %167, %163
  %178 = xor i64 %177, %168
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2448
  %182 = icmp eq i64 %168, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %27, align 1, !tbaa !2449
  %184 = lshr i64 %168, 63
  %185 = trunc i64 %184 to i8
  store i8 %185, i8* %30, align 1, !tbaa !2450
  %186 = lshr i64 %163, 63
  %187 = lshr i64 %167, 63
  %188 = xor i64 %187, %186
  %189 = xor i64 %184, %186
  %190 = add nuw nsw i64 %189, %188
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %36, align 1, !tbaa !2451
  %.v = select i1 %182, i64 68, i64 14
  %193 = add i64 %158, %.v
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  br i1 %182, label %block_402268, label %block_402232
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405e50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400a90___cxx_global_var_init_24(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400a90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%DV10MPb_type* @DV10MPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4415
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4037c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %7, -16
  %40 = add i64 %10, 12
  store i64 %40, i64* %PC, align 8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RDI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RSI, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -32
  %58 = load i64, i64* %RDX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %57 to i64*
  store i64 %58, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RDX, align 8, !tbaa !2428
  %68 = add i64 %62, -48
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -48
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %76, 1
  %78 = lshr i64 %77, 63
  %79 = trunc i64 %78 to i8
  %80 = shl i64 %77, 1
  %81 = icmp slt i64 %77, 0
  %82 = icmp slt i64 %80, 0
  %83 = xor i1 %81, %82
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  store i8 %79, i8* %14, align 1, !tbaa !2432
  %84 = trunc i64 %80 to i32
  %85 = and i32 %84, 254
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  %90 = icmp eq i64 %80, 0
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %29, align 1, !tbaa !2432
  %92 = lshr i64 %77, 62
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %32, align 1, !tbaa !2432
  %95 = zext i1 %83 to i8
  store i8 %95, i8* %38, align 1, !tbaa !2432
  %96 = add i64 %71, -40
  %97 = add i64 %73, 16
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %80, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4037f1

block_4037ff:                                     ; preds = %block_4037f1
  %99 = add i64 %322, -24
  %100 = add i64 %358, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %RAX, align 8, !tbaa !2428
  %103 = add i64 %358, 8
  store i64 %103, i64* %PC, align 8
  %104 = load i64, i64* %325, align 8
  %105 = add i64 %104, -1
  %106 = shl i64 %105, 3
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = add i64 %106, %102
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = icmp ult i64 %107, %102
  %109 = icmp ult i64 %107, %106
  %110 = or i1 %108, %109
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %14, align 1, !tbaa !2433
  %112 = trunc i64 %107 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %21, align 1, !tbaa !2447
  %118 = xor i64 %106, %102
  %119 = xor i64 %118, %107
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2448
  %123 = icmp eq i64 %107, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %107, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2450
  %127 = lshr i64 %102, 63
  %128 = lshr i64 %105, 60
  %129 = and i64 %128, 1
  %130 = xor i64 %125, %127
  %131 = xor i64 %125, %129
  %132 = add nuw nsw i64 %130, %131
  %133 = icmp eq i64 %132, 2
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %38, align 1, !tbaa !2451
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -24
  %137 = add i64 %358, 23
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %135, -40
  %141 = add i64 %358, 27
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = shl i64 %143, 3
  store i64 %144, i64* %RDX, align 8, !tbaa !2428
  %145 = add i64 %144, %139
  store i64 %145, i64* %RCX, align 8, !tbaa !2428
  %146 = icmp ult i64 %145, %139
  %147 = icmp ult i64 %145, %144
  %148 = or i1 %146, %147
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %14, align 1, !tbaa !2433
  %150 = trunc i64 %145 to i32
  %151 = and i32 %150, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #9
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %21, align 1, !tbaa !2447
  %156 = xor i64 %144, %139
  %157 = xor i64 %156, %145
  %158 = lshr i64 %157, 4
  %159 = trunc i64 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %26, align 1, !tbaa !2448
  %161 = icmp eq i64 %145, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %29, align 1, !tbaa !2449
  %163 = lshr i64 %145, 63
  %164 = trunc i64 %163 to i8
  store i8 %164, i8* %32, align 1, !tbaa !2450
  %165 = lshr i64 %139, 63
  %166 = lshr i64 %143, 60
  %167 = and i64 %166, 1
  %168 = xor i64 %163, %165
  %169 = xor i64 %163, %167
  %170 = add nuw nsw i64 %168, %169
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %38, align 1, !tbaa !2451
  %173 = load i64, i64* %RAX, align 8
  store i64 %173, i64* %RDI, align 8, !tbaa !2428
  store i64 %145, i64* %RSI, align 8, !tbaa !2428
  %174 = add i64 %358, -1887
  %175 = add i64 %358, 45
  %176 = load i64, i64* %RSP, align 8, !tbaa !2428
  %177 = add i64 %176, -8
  %178 = inttoptr i64 %177 to i64*
  store i64 %175, i64* %178, align 8
  store i64 %177, i64* %RSP, align 8, !tbaa !2428
  store i64 %174, i64* %PC, align 8, !tbaa !2428
  %179 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %174, %struct.Memory* %MEMORY.1)
  %180 = load i8, i8* %AL, align 1
  %181 = load i64, i64* %PC, align 8
  %182 = and i8 %180, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %183 = zext i8 %182 to i32
  %184 = tail call i32 @llvm.ctpop.i32(i32 %183) #9
  %185 = trunc i32 %184 to i8
  %186 = xor i8 %185, 1
  store i8 %186, i8* %21, align 1, !tbaa !2447
  %187 = xor i8 %182, 1
  store i8 %187, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %188 = icmp eq i8 %187, 0
  %.v25 = select i1 %188, i64 13, i64 8
  %189 = add i64 %181, %.v25
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br i1 %188, label %block_403839, label %block_403834

block_403839:                                     ; preds = %block_4037ff
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -40
  %192 = add i64 %189, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = add i64 %194, 1
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = icmp eq i64 %194, -1
  %197 = icmp eq i64 %195, 0
  %198 = or i1 %196, %197
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %14, align 1, !tbaa !2433
  %200 = trunc i64 %195 to i32
  %201 = and i32 %200, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %21, align 1, !tbaa !2447
  %206 = xor i64 %195, %194
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  store i8 %209, i8* %26, align 1, !tbaa !2448
  %210 = zext i1 %197 to i8
  store i8 %210, i8* %29, align 1, !tbaa !2449
  %211 = lshr i64 %195, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %32, align 1, !tbaa !2450
  %213 = lshr i64 %194, 63
  %214 = xor i64 %211, %213
  %215 = add nuw nsw i64 %214, %211
  %216 = icmp eq i64 %215, 2
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %38, align 1, !tbaa !2451
  %218 = add i64 %189, 12
  store i64 %218, i64* %PC, align 8
  store i64 %195, i64* %193, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_403845

block_4038b4:                                     ; preds = %block_40387e, %block_40388c
  %219 = phi i64 [ %.pre13, %block_40388c ], [ %322, %block_40387e ]
  %220 = phi i64 [ %.pre12, %block_40388c ], [ %597, %block_40387e ]
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %221 = add i64 %219, -48
  %222 = add i64 %220, 11
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = add i64 %224, -1
  %226 = icmp eq i64 %224, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %14, align 1, !tbaa !2433
  %228 = trunc i64 %225 to i32
  %229 = and i32 %228, 255
  %230 = tail call i32 @llvm.ctpop.i32(i32 %229) #9
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  %233 = xor i8 %232, 1
  store i8 %233, i8* %21, align 1, !tbaa !2447
  %234 = xor i64 %225, %224
  %235 = lshr i64 %234, 4
  %236 = trunc i64 %235 to i8
  %237 = and i8 %236, 1
  store i8 %237, i8* %26, align 1, !tbaa !2448
  %238 = icmp eq i64 %225, 0
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %29, align 1, !tbaa !2449
  %240 = lshr i64 %225, 63
  %241 = trunc i64 %240 to i8
  store i8 %241, i8* %32, align 1, !tbaa !2450
  %242 = lshr i64 %224, 63
  %243 = xor i64 %240, %242
  %244 = add nuw nsw i64 %243, %242
  %245 = icmp eq i64 %244, 2
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %38, align 1, !tbaa !2451
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %248 = ashr i64 %225, 63
  store i64 %248, i64* %RDX, align 8, !tbaa !2428
  %249 = add i64 %220, 23
  store i64 %249, i64* %PC, align 8
  %250 = zext i64 %248 to i128
  %251 = shl nuw i128 %250, 64
  %252 = zext i64 %225 to i128
  %253 = or i128 %251, %252
  %254 = sdiv i128 %253, 2
  %255 = trunc i128 %254 to i64
  %256 = and i128 %254, 18446744073709551615
  %257 = sext i64 %255 to i128
  %258 = and i128 %257, -18446744073709551616
  %259 = or i128 %258, %256
  %260 = icmp eq i128 %254, %259
  br i1 %260, label %263, label %261

; <label>:261:                                    ; preds = %block_4038b4
  %262 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %249, %struct.Memory* %MEMORY.1) #12
  %.pre14 = load i64, i64* %RBP, align 8
  %.pre15 = load i64, i64* %RAX, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:263:                                    ; preds = %block_4038b4
  %264 = srem i128 %253, 2
  %265 = trunc i128 %264 to i64
  store i64 %255, i64* %247, align 8, !tbaa !2428
  store i64 %265, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %263, %261
  %266 = phi i64 [ %.pre16, %261 ], [ %249, %263 ]
  %267 = phi i64 [ %.pre15, %261 ], [ %255, %263 ]
  %268 = phi i64 [ %.pre14, %261 ], [ %219, %263 ]
  %269 = phi %struct.Memory* [ %262, %261 ], [ %MEMORY.1, %263 ]
  %270 = add i64 %268, -40
  %271 = add i64 %266, 4
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  store i64 %267, i64* %272, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_4038cf

block_40390d:                                     ; preds = %block_403902
  %273 = add i64 %700, -24
  %274 = add i64 %712, 73
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = add i64 %700, -48
  %278 = add i64 %712, 77
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = add i64 %700, -8
  %282 = add i64 %712, 81
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %281 to i64*
  %284 = load i64, i64* %283, align 8
  store i64 %284, i64* %RDX, align 8, !tbaa !2428
  %285 = shl i64 %280, 3
  %286 = add i64 %285, %276
  %287 = add i64 %712, 85
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i64*
  store i64 %284, i64* %288, align 8
  %289 = load i64, i64* %RSP, align 8
  %290 = load i64, i64* %PC, align 8
  %291 = add i64 %289, 64
  store i64 %291, i64* %RSP, align 8, !tbaa !2428
  %292 = icmp ugt i64 %289, -65
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %14, align 1, !tbaa !2433
  %294 = trunc i64 %291 to i32
  %295 = and i32 %294, 255
  %296 = tail call i32 @llvm.ctpop.i32(i32 %295) #9
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = xor i8 %298, 1
  store i8 %299, i8* %21, align 1, !tbaa !2447
  %300 = xor i64 %291, %289
  %301 = lshr i64 %300, 4
  %302 = trunc i64 %301 to i8
  %303 = and i8 %302, 1
  store i8 %303, i8* %26, align 1, !tbaa !2448
  %304 = icmp eq i64 %291, 0
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %29, align 1, !tbaa !2449
  %306 = lshr i64 %291, 63
  %307 = trunc i64 %306 to i8
  store i8 %307, i8* %32, align 1, !tbaa !2450
  %308 = lshr i64 %289, 63
  %309 = xor i64 %306, %308
  %310 = add nuw nsw i64 %309, %306
  %311 = icmp eq i64 %310, 2
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %38, align 1, !tbaa !2451
  %313 = add i64 %290, 5
  store i64 %313, i64* %PC, align 8
  %314 = add i64 %289, 72
  %315 = inttoptr i64 %291 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %RBP, align 8, !tbaa !2428
  store i64 %314, i64* %RSP, align 8, !tbaa !2428
  %317 = add i64 %290, 6
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %314 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %PC, align 8, !tbaa !2428
  %320 = add i64 %289, 80
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4037f1:                                     ; preds = %block_403845, %block_4037c0
  %321 = phi i64 [ %.pre, %block_4037c0 ], [ %567, %block_403845 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4037c0 ], [ %179, %block_403845 ]
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -40
  %324 = add i64 %321, 4
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %322, -16
  %328 = add i64 %321, 8
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  %331 = sub i64 %326, %330
  %332 = icmp ult i64 %326, %330
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %14, align 1, !tbaa !2433
  %334 = trunc i64 %331 to i32
  %335 = and i32 %334, 255
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #9
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  %339 = xor i8 %338, 1
  store i8 %339, i8* %21, align 1, !tbaa !2447
  %340 = xor i64 %330, %326
  %341 = xor i64 %340, %331
  %342 = lshr i64 %341, 4
  %343 = trunc i64 %342 to i8
  %344 = and i8 %343, 1
  store i8 %344, i8* %26, align 1, !tbaa !2448
  %345 = icmp eq i64 %331, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %29, align 1, !tbaa !2449
  %347 = lshr i64 %331, 63
  %348 = trunc i64 %347 to i8
  store i8 %348, i8* %32, align 1, !tbaa !2450
  %349 = lshr i64 %326, 63
  %350 = lshr i64 %330, 63
  %351 = xor i64 %350, %349
  %352 = xor i64 %347, %349
  %353 = add nuw nsw i64 %352, %351
  %354 = icmp eq i64 %353, 2
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %38, align 1, !tbaa !2451
  %356 = icmp ne i8 %348, 0
  %357 = xor i1 %356, %354
  %.v23 = select i1 %357, i64 14, i64 141
  %358 = add i64 %321, %.v23
  store i64 %358, i64* %PC, align 8, !tbaa !2428
  br i1 %357, label %block_4037ff, label %block_40387e

block_403912:                                     ; preds = %block_403902
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %359 = add i64 %700, -24
  %360 = add i64 %712, 11
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RDX, align 8, !tbaa !2428
  %363 = add i64 %700, -40
  %364 = add i64 %712, 15
  store i64 %364, i64* %PC, align 8
  %365 = inttoptr i64 %363 to i64*
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %RSI, align 8, !tbaa !2428
  %367 = add i64 %712, 19
  store i64 %367, i64* %PC, align 8
  %368 = load i64, i64* %361, align 8
  store i64 %368, i64* %RDI, align 8, !tbaa !2428
  %369 = add i64 %700, -48
  %370 = add i64 %712, 23
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %R8, align 8, !tbaa !2428
  %373 = shl i64 %366, 3
  %374 = add i64 %373, %362
  %375 = add i64 %712, 27
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %RDX, align 8, !tbaa !2428
  %378 = shl i64 %372, 3
  %379 = add i64 %378, %368
  %380 = add i64 %712, 31
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  store i64 %377, i64* %381, align 8
  %382 = load i64, i64* %RBP, align 8
  %383 = add i64 %382, -40
  %384 = load i64, i64* %PC, align 8
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386, align 8
  store i64 %387, i64* %RDX, align 8, !tbaa !2428
  %388 = add i64 %382, -48
  %389 = add i64 %384, 8
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %388 to i64*
  store i64 %387, i64* %390, align 8
  %391 = load i64, i64* %RBP, align 8
  %392 = add i64 %391, -48
  %393 = load i64, i64* %PC, align 8
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = add i64 %396, -1
  %398 = icmp eq i64 %396, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %14, align 1, !tbaa !2433
  %400 = trunc i64 %397 to i32
  %401 = and i32 %400, 255
  %402 = tail call i32 @llvm.ctpop.i32(i32 %401) #9
  %403 = trunc i32 %402 to i8
  %404 = and i8 %403, 1
  %405 = xor i8 %404, 1
  store i8 %405, i8* %21, align 1, !tbaa !2447
  %406 = xor i64 %397, %396
  %407 = lshr i64 %406, 4
  %408 = trunc i64 %407 to i8
  %409 = and i8 %408, 1
  store i8 %409, i8* %26, align 1, !tbaa !2448
  %410 = icmp eq i64 %397, 0
  %411 = zext i1 %410 to i8
  store i8 %411, i8* %29, align 1, !tbaa !2449
  %412 = lshr i64 %397, 63
  %413 = trunc i64 %412 to i8
  store i8 %413, i8* %32, align 1, !tbaa !2450
  %414 = lshr i64 %396, 63
  %415 = xor i64 %412, %414
  %416 = add nuw nsw i64 %415, %414
  %417 = icmp eq i64 %416, 2
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %38, align 1, !tbaa !2451
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %419 = ashr i64 %397, 63
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = load i64, i64* %RCX, align 8
  %421 = add i64 %393, 16
  store i64 %421, i64* %PC, align 8
  %422 = sext i64 %420 to i128
  %423 = and i128 %422, -18446744073709551616
  %424 = zext i64 %419 to i128
  %425 = shl nuw i128 %424, 64
  %426 = zext i64 %397 to i128
  %427 = or i128 %425, %426
  %428 = zext i64 %420 to i128
  %429 = or i128 %423, %428
  %430 = sdiv i128 %427, %429
  %431 = trunc i128 %430 to i64
  %432 = and i128 %430, 18446744073709551615
  %433 = sext i64 %431 to i128
  %434 = and i128 %433, -18446744073709551616
  %435 = or i128 %434, %432
  %436 = icmp eq i128 %430, %435
  br i1 %436, label %439, label %437

; <label>:437:                                    ; preds = %block_403912
  %438 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %421, %struct.Memory* %MEMORY.4) #12
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %RAX, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:439:                                    ; preds = %block_403912
  %440 = srem i128 %427, %429
  %441 = trunc i128 %440 to i64
  store i64 %431, i64* %247, align 8, !tbaa !2428
  store i64 %441, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 0, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %439, %437
  %442 = phi i64 [ %.pre21, %437 ], [ %421, %439 ]
  %443 = phi i64 [ %.pre20, %437 ], [ %431, %439 ]
  %444 = phi i64 [ %.pre19, %437 ], [ %391, %439 ]
  %445 = phi %struct.Memory* [ %438, %437 ], [ %MEMORY.4, %439 ]
  %446 = add i64 %444, -40
  %447 = add i64 %442, 4
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i64*
  store i64 %443, i64* %448, align 8
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, -126
  store i64 %450, i64* %PC, align 8, !tbaa !2428
  br label %block_4038cf

block_403834:                                     ; preds = %block_4037ff
  %451 = add i64 %189, 17
  store i64 %451, i64* %PC, align 8, !tbaa !2428
  br label %block_403845

block_403845:                                     ; preds = %block_403834, %block_403839
  %452 = phi i64 [ %451, %block_403834 ], [ %.pre22, %block_403839 ]
  %453 = load i64, i64* %RBP, align 8
  %454 = add i64 %453, -24
  %455 = add i64 %452, 4
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i64*
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %RAX, align 8, !tbaa !2428
  %458 = add i64 %453, -40
  %459 = add i64 %452, 8
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %458 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = add i64 %461, -1
  store i64 %462, i64* %RCX, align 8, !tbaa !2428
  %463 = icmp eq i64 %461, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %14, align 1, !tbaa !2433
  %465 = trunc i64 %462 to i32
  %466 = and i32 %465, 255
  %467 = tail call i32 @llvm.ctpop.i32(i32 %466) #9
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  store i8 %470, i8* %21, align 1, !tbaa !2447
  %471 = xor i64 %462, %461
  %472 = lshr i64 %471, 4
  %473 = trunc i64 %472 to i8
  %474 = and i8 %473, 1
  store i8 %474, i8* %26, align 1, !tbaa !2448
  %475 = icmp eq i64 %462, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %29, align 1, !tbaa !2449
  %477 = lshr i64 %462, 63
  %478 = trunc i64 %477 to i8
  store i8 %478, i8* %32, align 1, !tbaa !2450
  %479 = lshr i64 %461, 63
  %480 = xor i64 %477, %479
  %481 = add nuw nsw i64 %480, %479
  %482 = icmp eq i64 %481, 2
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %38, align 1, !tbaa !2451
  %484 = add i64 %452, 16
  store i64 %484, i64* %PC, align 8
  %485 = load i64, i64* %456, align 8
  store i64 %485, i64* %RDX, align 8, !tbaa !2428
  %486 = add i64 %453, -48
  %487 = add i64 %452, 20
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RSI, align 8, !tbaa !2428
  %490 = shl i64 %462, 3
  %491 = add i64 %490, %457
  %492 = add i64 %452, 24
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i64*
  %494 = load i64, i64* %493, align 8
  store i64 %494, i64* %RAX, align 8, !tbaa !2428
  %495 = shl i64 %489, 3
  %496 = add i64 %495, %485
  %497 = add i64 %452, 28
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i64*
  store i64 %494, i64* %498, align 8
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -40
  %501 = load i64, i64* %PC, align 8
  %502 = add i64 %501, 4
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503, align 8
  %505 = add i64 %504, -1
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %506 = icmp eq i64 %504, 0
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %14, align 1, !tbaa !2433
  %508 = trunc i64 %505 to i32
  %509 = and i32 %508, 255
  %510 = tail call i32 @llvm.ctpop.i32(i32 %509) #9
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  store i8 %513, i8* %21, align 1, !tbaa !2447
  %514 = xor i64 %505, %504
  %515 = lshr i64 %514, 4
  %516 = trunc i64 %515 to i8
  %517 = and i8 %516, 1
  store i8 %517, i8* %26, align 1, !tbaa !2448
  %518 = icmp eq i64 %505, 0
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %29, align 1, !tbaa !2449
  %520 = lshr i64 %505, 63
  %521 = trunc i64 %520 to i8
  store i8 %521, i8* %32, align 1, !tbaa !2450
  %522 = lshr i64 %504, 63
  %523 = xor i64 %520, %522
  %524 = add nuw nsw i64 %523, %522
  %525 = icmp eq i64 %524, 2
  %526 = zext i1 %525 to i8
  store i8 %526, i8* %38, align 1, !tbaa !2451
  %527 = add i64 %499, -48
  %528 = add i64 %501, 12
  store i64 %528, i64* %PC, align 8
  %529 = inttoptr i64 %527 to i64*
  store i64 %505, i64* %529, align 8
  %530 = load i64, i64* %RBP, align 8
  %531 = add i64 %530, -40
  %532 = load i64, i64* %PC, align 8
  %533 = add i64 %532, 4
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %531 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = add i64 %532, 8
  store i64 %536, i64* %PC, align 8
  %537 = load i64, i64* %534, align 8
  %538 = add i64 %537, %535
  store i64 %538, i64* %RAX, align 8, !tbaa !2428
  %539 = icmp ult i64 %538, %535
  %540 = icmp ult i64 %538, %537
  %541 = or i1 %539, %540
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %14, align 1, !tbaa !2433
  %543 = trunc i64 %538 to i32
  %544 = and i32 %543, 255
  %545 = tail call i32 @llvm.ctpop.i32(i32 %544) #9
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  %548 = xor i8 %547, 1
  store i8 %548, i8* %21, align 1, !tbaa !2447
  %549 = xor i64 %537, %535
  %550 = xor i64 %549, %538
  %551 = lshr i64 %550, 4
  %552 = trunc i64 %551 to i8
  %553 = and i8 %552, 1
  store i8 %553, i8* %26, align 1, !tbaa !2448
  %554 = icmp eq i64 %538, 0
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %29, align 1, !tbaa !2449
  %556 = lshr i64 %538, 63
  %557 = trunc i64 %556 to i8
  store i8 %557, i8* %32, align 1, !tbaa !2450
  %558 = lshr i64 %535, 63
  %559 = lshr i64 %537, 63
  %560 = xor i64 %556, %558
  %561 = xor i64 %556, %559
  %562 = add nuw nsw i64 %560, %561
  %563 = icmp eq i64 %562, 2
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %38, align 1, !tbaa !2451
  %565 = add i64 %532, 12
  store i64 %565, i64* %PC, align 8
  store i64 %538, i64* %534, align 8
  %566 = load i64, i64* %PC, align 8
  %567 = add i64 %566, -136
  store i64 %567, i64* %PC, align 8, !tbaa !2428
  br label %block_4037f1

block_40387e:                                     ; preds = %block_4037f1
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %568 = add i64 %358, 4
  store i64 %568, i64* %PC, align 8
  %569 = load i64, i64* %325, align 8
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = add i64 %358, 8
  store i64 %570, i64* %PC, align 8
  %571 = load i64, i64* %329, align 8
  %572 = sub i64 %569, %571
  %573 = icmp ult i64 %569, %571
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %14, align 1, !tbaa !2433
  %575 = trunc i64 %572 to i32
  %576 = and i32 %575, 255
  %577 = tail call i32 @llvm.ctpop.i32(i32 %576) #9
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  store i8 %580, i8* %21, align 1, !tbaa !2447
  %581 = xor i64 %571, %569
  %582 = xor i64 %581, %572
  %583 = lshr i64 %582, 4
  %584 = trunc i64 %583 to i8
  %585 = and i8 %584, 1
  store i8 %585, i8* %26, align 1, !tbaa !2448
  %586 = icmp eq i64 %572, 0
  %587 = zext i1 %586 to i8
  store i8 %587, i8* %29, align 1, !tbaa !2449
  %588 = lshr i64 %572, 63
  %589 = trunc i64 %588 to i8
  store i8 %589, i8* %32, align 1, !tbaa !2450
  %590 = lshr i64 %569, 63
  %591 = lshr i64 %571, 63
  %592 = xor i64 %591, %590
  %593 = xor i64 %588, %590
  %594 = add nuw nsw i64 %593, %592
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %38, align 1, !tbaa !2451
  %.v24 = select i1 %586, i64 14, i64 54
  %597 = add i64 %358, %.v24
  store i64 %597, i64* %PC, align 8, !tbaa !2428
  br i1 %586, label %block_40388c, label %block_4038b4

block_4038e4:                                     ; preds = %block_4038cf
  %598 = load i64, i64* %RBP, align 8
  %599 = add i64 %598, -8
  store i64 %599, i64* %RSI, align 8, !tbaa !2428
  %600 = add i64 %598, -24
  %601 = add i64 %698, 8
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i64*
  %603 = load i64, i64* %602, align 8
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = add i64 %598, -40
  %605 = add i64 %698, 12
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %604 to i64*
  %607 = load i64, i64* %606, align 8
  %608 = shl i64 %607, 3
  store i64 %608, i64* %RCX, align 8, !tbaa !2428
  %609 = add i64 %608, %603
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = icmp ult i64 %609, %603
  %611 = icmp ult i64 %609, %608
  %612 = or i1 %610, %611
  %613 = zext i1 %612 to i8
  store i8 %613, i8* %14, align 1, !tbaa !2433
  %614 = trunc i64 %609 to i32
  %615 = and i32 %614, 255
  %616 = tail call i32 @llvm.ctpop.i32(i32 %615) #9
  %617 = trunc i32 %616 to i8
  %618 = and i8 %617, 1
  %619 = xor i8 %618, 1
  store i8 %619, i8* %21, align 1, !tbaa !2447
  %620 = xor i64 %608, %603
  %621 = xor i64 %620, %609
  %622 = lshr i64 %621, 4
  %623 = trunc i64 %622 to i8
  %624 = and i8 %623, 1
  store i8 %624, i8* %26, align 1, !tbaa !2448
  %625 = icmp eq i64 %609, 0
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %29, align 1, !tbaa !2449
  %627 = lshr i64 %609, 63
  %628 = trunc i64 %627 to i8
  store i8 %628, i8* %32, align 1, !tbaa !2450
  %629 = lshr i64 %603, 63
  %630 = lshr i64 %607, 60
  %631 = and i64 %630, 1
  %632 = xor i64 %627, %629
  %633 = xor i64 %627, %631
  %634 = add nuw nsw i64 %632, %633
  %635 = icmp eq i64 %634, 2
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %38, align 1, !tbaa !2451
  store i64 %609, i64* %RDI, align 8, !tbaa !2428
  %637 = add i64 %698, -2116
  %638 = add i64 %698, 27
  %639 = load i64, i64* %RSP, align 8, !tbaa !2428
  %640 = add i64 %639, -8
  %641 = inttoptr i64 %640 to i64*
  store i64 %638, i64* %641, align 8
  store i64 %640, i64* %RSP, align 8, !tbaa !2428
  store i64 %637, i64* %PC, align 8, !tbaa !2428
  %642 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %637, %struct.Memory* %MEMORY.3)
  %643 = load i64, i64* %RBP, align 8
  %644 = add i64 %643, -49
  %645 = load i8, i8* %AL, align 1
  %646 = load i64, i64* %PC, align 8
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %644 to i8*
  store i8 %645, i8* %648, align 1
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_403902

block_4038cf:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1
  %649 = phi i64 [ %.pre17, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %450, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.3 = phi %struct.Memory* [ %269, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ], [ %445, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %650 = load i64, i64* %RBP, align 8
  %651 = add i64 %650, -48
  %652 = add i64 %649, 8
  store i64 %652, i64* %PC, align 8
  %653 = inttoptr i64 %651 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RDX, align 8, !tbaa !2428
  %655 = add i64 %650, -32
  %656 = add i64 %649, 12
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = sub i64 %654, %658
  %660 = icmp ult i64 %654, %658
  %661 = zext i1 %660 to i8
  store i8 %661, i8* %14, align 1, !tbaa !2433
  %662 = trunc i64 %659 to i32
  %663 = and i32 %662, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #9
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %21, align 1, !tbaa !2447
  %668 = xor i64 %658, %654
  %669 = xor i64 %668, %659
  %670 = lshr i64 %669, 4
  %671 = trunc i64 %670 to i8
  %672 = and i8 %671, 1
  store i8 %672, i8* %26, align 1, !tbaa !2448
  %673 = icmp eq i64 %659, 0
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %29, align 1, !tbaa !2449
  %675 = lshr i64 %659, 63
  %676 = trunc i64 %675 to i8
  store i8 %676, i8* %32, align 1, !tbaa !2450
  %677 = lshr i64 %654, 63
  %678 = lshr i64 %658, 63
  %679 = xor i64 %678, %677
  %680 = xor i64 %675, %677
  %681 = add nuw nsw i64 %680, %679
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  store i8 %683, i8* %38, align 1, !tbaa !2451
  %684 = add i64 %650, -49
  %685 = add i64 %649, 15
  store i64 %685, i64* %PC, align 8
  %686 = inttoptr i64 %684 to i8*
  store i8 0, i8* %686, align 1
  %687 = load i64, i64* %PC, align 8
  %688 = add i64 %687, 36
  %689 = add i64 %687, 6
  %690 = load i8, i8* %29, align 1, !tbaa !2449
  %691 = icmp ne i8 %690, 0
  %692 = load i8, i8* %32, align 1, !tbaa !2450
  %693 = icmp ne i8 %692, 0
  %694 = load i8, i8* %38, align 1, !tbaa !2451
  %695 = icmp ne i8 %694, 0
  %696 = xor i1 %693, %695
  %697 = or i1 %691, %696
  %698 = select i1 %697, i64 %688, i64 %689
  store i64 %698, i64* %PC, align 8, !tbaa !2428
  br i1 %697, label %block_403902, label %block_4038e4

block_403902:                                     ; preds = %block_4038cf, %block_4038e4
  %699 = phi i64 [ %688, %block_4038cf ], [ %.pre18, %block_4038e4 ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_4038cf ], [ %642, %block_4038e4 ]
  %700 = load i64, i64* %RBP, align 8
  %701 = add i64 %700, -49
  %702 = add i64 %699, 3
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i8*
  %704 = load i8, i8* %703, align 1
  store i8 %704, i8* %AL, align 1, !tbaa !2432
  %705 = and i8 %704, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %706 = zext i8 %705 to i32
  %707 = tail call i32 @llvm.ctpop.i32(i32 %706) #9
  %708 = trunc i32 %707 to i8
  %709 = xor i8 %708, 1
  store i8 %709, i8* %21, align 1, !tbaa !2447
  %710 = xor i8 %705, 1
  store i8 %710, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %711 = icmp eq i8 %710, 0
  %.v = select i1 %711, i64 16, i64 11
  %712 = add i64 %699, %.v
  store i64 %712, i64* %PC, align 8, !tbaa !2428
  br i1 %711, label %block_403912, label %block_40390d

block_40388c:                                     ; preds = %block_40387e
  %713 = add i64 %322, -24
  %714 = add i64 %597, 4
  store i64 %714, i64* %PC, align 8
  %715 = inttoptr i64 %713 to i64*
  %716 = load i64, i64* %715, align 8
  store i64 %716, i64* %RAX, align 8, !tbaa !2428
  %717 = add i64 %597, 8
  store i64 %717, i64* %PC, align 8
  %718 = load i64, i64* %325, align 8
  %719 = add i64 %718, -1
  store i64 %719, i64* %RCX, align 8, !tbaa !2428
  %720 = icmp eq i64 %718, 0
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %14, align 1, !tbaa !2433
  %722 = trunc i64 %719 to i32
  %723 = and i32 %722, 255
  %724 = tail call i32 @llvm.ctpop.i32(i32 %723) #9
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  %727 = xor i8 %726, 1
  store i8 %727, i8* %21, align 1, !tbaa !2447
  %728 = xor i64 %719, %718
  %729 = lshr i64 %728, 4
  %730 = trunc i64 %729 to i8
  %731 = and i8 %730, 1
  store i8 %731, i8* %26, align 1, !tbaa !2448
  %732 = icmp eq i64 %719, 0
  %733 = zext i1 %732 to i8
  store i8 %733, i8* %29, align 1, !tbaa !2449
  %734 = lshr i64 %719, 63
  %735 = trunc i64 %734 to i8
  store i8 %735, i8* %32, align 1, !tbaa !2450
  %736 = lshr i64 %718, 63
  %737 = xor i64 %734, %736
  %738 = add nuw nsw i64 %737, %736
  %739 = icmp eq i64 %738, 2
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %38, align 1, !tbaa !2451
  %741 = add i64 %597, 16
  store i64 %741, i64* %PC, align 8
  %742 = load i64, i64* %715, align 8
  store i64 %742, i64* %RDX, align 8, !tbaa !2428
  %743 = add i64 %322, -48
  %744 = add i64 %597, 20
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to i64*
  %746 = load i64, i64* %745, align 8
  store i64 %746, i64* %RSI, align 8, !tbaa !2428
  %747 = shl i64 %719, 3
  %748 = add i64 %747, %716
  %749 = add i64 %597, 24
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %748 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %RAX, align 8, !tbaa !2428
  %752 = shl i64 %746, 3
  %753 = add i64 %752, %742
  %754 = add i64 %597, 28
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to i64*
  store i64 %751, i64* %755, align 8
  %756 = load i64, i64* %RBP, align 8
  %757 = add i64 %756, -40
  %758 = load i64, i64* %PC, align 8
  %759 = add i64 %758, 4
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %757 to i64*
  %761 = load i64, i64* %760, align 8
  %762 = add i64 %761, -1
  store i64 %762, i64* %RAX, align 8, !tbaa !2428
  %763 = icmp eq i64 %761, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %14, align 1, !tbaa !2433
  %765 = trunc i64 %762 to i32
  %766 = and i32 %765, 255
  %767 = tail call i32 @llvm.ctpop.i32(i32 %766) #9
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  %770 = xor i8 %769, 1
  store i8 %770, i8* %21, align 1, !tbaa !2447
  %771 = xor i64 %762, %761
  %772 = lshr i64 %771, 4
  %773 = trunc i64 %772 to i8
  %774 = and i8 %773, 1
  store i8 %774, i8* %26, align 1, !tbaa !2448
  %775 = icmp eq i64 %762, 0
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %29, align 1, !tbaa !2449
  %777 = lshr i64 %762, 63
  %778 = trunc i64 %777 to i8
  store i8 %778, i8* %32, align 1, !tbaa !2450
  %779 = lshr i64 %761, 63
  %780 = xor i64 %777, %779
  %781 = add nuw nsw i64 %780, %779
  %782 = icmp eq i64 %781, 2
  %783 = zext i1 %782 to i8
  store i8 %783, i8* %38, align 1, !tbaa !2451
  %784 = add i64 %756, -48
  %785 = add i64 %758, 12
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %784 to i64*
  store i64 %762, i64* %786, align 8
  %.pre12 = load i64, i64* %PC, align 8
  %.pre13 = load i64, i64* %RBP, align 8
  br label %block_4038b4
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4064f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -16
  %17 = load i64, i64* %RSI, align 8
  %18 = load i64, i64* %PC, align 8
  %19 = add i64 %18, 4
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %16 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 5
  store i64 %24, i64* %PC, align 8
  %25 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  %26 = load i64, i64* %25, align 1
  %27 = inttoptr i64 %22 to i64*
  store i64 %26, i64* %27, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %34 = bitcast %union.VectorReg* %3 to double*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %36 = bitcast i64* %35 to double*
  %37 = bitcast i64* %RAX to double**
  %.pre = load i64, i64* %PC, align 8
  br label %block_406501

block_40650f:                                     ; preds = %block_406501
  %38 = add i64 %110, 9
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %79, align 8
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = icmp ugt i64 %39, -9
  %42 = zext i1 %41 to i8
  store i8 %42, i8* %28, align 1, !tbaa !2433
  %43 = trunc i64 %40 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  store i8 %48, i8* %29, align 1, !tbaa !2447
  %49 = xor i64 %40, %39
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  store i8 %52, i8* %30, align 1, !tbaa !2448
  %53 = icmp eq i64 %40, 0
  %54 = zext i1 %53 to i8
  store i8 %54, i8* %31, align 1, !tbaa !2449
  %55 = lshr i64 %40, 63
  %56 = trunc i64 %55 to i8
  store i8 %56, i8* %32, align 1, !tbaa !2450
  %57 = lshr i64 %39, 63
  %58 = xor i64 %55, %57
  %59 = add nuw nsw i64 %58, %55
  %60 = icmp eq i64 %59, 2
  %61 = zext i1 %60 to i8
  store i8 %61, i8* %33, align 1, !tbaa !2451
  %62 = add i64 %110, 20
  store i64 %62, i64* %PC, align 8
  store i64 %40, i64* %79, align 8
  %63 = load double*, double** %37, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = load double, double* %34, align 1
  %67 = load double, double* %63, align 8
  %68 = fadd double %66, %67
  store double %68, double* %34, align 1, !tbaa !2452
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -24
  %71 = add i64 %64, 9
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to double*
  store double %68, double* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, -43
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  br label %block_406501

block_406501:                                     ; preds = %block_40650f, %block_4064f0
  %75 = phi i64 [ %74, %block_40650f ], [ %.pre, %block_4064f0 ]
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -8
  %78 = add i64 %75, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %76, -16
  %82 = add i64 %75, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %80, %84
  %86 = icmp ult i64 %80, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %28, align 1, !tbaa !2433
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %29, align 1, !tbaa !2447
  %94 = xor i64 %84, %80
  %95 = xor i64 %94, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %30, align 1, !tbaa !2448
  %99 = icmp eq i64 %85, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %31, align 1, !tbaa !2449
  %101 = lshr i64 %85, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %32, align 1, !tbaa !2450
  %103 = lshr i64 %80, 63
  %104 = lshr i64 %84, 63
  %105 = xor i64 %104, %103
  %106 = xor i64 %101, %103
  %107 = add nuw nsw i64 %106, %105
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %33, align 1, !tbaa !2451
  %.v = select i1 %99, i64 48, i64 14
  %110 = add i64 %75, %.v
  %111 = add i64 %76, -24
  %112 = add i64 %110, 5
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %25, align 1, !tbaa !2452
  store double 0.000000e+00, double* %36, align 1, !tbaa !2452
  br i1 %99, label %block_406531, label %block_40650f

block_406531:                                     ; preds = %block_406501
  %115 = add i64 %110, 6
  store i64 %115, i64* %PC, align 8
  %116 = load i64, i64* %6, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %6, align 8, !tbaa !2428
  %120 = add i64 %110, 7
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %117 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %PC, align 8, !tbaa !2428
  %123 = add i64 %116, 16
  store i64 %123, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402160:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2451
  %40 = add i64 %7, -16
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 11
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = bitcast %union.VectorReg* %4 to double*
  %51 = bitcast i64* %RCX to i64**
  %52 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_402170

block_40219f:                                     ; preds = %block_402170
  %53 = load i64, i64* %RSP, align 8
  %54 = add i64 %53, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  %55 = icmp ugt i64 %53, -17
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %14, align 1, !tbaa !2433
  %57 = trunc i64 %54 to i32
  %58 = and i32 %57, 255
  %59 = tail call i32 @llvm.ctpop.i32(i32 %58) #9
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  store i8 %62, i8* %21, align 1, !tbaa !2447
  %63 = xor i64 %53, 16
  %64 = xor i64 %63, %54
  %65 = lshr i64 %64, 4
  %66 = trunc i64 %65 to i8
  %67 = and i8 %66, 1
  store i8 %67, i8* %27, align 1, !tbaa !2448
  %68 = icmp eq i64 %54, 0
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %30, align 1, !tbaa !2449
  %70 = lshr i64 %54, 63
  %71 = trunc i64 %70 to i8
  store i8 %71, i8* %33, align 1, !tbaa !2450
  %72 = lshr i64 %53, 63
  %73 = xor i64 %70, %72
  %74 = add nuw nsw i64 %73, %70
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %39, align 1, !tbaa !2451
  %77 = add i64 %120, 5
  store i64 %77, i64* %PC, align 8
  %78 = add i64 %53, 24
  %79 = inttoptr i64 %54 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RBP, align 8, !tbaa !2428
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %81 = add i64 %120, 6
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %78 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  %84 = add i64 %53, 32
  store i64 %84, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402170:                                     ; preds = %block_40217e, %block_402160
  %85 = phi i64 [ %.pre, %block_402160 ], [ %163, %block_40217e ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402160 ], [ %126, %block_40217e ]
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -8
  %88 = add i64 %85, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %86, -16
  %92 = add i64 %85, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %90, %94
  %96 = icmp ult i64 %90, %94
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %14, align 1, !tbaa !2433
  %98 = trunc i64 %95 to i32
  %99 = and i32 %98, 255
  %100 = tail call i32 @llvm.ctpop.i32(i32 %99) #9
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = xor i8 %102, 1
  store i8 %103, i8* %21, align 1, !tbaa !2447
  %104 = xor i64 %94, %90
  %105 = xor i64 %104, %95
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  store i8 %108, i8* %27, align 1, !tbaa !2448
  %109 = icmp eq i64 %95, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %30, align 1, !tbaa !2449
  %111 = lshr i64 %95, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %33, align 1, !tbaa !2450
  %113 = lshr i64 %90, 63
  %114 = lshr i64 %94, 63
  %115 = xor i64 %114, %113
  %116 = xor i64 %111, %113
  %117 = add nuw nsw i64 %116, %115
  %118 = icmp eq i64 %117, 2
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %39, align 1, !tbaa !2451
  %.v = select i1 %109, i64 47, i64 14
  %120 = add i64 %85, %.v
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  br i1 %109, label %block_40219f, label %block_40217e

block_40217e:                                     ; preds = %block_402170
  %121 = add i64 %120, -6686
  %122 = add i64 %120, 5
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call fastcc %struct.Memory* @ext_6208f0_rand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %127 = load i32, i32* %EAX, align 4
  %128 = load i64, i64* %PC, align 8
  %129 = sitofp i32 %127 to double
  store double %129, double* %50, align 1, !tbaa !2452
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -8
  %132 = add i64 %128, 8
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RCX, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  store i64 %135, i64* %RDX, align 8, !tbaa !2428
  %136 = icmp ugt i64 %134, -9
  %137 = zext i1 %136 to i8
  store i8 %137, i8* %14, align 1, !tbaa !2433
  %138 = trunc i64 %135 to i32
  %139 = and i32 %138, 255
  %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #9
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %21, align 1, !tbaa !2447
  %144 = xor i64 %135, %134
  %145 = lshr i64 %144, 4
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  store i8 %147, i8* %27, align 1, !tbaa !2448
  %148 = icmp eq i64 %135, 0
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %30, align 1, !tbaa !2449
  %150 = lshr i64 %135, 63
  %151 = trunc i64 %150 to i8
  store i8 %151, i8* %33, align 1, !tbaa !2450
  %152 = lshr i64 %134, 63
  %153 = xor i64 %150, %152
  %154 = add nuw nsw i64 %153, %150
  %155 = icmp eq i64 %154, 2
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %39, align 1, !tbaa !2451
  %157 = add i64 %128, 19
  store i64 %157, i64* %PC, align 8
  store i64 %135, i64* %133, align 8
  %158 = load i64*, i64** %51, align 8
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = load i64, i64* %52, align 1
  store i64 %161, i64* %158, align 8
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, -42
  store i64 %163, i64* %PC, align 8, !tbaa !2428
  br label %block_402170
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406230:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007d0___cxx_global_var_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_4007d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = add i64 %8, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  store i64 ptrtoint (%VData_type* @VData to i64), i64* %40, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 5
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000) to i32), i32 255)) #9
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  br label %block_4007eb

block_4007eb:                                     ; preds = %block_4007eb, %block_4007d0
  %47 = phi i64 [ %98, %block_4007eb ], [ %42, %block_4007d0 ]
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = add i64 %47, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %48, -16
  %54 = add i64 %47, 11
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 5466
  %58 = add i64 %56, 5
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64* %RAX, align 8, !tbaa !2428
  store i8 zext (i1 or (i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 ptrtoint (%VData_type* @VData to i64)), i1 icmp ult (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 16000)) to i8), i8* %12, align 1, !tbaa !2433
  store i8 %46, i8* %19, align 1, !tbaa !2447
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)), i64 4) to i8), i8 1), i8* %25, align 1, !tbaa !2448
  store i8 zext (i1 icmp eq (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 0) to i8), i8* %28, align 1, !tbaa !2449
  store i8 trunc (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63) to i8), i8* %31, align 1, !tbaa !2450
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63), i64 lshr (i64 ptrtoint (%VData_type* @VData to i64), i64 63)), i64 lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)), i64 2) to i8), i8* %37, align 1, !tbaa !2451
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -16
  %66 = add i64 %63, 20
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = add i64 %68, 8
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = lshr i64 %69, 63
  %71 = sub i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %72 = icmp ult i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %12, align 1, !tbaa !2433
  %74 = trunc i64 %71 to i32
  %75 = and i32 %74, 255
  %76 = tail call i32 @llvm.ctpop.i32(i32 %75) #9
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  %79 = xor i8 %78, 1
  store i8 %79, i8* %19, align 1, !tbaa !2447
  %80 = xor i64 %69, add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000)
  %81 = xor i64 %80, %71
  %82 = lshr i64 %81, 4
  %83 = trunc i64 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %25, align 1, !tbaa !2448
  %85 = icmp eq i64 %71, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %28, align 1, !tbaa !2449
  %87 = lshr i64 %71, 63
  %88 = trunc i64 %87 to i8
  store i8 %88, i8* %31, align 1, !tbaa !2450
  %89 = xor i64 %70, lshr (i64 add (i64 ptrtoint (%VData_type* @VData to i64), i64 16000), i64 63)
  %90 = xor i64 %87, %70
  %91 = add nuw nsw i64 %90, %89
  %92 = icmp eq i64 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %37, align 1, !tbaa !2451
  %94 = add i64 %64, -8
  %95 = add i64 %63, 31
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %69, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, -47
  %99 = add i64 %97, 6
  %100 = load i8, i8* %28, align 1, !tbaa !2449
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i64 %98, i64 %99
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br i1 %101, label %block_4007eb, label %block_400820

block_400820:                                     ; preds = %block_4007eb
  %103 = load i64, i64* %RSP, align 8
  %104 = add i64 %103, 16
  store i64 %104, i64* %RSP, align 8, !tbaa !2428
  %105 = icmp ugt i64 %103, -17
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %12, align 1, !tbaa !2433
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %19, align 1, !tbaa !2447
  %113 = xor i64 %103, 16
  %114 = xor i64 %113, %104
  %115 = lshr i64 %114, 4
  %116 = trunc i64 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %25, align 1, !tbaa !2448
  %118 = icmp eq i64 %104, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %28, align 1, !tbaa !2449
  %120 = lshr i64 %104, 63
  %121 = trunc i64 %120 to i8
  store i8 %121, i8* %31, align 1, !tbaa !2450
  %122 = lshr i64 %103, 63
  %123 = xor i64 %120, %122
  %124 = add nuw nsw i64 %123, %120
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %37, align 1, !tbaa !2451
  %127 = add i64 %102, 5
  store i64 %127, i64* %PC, align 8
  %128 = add i64 %103, 24
  %129 = inttoptr i64 %104 to i64*
  %130 = load i64, i64* %129, align 8
  store i64 %130, i64* %RBP, align 8, !tbaa !2428
  store i64 %128, i64* %RSP, align 8, !tbaa !2428
  %131 = add i64 %102, 6
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %128 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %134 = add i64 %103, 32
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4027b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4027d8

block_402859:                                     ; preds = %block_4027d8
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4027e8:                                     ; preds = %block_4027d8
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 4464
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 10511
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 4866
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_4027d8

block_4027d8:                                     ; preds = %block_4027e8, %block_4027b0
  %255 = phi i64 [ %.pre, %block_4027b0 ], [ %254, %block_4027e8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4027b0 ], [ %222, %block_4027e8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_4027e8, label %block_402859
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400990___cxx_global_var_init_16(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400990:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  store i64 ptrtoint (%dMPb_type* @dMPb to i64), i64* %RDI, align 8, !tbaa !2428
  %10 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %10, i64* %RSI, align 8, !tbaa !2428
  %11 = add i64 %9, 4735
  %12 = add i64 %9, 26
  %13 = add i64 %6, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %12, i64* %14, align 8
  store i64 %13, i64* %5, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %15 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 1
  store i64 %17, i64* %PC, align 8
  %18 = load i64, i64* %5, align 8, !tbaa !2428
  %19 = add i64 %18, 8
  %20 = inttoptr i64 %18 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %RBP, align 8, !tbaa !2428
  store i64 %19, i64* %5, align 8, !tbaa !2428
  %22 = add i64 %16, 2
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %PC, align 8, !tbaa !2428
  %25 = add i64 %18, 16
  store i64 %25, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %15
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405430:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -120
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 112
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -24
  store i64 %39, i64* %RAX, align 8, !tbaa !2428
  %40 = add i64 %6, -16
  store i64 %40, i64* %RCX, align 8, !tbaa !2428
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %9, 19
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RAX, align 8
  %51 = load i64, i64* %PC, align 8
  store i64 %50, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RCX, align 8
  store i64 %52, i64* %RSI, align 8, !tbaa !2428
  %53 = add i64 %51, -3288
  %54 = add i64 %51, 11
  %55 = load i64, i64* %RSP, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %54, i64* %57, align 8
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %58 = tail call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %53, %struct.Memory* %2)
  %59 = load i64, i64* %RAX, align 8
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %59, -1
  %62 = icmp eq i64 %59, 0
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %13, align 1, !tbaa !2433
  %64 = trunc i64 %61 to i32
  %65 = and i32 %64, 255
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #9
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %20, align 1, !tbaa !2447
  %70 = xor i64 %61, %59
  %71 = lshr i64 %70, 4
  %72 = trunc i64 %71 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %26, align 1, !tbaa !2448
  %74 = icmp eq i64 %61, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %29, align 1, !tbaa !2449
  %76 = lshr i64 %61, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %32, align 1, !tbaa !2450
  %78 = lshr i64 %59, 63
  %79 = xor i64 %76, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %38, align 1, !tbaa !2451
  %83 = icmp ne i8 %77, 0
  %84 = xor i1 %83, %81
  %85 = or i1 %74, %84
  %.v = select i1 %85, i64 372, i64 10
  %86 = add i64 %60, %.v
  store i64 %86, i64* %PC, align 8, !tbaa !2428
  br i1 %85, label %block_4055c7, label %block_40545d

block_405519:                                     ; preds = %block_405504
  %87 = add i64 %365, 92
  br label %block_405575

block_40547f:                                     ; preds = %block_40551e, %block_40545d
  %.pre = phi i64 [ %.pre.pre, %block_40545d ], [ %346, %block_40551e ]
  %MEMORY.0 = phi %struct.Memory* [ %95, %block_40545d ], [ %336, %block_40551e ]
  br label %block_405484

block_40545d:                                     ; preds = %block_405430
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -8
  store i64 %89, i64* %RDI, align 8, !tbaa !2428
  %90 = add i64 %86, -3373
  %91 = add i64 %86, 9
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %90, %struct.Memory* %58)
  %96 = bitcast %union.anon* %3 to i64**
  %97 = load i64*, i64** %96, align 8
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC, align 8
  %100 = load i64, i64* %97, align 8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %100, i64* %101, align 1, !tbaa !2452
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %103 = bitcast i64* %102 to double*
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -24
  %106 = add i64 %98, 9
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i64*
  store i64 %100, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -8
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %108, -32
  %115 = add i64 %110, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -40
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %128 = bitcast i64* %127 to double*
  %.pre.pre = load i64, i64* %PC, align 8
  br label %block_40547f

block_4054d6:                                     ; preds = %block_4054d1, %block_4054f2
  %.sink8 = phi i64 [ %348, %block_4054d1 ], [ %271, %block_4054f2 ]
  %MEMORY.1 = phi %struct.Memory* [ %374, %block_4054d1 ], [ %263, %block_4054f2 ]
  %129 = load i64, i64* %RBP, align 8
  %130 = add i64 %129, -32
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %131 = add i64 %.sink8, -3494
  %132 = add i64 %.sink8, 9
  %133 = load i64, i64* %RSP, align 8, !tbaa !2428
  %134 = add i64 %133, -8
  %135 = inttoptr i64 %134 to i64*
  store i64 %132, i64* %135, align 8
  store i64 %134, i64* %RSP, align 8, !tbaa !2428
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %136 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %131, %struct.Memory* %MEMORY.1)
  %137 = load i64*, i64** %96, align 8
  %138 = load i64, i64* %PC, align 8
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC, align 8
  %140 = load i64, i64* %137, align 8
  store i64 %140, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %141 = load i64, i64* %RBP, align 8
  %142 = add i64 %141, -24
  %143 = add i64 %138, 9
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %142 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %146 = add i64 %138, 13
  store i64 %146, i64* %PC, align 8
  %.cast = bitcast i64 %145 to double
  %147 = bitcast i64 %140 to double
  %148 = fcmp uno double %.cast, %147
  br i1 %148, label %149, label %159

; <label>:149:                                    ; preds = %block_4054d6
  %150 = fadd double %.cast, %147
  %151 = bitcast double %150 to i64
  %152 = and i64 %151, 9221120237041090560
  %153 = icmp eq i64 %152, 9218868437227405312
  %154 = and i64 %151, 2251799813685247
  %155 = icmp ne i64 %154, 0
  %156 = and i1 %153, %155
  br i1 %156, label %157, label %165

; <label>:157:                                    ; preds = %149
  %158 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %146, %struct.Memory* %MEMORY.1) #12
  %.pre38 = load i64, i64* %PC, align 8
  %.pre39 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:159:                                    ; preds = %block_4054d6
  %160 = fcmp ogt double %.cast, %147
  br i1 %160, label %165, label %161

; <label>:161:                                    ; preds = %159
  %162 = fcmp olt double %.cast, %147
  br i1 %162, label %165, label %163

; <label>:163:                                    ; preds = %161
  %164 = fcmp oeq double %.cast, %147
  br i1 %164, label %165, label %169

; <label>:165:                                    ; preds = %163, %161, %159, %149
  %166 = phi i8 [ 0, %159 ], [ 0, %161 ], [ 1, %163 ], [ 1, %149 ]
  %167 = phi i8 [ 0, %159 ], [ 0, %161 ], [ 0, %163 ], [ 1, %149 ]
  %168 = phi i8 [ 0, %159 ], [ 1, %161 ], [ 0, %163 ], [ 1, %149 ]
  store i8 %166, i8* %29, align 1, !tbaa !2432
  store i8 %167, i8* %20, align 1, !tbaa !2432
  store i8 %168, i8* %13, align 1, !tbaa !2432
  br label %169

; <label>:169:                                    ; preds = %165, %163
  store i8 0, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %32, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %169, %157
  %170 = phi i64 [ %.pre39, %157 ], [ %141, %169 ]
  %171 = phi i64 [ %.pre38, %157 ], [ %146, %169 ]
  %172 = phi %struct.Memory* [ %158, %157 ], [ %MEMORY.1, %169 ]
  %173 = load i8, i8* %13, align 1, !tbaa !2433
  %174 = load i8, i8* %29, align 1, !tbaa !2449
  %175 = or i8 %174, %173
  %176 = icmp ne i8 %175, 0
  %.v54 = select i1 %176, i64 24, i64 6
  %177 = add i64 %171, %.v54
  %178 = add i64 %170, -32
  %179 = add i64 %177, 4
  store i64 %179, i64* %PC, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  br i1 %176, label %block_405504, label %block_4054f2

block_405575:                                     ; preds = %block_4054cc, %block_405519
  %.sink = phi i64 [ %347, %block_4054cc ], [ %87, %block_405519 ]
  %MEMORY.2 = phi %struct.Memory* [ %374, %block_4054cc ], [ %355, %block_405519 ]
  %180 = load i64, i64* %RBP, align 8
  %181 = add i64 %180, -40
  store i64 %181, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %182 = add i64 %180, -8
  %183 = add i64 %.sink, 15
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = add i64 %180, -56
  %187 = add i64 %.sink, 19
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  store i64 %185, i64* %188, align 8
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, -3560
  %191 = add i64 %189, 5
  %192 = load i64, i64* %RSP, align 8, !tbaa !2428
  %193 = add i64 %192, -8
  %194 = inttoptr i64 %193 to i64*
  store i64 %191, i64* %194, align 8
  store i64 %193, i64* %RSP, align 8, !tbaa !2428
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %195 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %190, %struct.Memory* %MEMORY.2)
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -64
  %198 = load i64, i64* %RAX, align 8
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC, align 8
  %201 = inttoptr i64 %197 to i64*
  store i64 %198, i64* %201, align 8
  %202 = load i64, i64* %RBP, align 8
  %203 = add i64 %202, -56
  %204 = load i64, i64* %PC, align 8
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %RDI, align 8, !tbaa !2428
  %208 = add i64 %202, -64
  %209 = add i64 %204, 8
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RSI, align 8, !tbaa !2428
  %212 = add i64 %204, -353
  %213 = add i64 %204, 13
  %214 = load i64, i64* %RSP, align 8, !tbaa !2428
  %215 = add i64 %214, -8
  %216 = inttoptr i64 %215 to i64*
  store i64 %213, i64* %216, align 8
  store i64 %215, i64* %RSP, align 8, !tbaa !2428
  store i64 %212, i64* %PC, align 8, !tbaa !2428
  %217 = tail call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* nonnull %0, i64 %212, %struct.Memory* %195)
  %218 = load i64, i64* %RBP, align 8
  %219 = add i64 %218, -40
  %220 = load i64, i64* %PC, align 8
  store i64 %219, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %221 = add i64 %220, -3582
  %222 = add i64 %220, 16
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !tbaa !2428
  %226 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* nonnull %0, i64 %221, %struct.Memory* %217)
  %227 = load i64, i64* %RBP, align 8
  %228 = add i64 %227, -72
  %229 = load i64, i64* %RAX, align 8
  %230 = load i64, i64* %PC, align 8
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %228 to i64*
  store i64 %229, i64* %232, align 8
  %233 = load i64, i64* %RBP, align 8
  %234 = add i64 %233, -16
  %235 = load i64, i64* %PC, align 8
  %236 = add i64 %235, 4
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = add i64 %233, -80
  %240 = add i64 %235, 8
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  store i64 %238, i64* %241, align 8
  %242 = load i64, i64* %RBP, align 8
  %243 = add i64 %242, -72
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, 4
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %RDI, align 8, !tbaa !2428
  %248 = add i64 %242, -80
  %249 = add i64 %244, 8
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  %251 = load i64, i64* %250, align 8
  store i64 %251, i64* %RSI, align 8, !tbaa !2428
  %252 = add i64 %244, -394
  %253 = add i64 %244, 13
  %254 = load i64, i64* %RSP, align 8, !tbaa !2428
  %255 = add i64 %254, -8
  %256 = inttoptr i64 %255 to i64*
  store i64 %253, i64* %256, align 8
  store i64 %255, i64* %RSP, align 8, !tbaa !2428
  store i64 %252, i64* %PC, align 8, !tbaa !2428
  %257 = tail call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* nonnull %0, i64 %252, %struct.Memory* %226)
  %.pre40 = load i64, i64* %PC, align 8
  br label %block_4055c7

block_4054f2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %258 = add i64 %177, -3490
  %259 = add i64 %177, 9
  %260 = load i64, i64* %RSP, align 8, !tbaa !2428
  %261 = add i64 %260, -8
  %262 = inttoptr i64 %261 to i64*
  store i64 %259, i64* %262, align 8
  store i64 %261, i64* %RSP, align 8, !tbaa !2428
  store i64 %258, i64* %PC, align 8, !tbaa !2428
  %263 = tail call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %258, %struct.Memory* %172)
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -96
  %266 = load i64, i64* %RAX, align 8
  %267 = load i64, i64* %PC, align 8
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %265 to i64*
  store i64 %266, i64* %269, align 8
  %270 = load i64, i64* %PC, align 8
  %271 = add i64 %270, -41
  br label %block_4054d6

block_40551e:                                     ; preds = %block_405504
  %272 = load i64, i64* %RBP, align 8
  %273 = add i64 %272, -40
  store i64 %273, i64* %RDI, align 8, !tbaa !2428
  %274 = add i64 %365, -3566
  %275 = add i64 %365, 9
  %276 = load i64, i64* %RSP, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %275, i64* %278, align 8
  store i64 %277, i64* %RSP, align 8, !tbaa !2428
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  %279 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %274, %struct.Memory* %355)
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -32
  %282 = load i64, i64* %PC, align 8
  store i64 %281, i64* %RDI, align 8, !tbaa !2428
  %283 = load i64*, i64** %96, align 8
  %284 = add i64 %282, 8
  store i64 %284, i64* %PC, align 8
  %285 = load i64, i64* %283, align 8
  store i64 %285, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %286 = add i64 %280, -48
  %287 = add i64 %282, 13
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i64*
  store i64 %285, i64* %288, align 8
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, -3588
  %291 = add i64 %289, 5
  %292 = load i64, i64* %RSP, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %290, %struct.Memory* %279)
  %296 = load i64, i64* %RBP, align 8
  %297 = add i64 %296, -40
  %298 = load i64, i64* %PC, align 8
  store i64 %297, i64* %RDI, align 8, !tbaa !2428
  %299 = load i64*, i64** %96, align 8
  %300 = add i64 %298, 8
  store i64 %300, i64* %PC, align 8
  %301 = load i64, i64* %299, align 8
  store i64 %301, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %302 = add i64 %296, -104
  %303 = add i64 %298, 13
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  store i64 %301, i64* %304, align 8
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, -3606
  %307 = add i64 %305, 5
  %308 = load i64, i64* %RSP, align 8, !tbaa !2428
  %309 = add i64 %308, -8
  %310 = inttoptr i64 %309 to i64*
  store i64 %307, i64* %310, align 8
  store i64 %309, i64* %RSP, align 8, !tbaa !2428
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  %311 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %306, %struct.Memory* %295)
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -32
  %314 = load i64, i64* %PC, align 8
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  %315 = add i64 %312, -104
  %316 = add i64 %314, 9
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i64*
  %318 = load i64, i64* %317, align 8
  store i64 %318, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %319 = load i64*, i64** %96, align 8
  %320 = add i64 %314, 13
  store i64 %320, i64* %PC, align 8
  store i64 %318, i64* %319, align 8
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -48
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, 5
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %322 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %327 = add i64 %321, -112
  %328 = add i64 %323, 10
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  store i64 %326, i64* %329, align 8
  %330 = load i64, i64* %PC, align 8
  %331 = add i64 %330, -3634
  %332 = add i64 %330, 5
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %331, %struct.Memory* %311)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -112
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %343 = load i64*, i64** %96, align 8
  %344 = add i64 %339, 9
  store i64 %344, i64* %PC, align 8
  store i64 %342, i64* %343, align 8
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, -241
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  br label %block_40547f

block_4054cc:                                     ; preds = %block_4054b7
  %347 = add i64 %384, 169
  br label %block_405575

block_4054d1:                                     ; preds = %block_4054b7
  %348 = add i64 %384, 5
  br label %block_4054d6

block_405504:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %349 = add i64 %170, -40
  store i64 %349, i64* %RSI, align 8, !tbaa !2428
  %350 = add i64 %177, 236
  %351 = add i64 %177, 13
  %352 = load i64, i64* %RSP, align 8, !tbaa !2428
  %353 = add i64 %352, -8
  %354 = inttoptr i64 %353 to i64*
  store i64 %351, i64* %354, align 8
  store i64 %353, i64* %RSP, align 8, !tbaa !2428
  store i64 %350, i64* %PC, align 8, !tbaa !2428
  %355 = tail call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %350, %struct.Memory* %172)
  %356 = load i8, i8* %AL, align 1
  %357 = load i64, i64* %PC, align 8
  %358 = and i8 %356, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %359 = zext i8 %358 to i32
  %360 = tail call i32 @llvm.ctpop.i32(i32 %359) #9
  %361 = trunc i32 %360 to i8
  %362 = xor i8 %361, 1
  store i8 %362, i8* %20, align 1, !tbaa !2447
  %363 = xor i8 %358, 1
  store i8 %363, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %364 = icmp eq i8 %363, 0
  %.v43 = select i1 %364, i64 13, i64 8
  %365 = add i64 %357, %.v43
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  br i1 %364, label %block_40551e, label %block_405519

block_4054b7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %366 = load i64, i64* %RBP, align 8
  %367 = add i64 %366, -32
  store i64 %367, i64* %RDI, align 8, !tbaa !2428
  %368 = add i64 %366, -40
  store i64 %368, i64* %RSI, align 8, !tbaa !2428
  %369 = add i64 %485, 313
  %370 = add i64 %485, 13
  %371 = load i64, i64* %RSP, align 8, !tbaa !2428
  %372 = add i64 %371, -8
  %373 = inttoptr i64 %372 to i64*
  store i64 %370, i64* %373, align 8
  store i64 %372, i64* %RSP, align 8, !tbaa !2428
  store i64 %369, i64* %PC, align 8, !tbaa !2428
  %374 = tail call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %369, %struct.Memory* %478)
  %375 = load i8, i8* %AL, align 1
  %376 = load i64, i64* %PC, align 8
  %377 = and i8 %375, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %378 = zext i8 %377 to i32
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #9
  %380 = trunc i32 %379 to i8
  %381 = xor i8 %380, 1
  store i8 %381, i8* %20, align 1, !tbaa !2447
  %382 = xor i8 %377, 1
  store i8 %382, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %383 = icmp eq i8 %382, 0
  %.v42 = select i1 %383, i64 13, i64 8
  %384 = add i64 %376, %.v42
  store i64 %384, i64* %PC, align 8, !tbaa !2428
  br i1 %383, label %block_4054d1, label %block_4054cc

block_4055c7:                                     ; preds = %block_405575, %block_405430
  %385 = phi i64 [ %86, %block_405430 ], [ %.pre40, %block_405575 ]
  %MEMORY.3 = phi %struct.Memory* [ %58, %block_405430 ], [ %257, %block_405575 ]
  %386 = load i64, i64* %RSP, align 8
  %387 = add i64 %386, 112
  store i64 %387, i64* %RSP, align 8, !tbaa !2428
  %388 = icmp ugt i64 %386, -113
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %13, align 1, !tbaa !2433
  %390 = trunc i64 %387 to i32
  %391 = and i32 %390, 255
  %392 = tail call i32 @llvm.ctpop.i32(i32 %391) #9
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  store i8 %395, i8* %20, align 1, !tbaa !2447
  %396 = xor i64 %386, 16
  %397 = xor i64 %396, %387
  %398 = lshr i64 %397, 4
  %399 = trunc i64 %398 to i8
  %400 = and i8 %399, 1
  store i8 %400, i8* %26, align 1, !tbaa !2448
  %401 = icmp eq i64 %387, 0
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %29, align 1, !tbaa !2449
  %403 = lshr i64 %387, 63
  %404 = trunc i64 %403 to i8
  store i8 %404, i8* %32, align 1, !tbaa !2450
  %405 = lshr i64 %386, 63
  %406 = xor i64 %403, %405
  %407 = add nuw nsw i64 %406, %403
  %408 = icmp eq i64 %407, 2
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %38, align 1, !tbaa !2451
  %410 = add i64 %385, 5
  store i64 %410, i64* %PC, align 8
  %411 = add i64 %386, 120
  %412 = inttoptr i64 %387 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RBP, align 8, !tbaa !2428
  store i64 %411, i64* %RSP, align 8, !tbaa !2428
  %414 = add i64 %385, 6
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %411 to i64*
  %416 = load i64, i64* %415, align 8
  store i64 %416, i64* %PC, align 8, !tbaa !2428
  %417 = add i64 %386, 128
  store i64 %417, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_405484:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_40547f
  %418 = phi i64 [ %.pre, %block_40547f ], [ %480, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %.sink17 = phi i64 [ 5, %block_40547f ], [ -46, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_40547f ], [ %478, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %419 = add i64 %418, %.sink17
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -40
  store i64 %421, i64* %RDI, align 8, !tbaa !2428
  %422 = add i64 %420, -24
  %423 = add i64 %419, 9
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %426 = add i64 %420, -88
  %427 = add i64 %419, 14
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  store i64 %425, i64* %428, align 8
  %429 = load i64, i64* %PC, align 8
  %430 = add i64 %429, 318
  %431 = add i64 %429, 5
  %432 = load i64, i64* %RSP, align 8, !tbaa !2428
  %433 = add i64 %432, -8
  %434 = inttoptr i64 %433 to i64*
  store i64 %431, i64* %434, align 8
  store i64 %433, i64* %RSP, align 8, !tbaa !2428
  store i64 %430, i64* %PC, align 8, !tbaa !2428
  %435 = tail call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %430, %struct.Memory* %MEMORY.4)
  %436 = load i64, i64* %RAX, align 8
  %437 = load i64, i64* %PC, align 8
  store i64 %436, i64* %RDI, align 8, !tbaa !2428
  %438 = add i64 %437, -3431
  %439 = add i64 %437, 8
  %440 = load i64, i64* %RSP, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %439, i64* %442, align 8
  store i64 %441, i64* %RSP, align 8, !tbaa !2428
  store i64 %438, i64* %PC, align 8, !tbaa !2428
  %443 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %438, %struct.Memory* %MEMORY.4)
  %444 = load i64*, i64** %96, align 8
  %445 = load i64, i64* %PC, align 8
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC, align 8
  %447 = load i64, i64* %444, align 8
  store i64 %447, i64* %101, align 1, !tbaa !2452
  store double 0.000000e+00, double* %103, align 1, !tbaa !2452
  %448 = load i64, i64* %RBP, align 8
  %449 = add i64 %448, -88
  %450 = add i64 %445, 9
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %449 to i64*
  %452 = load i64, i64* %451, align 8
  store i64 %452, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %453 = add i64 %445, 13
  store i64 %453, i64* %PC, align 8
  %454 = bitcast i64 %447 to double
  %.cast28 = bitcast i64 %452 to double
  %455 = fcmp uno double %454, %.cast28
  br i1 %455, label %456, label %466

; <label>:456:                                    ; preds = %block_405484
  %457 = fadd double %454, %.cast28
  %458 = bitcast double %457 to i64
  %459 = and i64 %458, 9221120237041090560
  %460 = icmp eq i64 %459, 9218868437227405312
  %461 = and i64 %458, 2251799813685247
  %462 = icmp ne i64 %461, 0
  %463 = and i1 %460, %462
  br i1 %463, label %464, label %472

; <label>:464:                                    ; preds = %456
  %465 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %453, %struct.Memory* %MEMORY.4) #12
  %.pre37 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:466:                                    ; preds = %block_405484
  %467 = fcmp ogt double %454, %.cast28
  br i1 %467, label %472, label %468

; <label>:468:                                    ; preds = %466
  %469 = fcmp olt double %454, %.cast28
  br i1 %469, label %472, label %470

; <label>:470:                                    ; preds = %468
  %471 = fcmp oeq double %454, %.cast28
  br i1 %471, label %472, label %476

; <label>:472:                                    ; preds = %470, %468, %466, %456
  %473 = phi i8 [ 0, %466 ], [ 0, %468 ], [ 1, %470 ], [ 1, %456 ]
  %474 = phi i8 [ 0, %466 ], [ 0, %468 ], [ 0, %470 ], [ 1, %456 ]
  %475 = phi i8 [ 0, %466 ], [ 1, %468 ], [ 0, %470 ], [ 1, %456 ]
  store i8 %473, i8* %29, align 1, !tbaa !2432
  store i8 %474, i8* %20, align 1, !tbaa !2432
  store i8 %475, i8* %13, align 1, !tbaa !2432
  br label %476

; <label>:476:                                    ; preds = %472, %470
  store i8 0, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %32, align 1, !tbaa !2432
  store i8 0, i8* %26, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %476, %464
  %477 = phi i64 [ %.pre37, %464 ], [ %453, %476 ]
  %478 = phi %struct.Memory* [ %465, %464 ], [ %MEMORY.4, %476 ]
  %479 = add i64 %477, 11
  %480 = add i64 %477, 6
  %481 = load i8, i8* %13, align 1, !tbaa !2433
  %482 = load i8, i8* %29, align 1, !tbaa !2449
  %483 = or i8 %482, %481
  %484 = icmp ne i8 %483, 0
  %485 = select i1 %484, i64 %479, i64 %480
  store i64 %485, i64* %PC, align 8, !tbaa !2428
  br i1 %484, label %block_4054b7, label %block_405484
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405eb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402270:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -32
  %55 = load i64, i64* %RCX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -40
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC, align 8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %64 = load i64, i64* %63, align 1
  %65 = inttoptr i64 %60 to i64*
  store i64 %64, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402298

block_4022e1:                                     ; preds = %block_402298
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4022a8:                                     ; preds = %block_402298
  %108 = add i64 %191, -8
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -16
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -24
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 10200
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -32
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 14775
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -32
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 10490
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402298

block_402298:                                     ; preds = %block_4022a8, %block_402270
  %190 = phi i64 [ %.pre, %block_402270 ], [ %189, %block_4022a8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402270 ], [ %157, %block_4022a8 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_4022a8, label %block_4022e1
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 12
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %32, i64* %33, align 1, !tbaa !2452
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  store double 0.000000e+00, double* %35, align 1, !tbaa !2452
  %36 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %36, align 8
  %37 = add i64 %22, 17
  store i64 %37, i64* %PC, align 8
  %38 = load i64, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %38, 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  store i64 %39, i64* %5, align 8, !tbaa !2428
  %42 = add i64 %22, 18
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  %45 = add i64 %38, 16
  store i64 %45, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402c70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402c98

block_402d19:                                     ; preds = %block_402c98
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402ca8:                                     ; preds = %block_402c98
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 96
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 191
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 498
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402c98

block_402c98:                                     ; preds = %block_402ca8, %block_402c70
  %255 = phi i64 [ %.pre, %block_402c70 ], [ %254, %block_402ca8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402c70 ], [ %222, %block_402ca8 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402ca8, label %block_402d19
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_402d20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d34

block_402d4e:                                     ; preds = %block_402d34
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %58 = add i64 %136, 706
  %59 = add i64 %136, 11
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -32
  %66 = load i64, i64* %PC, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RAX, align 8
  %68 = add i64 %66, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 799
  %72 = add i64 %70, 5
  %73 = load i64, i64* %RSP, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %72, i64* %75, align 8
  store i64 %74, i64* %RSP, align 8, !tbaa !2428
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  %76 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %71, %struct.Memory* %2)
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -24
  %79 = load i64, i64* %PC, align 8
  store i64 %78, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %80 = add i64 %77, -48
  %81 = load i64, i64* %RAX, align 8
  %82 = add i64 %79, 10
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  store i64 %81, i64* %83, align 8
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 672
  %86 = add i64 %84, 5
  %87 = load i64, i64* %RSP, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89, align 8
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %90 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* nonnull %0, i64 %85, %struct.Memory* %2)
  %91 = load i64, i64* %RBP, align 8
  %92 = add i64 %91, -40
  %93 = load i64, i64* %PC, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RAX, align 8
  %95 = add i64 %93, 8
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %92 to i64*
  store i64 %94, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 771
  %99 = add i64 %97, 5
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %98, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -48
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %106, 7
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %109 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RCX, align 8, !tbaa !2428
  %113 = load i64*, i64** %55, align 8
  %114 = add i64 %106, 10
  store i64 %114, i64* %PC, align 8
  store i64 %112, i64* %113, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, -88
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_402d34

block_402d34:                                     ; preds = %block_402d4e, %block_402d20
  %117 = phi i64 [ %116, %block_402d4e ], [ %.pre, %block_402d20 ]
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -8
  store i64 %119, i64* %RDI, align 8, !tbaa !2428
  %120 = add i64 %118, -16
  store i64 %120, i64* %RSI, align 8, !tbaa !2428
  %121 = add i64 %117, 796
  %122 = add i64 %117, 13
  %123 = load i64, i64* %RSP, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %122, i64* %125, align 8
  store i64 %124, i64* %RSP, align 8, !tbaa !2428
  store i64 %121, i64* %PC, align 8, !tbaa !2428
  %126 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %121, %struct.Memory* %2)
  %127 = load i8, i8* %AL, align 1
  %128 = load i64, i64* %PC, align 8
  %129 = and i8 %127, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %130 = zext i8 %129 to i32
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #9
  %132 = trunc i32 %131 to i8
  %133 = xor i8 %132, 1
  store i8 %133, i8* %20, align 1, !tbaa !2447
  %134 = xor i8 %129, 1
  store i8 %134, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %135 = icmp eq i8 %134, 0
  %.v = select i1 %135, i64 13, i64 8
  %136 = add i64 %128, %.v
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  br i1 %135, label %block_402d4e, label %block_402d49

block_402d49:                                     ; preds = %block_402d34
  %137 = load i64, i64* %RSP, align 8
  %138 = add i64 %137, 48
  store i64 %138, i64* %RSP, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -49
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %13, align 1, !tbaa !2433
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #9
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %20, align 1, !tbaa !2447
  %147 = xor i64 %137, 16
  %148 = xor i64 %147, %138
  %149 = lshr i64 %148, 4
  %150 = trunc i64 %149 to i8
  %151 = and i8 %150, 1
  store i8 %151, i8* %26, align 1, !tbaa !2448
  %152 = icmp eq i64 %138, 0
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %29, align 1, !tbaa !2449
  %154 = lshr i64 %138, 63
  %155 = trunc i64 %154 to i8
  store i8 %155, i8* %32, align 1, !tbaa !2450
  %156 = lshr i64 %137, 63
  %157 = xor i64 %154, %156
  %158 = add nuw nsw i64 %157, %154
  %159 = icmp eq i64 %158, 2
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %38, align 1, !tbaa !2451
  %161 = add i64 %136, 77
  store i64 %161, i64* %PC, align 8
  %162 = add i64 %137, 56
  %163 = inttoptr i64 %138 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RBP, align 8, !tbaa !2428
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  %165 = add i64 %136, 78
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %162 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %PC, align 8, !tbaa !2428
  %168 = add i64 %137, 64
  store i64 %168, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406570:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b10_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b38:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 6328568, i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1, !tbaa !2433
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10, align 1, !tbaa !2447
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2448
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %12, align 1, !tbaa !2449
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13, align 1, !tbaa !2450
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14, align 1, !tbaa !2451
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %8, 40
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %7, align 8
  store i64 %16, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %17 = add i64 %8, 41
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %5 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  %20 = add i64 %5, 8
  store i64 %20, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, -9
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %23, %22
  %35 = lshr i64 %34, 4
  %36 = trunc i64 %35 to i8
  %37 = and i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %37, i8* %38, align 1, !tbaa !2448
  %39 = icmp eq i64 %23, 0
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %40, i8* %41, align 1, !tbaa !2449
  %42 = lshr i64 %23, 63
  %43 = trunc i64 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %43, i8* %44, align 1, !tbaa !2450
  %45 = lshr i64 %22, 63
  %46 = xor i64 %42, %45
  %47 = add nuw nsw i64 %46, %42
  %48 = icmp eq i64 %47, 2
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %49, i8* %50, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -8
  %53 = add i64 %16, 18
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %RAX, align 8, !tbaa !2428
  %56 = add i64 %16, 19
  store i64 %56, i64* %PC, align 8
  %57 = load i64, i64* %5, align 8, !tbaa !2428
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RBP, align 8, !tbaa !2428
  store i64 %58, i64* %5, align 8, !tbaa !2428
  %61 = add i64 %16, 20
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %58 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %64 = add i64 %57, 16
  store i64 %64, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405a60:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2433
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2447
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2448
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2449
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2450
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2451
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405a84

block_405a92:                                     ; preds = %block_405a84
  %87 = add i64 %279, 4
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %248, align 8
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = add i64 %279, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RAX, align 8, !tbaa !2428
  %92 = add i64 %245, -32
  %93 = add i64 %279, 11
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -24
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -40
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i64*
  store i64 %100, i64* %103, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -40
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %104, -48
  %111 = add i64 %106, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_405aad

block_405b28:                                     ; preds = %block_405a84
  %113 = load i64, i64* %RSP, align 8
  %114 = add i64 %113, 64
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %115 = icmp ugt i64 %113, -65
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %14, align 1, !tbaa !2433
  %117 = trunc i64 %114 to i32
  %118 = and i32 %117, 255
  %119 = tail call i32 @llvm.ctpop.i32(i32 %118) #9
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  store i8 %122, i8* %21, align 1, !tbaa !2447
  %123 = xor i64 %114, %113
  %124 = lshr i64 %123, 4
  %125 = trunc i64 %124 to i8
  %126 = and i8 %125, 1
  store i8 %126, i8* %26, align 1, !tbaa !2448
  %127 = icmp eq i64 %114, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %29, align 1, !tbaa !2449
  %129 = lshr i64 %114, 63
  %130 = trunc i64 %129 to i8
  store i8 %130, i8* %32, align 1, !tbaa !2450
  %131 = lshr i64 %113, 63
  %132 = xor i64 %129, %131
  %133 = add nuw nsw i64 %132, %129
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %38, align 1, !tbaa !2451
  %136 = add i64 %279, 5
  store i64 %136, i64* %PC, align 8
  %137 = add i64 %113, 72
  %138 = inttoptr i64 %114 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RBP, align 8, !tbaa !2428
  store i64 %137, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %279, 6
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %137 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %PC, align 8, !tbaa !2428
  %143 = add i64 %113, 80
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_405aed:                                     ; preds = %block_405add
  %144 = add i64 %190, -48
  %145 = add i64 %202, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = add i64 %190, -40
  %149 = add i64 %202, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RCX, align 8, !tbaa !2428
  %152 = inttoptr i64 %147 to i64*
  %153 = add i64 %202, 11
  store i64 %153, i64* %PC, align 8
  %154 = load i64, i64* %152, align 8
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %151 to i64*
  %155 = add i64 %202, 14
  store i64 %155, i64* %PC, align 8
  store i64 %154, i64* %.cast, align 8
  %156 = load i64, i64* %RBP, align 8
  %157 = add i64 %156, -40
  %158 = load i64, i64* %PC, align 8
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, -8
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = icmp ugt i64 %161, 7
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %14, align 1, !tbaa !2433
  %165 = trunc i64 %162 to i32
  %166 = and i32 %165, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #9
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %21, align 1, !tbaa !2447
  %171 = xor i64 %161, 16
  %172 = xor i64 %171, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %26, align 1, !tbaa !2448
  %176 = icmp eq i64 %162, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %29, align 1, !tbaa !2449
  %178 = lshr i64 %162, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %32, align 1, !tbaa !2450
  %180 = lshr i64 %161, 63
  %181 = xor i64 %178, %180
  %182 = xor i64 %178, 1
  %183 = add nuw nsw i64 %181, %182
  %184 = icmp eq i64 %183, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %38, align 1, !tbaa !2451
  %186 = add i64 %158, 12
  store i64 %186, i64* %PC, align 8
  store i64 %162, i64* %160, align 8
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, -90
  store i64 %188, i64* %PC, align 8, !tbaa !2428
  br label %block_405aad

block_405add:                                     ; preds = %block_405aad, %block_405ac2
  %189 = phi i64 [ %366, %block_405aad ], [ %.pre6, %block_405ac2 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405aad ], [ %318, %block_405ac2 ]
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -49
  %192 = add i64 %189, 3
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i8*
  %194 = load i8, i8* %193, align 1
  store i8 %194, i8* %AL, align 1, !tbaa !2432
  %195 = and i8 %194, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %196 = zext i8 %195 to i32
  %197 = tail call i32 @llvm.ctpop.i32(i32 %196) #9
  %198 = trunc i32 %197 to i8
  %199 = xor i8 %198, 1
  store i8 %199, i8* %21, align 1, !tbaa !2447
  %200 = xor i8 %195, 1
  store i8 %200, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %201 = icmp eq i8 %200, 0
  %.v = select i1 %201, i64 16, i64 11
  %202 = add i64 %189, %.v
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  br i1 %201, label %block_405aed, label %block_405ae8

block_405ae8:                                     ; preds = %block_405add
  %203 = add i64 %190, -40
  %204 = add i64 %202, 40
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = add i64 %190, -32
  %208 = add i64 %202, 44
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = inttoptr i64 %206 to i64*
  %212 = add i64 %202, 47
  store i64 %212, i64* %PC, align 8
  store i64 %210, i64* %211, align 8
  %213 = load i64, i64* %RBP, align 8
  %214 = add i64 %213, -24
  %215 = load i64, i64* %PC, align 8
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = add i64 %218, 8
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = icmp ugt i64 %218, -9
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %14, align 1, !tbaa !2433
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #9
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %21, align 1, !tbaa !2447
  %228 = xor i64 %219, %218
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  store i8 %231, i8* %26, align 1, !tbaa !2448
  %232 = icmp eq i64 %219, 0
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %29, align 1, !tbaa !2449
  %234 = lshr i64 %219, 63
  %235 = trunc i64 %234 to i8
  store i8 %235, i8* %32, align 1, !tbaa !2450
  %236 = lshr i64 %218, 63
  %237 = xor i64 %234, %236
  %238 = add nuw nsw i64 %237, %234
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %38, align 1, !tbaa !2451
  %241 = add i64 %215, 12
  store i64 %241, i64* %PC, align 8
  store i64 %219, i64* %217, align 8
  %242 = load i64, i64* %PC, align 8
  %243 = add i64 %242, -159
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  br label %block_405a84

block_405a84:                                     ; preds = %block_405ae8, %block_405a60
  %244 = phi i64 [ %.pre, %block_405a60 ], [ %243, %block_405ae8 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_405a60 ], [ %MEMORY.0, %block_405ae8 ]
  %245 = load i64, i64* %RBP, align 8
  %246 = add i64 %245, -24
  %247 = add i64 %244, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = add i64 %245, -16
  %251 = add i64 %244, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = sub i64 %249, %253
  %255 = icmp ult i64 %249, %253
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %14, align 1, !tbaa !2433
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #9
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %21, align 1, !tbaa !2447
  %263 = xor i64 %253, %249
  %264 = xor i64 %263, %254
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %26, align 1, !tbaa !2448
  %268 = icmp eq i64 %254, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %29, align 1, !tbaa !2449
  %270 = lshr i64 %254, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %32, align 1, !tbaa !2450
  %272 = lshr i64 %249, 63
  %273 = lshr i64 %253, 63
  %274 = xor i64 %273, %272
  %275 = xor i64 %270, %272
  %276 = add nuw nsw i64 %275, %274
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %38, align 1, !tbaa !2451
  %.v7 = select i1 %268, i64 164, i64 14
  %279 = add i64 %244, %.v7
  store i64 %279, i64* %PC, align 8, !tbaa !2428
  br i1 %268, label %block_405b28, label %block_405a92

block_405ac2:                                     ; preds = %block_405aad
  %280 = load i64, i64* %RBP, align 8
  %281 = add i64 %280, -32
  store i64 %281, i64* %RDI, align 8, !tbaa !2428
  %282 = add i64 %280, -48
  %283 = add i64 %366, 8
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = add i64 %285, -8
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = icmp ugt i64 %285, 7
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %14, align 1, !tbaa !2433
  %289 = trunc i64 %286 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #9
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %21, align 1, !tbaa !2447
  %295 = xor i64 %285, 16
  %296 = xor i64 %295, %286
  %297 = lshr i64 %296, 4
  %298 = trunc i64 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %26, align 1, !tbaa !2448
  %300 = icmp eq i64 %286, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %29, align 1, !tbaa !2449
  %302 = lshr i64 %286, 63
  %303 = trunc i64 %302 to i8
  store i8 %303, i8* %32, align 1, !tbaa !2450
  %304 = lshr i64 %285, 63
  %305 = xor i64 %302, %304
  %306 = xor i64 %302, 1
  %307 = add nuw nsw i64 %305, %306
  %308 = icmp eq i64 %307, 2
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %38, align 1, !tbaa !2451
  %310 = add i64 %366, 16
  store i64 %310, i64* %PC, align 8
  store i64 %286, i64* %284, align 8
  %311 = load i64, i64* %RAX, align 8
  %312 = load i64, i64* %PC, align 8
  store i64 %311, i64* %RSI, align 8, !tbaa !2428
  %313 = add i64 %312, -10370
  %314 = add i64 %312, 8
  %315 = load i64, i64* %RSP, align 8, !tbaa !2428
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %314, i64* %317, align 8
  store i64 %316, i64* %RSP, align 8, !tbaa !2428
  store i64 %313, i64* %PC, align 8, !tbaa !2428
  %318 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %313, %struct.Memory* %MEMORY.2)
  %319 = load i64, i64* %RBP, align 8
  %320 = add i64 %319, -49
  %321 = load i8, i8* %AL, align 1
  %322 = load i64, i64* %PC, align 8
  %323 = add i64 %322, 3
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %320 to i8*
  store i8 %321, i8* %324, align 1
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_405add

block_405aad:                                     ; preds = %block_405aed, %block_405a92
  %325 = phi i64 [ %.pre5, %block_405a92 ], [ %188, %block_405aed ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_405a92 ], [ %MEMORY.0, %block_405aed ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -40
  %328 = add i64 %325, 8
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RDX, align 8, !tbaa !2428
  %331 = add i64 %326, -8
  %332 = add i64 %325, 12
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %330, %334
  %336 = icmp ult i64 %330, %334
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %14, align 1, !tbaa !2433
  %338 = trunc i64 %335 to i32
  %339 = and i32 %338, 255
  %340 = tail call i32 @llvm.ctpop.i32(i32 %339) #9
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %21, align 1, !tbaa !2447
  %344 = xor i64 %334, %330
  %345 = xor i64 %344, %335
  %346 = lshr i64 %345, 4
  %347 = trunc i64 %346 to i8
  %348 = and i8 %347, 1
  store i8 %348, i8* %26, align 1, !tbaa !2448
  %349 = icmp eq i64 %335, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %29, align 1, !tbaa !2449
  %351 = lshr i64 %335, 63
  %352 = trunc i64 %351 to i8
  store i8 %352, i8* %32, align 1, !tbaa !2450
  %353 = lshr i64 %330, 63
  %354 = lshr i64 %334, 63
  %355 = xor i64 %354, %353
  %356 = xor i64 %351, %353
  %357 = add nuw nsw i64 %356, %355
  %358 = icmp eq i64 %357, 2
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %38, align 1, !tbaa !2451
  %360 = add i64 %326, -49
  %361 = add i64 %325, 15
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i8*
  store i8 0, i8* %362, align 1
  %363 = load i64, i64* %PC, align 8
  %364 = load i8, i8* %29, align 1, !tbaa !2449
  %365 = icmp ne i8 %364, 0
  %.v10 = select i1 %365, i64 33, i64 6
  %366 = add i64 %363, %.v10
  store i64 %366, i64* %PC, align 8, !tbaa !2428
  %367 = icmp eq i8 %364, 1
  br i1 %367, label %block_405add, label %block_405ac2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %7, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -24
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = icmp ugt i64 %63, -9
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %14, align 1, !tbaa !2433
  %67 = trunc i64 %64 to i32
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %21, align 1, !tbaa !2447
  %73 = xor i64 %64, %63
  %74 = lshr i64 %73, 4
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  store i8 %76, i8* %26, align 1, !tbaa !2448
  %77 = icmp eq i64 %64, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %29, align 1, !tbaa !2449
  %79 = lshr i64 %64, 63
  %80 = trunc i64 %79 to i8
  store i8 %80, i8* %32, align 1, !tbaa !2450
  %81 = lshr i64 %63, 63
  %82 = xor i64 %79, %81
  %83 = add nuw nsw i64 %82, %79
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2451
  %86 = add i64 %60, 12
  store i64 %86, i64* %PC, align 8
  store i64 %64, i64* %62, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_405894

block_4058fd:                                     ; preds = %block_4058ed
  %87 = add i64 %329, -48
  %88 = add i64 %341, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %329, -40
  %92 = add i64 %341, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = inttoptr i64 %90 to i64*
  %96 = add i64 %341, 11
  store i64 %96, i64* %PC, align 8
  %97 = load i64, i64* %95, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %.cast = inttoptr i64 %94 to i64*
  %98 = add i64 %341, 14
  store i64 %98, i64* %PC, align 8
  store i64 %97, i64* %.cast, align 8
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -40
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, -8
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %106 = icmp ugt i64 %104, 7
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %14, align 1, !tbaa !2433
  %108 = trunc i64 %105 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #9
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %21, align 1, !tbaa !2447
  %114 = xor i64 %104, 16
  %115 = xor i64 %114, %105
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2448
  %119 = icmp eq i64 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2449
  %121 = lshr i64 %105, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2450
  %123 = lshr i64 %104, 63
  %124 = xor i64 %121, %123
  %125 = xor i64 %121, 1
  %126 = add nuw nsw i64 %124, %125
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %38, align 1, !tbaa !2451
  %129 = add i64 %101, 12
  store i64 %129, i64* %PC, align 8
  store i64 %105, i64* %103, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %130, -90
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  br label %block_4058bd

block_405938:                                     ; preds = %block_405894
  %132 = load i64, i64* %RSP, align 8
  %133 = add i64 %132, 64
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %134 = icmp ugt i64 %132, -65
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %14, align 1, !tbaa !2433
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #9
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %21, align 1, !tbaa !2447
  %142 = xor i64 %133, %132
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %26, align 1, !tbaa !2448
  %146 = icmp eq i64 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %29, align 1, !tbaa !2449
  %148 = lshr i64 %133, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %32, align 1, !tbaa !2450
  %150 = lshr i64 %132, 63
  %151 = xor i64 %148, %150
  %152 = add nuw nsw i64 %151, %148
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %38, align 1, !tbaa !2451
  %155 = add i64 %198, 5
  store i64 %155, i64* %PC, align 8
  %156 = add i64 %132, 72
  %157 = inttoptr i64 %133 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RBP, align 8, !tbaa !2428
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %198, 6
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %156 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = add i64 %132, 80
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_405894:                                     ; preds = %block_4058f8, %block_405870
  %163 = phi i64 [ %.pre, %block_405870 ], [ %327, %block_4058f8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_405870 ], [ %MEMORY.2, %block_4058f8 ]
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -24
  %166 = add i64 %163, 4
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %165 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %164, -16
  %170 = add i64 %163, 8
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %168, %172
  %174 = icmp ult i64 %168, %172
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %14, align 1, !tbaa !2433
  %176 = trunc i64 %173 to i32
  %177 = and i32 %176, 255
  %178 = tail call i32 @llvm.ctpop.i32(i32 %177) #9
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  %181 = xor i8 %180, 1
  store i8 %181, i8* %21, align 1, !tbaa !2447
  %182 = xor i64 %172, %168
  %183 = xor i64 %182, %173
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %26, align 1, !tbaa !2448
  %187 = icmp eq i64 %173, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %29, align 1, !tbaa !2449
  %189 = lshr i64 %173, 63
  %190 = trunc i64 %189 to i8
  store i8 %190, i8* %32, align 1, !tbaa !2450
  %191 = lshr i64 %168, 63
  %192 = lshr i64 %172, 63
  %193 = xor i64 %192, %191
  %194 = xor i64 %189, %191
  %195 = add nuw nsw i64 %194, %193
  %196 = icmp eq i64 %195, 2
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %38, align 1, !tbaa !2451
  %.v7 = select i1 %187, i64 164, i64 14
  %198 = add i64 %163, %.v7
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  br i1 %187, label %block_405938, label %block_4058a2

block_4058d2:                                     ; preds = %block_4058bd
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -32
  store i64 %200, i64* %RDI, align 8, !tbaa !2428
  %201 = add i64 %199, -48
  %202 = add i64 %285, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %204, -8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = icmp ugt i64 %204, 7
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %14, align 1, !tbaa !2433
  %208 = trunc i64 %205 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #9
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %21, align 1, !tbaa !2447
  %214 = xor i64 %204, 16
  %215 = xor i64 %214, %205
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %26, align 1, !tbaa !2448
  %219 = icmp eq i64 %205, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %29, align 1, !tbaa !2449
  %221 = lshr i64 %205, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %32, align 1, !tbaa !2450
  %223 = lshr i64 %204, 63
  %224 = xor i64 %221, %223
  %225 = xor i64 %221, 1
  %226 = add nuw nsw i64 %224, %225
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %38, align 1, !tbaa !2451
  %229 = add i64 %285, 16
  store i64 %229, i64* %PC, align 8
  store i64 %205, i64* %203, align 8
  %230 = load i64, i64* %RAX, align 8
  %231 = load i64, i64* %PC, align 8
  store i64 %230, i64* %RSI, align 8, !tbaa !2428
  %232 = add i64 %231, -10306
  %233 = add i64 %231, 8
  %234 = load i64, i64* %RSP, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %233, i64* %236, align 8
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  %237 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %232, %struct.Memory* %MEMORY.1)
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -49
  %240 = load i8, i8* %AL, align 1
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, 3
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %239 to i8*
  store i8 %240, i8* %243, align 1
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_4058ed

block_4058bd:                                     ; preds = %block_4058a2, %block_4058fd
  %244 = phi i64 [ %.pre5, %block_4058a2 ], [ %131, %block_4058fd ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4058a2 ], [ %MEMORY.2, %block_4058fd ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  store i8 1, i8* %21, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %245 = load i64, i64* %RBP, align 8
  %246 = add i64 %245, -40
  %247 = add i64 %244, 8
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = add i64 %245, -8
  %251 = add i64 %244, 12
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = sub i64 %249, %253
  %255 = icmp ult i64 %249, %253
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %14, align 1, !tbaa !2433
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #9
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %21, align 1, !tbaa !2447
  %263 = xor i64 %253, %249
  %264 = xor i64 %263, %254
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %26, align 1, !tbaa !2448
  %268 = icmp eq i64 %254, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %29, align 1, !tbaa !2449
  %270 = lshr i64 %254, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %32, align 1, !tbaa !2450
  %272 = lshr i64 %249, 63
  %273 = lshr i64 %253, 63
  %274 = xor i64 %273, %272
  %275 = xor i64 %270, %272
  %276 = add nuw nsw i64 %275, %274
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %38, align 1, !tbaa !2451
  %279 = add i64 %245, -49
  %280 = add i64 %244, 15
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i8*
  store i8 0, i8* %281, align 1
  %282 = load i64, i64* %PC, align 8
  %283 = load i8, i8* %29, align 1, !tbaa !2449
  %284 = icmp ne i8 %283, 0
  %.v10 = select i1 %284, i64 33, i64 6
  %285 = add i64 %282, %.v10
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  %286 = icmp eq i8 %283, 1
  br i1 %286, label %block_4058ed, label %block_4058d2

block_4058f8:                                     ; preds = %block_4058ed
  %287 = add i64 %329, -40
  %288 = add i64 %341, 40
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = add i64 %329, -32
  %292 = add i64 %341, 44
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %RCX, align 8, !tbaa !2428
  %295 = inttoptr i64 %290 to i64*
  %296 = add i64 %341, 47
  store i64 %296, i64* %PC, align 8
  store i64 %294, i64* %295, align 8
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -24
  %299 = load i64, i64* %PC, align 8
  %300 = add i64 %299, 4
  store i64 %300, i64* %PC, align 8
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = add i64 %302, 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = icmp ugt i64 %302, -9
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %14, align 1, !tbaa !2433
  %306 = trunc i64 %303 to i32
  %307 = and i32 %306, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #9
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %21, align 1, !tbaa !2447
  %312 = xor i64 %303, %302
  %313 = lshr i64 %312, 4
  %314 = trunc i64 %313 to i8
  %315 = and i8 %314, 1
  store i8 %315, i8* %26, align 1, !tbaa !2448
  %316 = icmp eq i64 %303, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %29, align 1, !tbaa !2449
  %318 = lshr i64 %303, 63
  %319 = trunc i64 %318 to i8
  store i8 %319, i8* %32, align 1, !tbaa !2450
  %320 = lshr i64 %302, 63
  %321 = xor i64 %318, %320
  %322 = add nuw nsw i64 %321, %318
  %323 = icmp eq i64 %322, 2
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %38, align 1, !tbaa !2451
  %325 = add i64 %299, 12
  store i64 %325, i64* %PC, align 8
  store i64 %303, i64* %301, align 8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, -159
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  br label %block_405894

block_4058ed:                                     ; preds = %block_4058bd, %block_4058d2
  %328 = phi i64 [ %285, %block_4058bd ], [ %.pre6, %block_4058d2 ]
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4058bd ], [ %237, %block_4058d2 ]
  %329 = load i64, i64* %RBP, align 8
  %330 = add i64 %329, -49
  %331 = add i64 %328, 3
  store i64 %331, i64* %PC, align 8
  %332 = inttoptr i64 %330 to i8*
  %333 = load i8, i8* %332, align 1
  store i8 %333, i8* %AL, align 1, !tbaa !2432
  %334 = and i8 %333, 1
  store i8 0, i8* %14, align 1, !tbaa !2433
  %335 = zext i8 %334 to i32
  %336 = tail call i32 @llvm.ctpop.i32(i32 %335) #9
  %337 = trunc i32 %336 to i8
  %338 = xor i8 %337, 1
  store i8 %338, i8* %21, align 1, !tbaa !2447
  %339 = xor i8 %334, 1
  store i8 %339, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %340 = icmp eq i8 %339, 0
  %.v = select i1 %340, i64 16, i64 11
  %341 = add i64 %328, %.v
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_4058fd, label %block_4058f8

block_4058a2:                                     ; preds = %block_405894
  %342 = add i64 %198, 4
  store i64 %342, i64* %PC, align 8
  %343 = load i64, i64* %167, align 8
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %198, 7
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %343 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = add i64 %164, -32
  %348 = add i64 %198, 11
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %346, i64* %349, align 8
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -24
  %352 = load i64, i64* %PC, align 8
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %351 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = add i64 %350, -40
  %357 = add i64 %352, 8
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  store i64 %355, i64* %358, align 8
  %359 = load i64, i64* %RBP, align 8
  %360 = add i64 %359, -40
  %361 = load i64, i64* %PC, align 8
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC, align 8
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = add i64 %359, -48
  %366 = add i64 %361, 8
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  store i64 %364, i64* %367, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_4058bd
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402b68

block_402be9:                                     ; preds = %block_402b68
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402b78:                                     ; preds = %block_402b68
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 3552
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 3647
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 3954
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402b68

block_402b68:                                     ; preds = %block_402b78, %block_402b40
  %255 = phi i64 [ %.pre, %block_402b40 ], [ %254, %block_402b78 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402b40 ], [ %222, %block_402b78 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402b78, label %block_402be9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405130:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -5176
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2433
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2447
  %69 = xor i64 %60, %58
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2448
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2449
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2450
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2451
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %59, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_4052b5, label %block_40515d

block_40517d:                                     ; preds = %block_40521e, %block_40515d
  %86 = phi i64 [ %.pre, %block_40515d ], [ %282, %block_40521e ]
  %MEMORY.0 = phi %struct.Memory* [ %171, %block_40515d ], [ %272, %block_40521e ]
  %87 = add i64 %86, 5
  br label %block_405182

block_4052b5:                                     ; preds = %block_405263, %block_405130
  %88 = phi i64 [ %85, %block_405130 ], [ %.pre34, %block_405263 ]
  %MEMORY.1 = phi %struct.Memory* [ %57, %block_405130 ], [ %382, %block_405263 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 96
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -97
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #9
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2447
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2448
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2449
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2450
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2451
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 104
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 112
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4051f2:                                     ; preds = %block_4051d0
  %120 = add i64 %161, -5378
  %121 = add i64 %161, 9
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %151)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -88
  %128 = load i64, i64* %RAX, align 8
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -47
  br label %block_4051d0

block_4051d0:                                     ; preds = %block_4051cb, %block_4051f2
  %.sink4 = phi i64 [ %304, %block_4051cb ], [ %133, %block_4051f2 ]
  %MEMORY.2 = phi %struct.Memory* [ %292, %block_4051cb ], [ %125, %block_4051f2 ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -32
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %.sink4, -5376
  %137 = add i64 %.sink4, 9
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %145 = load i64, i64* %RAX, align 8
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = add i64 %144, -8073
  %147 = add i64 %144, 12
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %MEMORY.2)
  %152 = load i8, i8* %AL, align 1
  %153 = load i64, i64* %PC, align 8
  %154 = and i8 %152, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %155 = zext i8 %154 to i32
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #9
  %157 = trunc i32 %156 to i8
  %158 = xor i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !2447
  %159 = xor i8 %154, 1
  store i8 %159, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %160 = icmp eq i8 %159, 0
  %.v37 = select i1 %160, i64 13, i64 8
  %161 = add i64 %153, %.v37
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -32
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  br i1 %160, label %block_4051f2, label %block_4051ed

block_40515d:                                     ; preds = %block_405130
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -8
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %166 = add i64 %85, -5261
  %167 = add i64 %85, 9
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %166, %struct.Memory* %57)
  %172 = bitcast %union.anon* %3 to i64**
  %173 = load i64*, i64** %172, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC, align 8
  %176 = load i64, i64* %173, align 8
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = add i64 %174, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %180, align 8
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %181, -32
  %188 = add i64 %183, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %186, i64* %189, align 8
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -16
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %190, -40
  %197 = add i64 %192, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %198, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40517d

block_4051ed:                                     ; preds = %block_4051d0
  %199 = add i64 %162, -40
  store i64 %199, i64* %RSI, align 8, !tbaa !2428
  %200 = add i64 %161, 243
  %201 = add i64 %161, 36
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %151)
  %206 = load i8, i8* %AL, align 1
  %207 = load i64, i64* %PC, align 8
  %208 = and i8 %206, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %209 = zext i8 %208 to i32
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #9
  %211 = trunc i32 %210 to i8
  %212 = xor i8 %211, 1
  store i8 %212, i8* %20, align 1, !tbaa !2447
  %213 = xor i8 %208, 1
  store i8 %213, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %214 = icmp eq i8 %213, 0
  %.v38 = select i1 %214, i64 13, i64 8
  %215 = add i64 %207, %.v38
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_40521e, label %block_405219

block_40521e:                                     ; preds = %block_4051ed
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -40
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %215, -5454
  %219 = add i64 %215, 9
  %220 = load i64, i64* %RSP, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2428
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  %223 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %218, %struct.Memory* %205)
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -32
  %226 = load i64, i64* %PC, align 8
  store i64 %225, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64*, i64** %172, align 8
  %228 = add i64 %226, 7
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %227, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %224, -48
  %231 = add i64 %226, 11
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  store i64 %229, i64* %232, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, -5474
  %235 = add i64 %233, 5
  %236 = load i64, i64* %RSP, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238, align 8
  store i64 %237, i64* %RSP, align 8, !tbaa !2428
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  %239 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %234, %struct.Memory* %223)
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = load i64, i64* %PC, align 8
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %240, -96
  %244 = load i64, i64* %RAX, align 8
  %245 = add i64 %242, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load i64, i64* %PC, align 8
  %248 = add i64 %247, -5487
  %249 = add i64 %247, 5
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %248, %struct.Memory* %239)
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -32
  %256 = load i64, i64* %PC, align 8
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %257 = add i64 %254, -96
  %258 = add i64 %256, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = add i64 %256, 11
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RDX, align 8, !tbaa !2428
  %264 = load i64*, i64** %172, align 8
  %265 = add i64 %256, 14
  store i64 %265, i64* %PC, align 8
  store i64 %263, i64* %264, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -5506
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %267, %struct.Memory* %253)
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -48
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RCX, align 8, !tbaa !2428
  %279 = load i64*, i64** %172, align 8
  %280 = add i64 %275, 7
  store i64 %280, i64* %PC, align 8
  store i64 %278, i64* %279, align 8
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, -225
  store i64 %282, i64* %PC, align 8, !tbaa !2428
  br label %block_40517d

block_405219:                                     ; preds = %block_4051ed
  %283 = add i64 %215, 74
  br label %block_405263

block_4051a7:                                     ; preds = %block_405182
  %284 = load i64, i64* %RBP, align 8
  %285 = add i64 %284, -32
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %286 = add i64 %284, -40
  store i64 %286, i64* %RSI, align 8, !tbaa !2428
  %287 = add i64 %418, 313
  %288 = add i64 %418, 23
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %408)
  %293 = load i8, i8* %AL, align 1
  %294 = load i64, i64* %PC, align 8
  %295 = and i8 %293, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %296 = zext i8 %295 to i32
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #9
  %298 = trunc i32 %297 to i8
  %299 = xor i8 %298, 1
  store i8 %299, i8* %20, align 1, !tbaa !2447
  %300 = xor i8 %295, 1
  store i8 %300, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %301 = icmp eq i8 %300, 0
  %.v36 = select i1 %301, i64 13, i64 8
  %302 = add i64 %294, %.v36
  store i64 %302, i64* %PC, align 8, !tbaa !2428
  br i1 %301, label %block_4051cb, label %block_4051c6

block_4051c6:                                     ; preds = %block_4051a7
  %303 = add i64 %302, 157
  br label %block_405263

block_4051cb:                                     ; preds = %block_4051a7
  %304 = add i64 %302, 5
  br label %block_4051d0

block_405263:                                     ; preds = %block_4051c6, %block_405219
  %.sink8 = phi i64 [ %303, %block_4051c6 ], [ %283, %block_405219 ]
  %MEMORY.3 = phi %struct.Memory* [ %292, %block_4051c6 ], [ %205, %block_405219 ]
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -40
  store i64 %306, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %307 = add i64 %305, -8
  %308 = add i64 %.sink8, 15
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %311 = add i64 %305, -56
  %312 = add i64 %.sink8, 19
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  store i64 %310, i64* %313, align 8
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, -5430
  %316 = add i64 %314, 5
  %317 = load i64, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319, align 8
  store i64 %318, i64* %RSP, align 8, !tbaa !2428
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  %320 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.3)
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -64
  %323 = load i64, i64* %RAX, align 8
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %326, align 8
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -56
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = add i64 %327, -64
  %334 = add i64 %329, 8
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = add i64 %329, -335
  %338 = add i64 %329, 13
  %339 = load i64, i64* %RSP, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %338, i64* %341, align 8
  store i64 %340, i64* %RSP, align 8, !tbaa !2428
  store i64 %337, i64* %PC, align 8, !tbaa !2428
  %342 = tail call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* nonnull %0, i64 %337, %struct.Memory* %320)
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -40
  %345 = load i64, i64* %PC, align 8
  store i64 %344, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %346 = add i64 %345, -5452
  %347 = add i64 %345, 16
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* nonnull %0, i64 %346, %struct.Memory* %342)
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -72
  %354 = load i64, i64* %RAX, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %353 to i64*
  store i64 %354, i64* %357, align 8
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -16
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %358, -80
  %365 = add i64 %360, 8
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  store i64 %363, i64* %366, align 8
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -72
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RDI, align 8, !tbaa !2428
  %373 = add i64 %367, -80
  %374 = add i64 %369, 8
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %RSI, align 8, !tbaa !2428
  %377 = add i64 %369, -376
  %378 = add i64 %369, 13
  %379 = load i64, i64* %RSP, align 8, !tbaa !2428
  %380 = add i64 %379, -8
  %381 = inttoptr i64 %380 to i64*
  store i64 %378, i64* %381, align 8
  store i64 %380, i64* %RSP, align 8, !tbaa !2428
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %382 = tail call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* nonnull %0, i64 %377, %struct.Memory* %351)
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_4052b5

block_405182:                                     ; preds = %block_405182, %block_40517d
  %.sink = phi i64 [ %419, %block_405182 ], [ %87, %block_40517d ]
  %MEMORY.4 = phi %struct.Memory* [ %408, %block_405182 ], [ %MEMORY.0, %block_40517d ]
  %383 = load i64, i64* %RBP, align 8
  %384 = add i64 %383, -40
  store i64 %384, i64* %RDI, align 8, !tbaa !2428
  %385 = add i64 %.sink, 318
  %386 = add i64 %.sink, 9
  %387 = load i64, i64* %RSP, align 8, !tbaa !2428
  %388 = add i64 %387, -8
  %389 = inttoptr i64 %388 to i64*
  store i64 %386, i64* %389, align 8
  store i64 %388, i64* %RSP, align 8, !tbaa !2428
  store i64 %385, i64* %PC, align 8, !tbaa !2428
  %390 = tail call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* nonnull %0, i64 %385, %struct.Memory* %MEMORY.4)
  %391 = load i64, i64* %RAX, align 8
  %392 = load i64, i64* %PC, align 8
  store i64 %391, i64* %RDI, align 8, !tbaa !2428
  %393 = add i64 %392, -5307
  %394 = add i64 %392, 8
  %395 = load i64, i64* %RSP, align 8, !tbaa !2428
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %394, i64* %397, align 8
  store i64 %396, i64* %RSP, align 8, !tbaa !2428
  store i64 %393, i64* %PC, align 8, !tbaa !2428
  %398 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %393, %struct.Memory* %MEMORY.4)
  %399 = load i64, i64* %RBP, align 8
  %400 = add i64 %399, -24
  %401 = load i64, i64* %PC, align 8
  store i64 %400, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %RAX, align 8
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = add i64 %401, -8003
  %404 = add i64 %401, 12
  %405 = load i64, i64* %RSP, align 8, !tbaa !2428
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %404, i64* %407, align 8
  store i64 %406, i64* %RSP, align 8, !tbaa !2428
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  %408 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %403, %struct.Memory* %MEMORY.4)
  %409 = load i8, i8* %AL, align 1
  %410 = load i64, i64* %PC, align 8
  %411 = and i8 %409, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %412 = zext i8 %411 to i32
  %413 = tail call i32 @llvm.ctpop.i32(i32 %412) #9
  %414 = trunc i32 %413 to i8
  %415 = xor i8 %414, 1
  store i8 %415, i8* %20, align 1, !tbaa !2447
  %416 = xor i8 %411, 1
  store i8 %416, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %417 = icmp eq i8 %416, 0
  %.v35 = select i1 %417, i64 13, i64 8
  %418 = add i64 %410, %.v35
  store i64 %418, i64* %PC, align 8, !tbaa !2428
  %419 = add i64 %418, -42
  br i1 %417, label %block_405182, label %block_4051a7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406070:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 32
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_4043e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = bitcast %union.anon* %3 to i64**
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %58 = bitcast i64* %57 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4043f4

block_40440e:                                     ; preds = %block_4043f4
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -8
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %61 = add i64 %138, 690
  %62 = add i64 %138, 11
  %63 = load i64, i64* %RSP, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %62, i64* %65, align 8
  store i64 %64, i64* %RSP, align 8, !tbaa !2428
  store i64 %61, i64* %PC, align 8, !tbaa !2428
  %66 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %61, %struct.Memory* %2)
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -32
  %69 = load i64, i64* %PC, align 8
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %70 = load i64, i64* %RAX, align 8
  %71 = add i64 %69, 8
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %70, i64* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 783
  %75 = add i64 %73, 5
  %76 = load i64, i64* %RSP, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78, align 8
  store i64 %77, i64* %RSP, align 8, !tbaa !2428
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %79 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %74, %struct.Memory* %2)
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -24
  %82 = load i64, i64* %PC, align 8
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %83 = load i64*, i64** %55, align 8
  %84 = add i64 %82, 10
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %83, align 8
  store i64 %85, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %86 = add i64 %80, -48
  %87 = add i64 %82, 15
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i64*
  store i64 %85, i64* %88, align 8
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 651
  %91 = add i64 %89, 5
  %92 = load i64, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %92, -8
  %94 = inttoptr i64 %93 to i64*
  store i64 %91, i64* %94, align 8
  store i64 %93, i64* %RSP, align 8, !tbaa !2428
  store i64 %90, i64* %PC, align 8, !tbaa !2428
  %95 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* nonnull %0, i64 %90, %struct.Memory* %2)
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -40
  %98 = load i64, i64* %PC, align 8
  store i64 %97, i64* %RDI, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX, align 8
  %100 = add i64 %98, 8
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %97 to i64*
  store i64 %99, i64* %101, align 8
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 750
  %104 = add i64 %102, 5
  %105 = load i64, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %104, i64* %107, align 8
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  store i64 %103, i64* %PC, align 8, !tbaa !2428
  %108 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* nonnull %0, i64 %103, %struct.Memory* %2)
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -48
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %56, align 1, !tbaa !2452
  store double 0.000000e+00, double* %58, align 1, !tbaa !2452
  %115 = load i64*, i64** %55, align 8
  %116 = add i64 %111, 9
  store i64 %116, i64* %PC, align 8
  store i64 %114, i64* %115, align 8
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, -92
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  br label %block_4043f4

block_4043f4:                                     ; preds = %block_40440e, %block_4043e0
  %119 = phi i64 [ %118, %block_40440e ], [ %.pre, %block_4043e0 ]
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -8
  store i64 %121, i64* %RDI, align 8, !tbaa !2428
  %122 = add i64 %120, -16
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = add i64 %119, 780
  %124 = add i64 %119, 13
  %125 = load i64, i64* %RSP, align 8, !tbaa !2428
  %126 = add i64 %125, -8
  %127 = inttoptr i64 %126 to i64*
  store i64 %124, i64* %127, align 8
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  store i64 %123, i64* %PC, align 8, !tbaa !2428
  %128 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* nonnull %0, i64 %123, %struct.Memory* %2)
  %129 = load i8, i8* %AL, align 1
  %130 = load i64, i64* %PC, align 8
  %131 = and i8 %129, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %132 = zext i8 %131 to i32
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #9
  %134 = trunc i32 %133 to i8
  %135 = xor i8 %134, 1
  store i8 %135, i8* %20, align 1, !tbaa !2447
  %136 = xor i8 %131, 1
  store i8 %136, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %137 = icmp eq i8 %136, 0
  %.v = select i1 %137, i64 13, i64 8
  %138 = add i64 %130, %.v
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  br i1 %137, label %block_40440e, label %block_404409

block_404409:                                     ; preds = %block_4043f4
  %139 = load i64, i64* %RSP, align 8
  %140 = add i64 %139, 48
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  %141 = icmp ugt i64 %139, -49
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %13, align 1, !tbaa !2433
  %143 = trunc i64 %140 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #9
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %20, align 1, !tbaa !2447
  %149 = xor i64 %139, 16
  %150 = xor i64 %149, %140
  %151 = lshr i64 %150, 4
  %152 = trunc i64 %151 to i8
  %153 = and i8 %152, 1
  store i8 %153, i8* %26, align 1, !tbaa !2448
  %154 = icmp eq i64 %140, 0
  %155 = zext i1 %154 to i8
  store i8 %155, i8* %29, align 1, !tbaa !2449
  %156 = lshr i64 %140, 63
  %157 = trunc i64 %156 to i8
  store i8 %157, i8* %32, align 1, !tbaa !2450
  %158 = lshr i64 %139, 63
  %159 = xor i64 %156, %158
  %160 = add nuw nsw i64 %159, %156
  %161 = icmp eq i64 %160, 2
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %38, align 1, !tbaa !2451
  %163 = add i64 %138, 81
  store i64 %163, i64* %PC, align 8
  %164 = add i64 %139, 56
  %165 = inttoptr i64 %140 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %RBP, align 8, !tbaa !2428
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  %167 = add i64 %138, 82
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %164 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %170 = add i64 %139, 64
  store i64 %170, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401bf0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = inttoptr i64 %25 to i64*
  store i64 %29, i64* %30, align 8
  %31 = add i64 %22, 12
  store i64 %31, i64* %PC, align 8
  %32 = load i64, i64* %5, align 8, !tbaa !2428
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  store i64 %33, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %22, 13
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = add i64 %32, 16
  store i64 %39, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402860:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402888

block_4028d1:                                     ; preds = %block_402888
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402898:                                     ; preds = %block_402888
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 3320
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 10087
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 3626
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_402888

block_402888:                                     ; preds = %block_402898, %block_402860
  %190 = phi i64 [ %.pre, %block_402860 ], [ %189, %block_402898 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402860 ], [ %157, %block_402898 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402898, label %block_4028d1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406690:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, -18752
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402a10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402a38

block_402ab9:                                     ; preds = %block_402a38
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402a48:                                     ; preds = %block_402a38
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 6528
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 6623
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 6914
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402a38

block_402a38:                                     ; preds = %block_402a48, %block_402a10
  %255 = phi i64 [ %.pre, %block_402a10 ], [ %254, %block_402a48 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402a10 ], [ %222, %block_402a48 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402a48, label %block_402ab9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404700:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2433
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2447
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %38, align 1, !tbaa !2448
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4028e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402908

block_402989:                                     ; preds = %block_402908
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402918:                                     ; preds = %block_402908
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1008
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 9439
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 1410
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402908

block_402908:                                     ; preds = %block_402918, %block_4028e0
  %255 = phi i64 [ %.pre, %block_4028e0 ], [ %254, %block_402918 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4028e0 ], [ %222, %block_402918 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402918, label %block_402989
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403010:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 598
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2433
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2447
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2448
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2449
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2450
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2451
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  store i64 %38, i64* %RAX, align 8, !tbaa !2428
  %39 = add i64 %6, -16
  store i64 %39, i64* %RCX, align 8, !tbaa !2428
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 19
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %51 = load i64, i64* %RCX, align 8
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = add i64 %50, -7080
  %53 = add i64 %50, 11
  %54 = load i64, i64* %RSP, align 8, !tbaa !2428
  %55 = add i64 %54, -8
  %56 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %56, align 8
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  store i64 %52, i64* %PC, align 8, !tbaa !2428
  %57 = tail call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %52, %struct.Memory* %2)
  %58 = load i64, i64* %RAX, align 8
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %58, -1
  %61 = icmp eq i64 %58, 0
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %13, align 1, !tbaa !2433
  %63 = trunc i64 %60 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %20, align 1, !tbaa !2447
  %69 = xor i64 %60, %58
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %25, align 1, !tbaa !2448
  %73 = icmp eq i64 %60, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %28, align 1, !tbaa !2449
  %75 = lshr i64 %60, 63
  %76 = trunc i64 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2450
  %77 = lshr i64 %58, 63
  %78 = xor i64 %75, %77
  %79 = add nuw nsw i64 %78, %77
  %80 = icmp eq i64 %79, 2
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %37, align 1, !tbaa !2451
  %82 = icmp ne i8 %76, 0
  %83 = xor i1 %82, %80
  %84 = or i1 %73, %83
  %.v = select i1 %84, i64 354, i64 10
  %85 = add i64 %59, %.v
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_404fb5, label %block_404e5d

block_404e7d:                                     ; preds = %block_404f1e, %block_404e5d
  %86 = phi i64 [ %.pre, %block_404e5d ], [ %282, %block_404f1e ]
  %MEMORY.0 = phi %struct.Memory* [ %171, %block_404e5d ], [ %272, %block_404f1e ]
  %87 = add i64 %86, 5
  br label %block_404e82

block_404fb5:                                     ; preds = %block_404f63, %block_404e30
  %88 = phi i64 [ %85, %block_404e30 ], [ %.pre34, %block_404f63 ]
  %MEMORY.1 = phi %struct.Memory* [ %57, %block_404e30 ], [ %382, %block_404f63 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 96
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -97
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %13, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #9
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %20, align 1, !tbaa !2447
  %99 = xor i64 %90, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %25, align 1, !tbaa !2448
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %28, align 1, !tbaa !2449
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %31, align 1, !tbaa !2450
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %37, align 1, !tbaa !2451
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 104
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 112
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404ef2:                                     ; preds = %block_404ed0
  %120 = add i64 %161, -7282
  %121 = add i64 %161, 9
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %151)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -88
  %128 = load i64, i64* %RAX, align 8
  %129 = load i64, i64* %PC, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %PC, align 8
  %133 = add i64 %132, -47
  br label %block_404ed0

block_404ed0:                                     ; preds = %block_404ecb, %block_404ef2
  %.sink4 = phi i64 [ %304, %block_404ecb ], [ %133, %block_404ef2 ]
  %MEMORY.2 = phi %struct.Memory* [ %292, %block_404ecb ], [ %125, %block_404ef2 ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -32
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %.sink4, -7760
  %137 = add i64 %.sink4, 9
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.2)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = load i64, i64* %PC, align 8
  store i64 %143, i64* %RSI, align 8, !tbaa !2428
  %145 = load i64, i64* %RAX, align 8
  store i64 %145, i64* %RDI, align 8, !tbaa !2428
  %146 = add i64 %144, -7737
  %147 = add i64 %144, 12
  %148 = load i64, i64* %RSP, align 8, !tbaa !2428
  %149 = add i64 %148, -8
  %150 = inttoptr i64 %149 to i64*
  store i64 %147, i64* %150, align 8
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %151 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %146, %struct.Memory* %MEMORY.2)
  %152 = load i8, i8* %AL, align 1
  %153 = load i64, i64* %PC, align 8
  %154 = and i8 %152, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %155 = zext i8 %154 to i32
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #9
  %157 = trunc i32 %156 to i8
  %158 = xor i8 %157, 1
  store i8 %158, i8* %20, align 1, !tbaa !2447
  %159 = xor i8 %154, 1
  store i8 %159, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %160 = icmp eq i8 %159, 0
  %.v37 = select i1 %160, i64 13, i64 8
  %161 = add i64 %153, %.v37
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP, align 8
  %163 = add i64 %162, -32
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  br i1 %160, label %block_404ef2, label %block_404eed

block_404e5d:                                     ; preds = %block_404e30
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -8
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %166 = add i64 %85, -7645
  %167 = add i64 %85, 9
  %168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %167, i64* %170, align 8
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  store i64 %166, i64* %PC, align 8, !tbaa !2428
  %171 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %166, %struct.Memory* %57)
  %172 = bitcast %union.anon* %3 to i64**
  %173 = load i64*, i64** %172, align 8
  %174 = load i64, i64* %PC, align 8
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC, align 8
  %176 = load i64, i64* %173, align 8
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = add i64 %174, 7
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  store i64 %176, i64* %180, align 8
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %181, -32
  %188 = add i64 %183, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %186, i64* %189, align 8
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -16
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %190, -40
  %197 = add i64 %192, 8
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to i64*
  store i64 %195, i64* %198, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404e7d

block_404eed:                                     ; preds = %block_404ed0
  %199 = add i64 %162, -40
  store i64 %199, i64* %RSI, align 8, !tbaa !2428
  %200 = add i64 %161, 243
  %201 = add i64 %161, 36
  %202 = load i64, i64* %RSP, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %201, i64* %204, align 8
  store i64 %203, i64* %RSP, align 8, !tbaa !2428
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  %205 = tail call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %200, %struct.Memory* %151)
  %206 = load i8, i8* %AL, align 1
  %207 = load i64, i64* %PC, align 8
  %208 = and i8 %206, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %209 = zext i8 %208 to i32
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #9
  %211 = trunc i32 %210 to i8
  %212 = xor i8 %211, 1
  store i8 %212, i8* %20, align 1, !tbaa !2447
  %213 = xor i8 %208, 1
  store i8 %213, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %214 = icmp eq i8 %213, 0
  %.v38 = select i1 %214, i64 13, i64 8
  %215 = add i64 %207, %.v38
  store i64 %215, i64* %PC, align 8, !tbaa !2428
  br i1 %214, label %block_404f1e, label %block_404f19

block_404f1e:                                     ; preds = %block_404eed
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -40
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = add i64 %215, -7838
  %219 = add i64 %215, 9
  %220 = load i64, i64* %RSP, align 8, !tbaa !2428
  %221 = add i64 %220, -8
  %222 = inttoptr i64 %221 to i64*
  store i64 %219, i64* %222, align 8
  store i64 %221, i64* %RSP, align 8, !tbaa !2428
  store i64 %218, i64* %PC, align 8, !tbaa !2428
  %223 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %218, %struct.Memory* %205)
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -32
  %226 = load i64, i64* %PC, align 8
  store i64 %225, i64* %RDI, align 8, !tbaa !2428
  %227 = load i64*, i64** %172, align 8
  %228 = add i64 %226, 7
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %227, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %224, -48
  %231 = add i64 %226, 11
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  store i64 %229, i64* %232, align 8
  %233 = load i64, i64* %PC, align 8
  %234 = add i64 %233, -7858
  %235 = add i64 %233, 5
  %236 = load i64, i64* %RSP, align 8, !tbaa !2428
  %237 = add i64 %236, -8
  %238 = inttoptr i64 %237 to i64*
  store i64 %235, i64* %238, align 8
  store i64 %237, i64* %RSP, align 8, !tbaa !2428
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  %239 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %234, %struct.Memory* %223)
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -40
  %242 = load i64, i64* %PC, align 8
  store i64 %241, i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %240, -96
  %244 = load i64, i64* %RAX, align 8
  %245 = add i64 %242, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %246, align 8
  %247 = load i64, i64* %PC, align 8
  %248 = add i64 %247, -7871
  %249 = add i64 %247, 5
  %250 = load i64, i64* %RSP, align 8, !tbaa !2428
  %251 = add i64 %250, -8
  %252 = inttoptr i64 %251 to i64*
  store i64 %249, i64* %252, align 8
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %253 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %248, %struct.Memory* %239)
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -32
  %256 = load i64, i64* %PC, align 8
  store i64 %255, i64* %RDI, align 8, !tbaa !2428
  %257 = add i64 %254, -96
  %258 = add i64 %256, 8
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RCX, align 8, !tbaa !2428
  %261 = add i64 %256, 11
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RDX, align 8, !tbaa !2428
  %264 = load i64*, i64** %172, align 8
  %265 = add i64 %256, 14
  store i64 %265, i64* %PC, align 8
  store i64 %263, i64* %264, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -7890
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %267, %struct.Memory* %253)
  %273 = load i64, i64* %RBP, align 8
  %274 = add i64 %273, -48
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %274 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RCX, align 8, !tbaa !2428
  %279 = load i64*, i64** %172, align 8
  %280 = add i64 %275, 7
  store i64 %280, i64* %PC, align 8
  store i64 %278, i64* %279, align 8
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, -225
  store i64 %282, i64* %PC, align 8, !tbaa !2428
  br label %block_404e7d

block_404f19:                                     ; preds = %block_404eed
  %283 = add i64 %215, 74
  br label %block_404f63

block_404ea7:                                     ; preds = %block_404e82
  %284 = load i64, i64* %RBP, align 8
  %285 = add i64 %284, -32
  store i64 %285, i64* %RDI, align 8, !tbaa !2428
  %286 = add i64 %284, -40
  store i64 %286, i64* %RSI, align 8, !tbaa !2428
  %287 = add i64 %418, 313
  %288 = add i64 %418, 23
  %289 = load i64, i64* %RSP, align 8, !tbaa !2428
  %290 = add i64 %289, -8
  %291 = inttoptr i64 %290 to i64*
  store i64 %288, i64* %291, align 8
  store i64 %290, i64* %RSP, align 8, !tbaa !2428
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  %292 = tail call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* nonnull %0, i64 %287, %struct.Memory* %408)
  %293 = load i8, i8* %AL, align 1
  %294 = load i64, i64* %PC, align 8
  %295 = and i8 %293, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %296 = zext i8 %295 to i32
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #9
  %298 = trunc i32 %297 to i8
  %299 = xor i8 %298, 1
  store i8 %299, i8* %20, align 1, !tbaa !2447
  %300 = xor i8 %295, 1
  store i8 %300, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %301 = icmp eq i8 %300, 0
  %.v36 = select i1 %301, i64 13, i64 8
  %302 = add i64 %294, %.v36
  store i64 %302, i64* %PC, align 8, !tbaa !2428
  br i1 %301, label %block_404ecb, label %block_404ec6

block_404ec6:                                     ; preds = %block_404ea7
  %303 = add i64 %302, 157
  br label %block_404f63

block_404ecb:                                     ; preds = %block_404ea7
  %304 = add i64 %302, 5
  br label %block_404ed0

block_404f63:                                     ; preds = %block_404ec6, %block_404f19
  %.sink8 = phi i64 [ %303, %block_404ec6 ], [ %283, %block_404f19 ]
  %MEMORY.3 = phi %struct.Memory* [ %292, %block_404ec6 ], [ %205, %block_404f19 ]
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -40
  store i64 %306, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %307 = add i64 %305, -8
  %308 = add i64 %.sink8, 15
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RCX, align 8, !tbaa !2428
  %311 = add i64 %305, -56
  %312 = add i64 %.sink8, 19
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  store i64 %310, i64* %313, align 8
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, -7334
  %316 = add i64 %314, 5
  %317 = load i64, i64* %RSP, align 8, !tbaa !2428
  %318 = add i64 %317, -8
  %319 = inttoptr i64 %318 to i64*
  store i64 %316, i64* %319, align 8
  store i64 %318, i64* %RSP, align 8, !tbaa !2428
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  %320 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %315, %struct.Memory* %MEMORY.3)
  %321 = load i64, i64* %RBP, align 8
  %322 = add i64 %321, -64
  %323 = load i64, i64* %RAX, align 8
  %324 = load i64, i64* %PC, align 8
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %322 to i64*
  store i64 %323, i64* %326, align 8
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -56
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RDI, align 8, !tbaa !2428
  %333 = add i64 %327, -64
  %334 = add i64 %329, 8
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = add i64 %329, -335
  %338 = add i64 %329, 13
  %339 = load i64, i64* %RSP, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %338, i64* %341, align 8
  store i64 %340, i64* %RSP, align 8, !tbaa !2428
  store i64 %337, i64* %PC, align 8, !tbaa !2428
  %342 = tail call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* nonnull %0, i64 %337, %struct.Memory* %320)
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -40
  %345 = load i64, i64* %PC, align 8
  store i64 %344, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %346 = add i64 %345, -7356
  %347 = add i64 %345, 16
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* nonnull %0, i64 %346, %struct.Memory* %342)
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -72
  %354 = load i64, i64* %RAX, align 8
  %355 = load i64, i64* %PC, align 8
  %356 = add i64 %355, 4
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %353 to i64*
  store i64 %354, i64* %357, align 8
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -16
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %358, -80
  %365 = add i64 %360, 8
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  store i64 %363, i64* %366, align 8
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -72
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RDI, align 8, !tbaa !2428
  %373 = add i64 %367, -80
  %374 = add i64 %369, 8
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %RSI, align 8, !tbaa !2428
  %377 = add i64 %369, -376
  %378 = add i64 %369, 13
  %379 = load i64, i64* %RSP, align 8, !tbaa !2428
  %380 = add i64 %379, -8
  %381 = inttoptr i64 %380 to i64*
  store i64 %378, i64* %381, align 8
  store i64 %380, i64* %RSP, align 8, !tbaa !2428
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  %382 = tail call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* nonnull %0, i64 %377, %struct.Memory* %351)
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_404fb5

block_404e82:                                     ; preds = %block_404e82, %block_404e7d
  %.sink = phi i64 [ %419, %block_404e82 ], [ %87, %block_404e7d ]
  %MEMORY.4 = phi %struct.Memory* [ %408, %block_404e82 ], [ %MEMORY.0, %block_404e7d ]
  %383 = load i64, i64* %RBP, align 8
  %384 = add i64 %383, -40
  store i64 %384, i64* %RDI, align 8, !tbaa !2428
  %385 = add i64 %.sink, 318
  %386 = add i64 %.sink, 9
  %387 = load i64, i64* %RSP, align 8, !tbaa !2428
  %388 = add i64 %387, -8
  %389 = inttoptr i64 %388 to i64*
  store i64 %386, i64* %389, align 8
  store i64 %388, i64* %RSP, align 8, !tbaa !2428
  store i64 %385, i64* %PC, align 8, !tbaa !2428
  %390 = tail call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* nonnull %0, i64 %385, %struct.Memory* %MEMORY.4)
  %391 = load i64, i64* %RAX, align 8
  %392 = load i64, i64* %PC, align 8
  store i64 %391, i64* %RDI, align 8, !tbaa !2428
  %393 = add i64 %392, -7691
  %394 = add i64 %392, 8
  %395 = load i64, i64* %RSP, align 8, !tbaa !2428
  %396 = add i64 %395, -8
  %397 = inttoptr i64 %396 to i64*
  store i64 %394, i64* %397, align 8
  store i64 %396, i64* %RSP, align 8, !tbaa !2428
  store i64 %393, i64* %PC, align 8, !tbaa !2428
  %398 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* nonnull %0, i64 %393, %struct.Memory* %MEMORY.4)
  %399 = load i64, i64* %RBP, align 8
  %400 = add i64 %399, -24
  %401 = load i64, i64* %PC, align 8
  store i64 %400, i64* %RDI, align 8, !tbaa !2428
  %402 = load i64, i64* %RAX, align 8
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = add i64 %401, -7667
  %404 = add i64 %401, 12
  %405 = load i64, i64* %RSP, align 8, !tbaa !2428
  %406 = add i64 %405, -8
  %407 = inttoptr i64 %406 to i64*
  store i64 %404, i64* %407, align 8
  store i64 %406, i64* %RSP, align 8, !tbaa !2428
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  %408 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* nonnull %0, i64 %403, %struct.Memory* %MEMORY.4)
  %409 = load i8, i8* %AL, align 1
  %410 = load i64, i64* %PC, align 8
  %411 = and i8 %409, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %412 = zext i8 %411 to i32
  %413 = tail call i32 @llvm.ctpop.i32(i32 %412) #9
  %414 = trunc i32 %413 to i8
  %415 = xor i8 %414, 1
  store i8 %415, i8* %20, align 1, !tbaa !2447
  %416 = xor i8 %411, 1
  store i8 %416, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  %417 = icmp eq i8 %416, 0
  %.v35 = select i1 %417, i64 13, i64 8
  %418 = add i64 %410, %.v35
  store i64 %418, i64* %PC, align 8, !tbaa !2428
  %419 = add i64 %418, -42
  br i1 %417, label %block_404e82, label %block_404ea7
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405ef0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404fe0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %28, %35
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %37, align 1, !tbaa !2433
  %43 = zext i1 %36 to i32
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #9
  %45 = trunc i32 %44 to i8
  %46 = xor i8 %45, 1
  store i8 %46, i8* %38, align 1, !tbaa !2447
  %47 = xor i1 %36, true
  %48 = zext i1 %47 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %39, align 1, !tbaa !2448
  %49 = zext i1 %36 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4031c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -24
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 16
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RDI, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RSI, align 8, !tbaa !2428
  %59 = add i64 %51, 32
  %60 = add i64 %51, 13
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i8, i8* %AL, align 1
  %66 = load i64, i64* %PC, align 8
  %67 = and i8 %65, 1
  %68 = zext i8 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP, align 8
  %70 = add i64 %69, 16
  store i64 %70, i64* %RSP, align 8, !tbaa !2428
  %71 = icmp ugt i64 %69, -17
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %13, align 1, !tbaa !2433
  %73 = trunc i64 %70 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #9
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %20, align 1, !tbaa !2447
  %79 = xor i64 %69, 16
  %80 = xor i64 %79, %70
  %81 = lshr i64 %80, 4
  %82 = trunc i64 %81 to i8
  %83 = and i8 %82, 1
  store i8 %83, i8* %26, align 1, !tbaa !2448
  %84 = icmp eq i64 %70, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %29, align 1, !tbaa !2449
  %86 = lshr i64 %70, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %32, align 1, !tbaa !2450
  %88 = lshr i64 %69, 63
  %89 = xor i64 %86, %88
  %90 = add nuw nsw i64 %89, %86
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %38, align 1, !tbaa !2451
  %93 = add i64 %66, 10
  store i64 %93, i64* %PC, align 8
  %94 = add i64 %69, 24
  %95 = inttoptr i64 %70 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RBP, align 8, !tbaa !2428
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  %97 = add i64 %66, 11
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  %99 = load i64, i64* %98, align 8
  store i64 %99, i64* %PC, align 8, !tbaa !2428
  %100 = add i64 %69, 32
  store i64 %100, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %64
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_405f30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4022f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402318

block_402399:                                     ; preds = %block_402318
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402328:                                     ; preds = %block_402318
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 8352
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 14287
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 8738
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402318

block_402318:                                     ; preds = %block_402328, %block_4022f0
  %255 = phi i64 [ %.pre, %block_4022f0 ], [ %254, %block_402328 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4022f0 ], [ %222, %block_402328 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402328, label %block_402399
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4046c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -40
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 32
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -20
  %44 = load i32, i32* %ESI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  %57 = add i64 %48, -8
  %58 = add i64 %50, 11
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -16
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %62, 118
  %67 = add i64 %62, 9
  %68 = load i64, i64* %RSP, align 8, !tbaa !2428
  %69 = add i64 %68, -8
  %70 = inttoptr i64 %69 to i64*
  store i64 %67, i64* %70, align 8
  store i64 %69, i64* %RSP, align 8, !tbaa !2428
  store i64 %66, i64* %PC, align 8, !tbaa !2428
  %71 = tail call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* nonnull %0, i64 %66, %struct.Memory* %2)
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %72, -32
  %79 = load i64, i64* %RAX, align 8
  %80 = add i64 %74, 8
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RDI, align 8
  %83 = load i64, i64* %PC, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RSP, align 8
  %85 = add i64 %84, 32
  store i64 %85, i64* %RSP, align 8, !tbaa !2428
  %86 = icmp ugt i64 %84, -33
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %13, align 1, !tbaa !2433
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %20, align 1, !tbaa !2447
  %94 = xor i64 %85, %84
  %95 = lshr i64 %94, 4
  %96 = trunc i64 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %25, align 1, !tbaa !2448
  %98 = icmp eq i64 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %28, align 1, !tbaa !2449
  %100 = lshr i64 %85, 63
  %101 = trunc i64 %100 to i8
  store i8 %101, i8* %31, align 1, !tbaa !2450
  %102 = lshr i64 %84, 63
  %103 = xor i64 %100, %102
  %104 = add nuw nsw i64 %103, %100
  %105 = icmp eq i64 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %37, align 1, !tbaa !2451
  %107 = add i64 %83, 8
  store i64 %107, i64* %PC, align 8
  %108 = add i64 %84, 40
  %109 = inttoptr i64 %85 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RBP, align 8, !tbaa !2428
  store i64 %108, i64* %RSP, align 8, !tbaa !2428
  %111 = add i64 %83, 9
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %108 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = add i64 %84, 48
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %71
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4055d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -8
  store i64 %23, i64* %RAX, align 8, !tbaa !2428
  %24 = icmp ugt i64 %22, 7
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %25, i8* %26, align 1, !tbaa !2433
  %27 = trunc i64 %23 to i32
  %28 = and i32 %27, 255
  %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #9
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 1
  %32 = xor i8 %31, 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %33, align 1, !tbaa !2447
  %34 = xor i64 %22, 16
  %35 = xor i64 %34, %23
  %36 = lshr i64 %35, 4
  %37 = trunc i64 %36 to i8
  %38 = and i8 %37, 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = icmp eq i64 %23, 0
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = lshr i64 %23, 63
  %44 = trunc i64 %43 to i8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %44, i8* %45, align 1, !tbaa !2450
  %46 = lshr i64 %22, 63
  %47 = xor i64 %43, %46
  %48 = xor i64 %43, 1
  %49 = add nuw nsw i64 %47, %48
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2451
  store i64 %23, i64* %21, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -8
  %55 = add i64 %16, 18
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %16, 19
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %5, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RBP, align 8, !tbaa !2428
  store i64 %60, i64* %5, align 8, !tbaa !2428
  %63 = add i64 %16, 20
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  %66 = add i64 %59, 16
  store i64 %66, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_404ad0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 18
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -8
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RDI, align 8, !tbaa !2428
  %58 = sub i64 %53, %57
  %59 = lshr i64 %58, 2
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = ashr i64 %58, 3
  store i64 %62, i64* %RSI, align 8, !tbaa !2428
  store i8 %61, i8* %12, align 1, !tbaa !2432
  %63 = trunc i64 %62 to i32
  %64 = and i32 %63, 255
  %65 = tail call i32 @llvm.ctpop.i32(i32 %64) #9
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 1
  %68 = xor i8 %67, 1
  store i8 %68, i8* %19, align 1, !tbaa !2432
  store i8 0, i8* %25, align 1, !tbaa !2432
  %69 = icmp eq i64 %62, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %28, align 1, !tbaa !2432
  %71 = lshr i64 %62, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %31, align 1, !tbaa !2432
  store i8 0, i8* %37, align 1, !tbaa !2432
  %73 = add i64 %48, -32
  %74 = add i64 %50, 19
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %62, i64* %75, align 8
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = ashr i64 %81, 63
  store i64 %82, i64* %RDX, align 8, !tbaa !2428
  %83 = load i64, i64* %RCX, align 8
  %84 = add i64 %78, 9
  store i64 %84, i64* %PC, align 8
  %85 = sext i64 %83 to i128
  %86 = and i128 %85, -18446744073709551616
  %87 = zext i64 %82 to i128
  %88 = shl nuw i128 %87, 64
  %89 = zext i64 %81 to i128
  %90 = or i128 %88, %89
  %91 = zext i64 %83 to i128
  %92 = or i128 %86, %91
  %93 = sdiv i128 %90, %92
  %94 = trunc i128 %93 to i64
  %95 = and i128 %93, 18446744073709551615
  %96 = sext i64 %94 to i128
  %97 = and i128 %96, -18446744073709551616
  %98 = or i128 %97, %95
  %99 = icmp eq i128 %93, %98
  br i1 %99, label %102, label %100

; <label>:100:                                    ; preds = %block_404ad0
  %101 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %84, %struct.Memory* %2) #12
  %.pre = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  %.pre7 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:102:                                    ; preds = %block_404ad0
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %104 = srem i128 %90, %92
  %105 = trunc i128 %104 to i64
  store i64 %94, i64* %103, align 8, !tbaa !2428
  store i64 %105, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i8 0, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %102, %100
  %106 = phi i64 [ %.pre7, %100 ], [ %76, %102 ]
  %107 = phi i64 [ %.pre6, %100 ], [ %84, %102 ]
  %108 = phi i64 [ %.pre, %100 ], [ %94, %102 ]
  %109 = phi %struct.Memory* [ %101, %100 ], [ %2, %102 ]
  %110 = add i64 %108, -1
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = icmp eq i64 %108, 0
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %12, align 1, !tbaa !2433
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #9
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %19, align 1, !tbaa !2447
  %119 = xor i64 %110, %108
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %25, align 1, !tbaa !2448
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %28, align 1, !tbaa !2449
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %31, align 1, !tbaa !2450
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %127
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %37, align 1, !tbaa !2451
  %132 = add i64 %106, -24
  %133 = add i64 %107, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %110, i64* %134, align 8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %137 = bitcast i64* %136 to double*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_404b0b

block_404bb4:                                     ; preds = %block_404b5b
  %138 = load i64, i64* %RSP, align 8
  %139 = add i64 %138, 48
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  %140 = icmp ugt i64 %138, -49
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %12, align 1, !tbaa !2433
  %142 = trunc i64 %139 to i32
  %143 = and i32 %142, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #9
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %19, align 1, !tbaa !2447
  %148 = xor i64 %138, 16
  %149 = xor i64 %148, %139
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %25, align 1, !tbaa !2448
  %153 = icmp eq i64 %139, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %28, align 1, !tbaa !2449
  %155 = lshr i64 %139, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* %31, align 1, !tbaa !2450
  %157 = lshr i64 %138, 63
  %158 = xor i64 %155, %157
  %159 = add nuw nsw i64 %158, %155
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %37, align 1, !tbaa !2451
  %162 = add i64 %316, 5
  store i64 %162, i64* %PC, align 8
  %163 = add i64 %138, 56
  %164 = inttoptr i64 %139 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RBP, align 8, !tbaa !2428
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  %166 = add i64 %316, 6
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %163 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  %169 = add i64 %138, 64
  store i64 %169, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_404b4f:                                     ; preds = %block_404b0b
  %170 = add i64 %269, -32
  %171 = add i64 %285, 4
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = add i64 %173, -1
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = icmp eq i64 %173, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %12, align 1, !tbaa !2433
  %177 = trunc i64 %174 to i32
  %178 = and i32 %177, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #9
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %19, align 1, !tbaa !2447
  %183 = xor i64 %174, %173
  %184 = lshr i64 %183, 4
  %185 = trunc i64 %184 to i8
  %186 = and i8 %185, 1
  store i8 %186, i8* %25, align 1, !tbaa !2448
  %187 = icmp eq i64 %174, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %28, align 1, !tbaa !2449
  %189 = lshr i64 %174, 63
  %190 = trunc i64 %189 to i8
  store i8 %190, i8* %31, align 1, !tbaa !2450
  %191 = lshr i64 %173, 63
  %192 = xor i64 %189, %191
  %193 = add nuw nsw i64 %192, %191
  %194 = icmp eq i64 %193, 2
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %37, align 1, !tbaa !2451
  %196 = add i64 %285, 12
  store i64 %196, i64* %PC, align 8
  store i64 %174, i64* %272, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_404b5b

block_404b16:                                     ; preds = %block_404b0b
  %197 = add i64 %269, -8
  %198 = add i64 %285, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = add i64 %285, 8
  store i64 %201, i64* %PC, align 8
  %202 = load i64, i64* %272, align 8
  store i64 %202, i64* %RCX, align 8, !tbaa !2428
  %203 = shl i64 %202, 3
  %204 = add i64 %200, %203
  %205 = add i64 %285, 13
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  %207 = load i64, i64* %206, align 8
  store i64 %207, i64* %135, align 1, !tbaa !2452
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %208 = add i64 %269, -40
  %209 = add i64 %285, 18
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  store i64 %207, i64* %210, align 8
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -32
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, 4
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %212 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RDI, align 8, !tbaa !2428
  %217 = add i64 %211, -8
  %218 = add i64 %213, 8
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %RSI, align 8, !tbaa !2428
  %221 = add i64 %211, -24
  %222 = add i64 %213, 12
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %RDX, align 8, !tbaa !2428
  %225 = add i64 %211, -40
  %226 = add i64 %213, 17
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to i64*
  %228 = load i64, i64* %227, align 8
  store i64 %228, i64* %135, align 1, !tbaa !2452
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %229 = add i64 %213, 360
  %230 = add i64 %213, 22
  %231 = load i64, i64* %RSP, align 8, !tbaa !2428
  %232 = add i64 %231, -8
  %233 = inttoptr i64 %232 to i64*
  store i64 %230, i64* %233, align 8
  store i64 %232, i64* %RSP, align 8, !tbaa !2428
  store i64 %229, i64* %PC, align 8, !tbaa !2428
  %234 = tail call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* nonnull %0, i64 %229, %struct.Memory* %MEMORY.0)
  %235 = load i64, i64* %RBP, align 8
  %236 = add i64 %235, -24
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %236 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, -1
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = icmp ne i64 %240, 0
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %12, align 1, !tbaa !2433
  %244 = trunc i64 %241 to i32
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #9
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %19, align 1, !tbaa !2447
  %250 = xor i64 %240, 16
  %251 = xor i64 %250, %241
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %25, align 1, !tbaa !2448
  %255 = icmp eq i64 %241, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %28, align 1, !tbaa !2449
  %257 = lshr i64 %241, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %31, align 1, !tbaa !2450
  %259 = lshr i64 %240, 63
  %260 = xor i64 %257, %259
  %261 = xor i64 %257, 1
  %262 = add nuw nsw i64 %260, %261
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %37, align 1, !tbaa !2451
  %265 = add i64 %237, 12
  store i64 %265, i64* %PC, align 8
  store i64 %241, i64* %239, align 8
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, -63
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  br label %block_404b0b

block_404b0b:                                     ; preds = %block_404b16, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %268 = phi i64 [ %.pre8, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %267, %block_404b16 ]
  %MEMORY.0 = phi %struct.Memory* [ %109, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %234, %block_404b16 ]
  %269 = load i64, i64* %RBP, align 8
  %270 = add i64 %269, -24
  %271 = add i64 %268, 5
  store i64 %271, i64* %PC, align 8
  %272 = inttoptr i64 %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i8 0, i8* %12, align 1, !tbaa !2433
  %274 = trunc i64 %273 to i32
  %275 = and i32 %274, 255
  %276 = tail call i32 @llvm.ctpop.i32(i32 %275) #9
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = xor i8 %278, 1
  store i8 %279, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %25, align 1, !tbaa !2448
  %280 = icmp eq i64 %273, 0
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %28, align 1, !tbaa !2449
  %282 = lshr i64 %273, 63
  %283 = trunc i64 %282 to i8
  store i8 %283, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  %284 = icmp ne i8 %283, 0
  %.v = select i1 %284, i64 63, i64 6
  %285 = add i64 %271, %.v
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  br i1 %284, label %block_404b4f, label %block_404b16

block_404b5b:                                     ; preds = %block_404b66, %block_404b4f
  %286 = phi i64 [ %.pre9, %block_404b4f ], [ %402, %block_404b66 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_404b4f ], [ %369, %block_404b66 ]
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -24
  %289 = add i64 %286, 5
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %288 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = add i64 %291, -1
  %293 = icmp eq i64 %291, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %12, align 1, !tbaa !2433
  %295 = trunc i64 %292 to i32
  %296 = and i32 %295, 255
  %297 = tail call i32 @llvm.ctpop.i32(i32 %296) #9
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  store i8 %300, i8* %19, align 1, !tbaa !2447
  %301 = xor i64 %292, %291
  %302 = lshr i64 %301, 4
  %303 = trunc i64 %302 to i8
  %304 = and i8 %303, 1
  store i8 %304, i8* %25, align 1, !tbaa !2448
  %305 = icmp eq i64 %292, 0
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %28, align 1, !tbaa !2449
  %307 = lshr i64 %292, 63
  %308 = trunc i64 %307 to i8
  store i8 %308, i8* %31, align 1, !tbaa !2450
  %309 = lshr i64 %291, 63
  %310 = xor i64 %307, %309
  %311 = add nuw nsw i64 %310, %309
  %312 = icmp eq i64 %311, 2
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %37, align 1, !tbaa !2451
  %314 = icmp ne i8 %308, 0
  %315 = xor i1 %314, %312
  %.v10 = select i1 %315, i64 89, i64 11
  %316 = add i64 %286, %.v10
  store i64 %316, i64* %PC, align 8, !tbaa !2428
  br i1 %315, label %block_404bb4, label %block_404b66

block_404b66:                                     ; preds = %block_404b5b
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %19, align 1, !tbaa !2447
  store i8 1, i8* %28, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  store i8 0, i8* %37, align 1, !tbaa !2451
  store i8 0, i8* %25, align 1, !tbaa !2448
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %317 = add i64 %287, -8
  %318 = add i64 %316, 8
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %RCX, align 8, !tbaa !2428
  %321 = add i64 %316, 12
  store i64 %321, i64* %PC, align 8
  %322 = load i64, i64* %290, align 8
  store i64 %322, i64* %RSI, align 8, !tbaa !2428
  %323 = shl i64 %322, 3
  %324 = add i64 %320, %323
  %325 = add i64 %316, 17
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i64*
  %327 = load i64, i64* %326, align 8
  store i64 %327, i64* %135, align 1, !tbaa !2452
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %328 = add i64 %287, -48
  %329 = add i64 %316, 22
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i64*
  store i64 %327, i64* %330, align 8
  %331 = load i64, i64* %RBP, align 8
  %332 = add i64 %331, -8
  %333 = load i64, i64* %PC, align 8
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %332 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RCX, align 8, !tbaa !2428
  %337 = add i64 %333, 8
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %135, align 1, !tbaa !2452
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %340 = add i64 %333, 12
  store i64 %340, i64* %PC, align 8
  %341 = load i64, i64* %335, align 8
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = add i64 %331, -24
  %343 = add i64 %333, 16
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RSI, align 8, !tbaa !2428
  %346 = shl i64 %345, 3
  %347 = add i64 %341, %346
  %348 = add i64 %333, 21
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  store i64 %339, i64* %349, align 8
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -24
  %352 = load i64, i64* %PC, align 8
  %353 = add i64 %352, 4
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %351 to i64*
  %355 = load i64, i64* %354, align 8
  store i64 %355, i64* %RDI, align 8, !tbaa !2428
  %356 = add i64 %350, -8
  %357 = add i64 %352, 8
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %356 to i64*
  %359 = load i64, i64* %358, align 8
  store i64 %359, i64* %RSI, align 8, !tbaa !2428
  %360 = add i64 %350, -48
  %361 = add i64 %352, 13
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %135, align 1, !tbaa !2452
  store double 0.000000e+00, double* %137, align 1, !tbaa !2452
  %364 = add i64 %352, 255
  %365 = add i64 %352, 18
  %366 = load i64, i64* %RSP, align 8, !tbaa !2428
  %367 = add i64 %366, -8
  %368 = inttoptr i64 %367 to i64*
  store i64 %365, i64* %368, align 8
  store i64 %367, i64* %RSP, align 8, !tbaa !2428
  store i64 %364, i64* %PC, align 8, !tbaa !2428
  %369 = tail call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* nonnull %0, i64 %364, %struct.Memory* %MEMORY.1)
  %370 = load i64, i64* %RBP, align 8
  %371 = add i64 %370, -24
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %371 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = add i64 %375, -1
  store i64 %376, i64* %RAX, align 8, !tbaa !2428
  %377 = icmp ne i64 %375, 0
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %12, align 1, !tbaa !2433
  %379 = trunc i64 %376 to i32
  %380 = and i32 %379, 255
  %381 = tail call i32 @llvm.ctpop.i32(i32 %380) #9
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  store i8 %384, i8* %19, align 1, !tbaa !2447
  %385 = xor i64 %375, 16
  %386 = xor i64 %385, %376
  %387 = lshr i64 %386, 4
  %388 = trunc i64 %387 to i8
  %389 = and i8 %388, 1
  store i8 %389, i8* %25, align 1, !tbaa !2448
  %390 = icmp eq i64 %376, 0
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %28, align 1, !tbaa !2449
  %392 = lshr i64 %376, 63
  %393 = trunc i64 %392 to i8
  store i8 %393, i8* %31, align 1, !tbaa !2450
  %394 = lshr i64 %375, 63
  %395 = xor i64 %392, %394
  %396 = xor i64 %392, 1
  %397 = add nuw nsw i64 %395, %396
  %398 = icmp eq i64 %397, 2
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %37, align 1, !tbaa !2451
  %400 = add i64 %372, 12
  store i64 %400, i64* %PC, align 8
  store i64 %376, i64* %374, align 8
  %401 = load i64, i64* %PC, align 8
  %402 = add i64 %401, -84
  store i64 %402, i64* %PC, align 8, !tbaa !2428
  br label %block_404b5b
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401260_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401260:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -584
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 576
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2433
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #9
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2447
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = add i64 %9, -40
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %9, -48
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %44 = bitcast %union.VectorReg* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %44, align 1, !tbaa !2456
  %45 = add i64 %9, -12
  %46 = add i64 %12, 28
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i32*
  store i32 0, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i32, i32* %EDI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i64, i64* %RSI, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -40
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %64, align 1
  %72 = inttoptr i64 %68 to i64*
  store i64 %71, i64* %72, align 8
  %73 = load i64, i64* %RAX, align 8
  %74 = load i64, i64* %PC, align 8
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %75 = load i64, i64* %RCX, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %74, 2770
  %77 = add i64 %74, 11
  %78 = load i64, i64* %RSP, align 8, !tbaa !2428
  %79 = add i64 %78, -8
  %80 = inttoptr i64 %79 to i64*
  store i64 %77, i64* %80, align 8
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  %81 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* nonnull %0, i64 %76, %struct.Memory* %2)
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -48
  %84 = load i64, i64* %PC, align 8
  store i64 %83, i64* %RDI, align 8, !tbaa !2428
  %85 = add i64 %82, -56
  store i64 %85, i64* %RSI, align 8, !tbaa !2428
  %86 = bitcast %union.VectorReg* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %86, align 1, !tbaa !2456
  %87 = add i64 %84, 16
  store i64 %87, i64* %PC, align 8
  %88 = load i64, i64* %64, align 1
  %89 = inttoptr i64 %85 to i64*
  store i64 %88, i64* %89, align 8
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 2775
  %92 = add i64 %90, 5
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %91, %struct.Memory* %81)
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %98 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = add i32 %102, -1
  %104 = icmp eq i32 %102, 0
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %16, align 1, !tbaa !2433
  %106 = and i32 %103, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #9
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %23, align 1, !tbaa !2447
  %111 = xor i32 %103, %102
  %112 = lshr i32 %111, 4
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  store i8 %114, i8* %28, align 1, !tbaa !2448
  %115 = icmp eq i32 %103, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %31, align 1, !tbaa !2449
  %117 = lshr i32 %103, 31
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %34, align 1, !tbaa !2450
  %119 = lshr i32 %102, 31
  %120 = xor i32 %117, %119
  %121 = add nuw nsw i32 %120, %119
  %122 = icmp eq i32 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %40, align 1, !tbaa !2451
  %124 = icmp ne i8 %118, 0
  %125 = xor i1 %124, %122
  %126 = or i1 %115, %125
  %.v = select i1 %126, i64 30, i64 10
  %127 = add i64 %99, %.v
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  br i1 %126, label %block_4012cc, label %block_4012b8

block_4012b8:                                     ; preds = %block_401260
  %128 = add i64 %97, -16
  %129 = add i64 %127, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %131, 8
  %133 = add i64 %127, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %127, -2936
  %137 = add i64 %127, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call fastcc %struct.Memory* @ext_620948_atoi(%struct.State* nonnull %0, %struct.Memory* %96)
  %142 = load i32, i32* %EAX, align 4
  %143 = load i64, i64* %PC, align 8
  %144 = add i64 %143, 7
  store i64 %144, i64* %PC, align 8
  store i32 %142, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %.pre = load i64, i64* %RBP, align 8
  br label %block_4012cc

block_4012cc:                                     ; preds = %block_4012b8, %block_401260
  %145 = phi i64 [ %127, %block_401260 ], [ %144, %block_4012b8 ]
  %146 = phi i64 [ %97, %block_401260 ], [ %.pre, %block_4012b8 ]
  %MEMORY.0 = phi %struct.Memory* [ %96, %block_401260 ], [ %141, %block_4012b8 ]
  %147 = add i64 %146, -8
  %148 = add i64 %145, 4
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = add i32 %150, -2
  %152 = icmp ult i32 %150, 2
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %16, align 1, !tbaa !2433
  %154 = and i32 %151, 255
  %155 = tail call i32 @llvm.ctpop.i32(i32 %154) #9
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 1
  %158 = xor i8 %157, 1
  store i8 %158, i8* %23, align 1, !tbaa !2447
  %159 = xor i32 %151, %150
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  store i8 %162, i8* %28, align 1, !tbaa !2448
  %163 = icmp eq i32 %151, 0
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %31, align 1, !tbaa !2449
  %165 = lshr i32 %151, 31
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %34, align 1, !tbaa !2450
  %167 = lshr i32 %150, 31
  %168 = xor i32 %165, %167
  %169 = add nuw nsw i32 %168, %167
  %170 = icmp eq i32 %169, 2
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %40, align 1, !tbaa !2451
  %172 = icmp ne i8 %166, 0
  %173 = xor i1 %172, %170
  %174 = or i1 %163, %173
  %.v5 = select i1 %174, i64 32, i64 10
  %175 = add i64 %145, %.v5
  store i64 %175, i64* %PC, align 8, !tbaa !2428
  br i1 %174, label %block_4012cc.block_4012ec_crit_edge, label %block_4012d6

block_4012cc.block_4012ec_crit_edge:              ; preds = %block_4012cc
  %.pre2 = load double, double* bitcast (%init_value_type* @init_value to double*), align 8
  br label %block_4012ec

block_4012d6:                                     ; preds = %block_4012cc
  %176 = add i64 %146, -16
  %177 = add i64 %175, 4
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = add i64 %179, 16
  %181 = add i64 %175, 8
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182, align 8
  store i64 %183, i64* %RDI, align 8, !tbaa !2428
  %184 = add i64 %175, -3094
  %185 = add i64 %175, 13
  %186 = load i64, i64* %RSP, align 8, !tbaa !2428
  %187 = add i64 %186, -8
  %188 = inttoptr i64 %187 to i64*
  store i64 %185, i64* %188, align 8
  store i64 %187, i64* %RSP, align 8, !tbaa !2428
  store i64 %184, i64* %PC, align 8, !tbaa !2428
  %189 = tail call fastcc %struct.Memory* @ext_620900_atof(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 9
  store i64 %191, i64* %PC, align 8
  %192 = load i64, i64* %64, align 1
  store i64 %192, i64* bitcast (%init_value_type* @init_value to i64*), align 8
  %193 = bitcast i64 %192 to double
  br label %block_4012ec

block_4012ec:                                     ; preds = %block_4012cc.block_4012ec_crit_edge, %block_4012d6
  %194 = phi double [ %.pre2, %block_4012cc.block_4012ec_crit_edge ], [ %193, %block_4012d6 ]
  %195 = phi i64 [ %175, %block_4012cc.block_4012ec_crit_edge ], [ %191, %block_4012d6 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4012cc.block_4012ec_crit_edge ], [ %189, %block_4012d6 ]
  %196 = tail call double @llvm.trunc.f64(double %194) #9
  %197 = tail call double @llvm.fabs.f64(double %196) #9
  %198 = fcmp ogt double %197, 0x41DFFFFFFFC00000
  %199 = fptosi double %196 to i32
  %200 = select i1 %198, i32 -2147483648, i32 %199
  %201 = add i32 %200, 123
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = icmp ugt i32 %200, -124
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %16, align 1, !tbaa !2433
  %205 = and i32 %201, 255
  %206 = tail call i32 @llvm.ctpop.i32(i32 %205) #9
  %207 = trunc i32 %206 to i8
  %208 = and i8 %207, 1
  %209 = xor i8 %208, 1
  store i8 %209, i8* %23, align 1, !tbaa !2447
  %210 = xor i32 %200, 16
  %211 = xor i32 %210, %201
  %212 = lshr i32 %211, 4
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %28, align 1, !tbaa !2448
  %215 = icmp eq i32 %201, 0
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %31, align 1, !tbaa !2449
  %217 = lshr i32 %201, 31
  %218 = trunc i32 %217 to i8
  store i8 %218, i8* %34, align 1, !tbaa !2450
  %219 = lshr i32 %200, 31
  %220 = xor i32 %217, %219
  %221 = add nuw nsw i32 %220, %217
  %222 = icmp eq i32 %221, 2
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %40, align 1, !tbaa !2451
  store i64 %202, i64* %RDI, align 8, !tbaa !2428
  %224 = add i64 %195, -3036
  %225 = add i64 %195, 19
  %226 = load i64, i64* %RSP, align 8, !tbaa !2428
  %227 = add i64 %226, -8
  %228 = inttoptr i64 %227 to i64*
  store i64 %225, i64* %228, align 8
  store i64 %227, i64* %RSP, align 8, !tbaa !2428
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  %229 = tail call fastcc %struct.Memory* @ext_620930_srand(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %230 = load i64, i64* %PC, align 8
  %231 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %231, i64* %RDI, align 8, !tbaa !2428
  %232 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %232, i64* %RSI, align 8, !tbaa !2428
  %233 = load i64, i64* bitcast (%init_value_type* @init_value to i64*), align 8
  store i64 %233, i64* %64, align 1, !tbaa !2452
  %234 = bitcast i64* %43 to double*
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %235 = add i64 %230, 2737
  %236 = add i64 %230, 30
  %237 = load i64, i64* %RSP, align 8, !tbaa !2428
  %238 = add i64 %237, -8
  %239 = inttoptr i64 %238 to i64*
  store i64 %236, i64* %239, align 8
  store i64 %238, i64* %RSP, align 8, !tbaa !2428
  store i64 %235, i64* %PC, align 8, !tbaa !2428
  %240 = tail call %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* nonnull %0, i64 %235, %struct.Memory* %229)
  %241 = load i64, i64* %RBP, align 8
  %242 = add i64 %241, -64
  %243 = load i64, i64* %PC, align 8
  store i64 %242, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %244 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %244, i64* %RCX, align 8, !tbaa !2428
  %245 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %245, i64* %RDX, align 8, !tbaa !2428
  %246 = add i64 %241, -544
  %247 = add i64 %243, 37
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  store i64 %245, i64* %248, align 8
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -552
  %251 = load i64, i64* %RCX, align 8
  %252 = load i64, i64* %PC, align 8
  %253 = add i64 %252, 7
  store i64 %253, i64* %PC, align 8
  %254 = inttoptr i64 %250 to i64*
  store i64 %251, i64* %254, align 8
  %255 = load i64, i64* %PC, align 8
  %256 = add i64 %255, 2583
  %257 = add i64 %255, 5
  %258 = load i64, i64* %RSP, align 8, !tbaa !2428
  %259 = add i64 %258, -8
  %260 = inttoptr i64 %259 to i64*
  store i64 %257, i64* %260, align 8
  store i64 %259, i64* %RSP, align 8, !tbaa !2428
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  %261 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* nonnull %0, i64 %256, %struct.Memory* %240)
  %262 = load i64, i64* %RBP, align 8
  %263 = add i64 %262, -64
  %264 = load i64, i64* %PC, align 8
  %265 = add i64 %264, 5
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266, align 8
  store i64 %267, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %268 = add i64 %262, -552
  %269 = add i64 %264, 12
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %268 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %RDI, align 8, !tbaa !2428
  %272 = add i64 %262, -544
  %273 = add i64 %264, 19
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %RSI, align 8, !tbaa !2428
  %276 = add i64 %264, 2722
  %277 = add i64 %264, 24
  %278 = load i64, i64* %RSP, align 8, !tbaa !2428
  %279 = add i64 %278, -8
  %280 = inttoptr i64 %279 to i64*
  store i64 %277, i64* %280, align 8
  store i64 %279, i64* %RSP, align 8, !tbaa !2428
  store i64 %276, i64* %PC, align 8, !tbaa !2428
  %281 = tail call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* nonnull %0, i64 %276, %struct.Memory* %261)
  %282 = load i64, i64* %RBP, align 8
  %283 = add i64 %282, -72
  %284 = load i64, i64* %PC, align 8
  store i64 %283, i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%init_value_type* @init_value to i64), i64* %RSI, align 8, !tbaa !2428
  %285 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %285, i64* %RCX, align 8, !tbaa !2428
  %286 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %286, i64* %RDX, align 8, !tbaa !2428
  %287 = add i64 %282, -560
  %288 = add i64 %284, 37
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  store i64 %286, i64* %289, align 8
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -568
  %292 = load i64, i64* %RCX, align 8
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, 7
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %291 to i64*
  store i64 %292, i64* %295, align 8
  %296 = load i64, i64* %PC, align 8
  %297 = add i64 %296, 2542
  %298 = add i64 %296, 5
  %299 = load i64, i64* %RSP, align 8, !tbaa !2428
  %300 = add i64 %299, -8
  %301 = inttoptr i64 %300 to i64*
  store i64 %298, i64* %301, align 8
  store i64 %300, i64* %RSP, align 8, !tbaa !2428
  store i64 %297, i64* %PC, align 8, !tbaa !2428
  %302 = tail call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %297, %struct.Memory* %281)
  %303 = load i64, i64* %RBP, align 8
  %304 = add i64 %303, -72
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, 5
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307, align 8
  store i64 %308, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %309 = add i64 %303, -568
  %310 = add i64 %305, 12
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  %312 = load i64, i64* %311, align 8
  store i64 %312, i64* %RDI, align 8, !tbaa !2428
  %313 = add i64 %303, -560
  %314 = add i64 %305, 19
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %RSI, align 8, !tbaa !2428
  %317 = add i64 %305, 2713
  %318 = add i64 %305, 24
  %319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %320 = add i64 %319, -8
  %321 = inttoptr i64 %320 to i64*
  store i64 %318, i64* %321, align 8
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  store i64 %317, i64* %PC, align 8, !tbaa !2428
  %322 = tail call %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* nonnull %0, i64 %317, %struct.Memory* %302)
  %323 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 353), i64* %RDX, align 8, !tbaa !2428
  %324 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %324, i64* %RDI, align 8, !tbaa !2428
  %325 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %325, i64* %RSI, align 8, !tbaa !2428
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -24
  %328 = add i64 %323, 31
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %331 = add i64 %323, 2753
  %332 = add i64 %323, 36
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* nonnull %0, i64 %331, %struct.Memory* %322)
  %337 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 383), i64* %RDX, align 8, !tbaa !2428
  %338 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %339 = load i64, i64* %RBP, align 8
  %340 = add i64 %339, -80
  %341 = add i64 %337, 22
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %340 to i64*
  store i64 %338, i64* %342, align 8
  %343 = load i64, i64* %PC, align 8
  %344 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %344, i64* %RCX, align 8, !tbaa !2428
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -88
  %347 = add i64 %343, 12
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i64*
  store i64 %344, i64* %348, align 8
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -24
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %355 = add i64 %349, -80
  %356 = add i64 %351, 9
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RDI, align 8, !tbaa !2428
  %359 = add i64 %349, -88
  %360 = add i64 %351, 13
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RSI, align 8, !tbaa !2428
  %363 = add i64 %351, 2779
  %364 = add i64 %351, 18
  %365 = load i64, i64* %RSP, align 8, !tbaa !2428
  %366 = add i64 %365, -8
  %367 = inttoptr i64 %366 to i64*
  store i64 %364, i64* %367, align 8
  store i64 %366, i64* %RSP, align 8, !tbaa !2428
  store i64 %363, i64* %PC, align 8, !tbaa !2428
  %368 = tail call %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* nonnull %0, i64 %363, %struct.Memory* %336)
  %369 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 419), i64* %RDX, align 8, !tbaa !2428
  %370 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %371, i64* %RSI, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP, align 8
  %373 = add i64 %372, -32
  %374 = add i64 %369, 30
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %RCX, align 8, !tbaa !2428
  %377 = add i64 %372, -96
  %378 = add i64 %369, 34
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %377 to i64*
  store i64 %376, i64* %379, align 8
  %380 = load i64, i64* %RBP, align 8
  %381 = add i64 %380, -96
  %382 = load i64, i64* %PC, align 8
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %386 = add i64 %382, 2839
  %387 = add i64 %382, 10
  %388 = load i64, i64* %RSP, align 8, !tbaa !2428
  %389 = add i64 %388, -8
  %390 = inttoptr i64 %389 to i64*
  store i64 %387, i64* %390, align 8
  store i64 %389, i64* %RSP, align 8, !tbaa !2428
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  %391 = tail call %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* nonnull %0, i64 %386, %struct.Memory* %368)
  %392 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 461), i64* %RDX, align 8, !tbaa !2428
  %393 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %394 = load i64, i64* %RBP, align 8
  %395 = add i64 %394, -104
  %396 = add i64 %392, 22
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i64*
  store i64 %393, i64* %397, align 8
  %398 = load i64, i64* %PC, align 8
  %399 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %399, i64* %RCX, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP, align 8
  %401 = add i64 %400, -112
  %402 = add i64 %398, 12
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %401 to i64*
  store i64 %399, i64* %403, align 8
  %404 = load i64, i64* %RBP, align 8
  %405 = add i64 %404, -32
  %406 = load i64, i64* %PC, align 8
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408, align 8
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = add i64 %404, -120
  %411 = add i64 %406, 8
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i64*
  store i64 %409, i64* %412, align 8
  %413 = load i64, i64* %RBP, align 8
  %414 = add i64 %413, -104
  %415 = load i64, i64* %PC, align 8
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %414 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = add i64 %413, -112
  %420 = add i64 %415, 8
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %RSI, align 8, !tbaa !2428
  %423 = add i64 %413, -120
  %424 = add i64 %415, 13
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %427 = add i64 %415, 2915
  %428 = add i64 %415, 18
  %429 = load i64, i64* %RSP, align 8, !tbaa !2428
  %430 = add i64 %429, -8
  %431 = inttoptr i64 %430 to i64*
  store i64 %428, i64* %431, align 8
  store i64 %430, i64* %RSP, align 8, !tbaa !2428
  store i64 %427, i64* %PC, align 8, !tbaa !2428
  %432 = tail call %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* nonnull %0, i64 %427, %struct.Memory* %391)
  %433 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 509), i64* %RDX, align 8, !tbaa !2428
  %434 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %434, i64* %RDI, align 8, !tbaa !2428
  %435 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %435, i64* %RSI, align 8, !tbaa !2428
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -48
  %438 = add i64 %433, 30
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %437 to i64*
  %440 = load i64, i64* %439, align 8
  store i64 %440, i64* %RCX, align 8, !tbaa !2428
  %441 = add i64 %436, -128
  %442 = add i64 %433, 34
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  store i64 %440, i64* %443, align 8
  %444 = load i64, i64* %RBP, align 8
  %445 = add i64 %444, -128
  %446 = load i64, i64* %PC, align 8
  %447 = add i64 %446, 5
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %449, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %450 = add i64 %446, 3007
  %451 = add i64 %446, 10
  %452 = load i64, i64* %RSP, align 8, !tbaa !2428
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %451, i64* %454, align 8
  store i64 %453, i64* %RSP, align 8, !tbaa !2428
  store i64 %450, i64* %PC, align 8, !tbaa !2428
  %455 = tail call %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* nonnull %0, i64 %450, %struct.Memory* %432)
  %456 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 553), i64* %RDX, align 8, !tbaa !2428
  %457 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -136
  %460 = add i64 %456, 25
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i64*
  store i64 %457, i64* %461, align 8
  %462 = load i64, i64* %PC, align 8
  %463 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP, align 8
  %465 = add i64 %464, -144
  %466 = add i64 %462, 15
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  store i64 %463, i64* %467, align 8
  %468 = load i64, i64* %RBP, align 8
  %469 = add i64 %468, -48
  %470 = load i64, i64* %PC, align 8
  %471 = add i64 %470, 4
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %469 to i64*
  %473 = load i64, i64* %472, align 8
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = add i64 %468, -152
  %475 = add i64 %470, 11
  store i64 %475, i64* %PC, align 8
  %476 = inttoptr i64 %474 to i64*
  store i64 %473, i64* %476, align 8
  %477 = load i64, i64* %RBP, align 8
  %478 = add i64 %477, -136
  %479 = load i64, i64* %PC, align 8
  %480 = add i64 %479, 7
  store i64 %480, i64* %PC, align 8
  %481 = inttoptr i64 %478 to i64*
  %482 = load i64, i64* %481, align 8
  store i64 %482, i64* %RDI, align 8, !tbaa !2428
  %483 = add i64 %477, -144
  %484 = add i64 %479, 14
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = add i64 %477, -152
  %488 = add i64 %479, 22
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  %490 = load i64, i64* %489, align 8
  store i64 %490, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %491 = add i64 %479, 3074
  %492 = add i64 %479, 27
  %493 = load i64, i64* %RSP, align 8, !tbaa !2428
  %494 = add i64 %493, -8
  %495 = inttoptr i64 %494 to i64*
  store i64 %492, i64* %495, align 8
  store i64 %494, i64* %RSP, align 8, !tbaa !2428
  store i64 %491, i64* %PC, align 8, !tbaa !2428
  %496 = tail call %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* nonnull %0, i64 %491, %struct.Memory* %455)
  %497 = load i64, i64* %PC, align 8
  %498 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %499 = zext i32 %498 to i64
  store i64 %499, i64* %R8, align 8, !tbaa !2428
  %500 = load i64, i64* %RBP, align 8
  %501 = add i64 %500, -572
  %502 = add i64 %497, 19
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  store i32 2000, i32* %503, align 4
  %504 = load i32, i32* %R8D, align 4
  %505 = zext i32 %504 to i64
  %506 = load i64, i64* %PC, align 8
  store i64 %505, i64* %RAX, align 8, !tbaa !2428
  %507 = sext i32 %504 to i64
  %508 = lshr i64 %507, 32
  store i64 %508, i64* %RDX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP, align 8
  %510 = add i64 %509, -572
  %511 = add i64 %506, 11
  store i64 %511, i64* %PC, align 8
  %512 = inttoptr i64 %510 to i32*
  %513 = load i32, i32* %512, align 4
  %514 = zext i32 %513 to i64
  store i64 %514, i64* %R8, align 8, !tbaa !2428
  %515 = add i64 %506, 14
  store i64 %515, i64* %PC, align 8
  %516 = sext i32 %513 to i64
  %517 = shl nuw i64 %508, 32
  %518 = or i64 %517, %505
  %519 = sdiv i64 %518, %516
  %520 = shl i64 %519, 32
  %521 = ashr exact i64 %520, 32
  %522 = icmp eq i64 %519, %521
  br i1 %522, label %525, label %523

; <label>:523:                                    ; preds = %block_4012ec
  %524 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %515, %struct.Memory* %496) #12
  %.pre3 = load i32, i32* %EAX, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:525:                                    ; preds = %block_4012ec
  %526 = srem i64 %518, %516
  %527 = and i64 %519, 4294967295
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %529 = and i64 %526, 4294967295
  store i64 %529, i64* %528, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2433
  store i8 0, i8* %23, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %34, align 1, !tbaa !2450
  store i8 0, i8* %40, align 1, !tbaa !2451
  %530 = trunc i64 %519 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %525, %523
  %531 = phi i64 [ %.pre4, %523 ], [ %515, %525 ]
  %532 = phi i32 [ %.pre3, %523 ], [ %530, %525 ]
  %533 = phi %struct.Memory* [ %524, %523 ], [ %496, %525 ]
  store i32 %532, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %534 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %534, i64* %RDI, align 8, !tbaa !2428
  %535 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %535, i64* %RSI, align 8, !tbaa !2428
  %536 = add i64 %531, 3158
  %537 = add i64 %531, 28
  %538 = load i64, i64* %RSP, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %537, i64* %540, align 8
  store i64 %539, i64* %RSP, align 8, !tbaa !2428
  store i64 %536, i64* %PC, align 8, !tbaa !2428
  %541 = tail call %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* nonnull %0, i64 %536, %struct.Memory* %533)
  %542 = load i64, i64* %PC, align 8
  %543 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %543, i64* %RDI, align 8, !tbaa !2428
  %544 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %544, i64* %RSI, align 8, !tbaa !2428
  %545 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  store i64 %545, i64* %RDX, align 8, !tbaa !2428
  %546 = add i64 %542, 3210
  %547 = add i64 %542, 32
  %548 = load i64, i64* %RSP, align 8, !tbaa !2428
  %549 = add i64 %548, -8
  %550 = inttoptr i64 %549 to i64*
  store i64 %547, i64* %550, align 8
  store i64 %549, i64* %RSP, align 8, !tbaa !2428
  store i64 %546, i64* %PC, align 8, !tbaa !2428
  %551 = tail call %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* nonnull %0, i64 %546, %struct.Memory* %541)
  %552 = load i64, i64* %PC, align 8
  %553 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %553, i64* %RDI, align 8, !tbaa !2428
  %554 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %554, i64* %RSI, align 8, !tbaa !2428
  %555 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %555, i64* %RDX, align 8, !tbaa !2428
  %556 = add i64 %552, 3274
  %557 = add i64 %552, 29
  %558 = load i64, i64* %RSP, align 8, !tbaa !2428
  %559 = add i64 %558, -8
  %560 = inttoptr i64 %559 to i64*
  store i64 %557, i64* %560, align 8
  store i64 %559, i64* %RSP, align 8, !tbaa !2428
  store i64 %556, i64* %PC, align 8, !tbaa !2428
  %561 = tail call %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* nonnull %0, i64 %556, %struct.Memory* %551)
  %562 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 338), i64* %R8, align 8, !tbaa !2428
  %563 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %563, i64* %RDI, align 8, !tbaa !2428
  %564 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %564, i64* %RSI, align 8, !tbaa !2428
  %565 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %565, i64* %RDX, align 8, !tbaa !2428
  %566 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %566, i64* %RCX, align 8, !tbaa !2428
  %567 = load i64, i64* %RBP, align 8
  %568 = add i64 %567, -24
  %569 = add i64 %562, 47
  store i64 %569, i64* %PC, align 8
  %570 = inttoptr i64 %568 to i64*
  %571 = load i64, i64* %570, align 8
  store i64 %571, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %572 = add i64 %562, 3341
  %573 = add i64 %562, 52
  %574 = load i64, i64* %RSP, align 8, !tbaa !2428
  %575 = add i64 %574, -8
  %576 = inttoptr i64 %575 to i64*
  store i64 %573, i64* %576, align 8
  store i64 %575, i64* %RSP, align 8, !tbaa !2428
  store i64 %572, i64* %PC, align 8, !tbaa !2428
  %577 = tail call %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* nonnull %0, i64 %572, %struct.Memory* %561)
  %578 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 368), i64* %R8, align 8, !tbaa !2428
  %579 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %580 = load i64, i64* %RBP, align 8
  %581 = add i64 %580, -160
  %582 = add i64 %578, 25
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i64*
  store i64 %579, i64* %583, align 8
  %584 = load i64, i64* %PC, align 8
  %585 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %586 = load i64, i64* %RBP, align 8
  %587 = add i64 %586, -168
  %588 = add i64 %584, 15
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  store i64 %585, i64* %589, align 8
  %590 = load i64, i64* %PC, align 8
  %591 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %592 = load i64, i64* %RBP, align 8
  %593 = add i64 %592, -176
  %594 = add i64 %590, 15
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  store i64 %591, i64* %595, align 8
  %596 = load i64, i64* %PC, align 8
  %597 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %597, i64* %RCX, align 8, !tbaa !2428
  %598 = load i64, i64* %RBP, align 8
  %599 = add i64 %598, -184
  %600 = add i64 %596, 15
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i64*
  store i64 %597, i64* %601, align 8
  %602 = load i64, i64* %RBP, align 8
  %603 = add i64 %602, -24
  %604 = load i64, i64* %PC, align 8
  %605 = add i64 %604, 5
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %603 to i64*
  %607 = load i64, i64* %606, align 8
  store i64 %607, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %608 = add i64 %602, -160
  %609 = add i64 %604, 12
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i64*
  %611 = load i64, i64* %610, align 8
  store i64 %611, i64* %RDI, align 8, !tbaa !2428
  %612 = add i64 %602, -168
  %613 = add i64 %604, 19
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RSI, align 8, !tbaa !2428
  %616 = add i64 %602, -176
  %617 = add i64 %604, 26
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %616 to i64*
  %619 = load i64, i64* %618, align 8
  store i64 %619, i64* %RDX, align 8, !tbaa !2428
  %620 = add i64 %602, -184
  %621 = add i64 %604, 33
  store i64 %621, i64* %PC, align 8
  %622 = inttoptr i64 %620 to i64*
  %623 = load i64, i64* %622, align 8
  store i64 %623, i64* %RCX, align 8, !tbaa !2428
  %624 = add i64 %604, 3347
  %625 = add i64 %604, 38
  %626 = load i64, i64* %RSP, align 8, !tbaa !2428
  %627 = add i64 %626, -8
  %628 = inttoptr i64 %627 to i64*
  store i64 %625, i64* %628, align 8
  store i64 %627, i64* %RSP, align 8, !tbaa !2428
  store i64 %624, i64* %PC, align 8, !tbaa !2428
  %629 = tail call %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* nonnull %0, i64 %624, %struct.Memory* %577)
  %630 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 404), i64* %R8, align 8, !tbaa !2428
  %631 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %631, i64* %RDI, align 8, !tbaa !2428
  %632 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %632, i64* %RSI, align 8, !tbaa !2428
  %633 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %633, i64* %RDX, align 8, !tbaa !2428
  %634 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %634, i64* %RCX, align 8, !tbaa !2428
  %635 = load i64, i64* %RBP, align 8
  %636 = add i64 %635, -32
  %637 = add i64 %630, 46
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %636 to i64*
  %639 = load i64, i64* %638, align 8
  store i64 %639, i64* %R9, align 8, !tbaa !2428
  %640 = add i64 %635, -192
  %641 = add i64 %630, 53
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i64*
  store i64 %639, i64* %642, align 8
  %643 = load i64, i64* %RBP, align 8
  %644 = add i64 %643, -192
  %645 = load i64, i64* %PC, align 8
  %646 = add i64 %645, 8
  store i64 %646, i64* %PC, align 8
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647, align 8
  store i64 %648, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %649 = add i64 %645, 3432
  %650 = add i64 %645, 13
  %651 = load i64, i64* %RSP, align 8, !tbaa !2428
  %652 = add i64 %651, -8
  %653 = inttoptr i64 %652 to i64*
  store i64 %650, i64* %653, align 8
  store i64 %652, i64* %RSP, align 8, !tbaa !2428
  store i64 %649, i64* %PC, align 8, !tbaa !2428
  %654 = tail call %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* nonnull %0, i64 %649, %struct.Memory* %629)
  %655 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 446), i64* %R8, align 8, !tbaa !2428
  %656 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %657 = load i64, i64* %RBP, align 8
  %658 = add i64 %657, -200
  %659 = add i64 %655, 25
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %658 to i64*
  store i64 %656, i64* %660, align 8
  %661 = load i64, i64* %PC, align 8
  %662 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -208
  %665 = add i64 %661, 15
  store i64 %665, i64* %PC, align 8
  %666 = inttoptr i64 %664 to i64*
  store i64 %662, i64* %666, align 8
  %667 = load i64, i64* %PC, align 8
  %668 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %669 = load i64, i64* %RBP, align 8
  %670 = add i64 %669, -216
  %671 = add i64 %667, 15
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %670 to i64*
  store i64 %668, i64* %672, align 8
  %673 = load i64, i64* %PC, align 8
  %674 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %674, i64* %RCX, align 8, !tbaa !2428
  %675 = load i64, i64* %RBP, align 8
  %676 = add i64 %675, -224
  %677 = add i64 %673, 15
  store i64 %677, i64* %PC, align 8
  %678 = inttoptr i64 %676 to i64*
  store i64 %674, i64* %678, align 8
  %679 = load i64, i64* %RBP, align 8
  %680 = add i64 %679, -32
  %681 = load i64, i64* %PC, align 8
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683, align 8
  store i64 %684, i64* %RCX, align 8, !tbaa !2428
  %685 = add i64 %679, -232
  %686 = add i64 %681, 11
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i64*
  store i64 %684, i64* %687, align 8
  %688 = load i64, i64* %RBP, align 8
  %689 = add i64 %688, -200
  %690 = load i64, i64* %PC, align 8
  %691 = add i64 %690, 7
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %689 to i64*
  %693 = load i64, i64* %692, align 8
  store i64 %693, i64* %RDI, align 8, !tbaa !2428
  %694 = add i64 %688, -208
  %695 = add i64 %690, 14
  store i64 %695, i64* %PC, align 8
  %696 = inttoptr i64 %694 to i64*
  %697 = load i64, i64* %696, align 8
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = add i64 %688, -216
  %699 = add i64 %690, 21
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to i64*
  %701 = load i64, i64* %700, align 8
  store i64 %701, i64* %RDX, align 8, !tbaa !2428
  %702 = add i64 %688, -224
  %703 = add i64 %690, 28
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = add i64 %688, -232
  %707 = add i64 %690, 36
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i64*
  %709 = load i64, i64* %708, align 8
  store i64 %709, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %710 = add i64 %690, 3466
  %711 = add i64 %690, 41
  %712 = load i64, i64* %RSP, align 8, !tbaa !2428
  %713 = add i64 %712, -8
  %714 = inttoptr i64 %713 to i64*
  store i64 %711, i64* %714, align 8
  store i64 %713, i64* %RSP, align 8, !tbaa !2428
  store i64 %710, i64* %PC, align 8, !tbaa !2428
  %715 = tail call %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* nonnull %0, i64 %710, %struct.Memory* %654)
  %716 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 494), i64* %R8, align 8, !tbaa !2428
  %717 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %717, i64* %RDI, align 8, !tbaa !2428
  %718 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %718, i64* %RSI, align 8, !tbaa !2428
  %719 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %719, i64* %RDX, align 8, !tbaa !2428
  %720 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %720, i64* %RCX, align 8, !tbaa !2428
  %721 = load i64, i64* %RBP, align 8
  %722 = add i64 %721, -48
  %723 = add i64 %716, 46
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i64*
  %725 = load i64, i64* %724, align 8
  store i64 %725, i64* %R9, align 8, !tbaa !2428
  %726 = add i64 %721, -240
  %727 = add i64 %716, 53
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i64*
  store i64 %725, i64* %728, align 8
  %729 = load i64, i64* %RBP, align 8
  %730 = add i64 %729, -240
  %731 = load i64, i64* %PC, align 8
  %732 = add i64 %731, 8
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733, align 8
  store i64 %734, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %735 = add i64 %731, 3548
  %736 = add i64 %731, 13
  %737 = load i64, i64* %RSP, align 8, !tbaa !2428
  %738 = add i64 %737, -8
  %739 = inttoptr i64 %738 to i64*
  store i64 %736, i64* %739, align 8
  store i64 %738, i64* %RSP, align 8, !tbaa !2428
  store i64 %735, i64* %PC, align 8, !tbaa !2428
  %740 = tail call %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* nonnull %0, i64 %735, %struct.Memory* %715)
  %741 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 538), i64* %R8, align 8, !tbaa !2428
  %742 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %743 = load i64, i64* %RBP, align 8
  %744 = add i64 %743, -248
  %745 = add i64 %741, 25
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to i64*
  store i64 %742, i64* %746, align 8
  %747 = load i64, i64* %PC, align 8
  %748 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -256
  %751 = add i64 %747, 15
  store i64 %751, i64* %PC, align 8
  %752 = inttoptr i64 %750 to i64*
  store i64 %748, i64* %752, align 8
  %753 = load i64, i64* %PC, align 8
  %754 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %755 = load i64, i64* %RBP, align 8
  %756 = add i64 %755, -264
  %757 = add i64 %753, 15
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %756 to i64*
  store i64 %754, i64* %758, align 8
  %759 = load i64, i64* %PC, align 8
  %760 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %760, i64* %RCX, align 8, !tbaa !2428
  %761 = load i64, i64* %RBP, align 8
  %762 = add i64 %761, -272
  %763 = add i64 %759, 15
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %762 to i64*
  store i64 %760, i64* %764, align 8
  %765 = load i64, i64* %RBP, align 8
  %766 = add i64 %765, -48
  %767 = load i64, i64* %PC, align 8
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = add i64 %765, -280
  %772 = add i64 %767, 11
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to i64*
  store i64 %770, i64* %773, align 8
  %774 = load i64, i64* %RBP, align 8
  %775 = add i64 %774, -248
  %776 = load i64, i64* %PC, align 8
  %777 = add i64 %776, 7
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778, align 8
  store i64 %779, i64* %RDI, align 8, !tbaa !2428
  %780 = add i64 %774, -256
  %781 = add i64 %776, 14
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i64*
  %783 = load i64, i64* %782, align 8
  store i64 %783, i64* %RSI, align 8, !tbaa !2428
  %784 = add i64 %774, -264
  %785 = add i64 %776, 21
  store i64 %785, i64* %PC, align 8
  %786 = inttoptr i64 %784 to i64*
  %787 = load i64, i64* %786, align 8
  store i64 %787, i64* %RDX, align 8, !tbaa !2428
  %788 = add i64 %774, -272
  %789 = add i64 %776, 28
  store i64 %789, i64* %PC, align 8
  %790 = inttoptr i64 %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %RCX, align 8, !tbaa !2428
  %792 = add i64 %774, -280
  %793 = add i64 %776, 36
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %792 to i64*
  %795 = load i64, i64* %794, align 8
  store i64 %795, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %796 = add i64 %776, 3582
  %797 = add i64 %776, 41
  %798 = load i64, i64* %RSP, align 8, !tbaa !2428
  %799 = add i64 %798, -8
  %800 = inttoptr i64 %799 to i64*
  store i64 %797, i64* %800, align 8
  store i64 %799, i64* %RSP, align 8, !tbaa !2428
  store i64 %796, i64* %PC, align 8, !tbaa !2428
  %801 = tail call %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* nonnull %0, i64 %796, %struct.Memory* %740)
  %802 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 588), i64* %R8, align 8, !tbaa !2428
  %803 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %804 = shl i32 %803, 3
  %805 = zext i32 %804 to i64
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = lshr i32 %803, 29
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  store i8 %808, i8* %16, align 1, !tbaa !2432
  %809 = and i32 %804, 248
  %810 = tail call i32 @llvm.ctpop.i32(i32 %809) #9
  %811 = trunc i32 %810 to i8
  %812 = and i8 %811, 1
  %813 = xor i8 %812, 1
  store i8 %813, i8* %23, align 1, !tbaa !2432
  store i8 0, i8* %28, align 1, !tbaa !2432
  %814 = icmp eq i32 %804, 0
  %815 = zext i1 %814 to i8
  store i8 %815, i8* %31, align 1, !tbaa !2432
  %816 = lshr i32 %803, 28
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  store i8 %818, i8* %34, align 1, !tbaa !2432
  store i8 0, i8* %40, align 1, !tbaa !2432
  store i32 %804, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %819 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %819, i64* %RDI, align 8, !tbaa !2428
  %820 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %820, i64* %RSI, align 8, !tbaa !2428
  %821 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %821, i64* %RDX, align 8, !tbaa !2428
  %822 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = load i64, i64* %RBP, align 8
  %824 = add i64 %823, -24
  %825 = add i64 %802, 64
  store i64 %825, i64* %PC, align 8
  %826 = inttoptr i64 %824 to i64*
  %827 = load i64, i64* %826, align 8
  store i64 %827, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %828 = add i64 %802, 3717
  %829 = add i64 %802, 69
  %830 = load i64, i64* %RSP, align 8, !tbaa !2428
  %831 = add i64 %830, -8
  %832 = inttoptr i64 %831 to i64*
  store i64 %829, i64* %832, align 8
  store i64 %831, i64* %RSP, align 8, !tbaa !2428
  store i64 %828, i64* %PC, align 8, !tbaa !2428
  %833 = tail call %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* nonnull %0, i64 %828, %struct.Memory* %801)
  %834 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 613), i64* %R8, align 8, !tbaa !2428
  %835 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %836 = load i64, i64* %RBP, align 8
  %837 = add i64 %836, -288
  %838 = add i64 %834, 25
  store i64 %838, i64* %PC, align 8
  %839 = inttoptr i64 %837 to i64*
  store i64 %835, i64* %839, align 8
  %840 = load i64, i64* %PC, align 8
  %841 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %842 = load i64, i64* %RBP, align 8
  %843 = add i64 %842, -296
  %844 = add i64 %840, 15
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %843 to i64*
  store i64 %841, i64* %845, align 8
  %846 = load i64, i64* %PC, align 8
  %847 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %848 = load i64, i64* %RBP, align 8
  %849 = add i64 %848, -304
  %850 = add i64 %846, 15
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %849 to i64*
  store i64 %847, i64* %851, align 8
  %852 = load i64, i64* %PC, align 8
  %853 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %853, i64* %RCX, align 8, !tbaa !2428
  %854 = load i64, i64* %RBP, align 8
  %855 = add i64 %854, -312
  %856 = add i64 %852, 15
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i64*
  store i64 %853, i64* %857, align 8
  %858 = load i64, i64* %RBP, align 8
  %859 = add i64 %858, -24
  %860 = load i64, i64* %PC, align 8
  %861 = add i64 %860, 5
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %859 to i64*
  %863 = load i64, i64* %862, align 8
  store i64 %863, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %864 = add i64 %858, -288
  %865 = add i64 %860, 12
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RDI, align 8, !tbaa !2428
  %868 = add i64 %858, -296
  %869 = add i64 %860, 19
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RSI, align 8, !tbaa !2428
  %872 = add i64 %858, -304
  %873 = add i64 %860, 26
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  %875 = load i64, i64* %874, align 8
  store i64 %875, i64* %RDX, align 8, !tbaa !2428
  %876 = add i64 %858, -312
  %877 = add i64 %860, 33
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %RCX, align 8, !tbaa !2428
  %880 = add i64 %860, 3706
  %881 = add i64 %860, 38
  %882 = load i64, i64* %RSP, align 8, !tbaa !2428
  %883 = add i64 %882, -8
  %884 = inttoptr i64 %883 to i64*
  store i64 %881, i64* %884, align 8
  store i64 %883, i64* %RSP, align 8, !tbaa !2428
  store i64 %880, i64* %PC, align 8, !tbaa !2428
  %885 = tail call %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* nonnull %0, i64 %880, %struct.Memory* %833)
  %886 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 644), i64* %R8, align 8, !tbaa !2428
  %887 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %887, i64* %RDI, align 8, !tbaa !2428
  %888 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %888, i64* %RSI, align 8, !tbaa !2428
  %889 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %889, i64* %RDX, align 8, !tbaa !2428
  %890 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %890, i64* %RCX, align 8, !tbaa !2428
  %891 = load i64, i64* %RBP, align 8
  %892 = add i64 %891, -32
  %893 = add i64 %886, 46
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %892 to i64*
  %895 = load i64, i64* %894, align 8
  store i64 %895, i64* %R9, align 8, !tbaa !2428
  %896 = add i64 %891, -320
  %897 = add i64 %886, 53
  store i64 %897, i64* %PC, align 8
  %898 = inttoptr i64 %896 to i64*
  store i64 %895, i64* %898, align 8
  %899 = load i64, i64* %RBP, align 8
  %900 = add i64 %899, -320
  %901 = load i64, i64* %PC, align 8
  %902 = add i64 %901, 8
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %900 to i64*
  %904 = load i64, i64* %903, align 8
  store i64 %904, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %905 = add i64 %901, 3791
  %906 = add i64 %901, 13
  %907 = load i64, i64* %RSP, align 8, !tbaa !2428
  %908 = add i64 %907, -8
  %909 = inttoptr i64 %908 to i64*
  store i64 %906, i64* %909, align 8
  store i64 %908, i64* %RSP, align 8, !tbaa !2428
  store i64 %905, i64* %PC, align 8, !tbaa !2428
  %910 = tail call %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* nonnull %0, i64 %905, %struct.Memory* %885)
  %911 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 681), i64* %R8, align 8, !tbaa !2428
  %912 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -328
  %915 = add i64 %911, 25
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %914 to i64*
  store i64 %912, i64* %916, align 8
  %917 = load i64, i64* %PC, align 8
  %918 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %919 = load i64, i64* %RBP, align 8
  %920 = add i64 %919, -336
  %921 = add i64 %917, 15
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i64*
  store i64 %918, i64* %922, align 8
  %923 = load i64, i64* %PC, align 8
  %924 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %925 = load i64, i64* %RBP, align 8
  %926 = add i64 %925, -344
  %927 = add i64 %923, 15
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %926 to i64*
  store i64 %924, i64* %928, align 8
  %929 = load i64, i64* %PC, align 8
  %930 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %930, i64* %RCX, align 8, !tbaa !2428
  %931 = load i64, i64* %RBP, align 8
  %932 = add i64 %931, -352
  %933 = add i64 %929, 15
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %932 to i64*
  store i64 %930, i64* %934, align 8
  %935 = load i64, i64* %RBP, align 8
  %936 = add i64 %935, -32
  %937 = load i64, i64* %PC, align 8
  %938 = add i64 %937, 4
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %936 to i64*
  %940 = load i64, i64* %939, align 8
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %941 = add i64 %935, -360
  %942 = add i64 %937, 11
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to i64*
  store i64 %940, i64* %943, align 8
  %944 = load i64, i64* %RBP, align 8
  %945 = add i64 %944, -328
  %946 = load i64, i64* %PC, align 8
  %947 = add i64 %946, 7
  store i64 %947, i64* %PC, align 8
  %948 = inttoptr i64 %945 to i64*
  %949 = load i64, i64* %948, align 8
  store i64 %949, i64* %RDI, align 8, !tbaa !2428
  %950 = add i64 %944, -336
  %951 = add i64 %946, 14
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RSI, align 8, !tbaa !2428
  %954 = add i64 %944, -344
  %955 = add i64 %946, 21
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to i64*
  %957 = load i64, i64* %956, align 8
  store i64 %957, i64* %RDX, align 8, !tbaa !2428
  %958 = add i64 %944, -352
  %959 = add i64 %946, 28
  store i64 %959, i64* %PC, align 8
  %960 = inttoptr i64 %958 to i64*
  %961 = load i64, i64* %960, align 8
  store i64 %961, i64* %RCX, align 8, !tbaa !2428
  %962 = add i64 %944, -360
  %963 = add i64 %946, 36
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %962 to i64*
  %965 = load i64, i64* %964, align 8
  store i64 %965, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %966 = add i64 %946, 3825
  %967 = add i64 %946, 41
  %968 = load i64, i64* %RSP, align 8, !tbaa !2428
  %969 = add i64 %968, -8
  %970 = inttoptr i64 %969 to i64*
  store i64 %967, i64* %970, align 8
  store i64 %969, i64* %RSP, align 8, !tbaa !2428
  store i64 %966, i64* %PC, align 8, !tbaa !2428
  %971 = tail call %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* nonnull %0, i64 %966, %struct.Memory* %910)
  %972 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 724), i64* %R8, align 8, !tbaa !2428
  %973 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %973, i64* %RDI, align 8, !tbaa !2428
  %974 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %974, i64* %RSI, align 8, !tbaa !2428
  %975 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %975, i64* %RDX, align 8, !tbaa !2428
  %976 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %976, i64* %RCX, align 8, !tbaa !2428
  %977 = load i64, i64* %RBP, align 8
  %978 = add i64 %977, -48
  %979 = add i64 %972, 46
  store i64 %979, i64* %PC, align 8
  %980 = inttoptr i64 %978 to i64*
  %981 = load i64, i64* %980, align 8
  store i64 %981, i64* %R9, align 8, !tbaa !2428
  %982 = add i64 %977, -368
  %983 = add i64 %972, 53
  store i64 %983, i64* %PC, align 8
  %984 = inttoptr i64 %982 to i64*
  store i64 %981, i64* %984, align 8
  %985 = load i64, i64* %RBP, align 8
  %986 = add i64 %985, -368
  %987 = load i64, i64* %PC, align 8
  %988 = add i64 %987, 8
  store i64 %988, i64* %PC, align 8
  %989 = inttoptr i64 %986 to i64*
  %990 = load i64, i64* %989, align 8
  store i64 %990, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %991 = add i64 %987, 3907
  %992 = add i64 %987, 13
  %993 = load i64, i64* %RSP, align 8, !tbaa !2428
  %994 = add i64 %993, -8
  %995 = inttoptr i64 %994 to i64*
  store i64 %992, i64* %995, align 8
  store i64 %994, i64* %RSP, align 8, !tbaa !2428
  store i64 %991, i64* %PC, align 8, !tbaa !2428
  %996 = tail call %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* nonnull %0, i64 %991, %struct.Memory* %971)
  %997 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 763), i64* %R8, align 8, !tbaa !2428
  %998 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %999 = load i64, i64* %RBP, align 8
  %1000 = add i64 %999, -376
  %1001 = add i64 %997, 25
  store i64 %1001, i64* %PC, align 8
  %1002 = inttoptr i64 %1000 to i64*
  store i64 %998, i64* %1002, align 8
  %1003 = load i64, i64* %PC, align 8
  %1004 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %1005 = load i64, i64* %RBP, align 8
  %1006 = add i64 %1005, -384
  %1007 = add i64 %1003, 15
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i64*
  store i64 %1004, i64* %1008, align 8
  %1009 = load i64, i64* %PC, align 8
  %1010 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -392
  %1013 = add i64 %1009, 15
  store i64 %1013, i64* %PC, align 8
  %1014 = inttoptr i64 %1012 to i64*
  store i64 %1010, i64* %1014, align 8
  %1015 = load i64, i64* %PC, align 8
  %1016 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %1016, i64* %RCX, align 8, !tbaa !2428
  %1017 = load i64, i64* %RBP, align 8
  %1018 = add i64 %1017, -400
  %1019 = add i64 %1015, 15
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i64*
  store i64 %1016, i64* %1020, align 8
  %1021 = load i64, i64* %RBP, align 8
  %1022 = add i64 %1021, -48
  %1023 = load i64, i64* %PC, align 8
  %1024 = add i64 %1023, 4
  store i64 %1024, i64* %PC, align 8
  %1025 = inttoptr i64 %1022 to i64*
  %1026 = load i64, i64* %1025, align 8
  store i64 %1026, i64* %RCX, align 8, !tbaa !2428
  %1027 = add i64 %1021, -408
  %1028 = add i64 %1023, 11
  store i64 %1028, i64* %PC, align 8
  %1029 = inttoptr i64 %1027 to i64*
  store i64 %1026, i64* %1029, align 8
  %1030 = load i64, i64* %RBP, align 8
  %1031 = add i64 %1030, -376
  %1032 = load i64, i64* %PC, align 8
  %1033 = add i64 %1032, 7
  store i64 %1033, i64* %PC, align 8
  %1034 = inttoptr i64 %1031 to i64*
  %1035 = load i64, i64* %1034, align 8
  store i64 %1035, i64* %RDI, align 8, !tbaa !2428
  %1036 = add i64 %1030, -384
  %1037 = add i64 %1032, 14
  store i64 %1037, i64* %PC, align 8
  %1038 = inttoptr i64 %1036 to i64*
  %1039 = load i64, i64* %1038, align 8
  store i64 %1039, i64* %RSI, align 8, !tbaa !2428
  %1040 = add i64 %1030, -392
  %1041 = add i64 %1032, 21
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i64*
  %1043 = load i64, i64* %1042, align 8
  store i64 %1043, i64* %RDX, align 8, !tbaa !2428
  %1044 = add i64 %1030, -400
  %1045 = add i64 %1032, 28
  store i64 %1045, i64* %PC, align 8
  %1046 = inttoptr i64 %1044 to i64*
  %1047 = load i64, i64* %1046, align 8
  store i64 %1047, i64* %RCX, align 8, !tbaa !2428
  %1048 = add i64 %1030, -408
  %1049 = add i64 %1032, 36
  store i64 %1049, i64* %PC, align 8
  %1050 = inttoptr i64 %1048 to i64*
  %1051 = load i64, i64* %1050, align 8
  store i64 %1051, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1052 = add i64 %1032, 3941
  %1053 = add i64 %1032, 41
  %1054 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1055 = add i64 %1054, -8
  %1056 = inttoptr i64 %1055 to i64*
  store i64 %1053, i64* %1056, align 8
  store i64 %1055, i64* %RSP, align 8, !tbaa !2428
  store i64 %1052, i64* %PC, align 8, !tbaa !2428
  %1057 = tail call %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* nonnull %0, i64 %1052, %struct.Memory* %996)
  %1058 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 808), i64* %R8, align 8, !tbaa !2428
  %1059 = load i64, i64* getelementptr inbounds (%dMpb_type, %dMpb_type* @dMpb, i64 0, i32 0), align 8
  store i64 %1059, i64* %RDI, align 8, !tbaa !2428
  %1060 = load i64, i64* getelementptr inbounds (%dMpe_type, %dMpe_type* @dMpe, i64 0, i32 0), align 8
  store i64 %1060, i64* %RSI, align 8, !tbaa !2428
  %1061 = load i64, i64* getelementptr inbounds (%dpb_type, %dpb_type* @dpb, i64 0, i32 0), align 8
  store i64 %1061, i64* %RDX, align 8, !tbaa !2428
  %1062 = load i64, i64* getelementptr inbounds (%dpe_type, %dpe_type* @dpe, i64 0, i32 0), align 8
  store i64 %1062, i64* %RCX, align 8, !tbaa !2428
  %1063 = load i64, i64* %RBP, align 8
  %1064 = add i64 %1063, -24
  %1065 = add i64 %1058, 47
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1068 = add i64 %1058, 4076
  %1069 = add i64 %1058, 52
  %1070 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1071 = add i64 %1070, -8
  %1072 = inttoptr i64 %1071 to i64*
  store i64 %1069, i64* %1072, align 8
  store i64 %1071, i64* %RSP, align 8, !tbaa !2428
  store i64 %1068, i64* %PC, align 8, !tbaa !2428
  %1073 = tail call %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* nonnull %0, i64 %1068, %struct.Memory* %1057)
  %1074 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 833), i64* %R8, align 8, !tbaa !2428
  %1075 = load i64, i64* bitcast (%dMPb_type* @dMPb to i64*), align 8
  %1076 = load i64, i64* %RBP, align 8
  %1077 = add i64 %1076, -416
  %1078 = add i64 %1074, 25
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i64*
  store i64 %1075, i64* %1079, align 8
  %1080 = load i64, i64* %PC, align 8
  %1081 = load i64, i64* bitcast (%dMPe_type* @dMPe to i64*), align 8
  %1082 = load i64, i64* %RBP, align 8
  %1083 = add i64 %1082, -424
  %1084 = add i64 %1080, 15
  store i64 %1084, i64* %PC, align 8
  %1085 = inttoptr i64 %1083 to i64*
  store i64 %1081, i64* %1085, align 8
  %1086 = load i64, i64* %PC, align 8
  %1087 = load i64, i64* bitcast (%dPb_type* @dPb to i64*), align 8
  %1088 = load i64, i64* %RBP, align 8
  %1089 = add i64 %1088, -432
  %1090 = add i64 %1086, 15
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to i64*
  store i64 %1087, i64* %1091, align 8
  %1092 = load i64, i64* %PC, align 8
  %1093 = load i64, i64* bitcast (%dPe_type* @dPe to i64*), align 8
  store i64 %1093, i64* %RCX, align 8, !tbaa !2428
  %1094 = load i64, i64* %RBP, align 8
  %1095 = add i64 %1094, -440
  %1096 = add i64 %1092, 15
  store i64 %1096, i64* %PC, align 8
  %1097 = inttoptr i64 %1095 to i64*
  store i64 %1093, i64* %1097, align 8
  %1098 = load i64, i64* %RBP, align 8
  %1099 = add i64 %1098, -24
  %1100 = load i64, i64* %PC, align 8
  %1101 = add i64 %1100, 5
  store i64 %1101, i64* %PC, align 8
  %1102 = inttoptr i64 %1099 to i64*
  %1103 = load i64, i64* %1102, align 8
  store i64 %1103, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1104 = add i64 %1098, -416
  %1105 = add i64 %1100, 12
  store i64 %1105, i64* %PC, align 8
  %1106 = inttoptr i64 %1104 to i64*
  %1107 = load i64, i64* %1106, align 8
  store i64 %1107, i64* %RDI, align 8, !tbaa !2428
  %1108 = add i64 %1098, -424
  %1109 = add i64 %1100, 19
  store i64 %1109, i64* %PC, align 8
  %1110 = inttoptr i64 %1108 to i64*
  %1111 = load i64, i64* %1110, align 8
  store i64 %1111, i64* %RSI, align 8, !tbaa !2428
  %1112 = add i64 %1098, -432
  %1113 = add i64 %1100, 26
  store i64 %1113, i64* %PC, align 8
  %1114 = inttoptr i64 %1112 to i64*
  %1115 = load i64, i64* %1114, align 8
  store i64 %1115, i64* %RDX, align 8, !tbaa !2428
  %1116 = add i64 %1098, -440
  %1117 = add i64 %1100, 33
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1116 to i64*
  %1119 = load i64, i64* %1118, align 8
  store i64 %1119, i64* %RCX, align 8, !tbaa !2428
  %1120 = add i64 %1100, 4082
  %1121 = add i64 %1100, 38
  %1122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1123 = add i64 %1122, -8
  %1124 = inttoptr i64 %1123 to i64*
  store i64 %1121, i64* %1124, align 8
  store i64 %1123, i64* %RSP, align 8, !tbaa !2428
  store i64 %1120, i64* %PC, align 8, !tbaa !2428
  %1125 = tail call %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* nonnull %0, i64 %1120, %struct.Memory* %1073)
  %1126 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 864), i64* %R8, align 8, !tbaa !2428
  %1127 = load i64, i64* getelementptr inbounds (%DVMpb_type, %DVMpb_type* @DVMpb, i64 0, i32 0), align 8
  store i64 %1127, i64* %RDI, align 8, !tbaa !2428
  %1128 = load i64, i64* getelementptr inbounds (%DVMpe_type, %DVMpe_type* @DVMpe, i64 0, i32 0), align 8
  store i64 %1128, i64* %RSI, align 8, !tbaa !2428
  %1129 = load i64, i64* getelementptr inbounds (%DVpb_type, %DVpb_type* @DVpb, i64 0, i32 0), align 8
  store i64 %1129, i64* %RDX, align 8, !tbaa !2428
  %1130 = load i64, i64* getelementptr inbounds (%DVpe_type, %DVpe_type* @DVpe, i64 0, i32 0), align 8
  store i64 %1130, i64* %RCX, align 8, !tbaa !2428
  %1131 = load i64, i64* %RBP, align 8
  %1132 = add i64 %1131, -32
  %1133 = add i64 %1126, 46
  store i64 %1133, i64* %PC, align 8
  %1134 = inttoptr i64 %1132 to i64*
  %1135 = load i64, i64* %1134, align 8
  store i64 %1135, i64* %R9, align 8, !tbaa !2428
  %1136 = add i64 %1131, -448
  %1137 = add i64 %1126, 53
  store i64 %1137, i64* %PC, align 8
  %1138 = inttoptr i64 %1136 to i64*
  store i64 %1135, i64* %1138, align 8
  %1139 = load i64, i64* %RBP, align 8
  %1140 = add i64 %1139, -448
  %1141 = load i64, i64* %PC, align 8
  %1142 = add i64 %1141, 8
  store i64 %1142, i64* %PC, align 8
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143, align 8
  store i64 %1144, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1145 = add i64 %1141, 4167
  %1146 = add i64 %1141, 13
  %1147 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1148 = add i64 %1147, -8
  %1149 = inttoptr i64 %1148 to i64*
  store i64 %1146, i64* %1149, align 8
  store i64 %1148, i64* %RSP, align 8, !tbaa !2428
  store i64 %1145, i64* %PC, align 8, !tbaa !2428
  %1150 = tail call %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* nonnull %0, i64 %1145, %struct.Memory* %1125)
  %1151 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 901), i64* %R8, align 8, !tbaa !2428
  %1152 = load i64, i64* bitcast (%DVMPb_type* @DVMPb to i64*), align 8
  %1153 = load i64, i64* %RBP, align 8
  %1154 = add i64 %1153, -456
  %1155 = add i64 %1151, 25
  store i64 %1155, i64* %PC, align 8
  %1156 = inttoptr i64 %1154 to i64*
  store i64 %1152, i64* %1156, align 8
  %1157 = load i64, i64* %PC, align 8
  %1158 = load i64, i64* bitcast (%DVMPe_type* @DVMPe to i64*), align 8
  %1159 = load i64, i64* %RBP, align 8
  %1160 = add i64 %1159, -464
  %1161 = add i64 %1157, 15
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1160 to i64*
  store i64 %1158, i64* %1162, align 8
  %1163 = load i64, i64* %PC, align 8
  %1164 = load i64, i64* bitcast (%DVPb_type* @DVPb to i64*), align 8
  %1165 = load i64, i64* %RBP, align 8
  %1166 = add i64 %1165, -472
  %1167 = add i64 %1163, 15
  store i64 %1167, i64* %PC, align 8
  %1168 = inttoptr i64 %1166 to i64*
  store i64 %1164, i64* %1168, align 8
  %1169 = load i64, i64* %PC, align 8
  %1170 = load i64, i64* bitcast (%DVPe_type* @DVPe to i64*), align 8
  store i64 %1170, i64* %RCX, align 8, !tbaa !2428
  %1171 = load i64, i64* %RBP, align 8
  %1172 = add i64 %1171, -480
  %1173 = add i64 %1169, 15
  store i64 %1173, i64* %PC, align 8
  %1174 = inttoptr i64 %1172 to i64*
  store i64 %1170, i64* %1174, align 8
  %1175 = load i64, i64* %RBP, align 8
  %1176 = add i64 %1175, -32
  %1177 = load i64, i64* %PC, align 8
  %1178 = add i64 %1177, 4
  store i64 %1178, i64* %PC, align 8
  %1179 = inttoptr i64 %1176 to i64*
  %1180 = load i64, i64* %1179, align 8
  store i64 %1180, i64* %RCX, align 8, !tbaa !2428
  %1181 = add i64 %1175, -488
  %1182 = add i64 %1177, 11
  store i64 %1182, i64* %PC, align 8
  %1183 = inttoptr i64 %1181 to i64*
  store i64 %1180, i64* %1183, align 8
  %1184 = load i64, i64* %RBP, align 8
  %1185 = add i64 %1184, -456
  %1186 = load i64, i64* %PC, align 8
  %1187 = add i64 %1186, 7
  store i64 %1187, i64* %PC, align 8
  %1188 = inttoptr i64 %1185 to i64*
  %1189 = load i64, i64* %1188, align 8
  store i64 %1189, i64* %RDI, align 8, !tbaa !2428
  %1190 = add i64 %1184, -464
  %1191 = add i64 %1186, 14
  store i64 %1191, i64* %PC, align 8
  %1192 = inttoptr i64 %1190 to i64*
  %1193 = load i64, i64* %1192, align 8
  store i64 %1193, i64* %RSI, align 8, !tbaa !2428
  %1194 = add i64 %1184, -472
  %1195 = add i64 %1186, 21
  store i64 %1195, i64* %PC, align 8
  %1196 = inttoptr i64 %1194 to i64*
  %1197 = load i64, i64* %1196, align 8
  store i64 %1197, i64* %RDX, align 8, !tbaa !2428
  %1198 = add i64 %1184, -480
  %1199 = add i64 %1186, 28
  store i64 %1199, i64* %PC, align 8
  %1200 = inttoptr i64 %1198 to i64*
  %1201 = load i64, i64* %1200, align 8
  store i64 %1201, i64* %RCX, align 8, !tbaa !2428
  %1202 = add i64 %1184, -488
  %1203 = add i64 %1186, 36
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1202 to i64*
  %1205 = load i64, i64* %1204, align 8
  store i64 %1205, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1206 = add i64 %1186, 4201
  %1207 = add i64 %1186, 41
  %1208 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1209 = add i64 %1208, -8
  %1210 = inttoptr i64 %1209 to i64*
  store i64 %1207, i64* %1210, align 8
  store i64 %1209, i64* %RSP, align 8, !tbaa !2428
  store i64 %1206, i64* %PC, align 8, !tbaa !2428
  %1211 = tail call %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* nonnull %0, i64 %1206, %struct.Memory* %1150)
  %1212 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 944), i64* %R8, align 8, !tbaa !2428
  %1213 = load i64, i64* getelementptr inbounds (%DV10Mpb_type, %DV10Mpb_type* @DV10Mpb, i64 0, i32 0), align 8
  store i64 %1213, i64* %RDI, align 8, !tbaa !2428
  %1214 = load i64, i64* getelementptr inbounds (%DV10Mpe_type, %DV10Mpe_type* @DV10Mpe, i64 0, i32 0), align 8
  store i64 %1214, i64* %RSI, align 8, !tbaa !2428
  %1215 = load i64, i64* getelementptr inbounds (%DV10pb_type, %DV10pb_type* @DV10pb, i64 0, i32 0), align 8
  store i64 %1215, i64* %RDX, align 8, !tbaa !2428
  %1216 = load i64, i64* getelementptr inbounds (%DV10pe_type, %DV10pe_type* @DV10pe, i64 0, i32 0), align 8
  store i64 %1216, i64* %RCX, align 8, !tbaa !2428
  %1217 = load i64, i64* %RBP, align 8
  %1218 = add i64 %1217, -48
  %1219 = add i64 %1212, 46
  store i64 %1219, i64* %PC, align 8
  %1220 = inttoptr i64 %1218 to i64*
  %1221 = load i64, i64* %1220, align 8
  store i64 %1221, i64* %R9, align 8, !tbaa !2428
  %1222 = add i64 %1217, -496
  %1223 = add i64 %1212, 53
  store i64 %1223, i64* %PC, align 8
  %1224 = inttoptr i64 %1222 to i64*
  store i64 %1221, i64* %1224, align 8
  %1225 = load i64, i64* %RBP, align 8
  %1226 = add i64 %1225, -496
  %1227 = load i64, i64* %PC, align 8
  %1228 = add i64 %1227, 8
  store i64 %1228, i64* %PC, align 8
  %1229 = inttoptr i64 %1226 to i64*
  %1230 = load i64, i64* %1229, align 8
  store i64 %1230, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1231 = add i64 %1227, 4283
  %1232 = add i64 %1227, 13
  %1233 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1234 = add i64 %1233, -8
  %1235 = inttoptr i64 %1234 to i64*
  store i64 %1232, i64* %1235, align 8
  store i64 %1234, i64* %RSP, align 8, !tbaa !2428
  store i64 %1231, i64* %PC, align 8, !tbaa !2428
  %1236 = tail call %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* nonnull %0, i64 %1231, %struct.Memory* %1211)
  %1237 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 983), i64* %R8, align 8, !tbaa !2428
  %1238 = load i64, i64* bitcast (%DV10MPb_type* @DV10MPb to i64*), align 8
  %1239 = load i64, i64* %RBP, align 8
  %1240 = add i64 %1239, -504
  %1241 = add i64 %1237, 25
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i64*
  store i64 %1238, i64* %1242, align 8
  %1243 = load i64, i64* %PC, align 8
  %1244 = load i64, i64* bitcast (%DV10MPe_type* @DV10MPe to i64*), align 8
  %1245 = load i64, i64* %RBP, align 8
  %1246 = add i64 %1245, -512
  %1247 = add i64 %1243, 15
  store i64 %1247, i64* %PC, align 8
  %1248 = inttoptr i64 %1246 to i64*
  store i64 %1244, i64* %1248, align 8
  %1249 = load i64, i64* %PC, align 8
  %1250 = load i64, i64* bitcast (%DV10Pb_type* @DV10Pb to i64*), align 8
  %1251 = load i64, i64* %RBP, align 8
  %1252 = add i64 %1251, -520
  %1253 = add i64 %1249, 15
  store i64 %1253, i64* %PC, align 8
  %1254 = inttoptr i64 %1252 to i64*
  store i64 %1250, i64* %1254, align 8
  %1255 = load i64, i64* %PC, align 8
  %1256 = load i64, i64* bitcast (%DV10Pe_type* @DV10Pe to i64*), align 8
  store i64 %1256, i64* %RCX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RBP, align 8
  %1258 = add i64 %1257, -528
  %1259 = add i64 %1255, 15
  store i64 %1259, i64* %PC, align 8
  %1260 = inttoptr i64 %1258 to i64*
  store i64 %1256, i64* %1260, align 8
  %1261 = load i64, i64* %RBP, align 8
  %1262 = add i64 %1261, -48
  %1263 = load i64, i64* %PC, align 8
  %1264 = add i64 %1263, 4
  store i64 %1264, i64* %PC, align 8
  %1265 = inttoptr i64 %1262 to i64*
  %1266 = load i64, i64* %1265, align 8
  store i64 %1266, i64* %RCX, align 8, !tbaa !2428
  %1267 = add i64 %1261, -536
  %1268 = add i64 %1263, 11
  store i64 %1268, i64* %PC, align 8
  %1269 = inttoptr i64 %1267 to i64*
  store i64 %1266, i64* %1269, align 8
  %1270 = load i64, i64* %RBP, align 8
  %1271 = add i64 %1270, -504
  %1272 = load i64, i64* %PC, align 8
  %1273 = add i64 %1272, 7
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1271 to i64*
  %1275 = load i64, i64* %1274, align 8
  store i64 %1275, i64* %RDI, align 8, !tbaa !2428
  %1276 = add i64 %1270, -512
  %1277 = add i64 %1272, 14
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1276 to i64*
  %1279 = load i64, i64* %1278, align 8
  store i64 %1279, i64* %RSI, align 8, !tbaa !2428
  %1280 = add i64 %1270, -520
  %1281 = add i64 %1272, 21
  store i64 %1281, i64* %PC, align 8
  %1282 = inttoptr i64 %1280 to i64*
  %1283 = load i64, i64* %1282, align 8
  store i64 %1283, i64* %RDX, align 8, !tbaa !2428
  %1284 = add i64 %1270, -528
  %1285 = add i64 %1272, 28
  store i64 %1285, i64* %PC, align 8
  %1286 = inttoptr i64 %1284 to i64*
  %1287 = load i64, i64* %1286, align 8
  store i64 %1287, i64* %RCX, align 8, !tbaa !2428
  %1288 = add i64 %1270, -536
  %1289 = add i64 %1272, 36
  store i64 %1289, i64* %PC, align 8
  %1290 = inttoptr i64 %1288 to i64*
  %1291 = load i64, i64* %1290, align 8
  store i64 %1291, i64* %64, align 1, !tbaa !2452
  store double 0.000000e+00, double* %234, align 1, !tbaa !2452
  %1292 = add i64 %1272, 4317
  %1293 = add i64 %1272, 41
  %1294 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1295 = add i64 %1294, -8
  %1296 = inttoptr i64 %1295 to i64*
  store i64 %1293, i64* %1296, align 8
  store i64 %1295, i64* %RSP, align 8, !tbaa !2428
  store i64 %1292, i64* %PC, align 8, !tbaa !2428
  %1297 = tail call %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* nonnull %0, i64 %1292, %struct.Memory* %1236)
  %1298 = load i64, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %1299 = load i64, i64* %RSP, align 8
  %1300 = add i64 %1299, 576
  store i64 %1300, i64* %RSP, align 8, !tbaa !2428
  %1301 = icmp ugt i64 %1299, -577
  %1302 = zext i1 %1301 to i8
  store i8 %1302, i8* %16, align 1, !tbaa !2433
  %1303 = trunc i64 %1300 to i32
  %1304 = and i32 %1303, 255
  %1305 = tail call i32 @llvm.ctpop.i32(i32 %1304) #9
  %1306 = trunc i32 %1305 to i8
  %1307 = and i8 %1306, 1
  %1308 = xor i8 %1307, 1
  store i8 %1308, i8* %23, align 1, !tbaa !2447
  %1309 = xor i64 %1300, %1299
  %1310 = lshr i64 %1309, 4
  %1311 = trunc i64 %1310 to i8
  %1312 = and i8 %1311, 1
  store i8 %1312, i8* %28, align 1, !tbaa !2448
  %1313 = icmp eq i64 %1300, 0
  %1314 = zext i1 %1313 to i8
  store i8 %1314, i8* %31, align 1, !tbaa !2449
  %1315 = lshr i64 %1300, 63
  %1316 = trunc i64 %1315 to i8
  store i8 %1316, i8* %34, align 1, !tbaa !2450
  %1317 = lshr i64 %1299, 63
  %1318 = xor i64 %1315, %1317
  %1319 = add nuw nsw i64 %1318, %1315
  %1320 = icmp eq i64 %1319, 2
  %1321 = zext i1 %1320 to i8
  store i8 %1321, i8* %40, align 1, !tbaa !2451
  %1322 = add i64 %1298, 10
  store i64 %1322, i64* %PC, align 8
  %1323 = add i64 %1299, 584
  %1324 = inttoptr i64 %1300 to i64*
  %1325 = load i64, i64* %1324, align 8
  store i64 %1325, i64* %RBP, align 8, !tbaa !2428
  store i64 %1323, i64* %RSP, align 8, !tbaa !2428
  %1326 = add i64 %1298, 11
  store i64 %1326, i64* %PC, align 8
  %1327 = inttoptr i64 %1323 to i64*
  %1328 = load i64, i64* %1327, align 8
  store i64 %1328, i64* %PC, align 8, !tbaa !2428
  %1329 = add i64 %1299, 592
  store i64 %1329, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1297
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_403080:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %16, 7
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %RAX, align 8, !tbaa !2428
  %23 = add i64 %16, 8
  store i64 %23, i64* %PC, align 8
  %24 = load i64, i64* %5, align 8, !tbaa !2428
  %25 = add i64 %24, 8
  %26 = inttoptr i64 %24 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %RBP, align 8, !tbaa !2428
  store i64 %25, i64* %5, align 8, !tbaa !2428
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %PC, align 8, !tbaa !2428
  %31 = add i64 %24, 16
  store i64 %31, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_405c70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i64, i64* %RDI, align 8
  %16 = add i64 %13, 7
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i64*
  store i64 %15, i64* %17, align 8
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RSI, align 8, !tbaa !2428
  %30 = add i64 %24, -24
  %31 = add i64 %26, 8
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %30 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -24
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %34 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 8
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ugt i64 %38, -9
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2433
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2447
  %50 = xor i64 %39, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %38, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %58
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2451
  %67 = add i64 %35, 12
  store i64 %67, i64* %PC, align 8
  store i64 %39, i64* %37, align 8
  %68 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %70 = bitcast i64* %69 to double*
  %71 = bitcast [32 x %union.VectorReg]* %6 to double*
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %74 = bitcast i64* %73 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_405c90

block_405cbb:                                     ; preds = %block_405d03, %block_405c9e
  %75 = phi i64 [ %.pre5, %block_405c9e ], [ %280, %block_405d03 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_405c9e ], [ %MEMORY.1, %block_405d03 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %42, align 1, !tbaa !2433
  store i8 1, i8* %49, align 1, !tbaa !2447
  store i8 1, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %60, align 1, !tbaa !2450
  store i8 0, i8* %66, align 1, !tbaa !2451
  store i8 0, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %CL, align 1, !tbaa !2432
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -40
  %78 = add i64 %75, 8
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = add i64 %76, -8
  %82 = add i64 %75, 12
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %80, %84
  %86 = icmp ult i64 %80, %84
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %42, align 1, !tbaa !2433
  %88 = trunc i64 %85 to i32
  %89 = and i32 %88, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %49, align 1, !tbaa !2447
  %94 = xor i64 %84, %80
  %95 = xor i64 %94, %85
  %96 = lshr i64 %95, 4
  %97 = trunc i64 %96 to i8
  %98 = and i8 %97, 1
  store i8 %98, i8* %54, align 1, !tbaa !2448
  %99 = icmp eq i64 %85, 0
  %100 = zext i1 %99 to i8
  store i8 %100, i8* %57, align 1, !tbaa !2449
  %101 = lshr i64 %85, 63
  %102 = trunc i64 %101 to i8
  store i8 %102, i8* %60, align 1, !tbaa !2450
  %103 = lshr i64 %80, 63
  %104 = lshr i64 %84, 63
  %105 = xor i64 %104, %103
  %106 = xor i64 %101, %103
  %107 = add nuw nsw i64 %106, %105
  %108 = icmp eq i64 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %66, align 1, !tbaa !2451
  %110 = add i64 %76, -49
  %111 = add i64 %75, 15
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i8*
  store i8 0, i8* %112, align 1
  %113 = load i64, i64* %PC, align 8
  %114 = load i8, i8* %57, align 1, !tbaa !2449
  %115 = icmp ne i8 %114, 0
  %.v11 = select i1 %115, i64 41, i64 6
  %116 = add i64 %113, %.v11
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  %117 = icmp eq i8 %114, 1
  br i1 %117, label %block_405cf3, label %block_405cd0

block_405c9e:                                     ; preds = %block_405c90
  %118 = add i64 %234, 4
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %203, align 8
  store i64 %119, i64* %RAX, align 8, !tbaa !2428
  %120 = add i64 %234, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %68, align 1, !tbaa !2452
  store double 0.000000e+00, double* %70, align 1, !tbaa !2452
  %123 = add i64 %200, -32
  %124 = add i64 %234, 13
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -40
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %135, -48
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %140, i64* %143, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_405cbb

block_405cfe:                                     ; preds = %block_405cf3
  %144 = add i64 %186, -32
  %145 = add i64 %198, 43
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %68, align 1, !tbaa !2452
  store double 0.000000e+00, double* %70, align 1, !tbaa !2452
  %148 = add i64 %186, -40
  %149 = add i64 %198, 47
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %198, 51
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to i64*
  store i64 %147, i64* %153, align 8
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -24
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = icmp ugt i64 %159, -9
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %42, align 1, !tbaa !2433
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #9
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %49, align 1, !tbaa !2447
  %169 = xor i64 %160, %159
  %170 = lshr i64 %169, 4
  %171 = trunc i64 %170 to i8
  %172 = and i8 %171, 1
  store i8 %172, i8* %54, align 1, !tbaa !2448
  %173 = icmp eq i64 %160, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %57, align 1, !tbaa !2449
  %175 = lshr i64 %160, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %60, align 1, !tbaa !2450
  %177 = lshr i64 %159, 63
  %178 = xor i64 %175, %177
  %179 = add nuw nsw i64 %178, %175
  %180 = icmp eq i64 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %66, align 1, !tbaa !2451
  %182 = add i64 %156, 12
  store i64 %182, i64* %PC, align 8
  store i64 %160, i64* %158, align 8
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, -173
  store i64 %184, i64* %PC, align 8, !tbaa !2428
  br label %block_405c90

block_405cf3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_405cbb
  %185 = phi i64 [ %116, %block_405cbb ], [ %.pre7, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_405cbb ], [ %355, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -49
  %188 = add i64 %185, 3
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i8*
  %190 = load i8, i8* %189, align 1
  store i8 %190, i8* %AL, align 1, !tbaa !2432
  %191 = and i8 %190, 1
  store i8 0, i8* %42, align 1, !tbaa !2433
  %192 = zext i8 %191 to i32
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #9
  %194 = trunc i32 %193 to i8
  %195 = xor i8 %194, 1
  store i8 %195, i8* %49, align 1, !tbaa !2447
  %196 = xor i8 %191, 1
  store i8 %196, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %60, align 1, !tbaa !2450
  store i8 0, i8* %66, align 1, !tbaa !2451
  store i8 0, i8* %54, align 1, !tbaa !2448
  %197 = icmp eq i8 %196, 0
  %.v = select i1 %197, i64 16, i64 11
  %198 = add i64 %185, %.v
  store i64 %198, i64* %PC, align 8, !tbaa !2428
  br i1 %197, label %block_405d03, label %block_405cfe

block_405c90:                                     ; preds = %block_405cfe, %block_405c70
  %199 = phi i64 [ %.pre, %block_405c70 ], [ %184, %block_405cfe ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_405c70 ], [ %MEMORY.1, %block_405cfe ]
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -24
  %202 = add i64 %199, 4
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = add i64 %200, -16
  %206 = add i64 %199, 8
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = sub i64 %204, %208
  %210 = icmp ult i64 %204, %208
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %42, align 1, !tbaa !2433
  %212 = trunc i64 %209 to i32
  %213 = and i32 %212, 255
  %214 = tail call i32 @llvm.ctpop.i32(i32 %213) #9
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  store i8 %217, i8* %49, align 1, !tbaa !2447
  %218 = xor i64 %208, %204
  %219 = xor i64 %218, %209
  %220 = lshr i64 %219, 4
  %221 = trunc i64 %220 to i8
  %222 = and i8 %221, 1
  store i8 %222, i8* %54, align 1, !tbaa !2448
  %223 = icmp eq i64 %209, 0
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %57, align 1, !tbaa !2449
  %225 = lshr i64 %209, 63
  %226 = trunc i64 %225 to i8
  store i8 %226, i8* %60, align 1, !tbaa !2450
  %227 = lshr i64 %204, 63
  %228 = lshr i64 %208, 63
  %229 = xor i64 %228, %227
  %230 = xor i64 %225, %227
  %231 = add nuw nsw i64 %230, %229
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %66, align 1, !tbaa !2451
  %.v8 = select i1 %223, i64 178, i64 14
  %234 = add i64 %199, %.v8
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_405d42, label %block_405c9e

block_405d03:                                     ; preds = %block_405cf3
  %235 = add i64 %186, -48
  %236 = add i64 %198, 4
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = add i64 %198, 8
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %68, align 1, !tbaa !2452
  store double 0.000000e+00, double* %70, align 1, !tbaa !2452
  %242 = add i64 %186, -40
  %243 = add i64 %198, 12
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = add i64 %198, 16
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to i64*
  store i64 %241, i64* %247, align 8
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -40
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = add i64 %253, -8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = icmp ugt i64 %253, 7
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %42, align 1, !tbaa !2433
  %257 = trunc i64 %254 to i32
  %258 = and i32 %257, 255
  %259 = tail call i32 @llvm.ctpop.i32(i32 %258) #9
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = xor i8 %261, 1
  store i8 %262, i8* %49, align 1, !tbaa !2447
  %263 = xor i64 %253, 16
  %264 = xor i64 %263, %254
  %265 = lshr i64 %264, 4
  %266 = trunc i64 %265 to i8
  %267 = and i8 %266, 1
  store i8 %267, i8* %54, align 1, !tbaa !2448
  %268 = icmp eq i64 %254, 0
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %57, align 1, !tbaa !2449
  %270 = lshr i64 %254, 63
  %271 = trunc i64 %270 to i8
  store i8 %271, i8* %60, align 1, !tbaa !2450
  %272 = lshr i64 %253, 63
  %273 = xor i64 %270, %272
  %274 = xor i64 %270, 1
  %275 = add nuw nsw i64 %273, %274
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %66, align 1, !tbaa !2451
  %278 = add i64 %250, 12
  store i64 %278, i64* %PC, align 8
  store i64 %254, i64* %252, align 8
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, -100
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  br label %block_405cbb

block_405d42:                                     ; preds = %block_405c90
  %281 = add i64 %234, 1
  store i64 %281, i64* %PC, align 8
  %282 = load i64, i64* %9, align 8, !tbaa !2428
  %283 = add i64 %282, 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RBP, align 8, !tbaa !2428
  store i64 %283, i64* %9, align 8, !tbaa !2428
  %286 = add i64 %234, 2
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %283 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %289 = add i64 %282, 16
  store i64 %289, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_405cd0:                                     ; preds = %block_405cbb
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -32
  %292 = add i64 %116, 5
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %68, align 1, !tbaa !2452
  store double 0.000000e+00, double* %70, align 1, !tbaa !2452
  %295 = add i64 %290, -48
  %296 = add i64 %116, 9
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i64*
  %298 = load i64, i64* %297, align 8
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = icmp ugt i64 %298, 7
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %42, align 1, !tbaa !2433
  %302 = trunc i64 %299 to i32
  %303 = and i32 %302, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #9
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %49, align 1, !tbaa !2447
  %308 = xor i64 %298, 16
  %309 = xor i64 %308, %299
  %310 = lshr i64 %309, 4
  %311 = trunc i64 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %54, align 1, !tbaa !2448
  %313 = icmp eq i64 %299, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %57, align 1, !tbaa !2449
  %315 = lshr i64 %299, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %60, align 1, !tbaa !2450
  %317 = lshr i64 %298, 63
  %318 = xor i64 %315, %317
  %319 = xor i64 %315, 1
  %320 = add nuw nsw i64 %318, %319
  %321 = icmp eq i64 %320, 2
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %66, align 1, !tbaa !2451
  %323 = add i64 %116, 20
  store i64 %323, i64* %PC, align 8
  store i64 %299, i64* %297, align 8
  %324 = load i64, i64* %RAX, align 8
  %325 = add i64 %324, -8
  %326 = load i64, i64* %PC, align 8
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %325 to i64*
  %329 = load i64, i64* %328, align 8
  store i64 %329, i64* %72, align 1, !tbaa !2452
  store double 0.000000e+00, double* %74, align 1, !tbaa !2452
  %330 = add i64 %326, 9
  store i64 %330, i64* %PC, align 8
  %.cast = bitcast i64 %329 to double
  %331 = load double, double* %71, align 1
  %332 = fcmp uno double %.cast, %331
  br i1 %332, label %333, label %343

; <label>:333:                                    ; preds = %block_405cd0
  %334 = fadd double %.cast, %331
  %335 = bitcast double %334 to i64
  %336 = and i64 %335, 9221120237041090560
  %337 = icmp eq i64 %336, 9218868437227405312
  %338 = and i64 %335, 2251799813685247
  %339 = icmp ne i64 %338, 0
  %340 = and i1 %337, %339
  br i1 %340, label %341, label %349

; <label>:341:                                    ; preds = %333
  %342 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %330, %struct.Memory* %MEMORY.0) #12
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:343:                                    ; preds = %block_405cd0
  %344 = fcmp ogt double %.cast, %331
  br i1 %344, label %349, label %345

; <label>:345:                                    ; preds = %343
  %346 = fcmp olt double %.cast, %331
  br i1 %346, label %349, label %347

; <label>:347:                                    ; preds = %345
  %348 = fcmp oeq double %.cast, %331
  br i1 %348, label %349, label %353

; <label>:349:                                    ; preds = %347, %345, %343, %333
  %350 = phi i8 [ 0, %343 ], [ 0, %345 ], [ 1, %347 ], [ 1, %333 ]
  %351 = phi i8 [ 0, %343 ], [ 0, %345 ], [ 0, %347 ], [ 1, %333 ]
  %352 = phi i8 [ 0, %343 ], [ 1, %345 ], [ 0, %347 ], [ 1, %333 ]
  store i8 %350, i8* %57, align 1, !tbaa !2432
  store i8 %351, i8* %49, align 1, !tbaa !2432
  store i8 %352, i8* %42, align 1, !tbaa !2432
  br label %353

; <label>:353:                                    ; preds = %349, %347
  store i8 0, i8* %66, align 1, !tbaa !2432
  store i8 0, i8* %60, align 1, !tbaa !2432
  store i8 0, i8* %54, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %353, %341
  %354 = phi i64 [ %.pre6, %341 ], [ %330, %353 ]
  %355 = phi %struct.Memory* [ %342, %341 ], [ %MEMORY.0, %353 ]
  %356 = load i8, i8* %42, align 1, !tbaa !2433
  %357 = load i8, i8* %57, align 1, !tbaa !2449
  %358 = or i8 %357, %356
  %359 = icmp eq i8 %358, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %DL, align 1, !tbaa !2432
  %361 = load i64, i64* %RBP, align 8
  %362 = add i64 %361, -49
  %363 = add i64 %354, 6
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i8*
  store i8 %360, i8* %364, align 1
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_405cf3
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404000:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = bitcast i64* %RCX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_404010

block_404047:                                     ; preds = %block_404010
  %34 = add i64 %78, 1
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %78, 2
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404010:                                     ; preds = %block_40401e, %block_404000
  %43 = phi i64 [ %140, %block_40401e ], [ %.pre, %block_404000 ]
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -8
  %46 = add i64 %43, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RAX, align 8, !tbaa !2428
  %49 = add i64 %44, -16
  %50 = add i64 %43, 8
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %48, %52
  %54 = icmp ult i64 %48, %52
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %26, align 1, !tbaa !2433
  %56 = trunc i64 %53 to i32
  %57 = and i32 %56, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #9
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %27, align 1, !tbaa !2447
  %62 = xor i64 %52, %48
  %63 = xor i64 %62, %53
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  store i8 %66, i8* %28, align 1, !tbaa !2448
  %67 = icmp eq i64 %53, 0
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %29, align 1, !tbaa !2449
  %69 = lshr i64 %53, 63
  %70 = trunc i64 %69 to i8
  store i8 %70, i8* %30, align 1, !tbaa !2450
  %71 = lshr i64 %48, 63
  %72 = lshr i64 %52, 63
  %73 = xor i64 %72, %71
  %74 = xor i64 %69, %71
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %31, align 1, !tbaa !2451
  %.v = select i1 %67, i64 55, i64 14
  %78 = add i64 %43, %.v
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %67, label %block_404047, label %block_40401e

block_40401e:                                     ; preds = %block_404010
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC, align 8
  %80 = load i64, i64* %47, align 8
  store i64 %80, i64* %RAX, align 8, !tbaa !2428
  %81 = add i64 %80, 8
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = icmp ugt i64 %80, -9
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %26, align 1, !tbaa !2433
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %27, align 1, !tbaa !2447
  %90 = xor i64 %81, %80
  %91 = lshr i64 %90, 4
  %92 = trunc i64 %91 to i8
  %93 = and i8 %92, 1
  store i8 %93, i8* %28, align 1, !tbaa !2448
  %94 = icmp eq i64 %81, 0
  %95 = zext i1 %94 to i8
  store i8 %95, i8* %29, align 1, !tbaa !2449
  %96 = lshr i64 %81, 63
  %97 = trunc i64 %96 to i8
  store i8 %97, i8* %30, align 1, !tbaa !2450
  %98 = lshr i64 %80, 63
  %99 = xor i64 %96, %98
  %100 = add nuw nsw i64 %99, %96
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %31, align 1, !tbaa !2451
  %103 = add i64 %78, 15
  store i64 %103, i64* %PC, align 8
  store i64 %81, i64* %47, align 8
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -24
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 4
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RCX, align 8, !tbaa !2428
  %110 = add i64 %109, 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = icmp ugt i64 %109, -9
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %26, align 1, !tbaa !2433
  %113 = trunc i64 %110 to i32
  %114 = and i32 %113, 255
  %115 = tail call i32 @llvm.ctpop.i32(i32 %114) #9
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  %118 = xor i8 %117, 1
  store i8 %118, i8* %27, align 1, !tbaa !2447
  %119 = xor i64 %110, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %28, align 1, !tbaa !2448
  %123 = icmp eq i64 %110, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %110, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %30, align 1, !tbaa !2450
  %127 = lshr i64 %109, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %31, align 1, !tbaa !2451
  %132 = add i64 %106, 15
  store i64 %132, i64* %PC, align 8
  store i64 %110, i64* %108, align 8
  %133 = load i64*, i64** %32, align 8
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC, align 8
  %136 = load i64, i64* %133, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64*, i64** %33, align 8
  %138 = add i64 %134, 6
  store i64 %138, i64* %PC, align 8
  store i64 %136, i64* %137, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, -50
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_404010
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone) local_unnamed_addr #6 {
block_406390:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -32
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 5
  store i64 %52, i64* %PC, align 8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 1
  %55 = inttoptr i64 %50 to i64*
  store i64 %54, i64* %55, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4063a5

block_4063bf:                                     ; preds = %block_4063a5
  %56 = add i64 %170, -16
  store i64 %56, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %20, align 1, !tbaa !2447
  store i8 1, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %57 = add i64 %169, -10079
  %58 = add i64 %169, 11
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -48
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX, align 8
  %67 = add i64 %65, 8
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -9986
  %71 = add i64 %69, 5
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %70, %struct.Memory* %2)
  %76 = load i64, i64* %RBP, align 8
  %77 = add i64 %76, -32
  %78 = load i64, i64* %PC, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %79 = load i64, i64* %RAX, align 8
  store i64 %79, i64* %RSI, align 8, !tbaa !2428
  %80 = add i64 %78, -295
  %81 = add i64 %78, 12
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -40
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC, align 8
  %90 = load i64, i64* %53, align 1
  %91 = inttoptr i64 %87 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -40
  %94 = load i64, i64* %PC, align 8
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %92, -32
  %99 = add i64 %94, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, -75
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  br label %block_4063a5

block_4063ba:                                     ; preds = %block_4063a5
  %103 = add i64 %170, -32
  %104 = add i64 %169, 63
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %103 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %RAX, align 8, !tbaa !2428
  %107 = add i64 %170, -8
  %108 = add i64 %169, 67
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i64*
  store i64 %106, i64* %109, align 8
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -8
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 5
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %53, align 1, !tbaa !2452
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %117 = bitcast i64* %116 to double*
  store double 0.000000e+00, double* %117, align 1, !tbaa !2452
  %118 = load i64, i64* %RSP, align 8
  %119 = add i64 %118, 48
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  %120 = icmp ugt i64 %118, -49
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %13, align 1, !tbaa !2433
  %122 = trunc i64 %119 to i32
  %123 = and i32 %122, 255
  %124 = tail call i32 @llvm.ctpop.i32(i32 %123) #9
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  store i8 %127, i8* %20, align 1, !tbaa !2447
  %128 = xor i64 %118, 16
  %129 = xor i64 %128, %119
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %26, align 1, !tbaa !2448
  %133 = icmp eq i64 %119, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %29, align 1, !tbaa !2449
  %135 = lshr i64 %119, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %32, align 1, !tbaa !2450
  %137 = lshr i64 %118, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %38, align 1, !tbaa !2451
  %142 = add i64 %112, 10
  store i64 %142, i64* %PC, align 8
  %143 = add i64 %118, 56
  %144 = inttoptr i64 %119 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %RBP, align 8, !tbaa !2428
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  %146 = add i64 %112, 11
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %143 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = add i64 %118, 64
  store i64 %149, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4063a5:                                     ; preds = %block_4063bf, %block_406390
  %150 = phi i64 [ %102, %block_4063bf ], [ %.pre, %block_406390 ]
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -16
  store i64 %152, i64* %RDI, align 8, !tbaa !2428
  %153 = add i64 %151, -24
  store i64 %153, i64* %RSI, align 8, !tbaa !2428
  %154 = add i64 %150, -9989
  %155 = add i64 %150, 13
  %156 = load i64, i64* %RSP, align 8, !tbaa !2428
  %157 = add i64 %156, -8
  %158 = inttoptr i64 %157 to i64*
  store i64 %155, i64* %158, align 8
  store i64 %157, i64* %RSP, align 8, !tbaa !2428
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  %159 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %154, %struct.Memory* %2)
  %160 = load i8, i8* %AL, align 1
  %161 = load i64, i64* %PC, align 8
  %162 = and i8 %160, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %163 = zext i8 %162 to i32
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #9
  %165 = trunc i32 %164 to i8
  %166 = xor i8 %165, 1
  store i8 %166, i8* %20, align 1, !tbaa !2447
  %167 = xor i8 %162, 1
  store i8 %167, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %168 = icmp eq i8 %167, 0
  %.v = select i1 %168, i64 13, i64 8
  %169 = add i64 %161, %.v
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP, align 8
  br i1 %168, label %block_4063bf, label %block_4063ba
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_403050:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %22, 7
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %RSI, align 8, !tbaa !2428
  %29 = add i64 %20, -16
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %22, 14
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %39 = icmp eq i64 %28, %35
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %43 = xor i1 %39, true
  store i8 0, i8* %36, align 1, !tbaa !2433
  %44 = zext i1 %43 to i32
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #9
  %46 = trunc i32 %45 to i8
  %47 = xor i8 %46, 1
  store i8 %47, i8* %37, align 1, !tbaa !2447
  %48 = zext i1 %39 to i8
  store i8 %48, i8* %40, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %42, align 1, !tbaa !2451
  store i8 0, i8* %38, align 1, !tbaa !2448
  %49 = zext i1 %43 to i64
  store i64 %49, i64* %RAX, align 8, !tbaa !2428
  %50 = add i64 %22, 23
  store i64 %50, i64* %PC, align 8
  %51 = load i64, i64* %5, align 8, !tbaa !2428
  %52 = add i64 %51, 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RBP, align 8, !tbaa !2428
  store i64 %52, i64* %5, align 8, !tbaa !2428
  %55 = add i64 %22, 24
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %58 = add i64 %51, 16
  store i64 %58, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400b00__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_400b00:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_401e70:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 5
  store i64 %51, i64* %PC, align 8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %53 = load i64, i64* %52, align 1
  %54 = inttoptr i64 %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -32
  %57 = load i64, i64* %RDX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -36
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %67 = bitcast i64* %66 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401e90

block_401ea0:                                     ; preds = %block_401e90
  %68 = add i64 %126, -8
  %69 = add i64 %159, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = add i64 %126, -16
  %73 = add i64 %159, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RSI, align 8, !tbaa !2428
  %76 = add i64 %126, -24
  %77 = add i64 %159, 13
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %52, align 1, !tbaa !2452
  store double 0.000000e+00, double* %67, align 1, !tbaa !2452
  %80 = add i64 %159, 18000
  %81 = add i64 %159, 18
  %82 = load i64, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  %85 = tail call %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %MEMORY.0)
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 16190
  %88 = add i64 %86, 5
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* nonnull %0, i64 %87, %struct.Memory* %MEMORY.0)
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -36
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = add i32 %98, 1
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = icmp eq i32 %98, -1
  %102 = icmp eq i32 %99, 0
  %103 = or i1 %101, %102
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %12, align 1, !tbaa !2433
  %105 = and i32 %99, 255
  %106 = tail call i32 @llvm.ctpop.i32(i32 %105) #9
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  store i8 %109, i8* %19, align 1, !tbaa !2447
  %110 = xor i32 %99, %98
  %111 = lshr i32 %110, 4
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  store i8 %113, i8* %25, align 1, !tbaa !2448
  %114 = zext i1 %102 to i8
  store i8 %114, i8* %28, align 1, !tbaa !2449
  %115 = lshr i32 %99, 31
  %116 = trunc i32 %115 to i8
  store i8 %116, i8* %31, align 1, !tbaa !2450
  %117 = lshr i32 %98, 31
  %118 = xor i32 %115, %117
  %119 = add nuw nsw i32 %118, %115
  %120 = icmp eq i32 %119, 2
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %37, align 1, !tbaa !2451
  %122 = add i64 %95, 9
  store i64 %122, i64* %PC, align 8
  store i32 %99, i32* %97, align 4
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, -48
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br label %block_401e90

block_401e90:                                     ; preds = %block_401ea0, %block_401e70
  %125 = phi i64 [ %.pre, %block_401e70 ], [ %124, %block_401ea0 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401e70 ], [ %92, %block_401ea0 ]
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -36
  %128 = add i64 %125, 3
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %133 = sub i32 %130, %132
  %134 = icmp ult i32 %130, %132
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %12, align 1, !tbaa !2433
  %136 = and i32 %133, 255
  %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #9
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  store i8 %140, i8* %19, align 1, !tbaa !2447
  %141 = xor i32 %132, %130
  %142 = xor i32 %141, %133
  %143 = lshr i32 %142, 4
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %25, align 1, !tbaa !2448
  %146 = icmp eq i32 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %28, align 1, !tbaa !2449
  %148 = lshr i32 %133, 31
  %149 = trunc i32 %148 to i8
  store i8 %149, i8* %31, align 1, !tbaa !2450
  %150 = lshr i32 %130, 31
  %151 = lshr i32 %132, 31
  %152 = xor i32 %151, %150
  %153 = xor i32 %148, %150
  %154 = add nuw nsw i32 %153, %152
  %155 = icmp eq i32 %154, 2
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %37, align 1, !tbaa !2451
  %157 = icmp ne i8 %149, 0
  %158 = xor i1 %157, %155
  %.v = select i1 %158, i64 16, i64 53
  %159 = add i64 %125, %.v
  store i64 %159, i64* %PC, align 8, !tbaa !2428
  br i1 %158, label %block_401ea0, label %block_401ec5

block_401ec5:                                     ; preds = %block_401e90
  %160 = load i64, i64* %RSP, align 8
  %161 = add i64 %160, 48
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  %162 = icmp ugt i64 %160, -49
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %12, align 1, !tbaa !2433
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #9
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %19, align 1, !tbaa !2447
  %170 = xor i64 %160, 16
  %171 = xor i64 %170, %161
  %172 = lshr i64 %171, 4
  %173 = trunc i64 %172 to i8
  %174 = and i8 %173, 1
  store i8 %174, i8* %25, align 1, !tbaa !2448
  %175 = icmp eq i64 %161, 0
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %28, align 1, !tbaa !2449
  %177 = lshr i64 %161, 63
  %178 = trunc i64 %177 to i8
  store i8 %178, i8* %31, align 1, !tbaa !2450
  %179 = lshr i64 %160, 63
  %180 = xor i64 %177, %179
  %181 = add nuw nsw i64 %180, %177
  %182 = icmp eq i64 %181, 2
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %37, align 1, !tbaa !2451
  %184 = add i64 %159, 5
  store i64 %184, i64* %PC, align 8
  %185 = add i64 %160, 56
  %186 = inttoptr i64 %161 to i64*
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %RBP, align 8, !tbaa !2428
  store i64 %185, i64* %RSP, align 8, !tbaa !2428
  %188 = add i64 %159, 6
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %185 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %PC, align 8, !tbaa !2428
  %191 = add i64 %160, 64
  store i64 %191, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401d80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %48, -16
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RSI, align 8, !tbaa !2428
  %58 = add i64 %50, 18352
  %59 = add i64 %50, 13
  %60 = load i64, i64* %RSP, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %59, i64* %62, align 8
  store i64 %61, i64* %RSP, align 8, !tbaa !2428
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  %63 = tail call %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* nonnull %0, i64 %58, %struct.Memory* %2)
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 16
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -17
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %12, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #9
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %19, align 1, !tbaa !2447
  %75 = xor i64 %64, 16
  %76 = xor i64 %75, %66
  %77 = lshr i64 %76, 4
  %78 = trunc i64 %77 to i8
  %79 = and i8 %78, 1
  store i8 %79, i8* %25, align 1, !tbaa !2448
  %80 = icmp eq i64 %66, 0
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %28, align 1, !tbaa !2449
  %82 = lshr i64 %66, 63
  %83 = trunc i64 %82 to i8
  store i8 %83, i8* %31, align 1, !tbaa !2450
  %84 = lshr i64 %64, 63
  %85 = xor i64 %82, %84
  %86 = add nuw nsw i64 %85, %82
  %87 = icmp eq i64 %86, 2
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %37, align 1, !tbaa !2451
  %89 = add i64 %65, 5
  store i64 %89, i64* %PC, align 8
  %90 = add i64 %64, 24
  %91 = inttoptr i64 %66 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RBP, align 8, !tbaa !2428
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %93 = add i64 %65, 6
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %90 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %96 = add i64 %64, 32
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %63
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403ba0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 17
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %28, -32
  %35 = add i64 %30, 8
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RAX, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i32, i32* %ECX, align 4
  %40 = zext i32 %39 to i64
  store i64 %40, i64* %RSI, align 8, !tbaa !2428
  %41 = add i64 %38, 162
  %42 = add i64 %38, 10
  %43 = load i64, i64* %RSP, align 8, !tbaa !2428
  %44 = add i64 %43, -8
  %45 = inttoptr i64 %44 to i64*
  store i64 %42, i64* %45, align 8
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %46 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %41, %struct.Memory* %2)
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -40
  %49 = load i64, i64* %RAX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403bcc

block_403c33:                                     ; preds = %block_403be6
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -1
  %55 = add i64 %128, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i8*
  store i8 0, i8* %56, align 1
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 14
  store i64 %58, i64* %PC, align 8, !tbaa !2428
  br label %block_403c45

block_403be6:                                     ; preds = %block_403bcc
  %59 = add i64 %153, -16
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %60 = add i64 %152, 122
  %61 = add i64 %152, 11
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %60, %struct.Memory* %MEMORY.0)
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %PC, align 8
  store i64 %67, i64* %RDI, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX, align 8
  %70 = add i64 %68, 8
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 215
  %74 = add i64 %72, 5
  %75 = load i64, i64* %RSP, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %74, i64* %77, align 8
  store i64 %76, i64* %RSP, align 8, !tbaa !2428
  store i64 %73, i64* %PC, align 8, !tbaa !2428
  %78 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %73, %struct.Memory* %MEMORY.0)
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -32
  %81 = load i64, i64* %PC, align 8
  store i64 %80, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %82 = add i64 %79, -64
  %83 = load i64, i64* %RAX, align 8
  %84 = add i64 %81, 10
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i64*
  store i64 %83, i64* %85, align 8
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 88
  %88 = add i64 %86, 5
  %89 = load i64, i64* %RSP, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %88, i64* %91, align 8
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  %92 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* nonnull %0, i64 %87, %struct.Memory* %MEMORY.0)
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -56
  %95 = load i64, i64* %PC, align 8
  store i64 %94, i64* %RDI, align 8, !tbaa !2428
  %96 = load i64, i64* %RAX, align 8
  %97 = add i64 %95, 8
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %94 to i64*
  store i64 %96, i64* %98, align 8
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 187
  %101 = add i64 %99, 5
  %102 = load i64, i64* %RSP, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %101, i64* %104, align 8
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  store i64 %100, i64* %PC, align 8, !tbaa !2428
  %105 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* nonnull %0, i64 %100, %struct.Memory* %MEMORY.0)
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -64
  %108 = load i64, i64* %PC, align 8
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %RAX, align 8
  store i64 %112, i64* %RSI, align 8, !tbaa !2428
  %113 = add i64 %108, -2506
  %114 = add i64 %108, 12
  %115 = load i64, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %115, -8
  %117 = inttoptr i64 %116 to i64*
  store i64 %114, i64* %117, align 8
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %118 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* nonnull %0, i64 %113, %struct.Memory* %MEMORY.0)
  %119 = load i8, i8* %AL, align 1
  %120 = load i64, i64* %PC, align 8
  %121 = and i8 %119, 1
  store i8 0, i8* %12, align 1, !tbaa !2433
  %122 = zext i8 %121 to i32
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #9
  %124 = trunc i32 %123 to i8
  %125 = xor i8 %124, 1
  store i8 %125, i8* %13, align 1, !tbaa !2447
  %126 = xor i8 %121, 1
  store i8 %126, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %127 = icmp eq i8 %126, 0
  %.v13 = select i1 %127, i64 13, i64 8
  %128 = add i64 %120, %.v13
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br i1 %127, label %block_403c33, label %block_403c2e

block_403c2e:                                     ; preds = %block_403be6
  %129 = add i64 %128, -98
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  br label %block_403bcc

block_403be1:                                     ; preds = %block_403bcc
  %130 = add i64 %153, -1
  %131 = add i64 %152, 100
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i8*
  store i8 1, i8* %132, align 1
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_403c45

block_403bcc:                                     ; preds = %block_403c2e, %block_403ba0
  %133 = phi i64 [ %.pre, %block_403ba0 ], [ %129, %block_403c2e ]
  %MEMORY.0 = phi %struct.Memory* [ %46, %block_403ba0 ], [ %118, %block_403c2e ]
  %134 = load i64, i64* %RBP, align 8
  %135 = add i64 %134, -16
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = add i64 %134, -24
  store i64 %136, i64* %RSI, align 8, !tbaa !2428
  %137 = add i64 %133, 212
  %138 = add i64 %133, 13
  %139 = load i64, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %138, i64* %141, align 8
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  %142 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* nonnull %0, i64 %137, %struct.Memory* %MEMORY.0)
  %143 = load i8, i8* %AL, align 1
  %144 = load i64, i64* %PC, align 8
  %145 = and i8 %143, 1
  store i8 0, i8* %12, align 1, !tbaa !2433
  %146 = zext i8 %145 to i32
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #9
  %148 = trunc i32 %147 to i8
  %149 = xor i8 %148, 1
  store i8 %149, i8* %13, align 1, !tbaa !2447
  %150 = xor i8 %145, 1
  store i8 %150, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %17, align 1, !tbaa !2451
  store i8 0, i8* %14, align 1, !tbaa !2448
  %151 = icmp eq i8 %150, 0
  %.v = select i1 %151, i64 13, i64 8
  %152 = add i64 %144, %.v
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %153 = load i64, i64* %RBP, align 8
  br i1 %151, label %block_403be6, label %block_403be1

block_403c45:                                     ; preds = %block_403be1, %block_403c33
  %154 = phi i64 [ %58, %block_403c33 ], [ %.pre12, %block_403be1 ]
  %MEMORY.1 = phi %struct.Memory* [ %118, %block_403c33 ], [ %MEMORY.0, %block_403be1 ]
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -1
  %157 = add i64 %154, 3
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i8*
  %159 = load i8, i8* %158, align 1
  %160 = and i8 %159, 1
  %161 = zext i8 %160 to i64
  store i64 %161, i64* %RAX, align 8, !tbaa !2428
  %162 = load i64, i64* %RSP, align 8
  %163 = add i64 %162, 64
  store i64 %163, i64* %RSP, align 8, !tbaa !2428
  %164 = icmp ugt i64 %162, -65
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %12, align 1, !tbaa !2433
  %166 = trunc i64 %163 to i32
  %167 = and i32 %166, 255
  %168 = tail call i32 @llvm.ctpop.i32(i32 %167) #9
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  store i8 %171, i8* %13, align 1, !tbaa !2447
  %172 = xor i64 %163, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %14, align 1, !tbaa !2448
  %176 = icmp eq i64 %163, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %15, align 1, !tbaa !2449
  %178 = lshr i64 %163, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %16, align 1, !tbaa !2450
  %180 = lshr i64 %162, 63
  %181 = xor i64 %178, %180
  %182 = add nuw nsw i64 %181, %178
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %17, align 1, !tbaa !2451
  %185 = add i64 %154, 13
  store i64 %185, i64* %PC, align 8
  %186 = add i64 %162, 72
  %187 = inttoptr i64 %163 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RBP, align 8, !tbaa !2428
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %189 = add i64 %154, 14
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %186 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  %192 = add i64 %162, 80
  store i64 %192, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4060d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_403b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -56
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 48
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2433
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #9
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2447
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2448
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2449
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2450
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2451
  %39 = add i64 %6, -16
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %RSI, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RSI, align 8, !tbaa !2428
  %55 = add i64 %49, -24
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RSI, align 8, !tbaa !2428
  %64 = add i64 %58, -32
  %65 = add i64 %60, 8
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -24
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %RDI, align 8, !tbaa !2428
  %73 = add i64 %67, -32
  %74 = add i64 %69, 8
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = add i64 %69, 64
  %78 = add i64 %69, 13
  %79 = load i64, i64* %RSP, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %78, i64* %81, align 8
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  store i64 %77, i64* %PC, align 8, !tbaa !2428
  %82 = tail call %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* nonnull %0, i64 %77, %struct.Memory* %2)
  %83 = load i8, i8* %AL, align 1
  %84 = load i64, i64* %PC, align 8
  %85 = and i8 %83, 1
  store i8 0, i8* %13, align 1, !tbaa !2433
  %86 = zext i8 %85 to i32
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = xor i8 %88, 1
  store i8 %89, i8* %20, align 1, !tbaa !2447
  %90 = xor i8 %85, 1
  store i8 %90, i8* %29, align 1, !tbaa !2449
  store i8 0, i8* %32, align 1, !tbaa !2450
  store i8 0, i8* %38, align 1, !tbaa !2451
  store i8 0, i8* %26, align 1, !tbaa !2448
  %91 = icmp eq i8 %90, 0
  %.v = select i1 %91, i64 35, i64 8
  %92 = add i64 %84, %.v
  store i64 %92, i64* %PC, align 8, !tbaa !2428
  br i1 %91, label %block_403b90, label %block_403b75

block_403b75:                                     ; preds = %block_403b40
  %EAX = bitcast %union.anon* %3 to i32*
  store i64 add (i64 ptrtoint (%seg_406740__rodata_type* @seg_406740__rodata to i64), i64 1028), i64* %RDI, align 8, !tbaa !2428
  %93 = load i32, i32* bitcast (%current_test_type* @current_test to i32*), align 8
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %95 = add i64 %92, -13445
  %96 = add i64 %92, 24
  %97 = load i64, i64* %RSP, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %96, i64* %99, align 8
  store i64 %98, i64* %RSP, align 8, !tbaa !2428
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  %100 = tail call fastcc %struct.Memory* @ext_4006f0_printf(%struct.State* nonnull %0, %struct.Memory* %82)
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -36
  %103 = load i32, i32* %EAX, align 4
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 3
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %102 to i32*
  store i32 %103, i32* %106, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_403b90

block_403b90:                                     ; preds = %block_403b75, %block_403b40
  %107 = phi i64 [ %92, %block_403b40 ], [ %.pre, %block_403b75 ]
  %MEMORY.0 = phi %struct.Memory* [ %82, %block_403b40 ], [ %100, %block_403b75 ]
  %108 = load i64, i64* %RSP, align 8
  %109 = add i64 %108, 48
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  %110 = icmp ugt i64 %108, -49
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %13, align 1, !tbaa !2433
  %112 = trunc i64 %109 to i32
  %113 = and i32 %112, 255
  %114 = tail call i32 @llvm.ctpop.i32(i32 %113) #9
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  store i8 %117, i8* %20, align 1, !tbaa !2447
  %118 = xor i64 %108, 16
  %119 = xor i64 %118, %109
  %120 = lshr i64 %119, 4
  %121 = trunc i64 %120 to i8
  %122 = and i8 %121, 1
  store i8 %122, i8* %26, align 1, !tbaa !2448
  %123 = icmp eq i64 %109, 0
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %29, align 1, !tbaa !2449
  %125 = lshr i64 %109, 63
  %126 = trunc i64 %125 to i8
  store i8 %126, i8* %32, align 1, !tbaa !2450
  %127 = lshr i64 %108, 63
  %128 = xor i64 %125, %127
  %129 = add nuw nsw i64 %128, %125
  %130 = icmp eq i64 %129, 2
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %38, align 1, !tbaa !2451
  %132 = add i64 %107, 5
  store i64 %132, i64* %PC, align 8
  %133 = add i64 %108, 56
  %134 = inttoptr i64 %109 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RBP, align 8, !tbaa !2428
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %107, 6
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %133 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  %139 = add i64 %108, 64
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401d30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %44, 20
  %49 = add i64 %44, 9
  %50 = load i64, i64* %RSP, align 8, !tbaa !2428
  %51 = add i64 %50, -8
  %52 = inttoptr i64 %51 to i64*
  store i64 %49, i64* %52, align 8
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  store i64 %48, i64* %PC, align 8, !tbaa !2428
  %53 = tail call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* nonnull %0, i64 %48, %struct.Memory* %2)
  %54 = load i64, i64* %RSP, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %54, 16
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ugt i64 %54, -17
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %12, align 1, !tbaa !2433
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #9
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2447
  %65 = xor i64 %54, 16
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %25, align 1, !tbaa !2448
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %28, align 1, !tbaa !2449
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %31, align 1, !tbaa !2450
  %74 = lshr i64 %54, 63
  %75 = xor i64 %72, %74
  %76 = add nuw nsw i64 %75, %72
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %37, align 1, !tbaa !2451
  %79 = add i64 %55, 5
  store i64 %79, i64* %PC, align 8
  %80 = add i64 %54, 24
  %81 = inttoptr i64 %56 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RBP, align 8, !tbaa !2428
  store i64 %80, i64* %RSP, align 8, !tbaa !2428
  %83 = add i64 %55, 6
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %86 = add i64 %54, 32
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %53
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4024d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -16
  %38 = add i64 %8, 12
  store i64 %38, i64* %PC, align 8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %40 = load i64, i64* %39, align 1
  %41 = inttoptr i64 %37 to i64*
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RDX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -48
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -52
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4024f8

block_402541:                                     ; preds = %block_4024f8
  %77 = load i64, i64* %RSP, align 8
  %78 = add i64 %77, 64
  store i64 %78, i64* %RSP, align 8, !tbaa !2428
  %79 = icmp ugt i64 %77, -65
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2433
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #9
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2447
  %87 = xor i64 %78, %77
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  store i8 %90, i8* %24, align 1, !tbaa !2448
  %91 = icmp eq i64 %78, 0
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %27, align 1, !tbaa !2449
  %93 = lshr i64 %78, 63
  %94 = trunc i64 %93 to i8
  store i8 %94, i8* %30, align 1, !tbaa !2450
  %95 = lshr i64 %77, 63
  %96 = xor i64 %93, %95
  %97 = add nuw nsw i64 %96, %93
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %36, align 1, !tbaa !2451
  %100 = add i64 %224, 5
  store i64 %100, i64* %PC, align 8
  %101 = add i64 %77, 72
  %102 = inttoptr i64 %78 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  %104 = add i64 %224, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %77, 80
  store i64 %107, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402508:                                     ; preds = %block_4024f8
  %108 = add i64 %191, -16
  %109 = add i64 %224, 4
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = add i64 %191, -24
  %113 = add i64 %224, 8
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = add i64 %191, -32
  %117 = add i64 %224, 12
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = add i64 %224, 4232
  %121 = add i64 %224, 17
  %122 = load i64, i64* %RSP, align 8, !tbaa !2428
  %123 = add i64 %122, -8
  %124 = inttoptr i64 %123 to i64*
  store i64 %121, i64* %124, align 8
  store i64 %123, i64* %RSP, align 8, !tbaa !2428
  store i64 %120, i64* %PC, align 8, !tbaa !2428
  %125 = tail call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* nonnull %0, i64 %120, %struct.Memory* %MEMORY.0)
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -32
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %126, -40
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %128, 13143
  %137 = add i64 %128, 13
  %138 = load i64, i64* %RSP, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %137, i64* %140, align 8
  store i64 %139, i64* %RSP, align 8, !tbaa !2428
  store i64 %136, i64* %PC, align 8, !tbaa !2428
  %141 = tail call %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* nonnull %0, i64 %136, %struct.Memory* %MEMORY.0)
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -32
  %144 = load i64, i64* %PC, align 8
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = add i64 %142, -40
  %149 = add i64 %144, 8
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RSI, align 8, !tbaa !2428
  %152 = add i64 %144, 4538
  %153 = add i64 %144, 13
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !tbaa !2428
  %157 = tail call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* nonnull %0, i64 %152, %struct.Memory* %141)
  %158 = load i64, i64* %RBP, align 8
  %159 = add i64 %158, -52
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  %165 = zext i32 %164 to i64
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = icmp eq i32 %163, -1
  %167 = icmp eq i32 %164, 0
  %168 = or i1 %166, %167
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2433
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %19, align 1, !tbaa !2447
  %175 = xor i32 %164, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %24, align 1, !tbaa !2448
  %179 = zext i1 %167 to i8
  store i8 %179, i8* %27, align 1, !tbaa !2449
  %180 = lshr i32 %164, 31
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %30, align 1, !tbaa !2450
  %182 = lshr i32 %163, 31
  %183 = xor i32 %180, %182
  %184 = add nuw nsw i32 %183, %180
  %185 = icmp eq i32 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %36, align 1, !tbaa !2451
  %187 = add i64 %160, 9
  store i64 %187, i64* %PC, align 8
  store i32 %164, i32* %162, align 4
  %188 = load i64, i64* %PC, align 8
  %189 = add i64 %188, -68
  store i64 %189, i64* %PC, align 8, !tbaa !2428
  br label %block_4024f8

block_4024f8:                                     ; preds = %block_402508, %block_4024d0
  %190 = phi i64 [ %.pre, %block_4024d0 ], [ %189, %block_402508 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4024d0 ], [ %157, %block_402508 ]
  %191 = load i64, i64* %RBP, align 8
  %192 = add i64 %191, -52
  %193 = add i64 %190, 3
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %198 = sub i32 %195, %197
  %199 = icmp ult i32 %195, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %12, align 1, !tbaa !2433
  %201 = and i32 %198, 255
  %202 = tail call i32 @llvm.ctpop.i32(i32 %201) #9
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  %205 = xor i8 %204, 1
  store i8 %205, i8* %19, align 1, !tbaa !2447
  %206 = xor i32 %197, %195
  %207 = xor i32 %206, %198
  %208 = lshr i32 %207, 4
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  store i8 %210, i8* %24, align 1, !tbaa !2448
  %211 = icmp eq i32 %198, 0
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %27, align 1, !tbaa !2449
  %213 = lshr i32 %198, 31
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %30, align 1, !tbaa !2450
  %215 = lshr i32 %195, 31
  %216 = lshr i32 %197, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %213, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2451
  %222 = icmp ne i8 %214, 0
  %223 = xor i1 %222, %220
  %.v = select i1 %223, i64 16, i64 73
  %224 = add i64 %190, %.v
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br i1 %223, label %block_402508, label %block_402541
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406110:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 5
  store i64 %23, i64* %PC, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %25 = load i64, i64* %24, align 1
  %26 = inttoptr i64 %21 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %34 = bitcast i64* %33 to double*
  %35 = bitcast i64* %RAX to i64**
  %.pre = load i64, i64* %PC, align 8
  br label %block_401dc1

block_401dcf:                                     ; preds = %block_401dc1
  %36 = add i64 %72, -24
  %37 = add i64 %106, 5
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %24, align 1, !tbaa !2452
  store double 0.000000e+00, double* %34, align 1, !tbaa !2452
  %40 = add i64 %106, 9
  store i64 %40, i64* %PC, align 8
  %41 = load i64, i64* %75, align 8
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %41, 8
  store i64 %42, i64* %RCX, align 8, !tbaa !2428
  %43 = icmp ugt i64 %41, -9
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %27, align 1, !tbaa !2433
  %45 = trunc i64 %42 to i32
  %46 = and i32 %45, 255
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46) #9
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  store i8 %50, i8* %28, align 1, !tbaa !2447
  %51 = xor i64 %42, %41
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  store i8 %54, i8* %29, align 1, !tbaa !2448
  %55 = icmp eq i64 %42, 0
  %56 = zext i1 %55 to i8
  store i8 %56, i8* %30, align 1, !tbaa !2449
  %57 = lshr i64 %42, 63
  %58 = trunc i64 %57 to i8
  store i8 %58, i8* %31, align 1, !tbaa !2450
  %59 = lshr i64 %41, 63
  %60 = xor i64 %57, %59
  %61 = add nuw nsw i64 %60, %57
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %32, align 1, !tbaa !2451
  %64 = add i64 %106, 20
  store i64 %64, i64* %PC, align 8
  store i64 %42, i64* %75, align 8
  %65 = load i64*, i64** %35, align 8
  %66 = load i64, i64* %PC, align 8
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC, align 8
  %68 = load i64, i64* %24, align 1
  store i64 %68, i64* %65, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, -38
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  br label %block_401dc1

block_401dc1:                                     ; preds = %block_401dcf, %block_401db0
  %71 = phi i64 [ %70, %block_401dcf ], [ %.pre, %block_401db0 ]
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -8
  %74 = add i64 %71, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %77 = add i64 %72, -16
  %78 = add i64 %71, 8
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %76, %80
  %82 = icmp ult i64 %76, %80
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %27, align 1, !tbaa !2433
  %84 = trunc i64 %81 to i32
  %85 = and i32 %84, 255
  %86 = tail call i32 @llvm.ctpop.i32(i32 %85) #9
  %87 = trunc i32 %86 to i8
  %88 = and i8 %87, 1
  %89 = xor i8 %88, 1
  store i8 %89, i8* %28, align 1, !tbaa !2447
  %90 = xor i64 %80, %76
  %91 = xor i64 %90, %81
  %92 = lshr i64 %91, 4
  %93 = trunc i64 %92 to i8
  %94 = and i8 %93, 1
  store i8 %94, i8* %29, align 1, !tbaa !2448
  %95 = icmp eq i64 %81, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %30, align 1, !tbaa !2449
  %97 = lshr i64 %81, 63
  %98 = trunc i64 %97 to i8
  store i8 %98, i8* %31, align 1, !tbaa !2450
  %99 = lshr i64 %76, 63
  %100 = lshr i64 %80, 63
  %101 = xor i64 %100, %99
  %102 = xor i64 %97, %99
  %103 = add nuw nsw i64 %102, %101
  %104 = icmp eq i64 %103, 2
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %32, align 1, !tbaa !2451
  %.v = select i1 %95, i64 43, i64 14
  %106 = add i64 %71, %.v
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  br i1 %95, label %block_401dec, label %block_401dcf

block_401dec:                                     ; preds = %block_401dc1
  %107 = add i64 %106, 1
  store i64 %107, i64* %PC, align 8
  %108 = load i64, i64* %5, align 8, !tbaa !2428
  %109 = add i64 %108, 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  store i64 %111, i64* %RBP, align 8, !tbaa !2428
  store i64 %109, i64* %5, align 8, !tbaa !2428
  %112 = add i64 %106, 2
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %109 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  %115 = add i64 %108, 16
  store i64 %115, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404a80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %32 = bitcast i64* %RAX to i64**
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %35 = bitcast i64* %34 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_404a90

block_404ac9:                                     ; preds = %block_404a90
  %36 = add i64 %80, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %5, align 8, !tbaa !2428
  %41 = add i64 %80, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404a90:                                     ; preds = %block_404a9e, %block_404a80
  %45 = phi i64 [ %143, %block_404a9e ], [ %.pre, %block_404a80 ]
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -8
  %48 = add i64 %45, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %47 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %RAX, align 8, !tbaa !2428
  %51 = add i64 %46, -16
  %52 = add i64 %45, 8
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %50, %54
  %56 = icmp ult i64 %50, %54
  %57 = zext i1 %56 to i8
  store i8 %57, i8* %26, align 1, !tbaa !2433
  %58 = trunc i64 %55 to i32
  %59 = and i32 %58, 255
  %60 = tail call i32 @llvm.ctpop.i32(i32 %59) #9
  %61 = trunc i32 %60 to i8
  %62 = and i8 %61, 1
  %63 = xor i8 %62, 1
  store i8 %63, i8* %27, align 1, !tbaa !2447
  %64 = xor i64 %54, %50
  %65 = xor i64 %64, %55
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  store i8 %68, i8* %28, align 1, !tbaa !2448
  %69 = icmp eq i64 %55, 0
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %29, align 1, !tbaa !2449
  %71 = lshr i64 %55, 63
  %72 = trunc i64 %71 to i8
  store i8 %72, i8* %30, align 1, !tbaa !2450
  %73 = lshr i64 %50, 63
  %74 = lshr i64 %54, 63
  %75 = xor i64 %74, %73
  %76 = xor i64 %71, %73
  %77 = add nuw nsw i64 %76, %75
  %78 = icmp eq i64 %77, 2
  %79 = zext i1 %78 to i8
  store i8 %79, i8* %31, align 1, !tbaa !2451
  %.v = select i1 %69, i64 57, i64 14
  %80 = add i64 %45, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %69, label %block_404ac9, label %block_404a9e

block_404a9e:                                     ; preds = %block_404a90
  %81 = add i64 %80, 4
  store i64 %81, i64* %PC, align 8
  %82 = load i64, i64* %49, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %83 = add i64 %82, 8
  store i64 %83, i64* %RCX, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %26, align 1, !tbaa !2433
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #9
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %27, align 1, !tbaa !2447
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %28, align 1, !tbaa !2448
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %29, align 1, !tbaa !2449
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %30, align 1, !tbaa !2450
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2451
  %105 = add i64 %80, 15
  store i64 %105, i64* %PC, align 8
  store i64 %83, i64* %49, align 8
  %106 = load i64*, i64** %32, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC, align 8
  %109 = load i64, i64* %106, align 8
  store i64 %109, i64* %33, align 1, !tbaa !2452
  store double 0.000000e+00, double* %35, align 1, !tbaa !2452
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -24
  %112 = add i64 %107, 8
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RAX, align 8, !tbaa !2428
  %115 = add i64 %114, 8
  store i64 %115, i64* %RCX, align 8, !tbaa !2428
  %116 = icmp ugt i64 %114, -9
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %26, align 1, !tbaa !2433
  %118 = trunc i64 %115 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #9
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %27, align 1, !tbaa !2447
  %124 = xor i64 %115, %114
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %28, align 1, !tbaa !2448
  %128 = icmp eq i64 %115, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %29, align 1, !tbaa !2449
  %130 = lshr i64 %115, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %30, align 1, !tbaa !2450
  %132 = lshr i64 %114, 63
  %133 = xor i64 %130, %132
  %134 = add nuw nsw i64 %133, %130
  %135 = icmp eq i64 %134, 2
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %31, align 1, !tbaa !2451
  %137 = add i64 %107, 19
  store i64 %137, i64* %PC, align 8
  store i64 %115, i64* %113, align 8
  %138 = load i64*, i64** %32, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC, align 8
  %141 = load i64, i64* %33, align 1
  store i64 %141, i64* %138, align 8
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, -52
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  br label %block_404a90
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_401d50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  %15 = add i64 %14, 1
  store i64 %15, i64* %PC, align 8
  %16 = load i64, i64* %5, align 8, !tbaa !2428
  %17 = add i64 %16, 8
  %18 = inttoptr i64 %16 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  store i64 %17, i64* %5, align 8, !tbaa !2428
  %20 = add i64 %14, 2
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  %23 = add i64 %16, 16
  store i64 %23, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406130:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_406170:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %RSI, align 8, !tbaa !2428
  %26 = add i64 %20, -16
  %27 = add i64 %22, 8
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %26 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %RDI, align 8, !tbaa !2428
  %30 = add i64 %22, 11
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %29 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = inttoptr i64 %25 to i64*
  store i64 %32, i64* %33, align 8
  %34 = add i64 %22, 15
  store i64 %34, i64* %PC, align 8
  %35 = load i64, i64* %5, align 8, !tbaa !2428
  %36 = add i64 %35, 8
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  store i64 %36, i64* %5, align 8, !tbaa !2428
  %39 = add i64 %22, 16
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %PC, align 8, !tbaa !2428
  %42 = add i64 %35, 16
  store i64 %42, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402550:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -120
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 112
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -24
  %50 = load i64, i64* %RDX, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -32
  %56 = load i64, i64* %RCX, align 8
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i64*
  store i64 %56, i64* %59, align 8
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -40
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %65 = load i64, i64* %64, align 1
  %66 = inttoptr i64 %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -48
  %69 = load i64, i64* %R8, align 8
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72, align 8
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -52
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 7
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %74 to i32*
  store i32 0, i32* %77, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_402578

block_4025f9:                                     ; preds = %block_402578
  %78 = load i64, i64* %RSP, align 8
  %79 = add i64 %78, 112
  store i64 %79, i64* %RSP, align 8, !tbaa !2428
  %80 = icmp ugt i64 %78, -113
  %81 = zext i1 %80 to i8
  store i8 %81, i8* %12, align 1, !tbaa !2433
  %82 = trunc i64 %79 to i32
  %83 = and i32 %82, 255
  %84 = tail call i32 @llvm.ctpop.i32(i32 %83) #9
  %85 = trunc i32 %84 to i8
  %86 = and i8 %85, 1
  %87 = xor i8 %86, 1
  store i8 %87, i8* %19, align 1, !tbaa !2447
  %88 = xor i64 %78, 16
  %89 = xor i64 %88, %79
  %90 = lshr i64 %89, 4
  %91 = trunc i64 %90 to i8
  %92 = and i8 %91, 1
  store i8 %92, i8* %25, align 1, !tbaa !2448
  %93 = icmp eq i64 %79, 0
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %28, align 1, !tbaa !2449
  %95 = lshr i64 %79, 63
  %96 = trunc i64 %95 to i8
  store i8 %96, i8* %31, align 1, !tbaa !2450
  %97 = lshr i64 %78, 63
  %98 = xor i64 %95, %97
  %99 = add nuw nsw i64 %98, %95
  %100 = icmp eq i64 %99, 2
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %37, align 1, !tbaa !2451
  %102 = add i64 %289, 5
  store i64 %102, i64* %PC, align 8
  %103 = add i64 %78, 120
  %104 = inttoptr i64 %79 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RBP, align 8, !tbaa !2428
  store i64 %103, i64* %RSP, align 8, !tbaa !2428
  %106 = add i64 %289, 6
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %103 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %PC, align 8, !tbaa !2428
  %109 = add i64 %78, 128
  store i64 %109, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402588:                                     ; preds = %block_402578
  %110 = add i64 %256, -8
  %111 = add i64 %289, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %256, -64
  %115 = add i64 %289, 8
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %117, -72
  %124 = add i64 %119, 8
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -24
  %128 = load i64, i64* %PC, align 8
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -80
  %133 = add i64 %128, 8
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load i64, i64* %RBP, align 8
  %136 = add i64 %135, -64
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 4
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %136 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RDI, align 8, !tbaa !2428
  %141 = add i64 %135, -72
  %142 = add i64 %137, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RSI, align 8, !tbaa !2428
  %145 = add i64 %135, -80
  %146 = add i64 %137, 12
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RDX, align 8, !tbaa !2428
  %149 = add i64 %137, 1920
  %150 = add i64 %137, 17
  %151 = load i64, i64* %RSP, align 8, !tbaa !2428
  %152 = add i64 %151, -8
  %153 = inttoptr i64 %152 to i64*
  store i64 %150, i64* %153, align 8
  store i64 %152, i64* %RSP, align 8, !tbaa !2428
  store i64 %149, i64* %PC, align 8, !tbaa !2428
  %154 = tail call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* nonnull %0, i64 %149, %struct.Memory* %MEMORY.0)
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -24
  %157 = load i64, i64* %PC, align 8
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %155, -88
  %162 = add i64 %157, 8
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i64*
  store i64 %160, i64* %163, align 8
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -32
  %166 = load i64, i64* %PC, align 8
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %164, -96
  %171 = add i64 %166, 8
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  store i64 %169, i64* %172, align 8
  %173 = load i64, i64* %RBP, align 8
  %174 = add i64 %173, -88
  %175 = load i64, i64* %PC, align 8
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = add i64 %173, -96
  %180 = add i64 %175, 8
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %179 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RSI, align 8, !tbaa !2428
  %183 = add i64 %175, 12687
  %184 = add i64 %175, 13
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* nonnull %0, i64 %183, %struct.Memory* %154)
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -24
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 4
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %189, -104
  %196 = add i64 %191, 8
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %195 to i64*
  store i64 %194, i64* %197, align 8
  %198 = load i64, i64* %RBP, align 8
  %199 = add i64 %198, -32
  %200 = load i64, i64* %PC, align 8
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = add i64 %198, -112
  %205 = add i64 %200, 8
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %203, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -104
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211, align 8
  store i64 %212, i64* %RDI, align 8, !tbaa !2428
  %213 = add i64 %207, -112
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RSI, align 8, !tbaa !2428
  %217 = add i64 %209, 2322
  %218 = add i64 %209, 13
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* nonnull %0, i64 %217, %struct.Memory* %188)
  %223 = load i64, i64* %RBP, align 8
  %224 = add i64 %223, -52
  %225 = load i64, i64* %PC, align 8
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %224 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp eq i32 %228, -1
  %232 = icmp eq i32 %229, 0
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %12, align 1, !tbaa !2433
  %235 = and i32 %229, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #9
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %19, align 1, !tbaa !2447
  %240 = xor i32 %229, %228
  %241 = lshr i32 %240, 4
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %25, align 1, !tbaa !2448
  %244 = zext i1 %232 to i8
  store i8 %244, i8* %28, align 1, !tbaa !2449
  %245 = lshr i32 %229, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %31, align 1, !tbaa !2450
  %247 = lshr i32 %228, 31
  %248 = xor i32 %245, %247
  %249 = add nuw nsw i32 %248, %245
  %250 = icmp eq i32 %249, 2
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %37, align 1, !tbaa !2451
  %252 = add i64 %225, 9
  store i64 %252, i64* %PC, align 8
  store i32 %229, i32* %227, align 4
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, -124
  store i64 %254, i64* %PC, align 8, !tbaa !2428
  br label %block_402578

block_402578:                                     ; preds = %block_402588, %block_402550
  %255 = phi i64 [ %.pre, %block_402550 ], [ %254, %block_402588 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402550 ], [ %222, %block_402588 ]
  %256 = load i64, i64* %RBP, align 8
  %257 = add i64 %256, -52
  %258 = add i64 %255, 3
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = zext i32 %260 to i64
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
  %263 = sub i32 %260, %262
  %264 = icmp ult i32 %260, %262
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %12, align 1, !tbaa !2433
  %266 = and i32 %263, 255
  %267 = tail call i32 @llvm.ctpop.i32(i32 %266) #9
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = xor i8 %269, 1
  store i8 %270, i8* %19, align 1, !tbaa !2447
  %271 = xor i32 %262, %260
  %272 = xor i32 %271, %263
  %273 = lshr i32 %272, 4
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  store i8 %275, i8* %25, align 1, !tbaa !2448
  %276 = icmp eq i32 %263, 0
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2449
  %278 = lshr i32 %263, 31
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2450
  %280 = lshr i32 %260, 31
  %281 = lshr i32 %262, 31
  %282 = xor i32 %281, %280
  %283 = xor i32 %278, %280
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %37, align 1, !tbaa !2451
  %287 = icmp ne i8 %279, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 16, i64 129
  %289 = add i64 %255, %.v
  store i64 %289, i64* %PC, align 8, !tbaa !2428
  br i1 %288, label %block_402588, label %block_4025f9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_406190:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -40
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 32
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2433
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #9
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2447
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2448
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2450
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2451
  %37 = add i64 %5, -24
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -16
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %47, -24
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %49, 80
  %58 = add i64 %49, 13
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %2)
  %63 = load i64, i64* %RBP, align 8
  %64 = add i64 %63, -8
  %65 = load i64, i64* %PC, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %63, -32
  store i64 %66, i64* %RSI, align 8, !tbaa !2428
  %67 = add i64 %65, 13
  store i64 %67, i64* %PC, align 8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %69 = load i64, i64* %68, align 1
  %70 = inttoptr i64 %66 to i64*
  store i64 %69, i64* %70, align 8
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 118
  %73 = add i64 %71, 5
  %74 = load i64, i64* %RSP, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %73, i64* %76, align 8
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  store i64 %72, i64* %PC, align 8, !tbaa !2428
  %77 = tail call %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* nonnull %0, i64 %72, %struct.Memory* %62)
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -8
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %68, align 1, !tbaa !2452
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %85 = bitcast i64* %84 to double*
  store double 0.000000e+00, double* %85, align 1, !tbaa !2452
  %86 = load i64, i64* %RSP, align 8
  %87 = add i64 %86, 32
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  %88 = icmp ugt i64 %86, -33
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %12, align 1, !tbaa !2433
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #9
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %19, align 1, !tbaa !2447
  %96 = xor i64 %87, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %24, align 1, !tbaa !2448
  %100 = icmp eq i64 %87, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %27, align 1, !tbaa !2449
  %102 = lshr i64 %87, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %30, align 1, !tbaa !2450
  %104 = lshr i64 %86, 63
  %105 = xor i64 %102, %104
  %106 = add nuw nsw i64 %105, %102
  %107 = icmp eq i64 %106, 2
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %36, align 1, !tbaa !2451
  %109 = add i64 %80, 10
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %86, 40
  %111 = inttoptr i64 %87 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %80, 11
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %110 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %116 = add i64 %86, 48
  store i64 %116, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %77
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400bb0_frame_dummy() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400bb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_400bb0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400bb0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp_wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400770__GLOBAL__sub_I_stepanov_abstraction_cpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_400b80___do_global_dtors_aux() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_400b80___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b80___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208d8_realloc(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4006f0_printf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620950_exit(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208a0_clock(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208f8_exp(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exp to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208b8_log(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @log to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4006e0_strlen(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @strlen to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_406730___libc_csu_fini() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_406730___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406730___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4066c0___libc_csu_init() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4066c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4066c0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4066c0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401260;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401260_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620928___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_400720_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_6208f0_rand(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @rand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620948_atoi(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atoi to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620900_atof(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @atof to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_620930_srand(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @srand to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4032d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4032d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403130__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEEbRKS0_IT_ESA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d80__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405870__ZN9benchmark13insertionSortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4027b0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e90__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4039f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4039f0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406190;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406190__ZplI12ValueWrapperIS0_IS0_IdEEEES0_IT_ERKS5_S7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c90__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppIdE14PointerWrapperIT_ERS2_i() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4046c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppIdE14PointerWrapperIT_ERS2_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4046c0__ZppIdE14PointerWrapperIT_ERS2_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplIdE12ValueWrapperIT_ERKS2_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4062b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplIdE12ValueWrapperIT_ERKS2_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4062b0__ZplIdE12ValueWrapperIT_ERKS2_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404230__ZN9benchmark7sift_inIP12ValueWrapperIdES2_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIPddEEvT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404ad0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404ad0__ZN9benchmark8heapsortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @21, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4031f0__ZltI12ValueWrapperIS0_IdEEEbRKS0_IT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405d50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @22, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405d50__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EET0_T_SF_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405940;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @23, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405940__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @24, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405fb0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEES0_IT_ERKSA_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @25, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401df0__ZN9benchmark4fillIP12ValueWrapperIdES2_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403300;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @26, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403300__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405eb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @27, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405eb0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @28, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4065d0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402990;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @29, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402990__Z14test_heap_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406540;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @30, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406540__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @31, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402bf0__Z14test_heap_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @32, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4060d0__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEES0_IT_ERKS7_S9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404460;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @33, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404460__ZN9benchmark8heapsortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4065a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @34, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4065a0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @35, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404050__ZN9benchmark8heapsortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4023a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @36, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4023a0__Z19test_insertion_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @37, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4061d0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IS3_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @38, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403010__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEE14PointerWrapperIT_ERSD_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIdEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @39, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIdEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d60__ZN12ValueWrapperIdEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @40, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402b40__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401ed0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @41, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401ed0__Z15test_accumulateI14PointerWrapperIdEdEvT_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdS1_EEvT_S2_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404a80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @42, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIPdS1_EEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404a80__ZN9benchmark4copyIPdS1_EEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @43, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRKS0_IT_ES5__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403220__ZltI12ValueWrapperIdEEbRKS0_IT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405dd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @44, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405dd0__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIdEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @45, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIdEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d50__ZN12ValueWrapperIdEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @46, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cd0__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401bd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @47, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401bd0__ZN14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEC2EPSA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401f40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @48, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401f40__Z15test_accumulateIP12ValueWrapperIdES1_EvT_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4022f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @49, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4022f0__Z19test_insertion_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @50, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402600__Z14test_quicksortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406734;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @51, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406734__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404150;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @52, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404150__Z13verify_sortedIP12ValueWrapperIdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @53, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d30__ZN12ValueWrapperIS_IdEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @54, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403c60__ZppI12ValueWrapperIdEE14PointerWrapperIT_ERS4_i(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ff0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @55, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405ff0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2IS8_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @56, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401e30__ZN9benchmark4fillIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ef0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @57, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405ef0__ZNK12ValueWrapperIS_IS_IS_IdEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @58, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401fc0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z9check_sumd() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405df0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @59, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z9check_sumd_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405df0__Z9check_sumd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4035e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @60, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4035e0__ZN9benchmark8heapsortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405b30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @61, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405b30__ZN9benchmark13insertionSortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @62, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406660__ZN12ValueWrapperIS_IS_IdEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403190;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @63, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403190__ZltI12ValueWrapperIS0_IS0_IS0_IdEEEEEbRKS0_IT_ES8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404fe0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @64, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404fe0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @65, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402c70__Z14test_heap_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @66, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403280__ZppI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @67, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403730__ZN9benchmark9is_sortedIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEbT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402ac0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @68, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402ac0__Z14test_heap_sortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @69, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405010__ZN9benchmark9quicksortIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4032a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @70, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4032a0__ZmiI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEElR14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @71, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402680__Z14test_quicksortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @72, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIdEEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403cd0__ZNK14PointerWrapperI12ValueWrapperIdEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @73, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406130__ZplI12ValueWrapperIS0_IS0_IS0_IdEEEEES0_IT_ERKS6_S8_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4037c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @74, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4037c0__ZN9benchmark7sift_inIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406230;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @75, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406230__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IS2_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4028e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @76, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4028e0__Z14test_quicksortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @77, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c70__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @78, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404e30__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4fillIPddEEvT_S2_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @79, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4fillIPddEEvT_S2_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401db0__ZN9benchmark4fillIPddEEvT_S2_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405310;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @80, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405310__ZN9benchmark9quicksortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @81, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4052c0__ZmmI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @82, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IdEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f30__ZNK12ValueWrapperIS_IdEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppIdER14PointerWrapperIT_ES3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @83, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppIdER14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404750__ZppIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIPddEET0_T_S3_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4064f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @84, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateIPddEET0_T_S3_S2__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4064f0__ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIPdEEbT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @85, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedIPdEEbT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404c10__ZN9benchmark9is_sortedIPdEEbT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @86, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d20__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESD_EEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @87, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404600__ZN9benchmark9is_sortedI14PointerWrapperIdEEEbT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406390;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @88, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406390__ZN9benchmark10accumulateI14PointerWrapperI12ValueWrapperIdEES3_EET0_T_S6_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402a10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @89, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402a10__Z14test_heap_sortI14PointerWrapperIdEdEvT_S2_S2_S2_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13record_resultdPKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400bc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @90, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13record_resultdPKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400bc0__Z13record_resultdPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @91, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e50__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404000;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @92, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404000__ZN9benchmark4copyIP12ValueWrapperIdES3_EEvT_S4_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @93, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401bf0__ZN14PointerWrapperI12ValueWrapperIdEEC2EPS1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402860;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @94, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402860__Z14test_quicksortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @95, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406690__ZN12ValueWrapperIS_IdEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @96, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403050__ZneI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEbRK14PointerWrapperIT_ESF_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIPdEvT_S1_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404bc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @97, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedIPdEvT_S1__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404bc0__Z13verify_sortedIPdEvT_S1_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIPddEEvT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405c70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @98, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405c70__ZN9benchmark13insertionSortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @99, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406600__ZN12ValueWrapperIS_IS_IS_IS_IdEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @100, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c50__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z17summarize_simplefP8_IO_FILEPKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400fe0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @101, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z17summarize_simplefP8_IO_FILEPKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400fe0__Z17summarize_simplefP8_IO_FILEPKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4041a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @102, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4041a0__ZN9benchmark9is_sortedIP12ValueWrapperIdEEEbT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405430;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @103, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405430__ZN9benchmark9quicksortI14PointerWrapperIdEdEEvT_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402270;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @104, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402270__Z19test_insertion_sortIPddEvT_S1_S1_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @105, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f10__ZNK12ValueWrapperIS_IS_IdEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @106, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400680__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @107, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406170__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2IS4_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406300;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @108, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IdEEC2IS0_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406300__ZN12ValueWrapperIS_IdEEC2IS0_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4024d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @109, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4024d0__Z19test_insertion_sortIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_SC_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406480;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @110, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406480__ZN9benchmark10accumulateI14PointerWrapperIdEdEET0_T_S4_S3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @111, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405e70__ZNK12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405130;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @112, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405130__ZN9benchmark9quicksortI14PointerWrapperI12ValueWrapperIdEES3_EEvT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4021b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @113, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4021b0__ZN9benchmark4copyIPdP12ValueWrapperIdEEEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404700;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @114, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404700__ZneIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4043e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @115, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4043e0__ZN9benchmark4copyI14PointerWrapperIdES2_EEvT_S3_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z5timerv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401220;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @116, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z5timerv_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401220__Z5timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inIPddEEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @117, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inIPddEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404c90__ZN9benchmark7sift_inIPddEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406570;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @118, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406570__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402da0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @119, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402da0__ZN9benchmark8heapsortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406070;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @120, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406070__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IdEEEEEEES0_IT_ERKS8_SA_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @121, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c30__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405a60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @122, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405a60__ZN9benchmark13insertionSortIP12ValueWrapperIdES2_EEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark11fill_randomIPddEEvT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @123, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark11fill_randomIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402160__ZN9benchmark11fill_randomIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmIdER14PointerWrapperIT_ES3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4055d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @124, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmIdER14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4055d0__ZmmIdER14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @125, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403cf0__ZppI12ValueWrapperIdEER14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403080;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @126, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403080__ZNK14PointerWrapperI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4061f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @127, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4061f0__ZplI12ValueWrapperIS0_IdEEES0_IT_ERKS4_S6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403ca0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @128, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403ca0__ZneI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @129, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cb0__ZN12ValueWrapperIS_IS_IS_IS_IS_IdEEEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403590;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @130, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403590__ZN9benchmark4copyIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESC_EEvT_SD_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403ba0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @131, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403ba0__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIdEEEEbT_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @132, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402050__Z15test_accumulateIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEESA_EvT_SC_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperIdEEvT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4045a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @133, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperIdEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4045a0__Z13verify_sortedI14PointerWrapperIdEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @134, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403d10__ZmiI12ValueWrapperIdEElR14PointerWrapperIT_ES5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltIdEbRK14PointerWrapperIT_ES4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4055f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @135, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltIdEbRK14PointerWrapperIT_ES4__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4055f0__ZltIdEbRK14PointerWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @136, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4030a0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEbRKS0_IT_ESD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z11start_timerv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401200;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @137, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z11start_timerv_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401200__Z11start_timerv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateIPddEvT_S1_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401e70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @138, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateIPddEvT_S1_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401e70__Z15test_accumulateIPddEvT_S1_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4060b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @139, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4060b0__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEC2IS6_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402ef0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @140, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402ef0__Z13verify_sortedI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEEEvT_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4047d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @141, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4047d0__ZN9benchmark7sift_inI14PointerWrapperIdEdEEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK14PointerWrapperIdEdeEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @142, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK14PointerWrapperIdEdeEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404730__ZNK14PointerWrapperIdEdeEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406010;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @143, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406010__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEES0_IT_ERKS9_SB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @144, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405750__ZN9benchmark13insertionSortI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEESC_EEvT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @145, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f70__ZplI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEES0_IT_ERKSB_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406250;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @146, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIdEES0_IT_ERKS3_S5__wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406250__ZplI12ValueWrapperIdEES0_IT_ERKS3_S5_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402420;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @147, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402420__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIdEES2_EvT_S4_S4_S4_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN14PointerWrapperIdEC2EPd() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @148, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN14PointerWrapperIdEC2EPd_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c10__ZN14PointerWrapperIdEC2EPd(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406290;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @149, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406290__ZN12ValueWrapperIS_IS_IdEEEC2IS1_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4030d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @150, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4030d0__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEbRKS0_IT_ESC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9quicksortIPddEEvT_S2_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @151, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9quicksortIPddEEvT_S2__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405620__ZN9benchmark9quicksortIPddEEvT_S2_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @152, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403d40__ZplI12ValueWrapperIdEE14PointerWrapperIT_ERS4_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z9summarizePKciiii() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400cc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @153, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z9summarizePKciiii_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400cc0__Z9summarizePKciiii(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IdEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @154, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IdEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401d10__ZN12ValueWrapperIS_IS_IdEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406320;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @155, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406320__ZN9benchmark10accumulateIP12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEESB_EET0_T_SE_SD_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403160;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @156, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403160__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IdEEEEEEbRKS0_IT_ES9_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @157, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406630__ZN12ValueWrapperIS_IS_IS_IdEEEEC2IdEERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4031c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @158, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4031c0__ZltI12ValueWrapperIS0_IS0_IdEEEEbRKS0_IT_ES7_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @159, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402550__Z19test_insertion_sortI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_SD_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4036e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @160, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4036e0__Z13verify_sortedIP12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEEvT_SC_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404fc0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @161, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404fc0__ZmmI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEEEER14PointerWrapperIT_ESE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIdEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405f50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @162, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIdEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405f50__ZNK12ValueWrapperIdEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4052e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @163, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4052e0__ZltI12ValueWrapperIdEEbRK14PointerWrapperIT_ES6_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402730;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @164, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402730__Z14test_quicksortIP12ValueWrapperIdES1_EvT_S3_S3_S3_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4020d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @165, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4020d0__Z15test_accumulateI14PointerWrapperI12ValueWrapperIS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IS1_IdEEEEEEEEEEESB_EvT_SD_T0_PKc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402f50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @166, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402f50__ZN9benchmark9is_sortedI14PointerWrapperI12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEEbT_SE_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @167, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406110__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IdEEEEEEEC2IS5_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @168, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403b40__Z13verify_sortedI14PointerWrapperI12ValueWrapperIdEEEvT_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @169, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401cf0__ZN12ValueWrapperIS_IS_IS_IdEEEEC2Ev(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403970;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @170, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403970__ZN9benchmark4copyI14PointerWrapperI12ValueWrapperIdEES4_EEvT_S5_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x405ed0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @171, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_405ed0__ZNK12ValueWrapperIS_IS_IS_IS_IdEEEEEcvT_IdEEv(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402210;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @172, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402210__ZN9benchmark4copyIPdP12ValueWrapperIS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IS2_IdEEEEEEEEEEEEvT_SE_T0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406050;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @173, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @_ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406050__ZN12ValueWrapperIS_IS_IS_IS_IS_IS_IS_IS_IdEEEEEEEEEC2IS7_EERKT_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZmiIdElR14PointerWrapperIT_ES3_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @174, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZmiIdElR14PointerWrapperIT_ES3__wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404770__ZmiIdElR14PointerWrapperIT_ES3_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x406410;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @175, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4__wrapper(%struct.State*, i64, %struct.Memory* readnone) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_406410__ZN9benchmark10accumulateIP12ValueWrapperIdES2_EET0_T_S5_S4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltIdEbRK12ValueWrapperIT_ES4_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403250;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @176, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltIdEbRK12ValueWrapperIT_ES4__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403250__ZltIdEbRK12ValueWrapperIT_ES4_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZplIdE14PointerWrapperIT_ERS2_l() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4047a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @177, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZplIdE14PointerWrapperIT_ERS2_l_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4047a0__ZplIdE14PointerWrapperIT_ERS2_l(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403100;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @178, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403100__ZltI12ValueWrapperIS0_IS0_IS0_IS0_IS0_IS0_IdEEEEEEEEbRKS0_IT_ESB_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403d70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @179, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @_ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0__wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403d70__ZN9benchmark7sift_inI14PointerWrapperI12ValueWrapperIdEES3_EEvlT_lT0_(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #9 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_4066c0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #9 {
  tail call void @callback_sub_406730___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { naked nobuiltin noinline nounwind }
attributes #9 = { nounwind }
attributes #10 = { noinline nounwind }
attributes #11 = { norecurse nounwind }
attributes #12 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2430, !2430, i64 0}
!2433 = !{!2434, !2430, i64 2065}
!2434 = !{!"_ZTS5State", !2430, i64 16, !2435, i64 2064, !2430, i64 2080, !2436, i64 2088, !2438, i64 2112, !2440, i64 2208, !2441, i64 2480, !2442, i64 2608, !2443, i64 2736, !2430, i64 2760, !2430, i64 2768, !2444, i64 3280}
!2435 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2436 = !{!"_ZTS8Segments", !2437, i64 0, !2430, i64 2, !2437, i64 4, !2430, i64 6, !2437, i64 8, !2430, i64 10, !2437, i64 12, !2430, i64 14, !2437, i64 16, !2430, i64 18, !2437, i64 20, !2430, i64 22}
!2437 = !{!"short", !2430, i64 0}
!2438 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88}
!2439 = !{!"_ZTS3Reg", !2430, i64 0}
!2440 = !{!"_ZTS3GPR", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88, !2429, i64 96, !2439, i64 104, !2429, i64 112, !2439, i64 120, !2429, i64 128, !2439, i64 136, !2429, i64 144, !2439, i64 152, !2429, i64 160, !2439, i64 168, !2429, i64 176, !2439, i64 184, !2429, i64 192, !2439, i64 200, !2429, i64 208, !2439, i64 216, !2429, i64 224, !2439, i64 232, !2429, i64 240, !2439, i64 248, !2429, i64 256, !2439, i64 264}
!2441 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2442 = !{!"_ZTS3MMX", !2430, i64 0}
!2443 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2444 = !{!"_ZTS13SegmentCaches", !2445, i64 0, !2445, i64 16, !2445, i64 32, !2445, i64 48, !2445, i64 64, !2445, i64 80}
!2445 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2446, i64 8, !2446, i64 12}
!2446 = !{!"int", !2430, i64 0}
!2447 = !{!2434, !2430, i64 2067}
!2448 = !{!2434, !2430, i64 2069}
!2449 = !{!2434, !2430, i64 2071}
!2450 = !{!2434, !2430, i64 2073}
!2451 = !{!2434, !2430, i64 2077}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"float", !2430, i64 0}
!2456 = !{!2446, !2446, i64 0}
