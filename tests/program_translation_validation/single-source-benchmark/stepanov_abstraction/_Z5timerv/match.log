Writing '/tmp/tmpfr4mt7jv.dot'...
Writing '/tmp/tmpfr4mt7jv.dot':Done

Reading LLVM: /tmp/tmp_xl843jq-query.ll
Extracting function [_Z5timerv] from /tmp/tmp_xl843jq-query.ll
Dot file generated!
Writing '/tmp/tmpoj50x1cc.dot'...
Writing '/tmp/tmpoj50x1cc.dot':Done

Reading LLVM: /tmp/tmpht51rlpx-target.ll
Extracting function [_Z5timerv] from /tmp/tmpht51rlpx-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %10, -2897
- 13 %12 = add i64 %10, 8
- 14 %13 = add i64 %7, -16
- 15 %14 = inttoptr i64 %13 to i64*
- 16 store i64 %12, i64* %14, align 8
- 17 store i64 %13, i64* %6, align 8
- 18 store i64 %11, i64* %3, align 8
- 19 %15 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
- 20 %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 21 %17 = bitcast [32 x %union.VectorReg]* %16 to i8*
- 22 %18 = load i64, i64* %3, align 8
- 23 %19 = add i64 %18, ptrtoint (%G_0x5517__rip__type* @G_0x5517__rip_ to i64)
- 24 %20 = add i64 %18, 8
- 25 store i64 %20, i64* %3, align 8
- 26 %21 = inttoptr i64 %19 to double*
- 27 %22 = load double, double* %21, align 8
- 28 %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 29 %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 30 %24 = load i64, i64* %RAX.i13, align 8
- 31 store i64 %24, i64* bitcast (%G_0x609128_type* @G_0x609128 to i64*), align 8
- 32 %25 = load i64, i64* bitcast (%G_0x609120_type* @G_0x609120 to i64*), align 8
- 33 %26 = sub i64 %24, %25
- 34 store i64 %26, i64* %RAX.i13, align 8
- 35 %27 = icmp ult i64 %24, %25
- 36 %28 = zext i1 %27 to i8
- 37 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 38 store i8 %28, i8* %29, align 1
- 39 %30 = trunc i64 %26 to i32
- 40 %31 = and i32 %30, 255
- 41 %32 = tail call i32 @llvm.ctpop.i32(i32 %31)
- 42 %33 = trunc i32 %32 to i8
- 43 %34 = and i8 %33, 1
- 44 %35 = xor i8 %34, 1
- 45 %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 46 store i8 %35, i8* %36, align 1
- 47 %37 = xor i64 %25, %24
- 48 %38 = xor i64 %37, %26
- 49 %39 = lshr i64 %38, 4
- 50 %40 = trunc i64 %39 to i8
- 51 %41 = and i8 %40, 1
- 52 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 53 store i8 %41, i8* %42, align 1
- 54 %43 = icmp eq i64 %26, 0
- 55 %44 = zext i1 %43 to i8
- 56 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 57 store i8 %44, i8* %45, align 1
- 58 %46 = lshr i64 %26, 63
- 59 %47 = trunc i64 %46 to i8
- 60 %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 61 store i8 %47, i8* %48, align 1
- 62 %49 = lshr i64 %24, 63
- 63 %50 = lshr i64 %25, 63
- 64 %51 = xor i64 %50, %49
- 65 %52 = xor i64 %46, %49
- 66 %53 = add nuw nsw i64 %52, %51
- 67 %54 = icmp eq i64 %53, 2
- 68 %55 = zext i1 %54 to i8
- 69 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 70 store i8 %55, i8* %56, align 1
- 71 %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 72 %58 = sitofp i64 %26 to double
- 73 %59 = bitcast %union.VectorReg* %57 to double*
- 74 %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 75 %61 = bitcast i64* %60 to \<2 x i32\>*
- 76 %62 = load \<2 x i32\>, \<2 x i32\>* %61, align 1
- 77 %63 = fdiv double %58, %22
- 78 store double %63, double* %59, align 1
- 79 %.cast = bitcast double %63 to \<2 x i32\>
- 80 %64 = extractelement \<2 x i32\> %.cast, i32 0
- 81 %65 = bitcast [32 x %union.VectorReg]* %16 to i32*
- 82 store i32 %64, i32* %65, align 1
- 83 %66 = extractelement \<2 x i32\> %.cast, i32 1
- 84 %67 = getelementptr inbounds i8, i8* %17, i64 4
- 85 %68 = bitcast i8* %67 to i32*
- 86 store i32 %66, i32* %68, align 1
- 87 %69 = extractelement \<2 x i32\> %62, i32 0
- 88 %70 = bitcast i64* %23 to i32*
- 89 store i32 %69, i32* %70, align 1
- 90 %71 = extractelement \<2 x i32\> %62, i32 1
- 91 %72 = getelementptr inbounds i8, i8* %17, i64 12
- 92 %73 = bitcast i8* %72 to i32*
- 93 store i32 %71, i32* %73, align 1
- 94 %74 = add i64 %18, 45
- 95 store i64 %74, i64* %3, align 8
- 96 %75 = load i64, i64* %6, align 8
- 97 %76 = add i64 %75, 8
- 98 %77 = inttoptr i64 %75 to i64*
- 99 %78 = load i64, i64* %77, align 8
- 100 store i64 %78, i64* %RBP.i, align 8
- 101 store i64 %76, i64* %6, align 8
- 102 %79 = add i64 %18, 46
- 103 store i64 %79, i64* %3, align 8
- 104 %80 = inttoptr i64 %76 to i64*
- 105 %81 = load i64, i64* %80, align 8
- 106 store i64 %81, i64* %3, align 8
- 107 %82 = add i64 %75, 16
- 108 store i64 %82, i64* %6, align 8
- 109 \<badref\> = ret %struct.Memory* %15
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f84d155f598>, {0: {0}, 1: {2}, 2: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 3: {6}, 4: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 5: {8}, 6: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 7: {10}, 8: {18, 11, 100, 94}, 9: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 10: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 11: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 12: {15}, 13: {16, 93}, 14: {17}, 15: {18, 11, 100, 94}, 16: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 17: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 18: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 19: {38, 22}, 20: {3}, 21: {69, 71, 75, 77, 81, 84, 23, 88}, 22: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 23: {63}, 24: {16, 93}, 25: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 26: {18, 11, 100, 94}, 27: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 28: {26}, 29: {1}, 30: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 31: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 32: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 33: {30}, 34: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 35: {32, 51}, 36: {65, 33, 52}, 37: {34}, 38: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 39: {56, 36, 47, 39}, 40: {37}, 41: {38, 22}, 42: {56, 36, 47, 39}, 43: {40, 48}, 44: {41}, 45: {42}, 46: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 47: {61, 44, 45, 62}, 48: {61, 44, 45, 62}, 49: {46}, 50: {56, 36, 47, 39}, 51: {40, 48}, 52: {49}, 53: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 54: {32, 51}, 55: {65, 33, 52}, 56: {53}, 57: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 58: {59, 60, 55}, 59: {56, 36, 47, 39}, 60: {57}, 61: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 62: {59, 60, 55}, 63: {59, 60, 55}, 64: {61, 44, 45, 62}, 65: {61, 44, 45, 62}, 66: {63}, 67: {64}, 68: {65, 33, 52}, 69: {66}, 70: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 71: {4}, 72: {68}, 73: {69, 71, 75, 77, 81, 84, 23, 88}, 74: {70}, 75: {69, 71, 75, 77, 81, 84, 23, 88}, 76: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 77: {73}, 78: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 79: {69, 71, 75, 77, 81, 84, 23, 88}, 80: {83, 76}, 81: {69, 71, 75, 77, 81, 84, 23, 88}, 82: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 83: {86, 79}, 84: {80}, 85: {69, 71, 75, 77, 81, 84, 23, 88}, 86: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 87: {83, 76}, 88: {69, 71, 75, 77, 81, 84, 23, 88}, 89: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 90: {86, 79}, 91: {87}, 92: {69, 71, 75, 77, 81, 84, 23, 88}, 93: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 94: {90}, 95: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 96: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 97: {16, 93}, 98: {18, 11, 100, 94}, 99: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 100: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 101: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 102: {98}, 103: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 104: {18, 11, 100, 94}, 105: {5, 101, 72, 9, 13, 24, 25, 27, 92, 29, 95}, 106: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 107: {103}, 108: {7, 12, 14, 19, 20, 21, 28, 31, 35, 43, 50, 54, 58, 67, 74, 78, 82, 85, 89, 91, 96, 97, 99, 102, 104}, 109: {105}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f84d155f598>, {0: {0}, 1: {2}, 2: {5}, 3: {6}, 4: {7}, 5: {8}, 6: {9}, 7: {10}, 8: {11}, 9: {12}, 10: {13}, 11: {14}, 12: {15}, 13: {16}, 14: {17}, 15: {18}, 16: {19}, 17: {20}, 18: {21}, 19: {22}, 20: {3}, 21: {23}, 22: {24}, 23: set(), 24: set(), 25: set(), 26: set(), 27: set(), 28: {26}, 29: {1}, 30: {27}, 31: {28}, 32: {27, 29}, 33: {30}, 34: {31}, 35: {32}, 36: {33}, 37: {34}, 38: {35}, 39: {36}, 40: {37}, 41: {38}, 42: {39}, 43: {40}, 44: {41}, 45: {42}, 46: {43}, 47: {44}, 48: {45}, 49: {46}, 50: {47}, 51: {48}, 52: {49}, 53: {50}, 54: {51}, 55: {52}, 56: {53}, 57: {54}, 58: {55}, 59: {56}, 60: {57}, 61: {58}, 62: {59}, 63: {59, 60}, 64: {61, 62}, 65: {62}, 66: {63}, 67: {64}, 68: {65}, 69: {66}, 70: {67}, 71: set(), 72: set(), 73: set(), 74: {70}, 75: {71}, 76: {72}, 77: set(), 78: set(), 79: set(), 80: set(), 81: set(), 82: set(), 83: set(), 84: set(), 85: set(), 86: set(), 87: {83}, 88: {84}, 89: {85}, 90: {86}, 91: {87}, 92: {88}, 93: {89}, 94: {90}, 95: {91}, 96: {92}, 97: {93}, 98: {94}, 99: {95}, 100: {96}, 101: {97}, 102: {98}, 103: {99}, 104: {100}, 105: {101}, 106: {102}, 107: {103}, 108: {104}, 109: {105}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 add add
EXACT 14 add add
EXACT 15 inttoptr inttoptr
EXACT 16 store store
EXACT 17 store store
EXACT 18 store store
EXACT 19 tail tail
EXACT 20 getelementptr getelementptr
EXACT 21 bitcast bitcast
EXACT 22 load load
NO MATCH 23
NO MATCH 24
NO MATCH 25
NO MATCH 26
NO MATCH 27
EXACT 28 getelementptr getelementptr
EXACT 29 getelementptr getelementptr
EXACT 30 load load
EXACT 31 store store
MORE 32 POT: 2
EXACT 33 sub sub
EXACT 34 store store
EXACT 35 icmp icmp
EXACT 36 zext zext
EXACT 37 getelementptr getelementptr
EXACT 38 store store
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 tail tail
EXACT 42 trunc trunc
EXACT 43 and and
EXACT 44 xor xor
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 xor xor
EXACT 48 xor xor
EXACT 49 lshr lshr
EXACT 50 trunc trunc
EXACT 51 and and
EXACT 52 getelementptr getelementptr
EXACT 53 store store
EXACT 54 icmp icmp
EXACT 55 zext zext
EXACT 56 getelementptr getelementptr
EXACT 57 store store
EXACT 58 lshr lshr
EXACT 59 trunc trunc
EXACT 60 getelementptr getelementptr
EXACT 61 store store
EXACT 62 lshr lshr
MORE 63 POT: 2
MORE 64 POT: 2
EXACT 65 xor xor
EXACT 66 add add
EXACT 67 icmp icmp
EXACT 68 zext zext
EXACT 69 getelementptr getelementptr
EXACT 70 store store
NO MATCH 71
NO MATCH 72
NO MATCH 73
EXACT 74 getelementptr getelementptr
EXACT 75 bitcast bitcast
EXACT 76 load load
NO MATCH 77
NO MATCH 78
NO MATCH 79
NO MATCH 80
NO MATCH 81
NO MATCH 82
NO MATCH 83
NO MATCH 84
NO MATCH 85
NO MATCH 86
EXACT 87 extractelement extractelement
EXACT 88 bitcast bitcast
EXACT 89 store store
EXACT 90 extractelement extractelement
EXACT 91 getelementptr getelementptr
EXACT 92 bitcast bitcast
EXACT 93 store store
EXACT 94 add add
EXACT 95 store store
EXACT 96 load load
EXACT 97 add add
EXACT 98 inttoptr inttoptr
EXACT 99 load load
EXACT 100 store store
EXACT 101 store store
EXACT 102 add add
EXACT 103 store store
EXACT 104 inttoptr inttoptr
EXACT 105 load load
EXACT 106 store store
EXACT 107 add add
EXACT 108 store store
EXACT 109 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 3 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
- 5 %5 = load i64, i64* %RBP, align 8
- 6 %6 = add i64 %1, 1
- 7 store i64 %6, i64* %PC, align 8
- 8 %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 9 %8 = load i64, i64* %7, align 8
- 10 %9 = add i64 %8, -8
- 11 %10 = inttoptr i64 %9 to i64*
- 12 store i64 %5, i64* %10, align 8
- 13 %11 = load i64, i64* %PC, align 8
- 14 store i64 %9, i64* %RBP, align 8
- 15 %12 = add i64 %11, -2897
- 16 %13 = add i64 %11, 8
- 17 %14 = add i64 %8, -16
- 18 %15 = inttoptr i64 %14 to i64*
- 19 store i64 %13, i64* %15, align 8
- 20 store i64 %14, i64* %7, align 8
- 21 store i64 %12, i64* %PC, align 8
- 22 %16 = tail call fastcc %struct.Memory* @ext_4006e0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
- 23 %17 = bitcast [32 x %union.VectorReg]* %3 to i8*
- 24 %18 = load i64, i64* %PC, align 8
- 25 %19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to double*), align 8
- 26 %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 27 %21 = load i64, i64* %RAX, align 8
- 28 store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8
- 29 %22 = load i64, i64* bitcast (%start_time_type* @start_time to i64*), align 8
- 30 %23 = sub i64 %21, %22
- 31 store i64 %23, i64* %RAX, align 8
- 32 %24 = icmp ult i64 %21, %22
- 33 %25 = zext i1 %24 to i8
- 34 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 35 store i8 %25, i8* %26, align 1
- 36 %27 = trunc i64 %23 to i32
- 37 %28 = and i32 %27, 255
- 38 %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #12
- 39 %30 = trunc i32 %29 to i8
- 40 %31 = and i8 %30, 1
- 41 %32 = xor i8 %31, 1
- 42 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 43 store i8 %32, i8* %33, align 1
- 44 %34 = xor i64 %22, %21
- 45 %35 = xor i64 %34, %23
- 46 %36 = lshr i64 %35, 4
- 47 %37 = trunc i64 %36 to i8
- 48 %38 = and i8 %37, 1
- 49 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 50 store i8 %38, i8* %39, align 1
- 51 %40 = icmp eq i64 %23, 0
- 52 %41 = zext i1 %40 to i8
- 53 %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 54 store i8 %41, i8* %42, align 1
- 55 %43 = lshr i64 %23, 63
- 56 %44 = trunc i64 %43 to i8
- 57 %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 58 store i8 %44, i8* %45, align 1
- 59 %46 = lshr i64 %21, 63
- 60 %47 = lshr i64 %22, 63
- 61 %48 = xor i64 %47, %46
- 62 %49 = xor i64 %43, %46
- 63 %50 = add nuw nsw i64 %49, %48
- 64 %51 = icmp eq i64 %50, 2
- 65 %52 = zext i1 %51 to i8
- 66 %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 67 store i8 %52, i8* %53, align 1
- 68 %54 = sitofp i64 %23 to double
- 69 %55 = bitcast %union.VectorReg* %4 to double*
- 70 %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
- 71 %57 = bitcast i64* %56 to \<2 x i32\>*
- 72 %58 = load \<2 x i32\>, \<2 x i32\>* %57, align 1
- 73 %59 = fdiv double %54, %19
- 74 store double %59, double* %55, align 1
- 75 %.cast = bitcast double %59 to \<2 x i32\>
- 76 %60 = extractelement \<2 x i32\> %.cast, i32 0
- 77 %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
- 78 store i32 %60, i32* %61, align 1
- 79 %62 = extractelement \<2 x i32\> %.cast, i32 1
- 80 %63 = getelementptr inbounds i8, i8* %17, i64 4
- 81 %64 = bitcast i8* %63 to i32*
- 82 store i32 %62, i32* %64, align 1
- 83 %65 = extractelement \<2 x i32\> %58, i32 0
- 84 %66 = bitcast i64* %20 to i32*
- 85 store i32 %65, i32* %66, align 1
- 86 %67 = extractelement \<2 x i32\> %58, i32 1
- 87 %68 = getelementptr inbounds i8, i8* %17, i64 12
- 88 %69 = bitcast i8* %68 to i32*
- 89 store i32 %67, i32* %69, align 1
- 90 %70 = add i64 %18, 45
- 91 store i64 %70, i64* %PC, align 8
- 92 %71 = load i64, i64* %7, align 8
- 93 %72 = add i64 %71, 8
- 94 %73 = inttoptr i64 %71 to i64*
- 95 %74 = load i64, i64* %73, align 8
- 96 store i64 %74, i64* %RBP, align 8
- 97 store i64 %72, i64* %7, align 8
- 98 %75 = add i64 %18, 46
- 99 store i64 %75, i64* %PC, align 8
- 100 %76 = inttoptr i64 %72 to i64*
- 101 %77 = load i64, i64* %76, align 8
- 102 store i64 %77, i64* %PC, align 8
- 103 %78 = add i64 %71, 16
- 104 store i64 %78, i64* %7, align 8
- 105 \<badref\> = ret %struct.Memory* %16
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f84d155f730>, {0: {0}, 1: {29}, 2: {1}, 3: {20}, 4: {71}, 5: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 6: {3}, 7: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 8: {5}, 9: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 10: {7}, 11: {98, 8, 104, 15, 26}, 12: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 13: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 14: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 15: {12}, 16: {24, 97, 13}, 17: {14}, 18: {98, 8, 104, 15, 26}, 19: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 20: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 21: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 22: {41, 19}, 23: {73, 75, 79, 81, 21, 85, 88, 92}, 24: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 25: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 26: {28}, 27: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 28: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 29: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 30: {33}, 31: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 32: {35, 54}, 33: {36, 68, 55}, 34: {37}, 35: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 36: {42, 59, 50, 39}, 37: {40}, 38: {41, 19}, 39: {42, 59, 50, 39}, 40: {51, 43}, 41: {44}, 42: {45}, 43: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 44: {48, 65, 64, 47}, 45: {48, 65, 64, 47}, 46: {49}, 47: {42, 59, 50, 39}, 48: {51, 43}, 49: {52}, 50: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 51: {35, 54}, 52: {36, 68, 55}, 53: {56}, 54: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 55: {58, 62, 63}, 56: {42, 59, 50, 39}, 57: {60}, 58: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 59: {58, 62, 63}, 60: {58, 62, 63}, 61: {48, 65, 64, 47}, 62: {48, 65, 64, 47}, 63: {66, 23}, 64: {67}, 65: {36, 68, 55}, 66: {69}, 67: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 68: {72}, 69: {73, 75, 79, 81, 21, 85, 88, 92}, 70: {74}, 71: {73, 75, 79, 81, 21, 85, 88, 92}, 72: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 73: {77}, 74: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 75: {73, 75, 79, 81, 21, 85, 88, 92}, 76: {80, 87}, 77: {73, 75, 79, 81, 21, 85, 88, 92}, 78: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 79: {90, 83}, 80: {84}, 81: {73, 75, 79, 81, 21, 85, 88, 92}, 82: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 83: {80, 87}, 84: {73, 75, 79, 81, 21, 85, 88, 92}, 85: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 86: {90, 83}, 87: {91}, 88: {73, 75, 79, 81, 21, 85, 88, 92}, 89: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 90: {94}, 91: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 92: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 93: {24, 97, 13}, 94: {98, 8, 104, 15, 26}, 95: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 96: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 97: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 98: {102}, 99: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 100: {98, 8, 104, 15, 26}, 101: {32, 96, 2, 99, 6, 105, 10, 76, 22, 27, 30}, 102: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 103: {107}, 104: {4, 9, 11, 16, 17, 18, 25, 31, 34, 38, 46, 53, 57, 61, 70, 78, 82, 86, 89, 93, 95, 100, 101, 103, 106, 108}, 105: {109}})
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f84d155f730>, {0: {0}, 1: {29}, 2: {1}, 3: {20}, 4: {71}, 5: {2}, 6: {3}, 7: {4}, 8: {5}, 9: {6}, 10: {7}, 11: {8}, 12: {9}, 13: {10}, 14: {11}, 15: {12}, 16: {13}, 17: {14}, 18: {15}, 19: {16}, 20: {17}, 21: {18}, 22: {19}, 23: {21}, 24: {22}, 25: {27}, 26: {28}, 27: {30}, 28: {31}, 29: {32, 30}, 30: {33}, 31: {34}, 32: {35}, 33: {36}, 34: {37}, 35: {38}, 36: {39}, 37: {40}, 38: {41}, 39: {42}, 40: {43}, 41: {44}, 42: {45}, 43: {46}, 44: {47}, 45: {48}, 46: {49}, 47: {50}, 48: {51}, 49: {52}, 50: {53}, 51: {54}, 52: {55}, 53: {56}, 54: {57}, 55: {58}, 56: {59}, 57: {60}, 58: {61}, 59: {62}, 60: {62, 63}, 61: {64, 65}, 62: {65}, 63: {66}, 64: {67}, 65: {68}, 66: {69}, 67: {70}, 68: {72}, 69: {73}, 70: {74}, 71: {75}, 72: {76}, 73: {77}, 74: {78}, 75: {79}, 76: {80}, 77: {81}, 78: {82}, 79: {83}, 80: {84}, 81: {85}, 82: {86}, 83: {87}, 84: {88}, 85: {89}, 86: {90}, 87: {91}, 88: {92}, 89: {93}, 90: {94}, 91: {95}, 92: {96}, 93: {97}, 94: {98}, 95: {99}, 96: {100}, 97: {101}, 98: {102}, 99: {103}, 100: {104}, 101: {105}, 102: {106}, 103: {107}, 104: {108}, 105: {109}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 load load
EXACT 6 add add
EXACT 7 store store
EXACT 8 getelementptr getelementptr
EXACT 9 load load
EXACT 10 add add
EXACT 11 inttoptr inttoptr
EXACT 12 store store
EXACT 13 load load
EXACT 14 store store
EXACT 15 add add
EXACT 16 add add
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 store store
EXACT 21 store store
EXACT 22 tail tail
EXACT 23 bitcast bitcast
EXACT 24 load load
EXACT 25 load load
EXACT 26 getelementptr getelementptr
EXACT 27 load load
EXACT 28 store store
MORE 29 POT: 2
EXACT 30 sub sub
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 trunc trunc
EXACT 37 and and
EXACT 38 tail tail
EXACT 39 trunc trunc
EXACT 40 and and
EXACT 41 xor xor
EXACT 42 getelementptr getelementptr
EXACT 43 store store
EXACT 44 xor xor
EXACT 45 xor xor
EXACT 46 lshr lshr
EXACT 47 trunc trunc
EXACT 48 and and
EXACT 49 getelementptr getelementptr
EXACT 50 store store
EXACT 51 icmp icmp
EXACT 52 zext zext
EXACT 53 getelementptr getelementptr
EXACT 54 store store
EXACT 55 lshr lshr
EXACT 56 trunc trunc
EXACT 57 getelementptr getelementptr
EXACT 58 store store
EXACT 59 lshr lshr
MORE 60 POT: 2
MORE 61 POT: 2
EXACT 62 xor xor
EXACT 63 add add
EXACT 64 icmp icmp
EXACT 65 zext zext
EXACT 66 getelementptr getelementptr
EXACT 67 store store
EXACT 68 sitofp sitofp
EXACT 69 bitcast bitcast
EXACT 70 getelementptr getelementptr
EXACT 71 bitcast bitcast
EXACT 72 load load
EXACT 73 fdiv fdiv
EXACT 74 store store
EXACT 75 bitcast bitcast
EXACT 76 extractelement extractelement
EXACT 77 bitcast bitcast
EXACT 78 store store
EXACT 79 extractelement extractelement
EXACT 80 getelementptr getelementptr
EXACT 81 bitcast bitcast
EXACT 82 store store
EXACT 83 extractelement extractelement
EXACT 84 bitcast bitcast
EXACT 85 store store
EXACT 86 extractelement extractelement
EXACT 87 getelementptr getelementptr
EXACT 88 bitcast bitcast
EXACT 89 store store
EXACT 90 add add
EXACT 91 store store
EXACT 92 load load
EXACT 93 add add
EXACT 94 inttoptr inttoptr
EXACT 95 load load
EXACT 96 store store
EXACT 97 store store
EXACT 98 add add
EXACT 99 store store
EXACT 100 inttoptr inttoptr
EXACT 101 load load
EXACT 102 store store
EXACT 103 add add
EXACT 104 store store
EXACT 105 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %10, -2897', '%12 = add i64 %10, 8', '%13 = add i64 %7, -16', '%14 = inttoptr i64 %13 to i64*', 'store i64 %12, i64* %14, align 8', 'store i64 %13, i64* %6, align 8', 'store i64 %11, i64* %3, align 8', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 %24, i64* bitcast (%G_0x609128_type* @G_0x609128 to i64*), align 8', 'store i64 %26, i64* %RAX.i13, align 8', '%27 = icmp ult i64 %24, %25', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %28, i8* %29, align 1', '%30 = trunc i64 %26 to i32', '%31 = and i32 %30, 255', '%32 = tail call i32 @llvm.ctpop.i32(i32 %31)', '%33 = trunc i32 %32 to i8', '%34 = and i8 %33, 1', '%35 = xor i8 %34, 1', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %35, i8* %36, align 1', '%37 = xor i64 %25, %24', '%38 = xor i64 %37, %26', '%39 = lshr i64 %38, 4', '%40 = trunc i64 %39 to i8', '%41 = and i8 %40, 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %41, i8* %42, align 1', '%43 = icmp eq i64 %26, 0', '%44 = zext i1 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %44, i8* %45, align 1', '%46 = lshr i64 %26, 63', '%47 = trunc i64 %46 to i8', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %47, i8* %48, align 1', '%52 = xor i64 %46, %49', '%53 = add nuw nsw i64 %52, %51', '%54 = icmp eq i64 %53, 2', '%55 = zext i1 %54 to i8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %55, i8* %56, align 1', '%60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%61 = bitcast i64* %60 to \\<2 x i32\\>*', '%62 = load \\<2 x i32\\>, \\<2 x i32\\>* %61, align 1', '%69 = extractelement \\<2 x i32\\> %62, i32 0', '%70 = bitcast i64* %23 to i32*', 'store i32 %69, i32* %70, align 1', '%71 = extractelement \\<2 x i32\\> %62, i32 1', '%72 = getelementptr inbounds i8, i8* %17, i64 12', '%73 = bitcast i8* %72 to i32*', 'store i32 %71, i32* %73, align 1', '%74 = add i64 %18, 45', 'store i64 %74, i64* %3, align 8', '%75 = load i64, i64* %6, align 8', '%76 = add i64 %75, 8', '%77 = inttoptr i64 %75 to i64*', '%78 = load i64, i64* %77, align 8', 'store i64 %78, i64* %RBP.i, align 8', 'store i64 %76, i64* %6, align 8', '%79 = add i64 %18, 46', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %76 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %3, align 8', '%82 = add i64 %75, 16', 'store i64 %82, i64* %6, align 8'])
Keep: entry:
Keep: %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %10, -2897
Found line to remove! %12 = add i64 %10, 8
Found line to remove! %13 = add i64 %7, -16
Found line to remove! %14 = inttoptr i64 %13 to i64*
Found line to remove! store i64 %12, i64* %14, align 8
Found line to remove! store i64 %13, i64* %6, align 8
Found line to remove! store i64 %11, i64* %3, align 8
Keep: %15 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %2)
Keep: %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Keep: %17 = bitcast [32 x %union.VectorReg]* %16 to i8*
Keep: %18 = load i64, i64* %3, align 8
Keep: %19 = add i64 %18, ptrtoint (%G_0x5517__rip__type* @G_0x5517__rip_ to i64)
Keep: %20 = add i64 %18, 8
Keep: store i64 %20, i64* %3, align 8
Keep: %21 = inttoptr i64 %19 to double*
Keep: %22 = load double, double* %21, align 8
Found line to remove! %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %RAX.i13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Keep: %24 = load i64, i64* %RAX.i13, align 8
Found line to remove! store i64 %24, i64* bitcast (%G_0x609128_type* @G_0x609128 to i64*), align 8
Keep: %25 = load i64, i64* bitcast (%G_0x609120_type* @G_0x609120 to i64*), align 8
Keep: %26 = sub i64 %24, %25
Found line to remove! store i64 %26, i64* %RAX.i13, align 8
Found line to remove! %27 = icmp ult i64 %24, %25
Found line to remove! %28 = zext i1 %27 to i8
Found line to remove! %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = trunc i64 %26 to i32
Found line to remove! %31 = and i32 %30, 255
Found line to remove! %32 = tail call i32 @llvm.ctpop.i32(i32 %31)
Found line to remove! %33 = trunc i32 %32 to i8
Found line to remove! %34 = and i8 %33, 1
Found line to remove! %35 = xor i8 %34, 1
Found line to remove! %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %35, i8* %36, align 1
Found line to remove! %37 = xor i64 %25, %24
Found line to remove! %38 = xor i64 %37, %26
Found line to remove! %39 = lshr i64 %38, 4
Found line to remove! %40 = trunc i64 %39 to i8
Found line to remove! %41 = and i8 %40, 1
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %41, i8* %42, align 1
Found line to remove! %43 = icmp eq i64 %26, 0
Found line to remove! %44 = zext i1 %43 to i8
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %44, i8* %45, align 1
Found line to remove! %46 = lshr i64 %26, 63
Found line to remove! %47 = trunc i64 %46 to i8
Found line to remove! %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %47, i8* %48, align 1
Keep: %49 = lshr i64 %24, 63
Keep: %50 = lshr i64 %25, 63
Keep: %51 = xor i64 %50, %49
Found line to remove! %52 = xor i64 %46, %49
Found line to remove! %53 = add nuw nsw i64 %52, %51
Found line to remove! %54 = icmp eq i64 %53, 2
Found line to remove! %55 = zext i1 %54 to i8
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %55, i8* %56, align 1
Keep: %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Keep: %58 = sitofp i64 %26 to double
Keep: %59 = bitcast %union.VectorReg* %57 to double*
Found line to remove! %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Keep: %61 = bitcast i64* %60 to <2 x i32>*
Keep: %62 = load <2 x i32>, <2 x i32>* %61, align 1
Keep: %63 = fdiv double %58, %22
Keep: store double %63, double* %59, align 1
Keep: %.cast = bitcast double %63 to <2 x i32>
Keep: %64 = extractelement <2 x i32> %.cast, i32 0
Keep: %65 = bitcast [32 x %union.VectorReg]* %16 to i32*
Keep: store i32 %64, i32* %65, align 1
Keep: %66 = extractelement <2 x i32> %.cast, i32 1
Keep: %67 = getelementptr inbounds i8, i8* %17, i64 4
Keep: %68 = bitcast i8* %67 to i32*
Keep: store i32 %66, i32* %68, align 1
Keep: %69 = extractelement <2 x i32> %62, i32 0
Found line to remove! %70 = bitcast i64* %23 to i32*
Found line to remove! store i32 %69, i32* %70, align 1
Keep: %71 = extractelement <2 x i32> %62, i32 1
Found line to remove! %72 = getelementptr inbounds i8, i8* %17, i64 12
Found line to remove! %73 = bitcast i8* %72 to i32*
Found line to remove! store i32 %71, i32* %73, align 1
Found line to remove! %74 = add i64 %18, 45
Found line to remove! store i64 %74, i64* %3, align 8
Found line to remove! %75 = load i64, i64* %6, align 8
Found line to remove! %76 = add i64 %75, 8
Found line to remove! %77 = inttoptr i64 %75 to i64*
Found line to remove! %78 = load i64, i64* %77, align 8
Found line to remove! store i64 %78, i64* %RBP.i, align 8
Found line to remove! store i64 %76, i64* %6, align 8
Found line to remove! %79 = add i64 %18, 46
Found line to remove! store i64 %79, i64* %3, align 8
Found line to remove! %80 = inttoptr i64 %76 to i64*
Found line to remove! %81 = load i64, i64* %80, align 8
Found line to remove! store i64 %81, i64* %3, align 8
Found line to remove! %82 = add i64 %75, 16
Found line to remove! store i64 %82, i64* %6, align 8
Keep: ret %struct.Memory* %15
Missed: dict_keys(['%RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %10, -2897', '%12 = add i64 %10, 8', '%13 = add i64 %7, -16', '%14 = inttoptr i64 %13 to i64*', 'store i64 %12, i64* %14, align 8', 'store i64 %13, i64* %6, align 8', 'store i64 %11, i64* %3, align 8', '%23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 %24, i64* bitcast (%G_0x609128_type* @G_0x609128 to i64*), align 8', 'store i64 %26, i64* %RAX.i13, align 8', '%27 = icmp ult i64 %24, %25', '%28 = zext i1 %27 to i8', '%29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %28, i8* %29, align 1', '%30 = trunc i64 %26 to i32', '%31 = and i32 %30, 255', '%32 = tail call i32 @llvm.ctpop.i32(i32 %31)', '%33 = trunc i32 %32 to i8', '%34 = and i8 %33, 1', '%35 = xor i8 %34, 1', '%36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %35, i8* %36, align 1', '%37 = xor i64 %25, %24', '%38 = xor i64 %37, %26', '%39 = lshr i64 %38, 4', '%40 = trunc i64 %39 to i8', '%41 = and i8 %40, 1', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %41, i8* %42, align 1', '%43 = icmp eq i64 %26, 0', '%44 = zext i1 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %44, i8* %45, align 1', '%46 = lshr i64 %26, 63', '%47 = trunc i64 %46 to i8', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %47, i8* %48, align 1', '%52 = xor i64 %46, %49', '%53 = add nuw nsw i64 %52, %51', '%54 = icmp eq i64 %53, 2', '%55 = zext i1 %54 to i8', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %55, i8* %56, align 1', '%60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%61 = bitcast i64* %60 to \\<2 x i32\\>*', '%62 = load \\<2 x i32\\>, \\<2 x i32\\>* %61, align 1', '%69 = extractelement \\<2 x i32\\> %62, i32 0', '%70 = bitcast i64* %23 to i32*', 'store i32 %69, i32* %70, align 1', '%71 = extractelement \\<2 x i32\\> %62, i32 1', '%72 = getelementptr inbounds i8, i8* %17, i64 12', '%73 = bitcast i8* %72 to i32*', 'store i32 %71, i32* %73, align 1', '%74 = add i64 %18, 45', 'store i64 %74, i64* %3, align 8', '%75 = load i64, i64* %6, align 8', '%76 = add i64 %75, 8', '%77 = inttoptr i64 %75 to i64*', '%78 = load i64, i64* %77, align 8', 'store i64 %78, i64* %RBP.i, align 8', 'store i64 %76, i64* %6, align 8', '%79 = add i64 %18, 46', 'store i64 %79, i64* %3, align 8', '%80 = inttoptr i64 %76 to i64*', '%81 = load i64, i64* %80, align 8', 'store i64 %81, i64* %3, align 8', '%82 = add i64 %75, 16', 'store i64 %82, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %11, -2897', '%13 = add i64 %11, 8', '%14 = add i64 %8, -16', '%15 = inttoptr i64 %14 to i64*', 'store i64 %13, i64* %15, align 8', 'store i64 %14, i64* %7, align 8', 'store i64 %12, i64* %PC, align 8', '%17 = bitcast [32 x %union.VectorReg]* %3 to i8*', '%18 = load i64, i64* %PC, align 8', '%19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to double*), align 8', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8', '%23 = sub i64 %21, %22', 'store i64 %23, i64* %RAX, align 8', '%24 = icmp ult i64 %21, %22', '%25 = zext i1 %24 to i8', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %25, i8* %26, align 1', '%27 = trunc i64 %23 to i32', '%28 = and i32 %27, 255', '%29 = tail call i32 @llvm.ctpop.i32(i32 %28) #12', '%30 = trunc i32 %29 to i8', '%31 = and i8 %30, 1', '%32 = xor i8 %31, 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %32, i8* %33, align 1', '%34 = xor i64 %22, %21', '%35 = xor i64 %34, %23', '%36 = lshr i64 %35, 4', '%37 = trunc i64 %36 to i8', '%38 = and i8 %37, 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %38, i8* %39, align 1', '%40 = icmp eq i64 %23, 0', '%41 = zext i1 %40 to i8', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %41, i8* %42, align 1', '%43 = lshr i64 %23, 63', '%44 = trunc i64 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %44, i8* %45, align 1', '%49 = xor i64 %43, %46', '%50 = add nuw nsw i64 %49, %48', '%51 = icmp eq i64 %50, 2', '%52 = zext i1 %51 to i8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %52, i8* %53, align 1', '%54 = sitofp i64 %23 to double', '%55 = bitcast %union.VectorReg* %4 to double*', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%57 = bitcast i64* %56 to \\<2 x i32\\>*', '%58 = load \\<2 x i32\\>, \\<2 x i32\\>* %57, align 1', '%59 = fdiv double %54, %19', 'store double %59, double* %55, align 1', '%.cast = bitcast double %59 to \\<2 x i32\\>', '%60 = extractelement \\<2 x i32\\> %.cast, i32 0', '%61 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %60, i32* %61, align 1', '%62 = extractelement \\<2 x i32\\> %.cast, i32 1', '%63 = getelementptr inbounds i8, i8* %17, i64 4', '%64 = bitcast i8* %63 to i32*', 'store i32 %62, i32* %64, align 1', '%65 = extractelement \\<2 x i32\\> %58, i32 0', '%66 = bitcast i64* %20 to i32*', 'store i32 %65, i32* %66, align 1', '%67 = extractelement \\<2 x i32\\> %58, i32 1', '%68 = getelementptr inbounds i8, i8* %17, i64 12', '%69 = bitcast i8* %68 to i32*', 'store i32 %67, i32* %69, align 1', '%70 = add i64 %18, 45', 'store i64 %70, i64* %PC, align 8', '%71 = load i64, i64* %7, align 8', '%72 = add i64 %71, 8', '%73 = inttoptr i64 %71 to i64*', '%74 = load i64, i64* %73, align 8', 'store i64 %74, i64* %RBP, align 8', 'store i64 %72, i64* %7, align 8', '%75 = add i64 %18, 46', 'store i64 %75, i64* %PC, align 8', '%76 = inttoptr i64 %72 to i64*', '%77 = load i64, i64* %76, align 8', 'store i64 %77, i64* %PC, align 8', '%78 = add i64 %71, 16', 'store i64 %78, i64* %7, align 8'])
Keep: block_401230:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %8 = load i64, i64* %7, align 8
Found line to remove! %9 = add i64 %8, -8
Found line to remove! %10 = inttoptr i64 %9 to i64*
Found line to remove! store i64 %5, i64* %10, align 8
Found line to remove! %11 = load i64, i64* %PC, align 8
Found line to remove! store i64 %9, i64* %RBP, align 8
Found line to remove! %12 = add i64 %11, -2897
Found line to remove! %13 = add i64 %11, 8
Found line to remove! %14 = add i64 %8, -16
Found line to remove! %15 = inttoptr i64 %14 to i64*
Found line to remove! store i64 %13, i64* %15, align 8
Found line to remove! store i64 %14, i64* %7, align 8
Found line to remove! store i64 %12, i64* %PC, align 8
Keep: %16 = tail call fastcc %struct.Memory* @ext_4006e0_clock(%struct.State* nonnull %0, %struct.Memory* %2)
Found line to remove! %17 = bitcast [32 x %union.VectorReg]* %3 to i8*
Found line to remove! %18 = load i64, i64* %PC, align 8
Found line to remove! %19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to double*), align 8
Found line to remove! %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Keep: %21 = load i64, i64* %RAX, align 8
Found line to remove! store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8
Keep: %22 = load i64, i64* bitcast (%start_time_type* @start_time to i64*), align 8
Found line to remove! %23 = sub i64 %21, %22
Found line to remove! store i64 %23, i64* %RAX, align 8
Found line to remove! %24 = icmp ult i64 %21, %22
Found line to remove! %25 = zext i1 %24 to i8
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = trunc i64 %23 to i32
Found line to remove! %28 = and i32 %27, 255
Found line to remove! %29 = tail call i32 @llvm.ctpop.i32(i32 %28) #12
Found line to remove! %30 = trunc i32 %29 to i8
Found line to remove! %31 = and i8 %30, 1
Found line to remove! %32 = xor i8 %31, 1
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = xor i64 %22, %21
Found line to remove! %35 = xor i64 %34, %23
Found line to remove! %36 = lshr i64 %35, 4
Found line to remove! %37 = trunc i64 %36 to i8
Found line to remove! %38 = and i8 %37, 1
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %40 = icmp eq i64 %23, 0
Found line to remove! %41 = zext i1 %40 to i8
Found line to remove! %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %41, i8* %42, align 1
Found line to remove! %43 = lshr i64 %23, 63
Found line to remove! %44 = trunc i64 %43 to i8
Found line to remove! %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %44, i8* %45, align 1
Keep: %46 = lshr i64 %21, 63
Keep: %47 = lshr i64 %22, 63
Keep: %48 = xor i64 %47, %46
Found line to remove! %49 = xor i64 %43, %46
Found line to remove! %50 = add nuw nsw i64 %49, %48
Found line to remove! %51 = icmp eq i64 %50, 2
Found line to remove! %52 = zext i1 %51 to i8
Found line to remove! %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %52, i8* %53, align 1
Found line to remove! %54 = sitofp i64 %23 to double
Found line to remove! %55 = bitcast %union.VectorReg* %4 to double*
Found line to remove! %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
Keep: %57 = bitcast i64* %56 to <2 x i32>*
Keep: %58 = load <2 x i32>, <2 x i32>* %57, align 1
Found line to remove! %59 = fdiv double %54, %19
Found line to remove! store double %59, double* %55, align 1
Keep: %.cast = bitcast double %59 to <2 x i32>
Keep: %60 = extractelement <2 x i32> %.cast, i32 0
Found line to remove! %61 = bitcast [32 x %union.VectorReg]* %3 to i32*
Found line to remove! store i32 %60, i32* %61, align 1
Keep: %62 = extractelement <2 x i32> %.cast, i32 1
Found line to remove! %63 = getelementptr inbounds i8, i8* %17, i64 4
Found line to remove! %64 = bitcast i8* %63 to i32*
Found line to remove! store i32 %62, i32* %64, align 1
Keep: %65 = extractelement <2 x i32> %58, i32 0
Found line to remove! %66 = bitcast i64* %20 to i32*
Found line to remove! store i32 %65, i32* %66, align 1
Keep: %67 = extractelement <2 x i32> %58, i32 1
Found line to remove! %68 = getelementptr inbounds i8, i8* %17, i64 12
Found line to remove! %69 = bitcast i8* %68 to i32*
Found line to remove! store i32 %67, i32* %69, align 1
Found line to remove! %70 = add i64 %18, 45
Found line to remove! store i64 %70, i64* %PC, align 8
Found line to remove! %71 = load i64, i64* %7, align 8
Found line to remove! %72 = add i64 %71, 8
Found line to remove! %73 = inttoptr i64 %71 to i64*
Found line to remove! %74 = load i64, i64* %73, align 8
Found line to remove! store i64 %74, i64* %RBP, align 8
Found line to remove! store i64 %72, i64* %7, align 8
Found line to remove! %75 = add i64 %18, 46
Found line to remove! store i64 %75, i64* %PC, align 8
Found line to remove! %76 = inttoptr i64 %72 to i64*
Found line to remove! %77 = load i64, i64* %76, align 8
Found line to remove! store i64 %77, i64* %PC, align 8
Found line to remove! %78 = add i64 %71, 16
Found line to remove! store i64 %78, i64* %7, align 8
Keep: ret %struct.Memory* %16
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%8 = load i64, i64* %7, align 8', '%9 = add i64 %8, -8', '%10 = inttoptr i64 %9 to i64*', 'store i64 %5, i64* %10, align 8', '%11 = load i64, i64* %PC, align 8', 'store i64 %9, i64* %RBP, align 8', '%12 = add i64 %11, -2897', '%13 = add i64 %11, 8', '%14 = add i64 %8, -16', '%15 = inttoptr i64 %14 to i64*', 'store i64 %13, i64* %15, align 8', 'store i64 %14, i64* %7, align 8', 'store i64 %12, i64* %PC, align 8', '%17 = bitcast [32 x %union.VectorReg]* %3 to i8*', '%18 = load i64, i64* %PC, align 8', '%19 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_406750__rodata_type* @seg_406750__rodata to i64), i64 8) to double*), align 8', '%20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', 'store i64 %21, i64* bitcast (%end_time_type* @end_time to i64*), align 8', '%23 = sub i64 %21, %22', 'store i64 %23, i64* %RAX, align 8', '%24 = icmp ult i64 %21, %22', '%25 = zext i1 %24 to i8', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %25, i8* %26, align 1', '%27 = trunc i64 %23 to i32', '%28 = and i32 %27, 255', '%29 = tail call i32 @llvm.ctpop.i32(i32 %28) #12', '%30 = trunc i32 %29 to i8', '%31 = and i8 %30, 1', '%32 = xor i8 %31, 1', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %32, i8* %33, align 1', '%34 = xor i64 %22, %21', '%35 = xor i64 %34, %23', '%36 = lshr i64 %35, 4', '%37 = trunc i64 %36 to i8', '%38 = and i8 %37, 1', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %38, i8* %39, align 1', '%40 = icmp eq i64 %23, 0', '%41 = zext i1 %40 to i8', '%42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %41, i8* %42, align 1', '%43 = lshr i64 %23, 63', '%44 = trunc i64 %43 to i8', '%45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %44, i8* %45, align 1', '%49 = xor i64 %43, %46', '%50 = add nuw nsw i64 %49, %48', '%51 = icmp eq i64 %50, 2', '%52 = zext i1 %51 to i8', '%53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %52, i8* %53, align 1', '%54 = sitofp i64 %23 to double', '%55 = bitcast %union.VectorReg* %4 to double*', '%56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1', '%57 = bitcast i64* %56 to \\<2 x i32\\>*', '%58 = load \\<2 x i32\\>, \\<2 x i32\\>* %57, align 1', '%59 = fdiv double %54, %19', 'store double %59, double* %55, align 1', '%.cast = bitcast double %59 to \\<2 x i32\\>', '%60 = extractelement \\<2 x i32\\> %.cast, i32 0', '%61 = bitcast [32 x %union.VectorReg]* %3 to i32*', 'store i32 %60, i32* %61, align 1', '%62 = extractelement \\<2 x i32\\> %.cast, i32 1', '%63 = getelementptr inbounds i8, i8* %17, i64 4', '%64 = bitcast i8* %63 to i32*', 'store i32 %62, i32* %64, align 1', '%65 = extractelement \\<2 x i32\\> %58, i32 0', '%66 = bitcast i64* %20 to i32*', 'store i32 %65, i32* %66, align 1', '%67 = extractelement \\<2 x i32\\> %58, i32 1', '%68 = getelementptr inbounds i8, i8* %17, i64 12', '%69 = bitcast i8* %68 to i32*', 'store i32 %67, i32* %69, align 1', '%70 = add i64 %18, 45', 'store i64 %70, i64* %PC, align 8', '%71 = load i64, i64* %7, align 8', '%72 = add i64 %71, 8', '%73 = inttoptr i64 %71 to i64*', '%74 = load i64, i64* %73, align 8', 'store i64 %74, i64* %RBP, align 8', 'store i64 %72, i64* %7, align 8', '%75 = add i64 %18, 46', 'store i64 %75, i64* %PC, align 8', '%76 = inttoptr i64 %72 to i64*', '%77 = load i64, i64* %76, align 8', 'store i64 %77, i64* %PC, align 8', '%78 = add i64 %71, 16', 'store i64 %78, i64* %7, align 8'])/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt: /tmp/tmp_xl843jq-query.ll:188:26: error: use of undefined value '%var_2_60'
%var_2_61 = bitcast i64* %var_2_60 to <2 x i32>*
                         ^

[x] Failed to do opt
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/_Z5timerv/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
Traceback (most recent call last):
  File "/usr/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 728, in <module>
    matcher.do_match()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 101, in do_match
    self.do_opt()
  File "/home/ubuntu/Github/llir-matcher/matcher/match.py", line 582, in do_opt
    env=MYENV)
  File "/usr/lib/python3.6/subprocess.py", line 311, in check_call
    raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command '/home/ubuntu/Install/llvm/llvm.4.0.0.install/bin/opt -S -inline /tmp/tmp_xl843jq-query.ll -o /tmp/tmp_xl843jq-query.ll' returned non-zero exit status 1.
