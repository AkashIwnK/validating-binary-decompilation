Writing '/tmp/tmpm0ue3n9z.dot'...
Writing '/tmp/tmpm0ue3n9z.dot':Done

Reading LLVM: /tmp/tmpgyxv7jcf-query.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpgyxv7jcf-query.ll
Dot file generated!
Writing '/tmp/tmp0cn3w3it.dot'...
Writing '/tmp/tmp0cn3w3it.dot':Done

Reading LLVM: /tmp/tmpb0n_ti2n-target.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpb0n_ti2n-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -56
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 48
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, 16
- 27 %23 = xor i64 %22, %11
- 28 %24 = lshr i64 %23, 4
- 29 %25 = trunc i64 %24 to i8
- 30 %26 = and i8 %25, 1
- 31 %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 32 store i8 %26, i8* %27, align 1
- 33 %28 = icmp eq i64 %11, 0
- 34 %29 = zext i1 %28 to i8
- 35 %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 36 store i8 %29, i8* %30, align 1
- 37 %31 = lshr i64 %11, 63
- 38 %32 = trunc i64 %31 to i8
- 39 %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 40 store i8 %32, i8* %33, align 1
- 41 %34 = lshr i64 %8, 63
- 42 %35 = xor i64 %31, %34
- 43 %36 = add nuw nsw i64 %35, %34
- 44 %37 = icmp eq i64 %36, 2
- 45 %38 = zext i1 %37 to i8
- 46 %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 47 store i8 %38, i8* %39, align 1
- 48 %RDI.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 49 %40 = add i64 %7, -16
- 50 %41 = load i64, i64* %RDI.i36, align 8
- 51 %42 = add i64 %10, 11
- 52 store i64 %42, i64* %3, align 8
- 53 %43 = inttoptr i64 %40 to i64*
- 54 store i64 %41, i64* %43, align 8
- 55 %RSI.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 56 %44 = load i64, i64* %RBP.i, align 8
- 57 %45 = add i64 %44, -16
- 58 %46 = load i64, i64* %RSI.i33, align 8
- 59 %47 = load i64, i64* %3, align 8
- 60 %48 = add i64 %47, 4
- 61 store i64 %48, i64* %3, align 8
- 62 %49 = inttoptr i64 %45 to i64*
- 63 store i64 %46, i64* %49, align 8
- 64 %50 = load i64, i64* %RBP.i, align 8
- 65 %51 = add i64 %50, -24
- 66 %52 = load i64, i64* %3, align 8
- 67 %53 = add i64 %52, 5
- 68 store i64 %53, i64* %3, align 8
- 69 %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 70 %55 = load i64, i64* %54, align 1
- 71 %56 = inttoptr i64 %51 to i64*
- 72 store i64 %55, i64* %56, align 8
- 73 %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 74 %57 = load i64, i64* %RBP.i, align 8
- 75 %58 = add i64 %57, -32
- 76 %59 = load i64, i64* %RDX.i, align 8
- 77 %60 = load i64, i64* %3, align 8
- 78 %61 = add i64 %60, 4
- 79 store i64 %61, i64* %3, align 8
- 80 %62 = inttoptr i64 %58 to i64*
- 81 store i64 %59, i64* %62, align 8
- 82 %63 = load i64, i64* %RBP.i, align 8
- 83 %64 = add i64 %63, -36
- 84 %65 = load i64, i64* %3, align 8
- 85 %66 = add i64 %65, 7
- 86 store i64 %66, i64* %3, align 8
- 87 %67 = inttoptr i64 %64 to i32*
- 88 store i32 0, i32* %67, align 4
- 89 %RAX.i24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 90 %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 91 %69 = bitcast i64* %68 to double*
- 92 %.pre = load i64, i64* %3, align 8
- 93 \<badref\> = br label %block_.L_401ea0
- 94 %70 = phi i64 [ %159, %block_401eb0 ], [ %.pre, %entry ]
- 95 %71 = load i64, i64* %RBP.i, align 8
- 96 %72 = add i64 %71, -36
- 97 %73 = add i64 %70, 3
- 98 store i64 %73, i64* %3, align 8
- 99 %74 = inttoptr i64 %72 to i32*
- 100 %75 = load i32, i32* %74, align 4
- 101 %76 = zext i32 %75 to i64
- 102 store i64 %76, i64* %RAX.i24, align 8
- 103 %77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
- 104 %78 = sub i32 %75, %77
- 105 %79 = icmp ult i32 %75, %77
- 106 %80 = zext i1 %79 to i8
- 107 store i8 %80, i8* %14, align 1
- 108 %81 = and i32 %78, 255
- 109 %82 = tail call i32 @llvm.ctpop.i32(i32 %81)
- 110 %83 = trunc i32 %82 to i8
- 111 %84 = and i8 %83, 1
- 112 %85 = xor i8 %84, 1
- 113 store i8 %85, i8* %21, align 1
- 114 %86 = xor i32 %77, %75
- 115 %87 = xor i32 %86, %78
- 116 %88 = lshr i32 %87, 4
- 117 %89 = trunc i32 %88 to i8
- 118 %90 = and i8 %89, 1
- 119 store i8 %90, i8* %27, align 1
- 120 %91 = icmp eq i32 %78, 0
- 121 %92 = zext i1 %91 to i8
- 122 store i8 %92, i8* %30, align 1
- 123 %93 = lshr i32 %78, 31
- 124 %94 = trunc i32 %93 to i8
- 125 store i8 %94, i8* %33, align 1
- 126 %95 = lshr i32 %75, 31
- 127 %96 = lshr i32 %77, 31
- 128 %97 = xor i32 %96, %95
- 129 %98 = xor i32 %93, %95
- 130 %99 = add nuw nsw i32 %98, %97
- 131 %100 = icmp eq i32 %99, 2
- 132 %101 = zext i1 %100 to i8
- 133 store i8 %101, i8* %39, align 1
- 134 %102 = icmp ne i8 %94, 0
- 135 %103 = xor i1 %102, %100
- 136 %.v = select i1 %103, i64 16, i64 53
- 137 %104 = add i64 %70, %.v
- 138 store i64 %104, i64* %3, align 8
- 139 \<badref\> = br i1 %103, label %block_401eb0, label %block_.L_401ed5
- 140 %105 = add i64 %71, -8
- 141 %106 = add i64 %104, 4
- 142 store i64 %106, i64* %3, align 8
- 143 %107 = inttoptr i64 %105 to i64*
- 144 %108 = load i64, i64* %107, align 8
- 145 store i64 %108, i64* %RDI.i36, align 8
- 146 %109 = add i64 %71, -16
- 147 %110 = add i64 %104, 8
- 148 store i64 %110, i64* %3, align 8
- 149 %111 = inttoptr i64 %109 to i64*
- 150 %112 = load i64, i64* %111, align 8
- 151 store i64 %112, i64* %RSI.i33, align 8
- 152 %113 = add i64 %71, -24
- 153 %114 = add i64 %104, 13
- 154 store i64 %114, i64* %3, align 8
- 155 %115 = inttoptr i64 %113 to i64*
- 156 %116 = load i64, i64* %115, align 8
- 157 store i64 %116, i64* %54, align 1
- 158 store double 0.000000e+00, double* %69, align 1
- 159 %117 = add i64 %104, 18000
- 160 %118 = add i64 %104, 18
- 161 %119 = load i64, i64* %6, align 8
- 162 %120 = add i64 %119, -8
- 163 %121 = inttoptr i64 %120 to i64*
- 164 store i64 %118, i64* %121, align 8
- 165 store i64 %120, i64* %6, align 8
- 166 store i64 %117, i64* %3, align 8
- 167 %call2_401ebd = tail call %struct.Memory* @sub_406500._ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* nonnull %0, i64 %117, %struct.Memory* %2)
- 168 %122 = load i64, i64* %3, align 8
- 169 %123 = add i64 %122, 16190
- 170 %124 = add i64 %122, 5
- 171 %125 = load i64, i64* %6, align 8
- 172 %126 = add i64 %125, -8
- 173 %127 = inttoptr i64 %126 to i64*
- 174 store i64 %124, i64* %127, align 8
- 175 store i64 %126, i64* %6, align 8
- 176 store i64 %123, i64* %3, align 8
- 177 %call2_401ec2 = tail call %struct.Memory* @sub_405e00._Z9check_sumd(%struct.State* nonnull %0, i64 %123, %struct.Memory* %2)
- 178 %128 = load i64, i64* %RBP.i, align 8
- 179 %129 = add i64 %128, -36
- 180 %130 = load i64, i64* %3, align 8
- 181 %131 = add i64 %130, 3
- 182 store i64 %131, i64* %3, align 8
- 183 %132 = inttoptr i64 %129 to i32*
- 184 %133 = load i32, i32* %132, align 4
- 185 %134 = add i32 %133, 1
- 186 %135 = zext i32 %134 to i64
- 187 store i64 %135, i64* %RAX.i24, align 8
- 188 %136 = icmp eq i32 %133, -1
- 189 %137 = icmp eq i32 %134, 0
- 190 %138 = or i1 %136, %137
- 191 %139 = zext i1 %138 to i8
- 192 store i8 %139, i8* %14, align 1
- 193 %140 = and i32 %134, 255
- 194 %141 = tail call i32 @llvm.ctpop.i32(i32 %140)
- 195 %142 = trunc i32 %141 to i8
- 196 %143 = and i8 %142, 1
- 197 %144 = xor i8 %143, 1
- 198 store i8 %144, i8* %21, align 1
- 199 %145 = xor i32 %134, %133
- 200 %146 = lshr i32 %145, 4
- 201 %147 = trunc i32 %146 to i8
- 202 %148 = and i8 %147, 1
- 203 store i8 %148, i8* %27, align 1
- 204 %149 = zext i1 %137 to i8
- 205 store i8 %149, i8* %30, align 1
- 206 %150 = lshr i32 %134, 31
- 207 %151 = trunc i32 %150 to i8
- 208 store i8 %151, i8* %33, align 1
- 209 %152 = lshr i32 %133, 31
- 210 %153 = xor i32 %150, %152
- 211 %154 = add nuw nsw i32 %153, %150
- 212 %155 = icmp eq i32 %154, 2
- 213 %156 = zext i1 %155 to i8
- 214 store i8 %156, i8* %39, align 1
- 215 %157 = add i64 %130, 9
- 216 store i64 %157, i64* %3, align 8
- 217 store i32 %134, i32* %132, align 4
- 218 %158 = load i64, i64* %3, align 8
- 219 %159 = add i64 %158, -48
- 220 store i64 %159, i64* %3, align 8
- 221 \<badref\> = br label %block_.L_401ea0
- 222 %160 = load i64, i64* %6, align 8
- 223 %161 = add i64 %160, 48
- 224 store i64 %161, i64* %6, align 8
- 225 %162 = icmp ugt i64 %160, -49
- 226 %163 = zext i1 %162 to i8
- 227 store i8 %163, i8* %14, align 1
- 228 %164 = trunc i64 %161 to i32
- 229 %165 = and i32 %164, 255
- 230 %166 = tail call i32 @llvm.ctpop.i32(i32 %165)
- 231 %167 = trunc i32 %166 to i8
- 232 %168 = and i8 %167, 1
- 233 %169 = xor i8 %168, 1
- 234 store i8 %169, i8* %21, align 1
- 235 %170 = xor i64 %160, 16
- 236 %171 = xor i64 %170, %161
- 237 %172 = lshr i64 %171, 4
- 238 %173 = trunc i64 %172 to i8
- 239 %174 = and i8 %173, 1
- 240 store i8 %174, i8* %27, align 1
- 241 %175 = icmp eq i64 %161, 0
- 242 %176 = zext i1 %175 to i8
- 243 store i8 %176, i8* %30, align 1
- 244 %177 = lshr i64 %161, 63
- 245 %178 = trunc i64 %177 to i8
- 246 store i8 %178, i8* %33, align 1
- 247 %179 = lshr i64 %160, 63
- 248 %180 = xor i64 %177, %179
- 249 %181 = add nuw nsw i64 %180, %177
- 250 %182 = icmp eq i64 %181, 2
- 251 %183 = zext i1 %182 to i8
- 252 store i8 %183, i8* %39, align 1
- 253 %184 = add i64 %104, 5
- 254 store i64 %184, i64* %3, align 8
- 255 %185 = add i64 %160, 56
- 256 %186 = inttoptr i64 %161 to i64*
- 257 %187 = load i64, i64* %186, align 8
- 258 store i64 %187, i64* %RBP.i, align 8
- 259 store i64 %185, i64* %6, align 8
- 260 %188 = add i64 %104, 6
- 261 store i64 %188, i64* %3, align 8
- 262 %189 = inttoptr i64 %185 to i64*
- 263 %190 = load i64, i64* %189, align 8
- 264 store i64 %190, i64* %3, align 8
- 265 %191 = add i64 %160, 64
- 266 store i64 %191, i64* %6, align 8
- 267 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6a3f048>, {0: {0}, 1: {6}, 2: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 3: {8, 139}, 4: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 5: {5}, 6: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 7: {126, 11, 116, 94}, 8: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 9: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 10: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 11: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 12: {16}, 13: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 14: {18}, 15: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 16: {20}, 17: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 18: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 19: {147, 229, 190, 23}, 20: {131, 230, 148, 24, 121, 191}, 21: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 22: {193, 34, 200, 232, 239, 150, 26, 156}, 23: {233, 194, 27, 151}, 24: {28}, 25: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 26: {235, 30}, 27: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 28: {32, 154, 237, 198}, 29: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 30: {193, 34, 200, 232, 239, 150, 26, 156}, 31: {35}, 32: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 33: {37, 202, 143, 241, 216, 187}, 34: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 35: {39}, 36: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 37: {41, 244, 45, 247}, 38: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 39: {43}, 40: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 41: {41, 244, 45, 247}, 42: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 43: {165, 47, 212, 249, 219}, 44: {48, 250, 213, 166}, 45: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 46: {50}, 47: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 48: {4}, 49: {100, 59, 52}, 50: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 51: {54}, 52: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 53: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 54: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 55: {3}, 56: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 57: {100, 59, 52}, 58: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 59: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 60: {95, 62, 79}, 61: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 62: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 63: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 64: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 65: {106, 67}, 66: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 67: {253, 124, 69}, 68: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 69: {71}, 70: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 71: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 72: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 73: {2}, 74: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 75: {76}, 76: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 77: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 78: {95, 62, 79}, 79: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 80: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 81: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 82: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 83: {178, 84, 133}, 84: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 85: {86}, 86: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 87: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 88: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 89: {1}, 90: {90}, 91: {91}, 92: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 93: {93, 175}, 94: {176}, 95: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 96: {178, 84, 133}, 97: {179, 135}, 98: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 99: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 100: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 101: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 102: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 103: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 104: {186}, 105: {37, 202, 143, 241, 216, 187}, 106: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 107: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 108: {147, 229, 190, 23}, 109: {131, 230, 148, 24, 121, 191}, 110: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 111: {193, 34, 200, 232, 239, 150, 26, 156}, 112: {233, 194, 27, 151}, 113: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 114: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 115: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 116: {32, 154, 237, 198}, 117: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 118: {193, 34, 200, 232, 239, 150, 26, 156}, 119: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 120: {37, 202, 143, 241, 216, 187}, 121: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 122: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 123: {160, 163, 205, 208, 209}, 124: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 125: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 126: {160, 163, 205, 208, 209}, 127: {160, 163, 205, 208, 209}, 128: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 129: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 130: {165, 47, 212, 249, 219}, 131: {48, 250, 213, 166}, 132: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 133: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 134: {37, 202, 143, 241, 216, 187}, 135: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 136: {218}, 137: {165, 47, 212, 249, 219}, 138: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 139: {221}, 140: {126, 11, 116, 94}, 141: {95, 62, 79}, 142: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 143: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 144: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 145: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 146: {100, 59, 52}, 147: {101}, 148: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 149: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 150: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 151: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 152: {106, 67}, 153: {107}, 154: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 155: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 156: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 157: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 158: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 159: {113}, 160: {114}, 161: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 162: {126, 11, 116, 94}, 163: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 164: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 165: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 166: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 167: {131, 230, 148, 24, 121, 191}, 168: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 169: {123}, 170: {253, 124, 69}, 171: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 172: {126, 11, 116, 94}, 173: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 174: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 175: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 176: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 177: {131, 230, 148, 24, 121, 191}, 178: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 179: {178, 84, 133}, 180: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 181: {179, 135}, 182: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 183: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 184: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 185: {8, 139}, 186: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 187: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 188: {142}, 189: {37, 202, 143, 241, 216, 187}, 190: {144}, 191: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 192: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 193: {147, 229, 190, 23}, 194: {131, 230, 148, 24, 121, 191}, 195: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 196: {193, 34, 200, 232, 239, 150, 26, 156}, 197: {233, 194, 27, 151}, 198: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 199: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 200: {32, 154, 237, 198}, 201: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 202: {193, 34, 200, 232, 239, 150, 26, 156}, 203: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 204: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 205: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 206: {160, 163, 205, 208, 209}, 207: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 208: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 209: {160, 163, 205, 208, 209}, 210: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 211: {165, 47, 212, 249, 219}, 212: {48, 250, 213, 166}, 213: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 214: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 215: {169}, 216: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 217: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 218: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 219: {173}, 220: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 221: {93, 175}, 222: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 223: {223}, 224: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 225: {225}, 226: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 227: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 228: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 229: {147, 229, 190, 23}, 230: {131, 230, 148, 24, 121, 191}, 231: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 232: {193, 34, 200, 232, 239, 150, 26, 156}, 233: {233, 194, 27, 151}, 234: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 235: {235, 30}, 236: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 237: {32, 154, 237, 198}, 238: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 239: {193, 34, 200, 232, 239, 150, 26, 156}, 240: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 241: {37, 202, 143, 241, 216, 187}, 242: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 243: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 244: {41, 244, 45, 247}, 245: {192, 33, 161, 228, 199, 231, 42, 206, 238, 149, 22, 245, 25, 155}, 246: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 247: {41, 244, 45, 247}, 248: {196, 164, 197, 217, 236, 46, 210, 211, 248, 153, 31}, 249: {165, 47, 212, 249, 219}, 250: {48, 250, 213, 166}, 251: {226, 38, 167, 203, 140, 49, 145, 19, 242, 214, 183, 251, 188, 158}, 252: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 253: {253, 124, 69}, 254: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 255: {255}, 256: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 257: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 258: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 259: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 260: {260}, 261: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 262: {64, 97, 256, 262, 103, 73, 137, 12, 109, 81, 117, 181, 56, 88, 127}, 263: {257, 132, 134, 7, 263, 10, 138, 14, 172, 177, 53, 182, 185, 58, 60, 61, 66, 68, 72, 75, 77, 78, 83, 85, 92, 222, 98, 104, 110, 115, 122, 125}, 264: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 265: {265}, 266: {128, 129, 130, 258, 259, 261, 136, 9, 264, 266, 13, 141, 15, 17, 146, 21, 152, 29, 157, 159, 162, 36, 40, 168, 170, 171, 44, 174, 51, 180, 55, 184, 57, 189, 63, 65, 195, 70, 201, 74, 204, 207, 80, 82, 87, 215, 89, 220, 96, 224, 99, 227, 102, 105, 234, 108, 111, 112, 240, 243, 118, 119, 120, 246, 252, 254}, 267: {267}})
Equivalent! frozenset({61, 78}) {59, 77}
Equivalent! frozenset({62, 79}) {60, 78}
Equivalent! frozenset({80, 63}) {61, 79}
Equivalent! frozenset({93, 175}) {221, 93}
Equivalent! frozenset({115, 125}) {161, 171}
Equivalent! frozenset({116, 126}) {162, 172}
Equivalent! frozenset({129, 119}) {165, 175}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6a3f048>, {0: {0}, 1: {6}, 2: {7}, 3: {8}, 4: {9}, 5: {5}, 6: {10}, 7: {11}, 8: {12}, 9: {13}, 10: {14}, 11: {15}, 12: {16}, 13: {17}, 14: {18}, 15: {19}, 16: {20}, 17: {21}, 18: {22}, 19: {23}, 20: {24}, 21: {25}, 22: {26}, 23: {27}, 24: {28}, 25: {29}, 26: {30}, 27: {31}, 28: {32}, 29: {33}, 30: {34}, 31: {35}, 32: {36}, 33: {37}, 34: {38}, 35: {39}, 36: {40}, 37: {41}, 38: {42}, 39: {43}, 40: {44}, 41: {45}, 42: {46}, 43: {47}, 44: {48}, 45: {49}, 46: {50}, 47: {51}, 48: {4}, 49: {52}, 50: {53}, 51: {54}, 52: {55}, 53: {56}, 54: {57}, 55: {3}, 56: {58}, 57: {59}, 58: {60}, 59: {61}, 60: {62}, 61: {80}, 62: {64}, 63: {65}, 64: {66}, 65: {67}, 66: {68}, 67: {69}, 68: {70}, 69: {71}, 70: {72}, 71: {73}, 72: {74}, 73: {2}, 74: {75}, 75: {76}, 76: {77}, 77: {78}, 78: {79}, 79: {63}, 80: {81}, 81: {82}, 82: {83, 132}, 83: {84, 133}, 84: {85}, 85: {86}, 86: {87}, 87: {88, 137}, 88: {89, 171}, 89: {1}, 90: {90}, 91: {91}, 92: {92}, 93: {175}, 94: {176}, 95: {177}, 96: {178}, 97: {179}, 98: {180}, 99: {181}, 100: {182}, 101: {183}, 102: {184}, 103: {182, 185}, 104: {186}, 105: {187}, 106: {188}, 107: {189}, 108: {190}, 109: {191}, 110: {192}, 111: {193}, 112: {194}, 113: {195}, 114: {196}, 115: {197}, 116: {198}, 117: {199}, 118: {200}, 119: {201}, 120: {202}, 121: {203}, 122: {204}, 123: {205}, 124: {206}, 125: {207}, 126: {208}, 127: {208, 209}, 128: {210, 211}, 129: {211}, 130: {212}, 131: {213}, 132: {214}, 133: {215}, 134: {216}, 135: {217}, 136: {218}, 137: {219}, 138: {220}, 139: {221}, 140: {94}, 141: {95}, 142: {96}, 143: {97}, 144: {98}, 145: {99}, 146: {100}, 147: {101}, 148: {102}, 149: {103}, 150: {104}, 151: {105}, 152: {106}, 153: {107}, 154: {108}, 155: {109}, 156: {110}, 157: {111}, 158: {112}, 159: {113}, 160: {114}, 161: {115}, 162: {116}, 163: {117}, 164: {118}, 165: {129}, 166: {120}, 167: {121}, 168: {122}, 169: {123}, 170: {124}, 171: {125}, 172: {126}, 173: {127}, 174: {128}, 175: {119}, 176: {130}, 177: {131}, 178: {132}, 179: {133}, 180: {134}, 181: {135}, 182: {136}, 183: {137}, 184: {138}, 185: {139}, 186: {140}, 187: {141}, 188: {142}, 189: {143}, 190: {144}, 191: {145}, 192: {146}, 193: {147}, 194: {148}, 195: {149}, 196: {150}, 197: {151}, 198: {152}, 199: {153}, 200: {154}, 201: {155}, 202: {156}, 203: {157}, 204: {158}, 205: {159}, 206: {160}, 207: {161}, 208: {162}, 209: {163}, 210: {164}, 211: {165}, 212: {166}, 213: {167}, 214: {168}, 215: {169}, 216: {170}, 217: {171}, 218: {172}, 219: {173}, 220: {174}, 221: {93}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}, 231: {231}, 232: {232}, 233: {233}, 234: {234}, 235: {235}, 236: {236}, 237: {237}, 238: {238}, 239: {239}, 240: {240}, 241: {241}, 242: {242}, 243: {243}, 244: {244}, 245: {245}, 246: {246}, 247: {247}, 248: {248}, 249: {249}, 250: {250}, 251: {251}, 252: {252}, 253: {253}, 254: {254}, 255: {255}, 256: {256}, 257: {257}, 258: {258}, 259: {259}, 260: {260}, 261: {261}, 262: {262}, 263: {263}, 264: {264}, 265: {265}, 266: {266}, 267: {267}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 xor xor
EXACT 28 lshr lshr
EXACT 29 trunc trunc
EXACT 30 and and
EXACT 31 getelementptr getelementptr
EXACT 32 store store
EXACT 33 icmp icmp
EXACT 34 zext zext
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 xor xor
EXACT 43 add add
EXACT 44 icmp icmp
EXACT 45 zext zext
EXACT 46 getelementptr getelementptr
EXACT 47 store store
EXACT 48 getelementptr getelementptr
EXACT 49 add add
EXACT 50 load load
EXACT 51 add add
EXACT 52 store store
EXACT 53 inttoptr inttoptr
EXACT 54 store store
EXACT 55 getelementptr getelementptr
EXACT 56 load load
EXACT 57 add add
EXACT 58 load load
EXACT 59 load load
EXACT 60 add add
EXACT 61 store store
EXACT 62 inttoptr inttoptr
EXACT 63 store store
EXACT 64 load load
EXACT 65 add add
EXACT 66 load load
EXACT 67 add add
EXACT 68 store store
EXACT 69 getelementptr getelementptr
EXACT 70 load load
EXACT 71 inttoptr inttoptr
EXACT 72 store store
EXACT 73 getelementptr getelementptr
EXACT 74 load load
EXACT 75 add add
EXACT 76 load load
EXACT 77 load load
EXACT 78 add add
EXACT 79 store store
EXACT 80 inttoptr inttoptr
EXACT 81 store store
MORE 82 POT: 2
MORE 83 POT: 2
EXACT 84 load load
EXACT 85 add add
EXACT 86 store store
MORE 87 POT: 2
MORE 88 POT: 2
EXACT 89 getelementptr getelementptr
EXACT 90 getelementptr getelementptr
EXACT 91 bitcast bitcast
EXACT 92 load load
EXACT 93 br br
EXACT 94 phi phi
EXACT 95 load load
EXACT 96 add add
EXACT 97 add add
EXACT 98 store store
EXACT 99 inttoptr inttoptr
EXACT 100 load load
EXACT 101 zext zext
EXACT 102 store store
MORE 103 POT: 2
EXACT 104 sub sub
EXACT 105 icmp icmp
EXACT 106 zext zext
EXACT 107 store store
EXACT 108 and and
EXACT 109 tail tail
EXACT 110 trunc trunc
EXACT 111 and and
EXACT 112 xor xor
EXACT 113 store store
EXACT 114 xor xor
EXACT 115 xor xor
EXACT 116 lshr lshr
EXACT 117 trunc trunc
EXACT 118 and and
EXACT 119 store store
EXACT 120 icmp icmp
EXACT 121 zext zext
EXACT 122 store store
EXACT 123 lshr lshr
EXACT 124 trunc trunc
EXACT 125 store store
EXACT 126 lshr lshr
MORE 127 POT: 2
MORE 128 POT: 2
EXACT 129 xor xor
EXACT 130 add add
EXACT 131 icmp icmp
EXACT 132 zext zext
EXACT 133 store store
EXACT 134 icmp icmp
EXACT 135 xor xor
EXACT 136 select select
EXACT 137 add add
EXACT 138 store store
EXACT 139 br br
EXACT 140 add add
EXACT 141 add add
EXACT 142 store store
EXACT 143 inttoptr inttoptr
EXACT 144 load load
EXACT 145 store store
EXACT 146 add add
EXACT 147 add add
EXACT 148 store store
EXACT 149 inttoptr inttoptr
EXACT 150 load load
EXACT 151 store store
EXACT 152 add add
EXACT 153 add add
EXACT 154 store store
EXACT 155 inttoptr inttoptr
EXACT 156 load load
EXACT 157 store store
EXACT 158 store store
EXACT 159 add add
EXACT 160 add add
EXACT 161 load load
EXACT 162 add add
EXACT 163 inttoptr inttoptr
EXACT 164 store store
EXACT 165 store store
EXACT 166 store store
EXACT 167 tail tail
EXACT 168 load load
EXACT 169 add add
EXACT 170 add add
EXACT 171 load load
EXACT 172 add add
EXACT 173 inttoptr inttoptr
EXACT 174 store store
EXACT 175 store store
EXACT 176 store store
EXACT 177 tail tail
EXACT 178 load load
EXACT 179 add add
EXACT 180 load load
EXACT 181 add add
EXACT 182 store store
EXACT 183 inttoptr inttoptr
EXACT 184 load load
EXACT 185 add add
EXACT 186 zext zext
EXACT 187 store store
EXACT 188 icmp icmp
EXACT 189 icmp icmp
EXACT 190 or or
EXACT 191 zext zext
EXACT 192 store store
EXACT 193 and and
EXACT 194 tail tail
EXACT 195 trunc trunc
EXACT 196 and and
EXACT 197 xor xor
EXACT 198 store store
EXACT 199 xor xor
EXACT 200 lshr lshr
EXACT 201 trunc trunc
EXACT 202 and and
EXACT 203 store store
EXACT 204 zext zext
EXACT 205 store store
EXACT 206 lshr lshr
EXACT 207 trunc trunc
EXACT 208 store store
EXACT 209 lshr lshr
EXACT 210 xor xor
EXACT 211 add add
EXACT 212 icmp icmp
EXACT 213 zext zext
EXACT 214 store store
EXACT 215 add add
EXACT 216 store store
EXACT 217 store store
EXACT 218 load load
EXACT 219 add add
EXACT 220 store store
EXACT 221 br br
EXACT 222 load load
EXACT 223 add add
EXACT 224 store store
EXACT 225 icmp icmp
EXACT 226 zext zext
EXACT 227 store store
EXACT 228 trunc trunc
EXACT 229 and and
EXACT 230 tail tail
EXACT 231 trunc trunc
EXACT 232 and and
EXACT 233 xor xor
EXACT 234 store store
EXACT 235 xor xor
EXACT 236 xor xor
EXACT 237 lshr lshr
EXACT 238 trunc trunc
EXACT 239 and and
EXACT 240 store store
EXACT 241 icmp icmp
EXACT 242 zext zext
EXACT 243 store store
EXACT 244 lshr lshr
EXACT 245 trunc trunc
EXACT 246 store store
EXACT 247 lshr lshr
EXACT 248 xor xor
EXACT 249 add add
EXACT 250 icmp icmp
EXACT 251 zext zext
EXACT 252 store store
EXACT 253 add add
EXACT 254 store store
EXACT 255 add add
EXACT 256 inttoptr inttoptr
EXACT 257 load load
EXACT 258 store store
EXACT 259 store store
EXACT 260 add add
EXACT 261 store store
EXACT 262 inttoptr inttoptr
EXACT 263 load load
EXACT 264 store store
EXACT 265 add add
EXACT 266 store store
EXACT 267 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
- 2 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 3 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 4 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 5 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 7 %3 = load i64, i64* %RBP, align 8
- 8 %4 = add i64 %1, 1
- 9 store i64 %4, i64* %PC, align 8
- 10 %5 = load i64, i64* %RSP, align 8
- 11 %6 = add i64 %5, -8
- 12 %7 = inttoptr i64 %6 to i64*
- 13 store i64 %3, i64* %7, align 8
- 14 %8 = load i64, i64* %PC, align 8
- 15 store i64 %6, i64* %RBP, align 8
- 16 %9 = add i64 %5, -56
- 17 store i64 %9, i64* %RSP, align 8
- 18 %10 = icmp ult i64 %6, 48
- 19 %11 = zext i1 %10 to i8
- 20 %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 21 store i8 %11, i8* %12, align 1
- 22 %13 = trunc i64 %9 to i32
- 23 %14 = and i32 %13, 255
- 24 %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
- 25 %16 = trunc i32 %15 to i8
- 26 %17 = and i8 %16, 1
- 27 %18 = xor i8 %17, 1
- 28 %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 29 store i8 %18, i8* %19, align 1
- 30 %20 = xor i64 %6, 16
- 31 %21 = xor i64 %20, %9
- 32 %22 = lshr i64 %21, 4
- 33 %23 = trunc i64 %22 to i8
- 34 %24 = and i8 %23, 1
- 35 %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 36 store i8 %24, i8* %25, align 1
- 37 %26 = icmp eq i64 %9, 0
- 38 %27 = zext i1 %26 to i8
- 39 %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 40 store i8 %27, i8* %28, align 1
- 41 %29 = lshr i64 %9, 63
- 42 %30 = trunc i64 %29 to i8
- 43 %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 44 store i8 %30, i8* %31, align 1
- 45 %32 = lshr i64 %6, 63
- 46 %33 = xor i64 %29, %32
- 47 %34 = add nuw nsw i64 %33, %32
- 48 %35 = icmp eq i64 %34, 2
- 49 %36 = zext i1 %35 to i8
- 50 %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 51 store i8 %36, i8* %37, align 1
- 52 %38 = add i64 %5, -16
- 53 %39 = load i64, i64* %RDI, align 8
- 54 %40 = add i64 %8, 11
- 55 store i64 %40, i64* %PC, align 8
- 56 %41 = inttoptr i64 %38 to i64*
- 57 store i64 %39, i64* %41, align 8
- 58 %42 = load i64, i64* %RBP, align 8
- 59 %43 = add i64 %42, -16
- 60 %44 = load i64, i64* %RSI, align 8
- 61 %45 = load i64, i64* %PC, align 8
- 62 %46 = add i64 %45, 4
- 63 store i64 %46, i64* %PC, align 8
- 64 %47 = inttoptr i64 %43 to i64*
- 65 store i64 %44, i64* %47, align 8
- 66 %48 = load i64, i64* %RBP, align 8
- 67 %49 = add i64 %48, -24
- 68 %50 = load i64, i64* %PC, align 8
- 69 %51 = add i64 %50, 5
- 70 store i64 %51, i64* %PC, align 8
- 71 %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
- 72 %53 = load i64, i64* %52, align 1
- 73 %54 = inttoptr i64 %49 to i64*
- 74 store i64 %53, i64* %54, align 8
- 75 %55 = load i64, i64* %RBP, align 8
- 76 %56 = add i64 %55, -32
- 77 %57 = load i64, i64* %RDX, align 8
- 78 %58 = load i64, i64* %PC, align 8
- 79 %59 = add i64 %58, 4
- 80 store i64 %59, i64* %PC, align 8
- 81 %60 = inttoptr i64 %56 to i64*
- 82 store i64 %57, i64* %60, align 8
- 83 %61 = load i64, i64* %RBP, align 8
- 84 %62 = add i64 %61, -36
- 85 %63 = load i64, i64* %PC, align 8
- 86 %64 = add i64 %63, 7
- 87 store i64 %64, i64* %PC, align 8
- 88 %65 = inttoptr i64 %62 to i32*
- 89 store i32 0, i32* %65, align 4
- 90 %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
- 91 %67 = bitcast i64* %66 to double*
- 92 %.pre = load i64, i64* %PC, align 8
- 93 \<badref\> = br label %block_401ea0
- 94 %68 = add i64 %126, -8
- 95 %69 = add i64 %159, 4
- 96 store i64 %69, i64* %PC, align 8
- 97 %70 = inttoptr i64 %68 to i64*
- 98 %71 = load i64, i64* %70, align 8
- 99 store i64 %71, i64* %RDI, align 8
- 100 %72 = add i64 %126, -16
- 101 %73 = add i64 %159, 8
- 102 store i64 %73, i64* %PC, align 8
- 103 %74 = inttoptr i64 %72 to i64*
- 104 %75 = load i64, i64* %74, align 8
- 105 store i64 %75, i64* %RSI, align 8
- 106 %76 = add i64 %126, -24
- 107 %77 = add i64 %159, 13
- 108 store i64 %77, i64* %PC, align 8
- 109 %78 = inttoptr i64 %76 to i64*
- 110 %79 = load i64, i64* %78, align 8
- 111 store i64 %79, i64* %52, align 1
- 112 store double 0.000000e+00, double* %67, align 1
- 113 %80 = add i64 %159, 18000
- 114 %81 = add i64 %159, 18
- 115 %82 = load i64, i64* %RSP, align 8
- 116 %83 = add i64 %82, -8
- 117 %84 = inttoptr i64 %83 to i64*
- 118 store i64 %81, i64* %84, align 8
- 119 store i64 %83, i64* %RSP, align 8
- 120 store i64 %80, i64* %PC, align 8
- 121 %85 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
- 122 %86 = load i64, i64* %PC, align 8
- 123 %87 = add i64 %86, 16190
- 124 %88 = add i64 %86, 5
- 125 %89 = load i64, i64* %RSP, align 8
- 126 %90 = add i64 %89, -8
- 127 %91 = inttoptr i64 %90 to i64*
- 128 store i64 %88, i64* %91, align 8
- 129 store i64 %90, i64* %RSP, align 8
- 130 store i64 %87, i64* %PC, align 8
- 131 %92 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %2)
- 132 %93 = load i64, i64* %RBP, align 8
- 133 %94 = add i64 %93, -36
- 134 %95 = load i64, i64* %PC, align 8
- 135 %96 = add i64 %95, 3
- 136 store i64 %96, i64* %PC, align 8
- 137 %97 = inttoptr i64 %94 to i32*
- 138 %98 = load i32, i32* %97, align 4
- 139 %99 = add i32 %98, 1
- 140 %100 = zext i32 %99 to i64
- 141 store i64 %100, i64* %RAX, align 8
- 142 %101 = icmp eq i32 %98, -1
- 143 %102 = icmp eq i32 %99, 0
- 144 %103 = or i1 %101, %102
- 145 %104 = zext i1 %103 to i8
- 146 store i8 %104, i8* %12, align 1
- 147 %105 = and i32 %99, 255
- 148 %106 = tail call i32 @llvm.ctpop.i32(i32 %105) #12
- 149 %107 = trunc i32 %106 to i8
- 150 %108 = and i8 %107, 1
- 151 %109 = xor i8 %108, 1
- 152 store i8 %109, i8* %19, align 1
- 153 %110 = xor i32 %99, %98
- 154 %111 = lshr i32 %110, 4
- 155 %112 = trunc i32 %111 to i8
- 156 %113 = and i8 %112, 1
- 157 store i8 %113, i8* %25, align 1
- 158 %114 = zext i1 %102 to i8
- 159 store i8 %114, i8* %28, align 1
- 160 %115 = lshr i32 %99, 31
- 161 %116 = trunc i32 %115 to i8
- 162 store i8 %116, i8* %31, align 1
- 163 %117 = lshr i32 %98, 31
- 164 %118 = xor i32 %115, %117
- 165 %119 = add nuw nsw i32 %118, %115
- 166 %120 = icmp eq i32 %119, 2
- 167 %121 = zext i1 %120 to i8
- 168 store i8 %121, i8* %37, align 1
- 169 %122 = add i64 %95, 9
- 170 store i64 %122, i64* %PC, align 8
- 171 store i32 %99, i32* %97, align 4
- 172 %123 = load i64, i64* %PC, align 8
- 173 %124 = add i64 %123, -48
- 174 store i64 %124, i64* %PC, align 8
- 175 \<badref\> = br label %block_401ea0
- 176 %125 = phi i64 [ %124, %block_401eb0 ], [ %.pre, %block_401e80 ]
- 177 %126 = load i64, i64* %RBP, align 8
- 178 %127 = add i64 %126, -36
- 179 %128 = add i64 %125, 3
- 180 store i64 %128, i64* %PC, align 8
- 181 %129 = inttoptr i64 %127 to i32*
- 182 %130 = load i32, i32* %129, align 4
- 183 %131 = zext i32 %130 to i64
- 184 store i64 %131, i64* %RAX, align 8
- 185 %132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
- 186 %133 = sub i32 %130, %132
- 187 %134 = icmp ult i32 %130, %132
- 188 %135 = zext i1 %134 to i8
- 189 store i8 %135, i8* %12, align 1
- 190 %136 = and i32 %133, 255
- 191 %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #12
- 192 %138 = trunc i32 %137 to i8
- 193 %139 = and i8 %138, 1
- 194 %140 = xor i8 %139, 1
- 195 store i8 %140, i8* %19, align 1
- 196 %141 = xor i32 %132, %130
- 197 %142 = xor i32 %141, %133
- 198 %143 = lshr i32 %142, 4
- 199 %144 = trunc i32 %143 to i8
- 200 %145 = and i8 %144, 1
- 201 store i8 %145, i8* %25, align 1
- 202 %146 = icmp eq i32 %133, 0
- 203 %147 = zext i1 %146 to i8
- 204 store i8 %147, i8* %28, align 1
- 205 %148 = lshr i32 %133, 31
- 206 %149 = trunc i32 %148 to i8
- 207 store i8 %149, i8* %31, align 1
- 208 %150 = lshr i32 %130, 31
- 209 %151 = lshr i32 %132, 31
- 210 %152 = xor i32 %151, %150
- 211 %153 = xor i32 %148, %150
- 212 %154 = add nuw nsw i32 %153, %152
- 213 %155 = icmp eq i32 %154, 2
- 214 %156 = zext i1 %155 to i8
- 215 store i8 %156, i8* %37, align 1
- 216 %157 = icmp ne i8 %149, 0
- 217 %158 = xor i1 %157, %155
- 218 %.v = select i1 %158, i64 16, i64 53
- 219 %159 = add i64 %125, %.v
- 220 store i64 %159, i64* %PC, align 8
- 221 \<badref\> = br i1 %158, label %block_401eb0, label %block_401ed5
- 222 %160 = load i64, i64* %RSP, align 8
- 223 %161 = add i64 %160, 48
- 224 store i64 %161, i64* %RSP, align 8
- 225 %162 = icmp ugt i64 %160, -49
- 226 %163 = zext i1 %162 to i8
- 227 store i8 %163, i8* %12, align 1
- 228 %164 = trunc i64 %161 to i32
- 229 %165 = and i32 %164, 255
- 230 %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #12
- 231 %167 = trunc i32 %166 to i8
- 232 %168 = and i8 %167, 1
- 233 %169 = xor i8 %168, 1
- 234 store i8 %169, i8* %19, align 1
- 235 %170 = xor i64 %160, 16
- 236 %171 = xor i64 %170, %161
- 237 %172 = lshr i64 %171, 4
- 238 %173 = trunc i64 %172 to i8
- 239 %174 = and i8 %173, 1
- 240 store i8 %174, i8* %25, align 1
- 241 %175 = icmp eq i64 %161, 0
- 242 %176 = zext i1 %175 to i8
- 243 store i8 %176, i8* %28, align 1
- 244 %177 = lshr i64 %161, 63
- 245 %178 = trunc i64 %177 to i8
- 246 store i8 %178, i8* %31, align 1
- 247 %179 = lshr i64 %160, 63
- 248 %180 = xor i64 %177, %179
- 249 %181 = add nuw nsw i64 %180, %177
- 250 %182 = icmp eq i64 %181, 2
- 251 %183 = zext i1 %182 to i8
- 252 store i8 %183, i8* %37, align 1
- 253 %184 = add i64 %159, 5
- 254 store i64 %184, i64* %PC, align 8
- 255 %185 = add i64 %160, 56
- 256 %186 = inttoptr i64 %161 to i64*
- 257 %187 = load i64, i64* %186, align 8
- 258 store i64 %187, i64* %RBP, align 8
- 259 store i64 %185, i64* %RSP, align 8
- 260 %188 = add i64 %159, 6
- 261 store i64 %188, i64* %PC, align 8
- 262 %189 = inttoptr i64 %185 to i64*
- 263 %190 = load i64, i64* %189, align 8
- 264 store i64 %190, i64* %PC, align 8
- 265 %191 = add i64 %160, 64
- 266 store i64 %191, i64* %RSP, align 8
- 267 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b66529d8>, {0: {0}, 1: {89}, 2: {73}, 3: {55}, 4: {48}, 5: {5}, 6: {1}, 7: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 8: {185, 3}, 9: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 10: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 11: {162, 172, 140, 7}, 12: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 13: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 14: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 15: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 16: {12}, 17: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 18: {14}, 19: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 20: {16}, 21: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 22: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 23: {193, 19, 108, 229}, 24: {194, 230, 167, 109, 177, 20}, 25: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 26: {196, 232, 202, 111, 239, 118, 22, 30}, 27: {112, 233, 197, 23}, 28: {24}, 29: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 30: {26, 235}, 31: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 32: {116, 28, 237, 200}, 33: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 34: {196, 232, 202, 111, 239, 118, 22, 30}, 35: {31}, 36: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 37: {33, 134, 105, 241, 120, 189}, 38: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 39: {35}, 40: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 41: {41, 244, 37, 247}, 42: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 43: {39}, 44: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 45: {41, 244, 37, 247}, 46: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 47: {130, 137, 43, 211, 249}, 48: {212, 250, 131, 44}, 49: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 50: {46}, 51: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 52: {49, 146, 57}, 53: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 54: {51}, 55: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 56: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 57: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 58: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 59: {49, 146, 57}, 60: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 61: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 62: {60, 141, 78}, 63: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 64: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 65: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 66: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 67: {152, 65}, 68: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 69: {170, 67, 253}, 70: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 71: {69}, 72: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 73: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 74: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 75: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 76: {75}, 77: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 78: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 79: {60, 141, 78}, 80: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 81: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 82: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 83: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 84: {96, 83, 179}, 85: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 86: {85}, 87: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 88: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 89: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 90: {90}, 91: {91}, 92: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 93: {221, 93}, 94: {162, 172, 140, 7}, 95: {60, 141, 78}, 96: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 97: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 98: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 99: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 100: {49, 146, 57}, 101: {147}, 102: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 103: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 104: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 105: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 106: {152, 65}, 107: {153}, 108: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 109: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 110: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 111: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 112: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 113: {159}, 114: {160}, 115: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 116: {162, 172, 140, 7}, 117: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 118: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 119: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 120: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 121: {194, 230, 167, 109, 177, 20}, 122: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 123: {169}, 124: {170, 67, 253}, 125: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 126: {162, 172, 140, 7}, 127: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 128: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 129: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 130: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 131: {194, 230, 167, 109, 177, 20}, 132: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 133: {96, 83, 179}, 134: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 135: {97, 181}, 136: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 137: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 138: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 139: {185, 3}, 140: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 141: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 142: {188}, 143: {33, 134, 105, 241, 120, 189}, 144: {190}, 145: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 146: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 147: {193, 19, 108, 229}, 148: {194, 230, 167, 109, 177, 20}, 149: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 150: {196, 232, 202, 111, 239, 118, 22, 30}, 151: {112, 233, 197, 23}, 152: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 153: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 154: {116, 28, 237, 200}, 155: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 156: {196, 232, 202, 111, 239, 118, 22, 30}, 157: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 158: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 159: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 160: {206, 209, 123, 126, 127}, 161: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 162: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 163: {206, 209, 123, 126, 127}, 164: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 165: {130, 137, 43, 211, 249}, 166: {212, 250, 131, 44}, 167: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 168: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 169: {215}, 170: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 171: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 172: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 173: {219}, 174: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 175: {221, 93}, 176: {94}, 177: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 178: {96, 83, 179}, 179: {97, 181}, 180: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 181: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 182: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 183: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 184: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 185: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 186: {104}, 187: {33, 134, 105, 241, 120, 189}, 188: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 189: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 190: {193, 19, 108, 229}, 191: {194, 230, 167, 109, 177, 20}, 192: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 193: {196, 232, 202, 111, 239, 118, 22, 30}, 194: {112, 233, 197, 23}, 195: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 196: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 197: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 198: {116, 28, 237, 200}, 199: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 200: {196, 232, 202, 111, 239, 118, 22, 30}, 201: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 202: {33, 134, 105, 241, 120, 189}, 203: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 204: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 205: {206, 209, 123, 126, 127}, 206: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 207: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 208: {206, 209, 123, 126, 127}, 209: {206, 209, 123, 126, 127}, 210: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 211: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 212: {130, 137, 43, 211, 249}, 213: {212, 250, 131, 44}, 214: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 215: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 216: {33, 134, 105, 241, 120, 189}, 217: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 218: {136}, 219: {130, 137, 43, 211, 249}, 220: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 221: {139}, 222: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 223: {223}, 224: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 225: {225}, 226: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 227: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 228: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 229: {193, 19, 108, 229}, 230: {194, 230, 167, 109, 177, 20}, 231: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 232: {196, 232, 202, 111, 239, 118, 22, 30}, 233: {112, 233, 197, 23}, 234: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 235: {26, 235}, 236: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 237: {116, 28, 237, 200}, 238: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 239: {196, 232, 202, 111, 239, 118, 22, 30}, 240: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 241: {33, 134, 105, 241, 120, 189}, 242: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 243: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 244: {41, 244, 37, 247}, 245: {195, 228, 38, 231, 201, 110, 207, 238, 18, 21, 117, 245, 124, 29}, 246: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 247: {41, 244, 37, 247}, 248: {128, 129, 135, 199, 42, 236, 114, 115, 210, 248, 27}, 249: {130, 137, 43, 211, 249}, 250: {212, 250, 131, 44}, 251: {34, 226, 132, 101, 106, 204, 45, 15, 242, 213, 121, 186, 251, 191}, 252: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 253: {170, 67, 253}, 254: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 255: {255}, 256: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 257: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 258: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 259: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 260: {260}, 261: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 262: {256, 99, 163, 262, 71, 8, 173, 143, 80, 53, 149, 87, 183, 155, 62}, 263: {257, 2, 6, 263, 10, 144, 150, 156, 161, 168, 171, 50, 178, 180, 56, 184, 58, 59, 64, 66, 70, 74, 76, 77, 82, 84, 218, 92, 222, 95, 100, 103}, 264: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 265: {265}, 266: {258, 259, 4, 133, 261, 264, 9, 138, 11, 266, 13, 142, 17, 145, 148, 151, 25, 154, 157, 158, 32, 36, 164, 165, 166, 40, 174, 47, 175, 176, 52, 54, 182, 187, 61, 63, 192, 68, 198, 72, 203, 205, 79, 208, 81, 86, 214, 88, 216, 217, 220, 224, 98, 227, 102, 234, 107, 240, 113, 243, 246, 119, 122, 252, 125, 254}, 267: {267}})
Equivalent! frozenset({59, 77}) {61, 78}
Equivalent! frozenset({60, 78}) {62, 79}
Equivalent! frozenset({61, 79}) {80, 63}
Equivalent! frozenset({221, 93}) {93, 175}
Equivalent! frozenset({161, 171}) {115, 125}
Equivalent! frozenset({162, 172}) {116, 126}
Equivalent! frozenset({165, 175}) {129, 119}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b66529d8>, {0: {0}, 1: {89}, 2: {73}, 3: {55}, 4: {48}, 5: {5}, 6: {1}, 7: {2}, 8: {3}, 9: {4}, 10: {6}, 11: {7}, 12: {8}, 13: {9}, 14: {10}, 15: {11}, 16: {12}, 17: {13}, 18: {14}, 19: {15}, 20: {16}, 21: {17}, 22: {18}, 23: {19}, 24: {20}, 25: {21}, 26: {22}, 27: {23}, 28: {24}, 29: {25}, 30: {26}, 31: {27}, 32: {28}, 33: {29}, 34: {30}, 35: {31}, 36: {32}, 37: {33}, 38: {34}, 39: {35}, 40: {36}, 41: {37}, 42: {38}, 43: {39}, 44: {40}, 45: {41}, 46: {42}, 47: {43}, 48: {44}, 49: {45}, 50: {46}, 51: {47}, 52: {49}, 53: {50}, 54: {51}, 55: {52}, 56: {53}, 57: {54}, 58: {56}, 59: {57}, 60: {58}, 61: {59}, 62: {60}, 63: {79}, 64: {62}, 65: {63}, 66: {64}, 67: {65}, 68: {66}, 69: {67}, 70: {68}, 71: {69}, 72: {70}, 73: {71}, 74: {72}, 75: {74}, 76: {75}, 77: {76}, 78: {77}, 79: {78}, 80: {61}, 81: {80}, 82: {81}, 83: {178, 82}, 84: {83, 179}, 85: {84}, 86: {85}, 87: {86}, 88: {87, 183}, 89: {88, 217}, 90: {90}, 91: {91}, 92: {92}, 93: {221}, 94: {140}, 95: {141}, 96: {142}, 97: {143}, 98: {144}, 99: {145}, 100: {146}, 101: {147}, 102: {148}, 103: {149}, 104: {150}, 105: {151}, 106: {152}, 107: {153}, 108: {154}, 109: {155}, 110: {156}, 111: {157}, 112: {158}, 113: {159}, 114: {160}, 115: {161}, 116: {162}, 117: {163}, 118: {164}, 119: {175}, 120: {166}, 121: {167}, 122: {168}, 123: {169}, 124: {170}, 125: {171}, 126: {172}, 127: {173}, 128: {174}, 129: {165}, 130: {176}, 131: {177}, 132: {178}, 133: {179}, 134: {180}, 135: {181}, 136: {182}, 137: {183}, 138: {184}, 139: {185}, 140: {186}, 141: {187}, 142: {188}, 143: {189}, 144: {190}, 145: {191}, 146: {192}, 147: {193}, 148: {194}, 149: {195}, 150: {196}, 151: {197}, 152: {198}, 153: {199}, 154: {200}, 155: {201}, 156: {202}, 157: {203}, 158: {204}, 159: {205}, 160: {206}, 161: {207}, 162: {208}, 163: {209}, 164: {210}, 165: {211}, 166: {212}, 167: {213}, 168: {214}, 169: {215}, 170: {216}, 171: {217}, 172: {218}, 173: {219}, 174: {220}, 175: {93}, 176: {94}, 177: {95}, 178: {96}, 179: {97}, 180: {98}, 181: {99}, 182: {100}, 183: {101}, 184: {102}, 185: {100, 103}, 186: {104}, 187: {105}, 188: {106}, 189: {107}, 190: {108}, 191: {109}, 192: {110}, 193: {111}, 194: {112}, 195: {113}, 196: {114}, 197: {115}, 198: {116}, 199: {117}, 200: {118}, 201: {119}, 202: {120}, 203: {121}, 204: {122}, 205: {123}, 206: {124}, 207: {125}, 208: {126}, 209: {126, 127}, 210: {128, 129}, 211: {129}, 212: {130}, 213: {131}, 214: {132}, 215: {133}, 216: {134}, 217: {135}, 218: {136}, 219: {137}, 220: {138}, 221: {139}, 222: {222}, 223: {223}, 224: {224}, 225: {225}, 226: {226}, 227: {227}, 228: {228}, 229: {229}, 230: {230}, 231: {231}, 232: {232}, 233: {233}, 234: {234}, 235: {235}, 236: {236}, 237: {237}, 238: {238}, 239: {239}, 240: {240}, 241: {241}, 242: {242}, 243: {243}, 244: {244}, 245: {245}, 246: {246}, 247: {247}, 248: {248}, 249: {249}, 250: {250}, 251: {251}, 252: {252}, 253: {253}, 254: {254}, 255: {255}, 256: {256}, 257: {257}, 258: {258}, 259: {259}, 260: {260}, 261: {261}, 262: {262}, 263: {263}, 264: {264}, 265: {265}, 266: {266}, 267: {267}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 getelementptr getelementptr
EXACT 3 getelementptr getelementptr
EXACT 4 getelementptr getelementptr
EXACT 5 getelementptr getelementptr
EXACT 6 getelementptr getelementptr
EXACT 7 load load
EXACT 8 add add
EXACT 9 store store
EXACT 10 load load
EXACT 11 add add
EXACT 12 inttoptr inttoptr
EXACT 13 store store
EXACT 14 load load
EXACT 15 store store
EXACT 16 add add
EXACT 17 store store
EXACT 18 icmp icmp
EXACT 19 zext zext
EXACT 20 getelementptr getelementptr
EXACT 21 store store
EXACT 22 trunc trunc
EXACT 23 and and
EXACT 24 tail tail
EXACT 25 trunc trunc
EXACT 26 and and
EXACT 27 xor xor
EXACT 28 getelementptr getelementptr
EXACT 29 store store
EXACT 30 xor xor
EXACT 31 xor xor
EXACT 32 lshr lshr
EXACT 33 trunc trunc
EXACT 34 and and
EXACT 35 getelementptr getelementptr
EXACT 36 store store
EXACT 37 icmp icmp
EXACT 38 zext zext
EXACT 39 getelementptr getelementptr
EXACT 40 store store
EXACT 41 lshr lshr
EXACT 42 trunc trunc
EXACT 43 getelementptr getelementptr
EXACT 44 store store
EXACT 45 lshr lshr
EXACT 46 xor xor
EXACT 47 add add
EXACT 48 icmp icmp
EXACT 49 zext zext
EXACT 50 getelementptr getelementptr
EXACT 51 store store
EXACT 52 add add
EXACT 53 load load
EXACT 54 add add
EXACT 55 store store
EXACT 56 inttoptr inttoptr
EXACT 57 store store
EXACT 58 load load
EXACT 59 add add
EXACT 60 load load
EXACT 61 load load
EXACT 62 add add
EXACT 63 store store
EXACT 64 inttoptr inttoptr
EXACT 65 store store
EXACT 66 load load
EXACT 67 add add
EXACT 68 load load
EXACT 69 add add
EXACT 70 store store
EXACT 71 getelementptr getelementptr
EXACT 72 load load
EXACT 73 inttoptr inttoptr
EXACT 74 store store
EXACT 75 load load
EXACT 76 add add
EXACT 77 load load
EXACT 78 load load
EXACT 79 add add
EXACT 80 store store
EXACT 81 inttoptr inttoptr
EXACT 82 store store
MORE 83 POT: 2
MORE 84 POT: 2
EXACT 85 load load
EXACT 86 add add
EXACT 87 store store
MORE 88 POT: 2
MORE 89 POT: 2
EXACT 90 getelementptr getelementptr
EXACT 91 bitcast bitcast
EXACT 92 load load
EXACT 93 br br
EXACT 94 add add
EXACT 95 add add
EXACT 96 store store
EXACT 97 inttoptr inttoptr
EXACT 98 load load
EXACT 99 store store
EXACT 100 add add
EXACT 101 add add
EXACT 102 store store
EXACT 103 inttoptr inttoptr
EXACT 104 load load
EXACT 105 store store
EXACT 106 add add
EXACT 107 add add
EXACT 108 store store
EXACT 109 inttoptr inttoptr
EXACT 110 load load
EXACT 111 store store
EXACT 112 store store
EXACT 113 add add
EXACT 114 add add
EXACT 115 load load
EXACT 116 add add
EXACT 117 inttoptr inttoptr
EXACT 118 store store
EXACT 119 store store
EXACT 120 store store
EXACT 121 tail tail
EXACT 122 load load
EXACT 123 add add
EXACT 124 add add
EXACT 125 load load
EXACT 126 add add
EXACT 127 inttoptr inttoptr
EXACT 128 store store
EXACT 129 store store
EXACT 130 store store
EXACT 131 tail tail
EXACT 132 load load
EXACT 133 add add
EXACT 134 load load
EXACT 135 add add
EXACT 136 store store
EXACT 137 inttoptr inttoptr
EXACT 138 load load
EXACT 139 add add
EXACT 140 zext zext
EXACT 141 store store
EXACT 142 icmp icmp
EXACT 143 icmp icmp
EXACT 144 or or
EXACT 145 zext zext
EXACT 146 store store
EXACT 147 and and
EXACT 148 tail tail
EXACT 149 trunc trunc
EXACT 150 and and
EXACT 151 xor xor
EXACT 152 store store
EXACT 153 xor xor
EXACT 154 lshr lshr
EXACT 155 trunc trunc
EXACT 156 and and
EXACT 157 store store
EXACT 158 zext zext
EXACT 159 store store
EXACT 160 lshr lshr
EXACT 161 trunc trunc
EXACT 162 store store
EXACT 163 lshr lshr
EXACT 164 xor xor
EXACT 165 add add
EXACT 166 icmp icmp
EXACT 167 zext zext
EXACT 168 store store
EXACT 169 add add
EXACT 170 store store
EXACT 171 store store
EXACT 172 load load
EXACT 173 add add
EXACT 174 store store
EXACT 175 br br
EXACT 176 phi phi
EXACT 177 load load
EXACT 178 add add
EXACT 179 add add
EXACT 180 store store
EXACT 181 inttoptr inttoptr
EXACT 182 load load
EXACT 183 zext zext
EXACT 184 store store
MORE 185 POT: 2
EXACT 186 sub sub
EXACT 187 icmp icmp
EXACT 188 zext zext
EXACT 189 store store
EXACT 190 and and
EXACT 191 tail tail
EXACT 192 trunc trunc
EXACT 193 and and
EXACT 194 xor xor
EXACT 195 store store
EXACT 196 xor xor
EXACT 197 xor xor
EXACT 198 lshr lshr
EXACT 199 trunc trunc
EXACT 200 and and
EXACT 201 store store
EXACT 202 icmp icmp
EXACT 203 zext zext
EXACT 204 store store
EXACT 205 lshr lshr
EXACT 206 trunc trunc
EXACT 207 store store
EXACT 208 lshr lshr
MORE 209 POT: 2
MORE 210 POT: 2
EXACT 211 xor xor
EXACT 212 add add
EXACT 213 icmp icmp
EXACT 214 zext zext
EXACT 215 store store
EXACT 216 icmp icmp
EXACT 217 xor xor
EXACT 218 select select
EXACT 219 add add
EXACT 220 store store
EXACT 221 br br
EXACT 222 load load
EXACT 223 add add
EXACT 224 store store
EXACT 225 icmp icmp
EXACT 226 zext zext
EXACT 227 store store
EXACT 228 trunc trunc
EXACT 229 and and
EXACT 230 tail tail
EXACT 231 trunc trunc
EXACT 232 and and
EXACT 233 xor xor
EXACT 234 store store
EXACT 235 xor xor
EXACT 236 xor xor
EXACT 237 lshr lshr
EXACT 238 trunc trunc
EXACT 239 and and
EXACT 240 store store
EXACT 241 icmp icmp
EXACT 242 zext zext
EXACT 243 store store
EXACT 244 lshr lshr
EXACT 245 trunc trunc
EXACT 246 store store
EXACT 247 lshr lshr
EXACT 248 xor xor
EXACT 249 add add
EXACT 250 icmp icmp
EXACT 251 zext zext
EXACT 252 store store
EXACT 253 add add
EXACT 254 store store
EXACT 255 add add
EXACT 256 inttoptr inttoptr
EXACT 257 load load
EXACT 258 store store
EXACT 259 store store
EXACT 260 add add
EXACT 261 store store
EXACT 262 inttoptr inttoptr
EXACT 263 load load
EXACT 264 store store
EXACT 265 add add
EXACT 266 store store
EXACT 267 ret ret
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RDI.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%40 = add i64 %7, -16', '%41 = load i64, i64* %RDI.i36, align 8', '%42 = add i64 %10, 11', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%RSI.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI.i33, align 8', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -24', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 5', 'store i64 %53, i64* %3, align 8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%55 = load i64, i64* %54, align 1', '%56 = inttoptr i64 %51 to i64*', 'store i64 %55, i64* %56, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%57 = load i64, i64* %RBP.i, align 8', '%58 = add i64 %57, -32', '%59 = load i64, i64* %RDX.i, align 8', '%60 = load i64, i64* %3, align 8', '%61 = add i64 %60, 4', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %58 to i64*', 'store i64 %59, i64* %62, align 8', '%65 = load i64, i64* %3, align 8', '%66 = add i64 %65, 7', 'store i64 %66, i64* %3, align 8', '%RAX.i24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%69 = bitcast i64* %68 to double*', '%.pre = load i64, i64* %3, align 8', '%70 = phi i64 [ %159, %block_401eb0 ], [ %.pre, %entry ]', '%73 = add i64 %70, 3', 'store i64 %73, i64* %3, align 8', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RAX.i24, align 8', '%79 = icmp ult i32 %75, %77', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %14, align 1', '%81 = and i32 %78, 255', '%82 = tail call i32 @llvm.ctpop.i32(i32 %81)', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', '%85 = xor i8 %84, 1', 'store i8 %85, i8* %21, align 1', '%86 = xor i32 %77, %75', '%87 = xor i32 %86, %78', '%88 = lshr i32 %87, 4', '%89 = trunc i32 %88 to i8', '%90 = and i8 %89, 1', 'store i8 %90, i8* %27, align 1', '%91 = icmp eq i32 %78, 0', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %30, align 1', 'store i8 %94, i8* %33, align 1', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %39, align 1', '%.v = select i1 %103, i64 16, i64 53', '%104 = add i64 %70, %.v', 'store i64 %104, i64* %3, align 8', '%105 = add i64 %71, -8', '%106 = add i64 %104, 4', 'store i64 %106, i64* %3, align 8', '%107 = inttoptr i64 %105 to i64*', '%108 = load i64, i64* %107, align 8', 'store i64 %108, i64* %RDI.i36, align 8', '%109 = add i64 %71, -16', '%110 = add i64 %104, 8', 'store i64 %110, i64* %3, align 8', '%111 = inttoptr i64 %109 to i64*', '%112 = load i64, i64* %111, align 8', 'store i64 %112, i64* %RSI.i33, align 8', '%113 = add i64 %71, -24', '%114 = add i64 %104, 13', 'store i64 %114, i64* %3, align 8', '%115 = inttoptr i64 %113 to i64*', '%116 = load i64, i64* %115, align 8', 'store i64 %116, i64* %54, align 1', 'store double 0.000000e+00, double* %69, align 1', '%117 = add i64 %104, 18000', '%118 = add i64 %104, 18', '%119 = load i64, i64* %6, align 8', '%120 = add i64 %119, -8', '%121 = inttoptr i64 %120 to i64*', 'store i64 %118, i64* %121, align 8', 'store i64 %120, i64* %6, align 8', 'store i64 %117, i64* %3, align 8', '%call2_401ebd = tail call %struct.Memory* @sub_406500._ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* nonnull %0, i64 %117, %struct.Memory* %2)', '%122 = load i64, i64* %3, align 8', '%123 = add i64 %122, 16190', '%124 = add i64 %122, 5', '%125 = load i64, i64* %6, align 8', '%126 = add i64 %125, -8', '%127 = inttoptr i64 %126 to i64*', 'store i64 %124, i64* %127, align 8', 'store i64 %126, i64* %6, align 8', 'store i64 %123, i64* %3, align 8', '%call2_401ec2 = tail call %struct.Memory* @sub_405e00._Z9check_sumd(%struct.State* nonnull %0, i64 %123, %struct.Memory* %2)', '%128 = load i64, i64* %RBP.i, align 8', '%129 = add i64 %128, -36', '%130 = load i64, i64* %3, align 8', '%131 = add i64 %130, 3', 'store i64 %131, i64* %3, align 8', '%132 = inttoptr i64 %129 to i32*', '%133 = load i32, i32* %132, align 4', '%134 = add i32 %133, 1', '%135 = zext i32 %134 to i64', 'store i64 %135, i64* %RAX.i24, align 8', '%136 = icmp eq i32 %133, -1', '%137 = icmp eq i32 %134, 0', '%138 = or i1 %136, %137', '%139 = zext i1 %138 to i8', 'store i8 %139, i8* %14, align 1', '%140 = and i32 %134, 255', '%141 = tail call i32 @llvm.ctpop.i32(i32 %140)', '%142 = trunc i32 %141 to i8', '%143 = and i8 %142, 1', '%144 = xor i8 %143, 1', 'store i8 %144, i8* %21, align 1', '%145 = xor i32 %134, %133', '%146 = lshr i32 %145, 4', '%147 = trunc i32 %146 to i8', '%148 = and i8 %147, 1', 'store i8 %148, i8* %27, align 1', '%149 = zext i1 %137 to i8', 'store i8 %149, i8* %30, align 1', '%150 = lshr i32 %134, 31', '%151 = trunc i32 %150 to i8', 'store i8 %151, i8* %33, align 1', '%152 = lshr i32 %133, 31', '%153 = xor i32 %150, %152', '%154 = add nuw nsw i32 %153, %150', '%155 = icmp eq i32 %154, 2', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %39, align 1', '%157 = add i64 %130, 9', 'store i64 %157, i64* %3, align 8', 'store i32 %134, i32* %132, align 4', '%158 = load i64, i64* %3, align 8', '%159 = add i64 %158, -48', 'store i64 %159, i64* %3, align 8', '%160 = load i64, i64* %6, align 8', '%161 = add i64 %160, 48', 'store i64 %161, i64* %6, align 8', '%162 = icmp ugt i64 %160, -49', '%163 = zext i1 %162 to i8', 'store i8 %163, i8* %14, align 1', '%164 = trunc i64 %161 to i32', '%165 = and i32 %164, 255', '%166 = tail call i32 @llvm.ctpop.i32(i32 %165)', '%167 = trunc i32 %166 to i8', '%168 = and i8 %167, 1', '%169 = xor i8 %168, 1', 'store i8 %169, i8* %21, align 1', '%170 = xor i64 %160, 16', '%171 = xor i64 %170, %161', '%172 = lshr i64 %171, 4', '%173 = trunc i64 %172 to i8', '%174 = and i8 %173, 1', 'store i8 %174, i8* %27, align 1', '%175 = icmp eq i64 %161, 0', '%176 = zext i1 %175 to i8', 'store i8 %176, i8* %30, align 1', '%177 = lshr i64 %161, 63', '%178 = trunc i64 %177 to i8', 'store i8 %178, i8* %33, align 1', '%179 = lshr i64 %160, 63', '%180 = xor i64 %177, %179', '%181 = add nuw nsw i64 %180, %177', '%182 = icmp eq i64 %181, 2', '%183 = zext i1 %182 to i8', 'store i8 %183, i8* %39, align 1', '%184 = add i64 %104, 5', 'store i64 %184, i64* %3, align 8', '%185 = add i64 %160, 56', '%186 = inttoptr i64 %161 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %RBP.i, align 8', 'store i64 %185, i64* %6, align 8', '%188 = add i64 %104, 6', 'store i64 %188, i64* %3, align 8', '%189 = inttoptr i64 %185 to i64*', '%190 = load i64, i64* %189, align 8', 'store i64 %190, i64* %3, align 8', '%191 = add i64 %160, 64', 'store i64 %191, i64* %6, align 8'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -56
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 48
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, 16
Found line to remove! %23 = xor i64 %22, %11
Found line to remove! %24 = lshr i64 %23, 4
Found line to remove! %25 = trunc i64 %24 to i8
Found line to remove! %26 = and i8 %25, 1
Found line to remove! %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %26, i8* %27, align 1
Found line to remove! %28 = icmp eq i64 %11, 0
Found line to remove! %29 = zext i1 %28 to i8
Found line to remove! %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %29, i8* %30, align 1
Found line to remove! %31 = lshr i64 %11, 63
Found line to remove! %32 = trunc i64 %31 to i8
Found line to remove! %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %32, i8* %33, align 1
Found line to remove! %34 = lshr i64 %8, 63
Found line to remove! %35 = xor i64 %31, %34
Found line to remove! %36 = add nuw nsw i64 %35, %34
Found line to remove! %37 = icmp eq i64 %36, 2
Found line to remove! %38 = zext i1 %37 to i8
Found line to remove! %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %38, i8* %39, align 1
Found line to remove! %RDI.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %40 = add i64 %7, -16
Found line to remove! %41 = load i64, i64* %RDI.i36, align 8
Found line to remove! %42 = add i64 %10, 11
Found line to remove! store i64 %42, i64* %3, align 8
Found line to remove! %43 = inttoptr i64 %40 to i64*
Found line to remove! store i64 %41, i64* %43, align 8
Found line to remove! %RSI.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %44 = load i64, i64* %RBP.i, align 8
Found line to remove! %45 = add i64 %44, -16
Found line to remove! %46 = load i64, i64* %RSI.i33, align 8
Found line to remove! %47 = load i64, i64* %3, align 8
Found line to remove! %48 = add i64 %47, 4
Found line to remove! store i64 %48, i64* %3, align 8
Found line to remove! %49 = inttoptr i64 %45 to i64*
Found line to remove! store i64 %46, i64* %49, align 8
Found line to remove! %50 = load i64, i64* %RBP.i, align 8
Found line to remove! %51 = add i64 %50, -24
Found line to remove! %52 = load i64, i64* %3, align 8
Found line to remove! %53 = add i64 %52, 5
Found line to remove! store i64 %53, i64* %3, align 8
Found line to remove! %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %55 = load i64, i64* %54, align 1
Found line to remove! %56 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %55, i64* %56, align 8
Found line to remove! %RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %57 = load i64, i64* %RBP.i, align 8
Found line to remove! %58 = add i64 %57, -32
Found line to remove! %59 = load i64, i64* %RDX.i, align 8
Found line to remove! %60 = load i64, i64* %3, align 8
Found line to remove! %61 = add i64 %60, 4
Found line to remove! store i64 %61, i64* %3, align 8
Found line to remove! %62 = inttoptr i64 %58 to i64*
Found line to remove! store i64 %59, i64* %62, align 8
Keep: %63 = load i64, i64* %RBP.i, align 8
Keep: %64 = add i64 %63, -36
Found line to remove! %65 = load i64, i64* %3, align 8
Found line to remove! %66 = add i64 %65, 7
Found line to remove! store i64 %66, i64* %3, align 8
Keep: %67 = inttoptr i64 %64 to i32*
Keep: store i32 0, i32* %67, align 4
Found line to remove! %RAX.i24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %69 = bitcast i64* %68 to double*
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ea0:                                  ; preds = %block_401eb0, %entry
Found line to remove! %70 = phi i64 [ %159, %block_401eb0 ], [ %.pre, %entry ]
Keep: %71 = load i64, i64* %RBP.i, align 8
Keep: %72 = add i64 %71, -36
Found line to remove! %73 = add i64 %70, 3
Found line to remove! store i64 %73, i64* %3, align 8
Keep: %74 = inttoptr i64 %72 to i32*
Keep: %75 = load i32, i32* %74, align 4
Found line to remove! %76 = zext i32 %75 to i64
Found line to remove! store i64 %76, i64* %RAX.i24, align 8
Keep: %77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
Keep: %78 = sub i32 %75, %77
Found line to remove! %79 = icmp ult i32 %75, %77
Found line to remove! %80 = zext i1 %79 to i8
Found line to remove! store i8 %80, i8* %14, align 1
Found line to remove! %81 = and i32 %78, 255
Found line to remove! %82 = tail call i32 @llvm.ctpop.i32(i32 %81)
Found line to remove! %83 = trunc i32 %82 to i8
Found line to remove! %84 = and i8 %83, 1
Found line to remove! %85 = xor i8 %84, 1
Found line to remove! store i8 %85, i8* %21, align 1
Found line to remove! %86 = xor i32 %77, %75
Found line to remove! %87 = xor i32 %86, %78
Found line to remove! %88 = lshr i32 %87, 4
Found line to remove! %89 = trunc i32 %88 to i8
Found line to remove! %90 = and i8 %89, 1
Found line to remove! store i8 %90, i8* %27, align 1
Found line to remove! %91 = icmp eq i32 %78, 0
Found line to remove! %92 = zext i1 %91 to i8
Found line to remove! store i8 %92, i8* %30, align 1
Keep: %93 = lshr i32 %78, 31
Keep: %94 = trunc i32 %93 to i8
Found line to remove! store i8 %94, i8* %33, align 1
Keep: %95 = lshr i32 %75, 31
Keep: %96 = lshr i32 %77, 31
Keep: %97 = xor i32 %96, %95
Keep: %98 = xor i32 %93, %95
Keep: %99 = add nuw nsw i32 %98, %97
Keep: %100 = icmp eq i32 %99, 2
Found line to remove! %101 = zext i1 %100 to i8
Found line to remove! store i8 %101, i8* %39, align 1
Keep: %102 = icmp ne i8 %94, 0
Keep: %103 = xor i1 %102, %100
Found line to remove! %.v = select i1 %103, i64 16, i64 53
Found line to remove! %104 = add i64 %70, %.v
Found line to remove! store i64 %104, i64* %3, align 8
Keep: br i1 %103, label %block_401eb0, label %block_.L_401ed5
Keep: 
Keep: block_401eb0:                                     ; preds = %block_.L_401ea0
Found line to remove! %105 = add i64 %71, -8
Found line to remove! %106 = add i64 %104, 4
Found line to remove! store i64 %106, i64* %3, align 8
Found line to remove! %107 = inttoptr i64 %105 to i64*
Found line to remove! %108 = load i64, i64* %107, align 8
Found line to remove! store i64 %108, i64* %RDI.i36, align 8
Found line to remove! %109 = add i64 %71, -16
Found line to remove! %110 = add i64 %104, 8
Found line to remove! store i64 %110, i64* %3, align 8
Found line to remove! %111 = inttoptr i64 %109 to i64*
Found line to remove! %112 = load i64, i64* %111, align 8
Found line to remove! store i64 %112, i64* %RSI.i33, align 8
Found line to remove! %113 = add i64 %71, -24
Found line to remove! %114 = add i64 %104, 13
Found line to remove! store i64 %114, i64* %3, align 8
Found line to remove! %115 = inttoptr i64 %113 to i64*
Found line to remove! %116 = load i64, i64* %115, align 8
Found line to remove! store i64 %116, i64* %54, align 1
Found line to remove! store double 0.000000e+00, double* %69, align 1
Found line to remove! %117 = add i64 %104, 18000
Found line to remove! %118 = add i64 %104, 18
Found line to remove! %119 = load i64, i64* %6, align 8
Found line to remove! %120 = add i64 %119, -8
Found line to remove! %121 = inttoptr i64 %120 to i64*
Found line to remove! store i64 %118, i64* %121, align 8
Found line to remove! store i64 %120, i64* %6, align 8
Found line to remove! store i64 %117, i64* %3, align 8
Found line to remove! %call2_401ebd = tail call %struct.Memory* @sub_406500._ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* nonnull %0, i64 %117, %struct.Memory* %2)
Found line to remove! %122 = load i64, i64* %3, align 8
Found line to remove! %123 = add i64 %122, 16190
Found line to remove! %124 = add i64 %122, 5
Found line to remove! %125 = load i64, i64* %6, align 8
Found line to remove! %126 = add i64 %125, -8
Found line to remove! %127 = inttoptr i64 %126 to i64*
Found line to remove! store i64 %124, i64* %127, align 8
Found line to remove! store i64 %126, i64* %6, align 8
Found line to remove! store i64 %123, i64* %3, align 8
Found line to remove! %call2_401ec2 = tail call %struct.Memory* @sub_405e00._Z9check_sumd(%struct.State* nonnull %0, i64 %123, %struct.Memory* %2)
Found line to remove! %128 = load i64, i64* %RBP.i, align 8
Found line to remove! %129 = add i64 %128, -36
Found line to remove! %130 = load i64, i64* %3, align 8
Found line to remove! %131 = add i64 %130, 3
Found line to remove! store i64 %131, i64* %3, align 8
Found line to remove! %132 = inttoptr i64 %129 to i32*
Found line to remove! %133 = load i32, i32* %132, align 4
Found line to remove! %134 = add i32 %133, 1
Found line to remove! %135 = zext i32 %134 to i64
Found line to remove! store i64 %135, i64* %RAX.i24, align 8
Found line to remove! %136 = icmp eq i32 %133, -1
Found line to remove! %137 = icmp eq i32 %134, 0
Found line to remove! %138 = or i1 %136, %137
Found line to remove! %139 = zext i1 %138 to i8
Found line to remove! store i8 %139, i8* %14, align 1
Found line to remove! %140 = and i32 %134, 255
Found line to remove! %141 = tail call i32 @llvm.ctpop.i32(i32 %140)
Found line to remove! %142 = trunc i32 %141 to i8
Found line to remove! %143 = and i8 %142, 1
Found line to remove! %144 = xor i8 %143, 1
Found line to remove! store i8 %144, i8* %21, align 1
Found line to remove! %145 = xor i32 %134, %133
Found line to remove! %146 = lshr i32 %145, 4
Found line to remove! %147 = trunc i32 %146 to i8
Found line to remove! %148 = and i8 %147, 1
Found line to remove! store i8 %148, i8* %27, align 1
Found line to remove! %149 = zext i1 %137 to i8
Found line to remove! store i8 %149, i8* %30, align 1
Found line to remove! %150 = lshr i32 %134, 31
Found line to remove! %151 = trunc i32 %150 to i8
Found line to remove! store i8 %151, i8* %33, align 1
Found line to remove! %152 = lshr i32 %133, 31
Found line to remove! %153 = xor i32 %150, %152
Found line to remove! %154 = add nuw nsw i32 %153, %150
Found line to remove! %155 = icmp eq i32 %154, 2
Found line to remove! %156 = zext i1 %155 to i8
Found line to remove! store i8 %156, i8* %39, align 1
Found line to remove! %157 = add i64 %130, 9
Found line to remove! store i64 %157, i64* %3, align 8
Found line to remove! store i32 %134, i32* %132, align 4
Found line to remove! %158 = load i64, i64* %3, align 8
Found line to remove! %159 = add i64 %158, -48
Found line to remove! store i64 %159, i64* %3, align 8
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ed5:                                  ; preds = %block_.L_401ea0
Found line to remove! %160 = load i64, i64* %6, align 8
Found line to remove! %161 = add i64 %160, 48
Found line to remove! store i64 %161, i64* %6, align 8
Found line to remove! %162 = icmp ugt i64 %160, -49
Found line to remove! %163 = zext i1 %162 to i8
Found line to remove! store i8 %163, i8* %14, align 1
Found line to remove! %164 = trunc i64 %161 to i32
Found line to remove! %165 = and i32 %164, 255
Found line to remove! %166 = tail call i32 @llvm.ctpop.i32(i32 %165)
Found line to remove! %167 = trunc i32 %166 to i8
Found line to remove! %168 = and i8 %167, 1
Found line to remove! %169 = xor i8 %168, 1
Found line to remove! store i8 %169, i8* %21, align 1
Found line to remove! %170 = xor i64 %160, 16
Found line to remove! %171 = xor i64 %170, %161
Found line to remove! %172 = lshr i64 %171, 4
Found line to remove! %173 = trunc i64 %172 to i8
Found line to remove! %174 = and i8 %173, 1
Found line to remove! store i8 %174, i8* %27, align 1
Found line to remove! %175 = icmp eq i64 %161, 0
Found line to remove! %176 = zext i1 %175 to i8
Found line to remove! store i8 %176, i8* %30, align 1
Found line to remove! %177 = lshr i64 %161, 63
Found line to remove! %178 = trunc i64 %177 to i8
Found line to remove! store i8 %178, i8* %33, align 1
Found line to remove! %179 = lshr i64 %160, 63
Found line to remove! %180 = xor i64 %177, %179
Found line to remove! %181 = add nuw nsw i64 %180, %177
Found line to remove! %182 = icmp eq i64 %181, 2
Found line to remove! %183 = zext i1 %182 to i8
Found line to remove! store i8 %183, i8* %39, align 1
Found line to remove! %184 = add i64 %104, 5
Found line to remove! store i64 %184, i64* %3, align 8
Found line to remove! %185 = add i64 %160, 56
Found line to remove! %186 = inttoptr i64 %161 to i64*
Found line to remove! %187 = load i64, i64* %186, align 8
Found line to remove! store i64 %187, i64* %RBP.i, align 8
Found line to remove! store i64 %185, i64* %6, align 8
Found line to remove! %188 = add i64 %104, 6
Found line to remove! store i64 %188, i64* %3, align 8
Found line to remove! %189 = inttoptr i64 %185 to i64*
Found line to remove! %190 = load i64, i64* %189, align 8
Found line to remove! store i64 %190, i64* %3, align 8
Found line to remove! %191 = add i64 %160, 64
Found line to remove! store i64 %191, i64* %6, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -56', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 48', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, 16', '%23 = xor i64 %22, %11', '%24 = lshr i64 %23, 4', '%25 = trunc i64 %24 to i8', '%26 = and i8 %25, 1', '%27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %26, i8* %27, align 1', '%28 = icmp eq i64 %11, 0', '%29 = zext i1 %28 to i8', '%30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %29, i8* %30, align 1', '%31 = lshr i64 %11, 63', '%32 = trunc i64 %31 to i8', '%33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %32, i8* %33, align 1', '%34 = lshr i64 %8, 63', '%35 = xor i64 %31, %34', '%36 = add nuw nsw i64 %35, %34', '%37 = icmp eq i64 %36, 2', '%38 = zext i1 %37 to i8', '%39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %38, i8* %39, align 1', '%RDI.i36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%40 = add i64 %7, -16', '%41 = load i64, i64* %RDI.i36, align 8', '%42 = add i64 %10, 11', 'store i64 %42, i64* %3, align 8', '%43 = inttoptr i64 %40 to i64*', 'store i64 %41, i64* %43, align 8', '%RSI.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%44 = load i64, i64* %RBP.i, align 8', '%45 = add i64 %44, -16', '%46 = load i64, i64* %RSI.i33, align 8', '%47 = load i64, i64* %3, align 8', '%48 = add i64 %47, 4', 'store i64 %48, i64* %3, align 8', '%49 = inttoptr i64 %45 to i64*', 'store i64 %46, i64* %49, align 8', '%50 = load i64, i64* %RBP.i, align 8', '%51 = add i64 %50, -24', '%52 = load i64, i64* %3, align 8', '%53 = add i64 %52, 5', 'store i64 %53, i64* %3, align 8', '%54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%55 = load i64, i64* %54, align 1', '%56 = inttoptr i64 %51 to i64*', 'store i64 %55, i64* %56, align 8', '%RDX.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%57 = load i64, i64* %RBP.i, align 8', '%58 = add i64 %57, -32', '%59 = load i64, i64* %RDX.i, align 8', '%60 = load i64, i64* %3, align 8', '%61 = add i64 %60, 4', 'store i64 %61, i64* %3, align 8', '%62 = inttoptr i64 %58 to i64*', 'store i64 %59, i64* %62, align 8', '%65 = load i64, i64* %3, align 8', '%66 = add i64 %65, 7', 'store i64 %66, i64* %3, align 8', '%RAX.i24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%69 = bitcast i64* %68 to double*', '%.pre = load i64, i64* %3, align 8', '%70 = phi i64 [ %159, %block_401eb0 ], [ %.pre, %entry ]', '%73 = add i64 %70, 3', 'store i64 %73, i64* %3, align 8', '%76 = zext i32 %75 to i64', 'store i64 %76, i64* %RAX.i24, align 8', '%79 = icmp ult i32 %75, %77', '%80 = zext i1 %79 to i8', 'store i8 %80, i8* %14, align 1', '%81 = and i32 %78, 255', '%82 = tail call i32 @llvm.ctpop.i32(i32 %81)', '%83 = trunc i32 %82 to i8', '%84 = and i8 %83, 1', '%85 = xor i8 %84, 1', 'store i8 %85, i8* %21, align 1', '%86 = xor i32 %77, %75', '%87 = xor i32 %86, %78', '%88 = lshr i32 %87, 4', '%89 = trunc i32 %88 to i8', '%90 = and i8 %89, 1', 'store i8 %90, i8* %27, align 1', '%91 = icmp eq i32 %78, 0', '%92 = zext i1 %91 to i8', 'store i8 %92, i8* %30, align 1', 'store i8 %94, i8* %33, align 1', '%101 = zext i1 %100 to i8', 'store i8 %101, i8* %39, align 1', '%.v = select i1 %103, i64 16, i64 53', '%104 = add i64 %70, %.v', 'store i64 %104, i64* %3, align 8', '%105 = add i64 %71, -8', '%106 = add i64 %104, 4', 'store i64 %106, i64* %3, align 8', '%107 = inttoptr i64 %105 to i64*', '%108 = load i64, i64* %107, align 8', 'store i64 %108, i64* %RDI.i36, align 8', '%109 = add i64 %71, -16', '%110 = add i64 %104, 8', 'store i64 %110, i64* %3, align 8', '%111 = inttoptr i64 %109 to i64*', '%112 = load i64, i64* %111, align 8', 'store i64 %112, i64* %RSI.i33, align 8', '%113 = add i64 %71, -24', '%114 = add i64 %104, 13', 'store i64 %114, i64* %3, align 8', '%115 = inttoptr i64 %113 to i64*', '%116 = load i64, i64* %115, align 8', 'store i64 %116, i64* %54, align 1', 'store double 0.000000e+00, double* %69, align 1', '%117 = add i64 %104, 18000', '%118 = add i64 %104, 18', '%119 = load i64, i64* %6, align 8', '%120 = add i64 %119, -8', '%121 = inttoptr i64 %120 to i64*', 'store i64 %118, i64* %121, align 8', 'store i64 %120, i64* %6, align 8', 'store i64 %117, i64* %3, align 8', '%call2_401ebd = tail call %struct.Memory* @sub_406500._ZN9benchmark10accumulateIPddEET0_T_S3_S2_(%struct.State* nonnull %0, i64 %117, %struct.Memory* %2)', '%122 = load i64, i64* %3, align 8', '%123 = add i64 %122, 16190', '%124 = add i64 %122, 5', '%125 = load i64, i64* %6, align 8', '%126 = add i64 %125, -8', '%127 = inttoptr i64 %126 to i64*', 'store i64 %124, i64* %127, align 8', 'store i64 %126, i64* %6, align 8', 'store i64 %123, i64* %3, align 8', '%call2_401ec2 = tail call %struct.Memory* @sub_405e00._Z9check_sumd(%struct.State* nonnull %0, i64 %123, %struct.Memory* %2)', '%128 = load i64, i64* %RBP.i, align 8', '%129 = add i64 %128, -36', '%130 = load i64, i64* %3, align 8', '%131 = add i64 %130, 3', 'store i64 %131, i64* %3, align 8', '%132 = inttoptr i64 %129 to i32*', '%133 = load i32, i32* %132, align 4', '%134 = add i32 %133, 1', '%135 = zext i32 %134 to i64', 'store i64 %135, i64* %RAX.i24, align 8', '%136 = icmp eq i32 %133, -1', '%137 = icmp eq i32 %134, 0', '%138 = or i1 %136, %137', '%139 = zext i1 %138 to i8', 'store i8 %139, i8* %14, align 1', '%140 = and i32 %134, 255', '%141 = tail call i32 @llvm.ctpop.i32(i32 %140)', '%142 = trunc i32 %141 to i8', '%143 = and i8 %142, 1', '%144 = xor i8 %143, 1', 'store i8 %144, i8* %21, align 1', '%145 = xor i32 %134, %133', '%146 = lshr i32 %145, 4', '%147 = trunc i32 %146 to i8', '%148 = and i8 %147, 1', 'store i8 %148, i8* %27, align 1', '%149 = zext i1 %137 to i8', 'store i8 %149, i8* %30, align 1', '%150 = lshr i32 %134, 31', '%151 = trunc i32 %150 to i8', 'store i8 %151, i8* %33, align 1', '%152 = lshr i32 %133, 31', '%153 = xor i32 %150, %152', '%154 = add nuw nsw i32 %153, %150', '%155 = icmp eq i32 %154, 2', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %39, align 1', '%157 = add i64 %130, 9', 'store i64 %157, i64* %3, align 8', 'store i32 %134, i32* %132, align 4', '%158 = load i64, i64* %3, align 8', '%159 = add i64 %158, -48', 'store i64 %159, i64* %3, align 8', '%160 = load i64, i64* %6, align 8', '%161 = add i64 %160, 48', 'store i64 %161, i64* %6, align 8', '%162 = icmp ugt i64 %160, -49', '%163 = zext i1 %162 to i8', 'store i8 %163, i8* %14, align 1', '%164 = trunc i64 %161 to i32', '%165 = and i32 %164, 255', '%166 = tail call i32 @llvm.ctpop.i32(i32 %165)', '%167 = trunc i32 %166 to i8', '%168 = and i8 %167, 1', '%169 = xor i8 %168, 1', 'store i8 %169, i8* %21, align 1', '%170 = xor i64 %160, 16', '%171 = xor i64 %170, %161', '%172 = lshr i64 %171, 4', '%173 = trunc i64 %172 to i8', '%174 = and i8 %173, 1', 'store i8 %174, i8* %27, align 1', '%175 = icmp eq i64 %161, 0', '%176 = zext i1 %175 to i8', 'store i8 %176, i8* %30, align 1', '%177 = lshr i64 %161, 63', '%178 = trunc i64 %177 to i8', 'store i8 %178, i8* %33, align 1', '%179 = lshr i64 %160, 63', '%180 = xor i64 %177, %179', '%181 = add nuw nsw i64 %180, %177', '%182 = icmp eq i64 %181, 2', '%183 = zext i1 %182 to i8', 'store i8 %183, i8* %39, align 1', '%184 = add i64 %104, 5', 'store i64 %184, i64* %3, align 8', '%185 = add i64 %160, 56', '%186 = inttoptr i64 %161 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %RBP.i, align 8', 'store i64 %185, i64* %6, align 8', '%188 = add i64 %104, 6', 'store i64 %188, i64* %3, align 8', '%189 = inttoptr i64 %185 to i64*', '%190 = load i64, i64* %189, align 8', 'store i64 %190, i64* %3, align 8', '%191 = add i64 %160, 64', 'store i64 %191, i64* %6, align 8'])
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', '%8 = load i64, i64* %PC, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -56', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 48', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, 16', '%21 = xor i64 %20, %9', '%22 = lshr i64 %21, 4', '%23 = trunc i64 %22 to i8', '%24 = and i8 %23, 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %24, i8* %25, align 1', '%26 = icmp eq i64 %9, 0', '%27 = zext i1 %26 to i8', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %27, i8* %28, align 1', '%29 = lshr i64 %9, 63', '%30 = trunc i64 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %6, 63', '%33 = xor i64 %29, %32', '%34 = add nuw nsw i64 %33, %32', '%35 = icmp eq i64 %34, 2', '%36 = zext i1 %35 to i8', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %36, i8* %37, align 1', '%38 = add i64 %5, -16', '%39 = load i64, i64* %RDI, align 8', '%40 = add i64 %8, 11', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %38 to i64*', 'store i64 %39, i64* %41, align 8', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -16', '%44 = load i64, i64* %RSI, align 8', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 4', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i64*', 'store i64 %44, i64* %47, align 8', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -24', '%50 = load i64, i64* %PC, align 8', '%51 = add i64 %50, 5', 'store i64 %51, i64* %PC, align 8', '%52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%53 = load i64, i64* %52, align 1', '%54 = inttoptr i64 %49 to i64*', 'store i64 %53, i64* %54, align 8', '%55 = load i64, i64* %RBP, align 8', '%56 = add i64 %55, -32', '%57 = load i64, i64* %RDX, align 8', '%58 = load i64, i64* %PC, align 8', '%59 = add i64 %58, 4', 'store i64 %59, i64* %PC, align 8', '%60 = inttoptr i64 %56 to i64*', 'store i64 %57, i64* %60, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = add i64 %63, 7', 'store i64 %64, i64* %PC, align 8', '%66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%67 = bitcast i64* %66 to double*', '%.pre = load i64, i64* %PC, align 8', '%68 = add i64 %126, -8', '%69 = add i64 %159, 4', 'store i64 %69, i64* %PC, align 8', '%70 = inttoptr i64 %68 to i64*', '%71 = load i64, i64* %70, align 8', 'store i64 %71, i64* %RDI, align 8', '%72 = add i64 %126, -16', '%73 = add i64 %159, 8', 'store i64 %73, i64* %PC, align 8', '%74 = inttoptr i64 %72 to i64*', '%75 = load i64, i64* %74, align 8', 'store i64 %75, i64* %RSI, align 8', '%76 = add i64 %126, -24', '%77 = add i64 %159, 13', 'store i64 %77, i64* %PC, align 8', '%78 = inttoptr i64 %76 to i64*', '%79 = load i64, i64* %78, align 8', 'store i64 %79, i64* %52, align 1', 'store double 0.000000e+00, double* %67, align 1', '%80 = add i64 %159, 18000', '%81 = add i64 %159, 18', '%82 = load i64, i64* %RSP, align 8', '%83 = add i64 %82, -8', '%84 = inttoptr i64 %83 to i64*', 'store i64 %81, i64* %84, align 8', 'store i64 %83, i64* %RSP, align 8', 'store i64 %80, i64* %PC, align 8', '%85 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)', '%86 = load i64, i64* %PC, align 8', '%87 = add i64 %86, 16190', '%88 = add i64 %86, 5', '%89 = load i64, i64* %RSP, align 8', '%90 = add i64 %89, -8', '%91 = inttoptr i64 %90 to i64*', 'store i64 %88, i64* %91, align 8', 'store i64 %90, i64* %RSP, align 8', 'store i64 %87, i64* %PC, align 8', '%92 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %2)', '%93 = load i64, i64* %RBP, align 8', '%94 = add i64 %93, -36', '%95 = load i64, i64* %PC, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %94 to i32*', '%98 = load i32, i32* %97, align 4', '%99 = add i32 %98, 1', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RAX, align 8', '%101 = icmp eq i32 %98, -1', '%102 = icmp eq i32 %99, 0', '%103 = or i1 %101, %102', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %12, align 1', '%105 = and i32 %99, 255', '%106 = tail call i32 @llvm.ctpop.i32(i32 %105) #12', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', '%109 = xor i8 %108, 1', 'store i8 %109, i8* %19, align 1', '%110 = xor i32 %99, %98', '%111 = lshr i32 %110, 4', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', 'store i8 %113, i8* %25, align 1', '%114 = zext i1 %102 to i8', 'store i8 %114, i8* %28, align 1', '%115 = lshr i32 %99, 31', '%116 = trunc i32 %115 to i8', 'store i8 %116, i8* %31, align 1', '%117 = lshr i32 %98, 31', '%118 = xor i32 %115, %117', '%119 = add nuw nsw i32 %118, %115', '%120 = icmp eq i32 %119, 2', '%121 = zext i1 %120 to i8', 'store i8 %121, i8* %37, align 1', '%122 = add i64 %95, 9', 'store i64 %122, i64* %PC, align 8', 'store i32 %99, i32* %97, align 4', '%123 = load i64, i64* %PC, align 8', '%124 = add i64 %123, -48', 'store i64 %124, i64* %PC, align 8', '%125 = phi i64 [ %124, %block_401eb0 ], [ %.pre, %block_401e80 ]', '%128 = add i64 %125, 3', 'store i64 %128, i64* %PC, align 8', '%131 = zext i32 %130 to i64', 'store i64 %131, i64* %RAX, align 8', '%134 = icmp ult i32 %130, %132', '%135 = zext i1 %134 to i8', 'store i8 %135, i8* %12, align 1', '%136 = and i32 %133, 255', '%137 = tail call i32 @llvm.ctpop.i32(i32 %136) #12', '%138 = trunc i32 %137 to i8', '%139 = and i8 %138, 1', '%140 = xor i8 %139, 1', 'store i8 %140, i8* %19, align 1', '%141 = xor i32 %132, %130', '%142 = xor i32 %141, %133', '%143 = lshr i32 %142, 4', '%144 = trunc i32 %143 to i8', '%145 = and i8 %144, 1', 'store i8 %145, i8* %25, align 1', '%146 = icmp eq i32 %133, 0', '%147 = zext i1 %146 to i8', 'store i8 %147, i8* %28, align 1', 'store i8 %149, i8* %31, align 1', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %37, align 1', '%.v = select i1 %158, i64 16, i64 53', '%159 = add i64 %125, %.v', 'store i64 %159, i64* %PC, align 8', '%160 = load i64, i64* %RSP, align 8', '%161 = add i64 %160, 48', 'store i64 %161, i64* %RSP, align 8', '%162 = icmp ugt i64 %160, -49', '%163 = zext i1 %162 to i8', 'store i8 %163, i8* %12, align 1', '%164 = trunc i64 %161 to i32', '%165 = and i32 %164, 255', '%166 = tail call i32 @llvm.ctpop.i32(i32 %165) #12', '%167 = trunc i32 %166 to i8', '%168 = and i8 %167, 1', '%169 = xor i8 %168, 1', 'store i8 %169, i8* %19, align 1', '%170 = xor i64 %160, 16', '%171 = xor i64 %170, %161', '%172 = lshr i64 %171, 4', '%173 = trunc i64 %172 to i8', '%174 = and i8 %173, 1', 'store i8 %174, i8* %25, align 1', '%175 = icmp eq i64 %161, 0', '%176 = zext i1 %175 to i8', 'store i8 %176, i8* %28, align 1', '%177 = lshr i64 %161, 63', '%178 = trunc i64 %177 to i8', 'store i8 %178, i8* %31, align 1', '%179 = lshr i64 %160, 63', '%180 = xor i64 %177, %179', '%181 = add nuw nsw i64 %180, %177', '%182 = icmp eq i64 %181, 2', '%183 = zext i1 %182 to i8', 'store i8 %183, i8* %37, align 1', '%184 = add i64 %159, 5', 'store i64 %184, i64* %PC, align 8', '%185 = add i64 %160, 56', '%186 = inttoptr i64 %161 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %RBP, align 8', 'store i64 %185, i64* %RSP, align 8', '%188 = add i64 %159, 6', 'store i64 %188, i64* %PC, align 8', '%189 = inttoptr i64 %185 to i64*', '%190 = load i64, i64* %189, align 8', 'store i64 %190, i64* %PC, align 8', '%191 = add i64 %160, 64', 'store i64 %191, i64* %RSP, align 8'])
Keep: block_401e80:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %3 = load i64, i64* %RBP, align 8
Found line to remove! %4 = add i64 %1, 1
Found line to remove! store i64 %4, i64* %PC, align 8
Found line to remove! %5 = load i64, i64* %RSP, align 8
Found line to remove! %6 = add i64 %5, -8
Found line to remove! %7 = inttoptr i64 %6 to i64*
Found line to remove! store i64 %3, i64* %7, align 8
Found line to remove! %8 = load i64, i64* %PC, align 8
Found line to remove! store i64 %6, i64* %RBP, align 8
Found line to remove! %9 = add i64 %5, -56
Found line to remove! store i64 %9, i64* %RSP, align 8
Found line to remove! %10 = icmp ult i64 %6, 48
Found line to remove! %11 = zext i1 %10 to i8
Found line to remove! %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %11, i8* %12, align 1
Found line to remove! %13 = trunc i64 %9 to i32
Found line to remove! %14 = and i32 %13, 255
Found line to remove! %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
Found line to remove! %16 = trunc i32 %15 to i8
Found line to remove! %17 = and i8 %16, 1
Found line to remove! %18 = xor i8 %17, 1
Found line to remove! %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %18, i8* %19, align 1
Found line to remove! %20 = xor i64 %6, 16
Found line to remove! %21 = xor i64 %20, %9
Found line to remove! %22 = lshr i64 %21, 4
Found line to remove! %23 = trunc i64 %22 to i8
Found line to remove! %24 = and i8 %23, 1
Found line to remove! %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %24, i8* %25, align 1
Found line to remove! %26 = icmp eq i64 %9, 0
Found line to remove! %27 = zext i1 %26 to i8
Found line to remove! %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %27, i8* %28, align 1
Found line to remove! %29 = lshr i64 %9, 63
Found line to remove! %30 = trunc i64 %29 to i8
Found line to remove! %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %30, i8* %31, align 1
Found line to remove! %32 = lshr i64 %6, 63
Found line to remove! %33 = xor i64 %29, %32
Found line to remove! %34 = add nuw nsw i64 %33, %32
Found line to remove! %35 = icmp eq i64 %34, 2
Found line to remove! %36 = zext i1 %35 to i8
Found line to remove! %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %36, i8* %37, align 1
Found line to remove! %38 = add i64 %5, -16
Found line to remove! %39 = load i64, i64* %RDI, align 8
Found line to remove! %40 = add i64 %8, 11
Found line to remove! store i64 %40, i64* %PC, align 8
Found line to remove! %41 = inttoptr i64 %38 to i64*
Found line to remove! store i64 %39, i64* %41, align 8
Found line to remove! %42 = load i64, i64* %RBP, align 8
Found line to remove! %43 = add i64 %42, -16
Found line to remove! %44 = load i64, i64* %RSI, align 8
Found line to remove! %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 4
Found line to remove! store i64 %46, i64* %PC, align 8
Found line to remove! %47 = inttoptr i64 %43 to i64*
Found line to remove! store i64 %44, i64* %47, align 8
Found line to remove! %48 = load i64, i64* %RBP, align 8
Found line to remove! %49 = add i64 %48, -24
Found line to remove! %50 = load i64, i64* %PC, align 8
Found line to remove! %51 = add i64 %50, 5
Found line to remove! store i64 %51, i64* %PC, align 8
Found line to remove! %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
Found line to remove! %53 = load i64, i64* %52, align 1
Found line to remove! %54 = inttoptr i64 %49 to i64*
Found line to remove! store i64 %53, i64* %54, align 8
Found line to remove! %55 = load i64, i64* %RBP, align 8
Found line to remove! %56 = add i64 %55, -32
Found line to remove! %57 = load i64, i64* %RDX, align 8
Found line to remove! %58 = load i64, i64* %PC, align 8
Found line to remove! %59 = add i64 %58, 4
Found line to remove! store i64 %59, i64* %PC, align 8
Found line to remove! %60 = inttoptr i64 %56 to i64*
Found line to remove! store i64 %57, i64* %60, align 8
Keep: %61 = load i64, i64* %RBP, align 8
Keep: %62 = add i64 %61, -36
Found line to remove! %63 = load i64, i64* %PC, align 8
Found line to remove! %64 = add i64 %63, 7
Found line to remove! store i64 %64, i64* %PC, align 8
Keep: %65 = inttoptr i64 %62 to i32*
Keep: store i32 0, i32* %65, align 4
Found line to remove! %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
Found line to remove! %67 = bitcast i64* %66 to double*
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_401ea0
Keep: 
Keep: block_401eb0:                                     ; preds = %block_401ea0
Found line to remove! %68 = add i64 %126, -8
Found line to remove! %69 = add i64 %159, 4
Found line to remove! store i64 %69, i64* %PC, align 8
Found line to remove! %70 = inttoptr i64 %68 to i64*
Found line to remove! %71 = load i64, i64* %70, align 8
Found line to remove! store i64 %71, i64* %RDI, align 8
Found line to remove! %72 = add i64 %126, -16
Found line to remove! %73 = add i64 %159, 8
Found line to remove! store i64 %73, i64* %PC, align 8
Found line to remove! %74 = inttoptr i64 %72 to i64*
Found line to remove! %75 = load i64, i64* %74, align 8
Found line to remove! store i64 %75, i64* %RSI, align 8
Found line to remove! %76 = add i64 %126, -24
Found line to remove! %77 = add i64 %159, 13
Found line to remove! store i64 %77, i64* %PC, align 8
Found line to remove! %78 = inttoptr i64 %76 to i64*
Found line to remove! %79 = load i64, i64* %78, align 8
Found line to remove! store i64 %79, i64* %52, align 1
Found line to remove! store double 0.000000e+00, double* %67, align 1
Found line to remove! %80 = add i64 %159, 18000
Found line to remove! %81 = add i64 %159, 18
Found line to remove! %82 = load i64, i64* %RSP, align 8
Found line to remove! %83 = add i64 %82, -8
Found line to remove! %84 = inttoptr i64 %83 to i64*
Found line to remove! store i64 %81, i64* %84, align 8
Found line to remove! store i64 %83, i64* %RSP, align 8
Found line to remove! store i64 %80, i64* %PC, align 8
Found line to remove! %85 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)
Found line to remove! %86 = load i64, i64* %PC, align 8
Found line to remove! %87 = add i64 %86, 16190
Found line to remove! %88 = add i64 %86, 5
Found line to remove! %89 = load i64, i64* %RSP, align 8
Found line to remove! %90 = add i64 %89, -8
Found line to remove! %91 = inttoptr i64 %90 to i64*
Found line to remove! store i64 %88, i64* %91, align 8
Found line to remove! store i64 %90, i64* %RSP, align 8
Found line to remove! store i64 %87, i64* %PC, align 8
Found line to remove! %92 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %2)
Found line to remove! %93 = load i64, i64* %RBP, align 8
Found line to remove! %94 = add i64 %93, -36
Found line to remove! %95 = load i64, i64* %PC, align 8
Found line to remove! %96 = add i64 %95, 3
Found line to remove! store i64 %96, i64* %PC, align 8
Found line to remove! %97 = inttoptr i64 %94 to i32*
Found line to remove! %98 = load i32, i32* %97, align 4
Found line to remove! %99 = add i32 %98, 1
Found line to remove! %100 = zext i32 %99 to i64
Found line to remove! store i64 %100, i64* %RAX, align 8
Found line to remove! %101 = icmp eq i32 %98, -1
Found line to remove! %102 = icmp eq i32 %99, 0
Found line to remove! %103 = or i1 %101, %102
Found line to remove! %104 = zext i1 %103 to i8
Found line to remove! store i8 %104, i8* %12, align 1
Found line to remove! %105 = and i32 %99, 255
Found line to remove! %106 = tail call i32 @llvm.ctpop.i32(i32 %105) #12
Found line to remove! %107 = trunc i32 %106 to i8
Found line to remove! %108 = and i8 %107, 1
Found line to remove! %109 = xor i8 %108, 1
Found line to remove! store i8 %109, i8* %19, align 1
Found line to remove! %110 = xor i32 %99, %98
Found line to remove! %111 = lshr i32 %110, 4
Found line to remove! %112 = trunc i32 %111 to i8
Found line to remove! %113 = and i8 %112, 1
Found line to remove! store i8 %113, i8* %25, align 1
Found line to remove! %114 = zext i1 %102 to i8
Found line to remove! store i8 %114, i8* %28, align 1
Found line to remove! %115 = lshr i32 %99, 31
Found line to remove! %116 = trunc i32 %115 to i8
Found line to remove! store i8 %116, i8* %31, align 1
Found line to remove! %117 = lshr i32 %98, 31
Found line to remove! %118 = xor i32 %115, %117
Found line to remove! %119 = add nuw nsw i32 %118, %115
Found line to remove! %120 = icmp eq i32 %119, 2
Found line to remove! %121 = zext i1 %120 to i8
Found line to remove! store i8 %121, i8* %37, align 1
Found line to remove! %122 = add i64 %95, 9
Found line to remove! store i64 %122, i64* %PC, align 8
Found line to remove! store i32 %99, i32* %97, align 4
Found line to remove! %123 = load i64, i64* %PC, align 8
Found line to remove! %124 = add i64 %123, -48
Found line to remove! store i64 %124, i64* %PC, align 8
Keep: br label %block_401ea0
Keep: 
Keep: block_401ea0:                                     ; preds = %block_401eb0, %block_401e80
Found line to remove! %125 = phi i64 [ %124, %block_401eb0 ], [ %.pre, %block_401e80 ]
Keep: %126 = load i64, i64* %RBP, align 8
Keep: %127 = add i64 %126, -36
Found line to remove! %128 = add i64 %125, 3
Found line to remove! store i64 %128, i64* %PC, align 8
Keep: %129 = inttoptr i64 %127 to i32*
Keep: %130 = load i32, i32* %129, align 4
Found line to remove! %131 = zext i32 %130 to i64
Found line to remove! store i64 %131, i64* %RAX, align 8
Keep: %132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
Keep: %133 = sub i32 %130, %132
Found line to remove! %134 = icmp ult i32 %130, %132
Found line to remove! %135 = zext i1 %134 to i8
Found line to remove! store i8 %135, i8* %12, align 1
Found line to remove! %136 = and i32 %133, 255
Found line to remove! %137 = tail call i32 @llvm.ctpop.i32(i32 %136) #12
Found line to remove! %138 = trunc i32 %137 to i8
Found line to remove! %139 = and i8 %138, 1
Found line to remove! %140 = xor i8 %139, 1
Found line to remove! store i8 %140, i8* %19, align 1
Found line to remove! %141 = xor i32 %132, %130
Found line to remove! %142 = xor i32 %141, %133
Found line to remove! %143 = lshr i32 %142, 4
Found line to remove! %144 = trunc i32 %143 to i8
Found line to remove! %145 = and i8 %144, 1
Found line to remove! store i8 %145, i8* %25, align 1
Found line to remove! %146 = icmp eq i32 %133, 0
Found line to remove! %147 = zext i1 %146 to i8
Found line to remove! store i8 %147, i8* %28, align 1
Keep: %148 = lshr i32 %133, 31
Keep: %149 = trunc i32 %148 to i8
Found line to remove! store i8 %149, i8* %31, align 1
Keep: %150 = lshr i32 %130, 31
Keep: %151 = lshr i32 %132, 31
Keep: %152 = xor i32 %151, %150
Keep: %153 = xor i32 %148, %150
Keep: %154 = add nuw nsw i32 %153, %152
Keep: %155 = icmp eq i32 %154, 2
Found line to remove! %156 = zext i1 %155 to i8
Found line to remove! store i8 %156, i8* %37, align 1
Keep: %157 = icmp ne i8 %149, 0
Keep: %158 = xor i1 %157, %155
Found line to remove! %.v = select i1 %158, i64 16, i64 53
Found line to remove! %159 = add i64 %125, %.v
Found line to remove! store i64 %159, i64* %PC, align 8
Keep: br i1 %158, label %block_401eb0, label %block_401ed5
Keep: 
Keep: block_401ed5:                                     ; preds = %block_401ea0
Found line to remove! %160 = load i64, i64* %RSP, align 8
Found line to remove! %161 = add i64 %160, 48
Found line to remove! store i64 %161, i64* %RSP, align 8
Found line to remove! %162 = icmp ugt i64 %160, -49
Found line to remove! %163 = zext i1 %162 to i8
Found line to remove! store i8 %163, i8* %12, align 1
Found line to remove! %164 = trunc i64 %161 to i32
Found line to remove! %165 = and i32 %164, 255
Found line to remove! %166 = tail call i32 @llvm.ctpop.i32(i32 %165) #12
Found line to remove! %167 = trunc i32 %166 to i8
Found line to remove! %168 = and i8 %167, 1
Found line to remove! %169 = xor i8 %168, 1
Found line to remove! store i8 %169, i8* %19, align 1
Found line to remove! %170 = xor i64 %160, 16
Found line to remove! %171 = xor i64 %170, %161
Found line to remove! %172 = lshr i64 %171, 4
Found line to remove! %173 = trunc i64 %172 to i8
Found line to remove! %174 = and i8 %173, 1
Found line to remove! store i8 %174, i8* %25, align 1
Found line to remove! %175 = icmp eq i64 %161, 0
Found line to remove! %176 = zext i1 %175 to i8
Found line to remove! store i8 %176, i8* %28, align 1
Found line to remove! %177 = lshr i64 %161, 63
Found line to remove! %178 = trunc i64 %177 to i8
Found line to remove! store i8 %178, i8* %31, align 1
Found line to remove! %179 = lshr i64 %160, 63
Found line to remove! %180 = xor i64 %177, %179
Found line to remove! %181 = add nuw nsw i64 %180, %177
Found line to remove! %182 = icmp eq i64 %181, 2
Found line to remove! %183 = zext i1 %182 to i8
Found line to remove! store i8 %183, i8* %37, align 1
Found line to remove! %184 = add i64 %159, 5
Found line to remove! store i64 %184, i64* %PC, align 8
Found line to remove! %185 = add i64 %160, 56
Found line to remove! %186 = inttoptr i64 %161 to i64*
Found line to remove! %187 = load i64, i64* %186, align 8
Found line to remove! store i64 %187, i64* %RBP, align 8
Found line to remove! store i64 %185, i64* %RSP, align 8
Found line to remove! %188 = add i64 %159, 6
Found line to remove! store i64 %188, i64* %PC, align 8
Found line to remove! %189 = inttoptr i64 %185 to i64*
Found line to remove! %190 = load i64, i64* %189, align 8
Found line to remove! store i64 %190, i64* %PC, align 8
Found line to remove! %191 = add i64 %160, 64
Found line to remove! store i64 %191, i64* %RSP, align 8
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%3 = load i64, i64* %RBP, align 8', '%4 = add i64 %1, 1', 'store i64 %4, i64* %PC, align 8', '%5 = load i64, i64* %RSP, align 8', '%6 = add i64 %5, -8', '%7 = inttoptr i64 %6 to i64*', 'store i64 %3, i64* %7, align 8', '%8 = load i64, i64* %PC, align 8', 'store i64 %6, i64* %RBP, align 8', '%9 = add i64 %5, -56', 'store i64 %9, i64* %RSP, align 8', '%10 = icmp ult i64 %6, 48', '%11 = zext i1 %10 to i8', '%12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %11, i8* %12, align 1', '%13 = trunc i64 %9 to i32', '%14 = and i32 %13, 255', '%15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12', '%16 = trunc i32 %15 to i8', '%17 = and i8 %16, 1', '%18 = xor i8 %17, 1', '%19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %18, i8* %19, align 1', '%20 = xor i64 %6, 16', '%21 = xor i64 %20, %9', '%22 = lshr i64 %21, 4', '%23 = trunc i64 %22 to i8', '%24 = and i8 %23, 1', '%25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %24, i8* %25, align 1', '%26 = icmp eq i64 %9, 0', '%27 = zext i1 %26 to i8', '%28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7', 'store i8 %27, i8* %28, align 1', '%29 = lshr i64 %9, 63', '%30 = trunc i64 %29 to i8', '%31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %30, i8* %31, align 1', '%32 = lshr i64 %6, 63', '%33 = xor i64 %29, %32', '%34 = add nuw nsw i64 %33, %32', '%35 = icmp eq i64 %34, 2', '%36 = zext i1 %35 to i8', '%37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %36, i8* %37, align 1', '%38 = add i64 %5, -16', '%39 = load i64, i64* %RDI, align 8', '%40 = add i64 %8, 11', 'store i64 %40, i64* %PC, align 8', '%41 = inttoptr i64 %38 to i64*', 'store i64 %39, i64* %41, align 8', '%42 = load i64, i64* %RBP, align 8', '%43 = add i64 %42, -16', '%44 = load i64, i64* %RSI, align 8', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 4', 'store i64 %46, i64* %PC, align 8', '%47 = inttoptr i64 %43 to i64*', 'store i64 %44, i64* %47, align 8', '%48 = load i64, i64* %RBP, align 8', '%49 = add i64 %48, -24', '%50 = load i64, i64* %PC, align 8', '%51 = add i64 %50, 5', 'store i64 %51, i64* %PC, align 8', '%52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0', '%53 = load i64, i64* %52, align 1', '%54 = inttoptr i64 %49 to i64*', 'store i64 %53, i64* %54, align 8', '%55 = load i64, i64* %RBP, align 8', '%56 = add i64 %55, -32', '%57 = load i64, i64* %RDX, align 8', '%58 = load i64, i64* %PC, align 8', '%59 = add i64 %58, 4', 'store i64 %59, i64* %PC, align 8', '%60 = inttoptr i64 %56 to i64*', 'store i64 %57, i64* %60, align 8', '%63 = load i64, i64* %PC, align 8', '%64 = add i64 %63, 7', 'store i64 %64, i64* %PC, align 8', '%66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1', '%67 = bitcast i64* %66 to double*', '%.pre = load i64, i64* %PC, align 8', '%68 = add i64 %126, -8', '%69 = add i64 %159, 4', 'store i64 %69, i64* %PC, align 8', '%70 = inttoptr i64 %68 to i64*', '%71 = load i64, i64* %70, align 8', 'store i64 %71, i64* %RDI, align 8', '%72 = add i64 %126, -16', '%73 = add i64 %159, 8', 'store i64 %73, i64* %PC, align 8', '%74 = inttoptr i64 %72 to i64*', '%75 = load i64, i64* %74, align 8', 'store i64 %75, i64* %RSI, align 8', '%76 = add i64 %126, -24', '%77 = add i64 %159, 13', 'store i64 %77, i64* %PC, align 8', '%78 = inttoptr i64 %76 to i64*', '%79 = load i64, i64* %78, align 8', 'store i64 %79, i64* %52, align 1', 'store double 0.000000e+00, double* %67, align 1', '%80 = add i64 %159, 18000', '%81 = add i64 %159, 18', '%82 = load i64, i64* %RSP, align 8', '%83 = add i64 %82, -8', '%84 = inttoptr i64 %83 to i64*', 'store i64 %81, i64* %84, align 8', 'store i64 %83, i64* %RSP, align 8', 'store i64 %80, i64* %PC, align 8', '%85 = tail call %struct.Memory* @sub_406500__ZN9benchmark10accumulateIPddEET0_T_S3_S2__renamed_(%struct.State* nonnull %0, i64 %80, %struct.Memory* %2)', '%86 = load i64, i64* %PC, align 8', '%87 = add i64 %86, 16190', '%88 = add i64 %86, 5', '%89 = load i64, i64* %RSP, align 8', '%90 = add i64 %89, -8', '%91 = inttoptr i64 %90 to i64*', 'store i64 %88, i64* %91, align 8', 'store i64 %90, i64* %RSP, align 8', 'store i64 %87, i64* %PC, align 8', '%92 = tail call %struct.Memory* @sub_405e00__Z9check_sumd_renamed_(%struct.State* nonnull %0, i64 %87, %struct.Memory* %2)', '%93 = load i64, i64* %RBP, align 8', '%94 = add i64 %93, -36', '%95 = load i64, i64* %PC, align 8', '%96 = add i64 %95, 3', 'store i64 %96, i64* %PC, align 8', '%97 = inttoptr i64 %94 to i32*', '%98 = load i32, i32* %97, align 4', '%99 = add i32 %98, 1', '%100 = zext i32 %99 to i64', 'store i64 %100, i64* %RAX, align 8', '%101 = icmp eq i32 %98, -1', '%102 = icmp eq i32 %99, 0', '%103 = or i1 %101, %102', '%104 = zext i1 %103 to i8', 'store i8 %104, i8* %12, align 1', '%105 = and i32 %99, 255', '%106 = tail call i32 @llvm.ctpop.i32(i32 %105) #12', '%107 = trunc i32 %106 to i8', '%108 = and i8 %107, 1', '%109 = xor i8 %108, 1', 'store i8 %109, i8* %19, align 1', '%110 = xor i32 %99, %98', '%111 = lshr i32 %110, 4', '%112 = trunc i32 %111 to i8', '%113 = and i8 %112, 1', 'store i8 %113, i8* %25, align 1', '%114 = zext i1 %102 to i8', 'store i8 %114, i8* %28, align 1', '%115 = lshr i32 %99, 31', '%116 = trunc i32 %115 to i8', 'store i8 %116, i8* %31, align 1', '%117 = lshr i32 %98, 31', '%118 = xor i32 %115, %117', '%119 = add nuw nsw i32 %118, %115', '%120 = icmp eq i32 %119, 2', '%121 = zext i1 %120 to i8', 'store i8 %121, i8* %37, align 1', '%122 = add i64 %95, 9', 'store i64 %122, i64* %PC, align 8', 'store i32 %99, i32* %97, align 4', '%123 = load i64, i64* %PC, align 8', '%124 = add i64 %123, -48', 'store i64 %124, i64* %PC, align 8', '%125 = phi i64 [ %124, %block_401eb0 ], [ %.pre, %block_401e80 ]', '%128 = add i64 %125, 3', 'store i64 %128, i64* %PC, align 8', '%131 = zext i32 %130 to i64', 'store i64 %131, i64* %RAX, align 8', '%134 = icmp ult i32 %130, %132', '%135 = zext i1 %134 to i8', 'store i8 %135, i8* %12, align 1', '%136 = and i32 %133, 255', '%137 = tail call i32 @llvm.ctpop.i32(i32 %136) #12', '%138 = trunc i32 %137 to i8', '%139 = and i8 %138, 1', '%140 = xor i8 %139, 1', 'store i8 %140, i8* %19, align 1', '%141 = xor i32 %132, %130', '%142 = xor i32 %141, %133', '%143 = lshr i32 %142, 4', '%144 = trunc i32 %143 to i8', '%145 = and i8 %144, 1', 'store i8 %145, i8* %25, align 1', '%146 = icmp eq i32 %133, 0', '%147 = zext i1 %146 to i8', 'store i8 %147, i8* %28, align 1', 'store i8 %149, i8* %31, align 1', '%156 = zext i1 %155 to i8', 'store i8 %156, i8* %37, align 1', '%.v = select i1 %158, i64 16, i64 53', '%159 = add i64 %125, %.v', 'store i64 %159, i64* %PC, align 8', '%160 = load i64, i64* %RSP, align 8', '%161 = add i64 %160, 48', 'store i64 %161, i64* %RSP, align 8', '%162 = icmp ugt i64 %160, -49', '%163 = zext i1 %162 to i8', 'store i8 %163, i8* %12, align 1', '%164 = trunc i64 %161 to i32', '%165 = and i32 %164, 255', '%166 = tail call i32 @llvm.ctpop.i32(i32 %165) #12', '%167 = trunc i32 %166 to i8', '%168 = and i8 %167, 1', '%169 = xor i8 %168, 1', 'store i8 %169, i8* %19, align 1', '%170 = xor i64 %160, 16', '%171 = xor i64 %170, %161', '%172 = lshr i64 %171, 4', '%173 = trunc i64 %172 to i8', '%174 = and i8 %173, 1', 'store i8 %174, i8* %25, align 1', '%175 = icmp eq i64 %161, 0', '%176 = zext i1 %175 to i8', 'store i8 %176, i8* %28, align 1', '%177 = lshr i64 %161, 63', '%178 = trunc i64 %177 to i8', 'store i8 %178, i8* %31, align 1', '%179 = lshr i64 %160, 63', '%180 = xor i64 %177, %179', '%181 = add nuw nsw i64 %180, %177', '%182 = icmp eq i64 %181, 2', '%183 = zext i1 %182 to i8', 'store i8 %183, i8* %37, align 1', '%184 = add i64 %159, 5', 'store i64 %184, i64* %PC, align 8', '%185 = add i64 %160, 56', '%186 = inttoptr i64 %161 to i64*', '%187 = load i64, i64* %186, align 8', 'store i64 %187, i64* %RBP, align 8', 'store i64 %185, i64* %RSP, align 8', '%188 = add i64 %159, 6', 'store i64 %188, i64* %PC, align 8', '%189 = inttoptr i64 %185 to i64*', '%190 = load i64, i64* %189, align 8', 'store i64 %190, i64* %PC, align 8', '%191 = add i64 %160, 64', 'store i64 %191, i64* %RSP, align 8'])Writing '/tmp/tmphdbcxtre.dot'...
Writing '/tmp/tmphdbcxtre.dot':Done

Reading LLVM: /tmp/tmpgyxv7jcf-query.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpgyxv7jcf-query.ll
Dot file generated!
Writing '/tmp/tmpwszfrd32.dot'...
Writing '/tmp/tmpwszfrd32.dot':Done

Reading LLVM: /tmp/tmpb0n_ti2n-target.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpb0n_ti2n-target.ll
Dot file generated!

================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_63 = load i64, i64* %RBP.i, align 8
- 2 %var_2_64 = add i64 %var_2_63, -36
- 3 %var_2_67 = inttoptr i64 %var_2_64 to i32*
- 4 store i32 0, i32* %var_2_67, align 4
- 5 %var_2_71 = load i64, i64* %RBP.i, align 8
- 6 %var_2_72 = add i64 %var_2_71, -36
- 7 %var_2_74 = inttoptr i64 %var_2_72 to i32*
- 8 %var_2_75 = load i32, i32* %var_2_74, align 4
- 9 %var_2_77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
- 10 %var_2_78 = sub i32 %var_2_75, %var_2_77
- 11 %var_2_93 = lshr i32 %var_2_78, 31
- 12 %var_2_95 = lshr i32 %var_2_75, 31
- 13 %var_2_96 = lshr i32 %var_2_77, 31
- 14 %var_2_97 = xor i32 %var_2_96, %var_2_95
- 15 %var_2_98 = xor i32 %var_2_93, %var_2_95
- 16 %var_2_99 = add nuw nsw i32 %var_2_98, %var_2_97
- 17 %var_2_100 = icmp eq i32 %var_2_99, 2
- 18 %var_2_102 = icmp ne i32 %var_2_93, 0
- 19 %var_2_103 = xor i1 %var_2_102, %var_2_100
- 20 \<badref\> = br i1 %var_2_103, label %block_.L_401ea0.preheader, label %block_.L_401ed5.split
- 21 \<badref\> = br label %block_.L_401ea0
- 22 \<badref\> = br label %block_.L_401ea0
- 23 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b70d8268>, {0: {0}, 1: {8, 1, 5, 9}, 2: {2, 6}, 3: {3, 7}, 4: {4}, 5: {8, 1, 5, 9}, 6: {2, 6}, 7: {3, 7}, 8: {8, 1, 5, 9}, 9: {8, 1, 5, 9}, 10: {10}, 11: {11, 12, 13}, 12: {11, 12, 13}, 13: {11, 12, 13}, 14: {19, 14, 15}, 15: {19, 14, 15}, 16: {16}, 17: {17}, 18: {18}, 19: {19, 14, 15}, 20: {20}, 21: {21, 22}, 22: {21, 22}, 23: {23}})
Equivalent! frozenset({21, 22}) {21, 22}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b70d8268>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {8, 9}, 10: {10}, 11: {11}, 12: {12}, 13: {12, 13}, 14: {14, 15}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
MORE 9 POT: 2
EXACT 10 sub sub
EXACT 11 lshr lshr
EXACT 12 lshr lshr
MORE 13 POT: 2
MORE 14 POT: 2
EXACT 15 xor xor
EXACT 16 add add
EXACT 17 icmp icmp
EXACT 18 icmp icmp
EXACT 19 xor xor
EXACT 20 br br
EXACT 21 br br
EXACT 22 br br
EXACT 23 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_61 = load i64, i64* %RBP, align 8
- 2 %var_2_62 = add i64 %var_2_61, -36
- 3 %var_2_65 = inttoptr i64 %var_2_62 to i32*
- 4 store i32 0, i32* %var_2_65, align 4
- 5 %var_2_126 = load i64, i64* %RBP, align 8
- 6 %var_2_127 = add i64 %var_2_126, -36
- 7 %var_2_129 = inttoptr i64 %var_2_127 to i32*
- 8 %var_2_130 = load i32, i32* %var_2_129, align 4
- 9 %var_2_132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
- 10 %var_2_133 = sub i32 %var_2_130, %var_2_132
- 11 %var_2_148 = lshr i32 %var_2_133, 31
- 12 %var_2_150 = lshr i32 %var_2_130, 31
- 13 %var_2_151 = lshr i32 %var_2_132, 31
- 14 %var_2_152 = xor i32 %var_2_151, %var_2_150
- 15 %var_2_153 = xor i32 %var_2_148, %var_2_150
- 16 %var_2_154 = add nuw nsw i32 %var_2_153, %var_2_152
- 17 %var_2_155 = icmp eq i32 %var_2_154, 2
- 18 %var_2_157 = icmp ne i32 %var_2_148, 0
- 19 %var_2_158 = xor i1 %var_2_157, %var_2_155
- 20 \<badref\> = br i1 %var_2_158, label %block_401ea0.preheader, label %block_401ed5.split
- 21 \<badref\> = br label %block_401ea0
- 22 \<badref\> = br label %block_401ea0
- 23 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6aaa488>, {0: {0}, 1: {8, 1, 5, 9}, 2: {2, 6}, 3: {3, 7}, 4: {4}, 5: {8, 1, 5, 9}, 6: {2, 6}, 7: {3, 7}, 8: {8, 1, 5, 9}, 9: {8, 1, 5, 9}, 10: {10}, 11: {11, 12, 13}, 12: {11, 12, 13}, 13: {11, 12, 13}, 14: {19, 14, 15}, 15: {19, 14, 15}, 16: {16}, 17: {17}, 18: {18}, 19: {19, 14, 15}, 20: {20}, 21: {21, 22}, 22: {21, 22}, 23: {23}})
Equivalent! frozenset({21, 22}) {21, 22}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6aaa488>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {8}, 9: {8, 9}, 10: {10}, 11: {11}, 12: {12}, 13: {12, 13}, 14: {14, 15}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}, 20: {20}, 21: {21}, 22: {22}, 23: {23}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 store store
EXACT 5 load load
EXACT 6 add add
EXACT 7 inttoptr inttoptr
EXACT 8 load load
MORE 9 POT: 2
EXACT 10 sub sub
EXACT 11 lshr lshr
EXACT 12 lshr lshr
MORE 13 POT: 2
MORE 14 POT: 2
EXACT 15 xor xor
EXACT 16 add add
EXACT 17 icmp icmp
EXACT 18 icmp icmp
EXACT 19 xor xor
EXACT 20 br br
EXACT 21 br br
EXACT 22 br br
EXACT 23 ret ret
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_63 = load i64, i64* %RBP.i, align 8', '%var_2_64 = add i64 %var_2_63, -36', '%var_2_67 = inttoptr i64 %var_2_64 to i32*', 'store i32 0, i32* %var_2_67, align 4'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_63 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_64 = add i64 %var_2_63, -36
Found line to remove! %var_2_67 = inttoptr i64 %var_2_64 to i32*
Found line to remove! store i32 0, i32* %var_2_67, align 4
Keep: %var_2_71 = load i64, i64* %RBP.i, align 8
Keep: %var_2_72 = add i64 %var_2_71, -36
Keep: %var_2_74 = inttoptr i64 %var_2_72 to i32*
Keep: %var_2_75 = load i32, i32* %var_2_74, align 4
Keep: %var_2_77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
Keep: %var_2_78 = sub i32 %var_2_75, %var_2_77
Keep: %var_2_93 = lshr i32 %var_2_78, 31
Keep: %var_2_95 = lshr i32 %var_2_75, 31
Keep: %var_2_96 = lshr i32 %var_2_77, 31
Keep: %var_2_97 = xor i32 %var_2_96, %var_2_95
Keep: %var_2_98 = xor i32 %var_2_93, %var_2_95
Keep: %var_2_99 = add nuw nsw i32 %var_2_98, %var_2_97
Keep: %var_2_100 = icmp eq i32 %var_2_99, 2
Keep: %var_2_102 = icmp ne i32 %var_2_93, 0
Keep: %var_2_103 = xor i1 %var_2_102, %var_2_100
Keep: br i1 %var_2_103, label %block_.L_401ea0.preheader, label %block_.L_401ed5.split
Keep: 
Keep: block_.L_401ea0.preheader:                        ; preds = %entry
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ea0:                                  ; preds = %block_.L_401ea0.preheader, %block_.L_401ea0
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ed5.split:                            ; preds = %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_63 = load i64, i64* %RBP.i, align 8', '%var_2_64 = add i64 %var_2_63, -36', '%var_2_67 = inttoptr i64 %var_2_64 to i32*', 'store i32 0, i32* %var_2_67, align 4'])
TO REMOVE: dict_keys(['%var_2_61 = load i64, i64* %RBP, align 8', '%var_2_62 = add i64 %var_2_61, -36', '%var_2_65 = inttoptr i64 %var_2_62 to i32*', 'store i32 0, i32* %var_2_65, align 4'])
Keep: block_401e80:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %var_2_61 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_62 = add i64 %var_2_61, -36
Found line to remove! %var_2_65 = inttoptr i64 %var_2_62 to i32*
Found line to remove! store i32 0, i32* %var_2_65, align 4
Keep: %var_2_126 = load i64, i64* %RBP, align 8
Keep: %var_2_127 = add i64 %var_2_126, -36
Keep: %var_2_129 = inttoptr i64 %var_2_127 to i32*
Keep: %var_2_130 = load i32, i32* %var_2_129, align 4
Keep: %var_2_132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
Keep: %var_2_133 = sub i32 %var_2_130, %var_2_132
Keep: %var_2_148 = lshr i32 %var_2_133, 31
Keep: %var_2_150 = lshr i32 %var_2_130, 31
Keep: %var_2_151 = lshr i32 %var_2_132, 31
Keep: %var_2_152 = xor i32 %var_2_151, %var_2_150
Keep: %var_2_153 = xor i32 %var_2_148, %var_2_150
Keep: %var_2_154 = add nuw nsw i32 %var_2_153, %var_2_152
Keep: %var_2_155 = icmp eq i32 %var_2_154, 2
Keep: %var_2_157 = icmp ne i32 %var_2_148, 0Writing '/tmp/tmprkaku38f.dot'...
Writing '/tmp/tmprkaku38f.dot':Done

Reading LLVM: /tmp/tmpgyxv7jcf-query.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpgyxv7jcf-query.ll
Dot file generated!
Writing '/tmp/tmpqj2lvw4l.dot'...
Writing '/tmp/tmpqj2lvw4l.dot':Done

Reading LLVM: /tmp/tmpb0n_ti2n-target.ll
Extracting function [_Z15test_accumulateIPddEvT_S1_T0_PKc] from /tmp/tmpb0n_ti2n-target.ll
Dot file generated!

Keep: %var_2_158 = xor i1 %var_2_157, %var_2_155
Keep: br i1 %var_2_158, label %block_401ea0.preheader, label %block_401ed5.split
Keep: 
Keep: block_401ea0.preheader:                           ; preds = %block_401e80
Keep: br label %block_401ea0
Keep: 
Keep: block_401ea0:                                     ; preds = %block_401ea0.preheader, %block_401ea0
Keep: br label %block_401ea0
Keep: 
Keep: block_401ed5.split:                               ; preds = %block_401e80
Keep: ret %struct.Memory* %2
Missed: dict_keys(['%var_2_61 = load i64, i64* %RBP, align 8', '%var_2_62 = add i64 %var_2_61, -36', '%var_2_65 = inttoptr i64 %var_2_62 to i32*', 'store i32 0, i32* %var_2_65, align 4'])
================ Starting round 4
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_71 = load i64, i64* %RBP.i, align 8
- 2 %var_2_72 = add i64 %var_2_71, -36
- 3 %var_2_74 = inttoptr i64 %var_2_72 to i32*
- 4 %var_2_75 = load i32, i32* %var_2_74, align 4
- 5 %var_2_77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
- 6 %var_2_78 = sub i32 %var_2_75, %var_2_77
- 7 %var_2_93 = lshr i32 %var_2_78, 31
- 8 %var_2_95 = lshr i32 %var_2_75, 31
- 9 %var_2_96 = lshr i32 %var_2_77, 31
- 10 %var_2_97 = xor i32 %var_2_96, %var_2_95
- 11 %var_2_98 = xor i32 %var_2_93, %var_2_95
- 12 %var_2_99 = add nuw nsw i32 %var_2_98, %var_2_97
- 13 %var_2_100 = icmp eq i32 %var_2_99, 2
- 14 %var_2_102 = icmp ne i32 %var_2_93, 0
- 15 %var_2_103 = xor i1 %var_2_102, %var_2_100
- 16 \<badref\> = br i1 %var_2_103, label %block_.L_401ea0.preheader, label %block_.L_401ed5.split
- 17 \<badref\> = br label %block_.L_401ea0
- 18 \<badref\> = br label %block_.L_401ea0
- 19 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b709a2f0>, {0: {0}, 1: {1, 4, 5}, 2: {2}, 3: {3}, 4: {1, 4, 5}, 5: {1, 4, 5}, 6: {6}, 7: {8, 9, 7}, 8: {8, 9, 7}, 9: {8, 9, 7}, 10: {10, 11, 15}, 11: {10, 11, 15}, 12: {12}, 13: {13}, 14: {14}, 15: {10, 11, 15}, 16: {16}, 17: {17, 18}, 18: {17, 18}, 19: {19}})
Equivalent! frozenset({17, 18}) {17, 18}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b709a2f0>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {4, 5}, 6: {6}, 7: {7}, 8: {8}, 9: {8, 9}, 10: {10, 11}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 load load
MORE 5 POT: 2
EXACT 6 sub sub
EXACT 7 lshr lshr
EXACT 8 lshr lshr
MORE 9 POT: 2
MORE 10 POT: 2
EXACT 11 xor xor
EXACT 12 add add
EXACT 13 icmp icmp
EXACT 14 icmp icmp
EXACT 15 xor xor
EXACT 16 br br
EXACT 17 br br
EXACT 18 br br
EXACT 19 ret ret
================ Starting round 5
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_126 = load i64, i64* %RBP, align 8
- 2 %var_2_127 = add i64 %var_2_126, -36
- 3 %var_2_129 = inttoptr i64 %var_2_127 to i32*
- 4 %var_2_130 = load i32, i32* %var_2_129, align 4
- 5 %var_2_132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
- 6 %var_2_133 = sub i32 %var_2_130, %var_2_132
- 7 %var_2_148 = lshr i32 %var_2_133, 31
- 8 %var_2_150 = lshr i32 %var_2_130, 31
- 9 %var_2_151 = lshr i32 %var_2_132, 31
- 10 %var_2_152 = xor i32 %var_2_151, %var_2_150
- 11 %var_2_153 = xor i32 %var_2_148, %var_2_150
- 12 %var_2_154 = add nuw nsw i32 %var_2_153, %var_2_152
- 13 %var_2_155 = icmp eq i32 %var_2_154, 2
- 14 %var_2_157 = icmp ne i32 %var_2_148, 0
- 15 %var_2_158 = xor i1 %var_2_157, %var_2_155
- 16 \<badref\> = br i1 %var_2_158, label %block_401ea0.preheader, label %block_401ed5.split
- 17 \<badref\> = br label %block_401ea0
- 18 \<badref\> = br label %block_401ea0
- 19 \<badref\> = ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6a8c378>, {0: {0}, 1: {1, 4, 5}, 2: {2}, 3: {3}, 4: {1, 4, 5}, 5: {1, 4, 5}, 6: {6}, 7: {8, 9, 7}, 8: {8, 9, 7}, 9: {8, 9, 7}, 10: {10, 11, 15}, 11: {10, 11, 15}, 12: {12}, 13: {13}, 14: {14}, 15: {10, 11, 15}, 16: {16}, 17: {17, 18}, 18: {17, 18}, 19: {19}})
Equivalent! frozenset({17, 18}) {17, 18}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f03b6a8c378>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {4, 5}, 6: {6}, 7: {7}, 8: {8}, 9: {8, 9}, 10: {10, 11}, 11: {11}, 12: {12}, 13: {13}, 14: {14}, 15: {15}, 16: {16}, 17: {17}, 18: {18}, 19: {19}})
EXACT 0 getelementptr getelementptr
EXACT 1 load load
EXACT 2 add add
EXACT 3 inttoptr inttoptr
EXACT 4 load load
MORE 5 POT: 2
EXACT 6 sub sub
EXACT 7 lshr lshr
EXACT 8 lshr lshr
MORE 9 POT: 2
MORE 10 POT: 2
EXACT 11 xor xor
EXACT 12 add add
EXACT 13 icmp icmp
EXACT 14 icmp icmp
EXACT 15 xor xor
EXACT 16 br br
EXACT 17 br br
EXACT 18 br br
EXACT 19 ret ret
FP: 63 3.0 False
TO REMOVE: dict_keys([])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_71 = load i64, i64* %RBP.i, align 8
Keep: %var_2_72 = add i64 %var_2_71, -36
Keep: %var_2_74 = inttoptr i64 %var_2_72 to i32*
Keep: %var_2_75 = load i32, i32* %var_2_74, align 4
Keep: %var_2_77 = load i32, i32* bitcast (%G_0x609088_type* @G_0x609088 to i32*), align 8
Keep: %var_2_78 = sub i32 %var_2_75, %var_2_77
Keep: %var_2_93 = lshr i32 %var_2_78, 31
Keep: %var_2_95 = lshr i32 %var_2_75, 31
Keep: %var_2_96 = lshr i32 %var_2_77, 31
Keep: %var_2_97 = xor i32 %var_2_96, %var_2_95
Keep: %var_2_98 = xor i32 %var_2_93, %var_2_95
Keep: %var_2_99 = add nuw nsw i32 %var_2_98, %var_2_97
Keep: %var_2_100 = icmp eq i32 %var_2_99, 2
Keep: %var_2_102 = icmp ne i32 %var_2_93, 0
Keep: %var_2_103 = xor i1 %var_2_102, %var_2_100
Keep: br i1 %var_2_103, label %block_.L_401ea0.preheader, label %block_.L_401ed5.split
Keep: 
Keep: block_.L_401ea0.preheader:                        ; preds = %entry
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ea0:                                  ; preds = %block_.L_401ea0.preheader, %block_.L_401ea0
Keep: br label %block_.L_401ea0
Keep: 
Keep: block_.L_401ed5.split:                            ; preds = %entry
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
TO REMOVE: dict_keys([])
Keep: block_401e80:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_126 = load i64, i64* %RBP, align 8
Keep: %var_2_127 = add i64 %var_2_126, -36
Keep: %var_2_129 = inttoptr i64 %var_2_127 to i32*
Keep: %var_2_130 = load i32, i32* %var_2_129, align 4
Keep: %var_2_132 = load i32, i32* bitcast (%iterations_type* @iterations to i32*), align 8
Keep: %var_2_133 = sub i32 %var_2_130, %var_2_132
Keep: %var_2_148 = lshr i32 %var_2_133, 31
Keep: %var_2_150 = lshr i32 %var_2_130, 31
Keep: %var_2_151 = lshr i32 %var_2_132, 31
Keep: %var_2_152 = xor i32 %var_2_151, %var_2_150
Keep: %var_2_153 = xor i32 %var_2_148, %var_2_150
Keep: %var_2_154 = add nuw nsw i32 %var_2_153, %var_2_152
Keep: %var_2_155 = icmp eq i32 %var_2_154, 2
Keep: %var_2_157 = icmp ne i32 %var_2_148, 0
Keep: %var_2_158 = xor i1 %var_2_157, %var_2_155
Keep: br i1 %var_2_158, label %block_401ea0.preheader, label %block_401ed5.split
Keep: 
Keep: block_401ea0.preheader:                           ; preds = %block_401e80
Keep: br label %block_401ea0
Keep: 
Keep: block_401ea0:                                     ; preds = %block_401ea0.preheader, %block_401ea0
Keep: br label %block_401ea0
Keep: 
Keep: block_401ed5.split:                               ; preds = %block_401e80
Keep: ret %struct.Memory* %2
Missed: dict_keys([])
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/_Z15test_accumulateIPddEvT_S1_T0_PKc/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/binary/test.mcsema.calls_renamed.ll _Z15test_accumulateIPddEvT_S1_T0_PKc
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/_Z15test_accumulateIPddEvT_S1_T0_PKc/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/stepanov_abstraction/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:711: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
