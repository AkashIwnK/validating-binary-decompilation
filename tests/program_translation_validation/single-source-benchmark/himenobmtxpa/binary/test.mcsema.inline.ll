; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400518__init_type = type <{ [23 x i8] }>
%seg_400530__plt_type = type <{ [112 x i8] }>
%seg_4005a0__text_type = type <{ [60 x i8], i32, [6098 x i8] }>
%seg_401db4__fini_type = type <{ [9 x i8] }>
%seg_401dc0__rodata_type = type <{ [40 x i8], [34 x i8], [30 x i8], [29 x i8], [13 x i8], [3 x i8], [3 x i8], [2 x i8], [2 x i8], [3 x i8], [3 x i8], [28 x i8] }>
%seg_401e80__eh_frame_hdr_type = type <{ [132 x i8] }>
%seg_401f08__eh_frame_type = type <{ [504 x i8] }>
%seg_602de0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_603048__data_type = type <{ [16 x i8] }>
%omega_type = type <{ [4 x i8] }>
%seg_603060__bss_type = type <{ [4 x i8], [4 x i8], [8 x i8] }>
%b_type = type <{ [24 x i8] }>
%p_type = type <{ [24 x i8] }>
%wrk2_type = type <{ [24 x i8] }>
%c_type = type <{ [24 x i8] }>
%a_type = type <{ [24 x i8] }>
%wrk1_type = type <{ [24 x i8] }>
%bnd_type = type <{ [24 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400518__init = internal constant %seg_400518__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\D5* \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400530__plt = internal constant %seg_400530__plt_type <{ [112 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\D2* \00\00\00\00\00\00\00\00\00\00\00\FF%\CA* \00\00\00\00\00\00\00\00\00\00\00\FF%\C2* \00\00\00\00\00\00\00\00\00\00\00\FF%\BA* \00\00\00\00\00\00\00\00\00\00\00\FF%\B2* \00\00\00\00\00\00\00\00\00\00\00\FF%\AA* \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_4005a0__text = internal constant %seg_4005a0__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\B0\1D@\00H\C7\C1@\1D@\00H\C7\C7\90\06@\00\FF\15&* \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_401f08__eh_frame_type* @seg_401f08__eh_frame to i64), i64 7) to i32), [6098 x i8] c"U\B8`0`\00H=`0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF`0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE`0`\00UH\81\EE`0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF`0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\09* \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\F7) \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\B0\00\00\00H\B8\E8\1D@\00\00\00\00\00\C7E\FC\00\00\00\00\89}\F8H\89u\F0\C7E\BC@\00\00\00\C7E\C0@\00\00\00\C7E\C4\80\00\00\00\8B}\BC\89}\D0\8B}\C0\89}\CC\8B}\C4\89}\C8\8B}\D0\83\EF\01\89}\DC\8B}\CC\83\EF\01\89}\D8\8B}\C8\83\EF\01\89}\D4\8Bu\D0\8BU\CC\8BM\C8H\89\C7\B0\00\E8H\FE\FF\FFH\BF\0A\1E@\00\00\00\00\00\8Bu\DC\8BU\D8\8BM\D4\89E\94\B0\00\E8+\FE\FF\FFH\BF\880`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\90\E8J\03\00\00H\BF\001`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\8C\E8)\03\00\00H\BF\E80`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\88\E8\08\03\00\00H\BF\A00`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\84\E8\E7\02\00\00H\BF\D00`\00\00\00\00\00\BE\04\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\80\E8\C6\02\00\00H\BFp0`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85|\FF\FF\FF\E8\A2\02\00\00H\BF\B80`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85x\FF\FF\FF\E8~\02\00\00H\BF\880`\00\00\00\00\00\89\85t\FF\FF\FF\E8\F9\02\00\00H\BF\001`\00\00\00\00\001\F6\F3\0F\10\05\89\15\00\00\E8\E0\03\00\00H\BF\E80`\00\00\00\00\001\F6\0FW\C0\E8\CC\03\00\00H\BF\A00`\00\00\00\00\001\F6\0FW\C0\E8\B8\03\00\00H\BF\D00`\00\00\00\00\001\F6\F3\0F\10\05H\15\00\00\E8\9F\03\00\00H\BF\D00`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05,\15\00\00\E8\83\03\00\00H\BF\D00`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05\10\15\00\00\E8g\03\00\00H\BF\D00`\00\00\00\00\00\BE\03\00\00\00\F3\0F\10\05\F8\14\00\00\E8K\03\00\00H\BFp0`\00\00\00\00\001\F6\0FW\C0\E87\03\00\00H\BFp0`\00\00\00\00\00\BE\01\00\00\00\0FW\C0\E8 \03\00\00H\BFp0`\00\00\00\00\00\BE\02\00\00\00\0FW\C0\E8\09\03\00\00H\BF\B80`\00\00\00\00\001\F6\F3\0F\10\05\99\14\00\00\E8\F0\02\00\00H\BF\B80`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05}\14\00\00\E8\D4\02\00\00H\BF\B80`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05a\14\00\00\E8\B8\02\00\00H\BE\D00`\00\00\00\00\00H\BAp0`\00\00\00\00\00H\B9\B80`\00\00\00\00\00I\B8\880`\00\00\00\00\00I\B9\001`\00\00\00\00\00H\BF\E80`\00\00\00\00\00I\BA\A00`\00\00\00\00\00\C7E\E0@\00\00\00\8BE\E0H\89\BDh\FF\FF\FF\89\C7L\8B\9Dh\FF\FF\FFL\89\1C$L\89T$\08\E8*\03\00\00H\BF(\1E@\00\00\00\00\00\F3\0F\11E\B8\8Bu\E0\B0\00\E8a\FB\FF\FFH\BFE\1E@\00\00\00\00\00\F3\0FZE\B8\89\85d\FF\FF\FF\B0\01\E8E\FB\FF\FFH\BF\880`\00\00\00\00\00\89\85`\FF\FF\FF\E8\80\0F\00\00H\BF\001`\00\00\00\00\00\E8q\0F\00\00H\BF\E80`\00\00\00\00\00\E8b\0F\00\00H\BF\A00`\00\00\00\00\00\E8S\0F\00\00H\BF\D00`\00\00\00\00\00\E8D\0F\00\00H\BFp0`\00\00\00\00\00\E85\0F\00\00H\BF\B80`\00\00\00\00\00\E8&\0F\00\001\C0H\81\C4\B0\00\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8\89u\F4\89U\F0\89M\ECD\89E\E8\8BM\F4H\8B}\F8\89O\08\8BM\F0H\8B}\F8\89O\0C\8BM\ECH\8B}\F8\89O\10\8BM\E8H\8B}\F8\89O\14H\8B}\F8H\C7\07\00\00\00\00\8BM\F4\0F\AFM\F0\0F\AFM\EC\0F\AFM\E8Hc\F9H\C1\E7\02\E8\89\FA\FF\FF1\C9\BA\01\00\00\00H\8B}\F8H\89\07H\8BE\F8H\838\00\0FE\CA\89\C8H\83\C4 ]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8\C7E\F4\00\00\00\00\8BE\F4H\8BM\F8;A\0C\0F\8D\D8\00\00\00\C7E\F0\00\00\00\00\8BE\F0H\8BM\F8;A\10\0F\8D\AE\00\00\00\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\14\0F\8D\84\00\00\00\8BE\F4\0F\AFE\F4\F3\0F*\C0H\8BM\F8\8BA\0C\83\E8\01H\8BM\F8\8BQ\0C\83\EA\01\0F\AF\C2\F3\0F*\C8\F3\0F^\C1H\8BM\F8H\8B\09H\8Bu\F8kF\0C\00H\8Bu\F8\0F\AFF\10H\8Bu\F8\0F\AFF\14\8BU\F4H\8Bu\F8\0F\AFV\10H\8Bu\F8\0F\AFV\14\01\D0\8BU\F0H\8Bu\F8\0F\AFV\14\01\D0\03E\ECHc\F0\F3\0F\11\04\B1\8BE\EC\83\C0\01\89E\EC\E9l\FF\FF\FF\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9B\FF\FF\FF\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\18\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8\89u\F4\F3\0F\11E\F0\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\0C\0F\8D\B6\00\00\00\C7E\E8\00\00\00\00\8BE\E8H\8BM\F8;A\10\0F\8D\8C\00\00\00\C7E\E4\00\00\00\00\8BE\E4H\8BM\F8;A\14\0F\8Db\00\00\00\F3\0F\10E\F0H\8BE\F8H\8B\00\8BM\F4H\8BU\F8\0F\AFJ\0CH\8BU\F8\0F\AFJ\10H\8BU\F8\0F\AFJ\14\8Bu\ECH\8BU\F8\0F\AFr\10H\8BU\F8\0F\AFr\14\01\F1\8Bu\E8H\8BU\F8\0F\AFr\14\01\F1\03M\E4Hc\D1\F3\0F\11\04\90\8BE\E4\83\C0\01\89E\E4\E9\8E\FF\FF\FF\E9\00\00\00\00\8BE\E8\83\C0\01\89E\E8\E9d\FF\FF\FF\E9\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9:\FF\FF\FF]\C3\90UH\89\E5H\8BE\18L\8BU\10\89}\FCH\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0L\89U\C8H\89E\C0H\8BE\D8\8Bx\0C\83\EF\01\89}\ACH\8BE\D8\8Bx\10\83\EF\01\89}\A8H\8BE\D8\8Bx\14\83\EF\01\89}\A4\C7E\B0\00\00\00\00\8BE\B0;E\FC\0F\8D4\0C\00\00\0FW\C0\F3\0F\11E\A0\C7E\BC\01\00\00\00\8BE\BC;E\AC\0F\8D\01\0B\00\00\C7E\B8\01\00\00\00\8BE\B8;E\A8\0F\8D\DB\0A\00\00\C7E\B4\01\00\00\00\8BE\B4;E\A4\0F\8D\B5\0A\00\00H\8BE\F0H\8B\00H\8BM\F0kQ\0C\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\01H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8kQ\0C\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\01H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0kQ\0C\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\01H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\C8H\8B\00H\8BM\C8kQ\0C\00H\8BM\C8\0F\AFQ\10H\8BM\C8\0F\AFQ\14\8Bu\BCH\8BM\C8\0F\AFq\10H\8BM\C8\0F\AFq\14\01\F2\8Bu\B8H\8BM\C8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FX\04\88\F3\0F\11E\9C\F3\0F\10E\9CH\8BE\F0H\8B\00H\8BM\F0kQ\0C\03H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\04\88H\8BE\D0H\8B\00H\8BM\D0kQ\0C\00H\8BM\D0\0F\AFQ\10H\8BM\D0\0F\AFQ\14\8Bu\BCH\8BM\D0\0F\AFq\10H\8BM\D0\0F\AFq\14\01\F2\8Bu\B8H\8BM\D0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88\F3\0F\11E\98\F3\0F\10E\98\F3\0FYE\98\F3\0FXE\A0\F3\0F\11E\A0H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88\F3\0F\10\0C%X0`\00\F3\0FYM\98\F3\0FX\C1H\8BE\C0H\8B\00H\8BM\C0kQ\0C\00H\8BM\C0\0F\AFQ\10H\8BM\C0\0F\AFQ\14\8Bu\BCH\8BM\C0\0F\AFq\10H\8BM\C0\0F\AFq\14\01\F2\8Bu\B8H\8BM\C0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\11\04\88\8BE\B4\83\C0\01\89E\B4\E9?\F5\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9\19\F5\FF\FF\E9\00\00\00\00\8BE\BC\83\C0\01\89E\BC\E9\F3\F4\FF\FF\C7E\BC\01\00\00\00\8BE\BC;E\AC\0F\8D\F2\00\00\00\C7E\B8\01\00\00\00\8BE\B8;E\A8\0F\8D\CC\00\00\00\C7E\B4\01\00\00\00\8BE\B4;E\A4\0F\8D\A6\00\00\00H\8BE\C0H\8B\00H\8BM\C0kQ\0C\00H\8BM\C0\0F\AFQ\10H\8BM\C0\0F\AFQ\14\8Bu\BCH\8BM\C0\0F\AFq\10H\8BM\C0\0F\AFq\14\01\F2\8Bu\B8H\8BM\C0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\11\04\88\8BE\B4\83\C0\01\89E\B4\E9N\FF\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9(\FF\FF\FF\E9\00\00\00\00\8BE\BC\83\C0\01\89E\BC\E9\02\FF\FF\FF\E9\00\00\00\00\8BE\B0\83\C0\01\89E\B0\E9\C0\F3\FF\FF\F3\0F\10E\A0]\C3UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8H\83?\00\0F\84\0F\00\00\00H\8BE\F8H\8B\00H\89\C7\E8w\EB\FF\FFH\8BE\F8H\C7\00\00\00\00\00H\8BE\F8\C7@\08\00\00\00\00H\8BE\F8\C7@\10\00\00\00\00H\8BE\F8\C7@\0C\00\00\00\00H\8BE\F8\C7@\14\00\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\05\B4\03\00\00\89}\FC\89u\F8\89U\F4\8BU\F4\83\EA\02\F2\0F*\CA\8BU\F8\83\EA\02\F2\0F*\D2\F2\0FY\CA\8BU\FC\83\EA\02\F2\0F*\D2\F2\0FY\CA\F2\0FY\C8\0F(\C1]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\15l\03\00\00\89}\FC\F2\0F\11E\F0\F2\0F\11M\E8\F2\0F\10E\E8\F2\0F^E\F0\F2\0FY\C2\F2\0F*M\FC\F2\0FY\C1]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F0\B8R\1E@\00\89\C6\E8\B0\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8U\1E@\00\89\C6\E8\97\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00 \00\00\00H\8BE\F8\C7@\04 \00\00\00H\8BE\F8\C7@\08@\00\00\00\E9z\01\00\00H\8B}\F0\B8S\1E@\00\89\C6\E8Y\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8V\1E@\00\89\C6\E8@\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00@\00\00\00H\8BE\F8\C7@\04@\00\00\00H\8BE\F8\C7@\08\80\00\00\00\E9#\01\00\00H\8B}\F0\B8X\1E@\00\89\C6\E8\02\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8Z\1E@\00\89\C6\E8\E9\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\80\00\00\00H\8BE\F8\C7@\04\80\00\00\00H\8BE\F8\C7@\08\00\01\00\00\E9\CC\00\00\00H\8B}\F0\B8]\1E@\00\89\C6\E8\AB\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8`\1E@\00\89\C6\E8\92\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\01\00\00H\8BE\F8\C7@\04\00\01\00\00H\8BE\F8\C7@\08\00\02\00\00\E9u\00\00\00H\8B}\F0\B8\5C\1E@\00\89\C6\E8T\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8_\1E@\00\89\C6\E8;\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\02\00\00H\8BE\F8\C7@\04\00\02\00\00H\8BE\F8\C7@\08\00\04\00\00\E9\1E\00\00\00H\BFb\1E@\00\00\00\00\00\B0\00\E8\DC\E8\FF\FF\BF\06\00\00\00\89E\EC\E8\0F\E9\FF\FFH\83\C4 ]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8D}\F01\C0\89\C6\E8\BB\E8\FF\FF\83<%d0`\00\00\89E\E4\0F\855\00\00\00\83<%h0`\00\00\0F\85'\00\00\00\0FW\C0H\8BE\F0\89\C1\89\0C%d0`\00H\8BE\F8\89\C1\89\0C%h0`\00\F2\0F\11E\E8\E9=\00\00\00\F2\0F\10\05\ED\00\00\00H\8BE\F0Hc\0C%d0`\00H)\C8\F2H\0F*\C8H\8BE\F8Hc\0C%h0`\00H)\C8\F2H\0F*\D0\F2\0F^\D0\F2\0FX\CA\F2\0F\11M\E8\F2\0F\10E\E8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00AWAVI\89\D7AUATL\8D%\8E\10 \00UH\8D-\8E\10 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\A7\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401db4__fini = internal constant %seg_401db4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401dc0__rodata = internal constant %seg_401dc0__rodata_type <{ [40 x i8] c"\01\00\02\00\00\00\80?\AB\AA*>\00\00\00\00\00\00\00\00\00\00A@\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\80\84.A", [34 x i8] c"mimax = %d mjmax = %d mkmax = %d\0A\00", [30 x i8] c"imax = %d jmax = %d kmax =%d\0A\00", [29 x i8] c" Loop executed for %d times\0A\00", [13 x i8] c" Gosa : %e \0A\00", [3 x i8] c"XS\00", [3 x i8] c"xs\00", [2 x i8] c"M\00", [2 x i8] c"m\00", [3 x i8] c"XL\00", [3 x i8] c"xl\00", [28 x i8] c"Invalid input character !!\0A\00" }>
@seg_401e80__eh_frame_hdr = internal constant %seg_401e80__eh_frame_hdr_type <{ [132 x i8] c"\01\1B\03;\84\00\00\00\0F\00\00\00\B0\E6\FF\FF\E0\00\00\00 \E7\FF\FF\A0\00\00\00P\E7\FF\FF\CC\00\00\00\10\E8\FF\FF\08\01\00\00\10\EC\FF\FF$\01\00\00\A0\EC\FF\FF@\01\00\00\A0\ED\FF\FF\5C\01\00\00\80\EE\FF\FFx\01\00\00 \FB\FF\FF\94\01\00\00\90\FB\FF\FF\B0\01\00\00\E0\FB\FF\FF\CC\01\00\00 \FC\FF\FF\E8\01\00\00\10\FE\FF\FF\04\02\00\00\C0\FE\FF\FF \02\00\000\FF\FF\FFh\02\00\00" }>
@seg_401f08__eh_frame = internal constant %seg_401f08__eh_frame_type <{ [504 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00x\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00|\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\C8\E5\FF\FFp\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\00\E7\FF\FF\F5\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\E4\EA\FF\FF\88\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00X\EB\FF\FF\F9\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00<\EC\FF\FF\DF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\00\ED\FF\FF\A0\0C\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\84\F9\FF\FFf\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\D8\F9\FF\FFD\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\0C\FA\FF\FF2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\000\FA\FF\FF\E7\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\04\FC\FF\FF\A3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00p\01\00\00\98\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\B8\01\00\00\C0\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602de0__init_array = internal global %seg_602de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400680_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400650___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64)* @exit to i64) }>
@seg_603048__data = internal global %seg_603048__data_type zeroinitializer
@omega = global %omega_type <{ [4 x i8] c"\CD\CCL?" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@b = global %b_type zeroinitializer
@p = global %p_type zeroinitializer
@wrk2 = global %wrk2_type zeroinitializer
@c = global %c_type zeroinitializer
@a = global %a_type zeroinitializer
@wrk1 = global %wrk1_type zeroinitializer
@bnd = global %bnd_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400680_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400650___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401db0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401d40___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @set_param_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mflops_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @newMat_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @jacobi_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @fflop_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_init_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @clearMat_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400d00_jacobi_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400518__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005e0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400b20_mat_set_init_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcmp(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400610_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400610:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400648, label %block_400633

block_40063d:                                     ; preds = %block_400633
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195914, label %block_40064a
    i64 4195909, label %block_400645
  ]

block_40064a:                                     ; preds = %block_40063d
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_400650___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_400633:                                     ; preds = %block_400610
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_400648, label %block_40063d

block_400648:                                     ; preds = %block_400645, %block_400633, %block_400610
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400610 ], [ %2, %block_400633 ], [ %2, %block_400645 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400645:                                     ; preds = %block_40063d
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_400648

; <label>:270:                                    ; preds = %block_40063d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_401aa0_set_param(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401aa0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 32
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 32
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2432
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2446
  %52 = xor i64 32, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RSI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 146), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %90 = load i32, i32* %EAX
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = and i64 %91, 4294967295
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 5451
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %96, i64* %105, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %106, %struct.Memory* %2)
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %108, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2447
  %120 = icmp eq i32 %108, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2448
  %123 = lshr i32 %108, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2449
  %126 = lshr i32 %108, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 31
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2448
  store i8 %139, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = icmp ne i8 %139, 0
  %142 = select i1 %141, i64 %133, i64 %135
  store i64 %142, i64* %140, align 8, !tbaa !2428
  %143 = load i8, i8* %BRANCH_TAKEN
  %144 = icmp eq i8 %143, 1
  br i1 %144, label %block_401ae2, label %block_401ac9

block_401c3e:                                     ; preds = %block_401c25, %block_401c0c
  %MEMORY.0 = phi %struct.Memory* [ %445, %block_401c0c ], [ %748, %block_401c25 ]
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 8
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RAX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 512, i32* %154
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 8
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX
  %162 = add i64 %161, 4
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 7
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %162 to i32*
  store i32 512, i32* %165
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 8
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = load i64, i64* %RAX
  %173 = add i64 %172, 8
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 7
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  store i32 1024, i32* %176
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 35
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  store i64 %180, i64* %PC
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %178, i64* %181, align 8, !tbaa !2428
  br label %block_401c81

block_401b39:                                     ; preds = %block_401b20, %block_401b07
  %MEMORY.1 = phi %struct.Memory* [ %685, %block_401b07 ], [ %890, %block_401b20 ]
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 8
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = load i64, i64* %RAX
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 6
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 64, i32* %191
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = load i64, i64* %RAX
  %199 = add i64 %198, 4
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 7
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i32*
  store i32 64, i32* %202
  %203 = load i64, i64* %RBP
  %204 = sub i64 %203, 8
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %204 to i64*
  %208 = load i64, i64* %207
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = load i64, i64* %RAX
  %210 = add i64 %209, 8
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 7
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i32*
  store i32 128, i32* %213
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 296
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 5
  store i64 %217, i64* %PC
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %215, i64* %218, align 8, !tbaa !2428
  br label %block_401c81

block_401bb5:                                     ; preds = %block_401b77
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 16
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  store i64 %226, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 157), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %227 = load i32, i32* %EAX
  %228 = zext i32 %227 to i64
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 2
  store i64 %230, i64* %PC
  %231 = and i64 %228, 4294967295
  store i64 %231, i64* %RSI, align 8, !tbaa !2428
  %232 = load i64, i64* %PC
  %233 = sub i64 %232, 5712
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %239 = load i64, i64* %238, align 8, !tbaa !2428
  %240 = add i64 %239, -8
  %241 = inttoptr i64 %240 to i64*
  store i64 %235, i64* %241
  store i64 %240, i64* %238, align 8, !tbaa !2428
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %233, i64* %242, align 8, !tbaa !2428
  %243 = load i64, i64* %PC
  %244 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %243, %struct.Memory* %572)
  %245 = load i32, i32* %EAX
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %249, align 1, !tbaa !2432
  %250 = and i32 %245, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = icmp eq i32 %245, 0
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %258, i8* %259, align 1, !tbaa !2448
  %260 = lshr i32 %245, 31
  %261 = trunc i32 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %261, i8* %262, align 1, !tbaa !2449
  %263 = lshr i32 %245, 31
  %264 = xor i32 %260, %263
  %265 = add nuw nsw i32 %264, %263
  %266 = icmp eq i32 %265, 2
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %267, i8* %268, align 1, !tbaa !2450
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 31
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 6
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 6
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %276 = load i8, i8* %275, align 1, !tbaa !2448
  store i8 %276, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %278 = icmp ne i8 %276, 0
  %279 = select i1 %278, i64 %270, i64 %272
  store i64 %279, i64* %277, align 8, !tbaa !2428
  %280 = load i8, i8* %BRANCH_TAKEN
  %281 = icmp eq i8 %280, 1
  br i1 %281, label %block_401be7, label %block_401bce

block_401b90:                                     ; preds = %block_401b5e, %block_401b77
  %MEMORY.2 = phi %struct.Memory* [ %954, %block_401b5e ], [ %572, %block_401b77 ]
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 8
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %RAX, align 8, !tbaa !2428
  %288 = load i64, i64* %RAX
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 6
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i32*
  store i32 128, i32* %291
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 8
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %298 = load i64, i64* %RAX
  %299 = add i64 %298, 4
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 7
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  store i32 128, i32* %302
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 8
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = load i64, i64* %RAX
  %310 = add i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 7
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i32*
  store i32 256, i32* %313
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 209
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 5
  store i64 %317, i64* %PC
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %315, i64* %318, align 8, !tbaa !2428
  br label %block_401c81

block_401bce:                                     ; preds = %block_401bb5
  %319 = load i64, i64* %RBP
  %320 = sub i64 %319, 16
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 4
  store i64 %322, i64* %PC
  %323 = inttoptr i64 %320 to i64*
  %324 = load i64, i64* %323
  store i64 %324, i64* %RDI, align 8, !tbaa !2428
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 160), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %327 = load i32, i32* %EAX
  %328 = zext i32 %327 to i64
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 2
  store i64 %330, i64* %PC
  %331 = and i64 %328, 4294967295
  store i64 %331, i64* %RSI, align 8, !tbaa !2428
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 5737
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %343, %struct.Memory* %244)
  %345 = load i32, i32* %EAX
  %346 = zext i32 %345 to i64
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 3
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %349, align 1, !tbaa !2432
  %350 = and i32 %345, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2446
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %356, align 1, !tbaa !2447
  %357 = icmp eq i32 %345, 0
  %358 = zext i1 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %358, i8* %359, align 1, !tbaa !2448
  %360 = lshr i32 %345, 31
  %361 = trunc i32 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %361, i8* %362, align 1, !tbaa !2449
  %363 = lshr i32 %345, 31
  %364 = xor i32 %360, %363
  %365 = add nuw nsw i32 %364, %363
  %366 = icmp eq i32 %365, 2
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %367, i8* %368, align 1, !tbaa !2450
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 43
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 6
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 6
  store i64 %374, i64* %PC
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %376 = load i8, i8* %375, align 1, !tbaa !2448
  %377 = icmp eq i8 %376, 0
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %380 = select i1 %377, i64 %370, i64 %372
  store i64 %380, i64* %379, align 8, !tbaa !2428
  %381 = load i8, i8* %BRANCH_TAKEN
  %382 = icmp eq i8 %381, 1
  br i1 %382, label %block_401c0c, label %block_401be7

block_401be7:                                     ; preds = %block_401bce, %block_401bb5
  %MEMORY.3 = phi %struct.Memory* [ %244, %block_401bb5 ], [ %344, %block_401bce ]
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 8
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i64*
  %388 = load i64, i64* %387
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = load i64, i64* %RAX
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 6
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to i32*
  store i32 256, i32* %392
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 8
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 4
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i64*
  %398 = load i64, i64* %397
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = load i64, i64* %RAX
  %400 = add i64 %399, 4
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 7
  store i64 %402, i64* %PC
  %403 = inttoptr i64 %400 to i32*
  store i32 256, i32* %403
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 8
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RAX
  %411 = add i64 %410, 8
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 7
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  store i32 512, i32* %414
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 122
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 5
  store i64 %418, i64* %PC
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %416, i64* %419, align 8, !tbaa !2428
  br label %block_401c81

block_401c0c:                                     ; preds = %block_401bce
  %420 = load i64, i64* %RBP
  %421 = sub i64 %420, 16
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 4
  store i64 %423, i64* %PC
  %424 = inttoptr i64 %421 to i64*
  %425 = load i64, i64* %424
  store i64 %425, i64* %RDI, align 8, !tbaa !2428
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 5
  store i64 %427, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 156), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %428 = load i32, i32* %EAX
  %429 = zext i32 %428 to i64
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 2
  store i64 %431, i64* %PC
  %432 = and i64 %429, 4294967295
  store i64 %432, i64* %RSI, align 8, !tbaa !2428
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 5799
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 5
  store i64 %438, i64* %PC
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %440 = load i64, i64* %439, align 8, !tbaa !2428
  %441 = add i64 %440, -8
  %442 = inttoptr i64 %441 to i64*
  store i64 %436, i64* %442
  store i64 %441, i64* %439, align 8, !tbaa !2428
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %443, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %444, %struct.Memory* %344)
  %446 = load i32, i32* %EAX
  %447 = zext i32 %446 to i64
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %450, align 1, !tbaa !2432
  %451 = and i32 %446, 255
  %452 = call i32 @llvm.ctpop.i32(i32 %451) #16
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = xor i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %455, i8* %456, align 1, !tbaa !2446
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %457, align 1, !tbaa !2447
  %458 = icmp eq i32 %446, 0
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %459, i8* %460, align 1, !tbaa !2448
  %461 = lshr i32 %446, 31
  %462 = trunc i32 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %462, i8* %463, align 1, !tbaa !2449
  %464 = lshr i32 %446, 31
  %465 = xor i32 %461, %464
  %466 = add nuw nsw i32 %465, %464
  %467 = icmp eq i32 %466, 2
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %468, i8* %469, align 1, !tbaa !2450
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 31
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 6
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 6
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %477 = load i8, i8* %476, align 1, !tbaa !2448
  store i8 %477, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %479 = icmp ne i8 %477, 0
  %480 = select i1 %479, i64 %471, i64 %473
  store i64 %480, i64* %478, align 8, !tbaa !2428
  %481 = load i8, i8* %BRANCH_TAKEN
  %482 = icmp eq i8 %481, 1
  br i1 %482, label %block_401c3e, label %block_401c25

block_401ac9:                                     ; preds = %block_401aa0
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 16
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 4
  store i64 %486, i64* %PC
  %487 = inttoptr i64 %484 to i64*
  %488 = load i64, i64* %487
  store i64 %488, i64* %RDI, align 8, !tbaa !2428
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  store i64 %490, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 149), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %491 = load i32, i32* %EAX
  %492 = zext i32 %491 to i64
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 2
  store i64 %494, i64* %PC
  %495 = and i64 %492, 4294967295
  store i64 %495, i64* %RSI, align 8, !tbaa !2428
  %496 = load i64, i64* %PC
  %497 = sub i64 %496, 5476
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %503 = load i64, i64* %502, align 8, !tbaa !2428
  %504 = add i64 %503, -8
  %505 = inttoptr i64 %504 to i64*
  store i64 %499, i64* %505
  store i64 %504, i64* %502, align 8, !tbaa !2428
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %497, i64* %506, align 8, !tbaa !2428
  %507 = load i64, i64* %PC
  %508 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %507, %struct.Memory* %107)
  %509 = load i32, i32* %EAX
  %510 = zext i32 %509 to i64
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %513, align 1, !tbaa !2432
  %514 = and i32 %509, 255
  %515 = call i32 @llvm.ctpop.i32(i32 %514) #16
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %518, i8* %519, align 1, !tbaa !2446
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %520, align 1, !tbaa !2447
  %521 = icmp eq i32 %509, 0
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %522, i8* %523, align 1, !tbaa !2448
  %524 = lshr i32 %509, 31
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %525, i8* %526, align 1, !tbaa !2449
  %527 = lshr i32 %509, 31
  %528 = xor i32 %524, %527
  %529 = add nuw nsw i32 %528, %527
  %530 = icmp eq i32 %529, 2
  %531 = zext i1 %530 to i8
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %531, i8* %532, align 1, !tbaa !2450
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 43
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 6
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  store i64 %538, i64* %PC
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %540 = load i8, i8* %539, align 1, !tbaa !2448
  %541 = icmp eq i8 %540, 0
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %544 = select i1 %541, i64 %534, i64 %536
  store i64 %544, i64* %543, align 8, !tbaa !2428
  %545 = load i8, i8* %BRANCH_TAKEN
  %546 = icmp eq i8 %545, 1
  br i1 %546, label %block_401b07, label %block_401ae2

block_401b77:                                     ; preds = %block_401b5e
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 16
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %RDI, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 5
  store i64 %554, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 154), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %555 = load i32, i32* %EAX
  %556 = zext i32 %555 to i64
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 2
  store i64 %558, i64* %PC
  %559 = and i64 %556, 4294967295
  store i64 %559, i64* %RSI, align 8, !tbaa !2428
  %560 = load i64, i64* %PC
  %561 = sub i64 %560, 5650
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 5
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %567 = load i64, i64* %566, align 8, !tbaa !2428
  %568 = add i64 %567, -8
  %569 = inttoptr i64 %568 to i64*
  store i64 %563, i64* %569
  store i64 %568, i64* %566, align 8, !tbaa !2428
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %561, i64* %570, align 8, !tbaa !2428
  %571 = load i64, i64* %PC
  %572 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %571, %struct.Memory* %954)
  %573 = load i32, i32* %EAX
  %574 = zext i32 %573 to i64
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 3
  store i64 %576, i64* %PC
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %577, align 1, !tbaa !2432
  %578 = and i32 %573, 255
  %579 = call i32 @llvm.ctpop.i32(i32 %578) #16
  %580 = trunc i32 %579 to i8
  %581 = and i8 %580, 1
  %582 = xor i8 %581, 1
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %582, i8* %583, align 1, !tbaa !2446
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %584, align 1, !tbaa !2447
  %585 = icmp eq i32 %573, 0
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %586, i8* %587, align 1, !tbaa !2448
  %588 = lshr i32 %573, 31
  %589 = trunc i32 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %589, i8* %590, align 1, !tbaa !2449
  %591 = lshr i32 %573, 31
  %592 = xor i32 %588, %591
  %593 = add nuw nsw i32 %592, %591
  %594 = icmp eq i32 %593, 2
  %595 = zext i1 %594 to i8
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %595, i8* %596, align 1, !tbaa !2450
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 43
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 6
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 6
  store i64 %602, i64* %PC
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %604 = load i8, i8* %603, align 1, !tbaa !2448
  %605 = icmp eq i8 %604, 0
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %608 = select i1 %605, i64 %598, i64 %600
  store i64 %608, i64* %607, align 8, !tbaa !2428
  %609 = load i8, i8* %BRANCH_TAKEN
  %610 = icmp eq i8 %609, 1
  br i1 %610, label %block_401bb5, label %block_401b90

block_401c81:                                     ; preds = %block_401ae2, %block_401be7, %block_401b90, %block_401b39, %block_401c3e
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_401ae2 ], [ %MEMORY.1, %block_401b39 ], [ %MEMORY.2, %block_401b90 ], [ %MEMORY.3, %block_401be7 ], [ %MEMORY.0, %block_401c3e ]
  %611 = load i64, i64* %RSP
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC
  %614 = add i64 32, %611
  store i64 %614, i64* %RSP, align 8, !tbaa !2428
  %615 = icmp ult i64 %614, %611
  %616 = icmp ult i64 %614, 32
  %617 = or i1 %615, %616
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %618, i8* %619, align 1, !tbaa !2432
  %620 = trunc i64 %614 to i32
  %621 = and i32 %620, 255
  %622 = call i32 @llvm.ctpop.i32(i32 %621) #16
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %625, i8* %626, align 1, !tbaa !2446
  %627 = xor i64 32, %611
  %628 = xor i64 %627, %614
  %629 = lshr i64 %628, 4
  %630 = trunc i64 %629 to i8
  %631 = and i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %631, i8* %632, align 1, !tbaa !2447
  %633 = icmp eq i64 %614, 0
  %634 = zext i1 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %634, i8* %635, align 1, !tbaa !2448
  %636 = lshr i64 %614, 63
  %637 = trunc i64 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %637, i8* %638, align 1, !tbaa !2449
  %639 = lshr i64 %611, 63
  %640 = xor i64 %636, %639
  %641 = add nuw nsw i64 %640, %636
  %642 = icmp eq i64 %641, 2
  %643 = zext i1 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %643, i8* %644, align 1, !tbaa !2450
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 1
  store i64 %646, i64* %PC
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %648 = load i64, i64* %647, align 8, !tbaa !2428
  %649 = add i64 %648, 8
  %650 = inttoptr i64 %648 to i64*
  %651 = load i64, i64* %650
  store i64 %651, i64* %RBP, align 8, !tbaa !2428
  store i64 %649, i64* %647, align 8, !tbaa !2428
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 1
  store i64 %653, i64* %PC
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %656 = load i64, i64* %655, align 8, !tbaa !2428
  %657 = inttoptr i64 %656 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %654, align 8, !tbaa !2428
  %659 = add i64 %656, 8
  store i64 %659, i64* %655, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401b07:                                     ; preds = %block_401ac9
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 16
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  store i64 %665, i64* %RDI, align 8, !tbaa !2428
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 5
  store i64 %667, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 147), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %668 = load i32, i32* %EAX
  %669 = zext i32 %668 to i64
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 2
  store i64 %671, i64* %PC
  %672 = and i64 %669, 4294967295
  store i64 %672, i64* %RSI, align 8, !tbaa !2428
  %673 = load i64, i64* %PC
  %674 = sub i64 %673, 5538
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 5
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 5
  store i64 %678, i64* %PC
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %680 = load i64, i64* %679, align 8, !tbaa !2428
  %681 = add i64 %680, -8
  %682 = inttoptr i64 %681 to i64*
  store i64 %676, i64* %682
  store i64 %681, i64* %679, align 8, !tbaa !2428
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %674, i64* %683, align 8, !tbaa !2428
  %684 = load i64, i64* %PC
  %685 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %684, %struct.Memory* %508)
  %686 = load i32, i32* %EAX
  %687 = zext i32 %686 to i64
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %690, align 1, !tbaa !2432
  %691 = and i32 %686, 255
  %692 = call i32 @llvm.ctpop.i32(i32 %691) #16
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  %695 = xor i8 %694, 1
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %695, i8* %696, align 1, !tbaa !2446
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %697, align 1, !tbaa !2447
  %698 = icmp eq i32 %686, 0
  %699 = zext i1 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %699, i8* %700, align 1, !tbaa !2448
  %701 = lshr i32 %686, 31
  %702 = trunc i32 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %702, i8* %703, align 1, !tbaa !2449
  %704 = lshr i32 %686, 31
  %705 = xor i32 %701, %704
  %706 = add nuw nsw i32 %705, %704
  %707 = icmp eq i32 %706, 2
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %708, i8* %709, align 1, !tbaa !2450
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 31
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 6
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 6
  store i64 %715, i64* %PC
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %717 = load i8, i8* %716, align 1, !tbaa !2448
  store i8 %717, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %719 = icmp ne i8 %717, 0
  %720 = select i1 %719, i64 %711, i64 %713
  store i64 %720, i64* %718, align 8, !tbaa !2428
  %721 = load i8, i8* %BRANCH_TAKEN
  %722 = icmp eq i8 %721, 1
  br i1 %722, label %block_401b39, label %block_401b20

block_401c25:                                     ; preds = %block_401c0c
  %723 = load i64, i64* %RBP
  %724 = sub i64 %723, 16
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %RDI, align 8, !tbaa !2428
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 159), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %731 = load i32, i32* %EAX
  %732 = zext i32 %731 to i64
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 2
  store i64 %734, i64* %PC
  %735 = and i64 %732, 4294967295
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = load i64, i64* %PC
  %737 = sub i64 %736, 5824
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 5
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 5
  store i64 %741, i64* %PC
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %743 = load i64, i64* %742, align 8, !tbaa !2428
  %744 = add i64 %743, -8
  %745 = inttoptr i64 %744 to i64*
  store i64 %739, i64* %745
  store i64 %744, i64* %742, align 8, !tbaa !2428
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %737, i64* %746, align 8, !tbaa !2428
  %747 = load i64, i64* %PC
  %748 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %747, %struct.Memory* %445)
  %749 = load i32, i32* %EAX
  %750 = zext i32 %749 to i64
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %753, align 1, !tbaa !2432
  %754 = and i32 %749, 255
  %755 = call i32 @llvm.ctpop.i32(i32 %754) #16
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %758, i8* %759, align 1, !tbaa !2446
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %760, align 1, !tbaa !2447
  %761 = icmp eq i32 %749, 0
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %762, i8* %763, align 1, !tbaa !2448
  %764 = lshr i32 %749, 31
  %765 = trunc i32 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %765, i8* %766, align 1, !tbaa !2449
  %767 = lshr i32 %749, 31
  %768 = xor i32 %764, %767
  %769 = add nuw nsw i32 %768, %767
  %770 = icmp eq i32 %769, 2
  %771 = zext i1 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %771, i8* %772, align 1, !tbaa !2450
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 43
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 6
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 6
  store i64 %778, i64* %PC
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %780 = load i8, i8* %779, align 1, !tbaa !2448
  %781 = icmp eq i8 %780, 0
  %782 = zext i1 %781 to i8
  store i8 %782, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %784 = select i1 %781, i64 %774, i64 %776
  store i64 %784, i64* %783, align 8, !tbaa !2428
  %785 = load i8, i8* %BRANCH_TAKEN
  %786 = icmp eq i8 %785, 1
  br i1 %786, label %block_401c63, label %block_401c3e

block_401ae2:                                     ; preds = %block_401ac9, %block_401aa0
  %MEMORY.5 = phi %struct.Memory* [ %107, %block_401aa0 ], [ %508, %block_401ac9 ]
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 8
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 4
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i64*
  %792 = load i64, i64* %791
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = load i64, i64* %RAX
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 6
  store i64 %795, i64* %PC
  %796 = inttoptr i64 %793 to i32*
  store i32 32, i32* %796
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 8
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 4
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %798 to i64*
  %802 = load i64, i64* %801
  store i64 %802, i64* %RAX, align 8, !tbaa !2428
  %803 = load i64, i64* %RAX
  %804 = add i64 %803, 4
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 7
  store i64 %806, i64* %PC
  %807 = inttoptr i64 %804 to i32*
  store i32 32, i32* %807
  %808 = load i64, i64* %RBP
  %809 = sub i64 %808, 8
  %810 = load i64, i64* %PC
  %811 = add i64 %810, 4
  store i64 %811, i64* %PC
  %812 = inttoptr i64 %809 to i64*
  %813 = load i64, i64* %812
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = load i64, i64* %RAX
  %815 = add i64 %814, 8
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 7
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i32*
  store i32 64, i32* %818
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 383
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 5
  store i64 %822, i64* %PC
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %820, i64* %823, align 8, !tbaa !2428
  br label %block_401c81

block_401c63:                                     ; preds = %block_401c25
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 10
  store i64 %825, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 162), i64* %RDI, align 8, !tbaa !2428
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 2
  store i64 %827, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %828 = load i64, i64* %PC
  %829 = sub i64 %828, 5919
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 5
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %835 = load i64, i64* %834, align 8, !tbaa !2428
  %836 = add i64 %835, -8
  %837 = inttoptr i64 %836 to i64*
  store i64 %831, i64* %837
  store i64 %836, i64* %834, align 8, !tbaa !2428
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %829, i64* %838, align 8, !tbaa !2428
  %839 = load i64, i64* %PC
  %840 = call %struct.Memory* @ext_400550_printf(%struct.State* %0, i64 %839, %struct.Memory* %748)
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 5
  store i64 %842, i64* %PC
  store i64 6, i64* %RDI, align 8, !tbaa !2428
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 20
  %845 = load i32, i32* %EAX
  %846 = zext i32 %845 to i64
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 3
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %844 to i32*
  store i32 %845, i32* %849
  %850 = load i64, i64* %PC
  %851 = sub i64 %850, 5868
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 5
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 5
  store i64 %855, i64* %PC
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %857 = load i64, i64* %856, align 8, !tbaa !2428
  %858 = add i64 %857, -8
  %859 = inttoptr i64 %858 to i64*
  store i64 %853, i64* %859
  store i64 %858, i64* %856, align 8, !tbaa !2428
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %851, i64* %860, align 8, !tbaa !2428
  %861 = load i64, i64* %PC
  %862 = call %struct.Memory* @ext_400590_exit(%struct.State* %0, i64 %861, %struct.Memory* %840)
  %863 = load i64, i64* %PC
  %864 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %863, %struct.Memory* %862)
  ret %struct.Memory* %864

block_401b20:                                     ; preds = %block_401b07
  %865 = load i64, i64* %RBP
  %866 = sub i64 %865, 16
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 4
  store i64 %868, i64* %PC
  %869 = inttoptr i64 %866 to i64*
  %870 = load i64, i64* %869
  store i64 %870, i64* %RDI, align 8, !tbaa !2428
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 5
  store i64 %872, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 150), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %873 = load i32, i32* %EAX
  %874 = zext i32 %873 to i64
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 2
  store i64 %876, i64* %PC
  %877 = and i64 %874, 4294967295
  store i64 %877, i64* %RSI, align 8, !tbaa !2428
  %878 = load i64, i64* %PC
  %879 = sub i64 %878, 5563
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 5
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %885 = load i64, i64* %884, align 8, !tbaa !2428
  %886 = add i64 %885, -8
  %887 = inttoptr i64 %886 to i64*
  store i64 %881, i64* %887
  store i64 %886, i64* %884, align 8, !tbaa !2428
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %879, i64* %888, align 8, !tbaa !2428
  %889 = load i64, i64* %PC
  %890 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %889, %struct.Memory* %685)
  %891 = load i32, i32* %EAX
  %892 = zext i32 %891 to i64
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 3
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %895, align 1, !tbaa !2432
  %896 = and i32 %891, 255
  %897 = call i32 @llvm.ctpop.i32(i32 %896) #16
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %900, i8* %901, align 1, !tbaa !2446
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %902, align 1, !tbaa !2447
  %903 = icmp eq i32 %891, 0
  %904 = zext i1 %903 to i8
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %904, i8* %905, align 1, !tbaa !2448
  %906 = lshr i32 %891, 31
  %907 = trunc i32 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %907, i8* %908, align 1, !tbaa !2449
  %909 = lshr i32 %891, 31
  %910 = xor i32 %906, %909
  %911 = add nuw nsw i32 %910, %909
  %912 = icmp eq i32 %911, 2
  %913 = zext i1 %912 to i8
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %913, i8* %914, align 1, !tbaa !2450
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 43
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 6
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 6
  store i64 %920, i64* %PC
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %922 = load i8, i8* %921, align 1, !tbaa !2448
  %923 = icmp eq i8 %922, 0
  %924 = zext i1 %923 to i8
  store i8 %924, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %926 = select i1 %923, i64 %916, i64 %918
  store i64 %926, i64* %925, align 8, !tbaa !2428
  %927 = load i8, i8* %BRANCH_TAKEN
  %928 = icmp eq i8 %927, 1
  br i1 %928, label %block_401b5e, label %block_401b39

block_401b5e:                                     ; preds = %block_401b20
  %929 = load i64, i64* %RBP
  %930 = sub i64 %929, 16
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 4
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to i64*
  %934 = load i64, i64* %933
  store i64 %934, i64* %RDI, align 8, !tbaa !2428
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 5
  store i64 %936, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 152), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %937 = load i32, i32* %EAX
  %938 = zext i32 %937 to i64
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 2
  store i64 %940, i64* %PC
  %941 = and i64 %938, 4294967295
  store i64 %941, i64* %RSI, align 8, !tbaa !2428
  %942 = load i64, i64* %PC
  %943 = sub i64 %942, 5625
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 5
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 5
  store i64 %947, i64* %PC
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %949 = load i64, i64* %948, align 8, !tbaa !2428
  %950 = add i64 %949, -8
  %951 = inttoptr i64 %950 to i64*
  store i64 %945, i64* %951
  store i64 %950, i64* %948, align 8, !tbaa !2428
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %943, i64* %952, align 8, !tbaa !2428
  %953 = load i64, i64* %PC
  %954 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %953, %struct.Memory* %890)
  %955 = load i32, i32* %EAX
  %956 = zext i32 %955 to i64
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 3
  store i64 %958, i64* %PC
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %959, align 1, !tbaa !2432
  %960 = and i32 %955, 255
  %961 = call i32 @llvm.ctpop.i32(i32 %960) #16
  %962 = trunc i32 %961 to i8
  %963 = and i8 %962, 1
  %964 = xor i8 %963, 1
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %964, i8* %965, align 1, !tbaa !2446
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %966, align 1, !tbaa !2447
  %967 = icmp eq i32 %955, 0
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %968, i8* %969, align 1, !tbaa !2448
  %970 = lshr i32 %955, 31
  %971 = trunc i32 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = lshr i32 %955, 31
  %974 = xor i32 %970, %973
  %975 = add nuw nsw i32 %974, %973
  %976 = icmp eq i32 %975, 2
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %977, i8* %978, align 1, !tbaa !2450
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 31
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 6
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 6
  store i64 %984, i64* %PC
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %986 = load i8, i8* %985, align 1, !tbaa !2448
  store i8 %986, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %988 = icmp ne i8 %986, 0
  %989 = select i1 %988, i64 %980, i64 %982
  store i64 %989, i64* %987, align 8, !tbaa !2428
  %990 = load i8, i8* %BRANCH_TAKEN
  %991 = icmp eq i8 %990, 1
  br i1 %991, label %block_401b90, label %block_401b77
}

; Function Attrs: noinline
define %struct.Memory* @sub_400650___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400650:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400670, label %block_400659

block_400670:                                     ; preds = %block_400650
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400659:                                     ; preds = %block_400650
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4005e0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %37 = icmp ult i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400608, label %block_4005f1

block_4005fb:                                     ; preds = %block_4005f1
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195850, label %block_40060a
    i64 4195843, label %block_400603
  ]

block_4005f1:                                     ; preds = %block_4005e0
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400608, label %block_4005fb

block_400608:                                     ; preds = %block_400603, %block_4005f1, %block_4005e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005e0 ], [ %2, %block_4005f1 ], [ %2, %block_400603 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40060a:                                     ; preds = %block_4005fb
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400610_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400603:                                     ; preds = %block_4005fb
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400608

; <label>:163:                                    ; preds = %block_4005fb
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400690_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400690:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 17
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %R8D = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 17
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %R8 = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 19
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R9 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 21
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R10 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 23
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R11 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %56 to %"class.std::bitset"*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = load i64, i64* %RBP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 1
  store i64 %61, i64* %PC
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %63 = load i64, i64* %62, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %59, i64* %65
  store i64 %64, i64* %62, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC
  %72 = sub i64 %69, 176
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  %73 = icmp ult i64 %69, 176
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %74, i8* %75, align 1, !tbaa !2432
  %76 = trunc i64 %72 to i32
  %77 = and i32 %76, 255
  %78 = call i32 @llvm.ctpop.i32(i32 %77) #16
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = xor i64 176, %69
  %84 = xor i64 %83, %72
  %85 = lshr i64 %84, 4
  %86 = trunc i64 %85 to i8
  %87 = and i8 %86, 1
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %87, i8* %88, align 1, !tbaa !2447
  %89 = icmp eq i64 %72, 0
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %90, i8* %91, align 1, !tbaa !2448
  %92 = lshr i64 %72, 63
  %93 = trunc i64 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %93, i8* %94, align 1, !tbaa !2449
  %95 = lshr i64 %69, 63
  %96 = xor i64 %92, %95
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2450
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 40), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 4
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 0, i32* %107
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i32, i32* %EDI
  %111 = zext i32 %110 to i64
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %109 to i32*
  store i32 %110, i32* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 16
  %117 = load i64, i64* %RSI
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %116 to i64*
  store i64 %117, i64* %120
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 68
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 7
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i32*
  store i32 64, i32* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 64, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 60
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 128, i32* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 68
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 48
  %145 = load i32, i32* %EDI
  %146 = zext i32 %145 to i64
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %144 to i32*
  store i32 %145, i32* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDI, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 52
  %159 = load i32, i32* %EDI
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %163
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 60
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  %169 = load i32, i32* %168
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RDI, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 56
  %173 = load i32, i32* %EDI
  %174 = zext i32 %173 to i64
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %177
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 48
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 3
  store i64 %187, i64* %PC
  %188 = trunc i64 %185 to i32
  %189 = sub i32 %188, 1
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RDI, align 8, !tbaa !2428
  %191 = icmp ult i32 %188, 1
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2432
  %194 = and i32 %189, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2446
  %200 = xor i64 1, %185
  %201 = trunc i64 %200 to i32
  %202 = xor i32 %201, %189
  %203 = lshr i32 %202, 4
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2447
  %207 = icmp eq i32 %189, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2448
  %210 = lshr i32 %189, 31
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2449
  %213 = lshr i32 %188, 31
  %214 = xor i32 %210, %213
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2450
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 36
  %221 = load i32, i32* %EDI
  %222 = zext i32 %221 to i64
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %220 to i32*
  store i32 %221, i32* %225
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 52
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RDI, align 8, !tbaa !2428
  %233 = load i64, i64* %RDI
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = trunc i64 %233 to i32
  %237 = sub i32 %236, 1
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  %239 = icmp ult i32 %236, 1
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %240, i8* %241, align 1, !tbaa !2432
  %242 = and i32 %237, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = xor i64 1, %233
  %249 = trunc i64 %248 to i32
  %250 = xor i32 %249, %237
  %251 = lshr i32 %250, 4
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2447
  %255 = icmp eq i32 %237, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i32 %237, 31
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = lshr i32 %236, 31
  %262 = xor i32 %258, %261
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 40
  %269 = load i32, i32* %EDI
  %270 = zext i32 %269 to i64
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 3
  store i64 %272, i64* %PC
  %273 = inttoptr i64 %268 to i32*
  store i32 %269, i32* %273
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 56
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 3
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to i32*
  %279 = load i32, i32* %278
  %280 = zext i32 %279 to i64
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %281 = load i64, i64* %RDI
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = trunc i64 %281 to i32
  %285 = sub i32 %284, 1
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = icmp ult i32 %284, 1
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2432
  %290 = and i32 %285, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i64 1, %281
  %297 = trunc i64 %296 to i32
  %298 = xor i32 %297, %285
  %299 = lshr i32 %298, 4
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %301, i8* %302, align 1, !tbaa !2447
  %303 = icmp eq i32 %285, 0
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = lshr i32 %285, 31
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i32 %284, 31
  %310 = xor i32 %306, %309
  %311 = add nuw nsw i32 %310, %309
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 44
  %317 = load i32, i32* %EDI
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %316 to i32*
  store i32 %317, i32* %321
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 48
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RSI, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 52
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RDX, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 56
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  store i64 %343, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 2
  store i64 %347, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %348 = load i64, i64* %PC
  %349 = sub i64 %348, 435
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %351, i64* %357
  store i64 %356, i64* %354, align 8, !tbaa !2428
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %349, i64* %358, align 8, !tbaa !2428
  %359 = load i64, i64* %PC
  %360 = call %struct.Memory* @ext_400550_printf(%struct.State* %0, i64 %359, %struct.Memory* %2)
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 10
  store i64 %362, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 74), i64* %RDI, align 8, !tbaa !2428
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 36
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 3
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RSI, align 8, !tbaa !2428
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 40
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 44
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 108
  %386 = load i32, i32* %EAX
  %387 = zext i32 %386 to i64
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 3
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %385 to i32*
  store i32 %386, i32* %390
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 2
  store i64 %392, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %393 = load i64, i64* %PC
  %394 = sub i64 %393, 464
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 5
  store i64 %398, i64* %PC
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %400 = load i64, i64* %399, align 8, !tbaa !2428
  %401 = add i64 %400, -8
  %402 = inttoptr i64 %401 to i64*
  store i64 %396, i64* %402
  store i64 %401, i64* %399, align 8, !tbaa !2428
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %394, i64* %403, align 8, !tbaa !2428
  %404 = load i64, i64* %PC
  %405 = call %struct.Memory* @ext_400550_printf(%struct.State* %0, i64 %404, %struct.Memory* %360)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 10
  store i64 %407, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 48
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RDX, align 8, !tbaa !2428
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 52
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to i32*
  %422 = load i32, i32* %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RCX, align 8, !tbaa !2428
  %424 = bitcast i32* %R8D to i64*
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 56
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %424, align 8, !tbaa !2428
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 112
  %434 = load i32, i32* %EAX
  %435 = zext i32 %434 to i64
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %433 to i32*
  store i32 %434, i32* %438
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 847
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %446 = load i64, i64* %445, align 8, !tbaa !2428
  %447 = add i64 %446, -8
  %448 = inttoptr i64 %447 to i64*
  store i64 %442, i64* %448
  store i64 %447, i64* %445, align 8, !tbaa !2428
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %440, i64* %449, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %450, %struct.Memory* %405)
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 10
  store i64 %453, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 48
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 52
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = bitcast i32* %R8D to i64*
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 56
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %470, align 8, !tbaa !2428
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 116
  %480 = load i32, i32* %EAX
  %481 = zext i32 %480 to i64
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %479 to i32*
  store i32 %480, i32* %484
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 814
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %492 = load i64, i64* %491, align 8, !tbaa !2428
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %488, i64* %494
  store i64 %493, i64* %491, align 8, !tbaa !2428
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %486, i64* %495, align 8, !tbaa !2428
  %496 = load i64, i64* %PC
  %497 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %496, %struct.Memory* %451)
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 10
  store i64 %499, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 48
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 3
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i32*
  %507 = load i32, i32* %506
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RDX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 52
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RCX, align 8, !tbaa !2428
  %516 = bitcast i32* %R8D to i64*
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 56
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 4
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %516, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 120
  %526 = load i32, i32* %EAX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %530
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 781
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %497)
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 10
  store i64 %545, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 48
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %RDX, align 8, !tbaa !2428
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 52
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = bitcast i32* %R8D to i64*
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 56
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %562, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 124
  %572 = load i32, i32* %EAX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %571 to i32*
  store i32 %572, i32* %576
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 748
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 5
  store i64 %582, i64* %PC
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %584 = load i64, i64* %583, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %580, i64* %586
  store i64 %585, i64* %583, align 8, !tbaa !2428
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %578, i64* %587, align 8, !tbaa !2428
  %588 = load i64, i64* %PC
  %589 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %588, %struct.Memory* %543)
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 10
  store i64 %591, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 5
  store i64 %593, i64* %PC
  store i64 4, i64* %RSI, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP
  %595 = sub i64 %594, 48
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i32*
  %599 = load i32, i32* %598
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RDX, align 8, !tbaa !2428
  %601 = load i64, i64* %RBP
  %602 = sub i64 %601, 52
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 3
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %602 to i32*
  %606 = load i32, i32* %605
  %607 = zext i32 %606 to i64
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = bitcast i32* %R8D to i64*
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 56
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i32*
  %614 = load i32, i32* %613
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %608, align 8, !tbaa !2428
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 128
  %618 = load i32, i32* %EAX
  %619 = zext i32 %618 to i64
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %617 to i32*
  store i32 %618, i32* %622
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 715
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %630 = load i64, i64* %629, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %626, i64* %632
  store i64 %631, i64* %629, align 8, !tbaa !2428
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %633, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %634, %struct.Memory* %589)
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 10
  store i64 %637, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 48
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RDX, align 8, !tbaa !2428
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 52
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = bitcast i32* %R8D to i64*
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 56
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  %660 = load i32, i32* %659
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %654, align 8, !tbaa !2428
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 132
  %664 = load i32, i32* %EAX
  %665 = zext i32 %664 to i64
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 6
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %663 to i32*
  store i32 %664, i32* %668
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 679
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %676 = load i64, i64* %675, align 8, !tbaa !2428
  %677 = add i64 %676, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %672, i64* %678
  store i64 %677, i64* %675, align 8, !tbaa !2428
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %670, i64* %679, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  %681 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %680, %struct.Memory* %635)
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 10
  store i64 %683, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 48
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %687 to i32*
  %691 = load i32, i32* %690
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RDX, align 8, !tbaa !2428
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 52
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = bitcast i32* %R8D to i64*
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 56
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %700, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 136
  %710 = load i32, i32* %EAX
  %711 = zext i32 %710 to i64
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 6
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %709 to i32*
  store i32 %710, i32* %714
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 643
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %722 = load i64, i64* %721, align 8, !tbaa !2428
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %718, i64* %724
  store i64 %723, i64* %721, align 8, !tbaa !2428
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %725, align 8, !tbaa !2428
  %726 = load i64, i64* %PC
  %727 = call %struct.Memory* @sub_400a90_newMat_renamed_(%struct.State* %0, i64 %726, %struct.Memory* %681)
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 10
  store i64 %729, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 140
  %732 = load i32, i32* %EAX
  %733 = zext i32 %732 to i64
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  store i64 %735, i64* %PC
  %736 = inttoptr i64 %731 to i32*
  store i32 %732, i32* %736
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 766
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 5
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %744 = load i64, i64* %743, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %740, i64* %746
  store i64 %745, i64* %743, align 8, !tbaa !2428
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %738, i64* %747, align 8, !tbaa !2428
  %748 = load i64, i64* %PC
  %749 = call %struct.Memory* @sub_400b20_mat_set_init_renamed_(%struct.State* %0, i64 %748, %struct.Memory* %727)
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 10
  store i64 %751, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %RSI
  %753 = load i32, i32* %ESI
  %754 = zext i32 %753 to i64
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 2
  store i64 %756, i64* %PC
  %757 = xor i64 %754, %752
  %758 = trunc i64 %757 to i32
  %759 = and i64 %757, 4294967295
  store i64 %759, i64* %RSI, align 8, !tbaa !2428
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %760, align 1, !tbaa !2432
  %761 = and i32 %758, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #16
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2446
  %767 = icmp eq i32 %758, 0
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %768, i8* %769, align 1, !tbaa !2448
  %770 = lshr i32 %758, 31
  %771 = trunc i32 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %771, i8* %772, align 1, !tbaa !2449
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %773, align 1, !tbaa !2450
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %774, align 1, !tbaa !2447
  %775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 8
  store i64 %777, i64* %PC
  %778 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %779 = bitcast i8* %775 to float*
  store float %778, float* %779, align 1, !tbaa !2452
  %780 = getelementptr inbounds i8, i8* %775, i64 4
  %781 = bitcast i8* %780 to float*
  store float 0.000000e+00, float* %781, align 1, !tbaa !2452
  %782 = getelementptr inbounds i8, i8* %775, i64 8
  %783 = bitcast i8* %782 to float*
  store float 0.000000e+00, float* %783, align 1, !tbaa !2452
  %784 = getelementptr inbounds i8, i8* %775, i64 12
  %785 = bitcast i8* %784 to float*
  store float 0.000000e+00, float* %785, align 1, !tbaa !2452
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 997
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %793 = load i64, i64* %792, align 8, !tbaa !2428
  %794 = add i64 %793, -8
  %795 = inttoptr i64 %794 to i64*
  store i64 %789, i64* %795
  store i64 %794, i64* %792, align 8, !tbaa !2428
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %787, i64* %796, align 8, !tbaa !2428
  %797 = load i64, i64* %PC
  %798 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %797, %struct.Memory* %749)
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 10
  store i64 %800, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %801 = load i64, i64* %RSI
  %802 = load i32, i32* %ESI
  %803 = zext i32 %802 to i64
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 2
  store i64 %805, i64* %PC
  %806 = xor i64 %803, %801
  %807 = trunc i64 %806 to i32
  %808 = and i64 %806, 4294967295
  store i64 %808, i64* %RSI, align 8, !tbaa !2428
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %809, align 1, !tbaa !2432
  %810 = and i32 %807, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2446
  %816 = icmp eq i32 %807, 0
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %817, i8* %818, align 1, !tbaa !2448
  %819 = lshr i32 %807, 31
  %820 = trunc i32 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %820, i8* %821, align 1, !tbaa !2449
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %822, align 1, !tbaa !2450
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %823, align 1, !tbaa !2447
  %824 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %825 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %826 = bitcast %union.vec128_t* %XMM0 to i8*
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = bitcast i8* %825 to i64*
  %830 = load i64, i64* %829, align 1
  %831 = getelementptr inbounds i8, i8* %825, i64 8
  %832 = bitcast i8* %831 to i64*
  %833 = load i64, i64* %832, align 1
  %834 = bitcast i8* %826 to i64*
  %835 = load i64, i64* %834, align 1
  %836 = getelementptr inbounds i8, i8* %826, i64 8
  %837 = bitcast i8* %836 to i64*
  %838 = load i64, i64* %837, align 1
  %839 = xor i64 %835, %830
  %840 = xor i64 %838, %833
  %841 = trunc i64 %839 to i32
  %842 = lshr i64 %839, 32
  %843 = trunc i64 %842 to i32
  %844 = bitcast i8* %824 to i32*
  store i32 %841, i32* %844, align 1, !tbaa !2454
  %845 = getelementptr inbounds i8, i8* %824, i64 4
  %846 = bitcast i8* %845 to i32*
  store i32 %843, i32* %846, align 1, !tbaa !2454
  %847 = trunc i64 %840 to i32
  %848 = getelementptr inbounds i8, i8* %824, i64 8
  %849 = bitcast i8* %848 to i32*
  store i32 %847, i32* %849, align 1, !tbaa !2454
  %850 = lshr i64 %840, 32
  %851 = trunc i64 %850 to i32
  %852 = getelementptr inbounds i8, i8* %824, i64 12
  %853 = bitcast i8* %852 to i32*
  store i32 %851, i32* %853, align 1, !tbaa !2454
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 977
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %861 = load i64, i64* %860, align 8, !tbaa !2428
  %862 = add i64 %861, -8
  %863 = inttoptr i64 %862 to i64*
  store i64 %857, i64* %863
  store i64 %862, i64* %860, align 8, !tbaa !2428
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %864, align 8, !tbaa !2428
  %865 = load i64, i64* %PC
  %866 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %865, %struct.Memory* %798)
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 10
  store i64 %868, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RSI
  %870 = load i32, i32* %ESI
  %871 = zext i32 %870 to i64
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 2
  store i64 %873, i64* %PC
  %874 = xor i64 %871, %869
  %875 = trunc i64 %874 to i32
  %876 = and i64 %874, 4294967295
  store i64 %876, i64* %RSI, align 8, !tbaa !2428
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %877, align 1, !tbaa !2432
  %878 = and i32 %875, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = icmp eq i32 %875, 0
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %885, i8* %886, align 1, !tbaa !2448
  %887 = lshr i32 %875, 31
  %888 = trunc i32 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %888, i8* %889, align 1, !tbaa !2449
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %890, align 1, !tbaa !2450
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %891, align 1, !tbaa !2447
  %892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %894 = bitcast %union.vec128_t* %XMM0 to i8*
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = bitcast i8* %893 to i64*
  %898 = load i64, i64* %897, align 1
  %899 = getelementptr inbounds i8, i8* %893, i64 8
  %900 = bitcast i8* %899 to i64*
  %901 = load i64, i64* %900, align 1
  %902 = bitcast i8* %894 to i64*
  %903 = load i64, i64* %902, align 1
  %904 = getelementptr inbounds i8, i8* %894, i64 8
  %905 = bitcast i8* %904 to i64*
  %906 = load i64, i64* %905, align 1
  %907 = xor i64 %903, %898
  %908 = xor i64 %906, %901
  %909 = trunc i64 %907 to i32
  %910 = lshr i64 %907, 32
  %911 = trunc i64 %910 to i32
  %912 = bitcast i8* %892 to i32*
  store i32 %909, i32* %912, align 1, !tbaa !2454
  %913 = getelementptr inbounds i8, i8* %892, i64 4
  %914 = bitcast i8* %913 to i32*
  store i32 %911, i32* %914, align 1, !tbaa !2454
  %915 = trunc i64 %908 to i32
  %916 = getelementptr inbounds i8, i8* %892, i64 8
  %917 = bitcast i8* %916 to i32*
  store i32 %915, i32* %917, align 1, !tbaa !2454
  %918 = lshr i64 %908, 32
  %919 = trunc i64 %918 to i32
  %920 = getelementptr inbounds i8, i8* %892, i64 12
  %921 = bitcast i8* %920 to i32*
  store i32 %919, i32* %921, align 1, !tbaa !2454
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 957
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %929 = load i64, i64* %928, align 8, !tbaa !2428
  %930 = add i64 %929, -8
  %931 = inttoptr i64 %930 to i64*
  store i64 %925, i64* %931
  store i64 %930, i64* %928, align 8, !tbaa !2428
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %923, i64* %932, align 8, !tbaa !2428
  %933 = load i64, i64* %PC
  %934 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %933, %struct.Memory* %866)
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 10
  store i64 %936, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %937 = load i64, i64* %RSI
  %938 = load i32, i32* %ESI
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 2
  store i64 %941, i64* %PC
  %942 = xor i64 %939, %937
  %943 = trunc i64 %942 to i32
  %944 = and i64 %942, 4294967295
  store i64 %944, i64* %RSI, align 8, !tbaa !2428
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %945, align 1, !tbaa !2432
  %946 = and i32 %943, 255
  %947 = call i32 @llvm.ctpop.i32(i32 %946) #16
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %950, i8* %951, align 1, !tbaa !2446
  %952 = icmp eq i32 %943, 0
  %953 = zext i1 %952 to i8
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %953, i8* %954, align 1, !tbaa !2448
  %955 = lshr i32 %943, 31
  %956 = trunc i32 %955 to i8
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %956, i8* %957, align 1, !tbaa !2449
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %958, align 1, !tbaa !2450
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %959, align 1, !tbaa !2447
  %960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 8
  store i64 %962, i64* %PC
  %963 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %964 = bitcast i8* %960 to float*
  store float %963, float* %964, align 1, !tbaa !2452
  %965 = getelementptr inbounds i8, i8* %960, i64 4
  %966 = bitcast i8* %965 to float*
  store float 0.000000e+00, float* %966, align 1, !tbaa !2452
  %967 = getelementptr inbounds i8, i8* %960, i64 8
  %968 = bitcast i8* %967 to float*
  store float 0.000000e+00, float* %968, align 1, !tbaa !2452
  %969 = getelementptr inbounds i8, i8* %960, i64 12
  %970 = bitcast i8* %969 to float*
  store float 0.000000e+00, float* %970, align 1, !tbaa !2452
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 932
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 5
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 5
  store i64 %976, i64* %PC
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %978 = load i64, i64* %977, align 8, !tbaa !2428
  %979 = add i64 %978, -8
  %980 = inttoptr i64 %979 to i64*
  store i64 %974, i64* %980
  store i64 %979, i64* %977, align 8, !tbaa !2428
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %972, i64* %981, align 8, !tbaa !2428
  %982 = load i64, i64* %PC
  %983 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %982, %struct.Memory* %934)
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 10
  store i64 %985, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  store i64 %987, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 8
  store i64 %990, i64* %PC
  %991 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %992 = bitcast i8* %988 to float*
  store float %991, float* %992, align 1, !tbaa !2452
  %993 = getelementptr inbounds i8, i8* %988, i64 4
  %994 = bitcast i8* %993 to float*
  store float 0.000000e+00, float* %994, align 1, !tbaa !2452
  %995 = getelementptr inbounds i8, i8* %988, i64 8
  %996 = bitcast i8* %995 to float*
  store float 0.000000e+00, float* %996, align 1, !tbaa !2452
  %997 = getelementptr inbounds i8, i8* %988, i64 12
  %998 = bitcast i8* %997 to float*
  store float 0.000000e+00, float* %998, align 1, !tbaa !2452
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 904
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 5
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  store i64 %1004, i64* %PC
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1006 = load i64, i64* %1005, align 8, !tbaa !2428
  %1007 = add i64 %1006, -8
  %1008 = inttoptr i64 %1007 to i64*
  store i64 %1002, i64* %1008
  store i64 %1007, i64* %1005, align 8, !tbaa !2428
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1000, i64* %1009, align 8, !tbaa !2428
  %1010 = load i64, i64* %PC
  %1011 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1010, %struct.Memory* %983)
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 10
  store i64 %1013, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 8
  store i64 %1018, i64* %PC
  %1019 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %1020 = bitcast i8* %1016 to float*
  store float %1019, float* %1020, align 1, !tbaa !2452
  %1021 = getelementptr inbounds i8, i8* %1016, i64 4
  %1022 = bitcast i8* %1021 to float*
  store float 0.000000e+00, float* %1022, align 1, !tbaa !2452
  %1023 = getelementptr inbounds i8, i8* %1016, i64 8
  %1024 = bitcast i8* %1023 to float*
  store float 0.000000e+00, float* %1024, align 1, !tbaa !2452
  %1025 = getelementptr inbounds i8, i8* %1016, i64 12
  %1026 = bitcast i8* %1025 to float*
  store float 0.000000e+00, float* %1026, align 1, !tbaa !2452
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 876
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 5
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1034 = load i64, i64* %1033, align 8, !tbaa !2428
  %1035 = add i64 %1034, -8
  %1036 = inttoptr i64 %1035 to i64*
  store i64 %1030, i64* %1036
  store i64 %1035, i64* %1033, align 8, !tbaa !2428
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1028, i64* %1037, align 8, !tbaa !2428
  %1038 = load i64, i64* %PC
  %1039 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1038, %struct.Memory* %1011)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 10
  store i64 %1041, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 5
  store i64 %1043, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %1044 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 8
  store i64 %1046, i64* %PC
  %1047 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 8) to float*)
  %1048 = bitcast i8* %1044 to float*
  store float %1047, float* %1048, align 1, !tbaa !2452
  %1049 = getelementptr inbounds i8, i8* %1044, i64 4
  %1050 = bitcast i8* %1049 to float*
  store float 0.000000e+00, float* %1050, align 1, !tbaa !2452
  %1051 = getelementptr inbounds i8, i8* %1044, i64 8
  %1052 = bitcast i8* %1051 to float*
  store float 0.000000e+00, float* %1052, align 1, !tbaa !2452
  %1053 = getelementptr inbounds i8, i8* %1044, i64 12
  %1054 = bitcast i8* %1053 to float*
  store float 0.000000e+00, float* %1054, align 1, !tbaa !2452
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 848
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1062 = load i64, i64* %1061, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1058, i64* %1064
  store i64 %1063, i64* %1061, align 8, !tbaa !2428
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1065, align 8, !tbaa !2428
  %1066 = load i64, i64* %PC
  %1067 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1066, %struct.Memory* %1039)
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 10
  store i64 %1069, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1070 = load i64, i64* %RSI
  %1071 = load i32, i32* %ESI
  %1072 = zext i32 %1071 to i64
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 2
  store i64 %1074, i64* %PC
  %1075 = xor i64 %1072, %1070
  %1076 = trunc i64 %1075 to i32
  %1077 = and i64 %1075, 4294967295
  store i64 %1077, i64* %RSI, align 8, !tbaa !2428
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1078, align 1, !tbaa !2432
  %1079 = and i32 %1076, 255
  %1080 = call i32 @llvm.ctpop.i32(i32 %1079) #16
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = xor i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1083, i8* %1084, align 1, !tbaa !2446
  %1085 = icmp eq i32 %1076, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i32 %1076, 31
  %1089 = trunc i32 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1091, align 1, !tbaa !2450
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1092, align 1, !tbaa !2447
  %1093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1094 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1095 = bitcast %union.vec128_t* %XMM0 to i8*
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 3
  store i64 %1097, i64* %PC
  %1098 = bitcast i8* %1094 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %1094, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = bitcast i8* %1095 to i64*
  %1104 = load i64, i64* %1103, align 1
  %1105 = getelementptr inbounds i8, i8* %1095, i64 8
  %1106 = bitcast i8* %1105 to i64*
  %1107 = load i64, i64* %1106, align 1
  %1108 = xor i64 %1104, %1099
  %1109 = xor i64 %1107, %1102
  %1110 = trunc i64 %1108 to i32
  %1111 = lshr i64 %1108, 32
  %1112 = trunc i64 %1111 to i32
  %1113 = bitcast i8* %1093 to i32*
  store i32 %1110, i32* %1113, align 1, !tbaa !2454
  %1114 = getelementptr inbounds i8, i8* %1093, i64 4
  %1115 = bitcast i8* %1114 to i32*
  store i32 %1112, i32* %1115, align 1, !tbaa !2454
  %1116 = trunc i64 %1109 to i32
  %1117 = getelementptr inbounds i8, i8* %1093, i64 8
  %1118 = bitcast i8* %1117 to i32*
  store i32 %1116, i32* %1118, align 1, !tbaa !2454
  %1119 = lshr i64 %1109, 32
  %1120 = trunc i64 %1119 to i32
  %1121 = getelementptr inbounds i8, i8* %1093, i64 12
  %1122 = bitcast i8* %1121 to i32*
  store i32 %1120, i32* %1122, align 1, !tbaa !2454
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 828
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1130 = load i64, i64* %1129, align 8, !tbaa !2428
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1126, i64* %1132
  store i64 %1131, i64* %1129, align 8, !tbaa !2428
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1124, i64* %1133, align 8, !tbaa !2428
  %1134 = load i64, i64* %PC
  %1135 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1134, %struct.Memory* %1067)
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 10
  store i64 %1137, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 5
  store i64 %1139, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1141 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1142 = bitcast %union.vec128_t* %XMM0 to i8*
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 3
  store i64 %1144, i64* %PC
  %1145 = bitcast i8* %1141 to i64*
  %1146 = load i64, i64* %1145, align 1
  %1147 = getelementptr inbounds i8, i8* %1141, i64 8
  %1148 = bitcast i8* %1147 to i64*
  %1149 = load i64, i64* %1148, align 1
  %1150 = bitcast i8* %1142 to i64*
  %1151 = load i64, i64* %1150, align 1
  %1152 = getelementptr inbounds i8, i8* %1142, i64 8
  %1153 = bitcast i8* %1152 to i64*
  %1154 = load i64, i64* %1153, align 1
  %1155 = xor i64 %1151, %1146
  %1156 = xor i64 %1154, %1149
  %1157 = trunc i64 %1155 to i32
  %1158 = lshr i64 %1155, 32
  %1159 = trunc i64 %1158 to i32
  %1160 = bitcast i8* %1140 to i32*
  store i32 %1157, i32* %1160, align 1, !tbaa !2454
  %1161 = getelementptr inbounds i8, i8* %1140, i64 4
  %1162 = bitcast i8* %1161 to i32*
  store i32 %1159, i32* %1162, align 1, !tbaa !2454
  %1163 = trunc i64 %1156 to i32
  %1164 = getelementptr inbounds i8, i8* %1140, i64 8
  %1165 = bitcast i8* %1164 to i32*
  store i32 %1163, i32* %1165, align 1, !tbaa !2454
  %1166 = lshr i64 %1156, 32
  %1167 = trunc i64 %1166 to i32
  %1168 = getelementptr inbounds i8, i8* %1140, i64 12
  %1169 = bitcast i8* %1168 to i32*
  store i32 %1167, i32* %1169, align 1, !tbaa !2454
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 805
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 5
  store i64 %1175, i64* %PC
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1177 = load i64, i64* %1176, align 8, !tbaa !2428
  %1178 = add i64 %1177, -8
  %1179 = inttoptr i64 %1178 to i64*
  store i64 %1173, i64* %1179
  store i64 %1178, i64* %1176, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1171, i64* %1180, align 8, !tbaa !2428
  %1181 = load i64, i64* %PC
  %1182 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1181, %struct.Memory* %1135)
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 10
  store i64 %1184, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1189 = bitcast %union.vec128_t* %XMM0 to i8*
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 3
  store i64 %1191, i64* %PC
  %1192 = bitcast i8* %1188 to i64*
  %1193 = load i64, i64* %1192, align 1
  %1194 = getelementptr inbounds i8, i8* %1188, i64 8
  %1195 = bitcast i8* %1194 to i64*
  %1196 = load i64, i64* %1195, align 1
  %1197 = bitcast i8* %1189 to i64*
  %1198 = load i64, i64* %1197, align 1
  %1199 = getelementptr inbounds i8, i8* %1189, i64 8
  %1200 = bitcast i8* %1199 to i64*
  %1201 = load i64, i64* %1200, align 1
  %1202 = xor i64 %1198, %1193
  %1203 = xor i64 %1201, %1196
  %1204 = trunc i64 %1202 to i32
  %1205 = lshr i64 %1202, 32
  %1206 = trunc i64 %1205 to i32
  %1207 = bitcast i8* %1187 to i32*
  store i32 %1204, i32* %1207, align 1, !tbaa !2454
  %1208 = getelementptr inbounds i8, i8* %1187, i64 4
  %1209 = bitcast i8* %1208 to i32*
  store i32 %1206, i32* %1209, align 1, !tbaa !2454
  %1210 = trunc i64 %1203 to i32
  %1211 = getelementptr inbounds i8, i8* %1187, i64 8
  %1212 = bitcast i8* %1211 to i32*
  store i32 %1210, i32* %1212, align 1, !tbaa !2454
  %1213 = lshr i64 %1203, 32
  %1214 = trunc i64 %1213 to i32
  %1215 = getelementptr inbounds i8, i8* %1187, i64 12
  %1216 = bitcast i8* %1215 to i32*
  store i32 %1214, i32* %1216, align 1, !tbaa !2454
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 782
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %1182)
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 10
  store i64 %1231, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1232 = load i64, i64* %RSI
  %1233 = load i32, i32* %ESI
  %1234 = zext i32 %1233 to i64
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 2
  store i64 %1236, i64* %PC
  %1237 = xor i64 %1234, %1232
  %1238 = trunc i64 %1237 to i32
  %1239 = and i64 %1237, 4294967295
  store i64 %1239, i64* %RSI, align 8, !tbaa !2428
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1240, align 1, !tbaa !2432
  %1241 = and i32 %1238, 255
  %1242 = call i32 @llvm.ctpop.i32(i32 %1241) #16
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = xor i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1245, i8* %1246, align 1, !tbaa !2446
  %1247 = icmp eq i32 %1238, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = lshr i32 %1238, 31
  %1251 = trunc i32 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1253, align 1, !tbaa !2450
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1254, align 1, !tbaa !2447
  %1255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 8
  store i64 %1257, i64* %PC
  %1258 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %1259 = bitcast i8* %1255 to float*
  store float %1258, float* %1259, align 1, !tbaa !2452
  %1260 = getelementptr inbounds i8, i8* %1255, i64 4
  %1261 = bitcast i8* %1260 to float*
  store float 0.000000e+00, float* %1261, align 1, !tbaa !2452
  %1262 = getelementptr inbounds i8, i8* %1255, i64 8
  %1263 = bitcast i8* %1262 to float*
  store float 0.000000e+00, float* %1263, align 1, !tbaa !2452
  %1264 = getelementptr inbounds i8, i8* %1255, i64 12
  %1265 = bitcast i8* %1264 to float*
  store float 0.000000e+00, float* %1265, align 1, !tbaa !2452
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 757
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1277, %struct.Memory* %1229)
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 10
  store i64 %1280, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 5
  store i64 %1282, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 8
  store i64 %1285, i64* %PC
  %1286 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %1287 = bitcast i8* %1283 to float*
  store float %1286, float* %1287, align 1, !tbaa !2452
  %1288 = getelementptr inbounds i8, i8* %1283, i64 4
  %1289 = bitcast i8* %1288 to float*
  store float 0.000000e+00, float* %1289, align 1, !tbaa !2452
  %1290 = getelementptr inbounds i8, i8* %1283, i64 8
  %1291 = bitcast i8* %1290 to float*
  store float 0.000000e+00, float* %1291, align 1, !tbaa !2452
  %1292 = getelementptr inbounds i8, i8* %1283, i64 12
  %1293 = bitcast i8* %1292 to float*
  store float 0.000000e+00, float* %1293, align 1, !tbaa !2452
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 729
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1301 = load i64, i64* %1300, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1297, i64* %1303
  store i64 %1302, i64* %1300, align 8, !tbaa !2428
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1295, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %PC
  %1306 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1305, %struct.Memory* %1278)
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 10
  store i64 %1308, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 5
  store i64 %1310, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 8
  store i64 %1313, i64* %PC
  %1314 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 4) to float*)
  %1315 = bitcast i8* %1311 to float*
  store float %1314, float* %1315, align 1, !tbaa !2452
  %1316 = getelementptr inbounds i8, i8* %1311, i64 4
  %1317 = bitcast i8* %1316 to float*
  store float 0.000000e+00, float* %1317, align 1, !tbaa !2452
  %1318 = getelementptr inbounds i8, i8* %1311, i64 8
  %1319 = bitcast i8* %1318 to float*
  store float 0.000000e+00, float* %1319, align 1, !tbaa !2452
  %1320 = getelementptr inbounds i8, i8* %1311, i64 12
  %1321 = bitcast i8* %1320 to float*
  store float 0.000000e+00, float* %1321, align 1, !tbaa !2452
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 701
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 5
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  store i64 %1327, i64* %PC
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1329 = load i64, i64* %1328, align 8, !tbaa !2428
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1325, i64* %1331
  store i64 %1330, i64* %1328, align 8, !tbaa !2428
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1323, i64* %1332, align 8, !tbaa !2428
  %1333 = load i64, i64* %PC
  %1334 = call %struct.Memory* @sub_400c20_mat_set_renamed_(%struct.State* %0, i64 %1333, %struct.Memory* %1306)
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 10
  store i64 %1336, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RSI, align 8, !tbaa !2428
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 10
  store i64 %1338, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDX, align 8, !tbaa !2428
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 10
  store i64 %1340, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RCX, align 8, !tbaa !2428
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 10
  store i64 %1342, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %R8, align 8, !tbaa !2428
  %1343 = load i64, i64* %PC
  %1344 = add i64 %1343, 10
  store i64 %1344, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %R9, align 8, !tbaa !2428
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 10
  store i64 %1346, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 10
  store i64 %1348, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %R10, align 8, !tbaa !2428
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 32
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 7
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to i32*
  store i32 64, i32* %1353
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 32
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 3
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i32*
  %1359 = load i32, i32* %1358
  %1360 = zext i32 %1359 to i64
  store i64 %1360, i64* %RAX, align 8, !tbaa !2428
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 152
  %1363 = load i64, i64* %RDI
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 7
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1362 to i64*
  store i64 %1363, i64* %1366
  %1367 = load i32, i32* %EAX
  %1368 = zext i32 %1367 to i64
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 2
  store i64 %1370, i64* %PC
  %1371 = and i64 %1368, 4294967295
  store i64 %1371, i64* %RDI, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 152
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 7
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i64*
  %1377 = load i64, i64* %1376
  store i64 %1377, i64* %R11, align 8, !tbaa !2428
  %1378 = load i64, i64* %RSP
  %1379 = load i64, i64* %R11
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1378 to i64*
  store i64 %1379, i64* %1382
  %1383 = load i64, i64* %RSP
  %1384 = add i64 %1383, 8
  %1385 = load i64, i64* %R10
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1384 to i64*
  store i64 %1385, i64* %1388
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 815
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1396 = load i64, i64* %1395, align 8, !tbaa !2428
  %1397 = add i64 %1396, -8
  %1398 = inttoptr i64 %1397 to i64*
  store i64 %1392, i64* %1398
  store i64 %1397, i64* %1395, align 8, !tbaa !2428
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1390, i64* %1399, align 8, !tbaa !2428
  %1400 = load i64, i64* %PC
  %1401 = call %struct.Memory* @sub_400d00_jacobi_renamed_(%struct.State* %0, i64 %1400, %struct.Memory* %1334)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 10
  store i64 %1403, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 104), i64* %RDI, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 72
  %1406 = bitcast %union.vec128_t* %XMM0 to i8*
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = bitcast i8* %1406 to <2 x float>*
  %1410 = load <2 x float>, <2 x float>* %1409, align 1
  %1411 = extractelement <2 x float> %1410, i32 0
  %1412 = inttoptr i64 %1405 to float*
  store float %1411, float* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 32
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RSI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 2
  store i64 %1421, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1178
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @ext_400550_printf(%struct.State* %0, i64 %1433, %struct.Memory* %1401)
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 10
  store i64 %1436, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 133), i64* %RDI, align 8, !tbaa !2428
  %1437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 72
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 5
  store i64 %1441, i64* %PC
  %1442 = inttoptr i64 %1439 to float*
  %1443 = load float, float* %1442
  %1444 = fpext float %1443 to double
  %1445 = bitcast i8* %1437 to double*
  store double %1444, double* %1445, align 1, !tbaa !2455
  %1446 = load i64, i64* %RBP
  %1447 = sub i64 %1446, 156
  %1448 = load i32, i32* %EAX
  %1449 = zext i32 %1448 to i64
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 6
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1447 to i32*
  store i32 %1448, i32* %1452
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 2
  store i64 %1454, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1455 = load i64, i64* %PC
  %1456 = sub i64 %1455, 1206
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 5
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1462 = load i64, i64* %1461, align 8, !tbaa !2428
  %1463 = add i64 %1462, -8
  %1464 = inttoptr i64 %1463 to i64*
  store i64 %1458, i64* %1464
  store i64 %1463, i64* %1461, align 8, !tbaa !2428
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1456, i64* %1465, align 8, !tbaa !2428
  %1466 = load i64, i64* %PC
  %1467 = call %struct.Memory* @ext_400550_printf(%struct.State* %0, i64 %1466, %struct.Memory* %1434)
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 10
  store i64 %1469, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %1470 = load i64, i64* %RBP
  %1471 = sub i64 %1470, 160
  %1472 = load i32, i32* %EAX
  %1473 = zext i32 %1472 to i64
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 6
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1471 to i32*
  store i32 %1472, i32* %1476
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 3973
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 5
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 5
  store i64 %1482, i64* %PC
  %1483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1484 = load i64, i64* %1483, align 8, !tbaa !2428
  %1485 = add i64 %1484, -8
  %1486 = inttoptr i64 %1485 to i64*
  store i64 %1480, i64* %1486
  store i64 %1485, i64* %1483, align 8, !tbaa !2428
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1478, i64* %1487, align 8, !tbaa !2428
  %1488 = load i64, i64* %PC
  %1489 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1488, %struct.Memory* %1467)
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 10
  store i64 %1491, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3958
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 5
  store i64 %1497, i64* %PC
  %1498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1499 = load i64, i64* %1498, align 8, !tbaa !2428
  %1500 = add i64 %1499, -8
  %1501 = inttoptr i64 %1500 to i64*
  store i64 %1495, i64* %1501
  store i64 %1500, i64* %1498, align 8, !tbaa !2428
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1493, i64* %1502, align 8, !tbaa !2428
  %1503 = load i64, i64* %PC
  %1504 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1503, %struct.Memory* %1489)
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 10
  store i64 %1506, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 3943
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 5
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  store i64 %1512, i64* %PC
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1514 = load i64, i64* %1513, align 8, !tbaa !2428
  %1515 = add i64 %1514, -8
  %1516 = inttoptr i64 %1515 to i64*
  store i64 %1510, i64* %1516
  store i64 %1515, i64* %1513, align 8, !tbaa !2428
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1508, i64* %1517, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1518, %struct.Memory* %1504)
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 10
  store i64 %1521, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 3928
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1529 = load i64, i64* %1528, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1525, i64* %1531
  store i64 %1530, i64* %1528, align 8, !tbaa !2428
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1523, i64* %1532, align 8, !tbaa !2428
  %1533 = load i64, i64* %PC
  %1534 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1533, %struct.Memory* %1519)
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 10
  store i64 %1536, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 3913
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 5
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 5
  store i64 %1542, i64* %PC
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1544 = load i64, i64* %1543, align 8, !tbaa !2428
  %1545 = add i64 %1544, -8
  %1546 = inttoptr i64 %1545 to i64*
  store i64 %1540, i64* %1546
  store i64 %1545, i64* %1543, align 8, !tbaa !2428
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1538, i64* %1547, align 8, !tbaa !2428
  %1548 = load i64, i64* %PC
  %1549 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1548, %struct.Memory* %1534)
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 10
  store i64 %1551, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 3898
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 5
  %1556 = load i64, i64* %PC
  %1557 = add i64 %1556, 5
  store i64 %1557, i64* %PC
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1559 = load i64, i64* %1558, align 8, !tbaa !2428
  %1560 = add i64 %1559, -8
  %1561 = inttoptr i64 %1560 to i64*
  store i64 %1555, i64* %1561
  store i64 %1560, i64* %1558, align 8, !tbaa !2428
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1553, i64* %1562, align 8, !tbaa !2428
  %1563 = load i64, i64* %PC
  %1564 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1563, %struct.Memory* %1549)
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 10
  store i64 %1566, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 3883
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 5
  store i64 %1572, i64* %PC
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1574 = load i64, i64* %1573, align 8, !tbaa !2428
  %1575 = add i64 %1574, -8
  %1576 = inttoptr i64 %1575 to i64*
  store i64 %1570, i64* %1576
  store i64 %1575, i64* %1573, align 8, !tbaa !2428
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1568, i64* %1577, align 8, !tbaa !2428
  %1578 = load i64, i64* %PC
  %1579 = call %struct.Memory* @sub_4019a0_clearMat_renamed_(%struct.State* %0, i64 %1578, %struct.Memory* %1564)
  %1580 = load i64, i64* %RAX
  %1581 = load i32, i32* %EAX
  %1582 = zext i32 %1581 to i64
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 2
  store i64 %1584, i64* %PC
  %1585 = xor i64 %1582, %1580
  %1586 = trunc i64 %1585 to i32
  %1587 = and i64 %1585, 4294967295
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1588, align 1, !tbaa !2432
  %1589 = and i32 %1586, 255
  %1590 = call i32 @llvm.ctpop.i32(i32 %1589) #16
  %1591 = trunc i32 %1590 to i8
  %1592 = and i8 %1591, 1
  %1593 = xor i8 %1592, 1
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1593, i8* %1594, align 1, !tbaa !2446
  %1595 = icmp eq i32 %1586, 0
  %1596 = zext i1 %1595 to i8
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1596, i8* %1597, align 1, !tbaa !2448
  %1598 = lshr i32 %1586, 31
  %1599 = trunc i32 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1599, i8* %1600, align 1, !tbaa !2449
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1601, align 1, !tbaa !2450
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1602, align 1, !tbaa !2447
  %1603 = load i64, i64* %RSP
  %1604 = load i64, i64* %PC
  %1605 = add i64 %1604, 7
  store i64 %1605, i64* %PC
  %1606 = add i64 176, %1603
  store i64 %1606, i64* %RSP, align 8, !tbaa !2428
  %1607 = icmp ult i64 %1606, %1603
  %1608 = icmp ult i64 %1606, 176
  %1609 = or i1 %1607, %1608
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1610, i8* %1611, align 1, !tbaa !2432
  %1612 = trunc i64 %1606 to i32
  %1613 = and i32 %1612, 255
  %1614 = call i32 @llvm.ctpop.i32(i32 %1613) #16
  %1615 = trunc i32 %1614 to i8
  %1616 = and i8 %1615, 1
  %1617 = xor i8 %1616, 1
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1617, i8* %1618, align 1, !tbaa !2446
  %1619 = xor i64 176, %1603
  %1620 = xor i64 %1619, %1606
  %1621 = lshr i64 %1620, 4
  %1622 = trunc i64 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1623, i8* %1624, align 1, !tbaa !2447
  %1625 = icmp eq i64 %1606, 0
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1626, i8* %1627, align 1, !tbaa !2448
  %1628 = lshr i64 %1606, 63
  %1629 = trunc i64 %1628 to i8
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1629, i8* %1630, align 1, !tbaa !2449
  %1631 = lshr i64 %1603, 63
  %1632 = xor i64 %1628, %1631
  %1633 = add nuw nsw i64 %1632, %1628
  %1634 = icmp eq i64 %1633, 2
  %1635 = zext i1 %1634 to i8
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1635, i8* %1636, align 1, !tbaa !2450
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 1
  store i64 %1638, i64* %PC
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1640 = load i64, i64* %1639, align 8, !tbaa !2428
  %1641 = add i64 %1640, 8
  %1642 = inttoptr i64 %1640 to i64*
  %1643 = load i64, i64* %1642
  store i64 %1643, i64* %RBP, align 8, !tbaa !2428
  store i64 %1641, i64* %1639, align 8, !tbaa !2428
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 1
  store i64 %1645, i64* %PC
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1648 = load i64, i64* %1647, align 8, !tbaa !2428
  %1649 = inttoptr i64 %1648 to i64*
  %1650 = load i64, i64* %1649
  store i64 %1650, i64* %1646, align 8, !tbaa !2428
  %1651 = add i64 %1648, 8
  store i64 %1651, i64* %1647, align 8, !tbaa !2428
  ret %struct.Memory* %1579
}

; Function Attrs: noinline
define %struct.Memory* @sub_400518__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400518:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40052a, label %block_400528

block_400528:                                     ; preds = %block_400518
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40052a

block_40052a:                                     ; preds = %block_400528, %block_400518
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400518 ], [ %92, %block_400528 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c90_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2432
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2446
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2447
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2448
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2449
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 16
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %RAX
  %89 = load i32, i32* %EAX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2432
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2446
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2450
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2447
  %111 = load i32, i32* %EAX
  %112 = zext i32 %111 to i64
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 2
  store i64 %114, i64* %PC
  %115 = and i64 %112, 4294967295
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = sub i64 %116, 5952
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %123 = load i64, i64* %122, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %119, i64* %125
  store i64 %124, i64* %122, align 8, !tbaa !2428
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %126, align 8, !tbaa !2428
  %127 = load i64, i64* %PC
  %128 = call %struct.Memory* @ext_400560_gettimeofday(%struct.State* %0, i64 %127, %struct.Memory* %2)
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 8
  store i64 %130, i64* %PC
  %131 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %132, align 1, !tbaa !2432
  %133 = and i32 %131, 255
  %134 = call i32 @llvm.ctpop.i32(i32 %133) #16
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %137, i8* %138, align 1, !tbaa !2446
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %139, align 1, !tbaa !2447
  %140 = icmp eq i32 %131, 0
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %141, i8* %142, align 1, !tbaa !2448
  %143 = lshr i32 %131, 31
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %144, i8* %145, align 1, !tbaa !2449
  %146 = lshr i32 %131, 31
  %147 = xor i32 %143, %146
  %148 = add nuw nsw i32 %147, %146
  %149 = icmp eq i32 %148, 2
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %150, i8* %151, align 1, !tbaa !2450
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 28
  %154 = load i32, i32* %EAX
  %155 = zext i32 %154 to i64
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %153 to i32*
  store i32 %154, i32* %158
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 59
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 6
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 6
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %166 = load i8, i8* %165, align 1, !tbaa !2448
  %167 = icmp eq i8 %166, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %170 = select i1 %167, i64 %160, i64 %162
  store i64 %170, i64* %169, align 8, !tbaa !2428
  %171 = load i8, i8* %BRANCH_TAKEN
  %172 = icmp eq i8 %171, 1
  br i1 %172, label %block_401ceb, label %block_401cb6

block_401ceb:                                     ; preds = %block_401cb6, %block_401c90
  %MEMORY.0 = phi %struct.Memory* [ %128, %block_401c90 ], [ %128, %block_401cb6 ]
  %173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 8
  store i64 %175, i64* %PC
  %176 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 32) to double*)
  %177 = bitcast i8* %173 to double*
  store double %176, double* %177, align 1, !tbaa !2455
  %178 = getelementptr inbounds i8, i8* %173, i64 8
  %179 = bitcast i8* %178 to double*
  store double 0.000000e+00, double* %179, align 1, !tbaa !2455
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 16
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 8
  store i64 %187, i64* %PC
  %188 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %189 = sext i32 %188 to i64
  store i64 %189, i64* %RCX, align 8, !tbaa !2428
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RCX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = sub i64 %190, %191
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = icmp ult i64 %190, %191
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %196, i8* %197, align 1, !tbaa !2432
  %198 = trunc i64 %194 to i32
  %199 = and i32 %198, 255
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #16
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %203, i8* %204, align 1, !tbaa !2446
  %205 = xor i64 %191, %190
  %206 = xor i64 %205, %194
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %209, i8* %210, align 1, !tbaa !2447
  %211 = icmp eq i64 %194, 0
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %212, i8* %213, align 1, !tbaa !2448
  %214 = lshr i64 %194, 63
  %215 = trunc i64 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %215, i8* %216, align 1, !tbaa !2449
  %217 = lshr i64 %190, 63
  %218 = lshr i64 %191, 63
  %219 = xor i64 %218, %217
  %220 = xor i64 %214, %217
  %221 = add nuw nsw i64 %220, %219
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %223, i8* %224, align 1, !tbaa !2450
  %225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  store i64 %228, i64* %PC
  %229 = sitofp i64 %226 to double
  %230 = bitcast i8* %225 to double*
  store double %229, double* %230, align 1, !tbaa !2455
  %231 = load i64, i64* %RBP
  %232 = sub i64 %231, 8
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 4
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 8
  store i64 %238, i64* %PC
  %239 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %240 = sext i32 %239 to i64
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %RCX
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = sub i64 %241, %242
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = icmp ult i64 %241, %242
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %247, i8* %248, align 1, !tbaa !2432
  %249 = trunc i64 %245 to i32
  %250 = and i32 %249, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 %242, %241
  %257 = xor i64 %256, %245
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = icmp eq i64 %245, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2448
  %265 = lshr i64 %245, 63
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = lshr i64 %241, 63
  %269 = lshr i64 %242, 63
  %270 = xor i64 %269, %268
  %271 = xor i64 %265, %268
  %272 = add nuw nsw i64 %271, %270
  %273 = icmp eq i64 %272, 2
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %274, i8* %275, align 1, !tbaa !2450
  %276 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %277 = load i64, i64* %RAX
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC
  %280 = sitofp i64 %277 to double
  %281 = bitcast i8* %276 to double*
  store double %280, double* %281, align 1, !tbaa !2455
  %282 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %283 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %284 = bitcast %union.vec128_t* %XMM0 to i8*
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = bitcast i8* %283 to double*
  %288 = load double, double* %287, align 1
  %289 = getelementptr inbounds i8, i8* %283, i64 8
  %290 = bitcast i8* %289 to i64*
  %291 = load i64, i64* %290, align 1
  %292 = bitcast i8* %284 to double*
  %293 = load double, double* %292, align 1
  %294 = fdiv double %288, %293
  %295 = bitcast i8* %282 to double*
  store double %294, double* %295, align 1, !tbaa !2455
  %296 = getelementptr inbounds i8, i8* %282, i64 8
  %297 = bitcast i8* %296 to i64*
  store i64 %291, i64* %297, align 1, !tbaa !2455
  %298 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %299 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %300 = bitcast %union.vec128_t* %XMM2 to i8*
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = bitcast i8* %299 to double*
  %304 = load double, double* %303, align 1
  %305 = getelementptr inbounds i8, i8* %299, i64 8
  %306 = bitcast i8* %305 to i64*
  %307 = load i64, i64* %306, align 1
  %308 = bitcast i8* %300 to double*
  %309 = load double, double* %308, align 1
  %310 = fadd double %304, %309
  %311 = bitcast i8* %298 to double*
  store double %310, double* %311, align 1, !tbaa !2455
  %312 = getelementptr inbounds i8, i8* %298, i64 8
  %313 = bitcast i8* %312 to i64*
  store i64 %307, i64* %313, align 1, !tbaa !2455
  %314 = load i64, i64* %RBP
  %315 = sub i64 %314, 24
  %316 = bitcast %union.vec128_t* %XMM1 to i8*
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = bitcast i8* %316 to double*
  %320 = load double, double* %319, align 1
  %321 = inttoptr i64 %315 to double*
  store double %320, double* %321
  br label %block_401d28

block_401d28:                                     ; preds = %block_401cc4, %block_401ceb
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401ceb ], [ %128, %block_401cc4 ]
  %322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 24
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 5
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to double*
  %328 = load double, double* %327
  %329 = bitcast i8* %322 to double*
  store double %328, double* %329, align 1, !tbaa !2455
  %330 = getelementptr inbounds i8, i8* %322, i64 8
  %331 = bitcast i8* %330 to double*
  store double 0.000000e+00, double* %331, align 1, !tbaa !2455
  %332 = load i64, i64* %RSP
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = add i64 32, %332
  store i64 %335, i64* %RSP, align 8, !tbaa !2428
  %336 = icmp ult i64 %335, %332
  %337 = icmp ult i64 %335, 32
  %338 = or i1 %336, %337
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %339, i8* %340, align 1, !tbaa !2432
  %341 = trunc i64 %335 to i32
  %342 = and i32 %341, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2446
  %348 = xor i64 32, %332
  %349 = xor i64 %348, %335
  %350 = lshr i64 %349, 4
  %351 = trunc i64 %350 to i8
  %352 = and i8 %351, 1
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %352, i8* %353, align 1, !tbaa !2447
  %354 = icmp eq i64 %335, 0
  %355 = zext i1 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %355, i8* %356, align 1, !tbaa !2448
  %357 = lshr i64 %335, 63
  %358 = trunc i64 %357 to i8
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %358, i8* %359, align 1, !tbaa !2449
  %360 = lshr i64 %332, 63
  %361 = xor i64 %357, %360
  %362 = add nuw nsw i64 %361, %357
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %364, i8* %365, align 1, !tbaa !2450
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 1
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %369 = load i64, i64* %368, align 8, !tbaa !2428
  %370 = add i64 %369, 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %RBP, align 8, !tbaa !2428
  store i64 %370, i64* %368, align 8, !tbaa !2428
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 1
  store i64 %374, i64* %PC
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %377 = load i64, i64* %376, align 8, !tbaa !2428
  %378 = inttoptr i64 %377 to i64*
  %379 = load i64, i64* %378
  store i64 %379, i64* %375, align 8, !tbaa !2428
  %380 = add i64 %377, 8
  store i64 %380, i64* %376, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401cb6:                                     ; preds = %block_401c90
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 8
  store i64 %382, i64* %PC
  %383 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %384, align 1, !tbaa !2432
  %385 = and i32 %383, 255
  %386 = call i32 @llvm.ctpop.i32(i32 %385) #16
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %389, i8* %390, align 1, !tbaa !2446
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %391, align 1, !tbaa !2447
  %392 = icmp eq i32 %383, 0
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %393, i8* %394, align 1, !tbaa !2448
  %395 = lshr i32 %383, 31
  %396 = trunc i32 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %396, i8* %397, align 1, !tbaa !2449
  %398 = lshr i32 %383, 31
  %399 = xor i32 %395, %398
  %400 = add nuw nsw i32 %399, %398
  %401 = icmp eq i32 %400, 2
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %402, i8* %403, align 1, !tbaa !2450
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 45
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 6
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 6
  store i64 %409, i64* %PC
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %411 = load i8, i8* %410, align 1, !tbaa !2448
  %412 = icmp eq i8 %411, 0
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %415 = select i1 %412, i64 %405, i64 %407
  store i64 %415, i64* %414, align 8, !tbaa !2428
  %416 = load i8, i8* %BRANCH_TAKEN
  %417 = icmp eq i8 %416, 1
  br i1 %417, label %block_401ceb, label %block_401cc4

block_401cc4:                                     ; preds = %block_401cb6
  %418 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %419 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %420 = bitcast %union.vec128_t* %XMM0 to i8*
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = bitcast i8* %419 to i64*
  %424 = load i64, i64* %423, align 1
  %425 = getelementptr inbounds i8, i8* %419, i64 8
  %426 = bitcast i8* %425 to i64*
  %427 = load i64, i64* %426, align 1
  %428 = bitcast i8* %420 to i64*
  %429 = load i64, i64* %428, align 1
  %430 = getelementptr inbounds i8, i8* %420, i64 8
  %431 = bitcast i8* %430 to i64*
  %432 = load i64, i64* %431, align 1
  %433 = xor i64 %429, %424
  %434 = xor i64 %432, %427
  %435 = trunc i64 %433 to i32
  %436 = lshr i64 %433, 32
  %437 = trunc i64 %436 to i32
  %438 = bitcast i8* %418 to i32*
  store i32 %435, i32* %438, align 1, !tbaa !2454
  %439 = getelementptr inbounds i8, i8* %418, i64 4
  %440 = bitcast i8* %439 to i32*
  store i32 %437, i32* %440, align 1, !tbaa !2454
  %441 = trunc i64 %434 to i32
  %442 = getelementptr inbounds i8, i8* %418, i64 8
  %443 = bitcast i8* %442 to i32*
  store i32 %441, i32* %443, align 1, !tbaa !2454
  %444 = lshr i64 %434, 32
  %445 = trunc i64 %444 to i32
  %446 = getelementptr inbounds i8, i8* %418, i64 12
  %447 = bitcast i8* %446 to i32*
  store i32 %445, i32* %447, align 1, !tbaa !2454
  %448 = load i64, i64* %RBP
  %449 = sub i64 %448, 16
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 4
  store i64 %451, i64* %PC
  %452 = inttoptr i64 %449 to i64*
  %453 = load i64, i64* %452
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = load i32, i32* %EAX
  %455 = zext i32 %454 to i64
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 2
  store i64 %457, i64* %PC
  %458 = and i64 %455, 4294967295
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = load i32, i32* %ECX
  %460 = zext i32 %459 to i64
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC
  store i32 %459, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 8
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i64*
  %468 = load i64, i64* %467
  store i64 %468, i64* %RAX, align 8, !tbaa !2428
  %469 = load i32, i32* %EAX
  %470 = zext i32 %469 to i64
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 2
  store i64 %472, i64* %PC
  %473 = and i64 %470, 4294967295
  store i64 %473, i64* %RCX, align 8, !tbaa !2428
  %474 = load i32, i32* %ECX
  %475 = zext i32 %474 to i64
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 7
  store i64 %477, i64* %PC
  store i32 %474, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 24
  %480 = bitcast %union.vec128_t* %XMM0 to i8*
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 5
  store i64 %482, i64* %PC
  %483 = bitcast i8* %480 to double*
  %484 = load double, double* %483, align 1
  %485 = inttoptr i64 %479 to double*
  store double %484, double* %485
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 66
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 5
  store i64 %489, i64* %PC
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %487, i64* %490, align 8, !tbaa !2428
  br label %block_401d28
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a10_fflop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a10:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 8
  store i64 %48, i64* %PC
  %49 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 16) to double*)
  %50 = bitcast i8* %46 to double*
  store double %49, double* %50, align 1, !tbaa !2455
  %51 = getelementptr inbounds i8, i8* %46, i64 8
  %52 = bitcast i8* %51 to double*
  store double 0.000000e+00, double* %52, align 1, !tbaa !2455
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i32, i32* %EDI
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i32, i32* %ESI
  %63 = zext i32 %62 to i64
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 12
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RDX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = trunc i64 %81 to i32
  %85 = sub i32 %84, 2
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp ult i32 %84, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %85, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = xor i64 2, %81
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %97, %85
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i32 %85, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = lshr i32 %85, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = lshr i32 %84, 31
  %110 = xor i32 %106, %109
  %111 = add nuw nsw i32 %110, %109
  %112 = icmp eq i32 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %116 = load i32, i32* %EDX
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = sitofp i32 %116 to double
  %121 = bitcast i8* %115 to double*
  store double %120, double* %121, align 1, !tbaa !2455
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = trunc i64 %129 to i32
  %133 = sub i32 %132, 2
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RDX, align 8, !tbaa !2428
  %135 = icmp ult i32 %132, 2
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2432
  %138 = and i32 %133, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2446
  %144 = xor i64 2, %129
  %145 = trunc i64 %144 to i32
  %146 = xor i32 %145, %133
  %147 = lshr i32 %146, 4
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2447
  %151 = icmp eq i32 %133, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2448
  %154 = lshr i32 %133, 31
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = lshr i32 %132, 31
  %158 = xor i32 %154, %157
  %159 = add nuw nsw i32 %158, %157
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2450
  %163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %164 = load i32, i32* %EDX
  %165 = zext i32 %164 to i64
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = sitofp i32 %164 to double
  %169 = bitcast i8* %163 to double*
  store double %168, double* %169, align 1, !tbaa !2455
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %172 = bitcast %union.vec128_t* %XMM2 to i8*
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = bitcast i8* %171 to double*
  %176 = load double, double* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 8
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = bitcast i8* %172 to double*
  %181 = load double, double* %180, align 1
  %182 = fmul double %176, %181
  %183 = bitcast i8* %170 to double*
  store double %182, double* %183, align 1, !tbaa !2455
  %184 = getelementptr inbounds i8, i8* %170, i64 8
  %185 = bitcast i8* %184 to i64*
  store i64 %179, i64* %185, align 1, !tbaa !2455
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 4
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RDX, align 8, !tbaa !2428
  %193 = load i64, i64* %RDX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = trunc i64 %193 to i32
  %197 = sub i32 %196, 2
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDX, align 8, !tbaa !2428
  %199 = icmp ult i32 %196, 2
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2432
  %202 = and i32 %197, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i64 2, %193
  %209 = trunc i64 %208 to i32
  %210 = xor i32 %209, %197
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2447
  %215 = icmp eq i32 %197, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2448
  %218 = lshr i32 %197, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2449
  %221 = lshr i32 %196, 31
  %222 = xor i32 %218, %221
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2450
  %227 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %228 = load i32, i32* %EDX
  %229 = zext i32 %228 to i64
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = sitofp i32 %228 to double
  %233 = bitcast i8* %227 to double*
  store double %232, double* %233, align 1, !tbaa !2455
  %234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %236 = bitcast %union.vec128_t* %XMM2 to i8*
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC
  %239 = bitcast i8* %235 to double*
  %240 = load double, double* %239, align 1
  %241 = getelementptr inbounds i8, i8* %235, i64 8
  %242 = bitcast i8* %241 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = bitcast i8* %236 to double*
  %245 = load double, double* %244, align 1
  %246 = fmul double %240, %245
  %247 = bitcast i8* %234 to double*
  store double %246, double* %247, align 1, !tbaa !2455
  %248 = getelementptr inbounds i8, i8* %234, i64 8
  %249 = bitcast i8* %248 to i64*
  store i64 %243, i64* %249, align 1, !tbaa !2455
  %250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = bitcast i8* %251 to double*
  %256 = load double, double* %255, align 1
  %257 = getelementptr inbounds i8, i8* %251, i64 8
  %258 = bitcast i8* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = bitcast i8* %252 to double*
  %261 = load double, double* %260, align 1
  %262 = fmul double %256, %261
  %263 = bitcast i8* %250 to double*
  store double %262, double* %263, align 1, !tbaa !2455
  %264 = getelementptr inbounds i8, i8* %250, i64 8
  %265 = bitcast i8* %264 to i64*
  store i64 %259, i64* %265, align 1, !tbaa !2455
  %266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %267 = bitcast %union.vec128_t* %XMM1 to i8*
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  %270 = bitcast i8* %267 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 1
  %272 = getelementptr inbounds i8, i8* %267, i64 8
  %273 = bitcast i8* %272 to <2 x i32>*
  %274 = load <2 x i32>, <2 x i32>* %273, align 1
  %275 = extractelement <2 x i32> %271, i32 0
  %276 = bitcast i8* %266 to i32*
  store i32 %275, i32* %276, align 1, !tbaa !2452
  %277 = extractelement <2 x i32> %271, i32 1
  %278 = getelementptr inbounds i8, i8* %266, i64 4
  %279 = bitcast i8* %278 to i32*
  store i32 %277, i32* %279, align 1, !tbaa !2452
  %280 = extractelement <2 x i32> %274, i32 0
  %281 = getelementptr inbounds i8, i8* %266, i64 8
  %282 = bitcast i8* %281 to i32*
  store i32 %280, i32* %282, align 1, !tbaa !2452
  %283 = extractelement <2 x i32> %274, i32 1
  %284 = getelementptr inbounds i8, i8* %266, i64 12
  %285 = bitcast i8* %284 to i32*
  store i32 %283, i32* %285, align 1, !tbaa !2452
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RBP, align 8, !tbaa !2428
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %295, align 8, !tbaa !2428
  %300 = add i64 %297, 8
  store i64 %300, i64* %296, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401db4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401db4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b20_mat_set_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b20:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %36 to %"class.std::bitset"*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %38 to %union.vec128_t*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = load i64, i64* %RBP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 12
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61
  br label %block_400b2f

block_400b3f:                                     ; preds = %block_400b2f
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 16
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %63 to i32*
  store i32 0, i32* %66
  br label %block_400b46

block_400b5d:                                     ; preds = %block_400b56, %block_400b6d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400b56 ], [ %MEMORY.0, %block_400b6d ]
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 20
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = zext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 8
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %RCX, align 8, !tbaa !2428
  %80 = load i32, i32* %EAX
  %81 = zext i32 %80 to i64
  %82 = load i64, i64* %RCX
  %83 = add i64 %82, 20
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = sub i32 %80, %87
  %89 = icmp ult i32 %80, %87
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %90, i8* %91, align 1, !tbaa !2432
  %92 = and i32 %88, 255
  %93 = call i32 @llvm.ctpop.i32(i32 %92) #16
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %96, i8* %97, align 1, !tbaa !2446
  %98 = xor i32 %87, %80
  %99 = xor i32 %98, %88
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = icmp eq i32 %88, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = lshr i32 %88, 31
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2449
  %110 = lshr i32 %80, 31
  %111 = lshr i32 %87, 31
  %112 = xor i32 %111, %110
  %113 = xor i32 %107, %110
  %114 = add nuw nsw i32 %113, %112
  %115 = icmp eq i32 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 138
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 6
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 6
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %125 = load i8, i8* %124, align 1, !tbaa !2449
  %126 = icmp ne i8 %125, 0
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %128 = load i8, i8* %127, align 1, !tbaa !2450
  %129 = icmp ne i8 %128, 0
  %130 = xor i1 %126, %129
  %131 = xor i1 %130, true
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %134 = select i1 %130, i64 %121, i64 %119
  store i64 %134, i64* %133, align 8, !tbaa !2428
  %135 = load i8, i8* %BRANCH_TAKEN
  %136 = icmp eq i8 %135, 1
  br i1 %136, label %block_400bf1, label %block_400b6d

block_400bf1:                                     ; preds = %block_400b5d
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %138, i64* %141, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 16
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %RAX, align 8, !tbaa !2428
  %149 = load i64, i64* %RAX
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC
  %152 = trunc i64 %149 to i32
  %153 = add i32 1, %152
  %154 = zext i32 %153 to i64
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = icmp ult i32 %153, %152
  %156 = icmp ult i32 %153, 1
  %157 = or i1 %155, %156
  %158 = zext i1 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %158, i8* %159, align 1, !tbaa !2432
  %160 = and i32 %153, 255
  %161 = call i32 @llvm.ctpop.i32(i32 %160) #16
  %162 = trunc i32 %161 to i8
  %163 = and i8 %162, 1
  %164 = xor i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %164, i8* %165, align 1, !tbaa !2446
  %166 = xor i64 1, %149
  %167 = trunc i64 %166 to i32
  %168 = xor i32 %167, %153
  %169 = lshr i32 %168, 4
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %171, i8* %172, align 1, !tbaa !2447
  %173 = icmp eq i32 %153, 0
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %174, i8* %175, align 1, !tbaa !2448
  %176 = lshr i32 %153, 31
  %177 = trunc i32 %176 to i8
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %177, i8* %178, align 1, !tbaa !2449
  %179 = lshr i32 %152, 31
  %180 = xor i32 %176, %179
  %181 = add nuw nsw i32 %180, %176
  %182 = icmp eq i32 %181, 2
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %183, i8* %184, align 1, !tbaa !2450
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 16
  %187 = load i32, i32* %EAX
  %188 = zext i32 %187 to i64
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %186 to i32*
  store i32 %187, i32* %191
  %192 = load i64, i64* %PC
  %193 = sub i64 %192, 185
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 5
  store i64 %195, i64* %PC
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %193, i64* %196, align 8, !tbaa !2428
  br label %block_400b46

block_400b6d:                                     ; preds = %block_400b5d
  %197 = load i64, i64* %RBP
  %198 = sub i64 %197, 12
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i32*
  %202 = load i32, i32* %201
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 12
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  %210 = load i32, i32* %209
  %211 = shl i64 %204, 32
  %212 = ashr exact i64 %211, 32
  %213 = sext i32 %210 to i64
  %214 = mul nsw i64 %213, %212
  %215 = trunc i64 %214 to i32
  %216 = and i64 %214, 4294967295
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = shl i64 %214, 32
  %218 = ashr exact i64 %217, 32
  %219 = icmp ne i64 %218, %214
  %220 = zext i1 %219 to i8
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %220, i8* %221, align 1, !tbaa !2432
  %222 = and i32 %215, 255
  %223 = call i32 @llvm.ctpop.i32(i32 %222) #16
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %226, i8* %227, align 1, !tbaa !2446
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %228, align 1, !tbaa !2447
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %229, align 1, !tbaa !2448
  %230 = lshr i32 %215, 31
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %220, i8* %233, align 1, !tbaa !2450
  %234 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %235 = load i32, i32* %EAX
  %236 = zext i32 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC
  %239 = bitcast i8* %234 to <2 x i32>*
  %240 = load <2 x i32>, <2 x i32>* %239, align 1
  %241 = getelementptr inbounds i8, i8* %234, i64 8
  %242 = bitcast i8* %241 to <2 x i32>*
  %243 = load <2 x i32>, <2 x i32>* %242, align 1
  %244 = sitofp i32 %235 to float
  %245 = bitcast i8* %234 to float*
  store float %244, float* %245, align 1, !tbaa !2452
  %246 = extractelement <2 x i32> %240, i32 1
  %247 = getelementptr inbounds i8, i8* %234, i64 4
  %248 = bitcast i8* %247 to i32*
  store i32 %246, i32* %248, align 1, !tbaa !2452
  %249 = extractelement <2 x i32> %243, i32 0
  %250 = bitcast i8* %241 to i32*
  store i32 %249, i32* %250, align 1, !tbaa !2452
  %251 = extractelement <2 x i32> %243, i32 1
  %252 = getelementptr inbounds i8, i8* %234, i64 12
  %253 = bitcast i8* %252 to i32*
  store i32 %251, i32* %253, align 1, !tbaa !2452
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 8
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = load i64, i64* %RCX
  %261 = add i64 %260, 12
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 3
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i32*
  %265 = load i32, i32* %264
  %266 = zext i32 %265 to i64
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = load i64, i64* %RAX
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  %270 = trunc i64 %267 to i32
  %271 = sub i32 %270, 1
  %272 = zext i32 %271 to i64
  store i64 %272, i64* %RAX, align 8, !tbaa !2428
  %273 = icmp ult i32 %270, 1
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %274, i8* %275, align 1, !tbaa !2432
  %276 = and i32 %271, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2446
  %282 = xor i64 1, %267
  %283 = trunc i64 %282 to i32
  %284 = xor i32 %283, %271
  %285 = lshr i32 %284, 4
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %287, i8* %288, align 1, !tbaa !2447
  %289 = icmp eq i32 %271, 0
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %290, i8* %291, align 1, !tbaa !2448
  %292 = lshr i32 %271, 31
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %293, i8* %294, align 1, !tbaa !2449
  %295 = lshr i32 %270, 31
  %296 = xor i32 %292, %295
  %297 = add nuw nsw i32 %296, %295
  %298 = icmp eq i32 %297, 2
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %299, i8* %300, align 1, !tbaa !2450
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 8
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %RCX, align 8, !tbaa !2428
  %307 = load i64, i64* %RCX
  %308 = add i64 %307, 12
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 3
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i32*
  %312 = load i32, i32* %311
  %313 = zext i32 %312 to i64
  store i64 %313, i64* %RDX, align 8, !tbaa !2428
  %314 = load i64, i64* %RDX
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 3
  store i64 %316, i64* %PC
  %317 = trunc i64 %314 to i32
  %318 = sub i32 %317, 1
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %RDX, align 8, !tbaa !2428
  %320 = icmp ult i32 %317, 1
  %321 = zext i1 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %321, i8* %322, align 1, !tbaa !2432
  %323 = and i32 %318, 255
  %324 = call i32 @llvm.ctpop.i32(i32 %323) #16
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %327, i8* %328, align 1, !tbaa !2446
  %329 = xor i64 1, %314
  %330 = trunc i64 %329 to i32
  %331 = xor i32 %330, %318
  %332 = lshr i32 %331, 4
  %333 = trunc i32 %332 to i8
  %334 = and i8 %333, 1
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %334, i8* %335, align 1, !tbaa !2447
  %336 = icmp eq i32 %318, 0
  %337 = zext i1 %336 to i8
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %337, i8* %338, align 1, !tbaa !2448
  %339 = lshr i32 %318, 31
  %340 = trunc i32 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %340, i8* %341, align 1, !tbaa !2449
  %342 = lshr i32 %317, 31
  %343 = xor i32 %339, %342
  %344 = add nuw nsw i32 %343, %342
  %345 = icmp eq i32 %344, 2
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %346, i8* %347, align 1, !tbaa !2450
  %348 = load i64, i64* %RAX
  %349 = load i32, i32* %EDX
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 3
  store i64 %352, i64* %PC
  %353 = shl i64 %348, 32
  %354 = ashr exact i64 %353, 32
  %355 = shl i64 %350, 32
  %356 = ashr exact i64 %355, 32
  %357 = mul nsw i64 %356, %354
  %358 = trunc i64 %357 to i32
  %359 = and i64 %357, 4294967295
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = shl i64 %357, 32
  %361 = ashr exact i64 %360, 32
  %362 = icmp ne i64 %361, %357
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2432
  %365 = and i32 %358, 255
  %366 = call i32 @llvm.ctpop.i32(i32 %365) #16
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %369, i8* %370, align 1, !tbaa !2446
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %371, align 1, !tbaa !2447
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %372, align 1, !tbaa !2448
  %373 = lshr i32 %358, 31
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %374, i8* %375, align 1, !tbaa !2449
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %363, i8* %376, align 1, !tbaa !2450
  %377 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %378 = load i32, i32* %EAX
  %379 = zext i32 %378 to i64
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC
  %382 = bitcast i8* %377 to <2 x i32>*
  %383 = load <2 x i32>, <2 x i32>* %382, align 1
  %384 = getelementptr inbounds i8, i8* %377, i64 8
  %385 = bitcast i8* %384 to <2 x i32>*
  %386 = load <2 x i32>, <2 x i32>* %385, align 1
  %387 = sitofp i32 %378 to float
  %388 = bitcast i8* %377 to float*
  store float %387, float* %388, align 1, !tbaa !2452
  %389 = extractelement <2 x i32> %383, i32 1
  %390 = getelementptr inbounds i8, i8* %377, i64 4
  %391 = bitcast i8* %390 to i32*
  store i32 %389, i32* %391, align 1, !tbaa !2452
  %392 = extractelement <2 x i32> %386, i32 0
  %393 = bitcast i8* %384 to i32*
  store i32 %392, i32* %393, align 1, !tbaa !2452
  %394 = extractelement <2 x i32> %386, i32 1
  %395 = getelementptr inbounds i8, i8* %377, i64 12
  %396 = bitcast i8* %395 to i32*
  store i32 %394, i32* %396, align 1, !tbaa !2452
  %397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %399 = bitcast %union.vec128_t* %XMM1 to i8*
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = bitcast i8* %398 to <2 x float>*
  %403 = load <2 x float>, <2 x float>* %402, align 1
  %404 = getelementptr inbounds i8, i8* %398, i64 8
  %405 = bitcast i8* %404 to <2 x i32>*
  %406 = load <2 x i32>, <2 x i32>* %405, align 1
  %407 = bitcast i8* %399 to <2 x float>*
  %408 = load <2 x float>, <2 x float>* %407, align 1
  %409 = extractelement <2 x float> %403, i32 0
  %410 = extractelement <2 x float> %408, i32 0
  %411 = fdiv float %409, %410
  %412 = bitcast i8* %397 to float*
  store float %411, float* %412, align 1, !tbaa !2452
  %413 = bitcast <2 x float> %403 to <2 x i32>
  %414 = extractelement <2 x i32> %413, i32 1
  %415 = getelementptr inbounds i8, i8* %397, i64 4
  %416 = bitcast i8* %415 to i32*
  store i32 %414, i32* %416, align 1, !tbaa !2452
  %417 = extractelement <2 x i32> %406, i32 0
  %418 = getelementptr inbounds i8, i8* %397, i64 8
  %419 = bitcast i8* %418 to i32*
  store i32 %417, i32* %419, align 1, !tbaa !2452
  %420 = extractelement <2 x i32> %406, i32 1
  %421 = getelementptr inbounds i8, i8* %397, i64 12
  %422 = bitcast i8* %421 to i32*
  store i32 %420, i32* %422, align 1, !tbaa !2452
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 8
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i64*
  %428 = load i64, i64* %427
  store i64 %428, i64* %RCX, align 8, !tbaa !2428
  %429 = load i64, i64* %RCX
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 3
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432
  store i64 %433, i64* %RCX, align 8, !tbaa !2428
  %434 = load i64, i64* %RBP
  %435 = sub i64 %434, 8
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438
  store i64 %439, i64* %RSI, align 8, !tbaa !2428
  %440 = load i64, i64* %RSI
  %441 = add i64 %440, 12
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  %445 = load i32, i32* %444
  %446 = sext i32 %445 to i64
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %447, align 1, !tbaa !2432
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %448, align 1, !tbaa !2446
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %449, align 1, !tbaa !2447
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %450, align 1, !tbaa !2448
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %451, align 1, !tbaa !2449
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %452, align 1, !tbaa !2450
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 8
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 4
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i64*
  %458 = load i64, i64* %457
  store i64 %458, i64* %RSI, align 8, !tbaa !2428
  %459 = load i64, i64* %RAX
  %460 = load i64, i64* %RSI
  %461 = add i64 %460, 16
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 4
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  %465 = load i32, i32* %464
  %466 = shl i64 %459, 32
  %467 = ashr exact i64 %466, 32
  %468 = sext i32 %465 to i64
  %469 = mul nsw i64 %468, %467
  %470 = trunc i64 %469 to i32
  %471 = and i64 %469, 4294967295
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = shl i64 %469, 32
  %473 = ashr exact i64 %472, 32
  %474 = icmp ne i64 %473, %469
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %475, i8* %476, align 1, !tbaa !2432
  %477 = and i32 %470, 255
  %478 = call i32 @llvm.ctpop.i32(i32 %477) #16
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %481, i8* %482, align 1, !tbaa !2446
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %483, align 1, !tbaa !2447
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %484, align 1, !tbaa !2448
  %485 = lshr i32 %470, 31
  %486 = trunc i32 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %486, i8* %487, align 1, !tbaa !2449
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %475, i8* %488, align 1, !tbaa !2450
  %489 = load i64, i64* %RBP
  %490 = sub i64 %489, 8
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 4
  store i64 %492, i64* %PC
  %493 = inttoptr i64 %490 to i64*
  %494 = load i64, i64* %493
  store i64 %494, i64* %RSI, align 8, !tbaa !2428
  %495 = load i64, i64* %RAX
  %496 = load i64, i64* %RSI
  %497 = add i64 %496, 20
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 4
  store i64 %499, i64* %PC
  %500 = inttoptr i64 %497 to i32*
  %501 = load i32, i32* %500
  %502 = shl i64 %495, 32
  %503 = ashr exact i64 %502, 32
  %504 = sext i32 %501 to i64
  %505 = mul nsw i64 %504, %503
  %506 = trunc i64 %505 to i32
  %507 = and i64 %505, 4294967295
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = shl i64 %505, 32
  %509 = ashr exact i64 %508, 32
  %510 = icmp ne i64 %509, %505
  %511 = zext i1 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %511, i8* %512, align 1, !tbaa !2432
  %513 = and i32 %506, 255
  %514 = call i32 @llvm.ctpop.i32(i32 %513) #16
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %517, i8* %518, align 1, !tbaa !2446
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %519, align 1, !tbaa !2447
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %520, align 1, !tbaa !2448
  %521 = lshr i32 %506, 31
  %522 = trunc i32 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %522, i8* %523, align 1, !tbaa !2449
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %511, i8* %524, align 1, !tbaa !2450
  %525 = load i64, i64* %RBP
  %526 = sub i64 %525, 12
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC
  %529 = inttoptr i64 %526 to i32*
  %530 = load i32, i32* %529
  %531 = zext i32 %530 to i64
  store i64 %531, i64* %RDX, align 8, !tbaa !2428
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 8
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i64*
  %537 = load i64, i64* %536
  store i64 %537, i64* %RSI, align 8, !tbaa !2428
  %538 = load i64, i64* %RDX
  %539 = load i64, i64* %RSI
  %540 = add i64 %539, 16
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 4
  store i64 %542, i64* %PC
  %543 = inttoptr i64 %540 to i32*
  %544 = load i32, i32* %543
  %545 = shl i64 %538, 32
  %546 = ashr exact i64 %545, 32
  %547 = sext i32 %544 to i64
  %548 = mul nsw i64 %547, %546
  %549 = trunc i64 %548 to i32
  %550 = and i64 %548, 4294967295
  store i64 %550, i64* %RDX, align 8, !tbaa !2428
  %551 = shl i64 %548, 32
  %552 = ashr exact i64 %551, 32
  %553 = icmp ne i64 %552, %548
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %554, i8* %555, align 1, !tbaa !2432
  %556 = and i32 %549, 255
  %557 = call i32 @llvm.ctpop.i32(i32 %556) #16
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %560, i8* %561, align 1, !tbaa !2446
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %562, align 1, !tbaa !2447
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %563, align 1, !tbaa !2448
  %564 = lshr i32 %549, 31
  %565 = trunc i32 %564 to i8
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %565, i8* %566, align 1, !tbaa !2449
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %554, i8* %567, align 1, !tbaa !2450
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 8
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %RSI, align 8, !tbaa !2428
  %574 = load i64, i64* %RDX
  %575 = load i64, i64* %RSI
  %576 = add i64 %575, 20
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 4
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = shl i64 %574, 32
  %582 = ashr exact i64 %581, 32
  %583 = sext i32 %580 to i64
  %584 = mul nsw i64 %583, %582
  %585 = trunc i64 %584 to i32
  %586 = and i64 %584, 4294967295
  store i64 %586, i64* %RDX, align 8, !tbaa !2428
  %587 = shl i64 %584, 32
  %588 = ashr exact i64 %587, 32
  %589 = icmp ne i64 %588, %584
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %590, i8* %591, align 1, !tbaa !2432
  %592 = and i32 %585, 255
  %593 = call i32 @llvm.ctpop.i32(i32 %592) #16
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %596, i8* %597, align 1, !tbaa !2446
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %598, align 1, !tbaa !2447
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %599, align 1, !tbaa !2448
  %600 = lshr i32 %585, 31
  %601 = trunc i32 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %601, i8* %602, align 1, !tbaa !2449
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %590, i8* %603, align 1, !tbaa !2450
  %604 = load i64, i64* %RAX
  %605 = load i32, i32* %EDX
  %606 = zext i32 %605 to i64
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 2
  store i64 %608, i64* %PC
  %609 = trunc i64 %604 to i32
  %610 = add i32 %605, %609
  %611 = zext i32 %610 to i64
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = icmp ult i32 %610, %609
  %613 = icmp ult i32 %610, %605
  %614 = or i1 %612, %613
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %615, i8* %616, align 1, !tbaa !2432
  %617 = and i32 %610, 255
  %618 = call i32 @llvm.ctpop.i32(i32 %617) #16
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  %621 = xor i8 %620, 1
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %621, i8* %622, align 1, !tbaa !2446
  %623 = xor i64 %606, %604
  %624 = trunc i64 %623 to i32
  %625 = xor i32 %624, %610
  %626 = lshr i32 %625, 4
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %628, i8* %629, align 1, !tbaa !2447
  %630 = icmp eq i32 %610, 0
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %631, i8* %632, align 1, !tbaa !2448
  %633 = lshr i32 %610, 31
  %634 = trunc i32 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %634, i8* %635, align 1, !tbaa !2449
  %636 = lshr i32 %609, 31
  %637 = lshr i32 %605, 31
  %638 = xor i32 %633, %636
  %639 = xor i32 %633, %637
  %640 = add nuw nsw i32 %638, %639
  %641 = icmp eq i32 %640, 2
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %642, i8* %643, align 1, !tbaa !2450
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 16
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 3
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to i32*
  %649 = load i32, i32* %648
  %650 = zext i32 %649 to i64
  store i64 %650, i64* %RDX, align 8, !tbaa !2428
  %651 = load i64, i64* %RBP
  %652 = sub i64 %651, 8
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 4
  store i64 %654, i64* %PC
  %655 = inttoptr i64 %652 to i64*
  %656 = load i64, i64* %655
  store i64 %656, i64* %RSI, align 8, !tbaa !2428
  %657 = load i64, i64* %RDX
  %658 = load i64, i64* %RSI
  %659 = add i64 %658, 20
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i32*
  %663 = load i32, i32* %662
  %664 = shl i64 %657, 32
  %665 = ashr exact i64 %664, 32
  %666 = sext i32 %663 to i64
  %667 = mul nsw i64 %666, %665
  %668 = trunc i64 %667 to i32
  %669 = and i64 %667, 4294967295
  store i64 %669, i64* %RDX, align 8, !tbaa !2428
  %670 = shl i64 %667, 32
  %671 = ashr exact i64 %670, 32
  %672 = icmp ne i64 %671, %667
  %673 = zext i1 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %673, i8* %674, align 1, !tbaa !2432
  %675 = and i32 %668, 255
  %676 = call i32 @llvm.ctpop.i32(i32 %675) #16
  %677 = trunc i32 %676 to i8
  %678 = and i8 %677, 1
  %679 = xor i8 %678, 1
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %679, i8* %680, align 1, !tbaa !2446
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %681, align 1, !tbaa !2447
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %682, align 1, !tbaa !2448
  %683 = lshr i32 %668, 31
  %684 = trunc i32 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %684, i8* %685, align 1, !tbaa !2449
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %673, i8* %686, align 1, !tbaa !2450
  %687 = load i64, i64* %RAX
  %688 = load i32, i32* %EDX
  %689 = zext i32 %688 to i64
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 2
  store i64 %691, i64* %PC
  %692 = trunc i64 %687 to i32
  %693 = add i32 %688, %692
  %694 = zext i32 %693 to i64
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = icmp ult i32 %693, %692
  %696 = icmp ult i32 %693, %688
  %697 = or i1 %695, %696
  %698 = zext i1 %697 to i8
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %698, i8* %699, align 1, !tbaa !2432
  %700 = and i32 %693, 255
  %701 = call i32 @llvm.ctpop.i32(i32 %700) #16
  %702 = trunc i32 %701 to i8
  %703 = and i8 %702, 1
  %704 = xor i8 %703, 1
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %704, i8* %705, align 1, !tbaa !2446
  %706 = xor i64 %689, %687
  %707 = trunc i64 %706 to i32
  %708 = xor i32 %707, %693
  %709 = lshr i32 %708, 4
  %710 = trunc i32 %709 to i8
  %711 = and i8 %710, 1
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %711, i8* %712, align 1, !tbaa !2447
  %713 = icmp eq i32 %693, 0
  %714 = zext i1 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %714, i8* %715, align 1, !tbaa !2448
  %716 = lshr i32 %693, 31
  %717 = trunc i32 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %717, i8* %718, align 1, !tbaa !2449
  %719 = lshr i32 %692, 31
  %720 = lshr i32 %688, 31
  %721 = xor i32 %716, %719
  %722 = xor i32 %716, %720
  %723 = add nuw nsw i32 %721, %722
  %724 = icmp eq i32 %723, 2
  %725 = zext i1 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %725, i8* %726, align 1, !tbaa !2450
  %727 = load i64, i64* %RAX
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 20
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 3
  store i64 %731, i64* %PC
  %732 = trunc i64 %727 to i32
  %733 = inttoptr i64 %729 to i32*
  %734 = load i32, i32* %733
  %735 = add i32 %734, %732
  %736 = zext i32 %735 to i64
  store i64 %736, i64* %RAX, align 8, !tbaa !2428
  %737 = icmp ult i32 %735, %732
  %738 = icmp ult i32 %735, %734
  %739 = or i1 %737, %738
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %740, i8* %741, align 1, !tbaa !2432
  %742 = and i32 %735, 255
  %743 = call i32 @llvm.ctpop.i32(i32 %742) #16
  %744 = trunc i32 %743 to i8
  %745 = and i8 %744, 1
  %746 = xor i8 %745, 1
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %746, i8* %747, align 1, !tbaa !2446
  %748 = xor i32 %734, %732
  %749 = xor i32 %748, %735
  %750 = lshr i32 %749, 4
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %752, i8* %753, align 1, !tbaa !2447
  %754 = icmp eq i32 %735, 0
  %755 = zext i1 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %755, i8* %756, align 1, !tbaa !2448
  %757 = lshr i32 %735, 31
  %758 = trunc i32 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %758, i8* %759, align 1, !tbaa !2449
  %760 = lshr i32 %732, 31
  %761 = lshr i32 %734, 31
  %762 = xor i32 %757, %760
  %763 = xor i32 %757, %761
  %764 = add nuw nsw i32 %762, %763
  %765 = icmp eq i32 %764, 2
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %766, i8* %767, align 1, !tbaa !2450
  %768 = load i32, i32* %EAX
  %769 = zext i32 %768 to i64
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 3
  store i64 %771, i64* %PC
  %772 = shl i64 %769, 32
  %773 = ashr exact i64 %772, 32
  store i64 %773, i64* %RSI, align 8, !tbaa !2428
  %774 = load i64, i64* %RCX
  %775 = load i64, i64* %RSI
  %776 = mul i64 %775, 4
  %777 = add i64 %776, %774
  %778 = bitcast %union.vec128_t* %XMM0 to i8*
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 5
  store i64 %780, i64* %PC
  %781 = bitcast i8* %778 to <2 x float>*
  %782 = load <2 x float>, <2 x float>* %781, align 1
  %783 = extractelement <2 x float> %782, i32 0
  %784 = inttoptr i64 %777 to float*
  store float %783, float* %784
  %785 = load i64, i64* %RBP
  %786 = sub i64 %785, 20
  %787 = load i64, i64* %PC
  %788 = add i64 %787, 3
  store i64 %788, i64* %PC
  %789 = inttoptr i64 %786 to i32*
  %790 = load i32, i32* %789
  %791 = zext i32 %790 to i64
  store i64 %791, i64* %RAX, align 8, !tbaa !2428
  %792 = load i64, i64* %RAX
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = trunc i64 %792 to i32
  %796 = add i32 1, %795
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %RAX, align 8, !tbaa !2428
  %798 = icmp ult i32 %796, %795
  %799 = icmp ult i32 %796, 1
  %800 = or i1 %798, %799
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %801, i8* %802, align 1, !tbaa !2432
  %803 = and i32 %796, 255
  %804 = call i32 @llvm.ctpop.i32(i32 %803) #16
  %805 = trunc i32 %804 to i8
  %806 = and i8 %805, 1
  %807 = xor i8 %806, 1
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %807, i8* %808, align 1, !tbaa !2446
  %809 = xor i64 1, %792
  %810 = trunc i64 %809 to i32
  %811 = xor i32 %810, %796
  %812 = lshr i32 %811, 4
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %814, i8* %815, align 1, !tbaa !2447
  %816 = icmp eq i32 %796, 0
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %817, i8* %818, align 1, !tbaa !2448
  %819 = lshr i32 %796, 31
  %820 = trunc i32 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %820, i8* %821, align 1, !tbaa !2449
  %822 = lshr i32 %795, 31
  %823 = xor i32 %819, %822
  %824 = add nuw nsw i32 %823, %819
  %825 = icmp eq i32 %824, 2
  %826 = zext i1 %825 to i8
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %826, i8* %827, align 1, !tbaa !2450
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 20
  %830 = load i32, i32* %EAX
  %831 = zext i32 %830 to i64
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 3
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %829 to i32*
  store i32 %830, i32* %834
  %835 = load i64, i64* %PC
  %836 = sub i64 %835, 143
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %836, i64* %839, align 8, !tbaa !2428
  br label %block_400b5d

block_400b46:                                     ; preds = %block_400bf1, %block_400b3f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_400b3f ], [ %MEMORY.0, %block_400bf1 ]
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 16
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i32, i32* %EAX
  %854 = zext i32 %853 to i64
  %855 = load i64, i64* %RCX
  %856 = add i64 %855, 16
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  %860 = load i32, i32* %859
  %861 = sub i32 %853, %860
  %862 = icmp ult i32 %853, %860
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %864, align 1, !tbaa !2432
  %865 = and i32 %861, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2446
  %871 = xor i32 %860, %853
  %872 = xor i32 %871, %861
  %873 = lshr i32 %872, 4
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %875, i8* %876, align 1, !tbaa !2447
  %877 = icmp eq i32 %861, 0
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = lshr i32 %861, 31
  %881 = trunc i32 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %853, 31
  %884 = lshr i32 %860, 31
  %885 = xor i32 %884, %883
  %886 = xor i32 %880, %883
  %887 = add nuw nsw i32 %886, %885
  %888 = icmp eq i32 %887, 2
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %889, i8* %890, align 1, !tbaa !2450
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 180
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 6
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 6
  store i64 %896, i64* %PC
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %898 = load i8, i8* %897, align 1, !tbaa !2449
  %899 = icmp ne i8 %898, 0
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %901 = load i8, i8* %900, align 1, !tbaa !2450
  %902 = icmp ne i8 %901, 0
  %903 = xor i1 %899, %902
  %904 = xor i1 %903, true
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %907 = select i1 %903, i64 %894, i64 %892
  store i64 %907, i64* %906, align 8, !tbaa !2428
  %908 = load i8, i8* %BRANCH_TAKEN
  %909 = icmp eq i8 %908, 1
  br i1 %909, label %block_400c04, label %block_400b56

block_400b2f:                                     ; preds = %block_400c04, %block_400b20
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400b20 ], [ %MEMORY.1, %block_400c04 ]
  %910 = load i64, i64* %RBP
  %911 = sub i64 %910, 12
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 3
  store i64 %913, i64* %PC
  %914 = inttoptr i64 %911 to i32*
  %915 = load i32, i32* %914
  %916 = zext i32 %915 to i64
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 8
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 4
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %918 to i64*
  %922 = load i64, i64* %921
  store i64 %922, i64* %RCX, align 8, !tbaa !2428
  %923 = load i32, i32* %EAX
  %924 = zext i32 %923 to i64
  %925 = load i64, i64* %RCX
  %926 = add i64 %925, 12
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929
  %931 = sub i32 %923, %930
  %932 = icmp ult i32 %923, %930
  %933 = zext i1 %932 to i8
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %933, i8* %934, align 1, !tbaa !2432
  %935 = and i32 %931, 255
  %936 = call i32 @llvm.ctpop.i32(i32 %935) #16
  %937 = trunc i32 %936 to i8
  %938 = and i8 %937, 1
  %939 = xor i8 %938, 1
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %939, i8* %940, align 1, !tbaa !2446
  %941 = xor i32 %930, %923
  %942 = xor i32 %941, %931
  %943 = lshr i32 %942, 4
  %944 = trunc i32 %943 to i8
  %945 = and i8 %944, 1
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %945, i8* %946, align 1, !tbaa !2447
  %947 = icmp eq i32 %931, 0
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %948, i8* %949, align 1, !tbaa !2448
  %950 = lshr i32 %931, 31
  %951 = trunc i32 %950 to i8
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %951, i8* %952, align 1, !tbaa !2449
  %953 = lshr i32 %923, 31
  %954 = lshr i32 %930, 31
  %955 = xor i32 %954, %953
  %956 = xor i32 %950, %953
  %957 = add nuw nsw i32 %956, %955
  %958 = icmp eq i32 %957, 2
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %959, i8* %960, align 1, !tbaa !2450
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 222
  %963 = load i64, i64* %PC
  %964 = add i64 %963, 6
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 6
  store i64 %966, i64* %PC
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %968 = load i8, i8* %967, align 1, !tbaa !2449
  %969 = icmp ne i8 %968, 0
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %971 = load i8, i8* %970, align 1, !tbaa !2450
  %972 = icmp ne i8 %971, 0
  %973 = xor i1 %969, %972
  %974 = xor i1 %973, true
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %977 = select i1 %973, i64 %964, i64 %962
  store i64 %977, i64* %976, align 8, !tbaa !2428
  %978 = load i8, i8* %BRANCH_TAKEN
  %979 = icmp eq i8 %978, 1
  br i1 %979, label %block_400c17, label %block_400b3f

block_400b56:                                     ; preds = %block_400b46
  %980 = load i64, i64* %RBP
  %981 = sub i64 %980, 20
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 7
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %981 to i32*
  store i32 0, i32* %984
  br label %block_400b5d

block_400c04:                                     ; preds = %block_400b46
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 5
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 5
  store i64 %988, i64* %PC
  %989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %986, i64* %989, align 8, !tbaa !2428
  %990 = load i64, i64* %RBP
  %991 = sub i64 %990, 12
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 3
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  %995 = load i32, i32* %994
  %996 = zext i32 %995 to i64
  store i64 %996, i64* %RAX, align 8, !tbaa !2428
  %997 = load i64, i64* %RAX
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 3
  store i64 %999, i64* %PC
  %1000 = trunc i64 %997 to i32
  %1001 = add i32 1, %1000
  %1002 = zext i32 %1001 to i64
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = icmp ult i32 %1001, %1000
  %1004 = icmp ult i32 %1001, 1
  %1005 = or i1 %1003, %1004
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1006, i8* %1007, align 1, !tbaa !2432
  %1008 = and i32 %1001, 255
  %1009 = call i32 @llvm.ctpop.i32(i32 %1008) #16
  %1010 = trunc i32 %1009 to i8
  %1011 = and i8 %1010, 1
  %1012 = xor i8 %1011, 1
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1012, i8* %1013, align 1, !tbaa !2446
  %1014 = xor i64 1, %997
  %1015 = trunc i64 %1014 to i32
  %1016 = xor i32 %1015, %1001
  %1017 = lshr i32 %1016, 4
  %1018 = trunc i32 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1019, i8* %1020, align 1, !tbaa !2447
  %1021 = icmp eq i32 %1001, 0
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1022, i8* %1023, align 1, !tbaa !2448
  %1024 = lshr i32 %1001, 31
  %1025 = trunc i32 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1025, i8* %1026, align 1, !tbaa !2449
  %1027 = lshr i32 %1000, 31
  %1028 = xor i32 %1024, %1027
  %1029 = add nuw nsw i32 %1028, %1024
  %1030 = icmp eq i32 %1029, 2
  %1031 = zext i1 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1031, i8* %1032, align 1, !tbaa !2450
  %1033 = load i64, i64* %RBP
  %1034 = sub i64 %1033, 12
  %1035 = load i32, i32* %EAX
  %1036 = zext i32 %1035 to i64
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 3
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1034 to i32*
  store i32 %1035, i32* %1039
  %1040 = load i64, i64* %PC
  %1041 = sub i64 %1040, 227
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 5
  store i64 %1043, i64* %PC
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1041, i64* %1044, align 8, !tbaa !2428
  br label %block_400b2f

block_400c17:                                     ; preds = %block_400b2f
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 1
  store i64 %1046, i64* %PC
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1048 = load i64, i64* %1047, align 8, !tbaa !2428
  %1049 = add i64 %1048, 8
  %1050 = inttoptr i64 %1048 to i64*
  %1051 = load i64, i64* %1050
  store i64 %1051, i64* %RBP, align 8, !tbaa !2428
  store i64 %1049, i64* %1047, align 8, !tbaa !2428
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 1
  store i64 %1053, i64* %PC
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1056 = load i64, i64* %1055, align 8, !tbaa !2428
  %1057 = inttoptr i64 %1056 to i64*
  %1058 = load i64, i64* %1057
  store i64 %1058, i64* %1054, align 8, !tbaa !2428
  %1059 = add i64 %1056, 8
  store i64 %1059, i64* %1055, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401db0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401db0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005a0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401db0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401d40___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603168___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d40___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d40:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6228
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400518__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401d96, label %block_401d76

block_401d96:                                     ; preds = %block_401d80, %block_401d40
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401d40 ], [ %387, %block_401d80 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401d76:                                     ; preds = %block_401d40
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401d80

block_401d80:                                     ; preds = %block_401d80, %block_401d76
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401d76 ], [ %387, %block_401d80 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401d80, label %block_401d96
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a60_mflops(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %20 to %"class.std::bitset"*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %24 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %23, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %24 to %union.vec128_t*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %26 to %union.vec128_t*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 8
  store i64 %39, i64* %PC
  %40 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401dc0__rodata_type* @seg_401dc0__rodata to i64), i64 24) to double*)
  %41 = bitcast i8* %37 to double*
  store double %40, double* %41, align 1, !tbaa !2455
  %42 = getelementptr inbounds i8, i8* %37, i64 8
  %43 = bitcast i8* %42 to double*
  store double 0.000000e+00, double* %43, align 1, !tbaa !2455
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i32, i32* %EDI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = bitcast %union.vec128_t* %XMM0 to i8*
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = bitcast i8* %53 to double*
  %57 = load double, double* %56, align 1
  %58 = inttoptr i64 %52 to double*
  store double %57, double* %58
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 24
  %61 = bitcast %union.vec128_t* %XMM1 to i8*
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC
  %64 = bitcast i8* %61 to double*
  %65 = load double, double* %64, align 1
  %66 = inttoptr i64 %60 to double*
  store double %65, double* %66
  %67 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %68 = load i64, i64* %RBP
  %69 = sub i64 %68, 24
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %69 to double*
  %73 = load double, double* %72
  %74 = bitcast i8* %67 to double*
  store double %73, double* %74, align 1, !tbaa !2455
  %75 = getelementptr inbounds i8, i8* %67, i64 8
  %76 = bitcast i8* %75 to double*
  store double 0.000000e+00, double* %76, align 1, !tbaa !2455
  %77 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %78 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC
  %83 = bitcast i8* %78 to double*
  %84 = load double, double* %83, align 1
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to i64*
  %87 = load i64, i64* %86, align 1
  %88 = inttoptr i64 %80 to double*
  %89 = load double, double* %88
  %90 = fdiv double %84, %89
  %91 = bitcast i8* %77 to double*
  store double %90, double* %91, align 1, !tbaa !2455
  %92 = getelementptr inbounds i8, i8* %77, i64 8
  %93 = bitcast i8* %92 to i64*
  store i64 %87, i64* %93, align 1, !tbaa !2455
  %94 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %95 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %96 = bitcast %union.vec128_t* %XMM2 to i8*
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = bitcast i8* %95 to double*
  %100 = load double, double* %99, align 1
  %101 = getelementptr inbounds i8, i8* %95, i64 8
  %102 = bitcast i8* %101 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = bitcast i8* %96 to double*
  %105 = load double, double* %104, align 1
  %106 = fmul double %100, %105
  %107 = bitcast i8* %94 to double*
  store double %106, double* %107, align 1, !tbaa !2455
  %108 = getelementptr inbounds i8, i8* %94, i64 8
  %109 = bitcast i8* %108 to i64*
  store i64 %103, i64* %109, align 1, !tbaa !2455
  %110 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 4
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115
  %117 = sitofp i32 %116 to double
  %118 = bitcast i8* %110 to double*
  store double %117, double* %118, align 1, !tbaa !2455
  %119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %121 = bitcast %union.vec128_t* %XMM1 to i8*
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = bitcast i8* %120 to double*
  %125 = load double, double* %124, align 1
  %126 = getelementptr inbounds i8, i8* %120, i64 8
  %127 = bitcast i8* %126 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = bitcast i8* %121 to double*
  %130 = load double, double* %129, align 1
  %131 = fmul double %125, %130
  %132 = bitcast i8* %119 to double*
  store double %131, double* %132, align 1, !tbaa !2455
  %133 = getelementptr inbounds i8, i8* %119, i64 8
  %134 = bitcast i8* %133 to i64*
  store i64 %128, i64* %134, align 1, !tbaa !2455
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RBP, align 8, !tbaa !2428
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 1
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  store i64 %148, i64* %144, align 8, !tbaa !2428
  %149 = add i64 %146, 8
  store i64 %149, i64* %145, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005d0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a90_newMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a90:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = sub i64 %46, 32
  store i64 %49, i64* %RSP, align 8, !tbaa !2428
  %50 = icmp ult i64 %46, 32
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %51, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %49 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i64 32, %46
  %61 = xor i64 %60, %49
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i64 %49, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %49, 63
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i64 %46, 63
  %73 = xor i64 %69, %72
  %74 = add nuw nsw i64 %73, %72
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 8
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 12
  %86 = load i32, i32* %ESI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i32, i32* %EDX
  %94 = zext i32 %93 to i64
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 20
  %100 = load i32, i32* %ECX
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %99 to i32*
  store i32 %100, i32* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 24
  %107 = load i32, i32* %R8D
  %108 = zext i32 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 12
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 3
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  %117 = load i32, i32* %116
  %118 = zext i32 %117 to i64
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %RDI
  %126 = add i64 %125, 8
  %127 = load i32, i32* %ECX
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %126 to i32*
  store i32 %127, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 16
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 8
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = load i64, i64* %RDI
  %146 = add i64 %145, 12
  %147 = load i32, i32* %ECX
  %148 = zext i32 %147 to i64
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %146 to i32*
  store i32 %147, i32* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 20
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 3
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RDI, align 8, !tbaa !2428
  %165 = load i64, i64* %RDI
  %166 = add i64 %165, 16
  %167 = load i32, i32* %ECX
  %168 = zext i32 %167 to i64
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 3
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %166 to i32*
  store i32 %167, i32* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 24
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = add i64 %185, 20
  %187 = load i32, i32* %ECX
  %188 = zext i32 %187 to i64
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %186 to i32*
  store i32 %187, i32* %191
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RDI
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 7
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i64*
  store i64 0, i64* %201
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 12
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = load i64, i64* %RCX
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 16
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  %215 = load i32, i32* %214
  %216 = shl i64 %209, 32
  %217 = ashr exact i64 %216, 32
  %218 = sext i32 %215 to i64
  %219 = mul nsw i64 %218, %217
  %220 = trunc i64 %219 to i32
  %221 = and i64 %219, 4294967295
  store i64 %221, i64* %RCX, align 8, !tbaa !2428
  %222 = shl i64 %219, 32
  %223 = ashr exact i64 %222, 32
  %224 = icmp ne i64 %223, %219
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %225, i8* %226, align 1, !tbaa !2432
  %227 = and i32 %220, 255
  %228 = call i32 @llvm.ctpop.i32(i32 %227) #16
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %231, i8* %232, align 1, !tbaa !2446
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %233, align 1, !tbaa !2447
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %234, align 1, !tbaa !2448
  %235 = lshr i32 %220, 31
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %238, align 1, !tbaa !2450
  %239 = load i64, i64* %RCX
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 20
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i32*
  %245 = load i32, i32* %244
  %246 = shl i64 %239, 32
  %247 = ashr exact i64 %246, 32
  %248 = sext i32 %245 to i64
  %249 = mul nsw i64 %248, %247
  %250 = trunc i64 %249 to i32
  %251 = and i64 %249, 4294967295
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = shl i64 %249, 32
  %253 = ashr exact i64 %252, 32
  %254 = icmp ne i64 %253, %249
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2432
  %257 = and i32 %250, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2446
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %263, align 1, !tbaa !2447
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %264, align 1, !tbaa !2448
  %265 = lshr i32 %250, 31
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %268, align 1, !tbaa !2450
  %269 = load i64, i64* %RCX
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 24
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = shl i64 %269, 32
  %277 = ashr exact i64 %276, 32
  %278 = sext i32 %275 to i64
  %279 = mul nsw i64 %278, %277
  %280 = trunc i64 %279 to i32
  %281 = and i64 %279, 4294967295
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %282 = shl i64 %279, 32
  %283 = ashr exact i64 %282, 32
  %284 = icmp ne i64 %283, %279
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2432
  %287 = and i32 %280, 255
  %288 = call i32 @llvm.ctpop.i32(i32 %287) #16
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %291, i8* %292, align 1, !tbaa !2446
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %293, align 1, !tbaa !2447
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %294, align 1, !tbaa !2448
  %295 = lshr i32 %280, 31
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %296, i8* %297, align 1, !tbaa !2449
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %285, i8* %298, align 1, !tbaa !2450
  %299 = load i32, i32* %ECX
  %300 = zext i32 %299 to i64
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 3
  store i64 %302, i64* %PC
  %303 = shl i64 %300, 32
  %304 = ashr exact i64 %303, 32
  store i64 %304, i64* %RDI, align 8, !tbaa !2428
  %305 = load i64, i64* %RDI
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = shl i64 %305, 1
  %309 = icmp slt i64 %308, 0
  %310 = shl i64 %308, 1
  store i64 %310, i64* %RDI, align 8, !tbaa !2428
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %312 = zext i1 %309 to i8
  store i8 %312, i8* %311, align 1, !tbaa !2451
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %314 = trunc i64 %310 to i32
  %315 = and i32 %314, 254
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %313, align 1, !tbaa !2451
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %320, align 1, !tbaa !2451
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %322 = icmp eq i64 %310, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %321, align 1, !tbaa !2451
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %325 = lshr i64 %310, 63
  %326 = trunc i64 %325 to i8
  store i8 %326, i8* %324, align 1, !tbaa !2451
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %327, align 1, !tbaa !2451
  %328 = load i64, i64* %PC
  %329 = sub i64 %328, 1394
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 5
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %335 = load i64, i64* %334, align 8, !tbaa !2428
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %331, i64* %337
  store i64 %336, i64* %334, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %338, align 8, !tbaa !2428
  %339 = load i64, i64* %PC
  %340 = call %struct.Memory* @ext_603140_malloc(%struct.State* %0, i64 %339, %struct.Memory* %2)
  %341 = load i64, i64* %RCX
  %342 = load i32, i32* %ECX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 2
  store i64 %345, i64* %PC
  %346 = xor i64 %343, %341
  %347 = trunc i64 %346 to i32
  %348 = and i64 %346, 4294967295
  store i64 %348, i64* %RCX, align 8, !tbaa !2428
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %349, align 1, !tbaa !2432
  %350 = and i32 %347, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2446
  %356 = icmp eq i32 %347, 0
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %357, i8* %358, align 1, !tbaa !2448
  %359 = lshr i32 %347, 31
  %360 = trunc i32 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %360, i8* %361, align 1, !tbaa !2449
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %362, align 1, !tbaa !2450
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %363, align 1, !tbaa !2447
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 8
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %372 = load i64, i64* %RDI
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %372 to i64*
  store i64 %373, i64* %376
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 8
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i64, i64* %RAX
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %388, align 1, !tbaa !2432
  %389 = trunc i64 %387 to i32
  %390 = and i32 %389, 255
  %391 = call i32 @llvm.ctpop.i32(i32 %390) #16
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %394, i8* %395, align 1, !tbaa !2446
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %396, align 1, !tbaa !2447
  %397 = icmp eq i64 %387, 0
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %398, i8* %399, align 1, !tbaa !2448
  %400 = lshr i64 %387, 63
  %401 = trunc i64 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %401, i8* %402, align 1, !tbaa !2449
  %403 = lshr i64 %387, 63
  %404 = xor i64 %400, %403
  %405 = add nuw nsw i64 %404, %403
  %406 = icmp eq i64 %405, 2
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %407, i8* %408, align 1, !tbaa !2450
  %409 = load i32, i32* %EDX
  %410 = zext i32 %409 to i64
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 3
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %414 = load i8, i8* %413, align 1, !tbaa !2448
  %415 = icmp eq i8 %414, 0
  %416 = load i64, i64* %RCX, align 8, !tbaa !2428
  %417 = select i1 %415, i64 %410, i64 %416
  %418 = and i64 %417, 4294967295
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = load i32, i32* %ECX
  %420 = zext i32 %419 to i64
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 2
  store i64 %422, i64* %PC
  %423 = and i64 %420, 4294967295
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RSP
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 32, %424
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 32
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 32, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 1
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %461 = load i64, i64* %460, align 8, !tbaa !2428
  %462 = add i64 %461, 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %RBP, align 8, !tbaa !2428
  store i64 %462, i64* %460, align 8, !tbaa !2428
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 1
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %469 = load i64, i64* %468, align 8, !tbaa !2428
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %467, align 8, !tbaa !2428
  %472 = add i64 %469, 8
  store i64 %472, i64* %468, align 8, !tbaa !2428
  ret %struct.Memory* %340
}

; Function Attrs: noinline
define %struct.Memory* @sub_400d00_jacobi(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400d00:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 21
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R10 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %57 to %union.vec128_t*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %59 to %union.vec128_t*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RBP
  %71 = add i64 %70, 24
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = load i64, i64* %RBP
  %77 = add i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %R10, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EDI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RDX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 32
  %103 = load i64, i64* %RCX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 40
  %109 = load i64, i64* %R8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 48
  %115 = load i64, i64* %R9
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 56
  %121 = load i64, i64* %R10
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %124
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 64
  %127 = load i64, i64* %RAX
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 40
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64, i64* %RAX
  %138 = add i64 %137, 12
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RDI
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = trunc i64 %144 to i32
  %148 = sub i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDI, align 8, !tbaa !2428
  %150 = icmp ult i32 %147, 1
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2432
  %153 = and i32 %148, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2446
  %159 = xor i64 1, %144
  %160 = trunc i64 %159 to i32
  %161 = xor i32 %160, %148
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2447
  %166 = icmp eq i32 %148, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2448
  %169 = lshr i32 %148, 31
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2449
  %172 = lshr i32 %147, 31
  %173 = xor i32 %169, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %176, i8* %177, align 1, !tbaa !2450
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 84
  %180 = load i32, i32* %EDI
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 40
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, 16
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 3
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i32*
  %196 = load i32, i32* %195
  %197 = zext i32 %196 to i64
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RDI
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = trunc i64 %198 to i32
  %202 = sub i32 %201, 1
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RDI, align 8, !tbaa !2428
  %204 = icmp ult i32 %201, 1
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %205, i8* %206, align 1, !tbaa !2432
  %207 = and i32 %202, 255
  %208 = call i32 @llvm.ctpop.i32(i32 %207) #16
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %211, i8* %212, align 1, !tbaa !2446
  %213 = xor i64 1, %198
  %214 = trunc i64 %213 to i32
  %215 = xor i32 %214, %202
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %218, i8* %219, align 1, !tbaa !2447
  %220 = icmp eq i32 %202, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2448
  %223 = lshr i32 %202, 31
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2449
  %226 = lshr i32 %201, 31
  %227 = xor i32 %223, %226
  %228 = add nuw nsw i32 %227, %226
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2450
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 88
  %234 = load i32, i32* %EDI
  %235 = zext i32 %234 to i64
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %238
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 40
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = load i64, i64* %RAX
  %246 = add i64 %245, 20
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* %RDI
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = trunc i64 %252 to i32
  %256 = sub i32 %255, 1
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDI, align 8, !tbaa !2428
  %258 = icmp ult i32 %255, 1
  %259 = zext i1 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %259, i8* %260, align 1, !tbaa !2432
  %261 = and i32 %256, 255
  %262 = call i32 @llvm.ctpop.i32(i32 %261) #16
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %265, i8* %266, align 1, !tbaa !2446
  %267 = xor i64 1, %252
  %268 = trunc i64 %267 to i32
  %269 = xor i32 %268, %256
  %270 = lshr i32 %269, 4
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %272, i8* %273, align 1, !tbaa !2447
  %274 = icmp eq i32 %256, 0
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %275, i8* %276, align 1, !tbaa !2448
  %277 = lshr i32 %256, 31
  %278 = trunc i32 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = lshr i32 %255, 31
  %281 = xor i32 %277, %280
  %282 = add nuw nsw i32 %281, %280
  %283 = icmp eq i32 %282, 2
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %284, i8* %285, align 1, !tbaa !2450
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 92
  %288 = load i32, i32* %EDI
  %289 = zext i32 %288 to i64
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %287 to i32*
  store i32 %288, i32* %292
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 80
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 7
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  store i32 0, i32* %297
  br label %block_400d59

block_401973:                                     ; preds = %block_40189b
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 5
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 5
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %299, i64* %302, align 8, !tbaa !2428
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 68
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  %313 = trunc i64 %310 to i32
  %314 = add i32 1, %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = icmp ult i32 %314, %313
  %317 = icmp ult i32 %314, 1
  %318 = or i1 %316, %317
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %319, i8* %320, align 1, !tbaa !2432
  %321 = and i32 %314, 255
  %322 = call i32 @llvm.ctpop.i32(i32 %321) #16
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %325, i8* %326, align 1, !tbaa !2446
  %327 = xor i64 1, %310
  %328 = trunc i64 %327 to i32
  %329 = xor i32 %328, %314
  %330 = lshr i32 %329, 4
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %332, i8* %333, align 1, !tbaa !2447
  %334 = icmp eq i32 %314, 0
  %335 = zext i1 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %335, i8* %336, align 1, !tbaa !2448
  %337 = lshr i32 %314, 31
  %338 = trunc i32 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %338, i8* %339, align 1, !tbaa !2449
  %340 = lshr i32 %313, 31
  %341 = xor i32 %337, %340
  %342 = add nuw nsw i32 %341, %337
  %343 = icmp eq i32 %342, 2
  %344 = zext i1 %343 to i8
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %344, i8* %345, align 1, !tbaa !2450
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 68
  %348 = load i32, i32* %EAX
  %349 = zext i32 %348 to i64
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 3
  store i64 %351, i64* %PC
  %352 = inttoptr i64 %347 to i32*
  store i32 %348, i32* %352
  %353 = load i64, i64* %PC
  %354 = sub i64 %353, 249
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 5
  store i64 %356, i64* %PC
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %354, i64* %357, align 8, !tbaa !2428
  br label %block_401888

block_40186e:                                     ; preds = %block_400d87
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 5
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %359, i64* %362, align 8, !tbaa !2428
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 68
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 3
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = load i64, i64* %RAX
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 3
  store i64 %372, i64* %PC
  %373 = trunc i64 %370 to i32
  %374 = add i32 1, %373
  %375 = zext i32 %374 to i64
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = icmp ult i32 %374, %373
  %377 = icmp ult i32 %374, 1
  %378 = or i1 %376, %377
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %379, i8* %380, align 1, !tbaa !2432
  %381 = and i32 %374, 255
  %382 = call i32 @llvm.ctpop.i32(i32 %381) #16
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %385, i8* %386, align 1, !tbaa !2446
  %387 = xor i64 1, %370
  %388 = trunc i64 %387 to i32
  %389 = xor i32 %388, %374
  %390 = lshr i32 %389, 4
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %392, i8* %393, align 1, !tbaa !2447
  %394 = icmp eq i32 %374, 0
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %395, i8* %396, align 1, !tbaa !2448
  %397 = lshr i32 %374, 31
  %398 = trunc i32 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %398, i8* %399, align 1, !tbaa !2449
  %400 = lshr i32 %373, 31
  %401 = xor i32 %397, %400
  %402 = add nuw nsw i32 %401, %397
  %403 = icmp eq i32 %402, 2
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %404, i8* %405, align 1, !tbaa !2450
  %406 = load i64, i64* %RBP
  %407 = sub i64 %406, 68
  %408 = load i32, i32* %EAX
  %409 = zext i32 %408 to i64
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 3
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %407 to i32*
  store i32 %408, i32* %412
  %413 = load i64, i64* %PC
  %414 = sub i64 %413, 2824
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_400d74

block_400d65:                                     ; preds = %block_400d59
  %418 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %419 = bitcast %union.vec128_t* %XMM0 to i8*
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 3
  store i64 %421, i64* %PC
  %422 = bitcast i8* %418 to i64*
  %423 = load i64, i64* %422, align 1
  %424 = getelementptr inbounds i8, i8* %418, i64 8
  %425 = bitcast i8* %424 to i64*
  %426 = load i64, i64* %425, align 1
  %427 = bitcast i8* %419 to i64*
  %428 = load i64, i64* %427, align 1
  %429 = getelementptr inbounds i8, i8* %419, i64 8
  %430 = bitcast i8* %429 to i64*
  %431 = load i64, i64* %430, align 1
  %432 = xor i64 %428, %423
  %433 = xor i64 %431, %426
  %434 = trunc i64 %432 to i32
  %435 = lshr i64 %432, 32
  %436 = trunc i64 %435 to i32
  %437 = bitcast i8* %1659 to i32*
  store i32 %434, i32* %437, align 1, !tbaa !2454
  %438 = getelementptr inbounds i8, i8* %1659, i64 4
  %439 = bitcast i8* %438 to i32*
  store i32 %436, i32* %439, align 1, !tbaa !2454
  %440 = trunc i64 %433 to i32
  %441 = getelementptr inbounds i8, i8* %1659, i64 8
  %442 = bitcast i8* %441 to i32*
  store i32 %440, i32* %442, align 1, !tbaa !2454
  %443 = lshr i64 %433, 32
  %444 = trunc i64 %443 to i32
  %445 = getelementptr inbounds i8, i8* %1659, i64 12
  %446 = bitcast i8* %445 to i32*
  store i32 %444, i32* %446, align 1, !tbaa !2454
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 96
  %449 = bitcast %union.vec128_t* %XMM0 to i8*
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 5
  store i64 %451, i64* %PC
  %452 = bitcast i8* %449 to <2 x float>*
  %453 = load <2 x float>, <2 x float>* %452, align 1
  %454 = extractelement <2 x float> %453, i32 0
  %455 = inttoptr i64 %448 to float*
  store float %454, float* %455
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 68
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 7
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  store i32 1, i32* %460
  br label %block_400d74

block_4018ba:                                     ; preds = %block_4018ae
  %461 = load i64, i64* %RBP
  %462 = sub i64 %461, 64
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 4
  store i64 %464, i64* %PC
  %465 = inttoptr i64 %462 to i64*
  %466 = load i64, i64* %465
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = load i64, i64* %RAX
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 3
  store i64 %469, i64* %PC
  %470 = inttoptr i64 %467 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %RAX, align 8, !tbaa !2428
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 64
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 4
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i64*
  %477 = load i64, i64* %476
  store i64 %477, i64* %RCX, align 8, !tbaa !2428
  %478 = load i64, i64* %RCX
  %479 = add i64 %478, 12
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i32*
  %483 = load i32, i32* %482
  %484 = sext i32 %483 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %485, align 1, !tbaa !2432
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %486, align 1, !tbaa !2446
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %487, align 1, !tbaa !2447
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %488, align 1, !tbaa !2448
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %489, align 1, !tbaa !2449
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %490, align 1, !tbaa !2450
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 64
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i64*
  %496 = load i64, i64* %495
  store i64 %496, i64* %RCX, align 8, !tbaa !2428
  %497 = load i64, i64* %RDX
  %498 = load i64, i64* %RCX
  %499 = add i64 %498, 16
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to i32*
  %503 = load i32, i32* %502
  %504 = shl i64 %497, 32
  %505 = ashr exact i64 %504, 32
  %506 = sext i32 %503 to i64
  %507 = mul nsw i64 %506, %505
  %508 = trunc i64 %507 to i32
  %509 = and i64 %507, 4294967295
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = shl i64 %507, 32
  %511 = ashr exact i64 %510, 32
  %512 = icmp ne i64 %511, %507
  %513 = zext i1 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %513, i8* %514, align 1, !tbaa !2432
  %515 = and i32 %508, 255
  %516 = call i32 @llvm.ctpop.i32(i32 %515) #16
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %519, i8* %520, align 1, !tbaa !2446
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %521, align 1, !tbaa !2447
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %522, align 1, !tbaa !2448
  %523 = lshr i32 %508, 31
  %524 = trunc i32 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %524, i8* %525, align 1, !tbaa !2449
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %513, i8* %526, align 1, !tbaa !2450
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 64
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 4
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i64*
  %532 = load i64, i64* %531
  store i64 %532, i64* %RCX, align 8, !tbaa !2428
  %533 = load i64, i64* %RDX
  %534 = load i64, i64* %RCX
  %535 = add i64 %534, 20
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 4
  store i64 %537, i64* %PC
  %538 = inttoptr i64 %535 to i32*
  %539 = load i32, i32* %538
  %540 = shl i64 %533, 32
  %541 = ashr exact i64 %540, 32
  %542 = sext i32 %539 to i64
  %543 = mul nsw i64 %542, %541
  %544 = trunc i64 %543 to i32
  %545 = and i64 %543, 4294967295
  store i64 %545, i64* %RDX, align 8, !tbaa !2428
  %546 = shl i64 %543, 32
  %547 = ashr exact i64 %546, 32
  %548 = icmp ne i64 %547, %543
  %549 = zext i1 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %549, i8* %550, align 1, !tbaa !2432
  %551 = and i32 %544, 255
  %552 = call i32 @llvm.ctpop.i32(i32 %551) #16
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %555, i8* %556, align 1, !tbaa !2446
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %557, align 1, !tbaa !2447
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %558, align 1, !tbaa !2448
  %559 = lshr i32 %544, 31
  %560 = trunc i32 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %560, i8* %561, align 1, !tbaa !2449
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %549, i8* %562, align 1, !tbaa !2450
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 68
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %RSI, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 64
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 4
  store i64 %573, i64* %PC
  %574 = inttoptr i64 %571 to i64*
  %575 = load i64, i64* %574
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = load i64, i64* %RSI
  %577 = load i64, i64* %RCX
  %578 = add i64 %577, 16
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to i32*
  %582 = load i32, i32* %581
  %583 = shl i64 %576, 32
  %584 = ashr exact i64 %583, 32
  %585 = sext i32 %582 to i64
  %586 = mul nsw i64 %585, %584
  %587 = trunc i64 %586 to i32
  %588 = and i64 %586, 4294967295
  store i64 %588, i64* %RSI, align 8, !tbaa !2428
  %589 = shl i64 %586, 32
  %590 = ashr exact i64 %589, 32
  %591 = icmp ne i64 %590, %586
  %592 = zext i1 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %592, i8* %593, align 1, !tbaa !2432
  %594 = and i32 %587, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %600, align 1, !tbaa !2447
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %601, align 1, !tbaa !2448
  %602 = lshr i32 %587, 31
  %603 = trunc i32 %602 to i8
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %603, i8* %604, align 1, !tbaa !2449
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %592, i8* %605, align 1, !tbaa !2450
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 64
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RSI
  %613 = load i64, i64* %RCX
  %614 = add i64 %613, 20
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 4
  store i64 %616, i64* %PC
  %617 = inttoptr i64 %614 to i32*
  %618 = load i32, i32* %617
  %619 = shl i64 %612, 32
  %620 = ashr exact i64 %619, 32
  %621 = sext i32 %618 to i64
  %622 = mul nsw i64 %621, %620
  %623 = trunc i64 %622 to i32
  %624 = and i64 %622, 4294967295
  store i64 %624, i64* %RSI, align 8, !tbaa !2428
  %625 = shl i64 %622, 32
  %626 = ashr exact i64 %625, 32
  %627 = icmp ne i64 %626, %622
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %628, i8* %629, align 1, !tbaa !2432
  %630 = and i32 %623, 255
  %631 = call i32 @llvm.ctpop.i32(i32 %630) #16
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %634, i8* %635, align 1, !tbaa !2446
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %636, align 1, !tbaa !2447
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %637, align 1, !tbaa !2448
  %638 = lshr i32 %623, 31
  %639 = trunc i32 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %628, i8* %641, align 1, !tbaa !2450
  %642 = load i64, i64* %RDX
  %643 = load i32, i32* %ESI
  %644 = zext i32 %643 to i64
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 2
  store i64 %646, i64* %PC
  %647 = trunc i64 %642 to i32
  %648 = add i32 %643, %647
  %649 = zext i32 %648 to i64
  store i64 %649, i64* %RDX, align 8, !tbaa !2428
  %650 = icmp ult i32 %648, %647
  %651 = icmp ult i32 %648, %643
  %652 = or i1 %650, %651
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %653, i8* %654, align 1, !tbaa !2432
  %655 = and i32 %648, 255
  %656 = call i32 @llvm.ctpop.i32(i32 %655) #16
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = xor i8 %658, 1
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %659, i8* %660, align 1, !tbaa !2446
  %661 = xor i64 %644, %642
  %662 = trunc i64 %661 to i32
  %663 = xor i32 %662, %648
  %664 = lshr i32 %663, 4
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %666, i8* %667, align 1, !tbaa !2447
  %668 = icmp eq i32 %648, 0
  %669 = zext i1 %668 to i8
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %669, i8* %670, align 1, !tbaa !2448
  %671 = lshr i32 %648, 31
  %672 = trunc i32 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %672, i8* %673, align 1, !tbaa !2449
  %674 = lshr i32 %647, 31
  %675 = lshr i32 %643, 31
  %676 = xor i32 %671, %674
  %677 = xor i32 %671, %675
  %678 = add nuw nsw i32 %676, %677
  %679 = icmp eq i32 %678, 2
  %680 = zext i1 %679 to i8
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %680, i8* %681, align 1, !tbaa !2450
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 72
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i32*
  %687 = load i32, i32* %686
  %688 = zext i32 %687 to i64
  store i64 %688, i64* %RSI, align 8, !tbaa !2428
  %689 = load i64, i64* %RBP
  %690 = sub i64 %689, 64
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693
  store i64 %694, i64* %RCX, align 8, !tbaa !2428
  %695 = load i64, i64* %RSI
  %696 = load i64, i64* %RCX
  %697 = add i64 %696, 20
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 4
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = shl i64 %695, 32
  %703 = ashr exact i64 %702, 32
  %704 = sext i32 %701 to i64
  %705 = mul nsw i64 %704, %703
  %706 = trunc i64 %705 to i32
  %707 = and i64 %705, 4294967295
  store i64 %707, i64* %RSI, align 8, !tbaa !2428
  %708 = shl i64 %705, 32
  %709 = ashr exact i64 %708, 32
  %710 = icmp ne i64 %709, %705
  %711 = zext i1 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %711, i8* %712, align 1, !tbaa !2432
  %713 = and i32 %706, 255
  %714 = call i32 @llvm.ctpop.i32(i32 %713) #16
  %715 = trunc i32 %714 to i8
  %716 = and i8 %715, 1
  %717 = xor i8 %716, 1
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %717, i8* %718, align 1, !tbaa !2446
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %719, align 1, !tbaa !2447
  %720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %720, align 1, !tbaa !2448
  %721 = lshr i32 %706, 31
  %722 = trunc i32 %721 to i8
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %722, i8* %723, align 1, !tbaa !2449
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %711, i8* %724, align 1, !tbaa !2450
  %725 = load i64, i64* %RDX
  %726 = load i32, i32* %ESI
  %727 = zext i32 %726 to i64
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 2
  store i64 %729, i64* %PC
  %730 = trunc i64 %725 to i32
  %731 = add i32 %726, %730
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RDX, align 8, !tbaa !2428
  %733 = icmp ult i32 %731, %730
  %734 = icmp ult i32 %731, %726
  %735 = or i1 %733, %734
  %736 = zext i1 %735 to i8
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %736, i8* %737, align 1, !tbaa !2432
  %738 = and i32 %731, 255
  %739 = call i32 @llvm.ctpop.i32(i32 %738) #16
  %740 = trunc i32 %739 to i8
  %741 = and i8 %740, 1
  %742 = xor i8 %741, 1
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %742, i8* %743, align 1, !tbaa !2446
  %744 = xor i64 %727, %725
  %745 = trunc i64 %744 to i32
  %746 = xor i32 %745, %731
  %747 = lshr i32 %746, 4
  %748 = trunc i32 %747 to i8
  %749 = and i8 %748, 1
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %749, i8* %750, align 1, !tbaa !2447
  %751 = icmp eq i32 %731, 0
  %752 = zext i1 %751 to i8
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %752, i8* %753, align 1, !tbaa !2448
  %754 = lshr i32 %731, 31
  %755 = trunc i32 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %755, i8* %756, align 1, !tbaa !2449
  %757 = lshr i32 %730, 31
  %758 = lshr i32 %726, 31
  %759 = xor i32 %754, %757
  %760 = xor i32 %754, %758
  %761 = add nuw nsw i32 %759, %760
  %762 = icmp eq i32 %761, 2
  %763 = zext i1 %762 to i8
  %764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %763, i8* %764, align 1, !tbaa !2450
  %765 = load i64, i64* %RDX
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 76
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 3
  store i64 %769, i64* %PC
  %770 = trunc i64 %765 to i32
  %771 = inttoptr i64 %767 to i32*
  %772 = load i32, i32* %771
  %773 = add i32 %772, %770
  %774 = zext i32 %773 to i64
  store i64 %774, i64* %RDX, align 8, !tbaa !2428
  %775 = icmp ult i32 %773, %770
  %776 = icmp ult i32 %773, %772
  %777 = or i1 %775, %776
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %778, i8* %779, align 1, !tbaa !2432
  %780 = and i32 %773, 255
  %781 = call i32 @llvm.ctpop.i32(i32 %780) #16
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  %784 = xor i8 %783, 1
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %784, i8* %785, align 1, !tbaa !2446
  %786 = xor i32 %772, %770
  %787 = xor i32 %786, %773
  %788 = lshr i32 %787, 4
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %790, i8* %791, align 1, !tbaa !2447
  %792 = icmp eq i32 %773, 0
  %793 = zext i1 %792 to i8
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %793, i8* %794, align 1, !tbaa !2448
  %795 = lshr i32 %773, 31
  %796 = trunc i32 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %796, i8* %797, align 1, !tbaa !2449
  %798 = lshr i32 %770, 31
  %799 = lshr i32 %772, 31
  %800 = xor i32 %795, %798
  %801 = xor i32 %795, %799
  %802 = add nuw nsw i32 %800, %801
  %803 = icmp eq i32 %802, 2
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %804, i8* %805, align 1, !tbaa !2450
  %806 = load i32, i32* %EDX
  %807 = zext i32 %806 to i64
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 3
  store i64 %809, i64* %PC
  %810 = shl i64 %807, 32
  %811 = ashr exact i64 %810, 32
  store i64 %811, i64* %RCX, align 8, !tbaa !2428
  %812 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %813 = load i64, i64* %RAX
  %814 = load i64, i64* %RCX
  %815 = mul i64 %814, 4
  %816 = add i64 %815, %813
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %816 to float*
  %820 = load float, float* %819
  %821 = bitcast i8* %812 to float*
  store float %820, float* %821, align 1, !tbaa !2452
  %822 = getelementptr inbounds i8, i8* %812, i64 4
  %823 = bitcast i8* %822 to float*
  store float 0.000000e+00, float* %823, align 1, !tbaa !2452
  %824 = getelementptr inbounds i8, i8* %812, i64 8
  %825 = bitcast i8* %824 to float*
  store float 0.000000e+00, float* %825, align 1, !tbaa !2452
  %826 = getelementptr inbounds i8, i8* %812, i64 12
  %827 = bitcast i8* %826 to float*
  store float 0.000000e+00, float* %827, align 1, !tbaa !2452
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 40
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 4
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %RAX, align 8, !tbaa !2428
  %834 = load i64, i64* %RAX
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i64*
  %838 = load i64, i64* %837
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 40
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 4
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i64*
  %844 = load i64, i64* %843
  store i64 %844, i64* %RCX, align 8, !tbaa !2428
  %845 = load i64, i64* %RCX
  %846 = add i64 %845, 12
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %846 to i32*
  %850 = load i32, i32* %849
  %851 = sext i32 %850 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %852, align 1, !tbaa !2432
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %853, align 1, !tbaa !2446
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %854, align 1, !tbaa !2447
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %855, align 1, !tbaa !2448
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %856, align 1, !tbaa !2449
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %857, align 1, !tbaa !2450
  %858 = load i64, i64* %RBP
  %859 = sub i64 %858, 40
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i64*
  %863 = load i64, i64* %862
  store i64 %863, i64* %RCX, align 8, !tbaa !2428
  %864 = load i64, i64* %RDX
  %865 = load i64, i64* %RCX
  %866 = add i64 %865, 16
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 4
  store i64 %868, i64* %PC
  %869 = inttoptr i64 %866 to i32*
  %870 = load i32, i32* %869
  %871 = shl i64 %864, 32
  %872 = ashr exact i64 %871, 32
  %873 = sext i32 %870 to i64
  %874 = mul nsw i64 %873, %872
  %875 = trunc i64 %874 to i32
  %876 = and i64 %874, 4294967295
  store i64 %876, i64* %RDX, align 8, !tbaa !2428
  %877 = shl i64 %874, 32
  %878 = ashr exact i64 %877, 32
  %879 = icmp ne i64 %878, %874
  %880 = zext i1 %879 to i8
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %880, i8* %881, align 1, !tbaa !2432
  %882 = and i32 %875, 255
  %883 = call i32 @llvm.ctpop.i32(i32 %882) #16
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  %886 = xor i8 %885, 1
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %886, i8* %887, align 1, !tbaa !2446
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %888, align 1, !tbaa !2447
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %889, align 1, !tbaa !2448
  %890 = lshr i32 %875, 31
  %891 = trunc i32 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %891, i8* %892, align 1, !tbaa !2449
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %880, i8* %893, align 1, !tbaa !2450
  %894 = load i64, i64* %RBP
  %895 = sub i64 %894, 40
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 4
  store i64 %897, i64* %PC
  %898 = inttoptr i64 %895 to i64*
  %899 = load i64, i64* %898
  store i64 %899, i64* %RCX, align 8, !tbaa !2428
  %900 = load i64, i64* %RDX
  %901 = load i64, i64* %RCX
  %902 = add i64 %901, 20
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i32*
  %906 = load i32, i32* %905
  %907 = shl i64 %900, 32
  %908 = ashr exact i64 %907, 32
  %909 = sext i32 %906 to i64
  %910 = mul nsw i64 %909, %908
  %911 = trunc i64 %910 to i32
  %912 = and i64 %910, 4294967295
  store i64 %912, i64* %RDX, align 8, !tbaa !2428
  %913 = shl i64 %910, 32
  %914 = ashr exact i64 %913, 32
  %915 = icmp ne i64 %914, %910
  %916 = zext i1 %915 to i8
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %916, i8* %917, align 1, !tbaa !2432
  %918 = and i32 %911, 255
  %919 = call i32 @llvm.ctpop.i32(i32 %918) #16
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %922, i8* %923, align 1, !tbaa !2446
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %924, align 1, !tbaa !2447
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %925, align 1, !tbaa !2448
  %926 = lshr i32 %911, 31
  %927 = trunc i32 %926 to i8
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %927, i8* %928, align 1, !tbaa !2449
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %916, i8* %929, align 1, !tbaa !2450
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 68
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 3
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to i32*
  %935 = load i32, i32* %934
  %936 = zext i32 %935 to i64
  store i64 %936, i64* %RSI, align 8, !tbaa !2428
  %937 = load i64, i64* %RBP
  %938 = sub i64 %937, 40
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 4
  store i64 %940, i64* %PC
  %941 = inttoptr i64 %938 to i64*
  %942 = load i64, i64* %941
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %943 = load i64, i64* %RSI
  %944 = load i64, i64* %RCX
  %945 = add i64 %944, 16
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 4
  store i64 %947, i64* %PC
  %948 = inttoptr i64 %945 to i32*
  %949 = load i32, i32* %948
  %950 = shl i64 %943, 32
  %951 = ashr exact i64 %950, 32
  %952 = sext i32 %949 to i64
  %953 = mul nsw i64 %952, %951
  %954 = trunc i64 %953 to i32
  %955 = and i64 %953, 4294967295
  store i64 %955, i64* %RSI, align 8, !tbaa !2428
  %956 = shl i64 %953, 32
  %957 = ashr exact i64 %956, 32
  %958 = icmp ne i64 %957, %953
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2432
  %961 = and i32 %954, 255
  %962 = call i32 @llvm.ctpop.i32(i32 %961) #16
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %965, i8* %966, align 1, !tbaa !2446
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %967, align 1, !tbaa !2447
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %968, align 1, !tbaa !2448
  %969 = lshr i32 %954, 31
  %970 = trunc i32 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %970, i8* %971, align 1, !tbaa !2449
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %959, i8* %972, align 1, !tbaa !2450
  %973 = load i64, i64* %RBP
  %974 = sub i64 %973, 40
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 4
  store i64 %976, i64* %PC
  %977 = inttoptr i64 %974 to i64*
  %978 = load i64, i64* %977
  store i64 %978, i64* %RCX, align 8, !tbaa !2428
  %979 = load i64, i64* %RSI
  %980 = load i64, i64* %RCX
  %981 = add i64 %980, 20
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = inttoptr i64 %981 to i32*
  %985 = load i32, i32* %984
  %986 = shl i64 %979, 32
  %987 = ashr exact i64 %986, 32
  %988 = sext i32 %985 to i64
  %989 = mul nsw i64 %988, %987
  %990 = trunc i64 %989 to i32
  %991 = and i64 %989, 4294967295
  store i64 %991, i64* %RSI, align 8, !tbaa !2428
  %992 = shl i64 %989, 32
  %993 = ashr exact i64 %992, 32
  %994 = icmp ne i64 %993, %989
  %995 = zext i1 %994 to i8
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %995, i8* %996, align 1, !tbaa !2432
  %997 = and i32 %990, 255
  %998 = call i32 @llvm.ctpop.i32(i32 %997) #16
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = xor i8 %1000, 1
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1001, i8* %1002, align 1, !tbaa !2446
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1003, align 1, !tbaa !2447
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1004, align 1, !tbaa !2448
  %1005 = lshr i32 %990, 31
  %1006 = trunc i32 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1006, i8* %1007, align 1, !tbaa !2449
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %995, i8* %1008, align 1, !tbaa !2450
  %1009 = load i64, i64* %RDX
  %1010 = load i32, i32* %ESI
  %1011 = zext i32 %1010 to i64
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 2
  store i64 %1013, i64* %PC
  %1014 = trunc i64 %1009 to i32
  %1015 = add i32 %1010, %1014
  %1016 = zext i32 %1015 to i64
  store i64 %1016, i64* %RDX, align 8, !tbaa !2428
  %1017 = icmp ult i32 %1015, %1014
  %1018 = icmp ult i32 %1015, %1010
  %1019 = or i1 %1017, %1018
  %1020 = zext i1 %1019 to i8
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1020, i8* %1021, align 1, !tbaa !2432
  %1022 = and i32 %1015, 255
  %1023 = call i32 @llvm.ctpop.i32(i32 %1022) #16
  %1024 = trunc i32 %1023 to i8
  %1025 = and i8 %1024, 1
  %1026 = xor i8 %1025, 1
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1026, i8* %1027, align 1, !tbaa !2446
  %1028 = xor i64 %1011, %1009
  %1029 = trunc i64 %1028 to i32
  %1030 = xor i32 %1029, %1015
  %1031 = lshr i32 %1030, 4
  %1032 = trunc i32 %1031 to i8
  %1033 = and i8 %1032, 1
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1033, i8* %1034, align 1, !tbaa !2447
  %1035 = icmp eq i32 %1015, 0
  %1036 = zext i1 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1036, i8* %1037, align 1, !tbaa !2448
  %1038 = lshr i32 %1015, 31
  %1039 = trunc i32 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1039, i8* %1040, align 1, !tbaa !2449
  %1041 = lshr i32 %1014, 31
  %1042 = lshr i32 %1010, 31
  %1043 = xor i32 %1038, %1041
  %1044 = xor i32 %1038, %1042
  %1045 = add nuw nsw i32 %1043, %1044
  %1046 = icmp eq i32 %1045, 2
  %1047 = zext i1 %1046 to i8
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1047, i8* %1048, align 1, !tbaa !2450
  %1049 = load i64, i64* %RBP
  %1050 = sub i64 %1049, 72
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 3
  store i64 %1052, i64* %PC
  %1053 = inttoptr i64 %1050 to i32*
  %1054 = load i32, i32* %1053
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RSI, align 8, !tbaa !2428
  %1056 = load i64, i64* %RBP
  %1057 = sub i64 %1056, 40
  %1058 = load i64, i64* %PC
  %1059 = add i64 %1058, 4
  store i64 %1059, i64* %PC
  %1060 = inttoptr i64 %1057 to i64*
  %1061 = load i64, i64* %1060
  store i64 %1061, i64* %RCX, align 8, !tbaa !2428
  %1062 = load i64, i64* %RSI
  %1063 = load i64, i64* %RCX
  %1064 = add i64 %1063, 20
  %1065 = load i64, i64* %PC
  %1066 = add i64 %1065, 4
  store i64 %1066, i64* %PC
  %1067 = inttoptr i64 %1064 to i32*
  %1068 = load i32, i32* %1067
  %1069 = shl i64 %1062, 32
  %1070 = ashr exact i64 %1069, 32
  %1071 = sext i32 %1068 to i64
  %1072 = mul nsw i64 %1071, %1070
  %1073 = trunc i64 %1072 to i32
  %1074 = and i64 %1072, 4294967295
  store i64 %1074, i64* %RSI, align 8, !tbaa !2428
  %1075 = shl i64 %1072, 32
  %1076 = ashr exact i64 %1075, 32
  %1077 = icmp ne i64 %1076, %1072
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1078, i8* %1079, align 1, !tbaa !2432
  %1080 = and i32 %1073, 255
  %1081 = call i32 @llvm.ctpop.i32(i32 %1080) #16
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1084, i8* %1085, align 1, !tbaa !2446
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1086, align 1, !tbaa !2447
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i32 %1073, 31
  %1089 = trunc i32 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1078, i8* %1091, align 1, !tbaa !2450
  %1092 = load i64, i64* %RDX
  %1093 = load i32, i32* %ESI
  %1094 = zext i32 %1093 to i64
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 2
  store i64 %1096, i64* %PC
  %1097 = trunc i64 %1092 to i32
  %1098 = add i32 %1093, %1097
  %1099 = zext i32 %1098 to i64
  store i64 %1099, i64* %RDX, align 8, !tbaa !2428
  %1100 = icmp ult i32 %1098, %1097
  %1101 = icmp ult i32 %1098, %1093
  %1102 = or i1 %1100, %1101
  %1103 = zext i1 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1103, i8* %1104, align 1, !tbaa !2432
  %1105 = and i32 %1098, 255
  %1106 = call i32 @llvm.ctpop.i32(i32 %1105) #16
  %1107 = trunc i32 %1106 to i8
  %1108 = and i8 %1107, 1
  %1109 = xor i8 %1108, 1
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1109, i8* %1110, align 1, !tbaa !2446
  %1111 = xor i64 %1094, %1092
  %1112 = trunc i64 %1111 to i32
  %1113 = xor i32 %1112, %1098
  %1114 = lshr i32 %1113, 4
  %1115 = trunc i32 %1114 to i8
  %1116 = and i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1116, i8* %1117, align 1, !tbaa !2447
  %1118 = icmp eq i32 %1098, 0
  %1119 = zext i1 %1118 to i8
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1119, i8* %1120, align 1, !tbaa !2448
  %1121 = lshr i32 %1098, 31
  %1122 = trunc i32 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1122, i8* %1123, align 1, !tbaa !2449
  %1124 = lshr i32 %1097, 31
  %1125 = lshr i32 %1093, 31
  %1126 = xor i32 %1121, %1124
  %1127 = xor i32 %1121, %1125
  %1128 = add nuw nsw i32 %1126, %1127
  %1129 = icmp eq i32 %1128, 2
  %1130 = zext i1 %1129 to i8
  %1131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1130, i8* %1131, align 1, !tbaa !2450
  %1132 = load i64, i64* %RDX
  %1133 = load i64, i64* %RBP
  %1134 = sub i64 %1133, 76
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC
  %1137 = trunc i64 %1132 to i32
  %1138 = inttoptr i64 %1134 to i32*
  %1139 = load i32, i32* %1138
  %1140 = add i32 %1139, %1137
  %1141 = zext i32 %1140 to i64
  store i64 %1141, i64* %RDX, align 8, !tbaa !2428
  %1142 = icmp ult i32 %1140, %1137
  %1143 = icmp ult i32 %1140, %1139
  %1144 = or i1 %1142, %1143
  %1145 = zext i1 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1145, i8* %1146, align 1, !tbaa !2432
  %1147 = and i32 %1140, 255
  %1148 = call i32 @llvm.ctpop.i32(i32 %1147) #16
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1151, i8* %1152, align 1, !tbaa !2446
  %1153 = xor i32 %1139, %1137
  %1154 = xor i32 %1153, %1140
  %1155 = lshr i32 %1154, 4
  %1156 = trunc i32 %1155 to i8
  %1157 = and i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1157, i8* %1158, align 1, !tbaa !2447
  %1159 = icmp eq i32 %1140, 0
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1160, i8* %1161, align 1, !tbaa !2448
  %1162 = lshr i32 %1140, 31
  %1163 = trunc i32 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1163, i8* %1164, align 1, !tbaa !2449
  %1165 = lshr i32 %1137, 31
  %1166 = lshr i32 %1139, 31
  %1167 = xor i32 %1162, %1165
  %1168 = xor i32 %1162, %1166
  %1169 = add nuw nsw i32 %1167, %1168
  %1170 = icmp eq i32 %1169, 2
  %1171 = zext i1 %1170 to i8
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1171, i8* %1172, align 1, !tbaa !2450
  %1173 = load i32, i32* %EDX
  %1174 = zext i32 %1173 to i64
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 3
  store i64 %1176, i64* %PC
  %1177 = shl i64 %1174, 32
  %1178 = ashr exact i64 %1177, 32
  store i64 %1178, i64* %RCX, align 8, !tbaa !2428
  %1179 = load i64, i64* %RAX
  %1180 = load i64, i64* %RCX
  %1181 = mul i64 %1180, 4
  %1182 = add i64 %1181, %1179
  %1183 = bitcast %union.vec128_t* %XMM0 to i8*
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 5
  store i64 %1185, i64* %PC
  %1186 = bitcast i8* %1183 to <2 x float>*
  %1187 = load <2 x float>, <2 x float>* %1186, align 1
  %1188 = extractelement <2 x float> %1187, i32 0
  %1189 = inttoptr i64 %1182 to float*
  store float %1188, float* %1189
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 76
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 3
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i32*
  %1195 = load i32, i32* %1194
  %1196 = zext i32 %1195 to i64
  store i64 %1196, i64* %RAX, align 8, !tbaa !2428
  %1197 = load i64, i64* %RAX
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC
  %1200 = trunc i64 %1197 to i32
  %1201 = add i32 1, %1200
  %1202 = zext i32 %1201 to i64
  store i64 %1202, i64* %RAX, align 8, !tbaa !2428
  %1203 = icmp ult i32 %1201, %1200
  %1204 = icmp ult i32 %1201, 1
  %1205 = or i1 %1203, %1204
  %1206 = zext i1 %1205 to i8
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1206, i8* %1207, align 1, !tbaa !2432
  %1208 = and i32 %1201, 255
  %1209 = call i32 @llvm.ctpop.i32(i32 %1208) #16
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = xor i8 %1211, 1
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1212, i8* %1213, align 1, !tbaa !2446
  %1214 = xor i64 1, %1197
  %1215 = trunc i64 %1214 to i32
  %1216 = xor i32 %1215, %1201
  %1217 = lshr i32 %1216, 4
  %1218 = trunc i32 %1217 to i8
  %1219 = and i8 %1218, 1
  %1220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1219, i8* %1220, align 1, !tbaa !2447
  %1221 = icmp eq i32 %1201, 0
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1222, i8* %1223, align 1, !tbaa !2448
  %1224 = lshr i32 %1201, 31
  %1225 = trunc i32 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1225, i8* %1226, align 1, !tbaa !2449
  %1227 = lshr i32 %1200, 31
  %1228 = xor i32 %1224, %1227
  %1229 = add nuw nsw i32 %1228, %1224
  %1230 = icmp eq i32 %1229, 2
  %1231 = zext i1 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1231, i8* %1232, align 1, !tbaa !2450
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 76
  %1235 = load i32, i32* %EAX
  %1236 = zext i32 %1235 to i64
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 3
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1234 to i32*
  store i32 %1235, i32* %1239
  %1240 = load i64, i64* %PC
  %1241 = sub i64 %1240, 173
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 5
  store i64 %1243, i64* %PC
  %1244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1241, i64* %1244, align 8, !tbaa !2428
  br label %block_4018ae

block_40185b:                                     ; preds = %block_400d9a
  %1245 = load i64, i64* %PC
  %1246 = add i64 %1245, 5
  %1247 = load i64, i64* %PC
  %1248 = add i64 %1247, 5
  store i64 %1248, i64* %PC
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1246, i64* %1249, align 8, !tbaa !2428
  %1250 = load i64, i64* %RBP
  %1251 = sub i64 %1250, 72
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 3
  store i64 %1253, i64* %PC
  %1254 = inttoptr i64 %1251 to i32*
  %1255 = load i32, i32* %1254
  %1256 = zext i32 %1255 to i64
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RAX
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 3
  store i64 %1259, i64* %PC
  %1260 = trunc i64 %1257 to i32
  %1261 = add i32 1, %1260
  %1262 = zext i32 %1261 to i64
  store i64 %1262, i64* %RAX, align 8, !tbaa !2428
  %1263 = icmp ult i32 %1261, %1260
  %1264 = icmp ult i32 %1261, 1
  %1265 = or i1 %1263, %1264
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1266, i8* %1267, align 1, !tbaa !2432
  %1268 = and i32 %1261, 255
  %1269 = call i32 @llvm.ctpop.i32(i32 %1268) #16
  %1270 = trunc i32 %1269 to i8
  %1271 = and i8 %1270, 1
  %1272 = xor i8 %1271, 1
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1272, i8* %1273, align 1, !tbaa !2446
  %1274 = xor i64 1, %1257
  %1275 = trunc i64 %1274 to i32
  %1276 = xor i32 %1275, %1261
  %1277 = lshr i32 %1276, 4
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1279, i8* %1280, align 1, !tbaa !2447
  %1281 = icmp eq i32 %1261, 0
  %1282 = zext i1 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1282, i8* %1283, align 1, !tbaa !2448
  %1284 = lshr i32 %1261, 31
  %1285 = trunc i32 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1285, i8* %1286, align 1, !tbaa !2449
  %1287 = lshr i32 %1260, 31
  %1288 = xor i32 %1284, %1287
  %1289 = add nuw nsw i32 %1288, %1284
  %1290 = icmp eq i32 %1289, 2
  %1291 = zext i1 %1290 to i8
  %1292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1291, i8* %1292, align 1, !tbaa !2450
  %1293 = load i64, i64* %RBP
  %1294 = sub i64 %1293, 72
  %1295 = load i32, i32* %EAX
  %1296 = zext i32 %1295 to i64
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 3
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1294 to i32*
  store i32 %1295, i32* %1299
  %1300 = load i64, i64* %PC
  %1301 = sub i64 %1300, 2786
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 5
  store i64 %1303, i64* %PC
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1301, i64* %1304, align 8, !tbaa !2428
  br label %block_400d87

block_401960:                                     ; preds = %block_4018ae
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 5
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 5
  store i64 %1308, i64* %PC
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1306, i64* %1309, align 8, !tbaa !2428
  %1310 = load i64, i64* %RBP
  %1311 = sub i64 %1310, 72
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 3
  store i64 %1313, i64* %PC
  %1314 = inttoptr i64 %1311 to i32*
  %1315 = load i32, i32* %1314
  %1316 = zext i32 %1315 to i64
  store i64 %1316, i64* %RAX, align 8, !tbaa !2428
  %1317 = load i64, i64* %RAX
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 3
  store i64 %1319, i64* %PC
  %1320 = trunc i64 %1317 to i32
  %1321 = add i32 1, %1320
  %1322 = zext i32 %1321 to i64
  store i64 %1322, i64* %RAX, align 8, !tbaa !2428
  %1323 = icmp ult i32 %1321, %1320
  %1324 = icmp ult i32 %1321, 1
  %1325 = or i1 %1323, %1324
  %1326 = zext i1 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1326, i8* %1327, align 1, !tbaa !2432
  %1328 = and i32 %1321, 255
  %1329 = call i32 @llvm.ctpop.i32(i32 %1328) #16
  %1330 = trunc i32 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = xor i8 %1331, 1
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1332, i8* %1333, align 1, !tbaa !2446
  %1334 = xor i64 1, %1317
  %1335 = trunc i64 %1334 to i32
  %1336 = xor i32 %1335, %1321
  %1337 = lshr i32 %1336, 4
  %1338 = trunc i32 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1339, i8* %1340, align 1, !tbaa !2447
  %1341 = icmp eq i32 %1321, 0
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1342, i8* %1343, align 1, !tbaa !2448
  %1344 = lshr i32 %1321, 31
  %1345 = trunc i32 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1345, i8* %1346, align 1, !tbaa !2449
  %1347 = lshr i32 %1320, 31
  %1348 = xor i32 %1344, %1347
  %1349 = add nuw nsw i32 %1348, %1344
  %1350 = icmp eq i32 %1349, 2
  %1351 = zext i1 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1351, i8* %1352, align 1, !tbaa !2450
  %1353 = load i64, i64* %RBP
  %1354 = sub i64 %1353, 72
  %1355 = load i32, i32* %EAX
  %1356 = zext i32 %1355 to i64
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 3
  store i64 %1358, i64* %PC
  %1359 = inttoptr i64 %1354 to i32*
  store i32 %1355, i32* %1359
  %1360 = load i64, i64* %PC
  %1361 = sub i64 %1360, 211
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 5
  store i64 %1363, i64* %PC
  %1364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1361, i64* %1364, align 8, !tbaa !2428
  br label %block_40189b

block_4018ae:                                     ; preds = %block_4018a7, %block_4018ba
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4018a7 ], [ %MEMORY.0, %block_4018ba ]
  %1365 = load i64, i64* %RBP
  %1366 = sub i64 %1365, 76
  %1367 = load i64, i64* %PC
  %1368 = add i64 %1367, 3
  store i64 %1368, i64* %PC
  %1369 = inttoptr i64 %1366 to i32*
  %1370 = load i32, i32* %1369
  %1371 = zext i32 %1370 to i64
  store i64 %1371, i64* %RAX, align 8, !tbaa !2428
  %1372 = load i32, i32* %EAX
  %1373 = zext i32 %1372 to i64
  %1374 = load i64, i64* %RBP
  %1375 = sub i64 %1374, 92
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 3
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1375 to i32*
  %1379 = load i32, i32* %1378
  %1380 = sub i32 %1372, %1379
  %1381 = icmp ult i32 %1372, %1379
  %1382 = zext i1 %1381 to i8
  %1383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1382, i8* %1383, align 1, !tbaa !2432
  %1384 = and i32 %1380, 255
  %1385 = call i32 @llvm.ctpop.i32(i32 %1384) #16
  %1386 = trunc i32 %1385 to i8
  %1387 = and i8 %1386, 1
  %1388 = xor i8 %1387, 1
  %1389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1388, i8* %1389, align 1, !tbaa !2446
  %1390 = xor i32 %1379, %1372
  %1391 = xor i32 %1390, %1380
  %1392 = lshr i32 %1391, 4
  %1393 = trunc i32 %1392 to i8
  %1394 = and i8 %1393, 1
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1394, i8* %1395, align 1, !tbaa !2447
  %1396 = icmp eq i32 %1380, 0
  %1397 = zext i1 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1397, i8* %1398, align 1, !tbaa !2448
  %1399 = lshr i32 %1380, 31
  %1400 = trunc i32 %1399 to i8
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1400, i8* %1401, align 1, !tbaa !2449
  %1402 = lshr i32 %1372, 31
  %1403 = lshr i32 %1379, 31
  %1404 = xor i32 %1403, %1402
  %1405 = xor i32 %1399, %1402
  %1406 = add nuw nsw i32 %1405, %1404
  %1407 = icmp eq i32 %1406, 2
  %1408 = zext i1 %1407 to i8
  %1409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1408, i8* %1409, align 1, !tbaa !2450
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 172
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 6
  %1414 = load i64, i64* %PC
  %1415 = add i64 %1414, 6
  store i64 %1415, i64* %PC
  %1416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1417 = load i8, i8* %1416, align 1, !tbaa !2449
  %1418 = icmp ne i8 %1417, 0
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1420 = load i8, i8* %1419, align 1, !tbaa !2450
  %1421 = icmp ne i8 %1420, 0
  %1422 = xor i1 %1418, %1421
  %1423 = xor i1 %1422, true
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1426 = select i1 %1422, i64 %1413, i64 %1411
  store i64 %1426, i64* %1425, align 8, !tbaa !2428
  %1427 = load i8, i8* %BRANCH_TAKEN
  %1428 = icmp eq i8 %1427, 1
  br i1 %1428, label %block_401960, label %block_4018ba

block_4018a7:                                     ; preds = %block_40189b
  %1429 = load i64, i64* %RBP
  %1430 = sub i64 %1429, 76
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 7
  store i64 %1432, i64* %PC
  %1433 = inttoptr i64 %1430 to i32*
  store i32 1, i32* %1433
  br label %block_4018ae

block_40189b:                                     ; preds = %block_401894, %block_401960
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_401894 ], [ %MEMORY.0, %block_401960 ]
  %1434 = load i64, i64* %RBP
  %1435 = sub i64 %1434, 72
  %1436 = load i64, i64* %PC
  %1437 = add i64 %1436, 3
  store i64 %1437, i64* %PC
  %1438 = inttoptr i64 %1435 to i32*
  %1439 = load i32, i32* %1438
  %1440 = zext i32 %1439 to i64
  store i64 %1440, i64* %RAX, align 8, !tbaa !2428
  %1441 = load i32, i32* %EAX
  %1442 = zext i32 %1441 to i64
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 88
  %1445 = load i64, i64* %PC
  %1446 = add i64 %1445, 3
  store i64 %1446, i64* %PC
  %1447 = inttoptr i64 %1444 to i32*
  %1448 = load i32, i32* %1447
  %1449 = sub i32 %1441, %1448
  %1450 = icmp ult i32 %1441, %1448
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1451, i8* %1452, align 1, !tbaa !2432
  %1453 = and i32 %1449, 255
  %1454 = call i32 @llvm.ctpop.i32(i32 %1453) #16
  %1455 = trunc i32 %1454 to i8
  %1456 = and i8 %1455, 1
  %1457 = xor i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1457, i8* %1458, align 1, !tbaa !2446
  %1459 = xor i32 %1448, %1441
  %1460 = xor i32 %1459, %1449
  %1461 = lshr i32 %1460, 4
  %1462 = trunc i32 %1461 to i8
  %1463 = and i8 %1462, 1
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1463, i8* %1464, align 1, !tbaa !2447
  %1465 = icmp eq i32 %1449, 0
  %1466 = zext i1 %1465 to i8
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1466, i8* %1467, align 1, !tbaa !2448
  %1468 = lshr i32 %1449, 31
  %1469 = trunc i32 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1469, i8* %1470, align 1, !tbaa !2449
  %1471 = lshr i32 %1441, 31
  %1472 = lshr i32 %1448, 31
  %1473 = xor i32 %1472, %1471
  %1474 = xor i32 %1468, %1471
  %1475 = add nuw nsw i32 %1474, %1473
  %1476 = icmp eq i32 %1475, 2
  %1477 = zext i1 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1477, i8* %1478, align 1, !tbaa !2450
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 210
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 6
  %1483 = load i64, i64* %PC
  %1484 = add i64 %1483, 6
  store i64 %1484, i64* %PC
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1486 = load i8, i8* %1485, align 1, !tbaa !2449
  %1487 = icmp ne i8 %1486, 0
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1489 = load i8, i8* %1488, align 1, !tbaa !2450
  %1490 = icmp ne i8 %1489, 0
  %1491 = xor i1 %1487, %1490
  %1492 = xor i1 %1491, true
  %1493 = zext i1 %1492 to i8
  store i8 %1493, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1495 = select i1 %1491, i64 %1482, i64 %1480
  store i64 %1495, i64* %1494, align 8, !tbaa !2428
  %1496 = load i8, i8* %BRANCH_TAKEN
  %1497 = icmp eq i8 %1496, 1
  br i1 %1497, label %block_401973, label %block_4018a7

block_400d9a:                                     ; preds = %block_400da6, %block_400d93
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.5, %block_400d93 ], [ %MEMORY.2, %block_400da6 ]
  %1498 = load i64, i64* %RBP
  %1499 = sub i64 %1498, 76
  %1500 = load i64, i64* %PC
  %1501 = add i64 %1500, 3
  store i64 %1501, i64* %PC
  %1502 = inttoptr i64 %1499 to i32*
  %1503 = load i32, i32* %1502
  %1504 = zext i32 %1503 to i64
  store i64 %1504, i64* %RAX, align 8, !tbaa !2428
  %1505 = load i32, i32* %EAX
  %1506 = zext i32 %1505 to i64
  %1507 = load i64, i64* %RBP
  %1508 = sub i64 %1507, 92
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 3
  store i64 %1510, i64* %PC
  %1511 = inttoptr i64 %1508 to i32*
  %1512 = load i32, i32* %1511
  %1513 = sub i32 %1505, %1512
  %1514 = icmp ult i32 %1505, %1512
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1515, i8* %1516, align 1, !tbaa !2432
  %1517 = and i32 %1513, 255
  %1518 = call i32 @llvm.ctpop.i32(i32 %1517) #16
  %1519 = trunc i32 %1518 to i8
  %1520 = and i8 %1519, 1
  %1521 = xor i8 %1520, 1
  %1522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1521, i8* %1522, align 1, !tbaa !2446
  %1523 = xor i32 %1512, %1505
  %1524 = xor i32 %1523, %1513
  %1525 = lshr i32 %1524, 4
  %1526 = trunc i32 %1525 to i8
  %1527 = and i8 %1526, 1
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1527, i8* %1528, align 1, !tbaa !2447
  %1529 = icmp eq i32 %1513, 0
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1530, i8* %1531, align 1, !tbaa !2448
  %1532 = lshr i32 %1513, 31
  %1533 = trunc i32 %1532 to i8
  %1534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1533, i8* %1534, align 1, !tbaa !2449
  %1535 = lshr i32 %1505, 31
  %1536 = lshr i32 %1512, 31
  %1537 = xor i32 %1536, %1535
  %1538 = xor i32 %1532, %1535
  %1539 = add nuw nsw i32 %1538, %1537
  %1540 = icmp eq i32 %1539, 2
  %1541 = zext i1 %1540 to i8
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1541, i8* %1542, align 1, !tbaa !2450
  %1543 = load i64, i64* %PC
  %1544 = add i64 %1543, 2747
  %1545 = load i64, i64* %PC
  %1546 = add i64 %1545, 6
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 6
  store i64 %1548, i64* %PC
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1550 = load i8, i8* %1549, align 1, !tbaa !2449
  %1551 = icmp ne i8 %1550, 0
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1553 = load i8, i8* %1552, align 1, !tbaa !2450
  %1554 = icmp ne i8 %1553, 0
  %1555 = xor i1 %1551, %1554
  %1556 = xor i1 %1555, true
  %1557 = zext i1 %1556 to i8
  store i8 %1557, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1559 = select i1 %1555, i64 %1546, i64 %1544
  store i64 %1559, i64* %1558, align 8, !tbaa !2428
  %1560 = load i8, i8* %BRANCH_TAKEN
  %1561 = icmp eq i8 %1560, 1
  br i1 %1561, label %block_40185b, label %block_400da6

block_401999:                                     ; preds = %block_400d59
  %1562 = load i64, i64* %RBP
  %1563 = sub i64 %1562, 96
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 5
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %1563 to float*
  %1567 = load float, float* %1566
  %1568 = bitcast i8* %1659 to float*
  store float %1567, float* %1568, align 1, !tbaa !2452
  %1569 = getelementptr inbounds i8, i8* %1659, i64 4
  %1570 = bitcast i8* %1569 to float*
  store float 0.000000e+00, float* %1570, align 1, !tbaa !2452
  %1571 = getelementptr inbounds i8, i8* %1659, i64 8
  %1572 = bitcast i8* %1571 to float*
  store float 0.000000e+00, float* %1572, align 1, !tbaa !2452
  %1573 = getelementptr inbounds i8, i8* %1659, i64 12
  %1574 = bitcast i8* %1573 to float*
  store float 0.000000e+00, float* %1574, align 1, !tbaa !2452
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 1
  store i64 %1576, i64* %PC
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1578 = load i64, i64* %1577, align 8, !tbaa !2428
  %1579 = add i64 %1578, 8
  %1580 = inttoptr i64 %1578 to i64*
  %1581 = load i64, i64* %1580
  store i64 %1581, i64* %RBP, align 8, !tbaa !2428
  store i64 %1579, i64* %1577, align 8, !tbaa !2428
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 1
  store i64 %1583, i64* %PC
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1586 = load i64, i64* %1585, align 8, !tbaa !2428
  %1587 = inttoptr i64 %1586 to i64*
  %1588 = load i64, i64* %1587
  store i64 %1588, i64* %1584, align 8, !tbaa !2428
  %1589 = add i64 %1586, 8
  store i64 %1589, i64* %1585, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3

block_401894:                                     ; preds = %block_401888
  %1590 = load i64, i64* %RBP
  %1591 = sub i64 %1590, 72
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 7
  store i64 %1593, i64* %PC
  %1594 = inttoptr i64 %1591 to i32*
  store i32 1, i32* %1594
  br label %block_40189b

block_400d59:                                     ; preds = %block_401986, %block_400d00
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400d00 ], [ %MEMORY.4, %block_401986 ]
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 80
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 3
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i32*
  %1600 = load i32, i32* %1599
  %1601 = zext i32 %1600 to i64
  store i64 %1601, i64* %RAX, align 8, !tbaa !2428
  %1602 = load i32, i32* %EAX
  %1603 = zext i32 %1602 to i64
  %1604 = load i64, i64* %RBP
  %1605 = sub i64 %1604, 4
  %1606 = load i64, i64* %PC
  %1607 = add i64 %1606, 3
  store i64 %1607, i64* %PC
  %1608 = inttoptr i64 %1605 to i32*
  %1609 = load i32, i32* %1608
  %1610 = sub i32 %1602, %1609
  %1611 = icmp ult i32 %1602, %1609
  %1612 = zext i1 %1611 to i8
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1612, i8* %1613, align 1, !tbaa !2432
  %1614 = and i32 %1610, 255
  %1615 = call i32 @llvm.ctpop.i32(i32 %1614) #16
  %1616 = trunc i32 %1615 to i8
  %1617 = and i8 %1616, 1
  %1618 = xor i8 %1617, 1
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1618, i8* %1619, align 1, !tbaa !2446
  %1620 = xor i32 %1609, %1602
  %1621 = xor i32 %1620, %1610
  %1622 = lshr i32 %1621, 4
  %1623 = trunc i32 %1622 to i8
  %1624 = and i8 %1623, 1
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1624, i8* %1625, align 1, !tbaa !2447
  %1626 = icmp eq i32 %1610, 0
  %1627 = zext i1 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1627, i8* %1628, align 1, !tbaa !2448
  %1629 = lshr i32 %1610, 31
  %1630 = trunc i32 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1630, i8* %1631, align 1, !tbaa !2449
  %1632 = lshr i32 %1602, 31
  %1633 = lshr i32 %1609, 31
  %1634 = xor i32 %1633, %1632
  %1635 = xor i32 %1629, %1632
  %1636 = add nuw nsw i32 %1635, %1634
  %1637 = icmp eq i32 %1636, 2
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1638, i8* %1639, align 1, !tbaa !2450
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 3130
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 6
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 6
  store i64 %1645, i64* %PC
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1647 = load i8, i8* %1646, align 1, !tbaa !2449
  %1648 = icmp ne i8 %1647, 0
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1650 = load i8, i8* %1649, align 1, !tbaa !2450
  %1651 = icmp ne i8 %1650, 0
  %1652 = xor i1 %1648, %1651
  %1653 = xor i1 %1652, true
  %1654 = zext i1 %1653 to i8
  store i8 %1654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1656 = select i1 %1652, i64 %1643, i64 %1641
  store i64 %1656, i64* %1655, align 8, !tbaa !2428
  %1657 = load i8, i8* %BRANCH_TAKEN
  %1658 = icmp eq i8 %1657, 1
  %1659 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %1658, label %block_401999, label %block_400d65

block_400d93:                                     ; preds = %block_400d87
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 76
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 7
  store i64 %1663, i64* %PC
  %1664 = inttoptr i64 %1661 to i32*
  store i32 1, i32* %1664
  br label %block_400d9a

block_400da6:                                     ; preds = %block_400d9a
  %1665 = load i64, i64* %RBP
  %1666 = sub i64 %1665, 16
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 4
  store i64 %1668, i64* %PC
  %1669 = inttoptr i64 %1666 to i64*
  %1670 = load i64, i64* %1669
  store i64 %1670, i64* %RAX, align 8, !tbaa !2428
  %1671 = load i64, i64* %RAX
  %1672 = load i64, i64* %PC
  %1673 = add i64 %1672, 3
  store i64 %1673, i64* %PC
  %1674 = inttoptr i64 %1671 to i64*
  %1675 = load i64, i64* %1674
  store i64 %1675, i64* %RAX, align 8, !tbaa !2428
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 16
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 4
  store i64 %1679, i64* %PC
  %1680 = inttoptr i64 %1677 to i64*
  %1681 = load i64, i64* %1680
  store i64 %1681, i64* %RCX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RCX
  %1683 = add i64 %1682, 12
  %1684 = load i64, i64* %PC
  %1685 = add i64 %1684, 4
  store i64 %1685, i64* %PC
  %1686 = inttoptr i64 %1683 to i32*
  %1687 = load i32, i32* %1686
  %1688 = sext i32 %1687 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1689, align 1, !tbaa !2432
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %1690, align 1, !tbaa !2446
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1691, align 1, !tbaa !2447
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1692, align 1, !tbaa !2448
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1693, align 1, !tbaa !2449
  %1694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1694, align 1, !tbaa !2450
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 16
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 4
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i64*
  %1700 = load i64, i64* %1699
  store i64 %1700, i64* %RCX, align 8, !tbaa !2428
  %1701 = load i64, i64* %RDX
  %1702 = load i64, i64* %RCX
  %1703 = add i64 %1702, 16
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 4
  store i64 %1705, i64* %PC
  %1706 = inttoptr i64 %1703 to i32*
  %1707 = load i32, i32* %1706
  %1708 = shl i64 %1701, 32
  %1709 = ashr exact i64 %1708, 32
  %1710 = sext i32 %1707 to i64
  %1711 = mul nsw i64 %1710, %1709
  %1712 = trunc i64 %1711 to i32
  %1713 = and i64 %1711, 4294967295
  store i64 %1713, i64* %RDX, align 8, !tbaa !2428
  %1714 = shl i64 %1711, 32
  %1715 = ashr exact i64 %1714, 32
  %1716 = icmp ne i64 %1715, %1711
  %1717 = zext i1 %1716 to i8
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1717, i8* %1718, align 1, !tbaa !2432
  %1719 = and i32 %1712, 255
  %1720 = call i32 @llvm.ctpop.i32(i32 %1719) #16
  %1721 = trunc i32 %1720 to i8
  %1722 = and i8 %1721, 1
  %1723 = xor i8 %1722, 1
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1723, i8* %1724, align 1, !tbaa !2446
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1725, align 1, !tbaa !2447
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1726, align 1, !tbaa !2448
  %1727 = lshr i32 %1712, 31
  %1728 = trunc i32 %1727 to i8
  %1729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1728, i8* %1729, align 1, !tbaa !2449
  %1730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1717, i8* %1730, align 1, !tbaa !2450
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 16
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 4
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i64*
  %1736 = load i64, i64* %1735
  store i64 %1736, i64* %RCX, align 8, !tbaa !2428
  %1737 = load i64, i64* %RDX
  %1738 = load i64, i64* %RCX
  %1739 = add i64 %1738, 20
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 4
  store i64 %1741, i64* %PC
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742
  %1744 = shl i64 %1737, 32
  %1745 = ashr exact i64 %1744, 32
  %1746 = sext i32 %1743 to i64
  %1747 = mul nsw i64 %1746, %1745
  %1748 = trunc i64 %1747 to i32
  %1749 = and i64 %1747, 4294967295
  store i64 %1749, i64* %RDX, align 8, !tbaa !2428
  %1750 = shl i64 %1747, 32
  %1751 = ashr exact i64 %1750, 32
  %1752 = icmp ne i64 %1751, %1747
  %1753 = zext i1 %1752 to i8
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1753, i8* %1754, align 1, !tbaa !2432
  %1755 = and i32 %1748, 255
  %1756 = call i32 @llvm.ctpop.i32(i32 %1755) #16
  %1757 = trunc i32 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = xor i8 %1758, 1
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1759, i8* %1760, align 1, !tbaa !2446
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1761, align 1, !tbaa !2447
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1762, align 1, !tbaa !2448
  %1763 = lshr i32 %1748, 31
  %1764 = trunc i32 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1764, i8* %1765, align 1, !tbaa !2449
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1753, i8* %1766, align 1, !tbaa !2450
  %1767 = load i64, i64* %RBP
  %1768 = sub i64 %1767, 68
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 3
  store i64 %1770, i64* %PC
  %1771 = inttoptr i64 %1768 to i32*
  %1772 = load i32, i32* %1771
  %1773 = zext i32 %1772 to i64
  store i64 %1773, i64* %RSI, align 8, !tbaa !2428
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 16
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 4
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to i64*
  %1779 = load i64, i64* %1778
  store i64 %1779, i64* %RCX, align 8, !tbaa !2428
  %1780 = load i64, i64* %RSI
  %1781 = load i64, i64* %RCX
  %1782 = add i64 %1781, 16
  %1783 = load i64, i64* %PC
  %1784 = add i64 %1783, 4
  store i64 %1784, i64* %PC
  %1785 = inttoptr i64 %1782 to i32*
  %1786 = load i32, i32* %1785
  %1787 = shl i64 %1780, 32
  %1788 = ashr exact i64 %1787, 32
  %1789 = sext i32 %1786 to i64
  %1790 = mul nsw i64 %1789, %1788
  %1791 = trunc i64 %1790 to i32
  %1792 = and i64 %1790, 4294967295
  store i64 %1792, i64* %RSI, align 8, !tbaa !2428
  %1793 = shl i64 %1790, 32
  %1794 = ashr exact i64 %1793, 32
  %1795 = icmp ne i64 %1794, %1790
  %1796 = zext i1 %1795 to i8
  %1797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1796, i8* %1797, align 1, !tbaa !2432
  %1798 = and i32 %1791, 255
  %1799 = call i32 @llvm.ctpop.i32(i32 %1798) #16
  %1800 = trunc i32 %1799 to i8
  %1801 = and i8 %1800, 1
  %1802 = xor i8 %1801, 1
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1802, i8* %1803, align 1, !tbaa !2446
  %1804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1804, align 1, !tbaa !2447
  %1805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1805, align 1, !tbaa !2448
  %1806 = lshr i32 %1791, 31
  %1807 = trunc i32 %1806 to i8
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1807, i8* %1808, align 1, !tbaa !2449
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1796, i8* %1809, align 1, !tbaa !2450
  %1810 = load i64, i64* %RBP
  %1811 = sub i64 %1810, 16
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 4
  store i64 %1813, i64* %PC
  %1814 = inttoptr i64 %1811 to i64*
  %1815 = load i64, i64* %1814
  store i64 %1815, i64* %RCX, align 8, !tbaa !2428
  %1816 = load i64, i64* %RSI
  %1817 = load i64, i64* %RCX
  %1818 = add i64 %1817, 20
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 4
  store i64 %1820, i64* %PC
  %1821 = inttoptr i64 %1818 to i32*
  %1822 = load i32, i32* %1821
  %1823 = shl i64 %1816, 32
  %1824 = ashr exact i64 %1823, 32
  %1825 = sext i32 %1822 to i64
  %1826 = mul nsw i64 %1825, %1824
  %1827 = trunc i64 %1826 to i32
  %1828 = and i64 %1826, 4294967295
  store i64 %1828, i64* %RSI, align 8, !tbaa !2428
  %1829 = shl i64 %1826, 32
  %1830 = ashr exact i64 %1829, 32
  %1831 = icmp ne i64 %1830, %1826
  %1832 = zext i1 %1831 to i8
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1832, i8* %1833, align 1, !tbaa !2432
  %1834 = and i32 %1827, 255
  %1835 = call i32 @llvm.ctpop.i32(i32 %1834) #16
  %1836 = trunc i32 %1835 to i8
  %1837 = and i8 %1836, 1
  %1838 = xor i8 %1837, 1
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1838, i8* %1839, align 1, !tbaa !2446
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1840, align 1, !tbaa !2447
  %1841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1841, align 1, !tbaa !2448
  %1842 = lshr i32 %1827, 31
  %1843 = trunc i32 %1842 to i8
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1843, i8* %1844, align 1, !tbaa !2449
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1832, i8* %1845, align 1, !tbaa !2450
  %1846 = load i64, i64* %RDX
  %1847 = load i32, i32* %ESI
  %1848 = zext i32 %1847 to i64
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 2
  store i64 %1850, i64* %PC
  %1851 = trunc i64 %1846 to i32
  %1852 = add i32 %1847, %1851
  %1853 = zext i32 %1852 to i64
  store i64 %1853, i64* %RDX, align 8, !tbaa !2428
  %1854 = icmp ult i32 %1852, %1851
  %1855 = icmp ult i32 %1852, %1847
  %1856 = or i1 %1854, %1855
  %1857 = zext i1 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1857, i8* %1858, align 1, !tbaa !2432
  %1859 = and i32 %1852, 255
  %1860 = call i32 @llvm.ctpop.i32(i32 %1859) #16
  %1861 = trunc i32 %1860 to i8
  %1862 = and i8 %1861, 1
  %1863 = xor i8 %1862, 1
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1863, i8* %1864, align 1, !tbaa !2446
  %1865 = xor i64 %1848, %1846
  %1866 = trunc i64 %1865 to i32
  %1867 = xor i32 %1866, %1852
  %1868 = lshr i32 %1867, 4
  %1869 = trunc i32 %1868 to i8
  %1870 = and i8 %1869, 1
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1870, i8* %1871, align 1, !tbaa !2447
  %1872 = icmp eq i32 %1852, 0
  %1873 = zext i1 %1872 to i8
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1873, i8* %1874, align 1, !tbaa !2448
  %1875 = lshr i32 %1852, 31
  %1876 = trunc i32 %1875 to i8
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1876, i8* %1877, align 1, !tbaa !2449
  %1878 = lshr i32 %1851, 31
  %1879 = lshr i32 %1847, 31
  %1880 = xor i32 %1875, %1878
  %1881 = xor i32 %1875, %1879
  %1882 = add nuw nsw i32 %1880, %1881
  %1883 = icmp eq i32 %1882, 2
  %1884 = zext i1 %1883 to i8
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1884, i8* %1885, align 1, !tbaa !2450
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 72
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 3
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  %1891 = load i32, i32* %1890
  %1892 = zext i32 %1891 to i64
  store i64 %1892, i64* %RSI, align 8, !tbaa !2428
  %1893 = load i64, i64* %RBP
  %1894 = sub i64 %1893, 16
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 4
  store i64 %1896, i64* %PC
  %1897 = inttoptr i64 %1894 to i64*
  %1898 = load i64, i64* %1897
  store i64 %1898, i64* %RCX, align 8, !tbaa !2428
  %1899 = load i64, i64* %RSI
  %1900 = load i64, i64* %RCX
  %1901 = add i64 %1900, 20
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 4
  store i64 %1903, i64* %PC
  %1904 = inttoptr i64 %1901 to i32*
  %1905 = load i32, i32* %1904
  %1906 = shl i64 %1899, 32
  %1907 = ashr exact i64 %1906, 32
  %1908 = sext i32 %1905 to i64
  %1909 = mul nsw i64 %1908, %1907
  %1910 = trunc i64 %1909 to i32
  %1911 = and i64 %1909, 4294967295
  store i64 %1911, i64* %RSI, align 8, !tbaa !2428
  %1912 = shl i64 %1909, 32
  %1913 = ashr exact i64 %1912, 32
  %1914 = icmp ne i64 %1913, %1909
  %1915 = zext i1 %1914 to i8
  %1916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1915, i8* %1916, align 1, !tbaa !2432
  %1917 = and i32 %1910, 255
  %1918 = call i32 @llvm.ctpop.i32(i32 %1917) #16
  %1919 = trunc i32 %1918 to i8
  %1920 = and i8 %1919, 1
  %1921 = xor i8 %1920, 1
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1921, i8* %1922, align 1, !tbaa !2446
  %1923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1923, align 1, !tbaa !2447
  %1924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1924, align 1, !tbaa !2448
  %1925 = lshr i32 %1910, 31
  %1926 = trunc i32 %1925 to i8
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1926, i8* %1927, align 1, !tbaa !2449
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1915, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RDX
  %1930 = load i32, i32* %ESI
  %1931 = zext i32 %1930 to i64
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 2
  store i64 %1933, i64* %PC
  %1934 = trunc i64 %1929 to i32
  %1935 = add i32 %1930, %1934
  %1936 = zext i32 %1935 to i64
  store i64 %1936, i64* %RDX, align 8, !tbaa !2428
  %1937 = icmp ult i32 %1935, %1934
  %1938 = icmp ult i32 %1935, %1930
  %1939 = or i1 %1937, %1938
  %1940 = zext i1 %1939 to i8
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1940, i8* %1941, align 1, !tbaa !2432
  %1942 = and i32 %1935, 255
  %1943 = call i32 @llvm.ctpop.i32(i32 %1942) #16
  %1944 = trunc i32 %1943 to i8
  %1945 = and i8 %1944, 1
  %1946 = xor i8 %1945, 1
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1946, i8* %1947, align 1, !tbaa !2446
  %1948 = xor i64 %1931, %1929
  %1949 = trunc i64 %1948 to i32
  %1950 = xor i32 %1949, %1935
  %1951 = lshr i32 %1950, 4
  %1952 = trunc i32 %1951 to i8
  %1953 = and i8 %1952, 1
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1953, i8* %1954, align 1, !tbaa !2447
  %1955 = icmp eq i32 %1935, 0
  %1956 = zext i1 %1955 to i8
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1956, i8* %1957, align 1, !tbaa !2448
  %1958 = lshr i32 %1935, 31
  %1959 = trunc i32 %1958 to i8
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1959, i8* %1960, align 1, !tbaa !2449
  %1961 = lshr i32 %1934, 31
  %1962 = lshr i32 %1930, 31
  %1963 = xor i32 %1958, %1961
  %1964 = xor i32 %1958, %1962
  %1965 = add nuw nsw i32 %1963, %1964
  %1966 = icmp eq i32 %1965, 2
  %1967 = zext i1 %1966 to i8
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1967, i8* %1968, align 1, !tbaa !2450
  %1969 = load i64, i64* %RDX
  %1970 = load i64, i64* %RBP
  %1971 = sub i64 %1970, 76
  %1972 = load i64, i64* %PC
  %1973 = add i64 %1972, 3
  store i64 %1973, i64* %PC
  %1974 = trunc i64 %1969 to i32
  %1975 = inttoptr i64 %1971 to i32*
  %1976 = load i32, i32* %1975
  %1977 = add i32 %1976, %1974
  %1978 = zext i32 %1977 to i64
  store i64 %1978, i64* %RDX, align 8, !tbaa !2428
  %1979 = icmp ult i32 %1977, %1974
  %1980 = icmp ult i32 %1977, %1976
  %1981 = or i1 %1979, %1980
  %1982 = zext i1 %1981 to i8
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1982, i8* %1983, align 1, !tbaa !2432
  %1984 = and i32 %1977, 255
  %1985 = call i32 @llvm.ctpop.i32(i32 %1984) #16
  %1986 = trunc i32 %1985 to i8
  %1987 = and i8 %1986, 1
  %1988 = xor i8 %1987, 1
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1988, i8* %1989, align 1, !tbaa !2446
  %1990 = xor i32 %1976, %1974
  %1991 = xor i32 %1990, %1977
  %1992 = lshr i32 %1991, 4
  %1993 = trunc i32 %1992 to i8
  %1994 = and i8 %1993, 1
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1994, i8* %1995, align 1, !tbaa !2447
  %1996 = icmp eq i32 %1977, 0
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1997, i8* %1998, align 1, !tbaa !2448
  %1999 = lshr i32 %1977, 31
  %2000 = trunc i32 %1999 to i8
  %2001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2000, i8* %2001, align 1, !tbaa !2449
  %2002 = lshr i32 %1974, 31
  %2003 = lshr i32 %1976, 31
  %2004 = xor i32 %1999, %2002
  %2005 = xor i32 %1999, %2003
  %2006 = add nuw nsw i32 %2004, %2005
  %2007 = icmp eq i32 %2006, 2
  %2008 = zext i1 %2007 to i8
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2008, i8* %2009, align 1, !tbaa !2450
  %2010 = load i32, i32* %EDX
  %2011 = zext i32 %2010 to i64
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 3
  store i64 %2013, i64* %PC
  %2014 = shl i64 %2011, 32
  %2015 = ashr exact i64 %2014, 32
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2017 = load i64, i64* %RAX
  %2018 = load i64, i64* %RCX
  %2019 = mul i64 %2018, 4
  %2020 = add i64 %2019, %2017
  %2021 = load i64, i64* %PC
  %2022 = add i64 %2021, 5
  store i64 %2022, i64* %PC
  %2023 = inttoptr i64 %2020 to float*
  %2024 = load float, float* %2023
  %2025 = bitcast i8* %2016 to float*
  store float %2024, float* %2025, align 1, !tbaa !2452
  %2026 = getelementptr inbounds i8, i8* %2016, i64 4
  %2027 = bitcast i8* %2026 to float*
  store float 0.000000e+00, float* %2027, align 1, !tbaa !2452
  %2028 = getelementptr inbounds i8, i8* %2016, i64 8
  %2029 = bitcast i8* %2028 to float*
  store float 0.000000e+00, float* %2029, align 1, !tbaa !2452
  %2030 = getelementptr inbounds i8, i8* %2016, i64 12
  %2031 = bitcast i8* %2030 to float*
  store float 0.000000e+00, float* %2031, align 1, !tbaa !2452
  %2032 = load i64, i64* %RBP
  %2033 = sub i64 %2032, 40
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 4
  store i64 %2035, i64* %PC
  %2036 = inttoptr i64 %2033 to i64*
  %2037 = load i64, i64* %2036
  store i64 %2037, i64* %RAX, align 8, !tbaa !2428
  %2038 = load i64, i64* %RAX
  %2039 = load i64, i64* %PC
  %2040 = add i64 %2039, 3
  store i64 %2040, i64* %PC
  %2041 = inttoptr i64 %2038 to i64*
  %2042 = load i64, i64* %2041
  store i64 %2042, i64* %RAX, align 8, !tbaa !2428
  %2043 = load i64, i64* %RBP
  %2044 = sub i64 %2043, 40
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 4
  store i64 %2046, i64* %PC
  %2047 = inttoptr i64 %2044 to i64*
  %2048 = load i64, i64* %2047
  store i64 %2048, i64* %RCX, align 8, !tbaa !2428
  %2049 = load i64, i64* %RCX
  %2050 = add i64 %2049, 12
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 4
  store i64 %2052, i64* %PC
  %2053 = inttoptr i64 %2050 to i32*
  %2054 = load i32, i32* %2053
  %2055 = sext i32 %2054 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2056, align 1, !tbaa !2432
  %2057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2057, align 1, !tbaa !2446
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2058, align 1, !tbaa !2447
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2059, align 1, !tbaa !2448
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2060, align 1, !tbaa !2449
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2061, align 1, !tbaa !2450
  %2062 = load i64, i64* %RBP
  %2063 = sub i64 %2062, 40
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 4
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2063 to i64*
  %2067 = load i64, i64* %2066
  store i64 %2067, i64* %RCX, align 8, !tbaa !2428
  %2068 = load i64, i64* %RDX
  %2069 = load i64, i64* %RCX
  %2070 = add i64 %2069, 16
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 4
  store i64 %2072, i64* %PC
  %2073 = inttoptr i64 %2070 to i32*
  %2074 = load i32, i32* %2073
  %2075 = shl i64 %2068, 32
  %2076 = ashr exact i64 %2075, 32
  %2077 = sext i32 %2074 to i64
  %2078 = mul nsw i64 %2077, %2076
  %2079 = trunc i64 %2078 to i32
  %2080 = and i64 %2078, 4294967295
  store i64 %2080, i64* %RDX, align 8, !tbaa !2428
  %2081 = shl i64 %2078, 32
  %2082 = ashr exact i64 %2081, 32
  %2083 = icmp ne i64 %2082, %2078
  %2084 = zext i1 %2083 to i8
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2084, i8* %2085, align 1, !tbaa !2432
  %2086 = and i32 %2079, 255
  %2087 = call i32 @llvm.ctpop.i32(i32 %2086) #16
  %2088 = trunc i32 %2087 to i8
  %2089 = and i8 %2088, 1
  %2090 = xor i8 %2089, 1
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2090, i8* %2091, align 1, !tbaa !2446
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2092, align 1, !tbaa !2447
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2093, align 1, !tbaa !2448
  %2094 = lshr i32 %2079, 31
  %2095 = trunc i32 %2094 to i8
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2095, i8* %2096, align 1, !tbaa !2449
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2084, i8* %2097, align 1, !tbaa !2450
  %2098 = load i64, i64* %RBP
  %2099 = sub i64 %2098, 40
  %2100 = load i64, i64* %PC
  %2101 = add i64 %2100, 4
  store i64 %2101, i64* %PC
  %2102 = inttoptr i64 %2099 to i64*
  %2103 = load i64, i64* %2102
  store i64 %2103, i64* %RCX, align 8, !tbaa !2428
  %2104 = load i64, i64* %RDX
  %2105 = load i64, i64* %RCX
  %2106 = add i64 %2105, 20
  %2107 = load i64, i64* %PC
  %2108 = add i64 %2107, 4
  store i64 %2108, i64* %PC
  %2109 = inttoptr i64 %2106 to i32*
  %2110 = load i32, i32* %2109
  %2111 = shl i64 %2104, 32
  %2112 = ashr exact i64 %2111, 32
  %2113 = sext i32 %2110 to i64
  %2114 = mul nsw i64 %2113, %2112
  %2115 = trunc i64 %2114 to i32
  %2116 = and i64 %2114, 4294967295
  store i64 %2116, i64* %RDX, align 8, !tbaa !2428
  %2117 = shl i64 %2114, 32
  %2118 = ashr exact i64 %2117, 32
  %2119 = icmp ne i64 %2118, %2114
  %2120 = zext i1 %2119 to i8
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2120, i8* %2121, align 1, !tbaa !2432
  %2122 = and i32 %2115, 255
  %2123 = call i32 @llvm.ctpop.i32(i32 %2122) #16
  %2124 = trunc i32 %2123 to i8
  %2125 = and i8 %2124, 1
  %2126 = xor i8 %2125, 1
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2126, i8* %2127, align 1, !tbaa !2446
  %2128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2128, align 1, !tbaa !2447
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2129, align 1, !tbaa !2448
  %2130 = lshr i32 %2115, 31
  %2131 = trunc i32 %2130 to i8
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2131, i8* %2132, align 1, !tbaa !2449
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2120, i8* %2133, align 1, !tbaa !2450
  %2134 = load i64, i64* %RBP
  %2135 = sub i64 %2134, 68
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 3
  store i64 %2137, i64* %PC
  %2138 = inttoptr i64 %2135 to i32*
  %2139 = load i32, i32* %2138
  %2140 = zext i32 %2139 to i64
  store i64 %2140, i64* %RSI, align 8, !tbaa !2428
  %2141 = load i64, i64* %RSI
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 3
  store i64 %2143, i64* %PC
  %2144 = trunc i64 %2141 to i32
  %2145 = add i32 1, %2144
  %2146 = zext i32 %2145 to i64
  store i64 %2146, i64* %RSI, align 8, !tbaa !2428
  %2147 = icmp ult i32 %2145, %2144
  %2148 = icmp ult i32 %2145, 1
  %2149 = or i1 %2147, %2148
  %2150 = zext i1 %2149 to i8
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2150, i8* %2151, align 1, !tbaa !2432
  %2152 = and i32 %2145, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #16
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2156, i8* %2157, align 1, !tbaa !2446
  %2158 = xor i64 1, %2141
  %2159 = trunc i64 %2158 to i32
  %2160 = xor i32 %2159, %2145
  %2161 = lshr i32 %2160, 4
  %2162 = trunc i32 %2161 to i8
  %2163 = and i8 %2162, 1
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2163, i8* %2164, align 1, !tbaa !2447
  %2165 = icmp eq i32 %2145, 0
  %2166 = zext i1 %2165 to i8
  %2167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2166, i8* %2167, align 1, !tbaa !2448
  %2168 = lshr i32 %2145, 31
  %2169 = trunc i32 %2168 to i8
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2169, i8* %2170, align 1, !tbaa !2449
  %2171 = lshr i32 %2144, 31
  %2172 = xor i32 %2168, %2171
  %2173 = add nuw nsw i32 %2172, %2168
  %2174 = icmp eq i32 %2173, 2
  %2175 = zext i1 %2174 to i8
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2175, i8* %2176, align 1, !tbaa !2450
  %2177 = load i64, i64* %RBP
  %2178 = sub i64 %2177, 40
  %2179 = load i64, i64* %PC
  %2180 = add i64 %2179, 4
  store i64 %2180, i64* %PC
  %2181 = inttoptr i64 %2178 to i64*
  %2182 = load i64, i64* %2181
  store i64 %2182, i64* %RCX, align 8, !tbaa !2428
  %2183 = load i64, i64* %RSI
  %2184 = load i64, i64* %RCX
  %2185 = add i64 %2184, 16
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 4
  store i64 %2187, i64* %PC
  %2188 = inttoptr i64 %2185 to i32*
  %2189 = load i32, i32* %2188
  %2190 = shl i64 %2183, 32
  %2191 = ashr exact i64 %2190, 32
  %2192 = sext i32 %2189 to i64
  %2193 = mul nsw i64 %2192, %2191
  %2194 = trunc i64 %2193 to i32
  %2195 = and i64 %2193, 4294967295
  store i64 %2195, i64* %RSI, align 8, !tbaa !2428
  %2196 = shl i64 %2193, 32
  %2197 = ashr exact i64 %2196, 32
  %2198 = icmp ne i64 %2197, %2193
  %2199 = zext i1 %2198 to i8
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2199, i8* %2200, align 1, !tbaa !2432
  %2201 = and i32 %2194, 255
  %2202 = call i32 @llvm.ctpop.i32(i32 %2201) #16
  %2203 = trunc i32 %2202 to i8
  %2204 = and i8 %2203, 1
  %2205 = xor i8 %2204, 1
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2205, i8* %2206, align 1, !tbaa !2446
  %2207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2207, align 1, !tbaa !2447
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2208, align 1, !tbaa !2448
  %2209 = lshr i32 %2194, 31
  %2210 = trunc i32 %2209 to i8
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2210, i8* %2211, align 1, !tbaa !2449
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2199, i8* %2212, align 1, !tbaa !2450
  %2213 = load i64, i64* %RBP
  %2214 = sub i64 %2213, 40
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 4
  store i64 %2216, i64* %PC
  %2217 = inttoptr i64 %2214 to i64*
  %2218 = load i64, i64* %2217
  store i64 %2218, i64* %RCX, align 8, !tbaa !2428
  %2219 = load i64, i64* %RSI
  %2220 = load i64, i64* %RCX
  %2221 = add i64 %2220, 20
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 4
  store i64 %2223, i64* %PC
  %2224 = inttoptr i64 %2221 to i32*
  %2225 = load i32, i32* %2224
  %2226 = shl i64 %2219, 32
  %2227 = ashr exact i64 %2226, 32
  %2228 = sext i32 %2225 to i64
  %2229 = mul nsw i64 %2228, %2227
  %2230 = trunc i64 %2229 to i32
  %2231 = and i64 %2229, 4294967295
  store i64 %2231, i64* %RSI, align 8, !tbaa !2428
  %2232 = shl i64 %2229, 32
  %2233 = ashr exact i64 %2232, 32
  %2234 = icmp ne i64 %2233, %2229
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2235, i8* %2236, align 1, !tbaa !2432
  %2237 = and i32 %2230, 255
  %2238 = call i32 @llvm.ctpop.i32(i32 %2237) #16
  %2239 = trunc i32 %2238 to i8
  %2240 = and i8 %2239, 1
  %2241 = xor i8 %2240, 1
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2241, i8* %2242, align 1, !tbaa !2446
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2243, align 1, !tbaa !2447
  %2244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2244, align 1, !tbaa !2448
  %2245 = lshr i32 %2230, 31
  %2246 = trunc i32 %2245 to i8
  %2247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2246, i8* %2247, align 1, !tbaa !2449
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2235, i8* %2248, align 1, !tbaa !2450
  %2249 = load i64, i64* %RDX
  %2250 = load i32, i32* %ESI
  %2251 = zext i32 %2250 to i64
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 2
  store i64 %2253, i64* %PC
  %2254 = trunc i64 %2249 to i32
  %2255 = add i32 %2250, %2254
  %2256 = zext i32 %2255 to i64
  store i64 %2256, i64* %RDX, align 8, !tbaa !2428
  %2257 = icmp ult i32 %2255, %2254
  %2258 = icmp ult i32 %2255, %2250
  %2259 = or i1 %2257, %2258
  %2260 = zext i1 %2259 to i8
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2260, i8* %2261, align 1, !tbaa !2432
  %2262 = and i32 %2255, 255
  %2263 = call i32 @llvm.ctpop.i32(i32 %2262) #16
  %2264 = trunc i32 %2263 to i8
  %2265 = and i8 %2264, 1
  %2266 = xor i8 %2265, 1
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2266, i8* %2267, align 1, !tbaa !2446
  %2268 = xor i64 %2251, %2249
  %2269 = trunc i64 %2268 to i32
  %2270 = xor i32 %2269, %2255
  %2271 = lshr i32 %2270, 4
  %2272 = trunc i32 %2271 to i8
  %2273 = and i8 %2272, 1
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2273, i8* %2274, align 1, !tbaa !2447
  %2275 = icmp eq i32 %2255, 0
  %2276 = zext i1 %2275 to i8
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2276, i8* %2277, align 1, !tbaa !2448
  %2278 = lshr i32 %2255, 31
  %2279 = trunc i32 %2278 to i8
  %2280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2279, i8* %2280, align 1, !tbaa !2449
  %2281 = lshr i32 %2254, 31
  %2282 = lshr i32 %2250, 31
  %2283 = xor i32 %2278, %2281
  %2284 = xor i32 %2278, %2282
  %2285 = add nuw nsw i32 %2283, %2284
  %2286 = icmp eq i32 %2285, 2
  %2287 = zext i1 %2286 to i8
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2287, i8* %2288, align 1, !tbaa !2450
  %2289 = load i64, i64* %RBP
  %2290 = sub i64 %2289, 72
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2290 to i32*
  %2294 = load i32, i32* %2293
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RSI, align 8, !tbaa !2428
  %2296 = load i64, i64* %RBP
  %2297 = sub i64 %2296, 40
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RSI
  %2303 = load i64, i64* %RCX
  %2304 = add i64 %2303, 20
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 4
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2304 to i32*
  %2308 = load i32, i32* %2307
  %2309 = shl i64 %2302, 32
  %2310 = ashr exact i64 %2309, 32
  %2311 = sext i32 %2308 to i64
  %2312 = mul nsw i64 %2311, %2310
  %2313 = trunc i64 %2312 to i32
  %2314 = and i64 %2312, 4294967295
  store i64 %2314, i64* %RSI, align 8, !tbaa !2428
  %2315 = shl i64 %2312, 32
  %2316 = ashr exact i64 %2315, 32
  %2317 = icmp ne i64 %2316, %2312
  %2318 = zext i1 %2317 to i8
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2318, i8* %2319, align 1, !tbaa !2432
  %2320 = and i32 %2313, 255
  %2321 = call i32 @llvm.ctpop.i32(i32 %2320) #16
  %2322 = trunc i32 %2321 to i8
  %2323 = and i8 %2322, 1
  %2324 = xor i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2324, i8* %2325, align 1, !tbaa !2446
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2326, align 1, !tbaa !2447
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2327, align 1, !tbaa !2448
  %2328 = lshr i32 %2313, 31
  %2329 = trunc i32 %2328 to i8
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2329, i8* %2330, align 1, !tbaa !2449
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2318, i8* %2331, align 1, !tbaa !2450
  %2332 = load i64, i64* %RDX
  %2333 = load i32, i32* %ESI
  %2334 = zext i32 %2333 to i64
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 2
  store i64 %2336, i64* %PC
  %2337 = trunc i64 %2332 to i32
  %2338 = add i32 %2333, %2337
  %2339 = zext i32 %2338 to i64
  store i64 %2339, i64* %RDX, align 8, !tbaa !2428
  %2340 = icmp ult i32 %2338, %2337
  %2341 = icmp ult i32 %2338, %2333
  %2342 = or i1 %2340, %2341
  %2343 = zext i1 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2343, i8* %2344, align 1, !tbaa !2432
  %2345 = and i32 %2338, 255
  %2346 = call i32 @llvm.ctpop.i32(i32 %2345) #16
  %2347 = trunc i32 %2346 to i8
  %2348 = and i8 %2347, 1
  %2349 = xor i8 %2348, 1
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2349, i8* %2350, align 1, !tbaa !2446
  %2351 = xor i64 %2334, %2332
  %2352 = trunc i64 %2351 to i32
  %2353 = xor i32 %2352, %2338
  %2354 = lshr i32 %2353, 4
  %2355 = trunc i32 %2354 to i8
  %2356 = and i8 %2355, 1
  %2357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2356, i8* %2357, align 1, !tbaa !2447
  %2358 = icmp eq i32 %2338, 0
  %2359 = zext i1 %2358 to i8
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2359, i8* %2360, align 1, !tbaa !2448
  %2361 = lshr i32 %2338, 31
  %2362 = trunc i32 %2361 to i8
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2362, i8* %2363, align 1, !tbaa !2449
  %2364 = lshr i32 %2337, 31
  %2365 = lshr i32 %2333, 31
  %2366 = xor i32 %2361, %2364
  %2367 = xor i32 %2361, %2365
  %2368 = add nuw nsw i32 %2366, %2367
  %2369 = icmp eq i32 %2368, 2
  %2370 = zext i1 %2369 to i8
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2370, i8* %2371, align 1, !tbaa !2450
  %2372 = load i64, i64* %RDX
  %2373 = load i64, i64* %RBP
  %2374 = sub i64 %2373, 76
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 3
  store i64 %2376, i64* %PC
  %2377 = trunc i64 %2372 to i32
  %2378 = inttoptr i64 %2374 to i32*
  %2379 = load i32, i32* %2378
  %2380 = add i32 %2379, %2377
  %2381 = zext i32 %2380 to i64
  store i64 %2381, i64* %RDX, align 8, !tbaa !2428
  %2382 = icmp ult i32 %2380, %2377
  %2383 = icmp ult i32 %2380, %2379
  %2384 = or i1 %2382, %2383
  %2385 = zext i1 %2384 to i8
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2385, i8* %2386, align 1, !tbaa !2432
  %2387 = and i32 %2380, 255
  %2388 = call i32 @llvm.ctpop.i32(i32 %2387) #16
  %2389 = trunc i32 %2388 to i8
  %2390 = and i8 %2389, 1
  %2391 = xor i8 %2390, 1
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2391, i8* %2392, align 1, !tbaa !2446
  %2393 = xor i32 %2379, %2377
  %2394 = xor i32 %2393, %2380
  %2395 = lshr i32 %2394, 4
  %2396 = trunc i32 %2395 to i8
  %2397 = and i8 %2396, 1
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2397, i8* %2398, align 1, !tbaa !2447
  %2399 = icmp eq i32 %2380, 0
  %2400 = zext i1 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2400, i8* %2401, align 1, !tbaa !2448
  %2402 = lshr i32 %2380, 31
  %2403 = trunc i32 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2403, i8* %2404, align 1, !tbaa !2449
  %2405 = lshr i32 %2377, 31
  %2406 = lshr i32 %2379, 31
  %2407 = xor i32 %2402, %2405
  %2408 = xor i32 %2402, %2406
  %2409 = add nuw nsw i32 %2407, %2408
  %2410 = icmp eq i32 %2409, 2
  %2411 = zext i1 %2410 to i8
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2411, i8* %2412, align 1, !tbaa !2450
  %2413 = load i32, i32* %EDX
  %2414 = zext i32 %2413 to i64
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 3
  store i64 %2416, i64* %PC
  %2417 = shl i64 %2414, 32
  %2418 = ashr exact i64 %2417, 32
  store i64 %2418, i64* %RCX, align 8, !tbaa !2428
  %2419 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2420 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2421 = load i64, i64* %RAX
  %2422 = load i64, i64* %RCX
  %2423 = mul i64 %2422, 4
  %2424 = add i64 %2423, %2421
  %2425 = load i64, i64* %PC
  %2426 = add i64 %2425, 5
  store i64 %2426, i64* %PC
  %2427 = bitcast i8* %2420 to <2 x float>*
  %2428 = load <2 x float>, <2 x float>* %2427, align 1
  %2429 = getelementptr inbounds i8, i8* %2420, i64 8
  %2430 = bitcast i8* %2429 to <2 x i32>*
  %2431 = load <2 x i32>, <2 x i32>* %2430, align 1
  %2432 = inttoptr i64 %2424 to float*
  %2433 = load float, float* %2432
  %2434 = extractelement <2 x float> %2428, i32 0
  %2435 = fmul float %2434, %2433
  %2436 = bitcast i8* %2419 to float*
  store float %2435, float* %2436, align 1, !tbaa !2452
  %2437 = bitcast <2 x float> %2428 to <2 x i32>
  %2438 = extractelement <2 x i32> %2437, i32 1
  %2439 = getelementptr inbounds i8, i8* %2419, i64 4
  %2440 = bitcast i8* %2439 to i32*
  store i32 %2438, i32* %2440, align 1, !tbaa !2452
  %2441 = extractelement <2 x i32> %2431, i32 0
  %2442 = getelementptr inbounds i8, i8* %2419, i64 8
  %2443 = bitcast i8* %2442 to i32*
  store i32 %2441, i32* %2443, align 1, !tbaa !2452
  %2444 = extractelement <2 x i32> %2431, i32 1
  %2445 = getelementptr inbounds i8, i8* %2419, i64 12
  %2446 = bitcast i8* %2445 to i32*
  store i32 %2444, i32* %2446, align 1, !tbaa !2452
  %2447 = load i64, i64* %RBP
  %2448 = sub i64 %2447, 16
  %2449 = load i64, i64* %PC
  %2450 = add i64 %2449, 4
  store i64 %2450, i64* %PC
  %2451 = inttoptr i64 %2448 to i64*
  %2452 = load i64, i64* %2451
  store i64 %2452, i64* %RAX, align 8, !tbaa !2428
  %2453 = load i64, i64* %RAX
  %2454 = load i64, i64* %PC
  %2455 = add i64 %2454, 3
  store i64 %2455, i64* %PC
  %2456 = inttoptr i64 %2453 to i64*
  %2457 = load i64, i64* %2456
  store i64 %2457, i64* %RAX, align 8, !tbaa !2428
  %2458 = load i64, i64* %RBP
  %2459 = sub i64 %2458, 16
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 4
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2459 to i64*
  %2463 = load i64, i64* %2462
  store i64 %2463, i64* %RCX, align 8, !tbaa !2428
  %2464 = load i64, i64* %RCX
  %2465 = add i64 %2464, 12
  %2466 = load i64, i64* %PC
  %2467 = add i64 %2466, 3
  store i64 %2467, i64* %PC
  %2468 = inttoptr i64 %2465 to i32*
  %2469 = load i32, i32* %2468
  %2470 = zext i32 %2469 to i64
  store i64 %2470, i64* %RDX, align 8, !tbaa !2428
  %2471 = load i64, i64* %RDX
  %2472 = load i64, i64* %PC
  %2473 = add i64 %2472, 3
  store i64 %2473, i64* %PC
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 16
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 4
  store i64 %2477, i64* %PC
  %2478 = inttoptr i64 %2475 to i64*
  %2479 = load i64, i64* %2478
  store i64 %2479, i64* %RCX, align 8, !tbaa !2428
  %2480 = load i64, i64* %RDX
  %2481 = load i64, i64* %RCX
  %2482 = add i64 %2481, 16
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 4
  store i64 %2484, i64* %PC
  %2485 = inttoptr i64 %2482 to i32*
  %2486 = load i32, i32* %2485
  %2487 = shl i64 %2480, 32
  %2488 = ashr exact i64 %2487, 32
  %2489 = sext i32 %2486 to i64
  %2490 = mul nsw i64 %2489, %2488
  %2491 = trunc i64 %2490 to i32
  %2492 = and i64 %2490, 4294967295
  store i64 %2492, i64* %RDX, align 8, !tbaa !2428
  %2493 = shl i64 %2490, 32
  %2494 = ashr exact i64 %2493, 32
  %2495 = icmp ne i64 %2494, %2490
  %2496 = zext i1 %2495 to i8
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2496, i8* %2497, align 1, !tbaa !2432
  %2498 = and i32 %2491, 255
  %2499 = call i32 @llvm.ctpop.i32(i32 %2498) #16
  %2500 = trunc i32 %2499 to i8
  %2501 = and i8 %2500, 1
  %2502 = xor i8 %2501, 1
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2502, i8* %2503, align 1, !tbaa !2446
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2504, align 1, !tbaa !2447
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2505, align 1, !tbaa !2448
  %2506 = lshr i32 %2491, 31
  %2507 = trunc i32 %2506 to i8
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2507, i8* %2508, align 1, !tbaa !2449
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2496, i8* %2509, align 1, !tbaa !2450
  %2510 = load i64, i64* %RBP
  %2511 = sub i64 %2510, 16
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 4
  store i64 %2513, i64* %PC
  %2514 = inttoptr i64 %2511 to i64*
  %2515 = load i64, i64* %2514
  store i64 %2515, i64* %RCX, align 8, !tbaa !2428
  %2516 = load i64, i64* %RDX
  %2517 = load i64, i64* %RCX
  %2518 = add i64 %2517, 20
  %2519 = load i64, i64* %PC
  %2520 = add i64 %2519, 4
  store i64 %2520, i64* %PC
  %2521 = inttoptr i64 %2518 to i32*
  %2522 = load i32, i32* %2521
  %2523 = shl i64 %2516, 32
  %2524 = ashr exact i64 %2523, 32
  %2525 = sext i32 %2522 to i64
  %2526 = mul nsw i64 %2525, %2524
  %2527 = trunc i64 %2526 to i32
  %2528 = and i64 %2526, 4294967295
  store i64 %2528, i64* %RDX, align 8, !tbaa !2428
  %2529 = shl i64 %2526, 32
  %2530 = ashr exact i64 %2529, 32
  %2531 = icmp ne i64 %2530, %2526
  %2532 = zext i1 %2531 to i8
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2532, i8* %2533, align 1, !tbaa !2432
  %2534 = and i32 %2527, 255
  %2535 = call i32 @llvm.ctpop.i32(i32 %2534) #16
  %2536 = trunc i32 %2535 to i8
  %2537 = and i8 %2536, 1
  %2538 = xor i8 %2537, 1
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2538, i8* %2539, align 1, !tbaa !2446
  %2540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2540, align 1, !tbaa !2447
  %2541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2541, align 1, !tbaa !2448
  %2542 = lshr i32 %2527, 31
  %2543 = trunc i32 %2542 to i8
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2543, i8* %2544, align 1, !tbaa !2449
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2532, i8* %2545, align 1, !tbaa !2450
  %2546 = load i64, i64* %RBP
  %2547 = sub i64 %2546, 68
  %2548 = load i64, i64* %PC
  %2549 = add i64 %2548, 3
  store i64 %2549, i64* %PC
  %2550 = inttoptr i64 %2547 to i32*
  %2551 = load i32, i32* %2550
  %2552 = zext i32 %2551 to i64
  store i64 %2552, i64* %RSI, align 8, !tbaa !2428
  %2553 = load i64, i64* %RBP
  %2554 = sub i64 %2553, 16
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 4
  store i64 %2556, i64* %PC
  %2557 = inttoptr i64 %2554 to i64*
  %2558 = load i64, i64* %2557
  store i64 %2558, i64* %RCX, align 8, !tbaa !2428
  %2559 = load i64, i64* %RSI
  %2560 = load i64, i64* %RCX
  %2561 = add i64 %2560, 16
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 4
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i32*
  %2565 = load i32, i32* %2564
  %2566 = shl i64 %2559, 32
  %2567 = ashr exact i64 %2566, 32
  %2568 = sext i32 %2565 to i64
  %2569 = mul nsw i64 %2568, %2567
  %2570 = trunc i64 %2569 to i32
  %2571 = and i64 %2569, 4294967295
  store i64 %2571, i64* %RSI, align 8, !tbaa !2428
  %2572 = shl i64 %2569, 32
  %2573 = ashr exact i64 %2572, 32
  %2574 = icmp ne i64 %2573, %2569
  %2575 = zext i1 %2574 to i8
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2575, i8* %2576, align 1, !tbaa !2432
  %2577 = and i32 %2570, 255
  %2578 = call i32 @llvm.ctpop.i32(i32 %2577) #16
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  %2581 = xor i8 %2580, 1
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2581, i8* %2582, align 1, !tbaa !2446
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2583, align 1, !tbaa !2447
  %2584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2584, align 1, !tbaa !2448
  %2585 = lshr i32 %2570, 31
  %2586 = trunc i32 %2585 to i8
  %2587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2586, i8* %2587, align 1, !tbaa !2449
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2575, i8* %2588, align 1, !tbaa !2450
  %2589 = load i64, i64* %RBP
  %2590 = sub i64 %2589, 16
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 4
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2590 to i64*
  %2594 = load i64, i64* %2593
  store i64 %2594, i64* %RCX, align 8, !tbaa !2428
  %2595 = load i64, i64* %RSI
  %2596 = load i64, i64* %RCX
  %2597 = add i64 %2596, 20
  %2598 = load i64, i64* %PC
  %2599 = add i64 %2598, 4
  store i64 %2599, i64* %PC
  %2600 = inttoptr i64 %2597 to i32*
  %2601 = load i32, i32* %2600
  %2602 = shl i64 %2595, 32
  %2603 = ashr exact i64 %2602, 32
  %2604 = sext i32 %2601 to i64
  %2605 = mul nsw i64 %2604, %2603
  %2606 = trunc i64 %2605 to i32
  %2607 = and i64 %2605, 4294967295
  store i64 %2607, i64* %RSI, align 8, !tbaa !2428
  %2608 = shl i64 %2605, 32
  %2609 = ashr exact i64 %2608, 32
  %2610 = icmp ne i64 %2609, %2605
  %2611 = zext i1 %2610 to i8
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2611, i8* %2612, align 1, !tbaa !2432
  %2613 = and i32 %2606, 255
  %2614 = call i32 @llvm.ctpop.i32(i32 %2613) #16
  %2615 = trunc i32 %2614 to i8
  %2616 = and i8 %2615, 1
  %2617 = xor i8 %2616, 1
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2617, i8* %2618, align 1, !tbaa !2446
  %2619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2619, align 1, !tbaa !2447
  %2620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2620, align 1, !tbaa !2448
  %2621 = lshr i32 %2606, 31
  %2622 = trunc i32 %2621 to i8
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2622, i8* %2623, align 1, !tbaa !2449
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2611, i8* %2624, align 1, !tbaa !2450
  %2625 = load i64, i64* %RDX
  %2626 = load i32, i32* %ESI
  %2627 = zext i32 %2626 to i64
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 2
  store i64 %2629, i64* %PC
  %2630 = trunc i64 %2625 to i32
  %2631 = add i32 %2626, %2630
  %2632 = zext i32 %2631 to i64
  store i64 %2632, i64* %RDX, align 8, !tbaa !2428
  %2633 = icmp ult i32 %2631, %2630
  %2634 = icmp ult i32 %2631, %2626
  %2635 = or i1 %2633, %2634
  %2636 = zext i1 %2635 to i8
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2636, i8* %2637, align 1, !tbaa !2432
  %2638 = and i32 %2631, 255
  %2639 = call i32 @llvm.ctpop.i32(i32 %2638) #16
  %2640 = trunc i32 %2639 to i8
  %2641 = and i8 %2640, 1
  %2642 = xor i8 %2641, 1
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2642, i8* %2643, align 1, !tbaa !2446
  %2644 = xor i64 %2627, %2625
  %2645 = trunc i64 %2644 to i32
  %2646 = xor i32 %2645, %2631
  %2647 = lshr i32 %2646, 4
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2649, i8* %2650, align 1, !tbaa !2447
  %2651 = icmp eq i32 %2631, 0
  %2652 = zext i1 %2651 to i8
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2652, i8* %2653, align 1, !tbaa !2448
  %2654 = lshr i32 %2631, 31
  %2655 = trunc i32 %2654 to i8
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2655, i8* %2656, align 1, !tbaa !2449
  %2657 = lshr i32 %2630, 31
  %2658 = lshr i32 %2626, 31
  %2659 = xor i32 %2654, %2657
  %2660 = xor i32 %2654, %2658
  %2661 = add nuw nsw i32 %2659, %2660
  %2662 = icmp eq i32 %2661, 2
  %2663 = zext i1 %2662 to i8
  %2664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2663, i8* %2664, align 1, !tbaa !2450
  %2665 = load i64, i64* %RBP
  %2666 = sub i64 %2665, 72
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 3
  store i64 %2668, i64* %PC
  %2669 = inttoptr i64 %2666 to i32*
  %2670 = load i32, i32* %2669
  %2671 = zext i32 %2670 to i64
  store i64 %2671, i64* %RSI, align 8, !tbaa !2428
  %2672 = load i64, i64* %RBP
  %2673 = sub i64 %2672, 16
  %2674 = load i64, i64* %PC
  %2675 = add i64 %2674, 4
  store i64 %2675, i64* %PC
  %2676 = inttoptr i64 %2673 to i64*
  %2677 = load i64, i64* %2676
  store i64 %2677, i64* %RCX, align 8, !tbaa !2428
  %2678 = load i64, i64* %RSI
  %2679 = load i64, i64* %RCX
  %2680 = add i64 %2679, 20
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 4
  store i64 %2682, i64* %PC
  %2683 = inttoptr i64 %2680 to i32*
  %2684 = load i32, i32* %2683
  %2685 = shl i64 %2678, 32
  %2686 = ashr exact i64 %2685, 32
  %2687 = sext i32 %2684 to i64
  %2688 = mul nsw i64 %2687, %2686
  %2689 = trunc i64 %2688 to i32
  %2690 = and i64 %2688, 4294967295
  store i64 %2690, i64* %RSI, align 8, !tbaa !2428
  %2691 = shl i64 %2688, 32
  %2692 = ashr exact i64 %2691, 32
  %2693 = icmp ne i64 %2692, %2688
  %2694 = zext i1 %2693 to i8
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2694, i8* %2695, align 1, !tbaa !2432
  %2696 = and i32 %2689, 255
  %2697 = call i32 @llvm.ctpop.i32(i32 %2696) #16
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = xor i8 %2699, 1
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2700, i8* %2701, align 1, !tbaa !2446
  %2702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2702, align 1, !tbaa !2447
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2703, align 1, !tbaa !2448
  %2704 = lshr i32 %2689, 31
  %2705 = trunc i32 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2705, i8* %2706, align 1, !tbaa !2449
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2694, i8* %2707, align 1, !tbaa !2450
  %2708 = load i64, i64* %RDX
  %2709 = load i32, i32* %ESI
  %2710 = zext i32 %2709 to i64
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 2
  store i64 %2712, i64* %PC
  %2713 = trunc i64 %2708 to i32
  %2714 = add i32 %2709, %2713
  %2715 = zext i32 %2714 to i64
  store i64 %2715, i64* %RDX, align 8, !tbaa !2428
  %2716 = icmp ult i32 %2714, %2713
  %2717 = icmp ult i32 %2714, %2709
  %2718 = or i1 %2716, %2717
  %2719 = zext i1 %2718 to i8
  %2720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2719, i8* %2720, align 1, !tbaa !2432
  %2721 = and i32 %2714, 255
  %2722 = call i32 @llvm.ctpop.i32(i32 %2721) #16
  %2723 = trunc i32 %2722 to i8
  %2724 = and i8 %2723, 1
  %2725 = xor i8 %2724, 1
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2725, i8* %2726, align 1, !tbaa !2446
  %2727 = xor i64 %2710, %2708
  %2728 = trunc i64 %2727 to i32
  %2729 = xor i32 %2728, %2714
  %2730 = lshr i32 %2729, 4
  %2731 = trunc i32 %2730 to i8
  %2732 = and i8 %2731, 1
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2732, i8* %2733, align 1, !tbaa !2447
  %2734 = icmp eq i32 %2714, 0
  %2735 = zext i1 %2734 to i8
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2735, i8* %2736, align 1, !tbaa !2448
  %2737 = lshr i32 %2714, 31
  %2738 = trunc i32 %2737 to i8
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2738, i8* %2739, align 1, !tbaa !2449
  %2740 = lshr i32 %2713, 31
  %2741 = lshr i32 %2709, 31
  %2742 = xor i32 %2737, %2740
  %2743 = xor i32 %2737, %2741
  %2744 = add nuw nsw i32 %2742, %2743
  %2745 = icmp eq i32 %2744, 2
  %2746 = zext i1 %2745 to i8
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2746, i8* %2747, align 1, !tbaa !2450
  %2748 = load i64, i64* %RDX
  %2749 = load i64, i64* %RBP
  %2750 = sub i64 %2749, 76
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = trunc i64 %2748 to i32
  %2754 = inttoptr i64 %2750 to i32*
  %2755 = load i32, i32* %2754
  %2756 = add i32 %2755, %2753
  %2757 = zext i32 %2756 to i64
  store i64 %2757, i64* %RDX, align 8, !tbaa !2428
  %2758 = icmp ult i32 %2756, %2753
  %2759 = icmp ult i32 %2756, %2755
  %2760 = or i1 %2758, %2759
  %2761 = zext i1 %2760 to i8
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2761, i8* %2762, align 1, !tbaa !2432
  %2763 = and i32 %2756, 255
  %2764 = call i32 @llvm.ctpop.i32(i32 %2763) #16
  %2765 = trunc i32 %2764 to i8
  %2766 = and i8 %2765, 1
  %2767 = xor i8 %2766, 1
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2767, i8* %2768, align 1, !tbaa !2446
  %2769 = xor i32 %2755, %2753
  %2770 = xor i32 %2769, %2756
  %2771 = lshr i32 %2770, 4
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  %2774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2773, i8* %2774, align 1, !tbaa !2447
  %2775 = icmp eq i32 %2756, 0
  %2776 = zext i1 %2775 to i8
  %2777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2776, i8* %2777, align 1, !tbaa !2448
  %2778 = lshr i32 %2756, 31
  %2779 = trunc i32 %2778 to i8
  %2780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2779, i8* %2780, align 1, !tbaa !2449
  %2781 = lshr i32 %2753, 31
  %2782 = lshr i32 %2755, 31
  %2783 = xor i32 %2778, %2781
  %2784 = xor i32 %2778, %2782
  %2785 = add nuw nsw i32 %2783, %2784
  %2786 = icmp eq i32 %2785, 2
  %2787 = zext i1 %2786 to i8
  %2788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2787, i8* %2788, align 1, !tbaa !2450
  %2789 = load i32, i32* %EDX
  %2790 = zext i32 %2789 to i64
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 3
  store i64 %2792, i64* %PC
  %2793 = shl i64 %2790, 32
  %2794 = ashr exact i64 %2793, 32
  store i64 %2794, i64* %RCX, align 8, !tbaa !2428
  %2795 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2796 = load i64, i64* %RAX
  %2797 = load i64, i64* %RCX
  %2798 = mul i64 %2797, 4
  %2799 = add i64 %2798, %2796
  %2800 = load i64, i64* %PC
  %2801 = add i64 %2800, 5
  store i64 %2801, i64* %PC
  %2802 = inttoptr i64 %2799 to float*
  %2803 = load float, float* %2802
  %2804 = bitcast i8* %2795 to float*
  store float %2803, float* %2804, align 1, !tbaa !2452
  %2805 = getelementptr inbounds i8, i8* %2795, i64 4
  %2806 = bitcast i8* %2805 to float*
  store float 0.000000e+00, float* %2806, align 1, !tbaa !2452
  %2807 = getelementptr inbounds i8, i8* %2795, i64 8
  %2808 = bitcast i8* %2807 to float*
  store float 0.000000e+00, float* %2808, align 1, !tbaa !2452
  %2809 = getelementptr inbounds i8, i8* %2795, i64 12
  %2810 = bitcast i8* %2809 to float*
  store float 0.000000e+00, float* %2810, align 1, !tbaa !2452
  %2811 = load i64, i64* %RBP
  %2812 = sub i64 %2811, 40
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 4
  store i64 %2814, i64* %PC
  %2815 = inttoptr i64 %2812 to i64*
  %2816 = load i64, i64* %2815
  store i64 %2816, i64* %RAX, align 8, !tbaa !2428
  %2817 = load i64, i64* %RAX
  %2818 = load i64, i64* %PC
  %2819 = add i64 %2818, 3
  store i64 %2819, i64* %PC
  %2820 = inttoptr i64 %2817 to i64*
  %2821 = load i64, i64* %2820
  store i64 %2821, i64* %RAX, align 8, !tbaa !2428
  %2822 = load i64, i64* %RBP
  %2823 = sub i64 %2822, 40
  %2824 = load i64, i64* %PC
  %2825 = add i64 %2824, 4
  store i64 %2825, i64* %PC
  %2826 = inttoptr i64 %2823 to i64*
  %2827 = load i64, i64* %2826
  store i64 %2827, i64* %RCX, align 8, !tbaa !2428
  %2828 = load i64, i64* %RCX
  %2829 = add i64 %2828, 12
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 4
  store i64 %2831, i64* %PC
  %2832 = inttoptr i64 %2829 to i32*
  %2833 = load i32, i32* %2832
  %2834 = sext i32 %2833 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2835, align 1, !tbaa !2432
  %2836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2836, align 1, !tbaa !2446
  %2837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2837, align 1, !tbaa !2447
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2838, align 1, !tbaa !2448
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2839, align 1, !tbaa !2449
  %2840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2840, align 1, !tbaa !2450
  %2841 = load i64, i64* %RBP
  %2842 = sub i64 %2841, 40
  %2843 = load i64, i64* %PC
  %2844 = add i64 %2843, 4
  store i64 %2844, i64* %PC
  %2845 = inttoptr i64 %2842 to i64*
  %2846 = load i64, i64* %2845
  store i64 %2846, i64* %RCX, align 8, !tbaa !2428
  %2847 = load i64, i64* %RDX
  %2848 = load i64, i64* %RCX
  %2849 = add i64 %2848, 16
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 4
  store i64 %2851, i64* %PC
  %2852 = inttoptr i64 %2849 to i32*
  %2853 = load i32, i32* %2852
  %2854 = shl i64 %2847, 32
  %2855 = ashr exact i64 %2854, 32
  %2856 = sext i32 %2853 to i64
  %2857 = mul nsw i64 %2856, %2855
  %2858 = trunc i64 %2857 to i32
  %2859 = and i64 %2857, 4294967295
  store i64 %2859, i64* %RDX, align 8, !tbaa !2428
  %2860 = shl i64 %2857, 32
  %2861 = ashr exact i64 %2860, 32
  %2862 = icmp ne i64 %2861, %2857
  %2863 = zext i1 %2862 to i8
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2863, i8* %2864, align 1, !tbaa !2432
  %2865 = and i32 %2858, 255
  %2866 = call i32 @llvm.ctpop.i32(i32 %2865) #16
  %2867 = trunc i32 %2866 to i8
  %2868 = and i8 %2867, 1
  %2869 = xor i8 %2868, 1
  %2870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2869, i8* %2870, align 1, !tbaa !2446
  %2871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2871, align 1, !tbaa !2447
  %2872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2872, align 1, !tbaa !2448
  %2873 = lshr i32 %2858, 31
  %2874 = trunc i32 %2873 to i8
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2874, i8* %2875, align 1, !tbaa !2449
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2863, i8* %2876, align 1, !tbaa !2450
  %2877 = load i64, i64* %RBP
  %2878 = sub i64 %2877, 40
  %2879 = load i64, i64* %PC
  %2880 = add i64 %2879, 4
  store i64 %2880, i64* %PC
  %2881 = inttoptr i64 %2878 to i64*
  %2882 = load i64, i64* %2881
  store i64 %2882, i64* %RCX, align 8, !tbaa !2428
  %2883 = load i64, i64* %RDX
  %2884 = load i64, i64* %RCX
  %2885 = add i64 %2884, 20
  %2886 = load i64, i64* %PC
  %2887 = add i64 %2886, 4
  store i64 %2887, i64* %PC
  %2888 = inttoptr i64 %2885 to i32*
  %2889 = load i32, i32* %2888
  %2890 = shl i64 %2883, 32
  %2891 = ashr exact i64 %2890, 32
  %2892 = sext i32 %2889 to i64
  %2893 = mul nsw i64 %2892, %2891
  %2894 = trunc i64 %2893 to i32
  %2895 = and i64 %2893, 4294967295
  store i64 %2895, i64* %RDX, align 8, !tbaa !2428
  %2896 = shl i64 %2893, 32
  %2897 = ashr exact i64 %2896, 32
  %2898 = icmp ne i64 %2897, %2893
  %2899 = zext i1 %2898 to i8
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2899, i8* %2900, align 1, !tbaa !2432
  %2901 = and i32 %2894, 255
  %2902 = call i32 @llvm.ctpop.i32(i32 %2901) #16
  %2903 = trunc i32 %2902 to i8
  %2904 = and i8 %2903, 1
  %2905 = xor i8 %2904, 1
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2905, i8* %2906, align 1, !tbaa !2446
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2907, align 1, !tbaa !2447
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2908, align 1, !tbaa !2448
  %2909 = lshr i32 %2894, 31
  %2910 = trunc i32 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2910, i8* %2911, align 1, !tbaa !2449
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2899, i8* %2912, align 1, !tbaa !2450
  %2913 = load i64, i64* %RBP
  %2914 = sub i64 %2913, 68
  %2915 = load i64, i64* %PC
  %2916 = add i64 %2915, 3
  store i64 %2916, i64* %PC
  %2917 = inttoptr i64 %2914 to i32*
  %2918 = load i32, i32* %2917
  %2919 = zext i32 %2918 to i64
  store i64 %2919, i64* %RSI, align 8, !tbaa !2428
  %2920 = load i64, i64* %RBP
  %2921 = sub i64 %2920, 40
  %2922 = load i64, i64* %PC
  %2923 = add i64 %2922, 4
  store i64 %2923, i64* %PC
  %2924 = inttoptr i64 %2921 to i64*
  %2925 = load i64, i64* %2924
  store i64 %2925, i64* %RCX, align 8, !tbaa !2428
  %2926 = load i64, i64* %RSI
  %2927 = load i64, i64* %RCX
  %2928 = add i64 %2927, 16
  %2929 = load i64, i64* %PC
  %2930 = add i64 %2929, 4
  store i64 %2930, i64* %PC
  %2931 = inttoptr i64 %2928 to i32*
  %2932 = load i32, i32* %2931
  %2933 = shl i64 %2926, 32
  %2934 = ashr exact i64 %2933, 32
  %2935 = sext i32 %2932 to i64
  %2936 = mul nsw i64 %2935, %2934
  %2937 = trunc i64 %2936 to i32
  %2938 = and i64 %2936, 4294967295
  store i64 %2938, i64* %RSI, align 8, !tbaa !2428
  %2939 = shl i64 %2936, 32
  %2940 = ashr exact i64 %2939, 32
  %2941 = icmp ne i64 %2940, %2936
  %2942 = zext i1 %2941 to i8
  %2943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2942, i8* %2943, align 1, !tbaa !2432
  %2944 = and i32 %2937, 255
  %2945 = call i32 @llvm.ctpop.i32(i32 %2944) #16
  %2946 = trunc i32 %2945 to i8
  %2947 = and i8 %2946, 1
  %2948 = xor i8 %2947, 1
  %2949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2948, i8* %2949, align 1, !tbaa !2446
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2950, align 1, !tbaa !2447
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2951, align 1, !tbaa !2448
  %2952 = lshr i32 %2937, 31
  %2953 = trunc i32 %2952 to i8
  %2954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2953, i8* %2954, align 1, !tbaa !2449
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2942, i8* %2955, align 1, !tbaa !2450
  %2956 = load i64, i64* %RBP
  %2957 = sub i64 %2956, 40
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 4
  store i64 %2959, i64* %PC
  %2960 = inttoptr i64 %2957 to i64*
  %2961 = load i64, i64* %2960
  store i64 %2961, i64* %RCX, align 8, !tbaa !2428
  %2962 = load i64, i64* %RSI
  %2963 = load i64, i64* %RCX
  %2964 = add i64 %2963, 20
  %2965 = load i64, i64* %PC
  %2966 = add i64 %2965, 4
  store i64 %2966, i64* %PC
  %2967 = inttoptr i64 %2964 to i32*
  %2968 = load i32, i32* %2967
  %2969 = shl i64 %2962, 32
  %2970 = ashr exact i64 %2969, 32
  %2971 = sext i32 %2968 to i64
  %2972 = mul nsw i64 %2971, %2970
  %2973 = trunc i64 %2972 to i32
  %2974 = and i64 %2972, 4294967295
  store i64 %2974, i64* %RSI, align 8, !tbaa !2428
  %2975 = shl i64 %2972, 32
  %2976 = ashr exact i64 %2975, 32
  %2977 = icmp ne i64 %2976, %2972
  %2978 = zext i1 %2977 to i8
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2978, i8* %2979, align 1, !tbaa !2432
  %2980 = and i32 %2973, 255
  %2981 = call i32 @llvm.ctpop.i32(i32 %2980) #16
  %2982 = trunc i32 %2981 to i8
  %2983 = and i8 %2982, 1
  %2984 = xor i8 %2983, 1
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2984, i8* %2985, align 1, !tbaa !2446
  %2986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2986, align 1, !tbaa !2447
  %2987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2987, align 1, !tbaa !2448
  %2988 = lshr i32 %2973, 31
  %2989 = trunc i32 %2988 to i8
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2989, i8* %2990, align 1, !tbaa !2449
  %2991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2978, i8* %2991, align 1, !tbaa !2450
  %2992 = load i64, i64* %RDX
  %2993 = load i32, i32* %ESI
  %2994 = zext i32 %2993 to i64
  %2995 = load i64, i64* %PC
  %2996 = add i64 %2995, 2
  store i64 %2996, i64* %PC
  %2997 = trunc i64 %2992 to i32
  %2998 = add i32 %2993, %2997
  %2999 = zext i32 %2998 to i64
  store i64 %2999, i64* %RDX, align 8, !tbaa !2428
  %3000 = icmp ult i32 %2998, %2997
  %3001 = icmp ult i32 %2998, %2993
  %3002 = or i1 %3000, %3001
  %3003 = zext i1 %3002 to i8
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3003, i8* %3004, align 1, !tbaa !2432
  %3005 = and i32 %2998, 255
  %3006 = call i32 @llvm.ctpop.i32(i32 %3005) #16
  %3007 = trunc i32 %3006 to i8
  %3008 = and i8 %3007, 1
  %3009 = xor i8 %3008, 1
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3009, i8* %3010, align 1, !tbaa !2446
  %3011 = xor i64 %2994, %2992
  %3012 = trunc i64 %3011 to i32
  %3013 = xor i32 %3012, %2998
  %3014 = lshr i32 %3013, 4
  %3015 = trunc i32 %3014 to i8
  %3016 = and i8 %3015, 1
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3016, i8* %3017, align 1, !tbaa !2447
  %3018 = icmp eq i32 %2998, 0
  %3019 = zext i1 %3018 to i8
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3019, i8* %3020, align 1, !tbaa !2448
  %3021 = lshr i32 %2998, 31
  %3022 = trunc i32 %3021 to i8
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3022, i8* %3023, align 1, !tbaa !2449
  %3024 = lshr i32 %2997, 31
  %3025 = lshr i32 %2993, 31
  %3026 = xor i32 %3021, %3024
  %3027 = xor i32 %3021, %3025
  %3028 = add nuw nsw i32 %3026, %3027
  %3029 = icmp eq i32 %3028, 2
  %3030 = zext i1 %3029 to i8
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3030, i8* %3031, align 1, !tbaa !2450
  %3032 = load i64, i64* %RBP
  %3033 = sub i64 %3032, 72
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 3
  store i64 %3035, i64* %PC
  %3036 = inttoptr i64 %3033 to i32*
  %3037 = load i32, i32* %3036
  %3038 = zext i32 %3037 to i64
  store i64 %3038, i64* %RSI, align 8, !tbaa !2428
  %3039 = load i64, i64* %RSI
  %3040 = load i64, i64* %PC
  %3041 = add i64 %3040, 3
  store i64 %3041, i64* %PC
  %3042 = trunc i64 %3039 to i32
  %3043 = add i32 1, %3042
  %3044 = zext i32 %3043 to i64
  store i64 %3044, i64* %RSI, align 8, !tbaa !2428
  %3045 = icmp ult i32 %3043, %3042
  %3046 = icmp ult i32 %3043, 1
  %3047 = or i1 %3045, %3046
  %3048 = zext i1 %3047 to i8
  %3049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3048, i8* %3049, align 1, !tbaa !2432
  %3050 = and i32 %3043, 255
  %3051 = call i32 @llvm.ctpop.i32(i32 %3050) #16
  %3052 = trunc i32 %3051 to i8
  %3053 = and i8 %3052, 1
  %3054 = xor i8 %3053, 1
  %3055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3054, i8* %3055, align 1, !tbaa !2446
  %3056 = xor i64 1, %3039
  %3057 = trunc i64 %3056 to i32
  %3058 = xor i32 %3057, %3043
  %3059 = lshr i32 %3058, 4
  %3060 = trunc i32 %3059 to i8
  %3061 = and i8 %3060, 1
  %3062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3061, i8* %3062, align 1, !tbaa !2447
  %3063 = icmp eq i32 %3043, 0
  %3064 = zext i1 %3063 to i8
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3064, i8* %3065, align 1, !tbaa !2448
  %3066 = lshr i32 %3043, 31
  %3067 = trunc i32 %3066 to i8
  %3068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3067, i8* %3068, align 1, !tbaa !2449
  %3069 = lshr i32 %3042, 31
  %3070 = xor i32 %3066, %3069
  %3071 = add nuw nsw i32 %3070, %3066
  %3072 = icmp eq i32 %3071, 2
  %3073 = zext i1 %3072 to i8
  %3074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3073, i8* %3074, align 1, !tbaa !2450
  %3075 = load i64, i64* %RBP
  %3076 = sub i64 %3075, 40
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 4
  store i64 %3078, i64* %PC
  %3079 = inttoptr i64 %3076 to i64*
  %3080 = load i64, i64* %3079
  store i64 %3080, i64* %RCX, align 8, !tbaa !2428
  %3081 = load i64, i64* %RSI
  %3082 = load i64, i64* %RCX
  %3083 = add i64 %3082, 20
  %3084 = load i64, i64* %PC
  %3085 = add i64 %3084, 4
  store i64 %3085, i64* %PC
  %3086 = inttoptr i64 %3083 to i32*
  %3087 = load i32, i32* %3086
  %3088 = shl i64 %3081, 32
  %3089 = ashr exact i64 %3088, 32
  %3090 = sext i32 %3087 to i64
  %3091 = mul nsw i64 %3090, %3089
  %3092 = trunc i64 %3091 to i32
  %3093 = and i64 %3091, 4294967295
  store i64 %3093, i64* %RSI, align 8, !tbaa !2428
  %3094 = shl i64 %3091, 32
  %3095 = ashr exact i64 %3094, 32
  %3096 = icmp ne i64 %3095, %3091
  %3097 = zext i1 %3096 to i8
  %3098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3097, i8* %3098, align 1, !tbaa !2432
  %3099 = and i32 %3092, 255
  %3100 = call i32 @llvm.ctpop.i32(i32 %3099) #16
  %3101 = trunc i32 %3100 to i8
  %3102 = and i8 %3101, 1
  %3103 = xor i8 %3102, 1
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3103, i8* %3104, align 1, !tbaa !2446
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3105, align 1, !tbaa !2447
  %3106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3106, align 1, !tbaa !2448
  %3107 = lshr i32 %3092, 31
  %3108 = trunc i32 %3107 to i8
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3108, i8* %3109, align 1, !tbaa !2449
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3097, i8* %3110, align 1, !tbaa !2450
  %3111 = load i64, i64* %RDX
  %3112 = load i32, i32* %ESI
  %3113 = zext i32 %3112 to i64
  %3114 = load i64, i64* %PC
  %3115 = add i64 %3114, 2
  store i64 %3115, i64* %PC
  %3116 = trunc i64 %3111 to i32
  %3117 = add i32 %3112, %3116
  %3118 = zext i32 %3117 to i64
  store i64 %3118, i64* %RDX, align 8, !tbaa !2428
  %3119 = icmp ult i32 %3117, %3116
  %3120 = icmp ult i32 %3117, %3112
  %3121 = or i1 %3119, %3120
  %3122 = zext i1 %3121 to i8
  %3123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3122, i8* %3123, align 1, !tbaa !2432
  %3124 = and i32 %3117, 255
  %3125 = call i32 @llvm.ctpop.i32(i32 %3124) #16
  %3126 = trunc i32 %3125 to i8
  %3127 = and i8 %3126, 1
  %3128 = xor i8 %3127, 1
  %3129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3128, i8* %3129, align 1, !tbaa !2446
  %3130 = xor i64 %3113, %3111
  %3131 = trunc i64 %3130 to i32
  %3132 = xor i32 %3131, %3117
  %3133 = lshr i32 %3132, 4
  %3134 = trunc i32 %3133 to i8
  %3135 = and i8 %3134, 1
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3135, i8* %3136, align 1, !tbaa !2447
  %3137 = icmp eq i32 %3117, 0
  %3138 = zext i1 %3137 to i8
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3138, i8* %3139, align 1, !tbaa !2448
  %3140 = lshr i32 %3117, 31
  %3141 = trunc i32 %3140 to i8
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3141, i8* %3142, align 1, !tbaa !2449
  %3143 = lshr i32 %3116, 31
  %3144 = lshr i32 %3112, 31
  %3145 = xor i32 %3140, %3143
  %3146 = xor i32 %3140, %3144
  %3147 = add nuw nsw i32 %3145, %3146
  %3148 = icmp eq i32 %3147, 2
  %3149 = zext i1 %3148 to i8
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3149, i8* %3150, align 1, !tbaa !2450
  %3151 = load i64, i64* %RDX
  %3152 = load i64, i64* %RBP
  %3153 = sub i64 %3152, 76
  %3154 = load i64, i64* %PC
  %3155 = add i64 %3154, 3
  store i64 %3155, i64* %PC
  %3156 = trunc i64 %3151 to i32
  %3157 = inttoptr i64 %3153 to i32*
  %3158 = load i32, i32* %3157
  %3159 = add i32 %3158, %3156
  %3160 = zext i32 %3159 to i64
  store i64 %3160, i64* %RDX, align 8, !tbaa !2428
  %3161 = icmp ult i32 %3159, %3156
  %3162 = icmp ult i32 %3159, %3158
  %3163 = or i1 %3161, %3162
  %3164 = zext i1 %3163 to i8
  %3165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3164, i8* %3165, align 1, !tbaa !2432
  %3166 = and i32 %3159, 255
  %3167 = call i32 @llvm.ctpop.i32(i32 %3166) #16
  %3168 = trunc i32 %3167 to i8
  %3169 = and i8 %3168, 1
  %3170 = xor i8 %3169, 1
  %3171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3170, i8* %3171, align 1, !tbaa !2446
  %3172 = xor i32 %3158, %3156
  %3173 = xor i32 %3172, %3159
  %3174 = lshr i32 %3173, 4
  %3175 = trunc i32 %3174 to i8
  %3176 = and i8 %3175, 1
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3176, i8* %3177, align 1, !tbaa !2447
  %3178 = icmp eq i32 %3159, 0
  %3179 = zext i1 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3179, i8* %3180, align 1, !tbaa !2448
  %3181 = lshr i32 %3159, 31
  %3182 = trunc i32 %3181 to i8
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3182, i8* %3183, align 1, !tbaa !2449
  %3184 = lshr i32 %3156, 31
  %3185 = lshr i32 %3158, 31
  %3186 = xor i32 %3181, %3184
  %3187 = xor i32 %3181, %3185
  %3188 = add nuw nsw i32 %3186, %3187
  %3189 = icmp eq i32 %3188, 2
  %3190 = zext i1 %3189 to i8
  %3191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3190, i8* %3191, align 1, !tbaa !2450
  %3192 = load i32, i32* %EDX
  %3193 = zext i32 %3192 to i64
  %3194 = load i64, i64* %PC
  %3195 = add i64 %3194, 3
  store i64 %3195, i64* %PC
  %3196 = shl i64 %3193, 32
  %3197 = ashr exact i64 %3196, 32
  store i64 %3197, i64* %RCX, align 8, !tbaa !2428
  %3198 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3199 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3200 = load i64, i64* %RAX
  %3201 = load i64, i64* %RCX
  %3202 = mul i64 %3201, 4
  %3203 = add i64 %3202, %3200
  %3204 = load i64, i64* %PC
  %3205 = add i64 %3204, 5
  store i64 %3205, i64* %PC
  %3206 = bitcast i8* %3199 to <2 x float>*
  %3207 = load <2 x float>, <2 x float>* %3206, align 1
  %3208 = getelementptr inbounds i8, i8* %3199, i64 8
  %3209 = bitcast i8* %3208 to <2 x i32>*
  %3210 = load <2 x i32>, <2 x i32>* %3209, align 1
  %3211 = inttoptr i64 %3203 to float*
  %3212 = load float, float* %3211
  %3213 = extractelement <2 x float> %3207, i32 0
  %3214 = fmul float %3213, %3212
  %3215 = bitcast i8* %3198 to float*
  store float %3214, float* %3215, align 1, !tbaa !2452
  %3216 = bitcast <2 x float> %3207 to <2 x i32>
  %3217 = extractelement <2 x i32> %3216, i32 1
  %3218 = getelementptr inbounds i8, i8* %3198, i64 4
  %3219 = bitcast i8* %3218 to i32*
  store i32 %3217, i32* %3219, align 1, !tbaa !2452
  %3220 = extractelement <2 x i32> %3210, i32 0
  %3221 = getelementptr inbounds i8, i8* %3198, i64 8
  %3222 = bitcast i8* %3221 to i32*
  store i32 %3220, i32* %3222, align 1, !tbaa !2452
  %3223 = extractelement <2 x i32> %3210, i32 1
  %3224 = getelementptr inbounds i8, i8* %3198, i64 12
  %3225 = bitcast i8* %3224 to i32*
  store i32 %3223, i32* %3225, align 1, !tbaa !2452
  %3226 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3227 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3228 = bitcast %union.vec128_t* %XMM1 to i8*
  %3229 = load i64, i64* %PC
  %3230 = add i64 %3229, 4
  store i64 %3230, i64* %PC
  %3231 = bitcast i8* %3227 to <2 x float>*
  %3232 = load <2 x float>, <2 x float>* %3231, align 1
  %3233 = getelementptr inbounds i8, i8* %3227, i64 8
  %3234 = bitcast i8* %3233 to <2 x i32>*
  %3235 = load <2 x i32>, <2 x i32>* %3234, align 1
  %3236 = bitcast i8* %3228 to <2 x float>*
  %3237 = load <2 x float>, <2 x float>* %3236, align 1
  %3238 = extractelement <2 x float> %3232, i32 0
  %3239 = extractelement <2 x float> %3237, i32 0
  %3240 = fadd float %3238, %3239
  %3241 = bitcast i8* %3226 to float*
  store float %3240, float* %3241, align 1, !tbaa !2452
  %3242 = bitcast <2 x float> %3232 to <2 x i32>
  %3243 = extractelement <2 x i32> %3242, i32 1
  %3244 = getelementptr inbounds i8, i8* %3226, i64 4
  %3245 = bitcast i8* %3244 to i32*
  store i32 %3243, i32* %3245, align 1, !tbaa !2452
  %3246 = extractelement <2 x i32> %3235, i32 0
  %3247 = getelementptr inbounds i8, i8* %3226, i64 8
  %3248 = bitcast i8* %3247 to i32*
  store i32 %3246, i32* %3248, align 1, !tbaa !2452
  %3249 = extractelement <2 x i32> %3235, i32 1
  %3250 = getelementptr inbounds i8, i8* %3226, i64 12
  %3251 = bitcast i8* %3250 to i32*
  store i32 %3249, i32* %3251, align 1, !tbaa !2452
  %3252 = load i64, i64* %RBP
  %3253 = sub i64 %3252, 16
  %3254 = load i64, i64* %PC
  %3255 = add i64 %3254, 4
  store i64 %3255, i64* %PC
  %3256 = inttoptr i64 %3253 to i64*
  %3257 = load i64, i64* %3256
  store i64 %3257, i64* %RAX, align 8, !tbaa !2428
  %3258 = load i64, i64* %RAX
  %3259 = load i64, i64* %PC
  %3260 = add i64 %3259, 3
  store i64 %3260, i64* %PC
  %3261 = inttoptr i64 %3258 to i64*
  %3262 = load i64, i64* %3261
  store i64 %3262, i64* %RAX, align 8, !tbaa !2428
  %3263 = load i64, i64* %RBP
  %3264 = sub i64 %3263, 16
  %3265 = load i64, i64* %PC
  %3266 = add i64 %3265, 4
  store i64 %3266, i64* %PC
  %3267 = inttoptr i64 %3264 to i64*
  %3268 = load i64, i64* %3267
  store i64 %3268, i64* %RCX, align 8, !tbaa !2428
  %3269 = load i64, i64* %RCX
  %3270 = add i64 %3269, 12
  %3271 = load i64, i64* %PC
  %3272 = add i64 %3271, 3
  store i64 %3272, i64* %PC
  %3273 = inttoptr i64 %3270 to i32*
  %3274 = load i32, i32* %3273
  %3275 = zext i32 %3274 to i64
  store i64 %3275, i64* %RDX, align 8, !tbaa !2428
  %3276 = load i64, i64* %RDX
  %3277 = load i64, i64* %PC
  %3278 = add i64 %3277, 3
  store i64 %3278, i64* %PC
  %3279 = trunc i64 %3276 to i32
  %3280 = shl i32 %3279, 1
  %3281 = icmp slt i32 %3279, 0
  %3282 = icmp slt i32 %3280, 0
  %3283 = xor i1 %3281, %3282
  %3284 = zext i32 %3280 to i64
  store i64 %3284, i64* %RDX, align 8, !tbaa !2428
  %3285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3286 = zext i1 %3281 to i8
  store i8 %3286, i8* %3285, align 1, !tbaa !2451
  %3287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3288 = and i32 %3280, 254
  %3289 = call i32 @llvm.ctpop.i32(i32 %3288) #16
  %3290 = trunc i32 %3289 to i8
  %3291 = and i8 %3290, 1
  %3292 = xor i8 %3291, 1
  store i8 %3292, i8* %3287, align 1, !tbaa !2451
  %3293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3293, align 1, !tbaa !2451
  %3294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3295 = icmp eq i32 %3280, 0
  %3296 = zext i1 %3295 to i8
  store i8 %3296, i8* %3294, align 1, !tbaa !2451
  %3297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3298 = lshr i32 %3280, 31
  %3299 = trunc i32 %3298 to i8
  store i8 %3299, i8* %3297, align 1, !tbaa !2451
  %3300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3301 = zext i1 %3283 to i8
  store i8 %3301, i8* %3300, align 1, !tbaa !2451
  %3302 = load i64, i64* %RBP
  %3303 = sub i64 %3302, 16
  %3304 = load i64, i64* %PC
  %3305 = add i64 %3304, 4
  store i64 %3305, i64* %PC
  %3306 = inttoptr i64 %3303 to i64*
  %3307 = load i64, i64* %3306
  store i64 %3307, i64* %RCX, align 8, !tbaa !2428
  %3308 = load i64, i64* %RDX
  %3309 = load i64, i64* %RCX
  %3310 = add i64 %3309, 16
  %3311 = load i64, i64* %PC
  %3312 = add i64 %3311, 4
  store i64 %3312, i64* %PC
  %3313 = inttoptr i64 %3310 to i32*
  %3314 = load i32, i32* %3313
  %3315 = shl i64 %3308, 32
  %3316 = ashr exact i64 %3315, 32
  %3317 = sext i32 %3314 to i64
  %3318 = mul nsw i64 %3317, %3316
  %3319 = trunc i64 %3318 to i32
  %3320 = and i64 %3318, 4294967295
  store i64 %3320, i64* %RDX, align 8, !tbaa !2428
  %3321 = shl i64 %3318, 32
  %3322 = ashr exact i64 %3321, 32
  %3323 = icmp ne i64 %3322, %3318
  %3324 = zext i1 %3323 to i8
  %3325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3324, i8* %3325, align 1, !tbaa !2432
  %3326 = and i32 %3319, 255
  %3327 = call i32 @llvm.ctpop.i32(i32 %3326) #16
  %3328 = trunc i32 %3327 to i8
  %3329 = and i8 %3328, 1
  %3330 = xor i8 %3329, 1
  %3331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3330, i8* %3331, align 1, !tbaa !2446
  %3332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3332, align 1, !tbaa !2447
  %3333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3333, align 1, !tbaa !2448
  %3334 = lshr i32 %3319, 31
  %3335 = trunc i32 %3334 to i8
  %3336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3335, i8* %3336, align 1, !tbaa !2449
  %3337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3324, i8* %3337, align 1, !tbaa !2450
  %3338 = load i64, i64* %RBP
  %3339 = sub i64 %3338, 16
  %3340 = load i64, i64* %PC
  %3341 = add i64 %3340, 4
  store i64 %3341, i64* %PC
  %3342 = inttoptr i64 %3339 to i64*
  %3343 = load i64, i64* %3342
  store i64 %3343, i64* %RCX, align 8, !tbaa !2428
  %3344 = load i64, i64* %RDX
  %3345 = load i64, i64* %RCX
  %3346 = add i64 %3345, 20
  %3347 = load i64, i64* %PC
  %3348 = add i64 %3347, 4
  store i64 %3348, i64* %PC
  %3349 = inttoptr i64 %3346 to i32*
  %3350 = load i32, i32* %3349
  %3351 = shl i64 %3344, 32
  %3352 = ashr exact i64 %3351, 32
  %3353 = sext i32 %3350 to i64
  %3354 = mul nsw i64 %3353, %3352
  %3355 = trunc i64 %3354 to i32
  %3356 = and i64 %3354, 4294967295
  store i64 %3356, i64* %RDX, align 8, !tbaa !2428
  %3357 = shl i64 %3354, 32
  %3358 = ashr exact i64 %3357, 32
  %3359 = icmp ne i64 %3358, %3354
  %3360 = zext i1 %3359 to i8
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3360, i8* %3361, align 1, !tbaa !2432
  %3362 = and i32 %3355, 255
  %3363 = call i32 @llvm.ctpop.i32(i32 %3362) #16
  %3364 = trunc i32 %3363 to i8
  %3365 = and i8 %3364, 1
  %3366 = xor i8 %3365, 1
  %3367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3366, i8* %3367, align 1, !tbaa !2446
  %3368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3368, align 1, !tbaa !2447
  %3369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3369, align 1, !tbaa !2448
  %3370 = lshr i32 %3355, 31
  %3371 = trunc i32 %3370 to i8
  %3372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3371, i8* %3372, align 1, !tbaa !2449
  %3373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3360, i8* %3373, align 1, !tbaa !2450
  %3374 = load i64, i64* %RBP
  %3375 = sub i64 %3374, 68
  %3376 = load i64, i64* %PC
  %3377 = add i64 %3376, 3
  store i64 %3377, i64* %PC
  %3378 = inttoptr i64 %3375 to i32*
  %3379 = load i32, i32* %3378
  %3380 = zext i32 %3379 to i64
  store i64 %3380, i64* %RSI, align 8, !tbaa !2428
  %3381 = load i64, i64* %RBP
  %3382 = sub i64 %3381, 16
  %3383 = load i64, i64* %PC
  %3384 = add i64 %3383, 4
  store i64 %3384, i64* %PC
  %3385 = inttoptr i64 %3382 to i64*
  %3386 = load i64, i64* %3385
  store i64 %3386, i64* %RCX, align 8, !tbaa !2428
  %3387 = load i64, i64* %RSI
  %3388 = load i64, i64* %RCX
  %3389 = add i64 %3388, 16
  %3390 = load i64, i64* %PC
  %3391 = add i64 %3390, 4
  store i64 %3391, i64* %PC
  %3392 = inttoptr i64 %3389 to i32*
  %3393 = load i32, i32* %3392
  %3394 = shl i64 %3387, 32
  %3395 = ashr exact i64 %3394, 32
  %3396 = sext i32 %3393 to i64
  %3397 = mul nsw i64 %3396, %3395
  %3398 = trunc i64 %3397 to i32
  %3399 = and i64 %3397, 4294967295
  store i64 %3399, i64* %RSI, align 8, !tbaa !2428
  %3400 = shl i64 %3397, 32
  %3401 = ashr exact i64 %3400, 32
  %3402 = icmp ne i64 %3401, %3397
  %3403 = zext i1 %3402 to i8
  %3404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3403, i8* %3404, align 1, !tbaa !2432
  %3405 = and i32 %3398, 255
  %3406 = call i32 @llvm.ctpop.i32(i32 %3405) #16
  %3407 = trunc i32 %3406 to i8
  %3408 = and i8 %3407, 1
  %3409 = xor i8 %3408, 1
  %3410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3409, i8* %3410, align 1, !tbaa !2446
  %3411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3411, align 1, !tbaa !2447
  %3412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3412, align 1, !tbaa !2448
  %3413 = lshr i32 %3398, 31
  %3414 = trunc i32 %3413 to i8
  %3415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3414, i8* %3415, align 1, !tbaa !2449
  %3416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3403, i8* %3416, align 1, !tbaa !2450
  %3417 = load i64, i64* %RBP
  %3418 = sub i64 %3417, 16
  %3419 = load i64, i64* %PC
  %3420 = add i64 %3419, 4
  store i64 %3420, i64* %PC
  %3421 = inttoptr i64 %3418 to i64*
  %3422 = load i64, i64* %3421
  store i64 %3422, i64* %RCX, align 8, !tbaa !2428
  %3423 = load i64, i64* %RSI
  %3424 = load i64, i64* %RCX
  %3425 = add i64 %3424, 20
  %3426 = load i64, i64* %PC
  %3427 = add i64 %3426, 4
  store i64 %3427, i64* %PC
  %3428 = inttoptr i64 %3425 to i32*
  %3429 = load i32, i32* %3428
  %3430 = shl i64 %3423, 32
  %3431 = ashr exact i64 %3430, 32
  %3432 = sext i32 %3429 to i64
  %3433 = mul nsw i64 %3432, %3431
  %3434 = trunc i64 %3433 to i32
  %3435 = and i64 %3433, 4294967295
  store i64 %3435, i64* %RSI, align 8, !tbaa !2428
  %3436 = shl i64 %3433, 32
  %3437 = ashr exact i64 %3436, 32
  %3438 = icmp ne i64 %3437, %3433
  %3439 = zext i1 %3438 to i8
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3439, i8* %3440, align 1, !tbaa !2432
  %3441 = and i32 %3434, 255
  %3442 = call i32 @llvm.ctpop.i32(i32 %3441) #16
  %3443 = trunc i32 %3442 to i8
  %3444 = and i8 %3443, 1
  %3445 = xor i8 %3444, 1
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3445, i8* %3446, align 1, !tbaa !2446
  %3447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3447, align 1, !tbaa !2447
  %3448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3448, align 1, !tbaa !2448
  %3449 = lshr i32 %3434, 31
  %3450 = trunc i32 %3449 to i8
  %3451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3450, i8* %3451, align 1, !tbaa !2449
  %3452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3439, i8* %3452, align 1, !tbaa !2450
  %3453 = load i64, i64* %RDX
  %3454 = load i32, i32* %ESI
  %3455 = zext i32 %3454 to i64
  %3456 = load i64, i64* %PC
  %3457 = add i64 %3456, 2
  store i64 %3457, i64* %PC
  %3458 = trunc i64 %3453 to i32
  %3459 = add i32 %3454, %3458
  %3460 = zext i32 %3459 to i64
  store i64 %3460, i64* %RDX, align 8, !tbaa !2428
  %3461 = icmp ult i32 %3459, %3458
  %3462 = icmp ult i32 %3459, %3454
  %3463 = or i1 %3461, %3462
  %3464 = zext i1 %3463 to i8
  %3465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3464, i8* %3465, align 1, !tbaa !2432
  %3466 = and i32 %3459, 255
  %3467 = call i32 @llvm.ctpop.i32(i32 %3466) #16
  %3468 = trunc i32 %3467 to i8
  %3469 = and i8 %3468, 1
  %3470 = xor i8 %3469, 1
  %3471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3470, i8* %3471, align 1, !tbaa !2446
  %3472 = xor i64 %3455, %3453
  %3473 = trunc i64 %3472 to i32
  %3474 = xor i32 %3473, %3459
  %3475 = lshr i32 %3474, 4
  %3476 = trunc i32 %3475 to i8
  %3477 = and i8 %3476, 1
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3477, i8* %3478, align 1, !tbaa !2447
  %3479 = icmp eq i32 %3459, 0
  %3480 = zext i1 %3479 to i8
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3480, i8* %3481, align 1, !tbaa !2448
  %3482 = lshr i32 %3459, 31
  %3483 = trunc i32 %3482 to i8
  %3484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3483, i8* %3484, align 1, !tbaa !2449
  %3485 = lshr i32 %3458, 31
  %3486 = lshr i32 %3454, 31
  %3487 = xor i32 %3482, %3485
  %3488 = xor i32 %3482, %3486
  %3489 = add nuw nsw i32 %3487, %3488
  %3490 = icmp eq i32 %3489, 2
  %3491 = zext i1 %3490 to i8
  %3492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3491, i8* %3492, align 1, !tbaa !2450
  %3493 = load i64, i64* %RBP
  %3494 = sub i64 %3493, 72
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 3
  store i64 %3496, i64* %PC
  %3497 = inttoptr i64 %3494 to i32*
  %3498 = load i32, i32* %3497
  %3499 = zext i32 %3498 to i64
  store i64 %3499, i64* %RSI, align 8, !tbaa !2428
  %3500 = load i64, i64* %RBP
  %3501 = sub i64 %3500, 16
  %3502 = load i64, i64* %PC
  %3503 = add i64 %3502, 4
  store i64 %3503, i64* %PC
  %3504 = inttoptr i64 %3501 to i64*
  %3505 = load i64, i64* %3504
  store i64 %3505, i64* %RCX, align 8, !tbaa !2428
  %3506 = load i64, i64* %RSI
  %3507 = load i64, i64* %RCX
  %3508 = add i64 %3507, 20
  %3509 = load i64, i64* %PC
  %3510 = add i64 %3509, 4
  store i64 %3510, i64* %PC
  %3511 = inttoptr i64 %3508 to i32*
  %3512 = load i32, i32* %3511
  %3513 = shl i64 %3506, 32
  %3514 = ashr exact i64 %3513, 32
  %3515 = sext i32 %3512 to i64
  %3516 = mul nsw i64 %3515, %3514
  %3517 = trunc i64 %3516 to i32
  %3518 = and i64 %3516, 4294967295
  store i64 %3518, i64* %RSI, align 8, !tbaa !2428
  %3519 = shl i64 %3516, 32
  %3520 = ashr exact i64 %3519, 32
  %3521 = icmp ne i64 %3520, %3516
  %3522 = zext i1 %3521 to i8
  %3523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3522, i8* %3523, align 1, !tbaa !2432
  %3524 = and i32 %3517, 255
  %3525 = call i32 @llvm.ctpop.i32(i32 %3524) #16
  %3526 = trunc i32 %3525 to i8
  %3527 = and i8 %3526, 1
  %3528 = xor i8 %3527, 1
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3528, i8* %3529, align 1, !tbaa !2446
  %3530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3530, align 1, !tbaa !2447
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3531, align 1, !tbaa !2448
  %3532 = lshr i32 %3517, 31
  %3533 = trunc i32 %3532 to i8
  %3534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3533, i8* %3534, align 1, !tbaa !2449
  %3535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3522, i8* %3535, align 1, !tbaa !2450
  %3536 = load i64, i64* %RDX
  %3537 = load i32, i32* %ESI
  %3538 = zext i32 %3537 to i64
  %3539 = load i64, i64* %PC
  %3540 = add i64 %3539, 2
  store i64 %3540, i64* %PC
  %3541 = trunc i64 %3536 to i32
  %3542 = add i32 %3537, %3541
  %3543 = zext i32 %3542 to i64
  store i64 %3543, i64* %RDX, align 8, !tbaa !2428
  %3544 = icmp ult i32 %3542, %3541
  %3545 = icmp ult i32 %3542, %3537
  %3546 = or i1 %3544, %3545
  %3547 = zext i1 %3546 to i8
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3547, i8* %3548, align 1, !tbaa !2432
  %3549 = and i32 %3542, 255
  %3550 = call i32 @llvm.ctpop.i32(i32 %3549) #16
  %3551 = trunc i32 %3550 to i8
  %3552 = and i8 %3551, 1
  %3553 = xor i8 %3552, 1
  %3554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3553, i8* %3554, align 1, !tbaa !2446
  %3555 = xor i64 %3538, %3536
  %3556 = trunc i64 %3555 to i32
  %3557 = xor i32 %3556, %3542
  %3558 = lshr i32 %3557, 4
  %3559 = trunc i32 %3558 to i8
  %3560 = and i8 %3559, 1
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3560, i8* %3561, align 1, !tbaa !2447
  %3562 = icmp eq i32 %3542, 0
  %3563 = zext i1 %3562 to i8
  %3564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3563, i8* %3564, align 1, !tbaa !2448
  %3565 = lshr i32 %3542, 31
  %3566 = trunc i32 %3565 to i8
  %3567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3566, i8* %3567, align 1, !tbaa !2449
  %3568 = lshr i32 %3541, 31
  %3569 = lshr i32 %3537, 31
  %3570 = xor i32 %3565, %3568
  %3571 = xor i32 %3565, %3569
  %3572 = add nuw nsw i32 %3570, %3571
  %3573 = icmp eq i32 %3572, 2
  %3574 = zext i1 %3573 to i8
  %3575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3574, i8* %3575, align 1, !tbaa !2450
  %3576 = load i64, i64* %RDX
  %3577 = load i64, i64* %RBP
  %3578 = sub i64 %3577, 76
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 3
  store i64 %3580, i64* %PC
  %3581 = trunc i64 %3576 to i32
  %3582 = inttoptr i64 %3578 to i32*
  %3583 = load i32, i32* %3582
  %3584 = add i32 %3583, %3581
  %3585 = zext i32 %3584 to i64
  store i64 %3585, i64* %RDX, align 8, !tbaa !2428
  %3586 = icmp ult i32 %3584, %3581
  %3587 = icmp ult i32 %3584, %3583
  %3588 = or i1 %3586, %3587
  %3589 = zext i1 %3588 to i8
  %3590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3589, i8* %3590, align 1, !tbaa !2432
  %3591 = and i32 %3584, 255
  %3592 = call i32 @llvm.ctpop.i32(i32 %3591) #16
  %3593 = trunc i32 %3592 to i8
  %3594 = and i8 %3593, 1
  %3595 = xor i8 %3594, 1
  %3596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3595, i8* %3596, align 1, !tbaa !2446
  %3597 = xor i32 %3583, %3581
  %3598 = xor i32 %3597, %3584
  %3599 = lshr i32 %3598, 4
  %3600 = trunc i32 %3599 to i8
  %3601 = and i8 %3600, 1
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3601, i8* %3602, align 1, !tbaa !2447
  %3603 = icmp eq i32 %3584, 0
  %3604 = zext i1 %3603 to i8
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3604, i8* %3605, align 1, !tbaa !2448
  %3606 = lshr i32 %3584, 31
  %3607 = trunc i32 %3606 to i8
  %3608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3607, i8* %3608, align 1, !tbaa !2449
  %3609 = lshr i32 %3581, 31
  %3610 = lshr i32 %3583, 31
  %3611 = xor i32 %3606, %3609
  %3612 = xor i32 %3606, %3610
  %3613 = add nuw nsw i32 %3611, %3612
  %3614 = icmp eq i32 %3613, 2
  %3615 = zext i1 %3614 to i8
  %3616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3615, i8* %3616, align 1, !tbaa !2450
  %3617 = load i32, i32* %EDX
  %3618 = zext i32 %3617 to i64
  %3619 = load i64, i64* %PC
  %3620 = add i64 %3619, 3
  store i64 %3620, i64* %PC
  %3621 = shl i64 %3618, 32
  %3622 = ashr exact i64 %3621, 32
  store i64 %3622, i64* %RCX, align 8, !tbaa !2428
  %3623 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3624 = load i64, i64* %RAX
  %3625 = load i64, i64* %RCX
  %3626 = mul i64 %3625, 4
  %3627 = add i64 %3626, %3624
  %3628 = load i64, i64* %PC
  %3629 = add i64 %3628, 5
  store i64 %3629, i64* %PC
  %3630 = inttoptr i64 %3627 to float*
  %3631 = load float, float* %3630
  %3632 = bitcast i8* %3623 to float*
  store float %3631, float* %3632, align 1, !tbaa !2452
  %3633 = getelementptr inbounds i8, i8* %3623, i64 4
  %3634 = bitcast i8* %3633 to float*
  store float 0.000000e+00, float* %3634, align 1, !tbaa !2452
  %3635 = getelementptr inbounds i8, i8* %3623, i64 8
  %3636 = bitcast i8* %3635 to float*
  store float 0.000000e+00, float* %3636, align 1, !tbaa !2452
  %3637 = getelementptr inbounds i8, i8* %3623, i64 12
  %3638 = bitcast i8* %3637 to float*
  store float 0.000000e+00, float* %3638, align 1, !tbaa !2452
  %3639 = load i64, i64* %RBP
  %3640 = sub i64 %3639, 40
  %3641 = load i64, i64* %PC
  %3642 = add i64 %3641, 4
  store i64 %3642, i64* %PC
  %3643 = inttoptr i64 %3640 to i64*
  %3644 = load i64, i64* %3643
  store i64 %3644, i64* %RAX, align 8, !tbaa !2428
  %3645 = load i64, i64* %RAX
  %3646 = load i64, i64* %PC
  %3647 = add i64 %3646, 3
  store i64 %3647, i64* %PC
  %3648 = inttoptr i64 %3645 to i64*
  %3649 = load i64, i64* %3648
  store i64 %3649, i64* %RAX, align 8, !tbaa !2428
  %3650 = load i64, i64* %RBP
  %3651 = sub i64 %3650, 40
  %3652 = load i64, i64* %PC
  %3653 = add i64 %3652, 4
  store i64 %3653, i64* %PC
  %3654 = inttoptr i64 %3651 to i64*
  %3655 = load i64, i64* %3654
  store i64 %3655, i64* %RCX, align 8, !tbaa !2428
  %3656 = load i64, i64* %RCX
  %3657 = add i64 %3656, 12
  %3658 = load i64, i64* %PC
  %3659 = add i64 %3658, 4
  store i64 %3659, i64* %PC
  %3660 = inttoptr i64 %3657 to i32*
  %3661 = load i32, i32* %3660
  %3662 = sext i32 %3661 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %3663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3663, align 1, !tbaa !2432
  %3664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %3664, align 1, !tbaa !2446
  %3665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3665, align 1, !tbaa !2447
  %3666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3666, align 1, !tbaa !2448
  %3667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3667, align 1, !tbaa !2449
  %3668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3668, align 1, !tbaa !2450
  %3669 = load i64, i64* %RBP
  %3670 = sub i64 %3669, 40
  %3671 = load i64, i64* %PC
  %3672 = add i64 %3671, 4
  store i64 %3672, i64* %PC
  %3673 = inttoptr i64 %3670 to i64*
  %3674 = load i64, i64* %3673
  store i64 %3674, i64* %RCX, align 8, !tbaa !2428
  %3675 = load i64, i64* %RDX
  %3676 = load i64, i64* %RCX
  %3677 = add i64 %3676, 16
  %3678 = load i64, i64* %PC
  %3679 = add i64 %3678, 4
  store i64 %3679, i64* %PC
  %3680 = inttoptr i64 %3677 to i32*
  %3681 = load i32, i32* %3680
  %3682 = shl i64 %3675, 32
  %3683 = ashr exact i64 %3682, 32
  %3684 = sext i32 %3681 to i64
  %3685 = mul nsw i64 %3684, %3683
  %3686 = trunc i64 %3685 to i32
  %3687 = and i64 %3685, 4294967295
  store i64 %3687, i64* %RDX, align 8, !tbaa !2428
  %3688 = shl i64 %3685, 32
  %3689 = ashr exact i64 %3688, 32
  %3690 = icmp ne i64 %3689, %3685
  %3691 = zext i1 %3690 to i8
  %3692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3691, i8* %3692, align 1, !tbaa !2432
  %3693 = and i32 %3686, 255
  %3694 = call i32 @llvm.ctpop.i32(i32 %3693) #16
  %3695 = trunc i32 %3694 to i8
  %3696 = and i8 %3695, 1
  %3697 = xor i8 %3696, 1
  %3698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3697, i8* %3698, align 1, !tbaa !2446
  %3699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3699, align 1, !tbaa !2447
  %3700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3700, align 1, !tbaa !2448
  %3701 = lshr i32 %3686, 31
  %3702 = trunc i32 %3701 to i8
  %3703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3702, i8* %3703, align 1, !tbaa !2449
  %3704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3691, i8* %3704, align 1, !tbaa !2450
  %3705 = load i64, i64* %RBP
  %3706 = sub i64 %3705, 40
  %3707 = load i64, i64* %PC
  %3708 = add i64 %3707, 4
  store i64 %3708, i64* %PC
  %3709 = inttoptr i64 %3706 to i64*
  %3710 = load i64, i64* %3709
  store i64 %3710, i64* %RCX, align 8, !tbaa !2428
  %3711 = load i64, i64* %RDX
  %3712 = load i64, i64* %RCX
  %3713 = add i64 %3712, 20
  %3714 = load i64, i64* %PC
  %3715 = add i64 %3714, 4
  store i64 %3715, i64* %PC
  %3716 = inttoptr i64 %3713 to i32*
  %3717 = load i32, i32* %3716
  %3718 = shl i64 %3711, 32
  %3719 = ashr exact i64 %3718, 32
  %3720 = sext i32 %3717 to i64
  %3721 = mul nsw i64 %3720, %3719
  %3722 = trunc i64 %3721 to i32
  %3723 = and i64 %3721, 4294967295
  store i64 %3723, i64* %RDX, align 8, !tbaa !2428
  %3724 = shl i64 %3721, 32
  %3725 = ashr exact i64 %3724, 32
  %3726 = icmp ne i64 %3725, %3721
  %3727 = zext i1 %3726 to i8
  %3728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3727, i8* %3728, align 1, !tbaa !2432
  %3729 = and i32 %3722, 255
  %3730 = call i32 @llvm.ctpop.i32(i32 %3729) #16
  %3731 = trunc i32 %3730 to i8
  %3732 = and i8 %3731, 1
  %3733 = xor i8 %3732, 1
  %3734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3733, i8* %3734, align 1, !tbaa !2446
  %3735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3735, align 1, !tbaa !2447
  %3736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3736, align 1, !tbaa !2448
  %3737 = lshr i32 %3722, 31
  %3738 = trunc i32 %3737 to i8
  %3739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3738, i8* %3739, align 1, !tbaa !2449
  %3740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3727, i8* %3740, align 1, !tbaa !2450
  %3741 = load i64, i64* %RBP
  %3742 = sub i64 %3741, 68
  %3743 = load i64, i64* %PC
  %3744 = add i64 %3743, 3
  store i64 %3744, i64* %PC
  %3745 = inttoptr i64 %3742 to i32*
  %3746 = load i32, i32* %3745
  %3747 = zext i32 %3746 to i64
  store i64 %3747, i64* %RSI, align 8, !tbaa !2428
  %3748 = load i64, i64* %RBP
  %3749 = sub i64 %3748, 40
  %3750 = load i64, i64* %PC
  %3751 = add i64 %3750, 4
  store i64 %3751, i64* %PC
  %3752 = inttoptr i64 %3749 to i64*
  %3753 = load i64, i64* %3752
  store i64 %3753, i64* %RCX, align 8, !tbaa !2428
  %3754 = load i64, i64* %RSI
  %3755 = load i64, i64* %RCX
  %3756 = add i64 %3755, 16
  %3757 = load i64, i64* %PC
  %3758 = add i64 %3757, 4
  store i64 %3758, i64* %PC
  %3759 = inttoptr i64 %3756 to i32*
  %3760 = load i32, i32* %3759
  %3761 = shl i64 %3754, 32
  %3762 = ashr exact i64 %3761, 32
  %3763 = sext i32 %3760 to i64
  %3764 = mul nsw i64 %3763, %3762
  %3765 = trunc i64 %3764 to i32
  %3766 = and i64 %3764, 4294967295
  store i64 %3766, i64* %RSI, align 8, !tbaa !2428
  %3767 = shl i64 %3764, 32
  %3768 = ashr exact i64 %3767, 32
  %3769 = icmp ne i64 %3768, %3764
  %3770 = zext i1 %3769 to i8
  %3771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3770, i8* %3771, align 1, !tbaa !2432
  %3772 = and i32 %3765, 255
  %3773 = call i32 @llvm.ctpop.i32(i32 %3772) #16
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  %3776 = xor i8 %3775, 1
  %3777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3776, i8* %3777, align 1, !tbaa !2446
  %3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3778, align 1, !tbaa !2447
  %3779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3779, align 1, !tbaa !2448
  %3780 = lshr i32 %3765, 31
  %3781 = trunc i32 %3780 to i8
  %3782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3781, i8* %3782, align 1, !tbaa !2449
  %3783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3770, i8* %3783, align 1, !tbaa !2450
  %3784 = load i64, i64* %RBP
  %3785 = sub i64 %3784, 40
  %3786 = load i64, i64* %PC
  %3787 = add i64 %3786, 4
  store i64 %3787, i64* %PC
  %3788 = inttoptr i64 %3785 to i64*
  %3789 = load i64, i64* %3788
  store i64 %3789, i64* %RCX, align 8, !tbaa !2428
  %3790 = load i64, i64* %RSI
  %3791 = load i64, i64* %RCX
  %3792 = add i64 %3791, 20
  %3793 = load i64, i64* %PC
  %3794 = add i64 %3793, 4
  store i64 %3794, i64* %PC
  %3795 = inttoptr i64 %3792 to i32*
  %3796 = load i32, i32* %3795
  %3797 = shl i64 %3790, 32
  %3798 = ashr exact i64 %3797, 32
  %3799 = sext i32 %3796 to i64
  %3800 = mul nsw i64 %3799, %3798
  %3801 = trunc i64 %3800 to i32
  %3802 = and i64 %3800, 4294967295
  store i64 %3802, i64* %RSI, align 8, !tbaa !2428
  %3803 = shl i64 %3800, 32
  %3804 = ashr exact i64 %3803, 32
  %3805 = icmp ne i64 %3804, %3800
  %3806 = zext i1 %3805 to i8
  %3807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3806, i8* %3807, align 1, !tbaa !2432
  %3808 = and i32 %3801, 255
  %3809 = call i32 @llvm.ctpop.i32(i32 %3808) #16
  %3810 = trunc i32 %3809 to i8
  %3811 = and i8 %3810, 1
  %3812 = xor i8 %3811, 1
  %3813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3812, i8* %3813, align 1, !tbaa !2446
  %3814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3814, align 1, !tbaa !2447
  %3815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3815, align 1, !tbaa !2448
  %3816 = lshr i32 %3801, 31
  %3817 = trunc i32 %3816 to i8
  %3818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3817, i8* %3818, align 1, !tbaa !2449
  %3819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3806, i8* %3819, align 1, !tbaa !2450
  %3820 = load i64, i64* %RDX
  %3821 = load i32, i32* %ESI
  %3822 = zext i32 %3821 to i64
  %3823 = load i64, i64* %PC
  %3824 = add i64 %3823, 2
  store i64 %3824, i64* %PC
  %3825 = trunc i64 %3820 to i32
  %3826 = add i32 %3821, %3825
  %3827 = zext i32 %3826 to i64
  store i64 %3827, i64* %RDX, align 8, !tbaa !2428
  %3828 = icmp ult i32 %3826, %3825
  %3829 = icmp ult i32 %3826, %3821
  %3830 = or i1 %3828, %3829
  %3831 = zext i1 %3830 to i8
  %3832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3831, i8* %3832, align 1, !tbaa !2432
  %3833 = and i32 %3826, 255
  %3834 = call i32 @llvm.ctpop.i32(i32 %3833) #16
  %3835 = trunc i32 %3834 to i8
  %3836 = and i8 %3835, 1
  %3837 = xor i8 %3836, 1
  %3838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3837, i8* %3838, align 1, !tbaa !2446
  %3839 = xor i64 %3822, %3820
  %3840 = trunc i64 %3839 to i32
  %3841 = xor i32 %3840, %3826
  %3842 = lshr i32 %3841, 4
  %3843 = trunc i32 %3842 to i8
  %3844 = and i8 %3843, 1
  %3845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3844, i8* %3845, align 1, !tbaa !2447
  %3846 = icmp eq i32 %3826, 0
  %3847 = zext i1 %3846 to i8
  %3848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3847, i8* %3848, align 1, !tbaa !2448
  %3849 = lshr i32 %3826, 31
  %3850 = trunc i32 %3849 to i8
  %3851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3850, i8* %3851, align 1, !tbaa !2449
  %3852 = lshr i32 %3825, 31
  %3853 = lshr i32 %3821, 31
  %3854 = xor i32 %3849, %3852
  %3855 = xor i32 %3849, %3853
  %3856 = add nuw nsw i32 %3854, %3855
  %3857 = icmp eq i32 %3856, 2
  %3858 = zext i1 %3857 to i8
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3858, i8* %3859, align 1, !tbaa !2450
  %3860 = load i64, i64* %RBP
  %3861 = sub i64 %3860, 72
  %3862 = load i64, i64* %PC
  %3863 = add i64 %3862, 3
  store i64 %3863, i64* %PC
  %3864 = inttoptr i64 %3861 to i32*
  %3865 = load i32, i32* %3864
  %3866 = zext i32 %3865 to i64
  store i64 %3866, i64* %RSI, align 8, !tbaa !2428
  %3867 = load i64, i64* %RBP
  %3868 = sub i64 %3867, 40
  %3869 = load i64, i64* %PC
  %3870 = add i64 %3869, 4
  store i64 %3870, i64* %PC
  %3871 = inttoptr i64 %3868 to i64*
  %3872 = load i64, i64* %3871
  store i64 %3872, i64* %RCX, align 8, !tbaa !2428
  %3873 = load i64, i64* %RSI
  %3874 = load i64, i64* %RCX
  %3875 = add i64 %3874, 20
  %3876 = load i64, i64* %PC
  %3877 = add i64 %3876, 4
  store i64 %3877, i64* %PC
  %3878 = inttoptr i64 %3875 to i32*
  %3879 = load i32, i32* %3878
  %3880 = shl i64 %3873, 32
  %3881 = ashr exact i64 %3880, 32
  %3882 = sext i32 %3879 to i64
  %3883 = mul nsw i64 %3882, %3881
  %3884 = trunc i64 %3883 to i32
  %3885 = and i64 %3883, 4294967295
  store i64 %3885, i64* %RSI, align 8, !tbaa !2428
  %3886 = shl i64 %3883, 32
  %3887 = ashr exact i64 %3886, 32
  %3888 = icmp ne i64 %3887, %3883
  %3889 = zext i1 %3888 to i8
  %3890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3889, i8* %3890, align 1, !tbaa !2432
  %3891 = and i32 %3884, 255
  %3892 = call i32 @llvm.ctpop.i32(i32 %3891) #16
  %3893 = trunc i32 %3892 to i8
  %3894 = and i8 %3893, 1
  %3895 = xor i8 %3894, 1
  %3896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3895, i8* %3896, align 1, !tbaa !2446
  %3897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3897, align 1, !tbaa !2447
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3898, align 1, !tbaa !2448
  %3899 = lshr i32 %3884, 31
  %3900 = trunc i32 %3899 to i8
  %3901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3900, i8* %3901, align 1, !tbaa !2449
  %3902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3889, i8* %3902, align 1, !tbaa !2450
  %3903 = load i64, i64* %RDX
  %3904 = load i32, i32* %ESI
  %3905 = zext i32 %3904 to i64
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 2
  store i64 %3907, i64* %PC
  %3908 = trunc i64 %3903 to i32
  %3909 = add i32 %3904, %3908
  %3910 = zext i32 %3909 to i64
  store i64 %3910, i64* %RDX, align 8, !tbaa !2428
  %3911 = icmp ult i32 %3909, %3908
  %3912 = icmp ult i32 %3909, %3904
  %3913 = or i1 %3911, %3912
  %3914 = zext i1 %3913 to i8
  %3915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3914, i8* %3915, align 1, !tbaa !2432
  %3916 = and i32 %3909, 255
  %3917 = call i32 @llvm.ctpop.i32(i32 %3916) #16
  %3918 = trunc i32 %3917 to i8
  %3919 = and i8 %3918, 1
  %3920 = xor i8 %3919, 1
  %3921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3920, i8* %3921, align 1, !tbaa !2446
  %3922 = xor i64 %3905, %3903
  %3923 = trunc i64 %3922 to i32
  %3924 = xor i32 %3923, %3909
  %3925 = lshr i32 %3924, 4
  %3926 = trunc i32 %3925 to i8
  %3927 = and i8 %3926, 1
  %3928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3927, i8* %3928, align 1, !tbaa !2447
  %3929 = icmp eq i32 %3909, 0
  %3930 = zext i1 %3929 to i8
  %3931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3930, i8* %3931, align 1, !tbaa !2448
  %3932 = lshr i32 %3909, 31
  %3933 = trunc i32 %3932 to i8
  %3934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3933, i8* %3934, align 1, !tbaa !2449
  %3935 = lshr i32 %3908, 31
  %3936 = lshr i32 %3904, 31
  %3937 = xor i32 %3932, %3935
  %3938 = xor i32 %3932, %3936
  %3939 = add nuw nsw i32 %3937, %3938
  %3940 = icmp eq i32 %3939, 2
  %3941 = zext i1 %3940 to i8
  %3942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3941, i8* %3942, align 1, !tbaa !2450
  %3943 = load i64, i64* %RBP
  %3944 = sub i64 %3943, 76
  %3945 = load i64, i64* %PC
  %3946 = add i64 %3945, 3
  store i64 %3946, i64* %PC
  %3947 = inttoptr i64 %3944 to i32*
  %3948 = load i32, i32* %3947
  %3949 = zext i32 %3948 to i64
  store i64 %3949, i64* %RSI, align 8, !tbaa !2428
  %3950 = load i64, i64* %RSI
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 3
  store i64 %3952, i64* %PC
  %3953 = trunc i64 %3950 to i32
  %3954 = add i32 1, %3953
  %3955 = zext i32 %3954 to i64
  store i64 %3955, i64* %RSI, align 8, !tbaa !2428
  %3956 = icmp ult i32 %3954, %3953
  %3957 = icmp ult i32 %3954, 1
  %3958 = or i1 %3956, %3957
  %3959 = zext i1 %3958 to i8
  %3960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3959, i8* %3960, align 1, !tbaa !2432
  %3961 = and i32 %3954, 255
  %3962 = call i32 @llvm.ctpop.i32(i32 %3961) #16
  %3963 = trunc i32 %3962 to i8
  %3964 = and i8 %3963, 1
  %3965 = xor i8 %3964, 1
  %3966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3965, i8* %3966, align 1, !tbaa !2446
  %3967 = xor i64 1, %3950
  %3968 = trunc i64 %3967 to i32
  %3969 = xor i32 %3968, %3954
  %3970 = lshr i32 %3969, 4
  %3971 = trunc i32 %3970 to i8
  %3972 = and i8 %3971, 1
  %3973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3972, i8* %3973, align 1, !tbaa !2447
  %3974 = icmp eq i32 %3954, 0
  %3975 = zext i1 %3974 to i8
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3975, i8* %3976, align 1, !tbaa !2448
  %3977 = lshr i32 %3954, 31
  %3978 = trunc i32 %3977 to i8
  %3979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3978, i8* %3979, align 1, !tbaa !2449
  %3980 = lshr i32 %3953, 31
  %3981 = xor i32 %3977, %3980
  %3982 = add nuw nsw i32 %3981, %3977
  %3983 = icmp eq i32 %3982, 2
  %3984 = zext i1 %3983 to i8
  %3985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3984, i8* %3985, align 1, !tbaa !2450
  %3986 = load i64, i64* %RDX
  %3987 = load i32, i32* %ESI
  %3988 = zext i32 %3987 to i64
  %3989 = load i64, i64* %PC
  %3990 = add i64 %3989, 2
  store i64 %3990, i64* %PC
  %3991 = trunc i64 %3986 to i32
  %3992 = add i32 %3987, %3991
  %3993 = zext i32 %3992 to i64
  store i64 %3993, i64* %RDX, align 8, !tbaa !2428
  %3994 = icmp ult i32 %3992, %3991
  %3995 = icmp ult i32 %3992, %3987
  %3996 = or i1 %3994, %3995
  %3997 = zext i1 %3996 to i8
  %3998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3997, i8* %3998, align 1, !tbaa !2432
  %3999 = and i32 %3992, 255
  %4000 = call i32 @llvm.ctpop.i32(i32 %3999) #16
  %4001 = trunc i32 %4000 to i8
  %4002 = and i8 %4001, 1
  %4003 = xor i8 %4002, 1
  %4004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4003, i8* %4004, align 1, !tbaa !2446
  %4005 = xor i64 %3988, %3986
  %4006 = trunc i64 %4005 to i32
  %4007 = xor i32 %4006, %3992
  %4008 = lshr i32 %4007, 4
  %4009 = trunc i32 %4008 to i8
  %4010 = and i8 %4009, 1
  %4011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4010, i8* %4011, align 1, !tbaa !2447
  %4012 = icmp eq i32 %3992, 0
  %4013 = zext i1 %4012 to i8
  %4014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4013, i8* %4014, align 1, !tbaa !2448
  %4015 = lshr i32 %3992, 31
  %4016 = trunc i32 %4015 to i8
  %4017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4016, i8* %4017, align 1, !tbaa !2449
  %4018 = lshr i32 %3991, 31
  %4019 = lshr i32 %3987, 31
  %4020 = xor i32 %4015, %4018
  %4021 = xor i32 %4015, %4019
  %4022 = add nuw nsw i32 %4020, %4021
  %4023 = icmp eq i32 %4022, 2
  %4024 = zext i1 %4023 to i8
  %4025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4024, i8* %4025, align 1, !tbaa !2450
  %4026 = load i32, i32* %EDX
  %4027 = zext i32 %4026 to i64
  %4028 = load i64, i64* %PC
  %4029 = add i64 %4028, 3
  store i64 %4029, i64* %PC
  %4030 = shl i64 %4027, 32
  %4031 = ashr exact i64 %4030, 32
  store i64 %4031, i64* %RCX, align 8, !tbaa !2428
  %4032 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4034 = load i64, i64* %RAX
  %4035 = load i64, i64* %RCX
  %4036 = mul i64 %4035, 4
  %4037 = add i64 %4036, %4034
  %4038 = load i64, i64* %PC
  %4039 = add i64 %4038, 5
  store i64 %4039, i64* %PC
  %4040 = bitcast i8* %4033 to <2 x float>*
  %4041 = load <2 x float>, <2 x float>* %4040, align 1
  %4042 = getelementptr inbounds i8, i8* %4033, i64 8
  %4043 = bitcast i8* %4042 to <2 x i32>*
  %4044 = load <2 x i32>, <2 x i32>* %4043, align 1
  %4045 = inttoptr i64 %4037 to float*
  %4046 = load float, float* %4045
  %4047 = extractelement <2 x float> %4041, i32 0
  %4048 = fmul float %4047, %4046
  %4049 = bitcast i8* %4032 to float*
  store float %4048, float* %4049, align 1, !tbaa !2452
  %4050 = bitcast <2 x float> %4041 to <2 x i32>
  %4051 = extractelement <2 x i32> %4050, i32 1
  %4052 = getelementptr inbounds i8, i8* %4032, i64 4
  %4053 = bitcast i8* %4052 to i32*
  store i32 %4051, i32* %4053, align 1, !tbaa !2452
  %4054 = extractelement <2 x i32> %4044, i32 0
  %4055 = getelementptr inbounds i8, i8* %4032, i64 8
  %4056 = bitcast i8* %4055 to i32*
  store i32 %4054, i32* %4056, align 1, !tbaa !2452
  %4057 = extractelement <2 x i32> %4044, i32 1
  %4058 = getelementptr inbounds i8, i8* %4032, i64 12
  %4059 = bitcast i8* %4058 to i32*
  store i32 %4057, i32* %4059, align 1, !tbaa !2452
  %4060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4061 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4062 = bitcast %union.vec128_t* %XMM1 to i8*
  %4063 = load i64, i64* %PC
  %4064 = add i64 %4063, 4
  store i64 %4064, i64* %PC
  %4065 = bitcast i8* %4061 to <2 x float>*
  %4066 = load <2 x float>, <2 x float>* %4065, align 1
  %4067 = getelementptr inbounds i8, i8* %4061, i64 8
  %4068 = bitcast i8* %4067 to <2 x i32>*
  %4069 = load <2 x i32>, <2 x i32>* %4068, align 1
  %4070 = bitcast i8* %4062 to <2 x float>*
  %4071 = load <2 x float>, <2 x float>* %4070, align 1
  %4072 = extractelement <2 x float> %4066, i32 0
  %4073 = extractelement <2 x float> %4071, i32 0
  %4074 = fadd float %4072, %4073
  %4075 = bitcast i8* %4060 to float*
  store float %4074, float* %4075, align 1, !tbaa !2452
  %4076 = bitcast <2 x float> %4066 to <2 x i32>
  %4077 = extractelement <2 x i32> %4076, i32 1
  %4078 = getelementptr inbounds i8, i8* %4060, i64 4
  %4079 = bitcast i8* %4078 to i32*
  store i32 %4077, i32* %4079, align 1, !tbaa !2452
  %4080 = extractelement <2 x i32> %4069, i32 0
  %4081 = getelementptr inbounds i8, i8* %4060, i64 8
  %4082 = bitcast i8* %4081 to i32*
  store i32 %4080, i32* %4082, align 1, !tbaa !2452
  %4083 = extractelement <2 x i32> %4069, i32 1
  %4084 = getelementptr inbounds i8, i8* %4060, i64 12
  %4085 = bitcast i8* %4084 to i32*
  store i32 %4083, i32* %4085, align 1, !tbaa !2452
  %4086 = load i64, i64* %RBP
  %4087 = sub i64 %4086, 24
  %4088 = load i64, i64* %PC
  %4089 = add i64 %4088, 4
  store i64 %4089, i64* %PC
  %4090 = inttoptr i64 %4087 to i64*
  %4091 = load i64, i64* %4090
  store i64 %4091, i64* %RAX, align 8, !tbaa !2428
  %4092 = load i64, i64* %RAX
  %4093 = load i64, i64* %PC
  %4094 = add i64 %4093, 3
  store i64 %4094, i64* %PC
  %4095 = inttoptr i64 %4092 to i64*
  %4096 = load i64, i64* %4095
  store i64 %4096, i64* %RAX, align 8, !tbaa !2428
  %4097 = load i64, i64* %RBP
  %4098 = sub i64 %4097, 24
  %4099 = load i64, i64* %PC
  %4100 = add i64 %4099, 4
  store i64 %4100, i64* %PC
  %4101 = inttoptr i64 %4098 to i64*
  %4102 = load i64, i64* %4101
  store i64 %4102, i64* %RCX, align 8, !tbaa !2428
  %4103 = load i64, i64* %RCX
  %4104 = add i64 %4103, 12
  %4105 = load i64, i64* %PC
  %4106 = add i64 %4105, 4
  store i64 %4106, i64* %PC
  %4107 = inttoptr i64 %4104 to i32*
  %4108 = load i32, i32* %4107
  %4109 = sext i32 %4108 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4110, align 1, !tbaa !2432
  %4111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4111, align 1, !tbaa !2446
  %4112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4112, align 1, !tbaa !2447
  %4113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4113, align 1, !tbaa !2448
  %4114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4114, align 1, !tbaa !2449
  %4115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4115, align 1, !tbaa !2450
  %4116 = load i64, i64* %RBP
  %4117 = sub i64 %4116, 24
  %4118 = load i64, i64* %PC
  %4119 = add i64 %4118, 4
  store i64 %4119, i64* %PC
  %4120 = inttoptr i64 %4117 to i64*
  %4121 = load i64, i64* %4120
  store i64 %4121, i64* %RCX, align 8, !tbaa !2428
  %4122 = load i64, i64* %RDX
  %4123 = load i64, i64* %RCX
  %4124 = add i64 %4123, 16
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 4
  store i64 %4126, i64* %PC
  %4127 = inttoptr i64 %4124 to i32*
  %4128 = load i32, i32* %4127
  %4129 = shl i64 %4122, 32
  %4130 = ashr exact i64 %4129, 32
  %4131 = sext i32 %4128 to i64
  %4132 = mul nsw i64 %4131, %4130
  %4133 = trunc i64 %4132 to i32
  %4134 = and i64 %4132, 4294967295
  store i64 %4134, i64* %RDX, align 8, !tbaa !2428
  %4135 = shl i64 %4132, 32
  %4136 = ashr exact i64 %4135, 32
  %4137 = icmp ne i64 %4136, %4132
  %4138 = zext i1 %4137 to i8
  %4139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4138, i8* %4139, align 1, !tbaa !2432
  %4140 = and i32 %4133, 255
  %4141 = call i32 @llvm.ctpop.i32(i32 %4140) #16
  %4142 = trunc i32 %4141 to i8
  %4143 = and i8 %4142, 1
  %4144 = xor i8 %4143, 1
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4144, i8* %4145, align 1, !tbaa !2446
  %4146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4146, align 1, !tbaa !2447
  %4147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4147, align 1, !tbaa !2448
  %4148 = lshr i32 %4133, 31
  %4149 = trunc i32 %4148 to i8
  %4150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4149, i8* %4150, align 1, !tbaa !2449
  %4151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4138, i8* %4151, align 1, !tbaa !2450
  %4152 = load i64, i64* %RBP
  %4153 = sub i64 %4152, 24
  %4154 = load i64, i64* %PC
  %4155 = add i64 %4154, 4
  store i64 %4155, i64* %PC
  %4156 = inttoptr i64 %4153 to i64*
  %4157 = load i64, i64* %4156
  store i64 %4157, i64* %RCX, align 8, !tbaa !2428
  %4158 = load i64, i64* %RDX
  %4159 = load i64, i64* %RCX
  %4160 = add i64 %4159, 20
  %4161 = load i64, i64* %PC
  %4162 = add i64 %4161, 4
  store i64 %4162, i64* %PC
  %4163 = inttoptr i64 %4160 to i32*
  %4164 = load i32, i32* %4163
  %4165 = shl i64 %4158, 32
  %4166 = ashr exact i64 %4165, 32
  %4167 = sext i32 %4164 to i64
  %4168 = mul nsw i64 %4167, %4166
  %4169 = trunc i64 %4168 to i32
  %4170 = and i64 %4168, 4294967295
  store i64 %4170, i64* %RDX, align 8, !tbaa !2428
  %4171 = shl i64 %4168, 32
  %4172 = ashr exact i64 %4171, 32
  %4173 = icmp ne i64 %4172, %4168
  %4174 = zext i1 %4173 to i8
  %4175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4174, i8* %4175, align 1, !tbaa !2432
  %4176 = and i32 %4169, 255
  %4177 = call i32 @llvm.ctpop.i32(i32 %4176) #16
  %4178 = trunc i32 %4177 to i8
  %4179 = and i8 %4178, 1
  %4180 = xor i8 %4179, 1
  %4181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4180, i8* %4181, align 1, !tbaa !2446
  %4182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4182, align 1, !tbaa !2447
  %4183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4183, align 1, !tbaa !2448
  %4184 = lshr i32 %4169, 31
  %4185 = trunc i32 %4184 to i8
  %4186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4185, i8* %4186, align 1, !tbaa !2449
  %4187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4174, i8* %4187, align 1, !tbaa !2450
  %4188 = load i64, i64* %RBP
  %4189 = sub i64 %4188, 68
  %4190 = load i64, i64* %PC
  %4191 = add i64 %4190, 3
  store i64 %4191, i64* %PC
  %4192 = inttoptr i64 %4189 to i32*
  %4193 = load i32, i32* %4192
  %4194 = zext i32 %4193 to i64
  store i64 %4194, i64* %RSI, align 8, !tbaa !2428
  %4195 = load i64, i64* %RBP
  %4196 = sub i64 %4195, 24
  %4197 = load i64, i64* %PC
  %4198 = add i64 %4197, 4
  store i64 %4198, i64* %PC
  %4199 = inttoptr i64 %4196 to i64*
  %4200 = load i64, i64* %4199
  store i64 %4200, i64* %RCX, align 8, !tbaa !2428
  %4201 = load i64, i64* %RSI
  %4202 = load i64, i64* %RCX
  %4203 = add i64 %4202, 16
  %4204 = load i64, i64* %PC
  %4205 = add i64 %4204, 4
  store i64 %4205, i64* %PC
  %4206 = inttoptr i64 %4203 to i32*
  %4207 = load i32, i32* %4206
  %4208 = shl i64 %4201, 32
  %4209 = ashr exact i64 %4208, 32
  %4210 = sext i32 %4207 to i64
  %4211 = mul nsw i64 %4210, %4209
  %4212 = trunc i64 %4211 to i32
  %4213 = and i64 %4211, 4294967295
  store i64 %4213, i64* %RSI, align 8, !tbaa !2428
  %4214 = shl i64 %4211, 32
  %4215 = ashr exact i64 %4214, 32
  %4216 = icmp ne i64 %4215, %4211
  %4217 = zext i1 %4216 to i8
  %4218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4217, i8* %4218, align 1, !tbaa !2432
  %4219 = and i32 %4212, 255
  %4220 = call i32 @llvm.ctpop.i32(i32 %4219) #16
  %4221 = trunc i32 %4220 to i8
  %4222 = and i8 %4221, 1
  %4223 = xor i8 %4222, 1
  %4224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4223, i8* %4224, align 1, !tbaa !2446
  %4225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4225, align 1, !tbaa !2447
  %4226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4226, align 1, !tbaa !2448
  %4227 = lshr i32 %4212, 31
  %4228 = trunc i32 %4227 to i8
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4228, i8* %4229, align 1, !tbaa !2449
  %4230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4217, i8* %4230, align 1, !tbaa !2450
  %4231 = load i64, i64* %RBP
  %4232 = sub i64 %4231, 24
  %4233 = load i64, i64* %PC
  %4234 = add i64 %4233, 4
  store i64 %4234, i64* %PC
  %4235 = inttoptr i64 %4232 to i64*
  %4236 = load i64, i64* %4235
  store i64 %4236, i64* %RCX, align 8, !tbaa !2428
  %4237 = load i64, i64* %RSI
  %4238 = load i64, i64* %RCX
  %4239 = add i64 %4238, 20
  %4240 = load i64, i64* %PC
  %4241 = add i64 %4240, 4
  store i64 %4241, i64* %PC
  %4242 = inttoptr i64 %4239 to i32*
  %4243 = load i32, i32* %4242
  %4244 = shl i64 %4237, 32
  %4245 = ashr exact i64 %4244, 32
  %4246 = sext i32 %4243 to i64
  %4247 = mul nsw i64 %4246, %4245
  %4248 = trunc i64 %4247 to i32
  %4249 = and i64 %4247, 4294967295
  store i64 %4249, i64* %RSI, align 8, !tbaa !2428
  %4250 = shl i64 %4247, 32
  %4251 = ashr exact i64 %4250, 32
  %4252 = icmp ne i64 %4251, %4247
  %4253 = zext i1 %4252 to i8
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4253, i8* %4254, align 1, !tbaa !2432
  %4255 = and i32 %4248, 255
  %4256 = call i32 @llvm.ctpop.i32(i32 %4255) #16
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  %4259 = xor i8 %4258, 1
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4259, i8* %4260, align 1, !tbaa !2446
  %4261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4261, align 1, !tbaa !2447
  %4262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4262, align 1, !tbaa !2448
  %4263 = lshr i32 %4248, 31
  %4264 = trunc i32 %4263 to i8
  %4265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4264, i8* %4265, align 1, !tbaa !2449
  %4266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4253, i8* %4266, align 1, !tbaa !2450
  %4267 = load i64, i64* %RDX
  %4268 = load i32, i32* %ESI
  %4269 = zext i32 %4268 to i64
  %4270 = load i64, i64* %PC
  %4271 = add i64 %4270, 2
  store i64 %4271, i64* %PC
  %4272 = trunc i64 %4267 to i32
  %4273 = add i32 %4268, %4272
  %4274 = zext i32 %4273 to i64
  store i64 %4274, i64* %RDX, align 8, !tbaa !2428
  %4275 = icmp ult i32 %4273, %4272
  %4276 = icmp ult i32 %4273, %4268
  %4277 = or i1 %4275, %4276
  %4278 = zext i1 %4277 to i8
  %4279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4278, i8* %4279, align 1, !tbaa !2432
  %4280 = and i32 %4273, 255
  %4281 = call i32 @llvm.ctpop.i32(i32 %4280) #16
  %4282 = trunc i32 %4281 to i8
  %4283 = and i8 %4282, 1
  %4284 = xor i8 %4283, 1
  %4285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4284, i8* %4285, align 1, !tbaa !2446
  %4286 = xor i64 %4269, %4267
  %4287 = trunc i64 %4286 to i32
  %4288 = xor i32 %4287, %4273
  %4289 = lshr i32 %4288, 4
  %4290 = trunc i32 %4289 to i8
  %4291 = and i8 %4290, 1
  %4292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4291, i8* %4292, align 1, !tbaa !2447
  %4293 = icmp eq i32 %4273, 0
  %4294 = zext i1 %4293 to i8
  %4295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4294, i8* %4295, align 1, !tbaa !2448
  %4296 = lshr i32 %4273, 31
  %4297 = trunc i32 %4296 to i8
  %4298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4297, i8* %4298, align 1, !tbaa !2449
  %4299 = lshr i32 %4272, 31
  %4300 = lshr i32 %4268, 31
  %4301 = xor i32 %4296, %4299
  %4302 = xor i32 %4296, %4300
  %4303 = add nuw nsw i32 %4301, %4302
  %4304 = icmp eq i32 %4303, 2
  %4305 = zext i1 %4304 to i8
  %4306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4305, i8* %4306, align 1, !tbaa !2450
  %4307 = load i64, i64* %RBP
  %4308 = sub i64 %4307, 72
  %4309 = load i64, i64* %PC
  %4310 = add i64 %4309, 3
  store i64 %4310, i64* %PC
  %4311 = inttoptr i64 %4308 to i32*
  %4312 = load i32, i32* %4311
  %4313 = zext i32 %4312 to i64
  store i64 %4313, i64* %RSI, align 8, !tbaa !2428
  %4314 = load i64, i64* %RBP
  %4315 = sub i64 %4314, 24
  %4316 = load i64, i64* %PC
  %4317 = add i64 %4316, 4
  store i64 %4317, i64* %PC
  %4318 = inttoptr i64 %4315 to i64*
  %4319 = load i64, i64* %4318
  store i64 %4319, i64* %RCX, align 8, !tbaa !2428
  %4320 = load i64, i64* %RSI
  %4321 = load i64, i64* %RCX
  %4322 = add i64 %4321, 20
  %4323 = load i64, i64* %PC
  %4324 = add i64 %4323, 4
  store i64 %4324, i64* %PC
  %4325 = inttoptr i64 %4322 to i32*
  %4326 = load i32, i32* %4325
  %4327 = shl i64 %4320, 32
  %4328 = ashr exact i64 %4327, 32
  %4329 = sext i32 %4326 to i64
  %4330 = mul nsw i64 %4329, %4328
  %4331 = trunc i64 %4330 to i32
  %4332 = and i64 %4330, 4294967295
  store i64 %4332, i64* %RSI, align 8, !tbaa !2428
  %4333 = shl i64 %4330, 32
  %4334 = ashr exact i64 %4333, 32
  %4335 = icmp ne i64 %4334, %4330
  %4336 = zext i1 %4335 to i8
  %4337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4336, i8* %4337, align 1, !tbaa !2432
  %4338 = and i32 %4331, 255
  %4339 = call i32 @llvm.ctpop.i32(i32 %4338) #16
  %4340 = trunc i32 %4339 to i8
  %4341 = and i8 %4340, 1
  %4342 = xor i8 %4341, 1
  %4343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4342, i8* %4343, align 1, !tbaa !2446
  %4344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4344, align 1, !tbaa !2447
  %4345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4345, align 1, !tbaa !2448
  %4346 = lshr i32 %4331, 31
  %4347 = trunc i32 %4346 to i8
  %4348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4347, i8* %4348, align 1, !tbaa !2449
  %4349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4336, i8* %4349, align 1, !tbaa !2450
  %4350 = load i64, i64* %RDX
  %4351 = load i32, i32* %ESI
  %4352 = zext i32 %4351 to i64
  %4353 = load i64, i64* %PC
  %4354 = add i64 %4353, 2
  store i64 %4354, i64* %PC
  %4355 = trunc i64 %4350 to i32
  %4356 = add i32 %4351, %4355
  %4357 = zext i32 %4356 to i64
  store i64 %4357, i64* %RDX, align 8, !tbaa !2428
  %4358 = icmp ult i32 %4356, %4355
  %4359 = icmp ult i32 %4356, %4351
  %4360 = or i1 %4358, %4359
  %4361 = zext i1 %4360 to i8
  %4362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4361, i8* %4362, align 1, !tbaa !2432
  %4363 = and i32 %4356, 255
  %4364 = call i32 @llvm.ctpop.i32(i32 %4363) #16
  %4365 = trunc i32 %4364 to i8
  %4366 = and i8 %4365, 1
  %4367 = xor i8 %4366, 1
  %4368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4367, i8* %4368, align 1, !tbaa !2446
  %4369 = xor i64 %4352, %4350
  %4370 = trunc i64 %4369 to i32
  %4371 = xor i32 %4370, %4356
  %4372 = lshr i32 %4371, 4
  %4373 = trunc i32 %4372 to i8
  %4374 = and i8 %4373, 1
  %4375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4374, i8* %4375, align 1, !tbaa !2447
  %4376 = icmp eq i32 %4356, 0
  %4377 = zext i1 %4376 to i8
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4377, i8* %4378, align 1, !tbaa !2448
  %4379 = lshr i32 %4356, 31
  %4380 = trunc i32 %4379 to i8
  %4381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4380, i8* %4381, align 1, !tbaa !2449
  %4382 = lshr i32 %4355, 31
  %4383 = lshr i32 %4351, 31
  %4384 = xor i32 %4379, %4382
  %4385 = xor i32 %4379, %4383
  %4386 = add nuw nsw i32 %4384, %4385
  %4387 = icmp eq i32 %4386, 2
  %4388 = zext i1 %4387 to i8
  %4389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4388, i8* %4389, align 1, !tbaa !2450
  %4390 = load i64, i64* %RDX
  %4391 = load i64, i64* %RBP
  %4392 = sub i64 %4391, 76
  %4393 = load i64, i64* %PC
  %4394 = add i64 %4393, 3
  store i64 %4394, i64* %PC
  %4395 = trunc i64 %4390 to i32
  %4396 = inttoptr i64 %4392 to i32*
  %4397 = load i32, i32* %4396
  %4398 = add i32 %4397, %4395
  %4399 = zext i32 %4398 to i64
  store i64 %4399, i64* %RDX, align 8, !tbaa !2428
  %4400 = icmp ult i32 %4398, %4395
  %4401 = icmp ult i32 %4398, %4397
  %4402 = or i1 %4400, %4401
  %4403 = zext i1 %4402 to i8
  %4404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4403, i8* %4404, align 1, !tbaa !2432
  %4405 = and i32 %4398, 255
  %4406 = call i32 @llvm.ctpop.i32(i32 %4405) #16
  %4407 = trunc i32 %4406 to i8
  %4408 = and i8 %4407, 1
  %4409 = xor i8 %4408, 1
  %4410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4409, i8* %4410, align 1, !tbaa !2446
  %4411 = xor i32 %4397, %4395
  %4412 = xor i32 %4411, %4398
  %4413 = lshr i32 %4412, 4
  %4414 = trunc i32 %4413 to i8
  %4415 = and i8 %4414, 1
  %4416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4415, i8* %4416, align 1, !tbaa !2447
  %4417 = icmp eq i32 %4398, 0
  %4418 = zext i1 %4417 to i8
  %4419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4418, i8* %4419, align 1, !tbaa !2448
  %4420 = lshr i32 %4398, 31
  %4421 = trunc i32 %4420 to i8
  %4422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4421, i8* %4422, align 1, !tbaa !2449
  %4423 = lshr i32 %4395, 31
  %4424 = lshr i32 %4397, 31
  %4425 = xor i32 %4420, %4423
  %4426 = xor i32 %4420, %4424
  %4427 = add nuw nsw i32 %4425, %4426
  %4428 = icmp eq i32 %4427, 2
  %4429 = zext i1 %4428 to i8
  %4430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4429, i8* %4430, align 1, !tbaa !2450
  %4431 = load i32, i32* %EDX
  %4432 = zext i32 %4431 to i64
  %4433 = load i64, i64* %PC
  %4434 = add i64 %4433, 3
  store i64 %4434, i64* %PC
  %4435 = shl i64 %4432, 32
  %4436 = ashr exact i64 %4435, 32
  store i64 %4436, i64* %RCX, align 8, !tbaa !2428
  %4437 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4438 = load i64, i64* %RAX
  %4439 = load i64, i64* %RCX
  %4440 = mul i64 %4439, 4
  %4441 = add i64 %4440, %4438
  %4442 = load i64, i64* %PC
  %4443 = add i64 %4442, 5
  store i64 %4443, i64* %PC
  %4444 = inttoptr i64 %4441 to float*
  %4445 = load float, float* %4444
  %4446 = bitcast i8* %4437 to float*
  store float %4445, float* %4446, align 1, !tbaa !2452
  %4447 = getelementptr inbounds i8, i8* %4437, i64 4
  %4448 = bitcast i8* %4447 to float*
  store float 0.000000e+00, float* %4448, align 1, !tbaa !2452
  %4449 = getelementptr inbounds i8, i8* %4437, i64 8
  %4450 = bitcast i8* %4449 to float*
  store float 0.000000e+00, float* %4450, align 1, !tbaa !2452
  %4451 = getelementptr inbounds i8, i8* %4437, i64 12
  %4452 = bitcast i8* %4451 to float*
  store float 0.000000e+00, float* %4452, align 1, !tbaa !2452
  %4453 = load i64, i64* %RBP
  %4454 = sub i64 %4453, 40
  %4455 = load i64, i64* %PC
  %4456 = add i64 %4455, 4
  store i64 %4456, i64* %PC
  %4457 = inttoptr i64 %4454 to i64*
  %4458 = load i64, i64* %4457
  store i64 %4458, i64* %RAX, align 8, !tbaa !2428
  %4459 = load i64, i64* %RAX
  %4460 = load i64, i64* %PC
  %4461 = add i64 %4460, 3
  store i64 %4461, i64* %PC
  %4462 = inttoptr i64 %4459 to i64*
  %4463 = load i64, i64* %4462
  store i64 %4463, i64* %RAX, align 8, !tbaa !2428
  %4464 = load i64, i64* %RBP
  %4465 = sub i64 %4464, 40
  %4466 = load i64, i64* %PC
  %4467 = add i64 %4466, 4
  store i64 %4467, i64* %PC
  %4468 = inttoptr i64 %4465 to i64*
  %4469 = load i64, i64* %4468
  store i64 %4469, i64* %RCX, align 8, !tbaa !2428
  %4470 = load i64, i64* %RCX
  %4471 = add i64 %4470, 12
  %4472 = load i64, i64* %PC
  %4473 = add i64 %4472, 4
  store i64 %4473, i64* %PC
  %4474 = inttoptr i64 %4471 to i32*
  %4475 = load i32, i32* %4474
  %4476 = sext i32 %4475 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4477, align 1, !tbaa !2432
  %4478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4478, align 1, !tbaa !2446
  %4479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4479, align 1, !tbaa !2447
  %4480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4480, align 1, !tbaa !2448
  %4481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4481, align 1, !tbaa !2449
  %4482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4482, align 1, !tbaa !2450
  %4483 = load i64, i64* %RBP
  %4484 = sub i64 %4483, 40
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 4
  store i64 %4486, i64* %PC
  %4487 = inttoptr i64 %4484 to i64*
  %4488 = load i64, i64* %4487
  store i64 %4488, i64* %RCX, align 8, !tbaa !2428
  %4489 = load i64, i64* %RDX
  %4490 = load i64, i64* %RCX
  %4491 = add i64 %4490, 16
  %4492 = load i64, i64* %PC
  %4493 = add i64 %4492, 4
  store i64 %4493, i64* %PC
  %4494 = inttoptr i64 %4491 to i32*
  %4495 = load i32, i32* %4494
  %4496 = shl i64 %4489, 32
  %4497 = ashr exact i64 %4496, 32
  %4498 = sext i32 %4495 to i64
  %4499 = mul nsw i64 %4498, %4497
  %4500 = trunc i64 %4499 to i32
  %4501 = and i64 %4499, 4294967295
  store i64 %4501, i64* %RDX, align 8, !tbaa !2428
  %4502 = shl i64 %4499, 32
  %4503 = ashr exact i64 %4502, 32
  %4504 = icmp ne i64 %4503, %4499
  %4505 = zext i1 %4504 to i8
  %4506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4505, i8* %4506, align 1, !tbaa !2432
  %4507 = and i32 %4500, 255
  %4508 = call i32 @llvm.ctpop.i32(i32 %4507) #16
  %4509 = trunc i32 %4508 to i8
  %4510 = and i8 %4509, 1
  %4511 = xor i8 %4510, 1
  %4512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4511, i8* %4512, align 1, !tbaa !2446
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4513, align 1, !tbaa !2447
  %4514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4514, align 1, !tbaa !2448
  %4515 = lshr i32 %4500, 31
  %4516 = trunc i32 %4515 to i8
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4516, i8* %4517, align 1, !tbaa !2449
  %4518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4505, i8* %4518, align 1, !tbaa !2450
  %4519 = load i64, i64* %RBP
  %4520 = sub i64 %4519, 40
  %4521 = load i64, i64* %PC
  %4522 = add i64 %4521, 4
  store i64 %4522, i64* %PC
  %4523 = inttoptr i64 %4520 to i64*
  %4524 = load i64, i64* %4523
  store i64 %4524, i64* %RCX, align 8, !tbaa !2428
  %4525 = load i64, i64* %RDX
  %4526 = load i64, i64* %RCX
  %4527 = add i64 %4526, 20
  %4528 = load i64, i64* %PC
  %4529 = add i64 %4528, 4
  store i64 %4529, i64* %PC
  %4530 = inttoptr i64 %4527 to i32*
  %4531 = load i32, i32* %4530
  %4532 = shl i64 %4525, 32
  %4533 = ashr exact i64 %4532, 32
  %4534 = sext i32 %4531 to i64
  %4535 = mul nsw i64 %4534, %4533
  %4536 = trunc i64 %4535 to i32
  %4537 = and i64 %4535, 4294967295
  store i64 %4537, i64* %RDX, align 8, !tbaa !2428
  %4538 = shl i64 %4535, 32
  %4539 = ashr exact i64 %4538, 32
  %4540 = icmp ne i64 %4539, %4535
  %4541 = zext i1 %4540 to i8
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4541, i8* %4542, align 1, !tbaa !2432
  %4543 = and i32 %4536, 255
  %4544 = call i32 @llvm.ctpop.i32(i32 %4543) #16
  %4545 = trunc i32 %4544 to i8
  %4546 = and i8 %4545, 1
  %4547 = xor i8 %4546, 1
  %4548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4547, i8* %4548, align 1, !tbaa !2446
  %4549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4549, align 1, !tbaa !2447
  %4550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4550, align 1, !tbaa !2448
  %4551 = lshr i32 %4536, 31
  %4552 = trunc i32 %4551 to i8
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4552, i8* %4553, align 1, !tbaa !2449
  %4554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4541, i8* %4554, align 1, !tbaa !2450
  %4555 = load i64, i64* %RBP
  %4556 = sub i64 %4555, 68
  %4557 = load i64, i64* %PC
  %4558 = add i64 %4557, 3
  store i64 %4558, i64* %PC
  %4559 = inttoptr i64 %4556 to i32*
  %4560 = load i32, i32* %4559
  %4561 = zext i32 %4560 to i64
  store i64 %4561, i64* %RSI, align 8, !tbaa !2428
  %4562 = load i64, i64* %RSI
  %4563 = load i64, i64* %PC
  %4564 = add i64 %4563, 3
  store i64 %4564, i64* %PC
  %4565 = trunc i64 %4562 to i32
  %4566 = add i32 1, %4565
  %4567 = zext i32 %4566 to i64
  store i64 %4567, i64* %RSI, align 8, !tbaa !2428
  %4568 = icmp ult i32 %4566, %4565
  %4569 = icmp ult i32 %4566, 1
  %4570 = or i1 %4568, %4569
  %4571 = zext i1 %4570 to i8
  %4572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4571, i8* %4572, align 1, !tbaa !2432
  %4573 = and i32 %4566, 255
  %4574 = call i32 @llvm.ctpop.i32(i32 %4573) #16
  %4575 = trunc i32 %4574 to i8
  %4576 = and i8 %4575, 1
  %4577 = xor i8 %4576, 1
  %4578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4577, i8* %4578, align 1, !tbaa !2446
  %4579 = xor i64 1, %4562
  %4580 = trunc i64 %4579 to i32
  %4581 = xor i32 %4580, %4566
  %4582 = lshr i32 %4581, 4
  %4583 = trunc i32 %4582 to i8
  %4584 = and i8 %4583, 1
  %4585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4584, i8* %4585, align 1, !tbaa !2447
  %4586 = icmp eq i32 %4566, 0
  %4587 = zext i1 %4586 to i8
  %4588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4587, i8* %4588, align 1, !tbaa !2448
  %4589 = lshr i32 %4566, 31
  %4590 = trunc i32 %4589 to i8
  %4591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4590, i8* %4591, align 1, !tbaa !2449
  %4592 = lshr i32 %4565, 31
  %4593 = xor i32 %4589, %4592
  %4594 = add nuw nsw i32 %4593, %4589
  %4595 = icmp eq i32 %4594, 2
  %4596 = zext i1 %4595 to i8
  %4597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4596, i8* %4597, align 1, !tbaa !2450
  %4598 = load i64, i64* %RBP
  %4599 = sub i64 %4598, 40
  %4600 = load i64, i64* %PC
  %4601 = add i64 %4600, 4
  store i64 %4601, i64* %PC
  %4602 = inttoptr i64 %4599 to i64*
  %4603 = load i64, i64* %4602
  store i64 %4603, i64* %RCX, align 8, !tbaa !2428
  %4604 = load i64, i64* %RSI
  %4605 = load i64, i64* %RCX
  %4606 = add i64 %4605, 16
  %4607 = load i64, i64* %PC
  %4608 = add i64 %4607, 4
  store i64 %4608, i64* %PC
  %4609 = inttoptr i64 %4606 to i32*
  %4610 = load i32, i32* %4609
  %4611 = shl i64 %4604, 32
  %4612 = ashr exact i64 %4611, 32
  %4613 = sext i32 %4610 to i64
  %4614 = mul nsw i64 %4613, %4612
  %4615 = trunc i64 %4614 to i32
  %4616 = and i64 %4614, 4294967295
  store i64 %4616, i64* %RSI, align 8, !tbaa !2428
  %4617 = shl i64 %4614, 32
  %4618 = ashr exact i64 %4617, 32
  %4619 = icmp ne i64 %4618, %4614
  %4620 = zext i1 %4619 to i8
  %4621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4620, i8* %4621, align 1, !tbaa !2432
  %4622 = and i32 %4615, 255
  %4623 = call i32 @llvm.ctpop.i32(i32 %4622) #16
  %4624 = trunc i32 %4623 to i8
  %4625 = and i8 %4624, 1
  %4626 = xor i8 %4625, 1
  %4627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4626, i8* %4627, align 1, !tbaa !2446
  %4628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4628, align 1, !tbaa !2447
  %4629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4629, align 1, !tbaa !2448
  %4630 = lshr i32 %4615, 31
  %4631 = trunc i32 %4630 to i8
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4631, i8* %4632, align 1, !tbaa !2449
  %4633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4620, i8* %4633, align 1, !tbaa !2450
  %4634 = load i64, i64* %RBP
  %4635 = sub i64 %4634, 40
  %4636 = load i64, i64* %PC
  %4637 = add i64 %4636, 4
  store i64 %4637, i64* %PC
  %4638 = inttoptr i64 %4635 to i64*
  %4639 = load i64, i64* %4638
  store i64 %4639, i64* %RCX, align 8, !tbaa !2428
  %4640 = load i64, i64* %RSI
  %4641 = load i64, i64* %RCX
  %4642 = add i64 %4641, 20
  %4643 = load i64, i64* %PC
  %4644 = add i64 %4643, 4
  store i64 %4644, i64* %PC
  %4645 = inttoptr i64 %4642 to i32*
  %4646 = load i32, i32* %4645
  %4647 = shl i64 %4640, 32
  %4648 = ashr exact i64 %4647, 32
  %4649 = sext i32 %4646 to i64
  %4650 = mul nsw i64 %4649, %4648
  %4651 = trunc i64 %4650 to i32
  %4652 = and i64 %4650, 4294967295
  store i64 %4652, i64* %RSI, align 8, !tbaa !2428
  %4653 = shl i64 %4650, 32
  %4654 = ashr exact i64 %4653, 32
  %4655 = icmp ne i64 %4654, %4650
  %4656 = zext i1 %4655 to i8
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4656, i8* %4657, align 1, !tbaa !2432
  %4658 = and i32 %4651, 255
  %4659 = call i32 @llvm.ctpop.i32(i32 %4658) #16
  %4660 = trunc i32 %4659 to i8
  %4661 = and i8 %4660, 1
  %4662 = xor i8 %4661, 1
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4662, i8* %4663, align 1, !tbaa !2446
  %4664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4664, align 1, !tbaa !2447
  %4665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4665, align 1, !tbaa !2448
  %4666 = lshr i32 %4651, 31
  %4667 = trunc i32 %4666 to i8
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4667, i8* %4668, align 1, !tbaa !2449
  %4669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4656, i8* %4669, align 1, !tbaa !2450
  %4670 = load i64, i64* %RDX
  %4671 = load i32, i32* %ESI
  %4672 = zext i32 %4671 to i64
  %4673 = load i64, i64* %PC
  %4674 = add i64 %4673, 2
  store i64 %4674, i64* %PC
  %4675 = trunc i64 %4670 to i32
  %4676 = add i32 %4671, %4675
  %4677 = zext i32 %4676 to i64
  store i64 %4677, i64* %RDX, align 8, !tbaa !2428
  %4678 = icmp ult i32 %4676, %4675
  %4679 = icmp ult i32 %4676, %4671
  %4680 = or i1 %4678, %4679
  %4681 = zext i1 %4680 to i8
  %4682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4681, i8* %4682, align 1, !tbaa !2432
  %4683 = and i32 %4676, 255
  %4684 = call i32 @llvm.ctpop.i32(i32 %4683) #16
  %4685 = trunc i32 %4684 to i8
  %4686 = and i8 %4685, 1
  %4687 = xor i8 %4686, 1
  %4688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4687, i8* %4688, align 1, !tbaa !2446
  %4689 = xor i64 %4672, %4670
  %4690 = trunc i64 %4689 to i32
  %4691 = xor i32 %4690, %4676
  %4692 = lshr i32 %4691, 4
  %4693 = trunc i32 %4692 to i8
  %4694 = and i8 %4693, 1
  %4695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4694, i8* %4695, align 1, !tbaa !2447
  %4696 = icmp eq i32 %4676, 0
  %4697 = zext i1 %4696 to i8
  %4698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4697, i8* %4698, align 1, !tbaa !2448
  %4699 = lshr i32 %4676, 31
  %4700 = trunc i32 %4699 to i8
  %4701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4700, i8* %4701, align 1, !tbaa !2449
  %4702 = lshr i32 %4675, 31
  %4703 = lshr i32 %4671, 31
  %4704 = xor i32 %4699, %4702
  %4705 = xor i32 %4699, %4703
  %4706 = add nuw nsw i32 %4704, %4705
  %4707 = icmp eq i32 %4706, 2
  %4708 = zext i1 %4707 to i8
  %4709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4708, i8* %4709, align 1, !tbaa !2450
  %4710 = load i64, i64* %RBP
  %4711 = sub i64 %4710, 72
  %4712 = load i64, i64* %PC
  %4713 = add i64 %4712, 3
  store i64 %4713, i64* %PC
  %4714 = inttoptr i64 %4711 to i32*
  %4715 = load i32, i32* %4714
  %4716 = zext i32 %4715 to i64
  store i64 %4716, i64* %RSI, align 8, !tbaa !2428
  %4717 = load i64, i64* %RSI
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 3
  store i64 %4719, i64* %PC
  %4720 = trunc i64 %4717 to i32
  %4721 = add i32 1, %4720
  %4722 = zext i32 %4721 to i64
  store i64 %4722, i64* %RSI, align 8, !tbaa !2428
  %4723 = icmp ult i32 %4721, %4720
  %4724 = icmp ult i32 %4721, 1
  %4725 = or i1 %4723, %4724
  %4726 = zext i1 %4725 to i8
  %4727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4726, i8* %4727, align 1, !tbaa !2432
  %4728 = and i32 %4721, 255
  %4729 = call i32 @llvm.ctpop.i32(i32 %4728) #16
  %4730 = trunc i32 %4729 to i8
  %4731 = and i8 %4730, 1
  %4732 = xor i8 %4731, 1
  %4733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4732, i8* %4733, align 1, !tbaa !2446
  %4734 = xor i64 1, %4717
  %4735 = trunc i64 %4734 to i32
  %4736 = xor i32 %4735, %4721
  %4737 = lshr i32 %4736, 4
  %4738 = trunc i32 %4737 to i8
  %4739 = and i8 %4738, 1
  %4740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4739, i8* %4740, align 1, !tbaa !2447
  %4741 = icmp eq i32 %4721, 0
  %4742 = zext i1 %4741 to i8
  %4743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4742, i8* %4743, align 1, !tbaa !2448
  %4744 = lshr i32 %4721, 31
  %4745 = trunc i32 %4744 to i8
  %4746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4745, i8* %4746, align 1, !tbaa !2449
  %4747 = lshr i32 %4720, 31
  %4748 = xor i32 %4744, %4747
  %4749 = add nuw nsw i32 %4748, %4744
  %4750 = icmp eq i32 %4749, 2
  %4751 = zext i1 %4750 to i8
  %4752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4751, i8* %4752, align 1, !tbaa !2450
  %4753 = load i64, i64* %RBP
  %4754 = sub i64 %4753, 40
  %4755 = load i64, i64* %PC
  %4756 = add i64 %4755, 4
  store i64 %4756, i64* %PC
  %4757 = inttoptr i64 %4754 to i64*
  %4758 = load i64, i64* %4757
  store i64 %4758, i64* %RCX, align 8, !tbaa !2428
  %4759 = load i64, i64* %RSI
  %4760 = load i64, i64* %RCX
  %4761 = add i64 %4760, 20
  %4762 = load i64, i64* %PC
  %4763 = add i64 %4762, 4
  store i64 %4763, i64* %PC
  %4764 = inttoptr i64 %4761 to i32*
  %4765 = load i32, i32* %4764
  %4766 = shl i64 %4759, 32
  %4767 = ashr exact i64 %4766, 32
  %4768 = sext i32 %4765 to i64
  %4769 = mul nsw i64 %4768, %4767
  %4770 = trunc i64 %4769 to i32
  %4771 = and i64 %4769, 4294967295
  store i64 %4771, i64* %RSI, align 8, !tbaa !2428
  %4772 = shl i64 %4769, 32
  %4773 = ashr exact i64 %4772, 32
  %4774 = icmp ne i64 %4773, %4769
  %4775 = zext i1 %4774 to i8
  %4776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4775, i8* %4776, align 1, !tbaa !2432
  %4777 = and i32 %4770, 255
  %4778 = call i32 @llvm.ctpop.i32(i32 %4777) #16
  %4779 = trunc i32 %4778 to i8
  %4780 = and i8 %4779, 1
  %4781 = xor i8 %4780, 1
  %4782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4781, i8* %4782, align 1, !tbaa !2446
  %4783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4783, align 1, !tbaa !2447
  %4784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4784, align 1, !tbaa !2448
  %4785 = lshr i32 %4770, 31
  %4786 = trunc i32 %4785 to i8
  %4787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4786, i8* %4787, align 1, !tbaa !2449
  %4788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4775, i8* %4788, align 1, !tbaa !2450
  %4789 = load i64, i64* %RDX
  %4790 = load i32, i32* %ESI
  %4791 = zext i32 %4790 to i64
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 2
  store i64 %4793, i64* %PC
  %4794 = trunc i64 %4789 to i32
  %4795 = add i32 %4790, %4794
  %4796 = zext i32 %4795 to i64
  store i64 %4796, i64* %RDX, align 8, !tbaa !2428
  %4797 = icmp ult i32 %4795, %4794
  %4798 = icmp ult i32 %4795, %4790
  %4799 = or i1 %4797, %4798
  %4800 = zext i1 %4799 to i8
  %4801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4800, i8* %4801, align 1, !tbaa !2432
  %4802 = and i32 %4795, 255
  %4803 = call i32 @llvm.ctpop.i32(i32 %4802) #16
  %4804 = trunc i32 %4803 to i8
  %4805 = and i8 %4804, 1
  %4806 = xor i8 %4805, 1
  %4807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4806, i8* %4807, align 1, !tbaa !2446
  %4808 = xor i64 %4791, %4789
  %4809 = trunc i64 %4808 to i32
  %4810 = xor i32 %4809, %4795
  %4811 = lshr i32 %4810, 4
  %4812 = trunc i32 %4811 to i8
  %4813 = and i8 %4812, 1
  %4814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4813, i8* %4814, align 1, !tbaa !2447
  %4815 = icmp eq i32 %4795, 0
  %4816 = zext i1 %4815 to i8
  %4817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4816, i8* %4817, align 1, !tbaa !2448
  %4818 = lshr i32 %4795, 31
  %4819 = trunc i32 %4818 to i8
  %4820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4819, i8* %4820, align 1, !tbaa !2449
  %4821 = lshr i32 %4794, 31
  %4822 = lshr i32 %4790, 31
  %4823 = xor i32 %4818, %4821
  %4824 = xor i32 %4818, %4822
  %4825 = add nuw nsw i32 %4823, %4824
  %4826 = icmp eq i32 %4825, 2
  %4827 = zext i1 %4826 to i8
  %4828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4827, i8* %4828, align 1, !tbaa !2450
  %4829 = load i64, i64* %RDX
  %4830 = load i64, i64* %RBP
  %4831 = sub i64 %4830, 76
  %4832 = load i64, i64* %PC
  %4833 = add i64 %4832, 3
  store i64 %4833, i64* %PC
  %4834 = trunc i64 %4829 to i32
  %4835 = inttoptr i64 %4831 to i32*
  %4836 = load i32, i32* %4835
  %4837 = add i32 %4836, %4834
  %4838 = zext i32 %4837 to i64
  store i64 %4838, i64* %RDX, align 8, !tbaa !2428
  %4839 = icmp ult i32 %4837, %4834
  %4840 = icmp ult i32 %4837, %4836
  %4841 = or i1 %4839, %4840
  %4842 = zext i1 %4841 to i8
  %4843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4842, i8* %4843, align 1, !tbaa !2432
  %4844 = and i32 %4837, 255
  %4845 = call i32 @llvm.ctpop.i32(i32 %4844) #16
  %4846 = trunc i32 %4845 to i8
  %4847 = and i8 %4846, 1
  %4848 = xor i8 %4847, 1
  %4849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4848, i8* %4849, align 1, !tbaa !2446
  %4850 = xor i32 %4836, %4834
  %4851 = xor i32 %4850, %4837
  %4852 = lshr i32 %4851, 4
  %4853 = trunc i32 %4852 to i8
  %4854 = and i8 %4853, 1
  %4855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4854, i8* %4855, align 1, !tbaa !2447
  %4856 = icmp eq i32 %4837, 0
  %4857 = zext i1 %4856 to i8
  %4858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4857, i8* %4858, align 1, !tbaa !2448
  %4859 = lshr i32 %4837, 31
  %4860 = trunc i32 %4859 to i8
  %4861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4860, i8* %4861, align 1, !tbaa !2449
  %4862 = lshr i32 %4834, 31
  %4863 = lshr i32 %4836, 31
  %4864 = xor i32 %4859, %4862
  %4865 = xor i32 %4859, %4863
  %4866 = add nuw nsw i32 %4864, %4865
  %4867 = icmp eq i32 %4866, 2
  %4868 = zext i1 %4867 to i8
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4868, i8* %4869, align 1, !tbaa !2450
  %4870 = load i32, i32* %EDX
  %4871 = zext i32 %4870 to i64
  %4872 = load i64, i64* %PC
  %4873 = add i64 %4872, 3
  store i64 %4873, i64* %PC
  %4874 = shl i64 %4871, 32
  %4875 = ashr exact i64 %4874, 32
  store i64 %4875, i64* %RCX, align 8, !tbaa !2428
  %4876 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4877 = load i64, i64* %RAX
  %4878 = load i64, i64* %RCX
  %4879 = mul i64 %4878, 4
  %4880 = add i64 %4879, %4877
  %4881 = load i64, i64* %PC
  %4882 = add i64 %4881, 5
  store i64 %4882, i64* %PC
  %4883 = inttoptr i64 %4880 to float*
  %4884 = load float, float* %4883
  %4885 = bitcast i8* %4876 to float*
  store float %4884, float* %4885, align 1, !tbaa !2452
  %4886 = getelementptr inbounds i8, i8* %4876, i64 4
  %4887 = bitcast i8* %4886 to float*
  store float 0.000000e+00, float* %4887, align 1, !tbaa !2452
  %4888 = getelementptr inbounds i8, i8* %4876, i64 8
  %4889 = bitcast i8* %4888 to float*
  store float 0.000000e+00, float* %4889, align 1, !tbaa !2452
  %4890 = getelementptr inbounds i8, i8* %4876, i64 12
  %4891 = bitcast i8* %4890 to float*
  store float 0.000000e+00, float* %4891, align 1, !tbaa !2452
  %4892 = load i64, i64* %RBP
  %4893 = sub i64 %4892, 40
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 4
  store i64 %4895, i64* %PC
  %4896 = inttoptr i64 %4893 to i64*
  %4897 = load i64, i64* %4896
  store i64 %4897, i64* %RAX, align 8, !tbaa !2428
  %4898 = load i64, i64* %RAX
  %4899 = load i64, i64* %PC
  %4900 = add i64 %4899, 3
  store i64 %4900, i64* %PC
  %4901 = inttoptr i64 %4898 to i64*
  %4902 = load i64, i64* %4901
  store i64 %4902, i64* %RAX, align 8, !tbaa !2428
  %4903 = load i64, i64* %RBP
  %4904 = sub i64 %4903, 40
  %4905 = load i64, i64* %PC
  %4906 = add i64 %4905, 4
  store i64 %4906, i64* %PC
  %4907 = inttoptr i64 %4904 to i64*
  %4908 = load i64, i64* %4907
  store i64 %4908, i64* %RCX, align 8, !tbaa !2428
  %4909 = load i64, i64* %RCX
  %4910 = add i64 %4909, 12
  %4911 = load i64, i64* %PC
  %4912 = add i64 %4911, 4
  store i64 %4912, i64* %PC
  %4913 = inttoptr i64 %4910 to i32*
  %4914 = load i32, i32* %4913
  %4915 = sext i32 %4914 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4916, align 1, !tbaa !2432
  %4917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4917, align 1, !tbaa !2446
  %4918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4918, align 1, !tbaa !2447
  %4919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4919, align 1, !tbaa !2448
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4920, align 1, !tbaa !2449
  %4921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4921, align 1, !tbaa !2450
  %4922 = load i64, i64* %RBP
  %4923 = sub i64 %4922, 40
  %4924 = load i64, i64* %PC
  %4925 = add i64 %4924, 4
  store i64 %4925, i64* %PC
  %4926 = inttoptr i64 %4923 to i64*
  %4927 = load i64, i64* %4926
  store i64 %4927, i64* %RCX, align 8, !tbaa !2428
  %4928 = load i64, i64* %RDX
  %4929 = load i64, i64* %RCX
  %4930 = add i64 %4929, 16
  %4931 = load i64, i64* %PC
  %4932 = add i64 %4931, 4
  store i64 %4932, i64* %PC
  %4933 = inttoptr i64 %4930 to i32*
  %4934 = load i32, i32* %4933
  %4935 = shl i64 %4928, 32
  %4936 = ashr exact i64 %4935, 32
  %4937 = sext i32 %4934 to i64
  %4938 = mul nsw i64 %4937, %4936
  %4939 = trunc i64 %4938 to i32
  %4940 = and i64 %4938, 4294967295
  store i64 %4940, i64* %RDX, align 8, !tbaa !2428
  %4941 = shl i64 %4938, 32
  %4942 = ashr exact i64 %4941, 32
  %4943 = icmp ne i64 %4942, %4938
  %4944 = zext i1 %4943 to i8
  %4945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4944, i8* %4945, align 1, !tbaa !2432
  %4946 = and i32 %4939, 255
  %4947 = call i32 @llvm.ctpop.i32(i32 %4946) #16
  %4948 = trunc i32 %4947 to i8
  %4949 = and i8 %4948, 1
  %4950 = xor i8 %4949, 1
  %4951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4950, i8* %4951, align 1, !tbaa !2446
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4952, align 1, !tbaa !2447
  %4953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4953, align 1, !tbaa !2448
  %4954 = lshr i32 %4939, 31
  %4955 = trunc i32 %4954 to i8
  %4956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4955, i8* %4956, align 1, !tbaa !2449
  %4957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4944, i8* %4957, align 1, !tbaa !2450
  %4958 = load i64, i64* %RBP
  %4959 = sub i64 %4958, 40
  %4960 = load i64, i64* %PC
  %4961 = add i64 %4960, 4
  store i64 %4961, i64* %PC
  %4962 = inttoptr i64 %4959 to i64*
  %4963 = load i64, i64* %4962
  store i64 %4963, i64* %RCX, align 8, !tbaa !2428
  %4964 = load i64, i64* %RDX
  %4965 = load i64, i64* %RCX
  %4966 = add i64 %4965, 20
  %4967 = load i64, i64* %PC
  %4968 = add i64 %4967, 4
  store i64 %4968, i64* %PC
  %4969 = inttoptr i64 %4966 to i32*
  %4970 = load i32, i32* %4969
  %4971 = shl i64 %4964, 32
  %4972 = ashr exact i64 %4971, 32
  %4973 = sext i32 %4970 to i64
  %4974 = mul nsw i64 %4973, %4972
  %4975 = trunc i64 %4974 to i32
  %4976 = and i64 %4974, 4294967295
  store i64 %4976, i64* %RDX, align 8, !tbaa !2428
  %4977 = shl i64 %4974, 32
  %4978 = ashr exact i64 %4977, 32
  %4979 = icmp ne i64 %4978, %4974
  %4980 = zext i1 %4979 to i8
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4980, i8* %4981, align 1, !tbaa !2432
  %4982 = and i32 %4975, 255
  %4983 = call i32 @llvm.ctpop.i32(i32 %4982) #16
  %4984 = trunc i32 %4983 to i8
  %4985 = and i8 %4984, 1
  %4986 = xor i8 %4985, 1
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4986, i8* %4987, align 1, !tbaa !2446
  %4988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4988, align 1, !tbaa !2447
  %4989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4989, align 1, !tbaa !2448
  %4990 = lshr i32 %4975, 31
  %4991 = trunc i32 %4990 to i8
  %4992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4991, i8* %4992, align 1, !tbaa !2449
  %4993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4980, i8* %4993, align 1, !tbaa !2450
  %4994 = load i64, i64* %RBP
  %4995 = sub i64 %4994, 68
  %4996 = load i64, i64* %PC
  %4997 = add i64 %4996, 3
  store i64 %4997, i64* %PC
  %4998 = inttoptr i64 %4995 to i32*
  %4999 = load i32, i32* %4998
  %5000 = zext i32 %4999 to i64
  store i64 %5000, i64* %RSI, align 8, !tbaa !2428
  %5001 = load i64, i64* %RSI
  %5002 = load i64, i64* %PC
  %5003 = add i64 %5002, 3
  store i64 %5003, i64* %PC
  %5004 = trunc i64 %5001 to i32
  %5005 = add i32 1, %5004
  %5006 = zext i32 %5005 to i64
  store i64 %5006, i64* %RSI, align 8, !tbaa !2428
  %5007 = icmp ult i32 %5005, %5004
  %5008 = icmp ult i32 %5005, 1
  %5009 = or i1 %5007, %5008
  %5010 = zext i1 %5009 to i8
  %5011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5010, i8* %5011, align 1, !tbaa !2432
  %5012 = and i32 %5005, 255
  %5013 = call i32 @llvm.ctpop.i32(i32 %5012) #16
  %5014 = trunc i32 %5013 to i8
  %5015 = and i8 %5014, 1
  %5016 = xor i8 %5015, 1
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5016, i8* %5017, align 1, !tbaa !2446
  %5018 = xor i64 1, %5001
  %5019 = trunc i64 %5018 to i32
  %5020 = xor i32 %5019, %5005
  %5021 = lshr i32 %5020, 4
  %5022 = trunc i32 %5021 to i8
  %5023 = and i8 %5022, 1
  %5024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5023, i8* %5024, align 1, !tbaa !2447
  %5025 = icmp eq i32 %5005, 0
  %5026 = zext i1 %5025 to i8
  %5027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5026, i8* %5027, align 1, !tbaa !2448
  %5028 = lshr i32 %5005, 31
  %5029 = trunc i32 %5028 to i8
  %5030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5029, i8* %5030, align 1, !tbaa !2449
  %5031 = lshr i32 %5004, 31
  %5032 = xor i32 %5028, %5031
  %5033 = add nuw nsw i32 %5032, %5028
  %5034 = icmp eq i32 %5033, 2
  %5035 = zext i1 %5034 to i8
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5035, i8* %5036, align 1, !tbaa !2450
  %5037 = load i64, i64* %RBP
  %5038 = sub i64 %5037, 40
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 4
  store i64 %5040, i64* %PC
  %5041 = inttoptr i64 %5038 to i64*
  %5042 = load i64, i64* %5041
  store i64 %5042, i64* %RCX, align 8, !tbaa !2428
  %5043 = load i64, i64* %RSI
  %5044 = load i64, i64* %RCX
  %5045 = add i64 %5044, 16
  %5046 = load i64, i64* %PC
  %5047 = add i64 %5046, 4
  store i64 %5047, i64* %PC
  %5048 = inttoptr i64 %5045 to i32*
  %5049 = load i32, i32* %5048
  %5050 = shl i64 %5043, 32
  %5051 = ashr exact i64 %5050, 32
  %5052 = sext i32 %5049 to i64
  %5053 = mul nsw i64 %5052, %5051
  %5054 = trunc i64 %5053 to i32
  %5055 = and i64 %5053, 4294967295
  store i64 %5055, i64* %RSI, align 8, !tbaa !2428
  %5056 = shl i64 %5053, 32
  %5057 = ashr exact i64 %5056, 32
  %5058 = icmp ne i64 %5057, %5053
  %5059 = zext i1 %5058 to i8
  %5060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5059, i8* %5060, align 1, !tbaa !2432
  %5061 = and i32 %5054, 255
  %5062 = call i32 @llvm.ctpop.i32(i32 %5061) #16
  %5063 = trunc i32 %5062 to i8
  %5064 = and i8 %5063, 1
  %5065 = xor i8 %5064, 1
  %5066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5065, i8* %5066, align 1, !tbaa !2446
  %5067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5067, align 1, !tbaa !2447
  %5068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5068, align 1, !tbaa !2448
  %5069 = lshr i32 %5054, 31
  %5070 = trunc i32 %5069 to i8
  %5071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5070, i8* %5071, align 1, !tbaa !2449
  %5072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5059, i8* %5072, align 1, !tbaa !2450
  %5073 = load i64, i64* %RBP
  %5074 = sub i64 %5073, 40
  %5075 = load i64, i64* %PC
  %5076 = add i64 %5075, 4
  store i64 %5076, i64* %PC
  %5077 = inttoptr i64 %5074 to i64*
  %5078 = load i64, i64* %5077
  store i64 %5078, i64* %RCX, align 8, !tbaa !2428
  %5079 = load i64, i64* %RSI
  %5080 = load i64, i64* %RCX
  %5081 = add i64 %5080, 20
  %5082 = load i64, i64* %PC
  %5083 = add i64 %5082, 4
  store i64 %5083, i64* %PC
  %5084 = inttoptr i64 %5081 to i32*
  %5085 = load i32, i32* %5084
  %5086 = shl i64 %5079, 32
  %5087 = ashr exact i64 %5086, 32
  %5088 = sext i32 %5085 to i64
  %5089 = mul nsw i64 %5088, %5087
  %5090 = trunc i64 %5089 to i32
  %5091 = and i64 %5089, 4294967295
  store i64 %5091, i64* %RSI, align 8, !tbaa !2428
  %5092 = shl i64 %5089, 32
  %5093 = ashr exact i64 %5092, 32
  %5094 = icmp ne i64 %5093, %5089
  %5095 = zext i1 %5094 to i8
  %5096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5095, i8* %5096, align 1, !tbaa !2432
  %5097 = and i32 %5090, 255
  %5098 = call i32 @llvm.ctpop.i32(i32 %5097) #16
  %5099 = trunc i32 %5098 to i8
  %5100 = and i8 %5099, 1
  %5101 = xor i8 %5100, 1
  %5102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5101, i8* %5102, align 1, !tbaa !2446
  %5103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5103, align 1, !tbaa !2447
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5104, align 1, !tbaa !2448
  %5105 = lshr i32 %5090, 31
  %5106 = trunc i32 %5105 to i8
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5106, i8* %5107, align 1, !tbaa !2449
  %5108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5095, i8* %5108, align 1, !tbaa !2450
  %5109 = load i64, i64* %RDX
  %5110 = load i32, i32* %ESI
  %5111 = zext i32 %5110 to i64
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 2
  store i64 %5113, i64* %PC
  %5114 = trunc i64 %5109 to i32
  %5115 = add i32 %5110, %5114
  %5116 = zext i32 %5115 to i64
  store i64 %5116, i64* %RDX, align 8, !tbaa !2428
  %5117 = icmp ult i32 %5115, %5114
  %5118 = icmp ult i32 %5115, %5110
  %5119 = or i1 %5117, %5118
  %5120 = zext i1 %5119 to i8
  %5121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5120, i8* %5121, align 1, !tbaa !2432
  %5122 = and i32 %5115, 255
  %5123 = call i32 @llvm.ctpop.i32(i32 %5122) #16
  %5124 = trunc i32 %5123 to i8
  %5125 = and i8 %5124, 1
  %5126 = xor i8 %5125, 1
  %5127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5126, i8* %5127, align 1, !tbaa !2446
  %5128 = xor i64 %5111, %5109
  %5129 = trunc i64 %5128 to i32
  %5130 = xor i32 %5129, %5115
  %5131 = lshr i32 %5130, 4
  %5132 = trunc i32 %5131 to i8
  %5133 = and i8 %5132, 1
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5133, i8* %5134, align 1, !tbaa !2447
  %5135 = icmp eq i32 %5115, 0
  %5136 = zext i1 %5135 to i8
  %5137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5136, i8* %5137, align 1, !tbaa !2448
  %5138 = lshr i32 %5115, 31
  %5139 = trunc i32 %5138 to i8
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5139, i8* %5140, align 1, !tbaa !2449
  %5141 = lshr i32 %5114, 31
  %5142 = lshr i32 %5110, 31
  %5143 = xor i32 %5138, %5141
  %5144 = xor i32 %5138, %5142
  %5145 = add nuw nsw i32 %5143, %5144
  %5146 = icmp eq i32 %5145, 2
  %5147 = zext i1 %5146 to i8
  %5148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5147, i8* %5148, align 1, !tbaa !2450
  %5149 = load i64, i64* %RBP
  %5150 = sub i64 %5149, 72
  %5151 = load i64, i64* %PC
  %5152 = add i64 %5151, 3
  store i64 %5152, i64* %PC
  %5153 = inttoptr i64 %5150 to i32*
  %5154 = load i32, i32* %5153
  %5155 = zext i32 %5154 to i64
  store i64 %5155, i64* %RSI, align 8, !tbaa !2428
  %5156 = load i64, i64* %RSI
  %5157 = load i64, i64* %PC
  %5158 = add i64 %5157, 3
  store i64 %5158, i64* %PC
  %5159 = trunc i64 %5156 to i32
  %5160 = sub i32 %5159, 1
  %5161 = zext i32 %5160 to i64
  store i64 %5161, i64* %RSI, align 8, !tbaa !2428
  %5162 = icmp ult i32 %5159, 1
  %5163 = zext i1 %5162 to i8
  %5164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5163, i8* %5164, align 1, !tbaa !2432
  %5165 = and i32 %5160, 255
  %5166 = call i32 @llvm.ctpop.i32(i32 %5165) #16
  %5167 = trunc i32 %5166 to i8
  %5168 = and i8 %5167, 1
  %5169 = xor i8 %5168, 1
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5169, i8* %5170, align 1, !tbaa !2446
  %5171 = xor i64 1, %5156
  %5172 = trunc i64 %5171 to i32
  %5173 = xor i32 %5172, %5160
  %5174 = lshr i32 %5173, 4
  %5175 = trunc i32 %5174 to i8
  %5176 = and i8 %5175, 1
  %5177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5176, i8* %5177, align 1, !tbaa !2447
  %5178 = icmp eq i32 %5160, 0
  %5179 = zext i1 %5178 to i8
  %5180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5179, i8* %5180, align 1, !tbaa !2448
  %5181 = lshr i32 %5160, 31
  %5182 = trunc i32 %5181 to i8
  %5183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5182, i8* %5183, align 1, !tbaa !2449
  %5184 = lshr i32 %5159, 31
  %5185 = xor i32 %5181, %5184
  %5186 = add nuw nsw i32 %5185, %5184
  %5187 = icmp eq i32 %5186, 2
  %5188 = zext i1 %5187 to i8
  %5189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5188, i8* %5189, align 1, !tbaa !2450
  %5190 = load i64, i64* %RBP
  %5191 = sub i64 %5190, 40
  %5192 = load i64, i64* %PC
  %5193 = add i64 %5192, 4
  store i64 %5193, i64* %PC
  %5194 = inttoptr i64 %5191 to i64*
  %5195 = load i64, i64* %5194
  store i64 %5195, i64* %RCX, align 8, !tbaa !2428
  %5196 = load i64, i64* %RSI
  %5197 = load i64, i64* %RCX
  %5198 = add i64 %5197, 20
  %5199 = load i64, i64* %PC
  %5200 = add i64 %5199, 4
  store i64 %5200, i64* %PC
  %5201 = inttoptr i64 %5198 to i32*
  %5202 = load i32, i32* %5201
  %5203 = shl i64 %5196, 32
  %5204 = ashr exact i64 %5203, 32
  %5205 = sext i32 %5202 to i64
  %5206 = mul nsw i64 %5205, %5204
  %5207 = trunc i64 %5206 to i32
  %5208 = and i64 %5206, 4294967295
  store i64 %5208, i64* %RSI, align 8, !tbaa !2428
  %5209 = shl i64 %5206, 32
  %5210 = ashr exact i64 %5209, 32
  %5211 = icmp ne i64 %5210, %5206
  %5212 = zext i1 %5211 to i8
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5212, i8* %5213, align 1, !tbaa !2432
  %5214 = and i32 %5207, 255
  %5215 = call i32 @llvm.ctpop.i32(i32 %5214) #16
  %5216 = trunc i32 %5215 to i8
  %5217 = and i8 %5216, 1
  %5218 = xor i8 %5217, 1
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5218, i8* %5219, align 1, !tbaa !2446
  %5220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5220, align 1, !tbaa !2447
  %5221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5221, align 1, !tbaa !2448
  %5222 = lshr i32 %5207, 31
  %5223 = trunc i32 %5222 to i8
  %5224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5223, i8* %5224, align 1, !tbaa !2449
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5212, i8* %5225, align 1, !tbaa !2450
  %5226 = load i64, i64* %RDX
  %5227 = load i32, i32* %ESI
  %5228 = zext i32 %5227 to i64
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 2
  store i64 %5230, i64* %PC
  %5231 = trunc i64 %5226 to i32
  %5232 = add i32 %5227, %5231
  %5233 = zext i32 %5232 to i64
  store i64 %5233, i64* %RDX, align 8, !tbaa !2428
  %5234 = icmp ult i32 %5232, %5231
  %5235 = icmp ult i32 %5232, %5227
  %5236 = or i1 %5234, %5235
  %5237 = zext i1 %5236 to i8
  %5238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5237, i8* %5238, align 1, !tbaa !2432
  %5239 = and i32 %5232, 255
  %5240 = call i32 @llvm.ctpop.i32(i32 %5239) #16
  %5241 = trunc i32 %5240 to i8
  %5242 = and i8 %5241, 1
  %5243 = xor i8 %5242, 1
  %5244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5243, i8* %5244, align 1, !tbaa !2446
  %5245 = xor i64 %5228, %5226
  %5246 = trunc i64 %5245 to i32
  %5247 = xor i32 %5246, %5232
  %5248 = lshr i32 %5247, 4
  %5249 = trunc i32 %5248 to i8
  %5250 = and i8 %5249, 1
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5250, i8* %5251, align 1, !tbaa !2447
  %5252 = icmp eq i32 %5232, 0
  %5253 = zext i1 %5252 to i8
  %5254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5253, i8* %5254, align 1, !tbaa !2448
  %5255 = lshr i32 %5232, 31
  %5256 = trunc i32 %5255 to i8
  %5257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5256, i8* %5257, align 1, !tbaa !2449
  %5258 = lshr i32 %5231, 31
  %5259 = lshr i32 %5227, 31
  %5260 = xor i32 %5255, %5258
  %5261 = xor i32 %5255, %5259
  %5262 = add nuw nsw i32 %5260, %5261
  %5263 = icmp eq i32 %5262, 2
  %5264 = zext i1 %5263 to i8
  %5265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5264, i8* %5265, align 1, !tbaa !2450
  %5266 = load i64, i64* %RDX
  %5267 = load i64, i64* %RBP
  %5268 = sub i64 %5267, 76
  %5269 = load i64, i64* %PC
  %5270 = add i64 %5269, 3
  store i64 %5270, i64* %PC
  %5271 = trunc i64 %5266 to i32
  %5272 = inttoptr i64 %5268 to i32*
  %5273 = load i32, i32* %5272
  %5274 = add i32 %5273, %5271
  %5275 = zext i32 %5274 to i64
  store i64 %5275, i64* %RDX, align 8, !tbaa !2428
  %5276 = icmp ult i32 %5274, %5271
  %5277 = icmp ult i32 %5274, %5273
  %5278 = or i1 %5276, %5277
  %5279 = zext i1 %5278 to i8
  %5280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5279, i8* %5280, align 1, !tbaa !2432
  %5281 = and i32 %5274, 255
  %5282 = call i32 @llvm.ctpop.i32(i32 %5281) #16
  %5283 = trunc i32 %5282 to i8
  %5284 = and i8 %5283, 1
  %5285 = xor i8 %5284, 1
  %5286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5285, i8* %5286, align 1, !tbaa !2446
  %5287 = xor i32 %5273, %5271
  %5288 = xor i32 %5287, %5274
  %5289 = lshr i32 %5288, 4
  %5290 = trunc i32 %5289 to i8
  %5291 = and i8 %5290, 1
  %5292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5291, i8* %5292, align 1, !tbaa !2447
  %5293 = icmp eq i32 %5274, 0
  %5294 = zext i1 %5293 to i8
  %5295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5294, i8* %5295, align 1, !tbaa !2448
  %5296 = lshr i32 %5274, 31
  %5297 = trunc i32 %5296 to i8
  %5298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5297, i8* %5298, align 1, !tbaa !2449
  %5299 = lshr i32 %5271, 31
  %5300 = lshr i32 %5273, 31
  %5301 = xor i32 %5296, %5299
  %5302 = xor i32 %5296, %5300
  %5303 = add nuw nsw i32 %5301, %5302
  %5304 = icmp eq i32 %5303, 2
  %5305 = zext i1 %5304 to i8
  %5306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5305, i8* %5306, align 1, !tbaa !2450
  %5307 = load i32, i32* %EDX
  %5308 = zext i32 %5307 to i64
  %5309 = load i64, i64* %PC
  %5310 = add i64 %5309, 3
  store i64 %5310, i64* %PC
  %5311 = shl i64 %5308, 32
  %5312 = ashr exact i64 %5311, 32
  store i64 %5312, i64* %RCX, align 8, !tbaa !2428
  %5313 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5314 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5315 = load i64, i64* %RAX
  %5316 = load i64, i64* %RCX
  %5317 = mul i64 %5316, 4
  %5318 = add i64 %5317, %5315
  %5319 = load i64, i64* %PC
  %5320 = add i64 %5319, 5
  store i64 %5320, i64* %PC
  %5321 = bitcast i8* %5314 to <2 x float>*
  %5322 = load <2 x float>, <2 x float>* %5321, align 1
  %5323 = getelementptr inbounds i8, i8* %5314, i64 8
  %5324 = bitcast i8* %5323 to <2 x i32>*
  %5325 = load <2 x i32>, <2 x i32>* %5324, align 1
  %5326 = inttoptr i64 %5318 to float*
  %5327 = load float, float* %5326
  %5328 = extractelement <2 x float> %5322, i32 0
  %5329 = fsub float %5328, %5327
  %5330 = bitcast i8* %5313 to float*
  store float %5329, float* %5330, align 1, !tbaa !2452
  %5331 = bitcast <2 x float> %5322 to <2 x i32>
  %5332 = extractelement <2 x i32> %5331, i32 1
  %5333 = getelementptr inbounds i8, i8* %5313, i64 4
  %5334 = bitcast i8* %5333 to i32*
  store i32 %5332, i32* %5334, align 1, !tbaa !2452
  %5335 = extractelement <2 x i32> %5325, i32 0
  %5336 = getelementptr inbounds i8, i8* %5313, i64 8
  %5337 = bitcast i8* %5336 to i32*
  store i32 %5335, i32* %5337, align 1, !tbaa !2452
  %5338 = extractelement <2 x i32> %5325, i32 1
  %5339 = getelementptr inbounds i8, i8* %5313, i64 12
  %5340 = bitcast i8* %5339 to i32*
  store i32 %5338, i32* %5340, align 1, !tbaa !2452
  %5341 = load i64, i64* %RBP
  %5342 = sub i64 %5341, 40
  %5343 = load i64, i64* %PC
  %5344 = add i64 %5343, 4
  store i64 %5344, i64* %PC
  %5345 = inttoptr i64 %5342 to i64*
  %5346 = load i64, i64* %5345
  store i64 %5346, i64* %RAX, align 8, !tbaa !2428
  %5347 = load i64, i64* %RAX
  %5348 = load i64, i64* %PC
  %5349 = add i64 %5348, 3
  store i64 %5349, i64* %PC
  %5350 = inttoptr i64 %5347 to i64*
  %5351 = load i64, i64* %5350
  store i64 %5351, i64* %RAX, align 8, !tbaa !2428
  %5352 = load i64, i64* %RBP
  %5353 = sub i64 %5352, 40
  %5354 = load i64, i64* %PC
  %5355 = add i64 %5354, 4
  store i64 %5355, i64* %PC
  %5356 = inttoptr i64 %5353 to i64*
  %5357 = load i64, i64* %5356
  store i64 %5357, i64* %RCX, align 8, !tbaa !2428
  %5358 = load i64, i64* %RCX
  %5359 = add i64 %5358, 12
  %5360 = load i64, i64* %PC
  %5361 = add i64 %5360, 4
  store i64 %5361, i64* %PC
  %5362 = inttoptr i64 %5359 to i32*
  %5363 = load i32, i32* %5362
  %5364 = sext i32 %5363 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5365, align 1, !tbaa !2432
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5366, align 1, !tbaa !2446
  %5367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5367, align 1, !tbaa !2447
  %5368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5368, align 1, !tbaa !2448
  %5369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5369, align 1, !tbaa !2449
  %5370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5370, align 1, !tbaa !2450
  %5371 = load i64, i64* %RBP
  %5372 = sub i64 %5371, 40
  %5373 = load i64, i64* %PC
  %5374 = add i64 %5373, 4
  store i64 %5374, i64* %PC
  %5375 = inttoptr i64 %5372 to i64*
  %5376 = load i64, i64* %5375
  store i64 %5376, i64* %RCX, align 8, !tbaa !2428
  %5377 = load i64, i64* %RDX
  %5378 = load i64, i64* %RCX
  %5379 = add i64 %5378, 16
  %5380 = load i64, i64* %PC
  %5381 = add i64 %5380, 4
  store i64 %5381, i64* %PC
  %5382 = inttoptr i64 %5379 to i32*
  %5383 = load i32, i32* %5382
  %5384 = shl i64 %5377, 32
  %5385 = ashr exact i64 %5384, 32
  %5386 = sext i32 %5383 to i64
  %5387 = mul nsw i64 %5386, %5385
  %5388 = trunc i64 %5387 to i32
  %5389 = and i64 %5387, 4294967295
  store i64 %5389, i64* %RDX, align 8, !tbaa !2428
  %5390 = shl i64 %5387, 32
  %5391 = ashr exact i64 %5390, 32
  %5392 = icmp ne i64 %5391, %5387
  %5393 = zext i1 %5392 to i8
  %5394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5393, i8* %5394, align 1, !tbaa !2432
  %5395 = and i32 %5388, 255
  %5396 = call i32 @llvm.ctpop.i32(i32 %5395) #16
  %5397 = trunc i32 %5396 to i8
  %5398 = and i8 %5397, 1
  %5399 = xor i8 %5398, 1
  %5400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5399, i8* %5400, align 1, !tbaa !2446
  %5401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5401, align 1, !tbaa !2447
  %5402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5402, align 1, !tbaa !2448
  %5403 = lshr i32 %5388, 31
  %5404 = trunc i32 %5403 to i8
  %5405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5404, i8* %5405, align 1, !tbaa !2449
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5393, i8* %5406, align 1, !tbaa !2450
  %5407 = load i64, i64* %RBP
  %5408 = sub i64 %5407, 40
  %5409 = load i64, i64* %PC
  %5410 = add i64 %5409, 4
  store i64 %5410, i64* %PC
  %5411 = inttoptr i64 %5408 to i64*
  %5412 = load i64, i64* %5411
  store i64 %5412, i64* %RCX, align 8, !tbaa !2428
  %5413 = load i64, i64* %RDX
  %5414 = load i64, i64* %RCX
  %5415 = add i64 %5414, 20
  %5416 = load i64, i64* %PC
  %5417 = add i64 %5416, 4
  store i64 %5417, i64* %PC
  %5418 = inttoptr i64 %5415 to i32*
  %5419 = load i32, i32* %5418
  %5420 = shl i64 %5413, 32
  %5421 = ashr exact i64 %5420, 32
  %5422 = sext i32 %5419 to i64
  %5423 = mul nsw i64 %5422, %5421
  %5424 = trunc i64 %5423 to i32
  %5425 = and i64 %5423, 4294967295
  store i64 %5425, i64* %RDX, align 8, !tbaa !2428
  %5426 = shl i64 %5423, 32
  %5427 = ashr exact i64 %5426, 32
  %5428 = icmp ne i64 %5427, %5423
  %5429 = zext i1 %5428 to i8
  %5430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5429, i8* %5430, align 1, !tbaa !2432
  %5431 = and i32 %5424, 255
  %5432 = call i32 @llvm.ctpop.i32(i32 %5431) #16
  %5433 = trunc i32 %5432 to i8
  %5434 = and i8 %5433, 1
  %5435 = xor i8 %5434, 1
  %5436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5435, i8* %5436, align 1, !tbaa !2446
  %5437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5437, align 1, !tbaa !2447
  %5438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5438, align 1, !tbaa !2448
  %5439 = lshr i32 %5424, 31
  %5440 = trunc i32 %5439 to i8
  %5441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5440, i8* %5441, align 1, !tbaa !2449
  %5442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5429, i8* %5442, align 1, !tbaa !2450
  %5443 = load i64, i64* %RBP
  %5444 = sub i64 %5443, 68
  %5445 = load i64, i64* %PC
  %5446 = add i64 %5445, 3
  store i64 %5446, i64* %PC
  %5447 = inttoptr i64 %5444 to i32*
  %5448 = load i32, i32* %5447
  %5449 = zext i32 %5448 to i64
  store i64 %5449, i64* %RSI, align 8, !tbaa !2428
  %5450 = load i64, i64* %RSI
  %5451 = load i64, i64* %PC
  %5452 = add i64 %5451, 3
  store i64 %5452, i64* %PC
  %5453 = trunc i64 %5450 to i32
  %5454 = sub i32 %5453, 1
  %5455 = zext i32 %5454 to i64
  store i64 %5455, i64* %RSI, align 8, !tbaa !2428
  %5456 = icmp ult i32 %5453, 1
  %5457 = zext i1 %5456 to i8
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5457, i8* %5458, align 1, !tbaa !2432
  %5459 = and i32 %5454, 255
  %5460 = call i32 @llvm.ctpop.i32(i32 %5459) #16
  %5461 = trunc i32 %5460 to i8
  %5462 = and i8 %5461, 1
  %5463 = xor i8 %5462, 1
  %5464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5463, i8* %5464, align 1, !tbaa !2446
  %5465 = xor i64 1, %5450
  %5466 = trunc i64 %5465 to i32
  %5467 = xor i32 %5466, %5454
  %5468 = lshr i32 %5467, 4
  %5469 = trunc i32 %5468 to i8
  %5470 = and i8 %5469, 1
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5470, i8* %5471, align 1, !tbaa !2447
  %5472 = icmp eq i32 %5454, 0
  %5473 = zext i1 %5472 to i8
  %5474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5473, i8* %5474, align 1, !tbaa !2448
  %5475 = lshr i32 %5454, 31
  %5476 = trunc i32 %5475 to i8
  %5477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5476, i8* %5477, align 1, !tbaa !2449
  %5478 = lshr i32 %5453, 31
  %5479 = xor i32 %5475, %5478
  %5480 = add nuw nsw i32 %5479, %5478
  %5481 = icmp eq i32 %5480, 2
  %5482 = zext i1 %5481 to i8
  %5483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5482, i8* %5483, align 1, !tbaa !2450
  %5484 = load i64, i64* %RBP
  %5485 = sub i64 %5484, 40
  %5486 = load i64, i64* %PC
  %5487 = add i64 %5486, 4
  store i64 %5487, i64* %PC
  %5488 = inttoptr i64 %5485 to i64*
  %5489 = load i64, i64* %5488
  store i64 %5489, i64* %RCX, align 8, !tbaa !2428
  %5490 = load i64, i64* %RSI
  %5491 = load i64, i64* %RCX
  %5492 = add i64 %5491, 16
  %5493 = load i64, i64* %PC
  %5494 = add i64 %5493, 4
  store i64 %5494, i64* %PC
  %5495 = inttoptr i64 %5492 to i32*
  %5496 = load i32, i32* %5495
  %5497 = shl i64 %5490, 32
  %5498 = ashr exact i64 %5497, 32
  %5499 = sext i32 %5496 to i64
  %5500 = mul nsw i64 %5499, %5498
  %5501 = trunc i64 %5500 to i32
  %5502 = and i64 %5500, 4294967295
  store i64 %5502, i64* %RSI, align 8, !tbaa !2428
  %5503 = shl i64 %5500, 32
  %5504 = ashr exact i64 %5503, 32
  %5505 = icmp ne i64 %5504, %5500
  %5506 = zext i1 %5505 to i8
  %5507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5506, i8* %5507, align 1, !tbaa !2432
  %5508 = and i32 %5501, 255
  %5509 = call i32 @llvm.ctpop.i32(i32 %5508) #16
  %5510 = trunc i32 %5509 to i8
  %5511 = and i8 %5510, 1
  %5512 = xor i8 %5511, 1
  %5513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5512, i8* %5513, align 1, !tbaa !2446
  %5514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5514, align 1, !tbaa !2447
  %5515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5515, align 1, !tbaa !2448
  %5516 = lshr i32 %5501, 31
  %5517 = trunc i32 %5516 to i8
  %5518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5517, i8* %5518, align 1, !tbaa !2449
  %5519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5506, i8* %5519, align 1, !tbaa !2450
  %5520 = load i64, i64* %RBP
  %5521 = sub i64 %5520, 40
  %5522 = load i64, i64* %PC
  %5523 = add i64 %5522, 4
  store i64 %5523, i64* %PC
  %5524 = inttoptr i64 %5521 to i64*
  %5525 = load i64, i64* %5524
  store i64 %5525, i64* %RCX, align 8, !tbaa !2428
  %5526 = load i64, i64* %RSI
  %5527 = load i64, i64* %RCX
  %5528 = add i64 %5527, 20
  %5529 = load i64, i64* %PC
  %5530 = add i64 %5529, 4
  store i64 %5530, i64* %PC
  %5531 = inttoptr i64 %5528 to i32*
  %5532 = load i32, i32* %5531
  %5533 = shl i64 %5526, 32
  %5534 = ashr exact i64 %5533, 32
  %5535 = sext i32 %5532 to i64
  %5536 = mul nsw i64 %5535, %5534
  %5537 = trunc i64 %5536 to i32
  %5538 = and i64 %5536, 4294967295
  store i64 %5538, i64* %RSI, align 8, !tbaa !2428
  %5539 = shl i64 %5536, 32
  %5540 = ashr exact i64 %5539, 32
  %5541 = icmp ne i64 %5540, %5536
  %5542 = zext i1 %5541 to i8
  %5543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5542, i8* %5543, align 1, !tbaa !2432
  %5544 = and i32 %5537, 255
  %5545 = call i32 @llvm.ctpop.i32(i32 %5544) #16
  %5546 = trunc i32 %5545 to i8
  %5547 = and i8 %5546, 1
  %5548 = xor i8 %5547, 1
  %5549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5548, i8* %5549, align 1, !tbaa !2446
  %5550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5550, align 1, !tbaa !2447
  %5551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5551, align 1, !tbaa !2448
  %5552 = lshr i32 %5537, 31
  %5553 = trunc i32 %5552 to i8
  %5554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5553, i8* %5554, align 1, !tbaa !2449
  %5555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5542, i8* %5555, align 1, !tbaa !2450
  %5556 = load i64, i64* %RDX
  %5557 = load i32, i32* %ESI
  %5558 = zext i32 %5557 to i64
  %5559 = load i64, i64* %PC
  %5560 = add i64 %5559, 2
  store i64 %5560, i64* %PC
  %5561 = trunc i64 %5556 to i32
  %5562 = add i32 %5557, %5561
  %5563 = zext i32 %5562 to i64
  store i64 %5563, i64* %RDX, align 8, !tbaa !2428
  %5564 = icmp ult i32 %5562, %5561
  %5565 = icmp ult i32 %5562, %5557
  %5566 = or i1 %5564, %5565
  %5567 = zext i1 %5566 to i8
  %5568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5567, i8* %5568, align 1, !tbaa !2432
  %5569 = and i32 %5562, 255
  %5570 = call i32 @llvm.ctpop.i32(i32 %5569) #16
  %5571 = trunc i32 %5570 to i8
  %5572 = and i8 %5571, 1
  %5573 = xor i8 %5572, 1
  %5574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5573, i8* %5574, align 1, !tbaa !2446
  %5575 = xor i64 %5558, %5556
  %5576 = trunc i64 %5575 to i32
  %5577 = xor i32 %5576, %5562
  %5578 = lshr i32 %5577, 4
  %5579 = trunc i32 %5578 to i8
  %5580 = and i8 %5579, 1
  %5581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5580, i8* %5581, align 1, !tbaa !2447
  %5582 = icmp eq i32 %5562, 0
  %5583 = zext i1 %5582 to i8
  %5584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5583, i8* %5584, align 1, !tbaa !2448
  %5585 = lshr i32 %5562, 31
  %5586 = trunc i32 %5585 to i8
  %5587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5586, i8* %5587, align 1, !tbaa !2449
  %5588 = lshr i32 %5561, 31
  %5589 = lshr i32 %5557, 31
  %5590 = xor i32 %5585, %5588
  %5591 = xor i32 %5585, %5589
  %5592 = add nuw nsw i32 %5590, %5591
  %5593 = icmp eq i32 %5592, 2
  %5594 = zext i1 %5593 to i8
  %5595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5594, i8* %5595, align 1, !tbaa !2450
  %5596 = load i64, i64* %RBP
  %5597 = sub i64 %5596, 72
  %5598 = load i64, i64* %PC
  %5599 = add i64 %5598, 3
  store i64 %5599, i64* %PC
  %5600 = inttoptr i64 %5597 to i32*
  %5601 = load i32, i32* %5600
  %5602 = zext i32 %5601 to i64
  store i64 %5602, i64* %RSI, align 8, !tbaa !2428
  %5603 = load i64, i64* %RSI
  %5604 = load i64, i64* %PC
  %5605 = add i64 %5604, 3
  store i64 %5605, i64* %PC
  %5606 = trunc i64 %5603 to i32
  %5607 = add i32 1, %5606
  %5608 = zext i32 %5607 to i64
  store i64 %5608, i64* %RSI, align 8, !tbaa !2428
  %5609 = icmp ult i32 %5607, %5606
  %5610 = icmp ult i32 %5607, 1
  %5611 = or i1 %5609, %5610
  %5612 = zext i1 %5611 to i8
  %5613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5612, i8* %5613, align 1, !tbaa !2432
  %5614 = and i32 %5607, 255
  %5615 = call i32 @llvm.ctpop.i32(i32 %5614) #16
  %5616 = trunc i32 %5615 to i8
  %5617 = and i8 %5616, 1
  %5618 = xor i8 %5617, 1
  %5619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5618, i8* %5619, align 1, !tbaa !2446
  %5620 = xor i64 1, %5603
  %5621 = trunc i64 %5620 to i32
  %5622 = xor i32 %5621, %5607
  %5623 = lshr i32 %5622, 4
  %5624 = trunc i32 %5623 to i8
  %5625 = and i8 %5624, 1
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5625, i8* %5626, align 1, !tbaa !2447
  %5627 = icmp eq i32 %5607, 0
  %5628 = zext i1 %5627 to i8
  %5629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5628, i8* %5629, align 1, !tbaa !2448
  %5630 = lshr i32 %5607, 31
  %5631 = trunc i32 %5630 to i8
  %5632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5631, i8* %5632, align 1, !tbaa !2449
  %5633 = lshr i32 %5606, 31
  %5634 = xor i32 %5630, %5633
  %5635 = add nuw nsw i32 %5634, %5630
  %5636 = icmp eq i32 %5635, 2
  %5637 = zext i1 %5636 to i8
  %5638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5637, i8* %5638, align 1, !tbaa !2450
  %5639 = load i64, i64* %RBP
  %5640 = sub i64 %5639, 40
  %5641 = load i64, i64* %PC
  %5642 = add i64 %5641, 4
  store i64 %5642, i64* %PC
  %5643 = inttoptr i64 %5640 to i64*
  %5644 = load i64, i64* %5643
  store i64 %5644, i64* %RCX, align 8, !tbaa !2428
  %5645 = load i64, i64* %RSI
  %5646 = load i64, i64* %RCX
  %5647 = add i64 %5646, 20
  %5648 = load i64, i64* %PC
  %5649 = add i64 %5648, 4
  store i64 %5649, i64* %PC
  %5650 = inttoptr i64 %5647 to i32*
  %5651 = load i32, i32* %5650
  %5652 = shl i64 %5645, 32
  %5653 = ashr exact i64 %5652, 32
  %5654 = sext i32 %5651 to i64
  %5655 = mul nsw i64 %5654, %5653
  %5656 = trunc i64 %5655 to i32
  %5657 = and i64 %5655, 4294967295
  store i64 %5657, i64* %RSI, align 8, !tbaa !2428
  %5658 = shl i64 %5655, 32
  %5659 = ashr exact i64 %5658, 32
  %5660 = icmp ne i64 %5659, %5655
  %5661 = zext i1 %5660 to i8
  %5662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5661, i8* %5662, align 1, !tbaa !2432
  %5663 = and i32 %5656, 255
  %5664 = call i32 @llvm.ctpop.i32(i32 %5663) #16
  %5665 = trunc i32 %5664 to i8
  %5666 = and i8 %5665, 1
  %5667 = xor i8 %5666, 1
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5667, i8* %5668, align 1, !tbaa !2446
  %5669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5669, align 1, !tbaa !2447
  %5670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5670, align 1, !tbaa !2448
  %5671 = lshr i32 %5656, 31
  %5672 = trunc i32 %5671 to i8
  %5673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5672, i8* %5673, align 1, !tbaa !2449
  %5674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5661, i8* %5674, align 1, !tbaa !2450
  %5675 = load i64, i64* %RDX
  %5676 = load i32, i32* %ESI
  %5677 = zext i32 %5676 to i64
  %5678 = load i64, i64* %PC
  %5679 = add i64 %5678, 2
  store i64 %5679, i64* %PC
  %5680 = trunc i64 %5675 to i32
  %5681 = add i32 %5676, %5680
  %5682 = zext i32 %5681 to i64
  store i64 %5682, i64* %RDX, align 8, !tbaa !2428
  %5683 = icmp ult i32 %5681, %5680
  %5684 = icmp ult i32 %5681, %5676
  %5685 = or i1 %5683, %5684
  %5686 = zext i1 %5685 to i8
  %5687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5686, i8* %5687, align 1, !tbaa !2432
  %5688 = and i32 %5681, 255
  %5689 = call i32 @llvm.ctpop.i32(i32 %5688) #16
  %5690 = trunc i32 %5689 to i8
  %5691 = and i8 %5690, 1
  %5692 = xor i8 %5691, 1
  %5693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5692, i8* %5693, align 1, !tbaa !2446
  %5694 = xor i64 %5677, %5675
  %5695 = trunc i64 %5694 to i32
  %5696 = xor i32 %5695, %5681
  %5697 = lshr i32 %5696, 4
  %5698 = trunc i32 %5697 to i8
  %5699 = and i8 %5698, 1
  %5700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5699, i8* %5700, align 1, !tbaa !2447
  %5701 = icmp eq i32 %5681, 0
  %5702 = zext i1 %5701 to i8
  %5703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5702, i8* %5703, align 1, !tbaa !2448
  %5704 = lshr i32 %5681, 31
  %5705 = trunc i32 %5704 to i8
  %5706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5705, i8* %5706, align 1, !tbaa !2449
  %5707 = lshr i32 %5680, 31
  %5708 = lshr i32 %5676, 31
  %5709 = xor i32 %5704, %5707
  %5710 = xor i32 %5704, %5708
  %5711 = add nuw nsw i32 %5709, %5710
  %5712 = icmp eq i32 %5711, 2
  %5713 = zext i1 %5712 to i8
  %5714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5713, i8* %5714, align 1, !tbaa !2450
  %5715 = load i64, i64* %RDX
  %5716 = load i64, i64* %RBP
  %5717 = sub i64 %5716, 76
  %5718 = load i64, i64* %PC
  %5719 = add i64 %5718, 3
  store i64 %5719, i64* %PC
  %5720 = trunc i64 %5715 to i32
  %5721 = inttoptr i64 %5717 to i32*
  %5722 = load i32, i32* %5721
  %5723 = add i32 %5722, %5720
  %5724 = zext i32 %5723 to i64
  store i64 %5724, i64* %RDX, align 8, !tbaa !2428
  %5725 = icmp ult i32 %5723, %5720
  %5726 = icmp ult i32 %5723, %5722
  %5727 = or i1 %5725, %5726
  %5728 = zext i1 %5727 to i8
  %5729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5728, i8* %5729, align 1, !tbaa !2432
  %5730 = and i32 %5723, 255
  %5731 = call i32 @llvm.ctpop.i32(i32 %5730) #16
  %5732 = trunc i32 %5731 to i8
  %5733 = and i8 %5732, 1
  %5734 = xor i8 %5733, 1
  %5735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5734, i8* %5735, align 1, !tbaa !2446
  %5736 = xor i32 %5722, %5720
  %5737 = xor i32 %5736, %5723
  %5738 = lshr i32 %5737, 4
  %5739 = trunc i32 %5738 to i8
  %5740 = and i8 %5739, 1
  %5741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5740, i8* %5741, align 1, !tbaa !2447
  %5742 = icmp eq i32 %5723, 0
  %5743 = zext i1 %5742 to i8
  %5744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5743, i8* %5744, align 1, !tbaa !2448
  %5745 = lshr i32 %5723, 31
  %5746 = trunc i32 %5745 to i8
  %5747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5746, i8* %5747, align 1, !tbaa !2449
  %5748 = lshr i32 %5720, 31
  %5749 = lshr i32 %5722, 31
  %5750 = xor i32 %5745, %5748
  %5751 = xor i32 %5745, %5749
  %5752 = add nuw nsw i32 %5750, %5751
  %5753 = icmp eq i32 %5752, 2
  %5754 = zext i1 %5753 to i8
  %5755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5754, i8* %5755, align 1, !tbaa !2450
  %5756 = load i32, i32* %EDX
  %5757 = zext i32 %5756 to i64
  %5758 = load i64, i64* %PC
  %5759 = add i64 %5758, 3
  store i64 %5759, i64* %PC
  %5760 = shl i64 %5757, 32
  %5761 = ashr exact i64 %5760, 32
  store i64 %5761, i64* %RCX, align 8, !tbaa !2428
  %5762 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5763 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5764 = load i64, i64* %RAX
  %5765 = load i64, i64* %RCX
  %5766 = mul i64 %5765, 4
  %5767 = add i64 %5766, %5764
  %5768 = load i64, i64* %PC
  %5769 = add i64 %5768, 5
  store i64 %5769, i64* %PC
  %5770 = bitcast i8* %5763 to <2 x float>*
  %5771 = load <2 x float>, <2 x float>* %5770, align 1
  %5772 = getelementptr inbounds i8, i8* %5763, i64 8
  %5773 = bitcast i8* %5772 to <2 x i32>*
  %5774 = load <2 x i32>, <2 x i32>* %5773, align 1
  %5775 = inttoptr i64 %5767 to float*
  %5776 = load float, float* %5775
  %5777 = extractelement <2 x float> %5771, i32 0
  %5778 = fsub float %5777, %5776
  %5779 = bitcast i8* %5762 to float*
  store float %5778, float* %5779, align 1, !tbaa !2452
  %5780 = bitcast <2 x float> %5771 to <2 x i32>
  %5781 = extractelement <2 x i32> %5780, i32 1
  %5782 = getelementptr inbounds i8, i8* %5762, i64 4
  %5783 = bitcast i8* %5782 to i32*
  store i32 %5781, i32* %5783, align 1, !tbaa !2452
  %5784 = extractelement <2 x i32> %5774, i32 0
  %5785 = getelementptr inbounds i8, i8* %5762, i64 8
  %5786 = bitcast i8* %5785 to i32*
  store i32 %5784, i32* %5786, align 1, !tbaa !2452
  %5787 = extractelement <2 x i32> %5774, i32 1
  %5788 = getelementptr inbounds i8, i8* %5762, i64 12
  %5789 = bitcast i8* %5788 to i32*
  store i32 %5787, i32* %5789, align 1, !tbaa !2452
  %5790 = load i64, i64* %RBP
  %5791 = sub i64 %5790, 40
  %5792 = load i64, i64* %PC
  %5793 = add i64 %5792, 4
  store i64 %5793, i64* %PC
  %5794 = inttoptr i64 %5791 to i64*
  %5795 = load i64, i64* %5794
  store i64 %5795, i64* %RAX, align 8, !tbaa !2428
  %5796 = load i64, i64* %RAX
  %5797 = load i64, i64* %PC
  %5798 = add i64 %5797, 3
  store i64 %5798, i64* %PC
  %5799 = inttoptr i64 %5796 to i64*
  %5800 = load i64, i64* %5799
  store i64 %5800, i64* %RAX, align 8, !tbaa !2428
  %5801 = load i64, i64* %RBP
  %5802 = sub i64 %5801, 40
  %5803 = load i64, i64* %PC
  %5804 = add i64 %5803, 4
  store i64 %5804, i64* %PC
  %5805 = inttoptr i64 %5802 to i64*
  %5806 = load i64, i64* %5805
  store i64 %5806, i64* %RCX, align 8, !tbaa !2428
  %5807 = load i64, i64* %RCX
  %5808 = add i64 %5807, 12
  %5809 = load i64, i64* %PC
  %5810 = add i64 %5809, 4
  store i64 %5810, i64* %PC
  %5811 = inttoptr i64 %5808 to i32*
  %5812 = load i32, i32* %5811
  %5813 = sext i32 %5812 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5814, align 1, !tbaa !2432
  %5815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5815, align 1, !tbaa !2446
  %5816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5816, align 1, !tbaa !2447
  %5817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5817, align 1, !tbaa !2448
  %5818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5818, align 1, !tbaa !2449
  %5819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5819, align 1, !tbaa !2450
  %5820 = load i64, i64* %RBP
  %5821 = sub i64 %5820, 40
  %5822 = load i64, i64* %PC
  %5823 = add i64 %5822, 4
  store i64 %5823, i64* %PC
  %5824 = inttoptr i64 %5821 to i64*
  %5825 = load i64, i64* %5824
  store i64 %5825, i64* %RCX, align 8, !tbaa !2428
  %5826 = load i64, i64* %RDX
  %5827 = load i64, i64* %RCX
  %5828 = add i64 %5827, 16
  %5829 = load i64, i64* %PC
  %5830 = add i64 %5829, 4
  store i64 %5830, i64* %PC
  %5831 = inttoptr i64 %5828 to i32*
  %5832 = load i32, i32* %5831
  %5833 = shl i64 %5826, 32
  %5834 = ashr exact i64 %5833, 32
  %5835 = sext i32 %5832 to i64
  %5836 = mul nsw i64 %5835, %5834
  %5837 = trunc i64 %5836 to i32
  %5838 = and i64 %5836, 4294967295
  store i64 %5838, i64* %RDX, align 8, !tbaa !2428
  %5839 = shl i64 %5836, 32
  %5840 = ashr exact i64 %5839, 32
  %5841 = icmp ne i64 %5840, %5836
  %5842 = zext i1 %5841 to i8
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5842, i8* %5843, align 1, !tbaa !2432
  %5844 = and i32 %5837, 255
  %5845 = call i32 @llvm.ctpop.i32(i32 %5844) #16
  %5846 = trunc i32 %5845 to i8
  %5847 = and i8 %5846, 1
  %5848 = xor i8 %5847, 1
  %5849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5848, i8* %5849, align 1, !tbaa !2446
  %5850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5850, align 1, !tbaa !2447
  %5851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5851, align 1, !tbaa !2448
  %5852 = lshr i32 %5837, 31
  %5853 = trunc i32 %5852 to i8
  %5854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5853, i8* %5854, align 1, !tbaa !2449
  %5855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5842, i8* %5855, align 1, !tbaa !2450
  %5856 = load i64, i64* %RBP
  %5857 = sub i64 %5856, 40
  %5858 = load i64, i64* %PC
  %5859 = add i64 %5858, 4
  store i64 %5859, i64* %PC
  %5860 = inttoptr i64 %5857 to i64*
  %5861 = load i64, i64* %5860
  store i64 %5861, i64* %RCX, align 8, !tbaa !2428
  %5862 = load i64, i64* %RDX
  %5863 = load i64, i64* %RCX
  %5864 = add i64 %5863, 20
  %5865 = load i64, i64* %PC
  %5866 = add i64 %5865, 4
  store i64 %5866, i64* %PC
  %5867 = inttoptr i64 %5864 to i32*
  %5868 = load i32, i32* %5867
  %5869 = shl i64 %5862, 32
  %5870 = ashr exact i64 %5869, 32
  %5871 = sext i32 %5868 to i64
  %5872 = mul nsw i64 %5871, %5870
  %5873 = trunc i64 %5872 to i32
  %5874 = and i64 %5872, 4294967295
  store i64 %5874, i64* %RDX, align 8, !tbaa !2428
  %5875 = shl i64 %5872, 32
  %5876 = ashr exact i64 %5875, 32
  %5877 = icmp ne i64 %5876, %5872
  %5878 = zext i1 %5877 to i8
  %5879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5878, i8* %5879, align 1, !tbaa !2432
  %5880 = and i32 %5873, 255
  %5881 = call i32 @llvm.ctpop.i32(i32 %5880) #16
  %5882 = trunc i32 %5881 to i8
  %5883 = and i8 %5882, 1
  %5884 = xor i8 %5883, 1
  %5885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5884, i8* %5885, align 1, !tbaa !2446
  %5886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5886, align 1, !tbaa !2447
  %5887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5887, align 1, !tbaa !2448
  %5888 = lshr i32 %5873, 31
  %5889 = trunc i32 %5888 to i8
  %5890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5889, i8* %5890, align 1, !tbaa !2449
  %5891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5878, i8* %5891, align 1, !tbaa !2450
  %5892 = load i64, i64* %RBP
  %5893 = sub i64 %5892, 68
  %5894 = load i64, i64* %PC
  %5895 = add i64 %5894, 3
  store i64 %5895, i64* %PC
  %5896 = inttoptr i64 %5893 to i32*
  %5897 = load i32, i32* %5896
  %5898 = zext i32 %5897 to i64
  store i64 %5898, i64* %RSI, align 8, !tbaa !2428
  %5899 = load i64, i64* %RSI
  %5900 = load i64, i64* %PC
  %5901 = add i64 %5900, 3
  store i64 %5901, i64* %PC
  %5902 = trunc i64 %5899 to i32
  %5903 = sub i32 %5902, 1
  %5904 = zext i32 %5903 to i64
  store i64 %5904, i64* %RSI, align 8, !tbaa !2428
  %5905 = icmp ult i32 %5902, 1
  %5906 = zext i1 %5905 to i8
  %5907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5906, i8* %5907, align 1, !tbaa !2432
  %5908 = and i32 %5903, 255
  %5909 = call i32 @llvm.ctpop.i32(i32 %5908) #16
  %5910 = trunc i32 %5909 to i8
  %5911 = and i8 %5910, 1
  %5912 = xor i8 %5911, 1
  %5913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5912, i8* %5913, align 1, !tbaa !2446
  %5914 = xor i64 1, %5899
  %5915 = trunc i64 %5914 to i32
  %5916 = xor i32 %5915, %5903
  %5917 = lshr i32 %5916, 4
  %5918 = trunc i32 %5917 to i8
  %5919 = and i8 %5918, 1
  %5920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5919, i8* %5920, align 1, !tbaa !2447
  %5921 = icmp eq i32 %5903, 0
  %5922 = zext i1 %5921 to i8
  %5923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5922, i8* %5923, align 1, !tbaa !2448
  %5924 = lshr i32 %5903, 31
  %5925 = trunc i32 %5924 to i8
  %5926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5925, i8* %5926, align 1, !tbaa !2449
  %5927 = lshr i32 %5902, 31
  %5928 = xor i32 %5924, %5927
  %5929 = add nuw nsw i32 %5928, %5927
  %5930 = icmp eq i32 %5929, 2
  %5931 = zext i1 %5930 to i8
  %5932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5931, i8* %5932, align 1, !tbaa !2450
  %5933 = load i64, i64* %RBP
  %5934 = sub i64 %5933, 40
  %5935 = load i64, i64* %PC
  %5936 = add i64 %5935, 4
  store i64 %5936, i64* %PC
  %5937 = inttoptr i64 %5934 to i64*
  %5938 = load i64, i64* %5937
  store i64 %5938, i64* %RCX, align 8, !tbaa !2428
  %5939 = load i64, i64* %RSI
  %5940 = load i64, i64* %RCX
  %5941 = add i64 %5940, 16
  %5942 = load i64, i64* %PC
  %5943 = add i64 %5942, 4
  store i64 %5943, i64* %PC
  %5944 = inttoptr i64 %5941 to i32*
  %5945 = load i32, i32* %5944
  %5946 = shl i64 %5939, 32
  %5947 = ashr exact i64 %5946, 32
  %5948 = sext i32 %5945 to i64
  %5949 = mul nsw i64 %5948, %5947
  %5950 = trunc i64 %5949 to i32
  %5951 = and i64 %5949, 4294967295
  store i64 %5951, i64* %RSI, align 8, !tbaa !2428
  %5952 = shl i64 %5949, 32
  %5953 = ashr exact i64 %5952, 32
  %5954 = icmp ne i64 %5953, %5949
  %5955 = zext i1 %5954 to i8
  %5956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5955, i8* %5956, align 1, !tbaa !2432
  %5957 = and i32 %5950, 255
  %5958 = call i32 @llvm.ctpop.i32(i32 %5957) #16
  %5959 = trunc i32 %5958 to i8
  %5960 = and i8 %5959, 1
  %5961 = xor i8 %5960, 1
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5961, i8* %5962, align 1, !tbaa !2446
  %5963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5963, align 1, !tbaa !2447
  %5964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5964, align 1, !tbaa !2448
  %5965 = lshr i32 %5950, 31
  %5966 = trunc i32 %5965 to i8
  %5967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5966, i8* %5967, align 1, !tbaa !2449
  %5968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5955, i8* %5968, align 1, !tbaa !2450
  %5969 = load i64, i64* %RBP
  %5970 = sub i64 %5969, 40
  %5971 = load i64, i64* %PC
  %5972 = add i64 %5971, 4
  store i64 %5972, i64* %PC
  %5973 = inttoptr i64 %5970 to i64*
  %5974 = load i64, i64* %5973
  store i64 %5974, i64* %RCX, align 8, !tbaa !2428
  %5975 = load i64, i64* %RSI
  %5976 = load i64, i64* %RCX
  %5977 = add i64 %5976, 20
  %5978 = load i64, i64* %PC
  %5979 = add i64 %5978, 4
  store i64 %5979, i64* %PC
  %5980 = inttoptr i64 %5977 to i32*
  %5981 = load i32, i32* %5980
  %5982 = shl i64 %5975, 32
  %5983 = ashr exact i64 %5982, 32
  %5984 = sext i32 %5981 to i64
  %5985 = mul nsw i64 %5984, %5983
  %5986 = trunc i64 %5985 to i32
  %5987 = and i64 %5985, 4294967295
  store i64 %5987, i64* %RSI, align 8, !tbaa !2428
  %5988 = shl i64 %5985, 32
  %5989 = ashr exact i64 %5988, 32
  %5990 = icmp ne i64 %5989, %5985
  %5991 = zext i1 %5990 to i8
  %5992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5991, i8* %5992, align 1, !tbaa !2432
  %5993 = and i32 %5986, 255
  %5994 = call i32 @llvm.ctpop.i32(i32 %5993) #16
  %5995 = trunc i32 %5994 to i8
  %5996 = and i8 %5995, 1
  %5997 = xor i8 %5996, 1
  %5998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5997, i8* %5998, align 1, !tbaa !2446
  %5999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5999, align 1, !tbaa !2447
  %6000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6000, align 1, !tbaa !2448
  %6001 = lshr i32 %5986, 31
  %6002 = trunc i32 %6001 to i8
  %6003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6002, i8* %6003, align 1, !tbaa !2449
  %6004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5991, i8* %6004, align 1, !tbaa !2450
  %6005 = load i64, i64* %RDX
  %6006 = load i32, i32* %ESI
  %6007 = zext i32 %6006 to i64
  %6008 = load i64, i64* %PC
  %6009 = add i64 %6008, 2
  store i64 %6009, i64* %PC
  %6010 = trunc i64 %6005 to i32
  %6011 = add i32 %6006, %6010
  %6012 = zext i32 %6011 to i64
  store i64 %6012, i64* %RDX, align 8, !tbaa !2428
  %6013 = icmp ult i32 %6011, %6010
  %6014 = icmp ult i32 %6011, %6006
  %6015 = or i1 %6013, %6014
  %6016 = zext i1 %6015 to i8
  %6017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6016, i8* %6017, align 1, !tbaa !2432
  %6018 = and i32 %6011, 255
  %6019 = call i32 @llvm.ctpop.i32(i32 %6018) #16
  %6020 = trunc i32 %6019 to i8
  %6021 = and i8 %6020, 1
  %6022 = xor i8 %6021, 1
  %6023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6022, i8* %6023, align 1, !tbaa !2446
  %6024 = xor i64 %6007, %6005
  %6025 = trunc i64 %6024 to i32
  %6026 = xor i32 %6025, %6011
  %6027 = lshr i32 %6026, 4
  %6028 = trunc i32 %6027 to i8
  %6029 = and i8 %6028, 1
  %6030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6029, i8* %6030, align 1, !tbaa !2447
  %6031 = icmp eq i32 %6011, 0
  %6032 = zext i1 %6031 to i8
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6032, i8* %6033, align 1, !tbaa !2448
  %6034 = lshr i32 %6011, 31
  %6035 = trunc i32 %6034 to i8
  %6036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6035, i8* %6036, align 1, !tbaa !2449
  %6037 = lshr i32 %6010, 31
  %6038 = lshr i32 %6006, 31
  %6039 = xor i32 %6034, %6037
  %6040 = xor i32 %6034, %6038
  %6041 = add nuw nsw i32 %6039, %6040
  %6042 = icmp eq i32 %6041, 2
  %6043 = zext i1 %6042 to i8
  %6044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6043, i8* %6044, align 1, !tbaa !2450
  %6045 = load i64, i64* %RBP
  %6046 = sub i64 %6045, 72
  %6047 = load i64, i64* %PC
  %6048 = add i64 %6047, 3
  store i64 %6048, i64* %PC
  %6049 = inttoptr i64 %6046 to i32*
  %6050 = load i32, i32* %6049
  %6051 = zext i32 %6050 to i64
  store i64 %6051, i64* %RSI, align 8, !tbaa !2428
  %6052 = load i64, i64* %RSI
  %6053 = load i64, i64* %PC
  %6054 = add i64 %6053, 3
  store i64 %6054, i64* %PC
  %6055 = trunc i64 %6052 to i32
  %6056 = sub i32 %6055, 1
  %6057 = zext i32 %6056 to i64
  store i64 %6057, i64* %RSI, align 8, !tbaa !2428
  %6058 = icmp ult i32 %6055, 1
  %6059 = zext i1 %6058 to i8
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6059, i8* %6060, align 1, !tbaa !2432
  %6061 = and i32 %6056, 255
  %6062 = call i32 @llvm.ctpop.i32(i32 %6061) #16
  %6063 = trunc i32 %6062 to i8
  %6064 = and i8 %6063, 1
  %6065 = xor i8 %6064, 1
  %6066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6065, i8* %6066, align 1, !tbaa !2446
  %6067 = xor i64 1, %6052
  %6068 = trunc i64 %6067 to i32
  %6069 = xor i32 %6068, %6056
  %6070 = lshr i32 %6069, 4
  %6071 = trunc i32 %6070 to i8
  %6072 = and i8 %6071, 1
  %6073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6072, i8* %6073, align 1, !tbaa !2447
  %6074 = icmp eq i32 %6056, 0
  %6075 = zext i1 %6074 to i8
  %6076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6075, i8* %6076, align 1, !tbaa !2448
  %6077 = lshr i32 %6056, 31
  %6078 = trunc i32 %6077 to i8
  %6079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6078, i8* %6079, align 1, !tbaa !2449
  %6080 = lshr i32 %6055, 31
  %6081 = xor i32 %6077, %6080
  %6082 = add nuw nsw i32 %6081, %6080
  %6083 = icmp eq i32 %6082, 2
  %6084 = zext i1 %6083 to i8
  %6085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6084, i8* %6085, align 1, !tbaa !2450
  %6086 = load i64, i64* %RBP
  %6087 = sub i64 %6086, 40
  %6088 = load i64, i64* %PC
  %6089 = add i64 %6088, 4
  store i64 %6089, i64* %PC
  %6090 = inttoptr i64 %6087 to i64*
  %6091 = load i64, i64* %6090
  store i64 %6091, i64* %RCX, align 8, !tbaa !2428
  %6092 = load i64, i64* %RSI
  %6093 = load i64, i64* %RCX
  %6094 = add i64 %6093, 20
  %6095 = load i64, i64* %PC
  %6096 = add i64 %6095, 4
  store i64 %6096, i64* %PC
  %6097 = inttoptr i64 %6094 to i32*
  %6098 = load i32, i32* %6097
  %6099 = shl i64 %6092, 32
  %6100 = ashr exact i64 %6099, 32
  %6101 = sext i32 %6098 to i64
  %6102 = mul nsw i64 %6101, %6100
  %6103 = trunc i64 %6102 to i32
  %6104 = and i64 %6102, 4294967295
  store i64 %6104, i64* %RSI, align 8, !tbaa !2428
  %6105 = shl i64 %6102, 32
  %6106 = ashr exact i64 %6105, 32
  %6107 = icmp ne i64 %6106, %6102
  %6108 = zext i1 %6107 to i8
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6108, i8* %6109, align 1, !tbaa !2432
  %6110 = and i32 %6103, 255
  %6111 = call i32 @llvm.ctpop.i32(i32 %6110) #16
  %6112 = trunc i32 %6111 to i8
  %6113 = and i8 %6112, 1
  %6114 = xor i8 %6113, 1
  %6115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6114, i8* %6115, align 1, !tbaa !2446
  %6116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6116, align 1, !tbaa !2447
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6117, align 1, !tbaa !2448
  %6118 = lshr i32 %6103, 31
  %6119 = trunc i32 %6118 to i8
  %6120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6119, i8* %6120, align 1, !tbaa !2449
  %6121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6108, i8* %6121, align 1, !tbaa !2450
  %6122 = load i64, i64* %RDX
  %6123 = load i32, i32* %ESI
  %6124 = zext i32 %6123 to i64
  %6125 = load i64, i64* %PC
  %6126 = add i64 %6125, 2
  store i64 %6126, i64* %PC
  %6127 = trunc i64 %6122 to i32
  %6128 = add i32 %6123, %6127
  %6129 = zext i32 %6128 to i64
  store i64 %6129, i64* %RDX, align 8, !tbaa !2428
  %6130 = icmp ult i32 %6128, %6127
  %6131 = icmp ult i32 %6128, %6123
  %6132 = or i1 %6130, %6131
  %6133 = zext i1 %6132 to i8
  %6134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6133, i8* %6134, align 1, !tbaa !2432
  %6135 = and i32 %6128, 255
  %6136 = call i32 @llvm.ctpop.i32(i32 %6135) #16
  %6137 = trunc i32 %6136 to i8
  %6138 = and i8 %6137, 1
  %6139 = xor i8 %6138, 1
  %6140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6139, i8* %6140, align 1, !tbaa !2446
  %6141 = xor i64 %6124, %6122
  %6142 = trunc i64 %6141 to i32
  %6143 = xor i32 %6142, %6128
  %6144 = lshr i32 %6143, 4
  %6145 = trunc i32 %6144 to i8
  %6146 = and i8 %6145, 1
  %6147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6146, i8* %6147, align 1, !tbaa !2447
  %6148 = icmp eq i32 %6128, 0
  %6149 = zext i1 %6148 to i8
  %6150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6149, i8* %6150, align 1, !tbaa !2448
  %6151 = lshr i32 %6128, 31
  %6152 = trunc i32 %6151 to i8
  %6153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6152, i8* %6153, align 1, !tbaa !2449
  %6154 = lshr i32 %6127, 31
  %6155 = lshr i32 %6123, 31
  %6156 = xor i32 %6151, %6154
  %6157 = xor i32 %6151, %6155
  %6158 = add nuw nsw i32 %6156, %6157
  %6159 = icmp eq i32 %6158, 2
  %6160 = zext i1 %6159 to i8
  %6161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6160, i8* %6161, align 1, !tbaa !2450
  %6162 = load i64, i64* %RDX
  %6163 = load i64, i64* %RBP
  %6164 = sub i64 %6163, 76
  %6165 = load i64, i64* %PC
  %6166 = add i64 %6165, 3
  store i64 %6166, i64* %PC
  %6167 = trunc i64 %6162 to i32
  %6168 = inttoptr i64 %6164 to i32*
  %6169 = load i32, i32* %6168
  %6170 = add i32 %6169, %6167
  %6171 = zext i32 %6170 to i64
  store i64 %6171, i64* %RDX, align 8, !tbaa !2428
  %6172 = icmp ult i32 %6170, %6167
  %6173 = icmp ult i32 %6170, %6169
  %6174 = or i1 %6172, %6173
  %6175 = zext i1 %6174 to i8
  %6176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6175, i8* %6176, align 1, !tbaa !2432
  %6177 = and i32 %6170, 255
  %6178 = call i32 @llvm.ctpop.i32(i32 %6177) #16
  %6179 = trunc i32 %6178 to i8
  %6180 = and i8 %6179, 1
  %6181 = xor i8 %6180, 1
  %6182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6181, i8* %6182, align 1, !tbaa !2446
  %6183 = xor i32 %6169, %6167
  %6184 = xor i32 %6183, %6170
  %6185 = lshr i32 %6184, 4
  %6186 = trunc i32 %6185 to i8
  %6187 = and i8 %6186, 1
  %6188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6187, i8* %6188, align 1, !tbaa !2447
  %6189 = icmp eq i32 %6170, 0
  %6190 = zext i1 %6189 to i8
  %6191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6190, i8* %6191, align 1, !tbaa !2448
  %6192 = lshr i32 %6170, 31
  %6193 = trunc i32 %6192 to i8
  %6194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6193, i8* %6194, align 1, !tbaa !2449
  %6195 = lshr i32 %6167, 31
  %6196 = lshr i32 %6169, 31
  %6197 = xor i32 %6192, %6195
  %6198 = xor i32 %6192, %6196
  %6199 = add nuw nsw i32 %6197, %6198
  %6200 = icmp eq i32 %6199, 2
  %6201 = zext i1 %6200 to i8
  %6202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6201, i8* %6202, align 1, !tbaa !2450
  %6203 = load i32, i32* %EDX
  %6204 = zext i32 %6203 to i64
  %6205 = load i64, i64* %PC
  %6206 = add i64 %6205, 3
  store i64 %6206, i64* %PC
  %6207 = shl i64 %6204, 32
  %6208 = ashr exact i64 %6207, 32
  store i64 %6208, i64* %RCX, align 8, !tbaa !2428
  %6209 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6210 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6211 = load i64, i64* %RAX
  %6212 = load i64, i64* %RCX
  %6213 = mul i64 %6212, 4
  %6214 = add i64 %6213, %6211
  %6215 = load i64, i64* %PC
  %6216 = add i64 %6215, 5
  store i64 %6216, i64* %PC
  %6217 = bitcast i8* %6210 to <2 x float>*
  %6218 = load <2 x float>, <2 x float>* %6217, align 1
  %6219 = getelementptr inbounds i8, i8* %6210, i64 8
  %6220 = bitcast i8* %6219 to <2 x i32>*
  %6221 = load <2 x i32>, <2 x i32>* %6220, align 1
  %6222 = inttoptr i64 %6214 to float*
  %6223 = load float, float* %6222
  %6224 = extractelement <2 x float> %6218, i32 0
  %6225 = fadd float %6224, %6223
  %6226 = bitcast i8* %6209 to float*
  store float %6225, float* %6226, align 1, !tbaa !2452
  %6227 = bitcast <2 x float> %6218 to <2 x i32>
  %6228 = extractelement <2 x i32> %6227, i32 1
  %6229 = getelementptr inbounds i8, i8* %6209, i64 4
  %6230 = bitcast i8* %6229 to i32*
  store i32 %6228, i32* %6230, align 1, !tbaa !2452
  %6231 = extractelement <2 x i32> %6221, i32 0
  %6232 = getelementptr inbounds i8, i8* %6209, i64 8
  %6233 = bitcast i8* %6232 to i32*
  store i32 %6231, i32* %6233, align 1, !tbaa !2452
  %6234 = extractelement <2 x i32> %6221, i32 1
  %6235 = getelementptr inbounds i8, i8* %6209, i64 12
  %6236 = bitcast i8* %6235 to i32*
  store i32 %6234, i32* %6236, align 1, !tbaa !2452
  %6237 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6238 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6239 = bitcast %union.vec128_t* %XMM2 to i8*
  %6240 = load i64, i64* %PC
  %6241 = add i64 %6240, 4
  store i64 %6241, i64* %PC
  %6242 = bitcast i8* %6238 to <2 x float>*
  %6243 = load <2 x float>, <2 x float>* %6242, align 1
  %6244 = getelementptr inbounds i8, i8* %6238, i64 8
  %6245 = bitcast i8* %6244 to <2 x i32>*
  %6246 = load <2 x i32>, <2 x i32>* %6245, align 1
  %6247 = bitcast i8* %6239 to <2 x float>*
  %6248 = load <2 x float>, <2 x float>* %6247, align 1
  %6249 = extractelement <2 x float> %6243, i32 0
  %6250 = extractelement <2 x float> %6248, i32 0
  %6251 = fmul float %6249, %6250
  %6252 = bitcast i8* %6237 to float*
  store float %6251, float* %6252, align 1, !tbaa !2452
  %6253 = bitcast <2 x float> %6243 to <2 x i32>
  %6254 = extractelement <2 x i32> %6253, i32 1
  %6255 = getelementptr inbounds i8, i8* %6237, i64 4
  %6256 = bitcast i8* %6255 to i32*
  store i32 %6254, i32* %6256, align 1, !tbaa !2452
  %6257 = extractelement <2 x i32> %6246, i32 0
  %6258 = getelementptr inbounds i8, i8* %6237, i64 8
  %6259 = bitcast i8* %6258 to i32*
  store i32 %6257, i32* %6259, align 1, !tbaa !2452
  %6260 = extractelement <2 x i32> %6246, i32 1
  %6261 = getelementptr inbounds i8, i8* %6237, i64 12
  %6262 = bitcast i8* %6261 to i32*
  store i32 %6260, i32* %6262, align 1, !tbaa !2452
  %6263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6265 = bitcast %union.vec128_t* %XMM1 to i8*
  %6266 = load i64, i64* %PC
  %6267 = add i64 %6266, 4
  store i64 %6267, i64* %PC
  %6268 = bitcast i8* %6264 to <2 x float>*
  %6269 = load <2 x float>, <2 x float>* %6268, align 1
  %6270 = getelementptr inbounds i8, i8* %6264, i64 8
  %6271 = bitcast i8* %6270 to <2 x i32>*
  %6272 = load <2 x i32>, <2 x i32>* %6271, align 1
  %6273 = bitcast i8* %6265 to <2 x float>*
  %6274 = load <2 x float>, <2 x float>* %6273, align 1
  %6275 = extractelement <2 x float> %6269, i32 0
  %6276 = extractelement <2 x float> %6274, i32 0
  %6277 = fadd float %6275, %6276
  %6278 = bitcast i8* %6263 to float*
  store float %6277, float* %6278, align 1, !tbaa !2452
  %6279 = bitcast <2 x float> %6269 to <2 x i32>
  %6280 = extractelement <2 x i32> %6279, i32 1
  %6281 = getelementptr inbounds i8, i8* %6263, i64 4
  %6282 = bitcast i8* %6281 to i32*
  store i32 %6280, i32* %6282, align 1, !tbaa !2452
  %6283 = extractelement <2 x i32> %6272, i32 0
  %6284 = getelementptr inbounds i8, i8* %6263, i64 8
  %6285 = bitcast i8* %6284 to i32*
  store i32 %6283, i32* %6285, align 1, !tbaa !2452
  %6286 = extractelement <2 x i32> %6272, i32 1
  %6287 = getelementptr inbounds i8, i8* %6263, i64 12
  %6288 = bitcast i8* %6287 to i32*
  store i32 %6286, i32* %6288, align 1, !tbaa !2452
  %6289 = load i64, i64* %RBP
  %6290 = sub i64 %6289, 24
  %6291 = load i64, i64* %PC
  %6292 = add i64 %6291, 4
  store i64 %6292, i64* %PC
  %6293 = inttoptr i64 %6290 to i64*
  %6294 = load i64, i64* %6293
  store i64 %6294, i64* %RAX, align 8, !tbaa !2428
  %6295 = load i64, i64* %RAX
  %6296 = load i64, i64* %PC
  %6297 = add i64 %6296, 3
  store i64 %6297, i64* %PC
  %6298 = inttoptr i64 %6295 to i64*
  %6299 = load i64, i64* %6298
  store i64 %6299, i64* %RAX, align 8, !tbaa !2428
  %6300 = load i64, i64* %RBP
  %6301 = sub i64 %6300, 24
  %6302 = load i64, i64* %PC
  %6303 = add i64 %6302, 4
  store i64 %6303, i64* %PC
  %6304 = inttoptr i64 %6301 to i64*
  %6305 = load i64, i64* %6304
  store i64 %6305, i64* %RCX, align 8, !tbaa !2428
  %6306 = load i64, i64* %RCX
  %6307 = add i64 %6306, 12
  %6308 = load i64, i64* %PC
  %6309 = add i64 %6308, 3
  store i64 %6309, i64* %PC
  %6310 = inttoptr i64 %6307 to i32*
  %6311 = load i32, i32* %6310
  %6312 = zext i32 %6311 to i64
  store i64 %6312, i64* %RDX, align 8, !tbaa !2428
  %6313 = load i64, i64* %RDX
  %6314 = load i64, i64* %PC
  %6315 = add i64 %6314, 3
  store i64 %6315, i64* %PC
  %6316 = load i64, i64* %RBP
  %6317 = sub i64 %6316, 24
  %6318 = load i64, i64* %PC
  %6319 = add i64 %6318, 4
  store i64 %6319, i64* %PC
  %6320 = inttoptr i64 %6317 to i64*
  %6321 = load i64, i64* %6320
  store i64 %6321, i64* %RCX, align 8, !tbaa !2428
  %6322 = load i64, i64* %RDX
  %6323 = load i64, i64* %RCX
  %6324 = add i64 %6323, 16
  %6325 = load i64, i64* %PC
  %6326 = add i64 %6325, 4
  store i64 %6326, i64* %PC
  %6327 = inttoptr i64 %6324 to i32*
  %6328 = load i32, i32* %6327
  %6329 = shl i64 %6322, 32
  %6330 = ashr exact i64 %6329, 32
  %6331 = sext i32 %6328 to i64
  %6332 = mul nsw i64 %6331, %6330
  %6333 = trunc i64 %6332 to i32
  %6334 = and i64 %6332, 4294967295
  store i64 %6334, i64* %RDX, align 8, !tbaa !2428
  %6335 = shl i64 %6332, 32
  %6336 = ashr exact i64 %6335, 32
  %6337 = icmp ne i64 %6336, %6332
  %6338 = zext i1 %6337 to i8
  %6339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6338, i8* %6339, align 1, !tbaa !2432
  %6340 = and i32 %6333, 255
  %6341 = call i32 @llvm.ctpop.i32(i32 %6340) #16
  %6342 = trunc i32 %6341 to i8
  %6343 = and i8 %6342, 1
  %6344 = xor i8 %6343, 1
  %6345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6344, i8* %6345, align 1, !tbaa !2446
  %6346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6346, align 1, !tbaa !2447
  %6347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6347, align 1, !tbaa !2448
  %6348 = lshr i32 %6333, 31
  %6349 = trunc i32 %6348 to i8
  %6350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6349, i8* %6350, align 1, !tbaa !2449
  %6351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6338, i8* %6351, align 1, !tbaa !2450
  %6352 = load i64, i64* %RBP
  %6353 = sub i64 %6352, 24
  %6354 = load i64, i64* %PC
  %6355 = add i64 %6354, 4
  store i64 %6355, i64* %PC
  %6356 = inttoptr i64 %6353 to i64*
  %6357 = load i64, i64* %6356
  store i64 %6357, i64* %RCX, align 8, !tbaa !2428
  %6358 = load i64, i64* %RDX
  %6359 = load i64, i64* %RCX
  %6360 = add i64 %6359, 20
  %6361 = load i64, i64* %PC
  %6362 = add i64 %6361, 4
  store i64 %6362, i64* %PC
  %6363 = inttoptr i64 %6360 to i32*
  %6364 = load i32, i32* %6363
  %6365 = shl i64 %6358, 32
  %6366 = ashr exact i64 %6365, 32
  %6367 = sext i32 %6364 to i64
  %6368 = mul nsw i64 %6367, %6366
  %6369 = trunc i64 %6368 to i32
  %6370 = and i64 %6368, 4294967295
  store i64 %6370, i64* %RDX, align 8, !tbaa !2428
  %6371 = shl i64 %6368, 32
  %6372 = ashr exact i64 %6371, 32
  %6373 = icmp ne i64 %6372, %6368
  %6374 = zext i1 %6373 to i8
  %6375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6374, i8* %6375, align 1, !tbaa !2432
  %6376 = and i32 %6369, 255
  %6377 = call i32 @llvm.ctpop.i32(i32 %6376) #16
  %6378 = trunc i32 %6377 to i8
  %6379 = and i8 %6378, 1
  %6380 = xor i8 %6379, 1
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6380, i8* %6381, align 1, !tbaa !2446
  %6382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6382, align 1, !tbaa !2447
  %6383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6383, align 1, !tbaa !2448
  %6384 = lshr i32 %6369, 31
  %6385 = trunc i32 %6384 to i8
  %6386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6385, i8* %6386, align 1, !tbaa !2449
  %6387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6374, i8* %6387, align 1, !tbaa !2450
  %6388 = load i64, i64* %RBP
  %6389 = sub i64 %6388, 68
  %6390 = load i64, i64* %PC
  %6391 = add i64 %6390, 3
  store i64 %6391, i64* %PC
  %6392 = inttoptr i64 %6389 to i32*
  %6393 = load i32, i32* %6392
  %6394 = zext i32 %6393 to i64
  store i64 %6394, i64* %RSI, align 8, !tbaa !2428
  %6395 = load i64, i64* %RBP
  %6396 = sub i64 %6395, 24
  %6397 = load i64, i64* %PC
  %6398 = add i64 %6397, 4
  store i64 %6398, i64* %PC
  %6399 = inttoptr i64 %6396 to i64*
  %6400 = load i64, i64* %6399
  store i64 %6400, i64* %RCX, align 8, !tbaa !2428
  %6401 = load i64, i64* %RSI
  %6402 = load i64, i64* %RCX
  %6403 = add i64 %6402, 16
  %6404 = load i64, i64* %PC
  %6405 = add i64 %6404, 4
  store i64 %6405, i64* %PC
  %6406 = inttoptr i64 %6403 to i32*
  %6407 = load i32, i32* %6406
  %6408 = shl i64 %6401, 32
  %6409 = ashr exact i64 %6408, 32
  %6410 = sext i32 %6407 to i64
  %6411 = mul nsw i64 %6410, %6409
  %6412 = trunc i64 %6411 to i32
  %6413 = and i64 %6411, 4294967295
  store i64 %6413, i64* %RSI, align 8, !tbaa !2428
  %6414 = shl i64 %6411, 32
  %6415 = ashr exact i64 %6414, 32
  %6416 = icmp ne i64 %6415, %6411
  %6417 = zext i1 %6416 to i8
  %6418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6417, i8* %6418, align 1, !tbaa !2432
  %6419 = and i32 %6412, 255
  %6420 = call i32 @llvm.ctpop.i32(i32 %6419) #16
  %6421 = trunc i32 %6420 to i8
  %6422 = and i8 %6421, 1
  %6423 = xor i8 %6422, 1
  %6424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6423, i8* %6424, align 1, !tbaa !2446
  %6425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6425, align 1, !tbaa !2447
  %6426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6426, align 1, !tbaa !2448
  %6427 = lshr i32 %6412, 31
  %6428 = trunc i32 %6427 to i8
  %6429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6428, i8* %6429, align 1, !tbaa !2449
  %6430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6417, i8* %6430, align 1, !tbaa !2450
  %6431 = load i64, i64* %RBP
  %6432 = sub i64 %6431, 24
  %6433 = load i64, i64* %PC
  %6434 = add i64 %6433, 4
  store i64 %6434, i64* %PC
  %6435 = inttoptr i64 %6432 to i64*
  %6436 = load i64, i64* %6435
  store i64 %6436, i64* %RCX, align 8, !tbaa !2428
  %6437 = load i64, i64* %RSI
  %6438 = load i64, i64* %RCX
  %6439 = add i64 %6438, 20
  %6440 = load i64, i64* %PC
  %6441 = add i64 %6440, 4
  store i64 %6441, i64* %PC
  %6442 = inttoptr i64 %6439 to i32*
  %6443 = load i32, i32* %6442
  %6444 = shl i64 %6437, 32
  %6445 = ashr exact i64 %6444, 32
  %6446 = sext i32 %6443 to i64
  %6447 = mul nsw i64 %6446, %6445
  %6448 = trunc i64 %6447 to i32
  %6449 = and i64 %6447, 4294967295
  store i64 %6449, i64* %RSI, align 8, !tbaa !2428
  %6450 = shl i64 %6447, 32
  %6451 = ashr exact i64 %6450, 32
  %6452 = icmp ne i64 %6451, %6447
  %6453 = zext i1 %6452 to i8
  %6454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6453, i8* %6454, align 1, !tbaa !2432
  %6455 = and i32 %6448, 255
  %6456 = call i32 @llvm.ctpop.i32(i32 %6455) #16
  %6457 = trunc i32 %6456 to i8
  %6458 = and i8 %6457, 1
  %6459 = xor i8 %6458, 1
  %6460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6459, i8* %6460, align 1, !tbaa !2446
  %6461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6461, align 1, !tbaa !2447
  %6462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6462, align 1, !tbaa !2448
  %6463 = lshr i32 %6448, 31
  %6464 = trunc i32 %6463 to i8
  %6465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6464, i8* %6465, align 1, !tbaa !2449
  %6466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6453, i8* %6466, align 1, !tbaa !2450
  %6467 = load i64, i64* %RDX
  %6468 = load i32, i32* %ESI
  %6469 = zext i32 %6468 to i64
  %6470 = load i64, i64* %PC
  %6471 = add i64 %6470, 2
  store i64 %6471, i64* %PC
  %6472 = trunc i64 %6467 to i32
  %6473 = add i32 %6468, %6472
  %6474 = zext i32 %6473 to i64
  store i64 %6474, i64* %RDX, align 8, !tbaa !2428
  %6475 = icmp ult i32 %6473, %6472
  %6476 = icmp ult i32 %6473, %6468
  %6477 = or i1 %6475, %6476
  %6478 = zext i1 %6477 to i8
  %6479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6478, i8* %6479, align 1, !tbaa !2432
  %6480 = and i32 %6473, 255
  %6481 = call i32 @llvm.ctpop.i32(i32 %6480) #16
  %6482 = trunc i32 %6481 to i8
  %6483 = and i8 %6482, 1
  %6484 = xor i8 %6483, 1
  %6485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6484, i8* %6485, align 1, !tbaa !2446
  %6486 = xor i64 %6469, %6467
  %6487 = trunc i64 %6486 to i32
  %6488 = xor i32 %6487, %6473
  %6489 = lshr i32 %6488, 4
  %6490 = trunc i32 %6489 to i8
  %6491 = and i8 %6490, 1
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6491, i8* %6492, align 1, !tbaa !2447
  %6493 = icmp eq i32 %6473, 0
  %6494 = zext i1 %6493 to i8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6494, i8* %6495, align 1, !tbaa !2448
  %6496 = lshr i32 %6473, 31
  %6497 = trunc i32 %6496 to i8
  %6498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6497, i8* %6498, align 1, !tbaa !2449
  %6499 = lshr i32 %6472, 31
  %6500 = lshr i32 %6468, 31
  %6501 = xor i32 %6496, %6499
  %6502 = xor i32 %6496, %6500
  %6503 = add nuw nsw i32 %6501, %6502
  %6504 = icmp eq i32 %6503, 2
  %6505 = zext i1 %6504 to i8
  %6506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6505, i8* %6506, align 1, !tbaa !2450
  %6507 = load i64, i64* %RBP
  %6508 = sub i64 %6507, 72
  %6509 = load i64, i64* %PC
  %6510 = add i64 %6509, 3
  store i64 %6510, i64* %PC
  %6511 = inttoptr i64 %6508 to i32*
  %6512 = load i32, i32* %6511
  %6513 = zext i32 %6512 to i64
  store i64 %6513, i64* %RSI, align 8, !tbaa !2428
  %6514 = load i64, i64* %RBP
  %6515 = sub i64 %6514, 24
  %6516 = load i64, i64* %PC
  %6517 = add i64 %6516, 4
  store i64 %6517, i64* %PC
  %6518 = inttoptr i64 %6515 to i64*
  %6519 = load i64, i64* %6518
  store i64 %6519, i64* %RCX, align 8, !tbaa !2428
  %6520 = load i64, i64* %RSI
  %6521 = load i64, i64* %RCX
  %6522 = add i64 %6521, 20
  %6523 = load i64, i64* %PC
  %6524 = add i64 %6523, 4
  store i64 %6524, i64* %PC
  %6525 = inttoptr i64 %6522 to i32*
  %6526 = load i32, i32* %6525
  %6527 = shl i64 %6520, 32
  %6528 = ashr exact i64 %6527, 32
  %6529 = sext i32 %6526 to i64
  %6530 = mul nsw i64 %6529, %6528
  %6531 = trunc i64 %6530 to i32
  %6532 = and i64 %6530, 4294967295
  store i64 %6532, i64* %RSI, align 8, !tbaa !2428
  %6533 = shl i64 %6530, 32
  %6534 = ashr exact i64 %6533, 32
  %6535 = icmp ne i64 %6534, %6530
  %6536 = zext i1 %6535 to i8
  %6537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6536, i8* %6537, align 1, !tbaa !2432
  %6538 = and i32 %6531, 255
  %6539 = call i32 @llvm.ctpop.i32(i32 %6538) #16
  %6540 = trunc i32 %6539 to i8
  %6541 = and i8 %6540, 1
  %6542 = xor i8 %6541, 1
  %6543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6542, i8* %6543, align 1, !tbaa !2446
  %6544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6544, align 1, !tbaa !2447
  %6545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6545, align 1, !tbaa !2448
  %6546 = lshr i32 %6531, 31
  %6547 = trunc i32 %6546 to i8
  %6548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6547, i8* %6548, align 1, !tbaa !2449
  %6549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6536, i8* %6549, align 1, !tbaa !2450
  %6550 = load i64, i64* %RDX
  %6551 = load i32, i32* %ESI
  %6552 = zext i32 %6551 to i64
  %6553 = load i64, i64* %PC
  %6554 = add i64 %6553, 2
  store i64 %6554, i64* %PC
  %6555 = trunc i64 %6550 to i32
  %6556 = add i32 %6551, %6555
  %6557 = zext i32 %6556 to i64
  store i64 %6557, i64* %RDX, align 8, !tbaa !2428
  %6558 = icmp ult i32 %6556, %6555
  %6559 = icmp ult i32 %6556, %6551
  %6560 = or i1 %6558, %6559
  %6561 = zext i1 %6560 to i8
  %6562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6561, i8* %6562, align 1, !tbaa !2432
  %6563 = and i32 %6556, 255
  %6564 = call i32 @llvm.ctpop.i32(i32 %6563) #16
  %6565 = trunc i32 %6564 to i8
  %6566 = and i8 %6565, 1
  %6567 = xor i8 %6566, 1
  %6568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6567, i8* %6568, align 1, !tbaa !2446
  %6569 = xor i64 %6552, %6550
  %6570 = trunc i64 %6569 to i32
  %6571 = xor i32 %6570, %6556
  %6572 = lshr i32 %6571, 4
  %6573 = trunc i32 %6572 to i8
  %6574 = and i8 %6573, 1
  %6575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6574, i8* %6575, align 1, !tbaa !2447
  %6576 = icmp eq i32 %6556, 0
  %6577 = zext i1 %6576 to i8
  %6578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6577, i8* %6578, align 1, !tbaa !2448
  %6579 = lshr i32 %6556, 31
  %6580 = trunc i32 %6579 to i8
  %6581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6580, i8* %6581, align 1, !tbaa !2449
  %6582 = lshr i32 %6555, 31
  %6583 = lshr i32 %6551, 31
  %6584 = xor i32 %6579, %6582
  %6585 = xor i32 %6579, %6583
  %6586 = add nuw nsw i32 %6584, %6585
  %6587 = icmp eq i32 %6586, 2
  %6588 = zext i1 %6587 to i8
  %6589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6588, i8* %6589, align 1, !tbaa !2450
  %6590 = load i64, i64* %RDX
  %6591 = load i64, i64* %RBP
  %6592 = sub i64 %6591, 76
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 3
  store i64 %6594, i64* %PC
  %6595 = trunc i64 %6590 to i32
  %6596 = inttoptr i64 %6592 to i32*
  %6597 = load i32, i32* %6596
  %6598 = add i32 %6597, %6595
  %6599 = zext i32 %6598 to i64
  store i64 %6599, i64* %RDX, align 8, !tbaa !2428
  %6600 = icmp ult i32 %6598, %6595
  %6601 = icmp ult i32 %6598, %6597
  %6602 = or i1 %6600, %6601
  %6603 = zext i1 %6602 to i8
  %6604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6603, i8* %6604, align 1, !tbaa !2432
  %6605 = and i32 %6598, 255
  %6606 = call i32 @llvm.ctpop.i32(i32 %6605) #16
  %6607 = trunc i32 %6606 to i8
  %6608 = and i8 %6607, 1
  %6609 = xor i8 %6608, 1
  %6610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6609, i8* %6610, align 1, !tbaa !2446
  %6611 = xor i32 %6597, %6595
  %6612 = xor i32 %6611, %6598
  %6613 = lshr i32 %6612, 4
  %6614 = trunc i32 %6613 to i8
  %6615 = and i8 %6614, 1
  %6616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6615, i8* %6616, align 1, !tbaa !2447
  %6617 = icmp eq i32 %6598, 0
  %6618 = zext i1 %6617 to i8
  %6619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6618, i8* %6619, align 1, !tbaa !2448
  %6620 = lshr i32 %6598, 31
  %6621 = trunc i32 %6620 to i8
  %6622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6621, i8* %6622, align 1, !tbaa !2449
  %6623 = lshr i32 %6595, 31
  %6624 = lshr i32 %6597, 31
  %6625 = xor i32 %6620, %6623
  %6626 = xor i32 %6620, %6624
  %6627 = add nuw nsw i32 %6625, %6626
  %6628 = icmp eq i32 %6627, 2
  %6629 = zext i1 %6628 to i8
  %6630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6629, i8* %6630, align 1, !tbaa !2450
  %6631 = load i32, i32* %EDX
  %6632 = zext i32 %6631 to i64
  %6633 = load i64, i64* %PC
  %6634 = add i64 %6633, 3
  store i64 %6634, i64* %PC
  %6635 = shl i64 %6632, 32
  %6636 = ashr exact i64 %6635, 32
  store i64 %6636, i64* %RCX, align 8, !tbaa !2428
  %6637 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6638 = load i64, i64* %RAX
  %6639 = load i64, i64* %RCX
  %6640 = mul i64 %6639, 4
  %6641 = add i64 %6640, %6638
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 5
  store i64 %6643, i64* %PC
  %6644 = inttoptr i64 %6641 to float*
  %6645 = load float, float* %6644
  %6646 = bitcast i8* %6637 to float*
  store float %6645, float* %6646, align 1, !tbaa !2452
  %6647 = getelementptr inbounds i8, i8* %6637, i64 4
  %6648 = bitcast i8* %6647 to float*
  store float 0.000000e+00, float* %6648, align 1, !tbaa !2452
  %6649 = getelementptr inbounds i8, i8* %6637, i64 8
  %6650 = bitcast i8* %6649 to float*
  store float 0.000000e+00, float* %6650, align 1, !tbaa !2452
  %6651 = getelementptr inbounds i8, i8* %6637, i64 12
  %6652 = bitcast i8* %6651 to float*
  store float 0.000000e+00, float* %6652, align 1, !tbaa !2452
  %6653 = load i64, i64* %RBP
  %6654 = sub i64 %6653, 40
  %6655 = load i64, i64* %PC
  %6656 = add i64 %6655, 4
  store i64 %6656, i64* %PC
  %6657 = inttoptr i64 %6654 to i64*
  %6658 = load i64, i64* %6657
  store i64 %6658, i64* %RAX, align 8, !tbaa !2428
  %6659 = load i64, i64* %RAX
  %6660 = load i64, i64* %PC
  %6661 = add i64 %6660, 3
  store i64 %6661, i64* %PC
  %6662 = inttoptr i64 %6659 to i64*
  %6663 = load i64, i64* %6662
  store i64 %6663, i64* %RAX, align 8, !tbaa !2428
  %6664 = load i64, i64* %RBP
  %6665 = sub i64 %6664, 40
  %6666 = load i64, i64* %PC
  %6667 = add i64 %6666, 4
  store i64 %6667, i64* %PC
  %6668 = inttoptr i64 %6665 to i64*
  %6669 = load i64, i64* %6668
  store i64 %6669, i64* %RCX, align 8, !tbaa !2428
  %6670 = load i64, i64* %RCX
  %6671 = add i64 %6670, 12
  %6672 = load i64, i64* %PC
  %6673 = add i64 %6672, 4
  store i64 %6673, i64* %PC
  %6674 = inttoptr i64 %6671 to i32*
  %6675 = load i32, i32* %6674
  %6676 = sext i32 %6675 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %6677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6677, align 1, !tbaa !2432
  %6678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6678, align 1, !tbaa !2446
  %6679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6679, align 1, !tbaa !2447
  %6680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6680, align 1, !tbaa !2448
  %6681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6681, align 1, !tbaa !2449
  %6682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6682, align 1, !tbaa !2450
  %6683 = load i64, i64* %RBP
  %6684 = sub i64 %6683, 40
  %6685 = load i64, i64* %PC
  %6686 = add i64 %6685, 4
  store i64 %6686, i64* %PC
  %6687 = inttoptr i64 %6684 to i64*
  %6688 = load i64, i64* %6687
  store i64 %6688, i64* %RCX, align 8, !tbaa !2428
  %6689 = load i64, i64* %RDX
  %6690 = load i64, i64* %RCX
  %6691 = add i64 %6690, 16
  %6692 = load i64, i64* %PC
  %6693 = add i64 %6692, 4
  store i64 %6693, i64* %PC
  %6694 = inttoptr i64 %6691 to i32*
  %6695 = load i32, i32* %6694
  %6696 = shl i64 %6689, 32
  %6697 = ashr exact i64 %6696, 32
  %6698 = sext i32 %6695 to i64
  %6699 = mul nsw i64 %6698, %6697
  %6700 = trunc i64 %6699 to i32
  %6701 = and i64 %6699, 4294967295
  store i64 %6701, i64* %RDX, align 8, !tbaa !2428
  %6702 = shl i64 %6699, 32
  %6703 = ashr exact i64 %6702, 32
  %6704 = icmp ne i64 %6703, %6699
  %6705 = zext i1 %6704 to i8
  %6706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6705, i8* %6706, align 1, !tbaa !2432
  %6707 = and i32 %6700, 255
  %6708 = call i32 @llvm.ctpop.i32(i32 %6707) #16
  %6709 = trunc i32 %6708 to i8
  %6710 = and i8 %6709, 1
  %6711 = xor i8 %6710, 1
  %6712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6711, i8* %6712, align 1, !tbaa !2446
  %6713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6713, align 1, !tbaa !2447
  %6714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6714, align 1, !tbaa !2448
  %6715 = lshr i32 %6700, 31
  %6716 = trunc i32 %6715 to i8
  %6717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6716, i8* %6717, align 1, !tbaa !2449
  %6718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6705, i8* %6718, align 1, !tbaa !2450
  %6719 = load i64, i64* %RBP
  %6720 = sub i64 %6719, 40
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 4
  store i64 %6722, i64* %PC
  %6723 = inttoptr i64 %6720 to i64*
  %6724 = load i64, i64* %6723
  store i64 %6724, i64* %RCX, align 8, !tbaa !2428
  %6725 = load i64, i64* %RDX
  %6726 = load i64, i64* %RCX
  %6727 = add i64 %6726, 20
  %6728 = load i64, i64* %PC
  %6729 = add i64 %6728, 4
  store i64 %6729, i64* %PC
  %6730 = inttoptr i64 %6727 to i32*
  %6731 = load i32, i32* %6730
  %6732 = shl i64 %6725, 32
  %6733 = ashr exact i64 %6732, 32
  %6734 = sext i32 %6731 to i64
  %6735 = mul nsw i64 %6734, %6733
  %6736 = trunc i64 %6735 to i32
  %6737 = and i64 %6735, 4294967295
  store i64 %6737, i64* %RDX, align 8, !tbaa !2428
  %6738 = shl i64 %6735, 32
  %6739 = ashr exact i64 %6738, 32
  %6740 = icmp ne i64 %6739, %6735
  %6741 = zext i1 %6740 to i8
  %6742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6741, i8* %6742, align 1, !tbaa !2432
  %6743 = and i32 %6736, 255
  %6744 = call i32 @llvm.ctpop.i32(i32 %6743) #16
  %6745 = trunc i32 %6744 to i8
  %6746 = and i8 %6745, 1
  %6747 = xor i8 %6746, 1
  %6748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6747, i8* %6748, align 1, !tbaa !2446
  %6749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6749, align 1, !tbaa !2447
  %6750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6750, align 1, !tbaa !2448
  %6751 = lshr i32 %6736, 31
  %6752 = trunc i32 %6751 to i8
  %6753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6752, i8* %6753, align 1, !tbaa !2449
  %6754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6741, i8* %6754, align 1, !tbaa !2450
  %6755 = load i64, i64* %RBP
  %6756 = sub i64 %6755, 68
  %6757 = load i64, i64* %PC
  %6758 = add i64 %6757, 3
  store i64 %6758, i64* %PC
  %6759 = inttoptr i64 %6756 to i32*
  %6760 = load i32, i32* %6759
  %6761 = zext i32 %6760 to i64
  store i64 %6761, i64* %RSI, align 8, !tbaa !2428
  %6762 = load i64, i64* %RBP
  %6763 = sub i64 %6762, 40
  %6764 = load i64, i64* %PC
  %6765 = add i64 %6764, 4
  store i64 %6765, i64* %PC
  %6766 = inttoptr i64 %6763 to i64*
  %6767 = load i64, i64* %6766
  store i64 %6767, i64* %RCX, align 8, !tbaa !2428
  %6768 = load i64, i64* %RSI
  %6769 = load i64, i64* %RCX
  %6770 = add i64 %6769, 16
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 4
  store i64 %6772, i64* %PC
  %6773 = inttoptr i64 %6770 to i32*
  %6774 = load i32, i32* %6773
  %6775 = shl i64 %6768, 32
  %6776 = ashr exact i64 %6775, 32
  %6777 = sext i32 %6774 to i64
  %6778 = mul nsw i64 %6777, %6776
  %6779 = trunc i64 %6778 to i32
  %6780 = and i64 %6778, 4294967295
  store i64 %6780, i64* %RSI, align 8, !tbaa !2428
  %6781 = shl i64 %6778, 32
  %6782 = ashr exact i64 %6781, 32
  %6783 = icmp ne i64 %6782, %6778
  %6784 = zext i1 %6783 to i8
  %6785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6784, i8* %6785, align 1, !tbaa !2432
  %6786 = and i32 %6779, 255
  %6787 = call i32 @llvm.ctpop.i32(i32 %6786) #16
  %6788 = trunc i32 %6787 to i8
  %6789 = and i8 %6788, 1
  %6790 = xor i8 %6789, 1
  %6791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6790, i8* %6791, align 1, !tbaa !2446
  %6792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6792, align 1, !tbaa !2447
  %6793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6793, align 1, !tbaa !2448
  %6794 = lshr i32 %6779, 31
  %6795 = trunc i32 %6794 to i8
  %6796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6795, i8* %6796, align 1, !tbaa !2449
  %6797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6784, i8* %6797, align 1, !tbaa !2450
  %6798 = load i64, i64* %RBP
  %6799 = sub i64 %6798, 40
  %6800 = load i64, i64* %PC
  %6801 = add i64 %6800, 4
  store i64 %6801, i64* %PC
  %6802 = inttoptr i64 %6799 to i64*
  %6803 = load i64, i64* %6802
  store i64 %6803, i64* %RCX, align 8, !tbaa !2428
  %6804 = load i64, i64* %RSI
  %6805 = load i64, i64* %RCX
  %6806 = add i64 %6805, 20
  %6807 = load i64, i64* %PC
  %6808 = add i64 %6807, 4
  store i64 %6808, i64* %PC
  %6809 = inttoptr i64 %6806 to i32*
  %6810 = load i32, i32* %6809
  %6811 = shl i64 %6804, 32
  %6812 = ashr exact i64 %6811, 32
  %6813 = sext i32 %6810 to i64
  %6814 = mul nsw i64 %6813, %6812
  %6815 = trunc i64 %6814 to i32
  %6816 = and i64 %6814, 4294967295
  store i64 %6816, i64* %RSI, align 8, !tbaa !2428
  %6817 = shl i64 %6814, 32
  %6818 = ashr exact i64 %6817, 32
  %6819 = icmp ne i64 %6818, %6814
  %6820 = zext i1 %6819 to i8
  %6821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6820, i8* %6821, align 1, !tbaa !2432
  %6822 = and i32 %6815, 255
  %6823 = call i32 @llvm.ctpop.i32(i32 %6822) #16
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  %6826 = xor i8 %6825, 1
  %6827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6826, i8* %6827, align 1, !tbaa !2446
  %6828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6828, align 1, !tbaa !2447
  %6829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6829, align 1, !tbaa !2448
  %6830 = lshr i32 %6815, 31
  %6831 = trunc i32 %6830 to i8
  %6832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6831, i8* %6832, align 1, !tbaa !2449
  %6833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6820, i8* %6833, align 1, !tbaa !2450
  %6834 = load i64, i64* %RDX
  %6835 = load i32, i32* %ESI
  %6836 = zext i32 %6835 to i64
  %6837 = load i64, i64* %PC
  %6838 = add i64 %6837, 2
  store i64 %6838, i64* %PC
  %6839 = trunc i64 %6834 to i32
  %6840 = add i32 %6835, %6839
  %6841 = zext i32 %6840 to i64
  store i64 %6841, i64* %RDX, align 8, !tbaa !2428
  %6842 = icmp ult i32 %6840, %6839
  %6843 = icmp ult i32 %6840, %6835
  %6844 = or i1 %6842, %6843
  %6845 = zext i1 %6844 to i8
  %6846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6845, i8* %6846, align 1, !tbaa !2432
  %6847 = and i32 %6840, 255
  %6848 = call i32 @llvm.ctpop.i32(i32 %6847) #16
  %6849 = trunc i32 %6848 to i8
  %6850 = and i8 %6849, 1
  %6851 = xor i8 %6850, 1
  %6852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6851, i8* %6852, align 1, !tbaa !2446
  %6853 = xor i64 %6836, %6834
  %6854 = trunc i64 %6853 to i32
  %6855 = xor i32 %6854, %6840
  %6856 = lshr i32 %6855, 4
  %6857 = trunc i32 %6856 to i8
  %6858 = and i8 %6857, 1
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6858, i8* %6859, align 1, !tbaa !2447
  %6860 = icmp eq i32 %6840, 0
  %6861 = zext i1 %6860 to i8
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6861, i8* %6862, align 1, !tbaa !2448
  %6863 = lshr i32 %6840, 31
  %6864 = trunc i32 %6863 to i8
  %6865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6864, i8* %6865, align 1, !tbaa !2449
  %6866 = lshr i32 %6839, 31
  %6867 = lshr i32 %6835, 31
  %6868 = xor i32 %6863, %6866
  %6869 = xor i32 %6863, %6867
  %6870 = add nuw nsw i32 %6868, %6869
  %6871 = icmp eq i32 %6870, 2
  %6872 = zext i1 %6871 to i8
  %6873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6872, i8* %6873, align 1, !tbaa !2450
  %6874 = load i64, i64* %RBP
  %6875 = sub i64 %6874, 72
  %6876 = load i64, i64* %PC
  %6877 = add i64 %6876, 3
  store i64 %6877, i64* %PC
  %6878 = inttoptr i64 %6875 to i32*
  %6879 = load i32, i32* %6878
  %6880 = zext i32 %6879 to i64
  store i64 %6880, i64* %RSI, align 8, !tbaa !2428
  %6881 = load i64, i64* %RSI
  %6882 = load i64, i64* %PC
  %6883 = add i64 %6882, 3
  store i64 %6883, i64* %PC
  %6884 = trunc i64 %6881 to i32
  %6885 = add i32 1, %6884
  %6886 = zext i32 %6885 to i64
  store i64 %6886, i64* %RSI, align 8, !tbaa !2428
  %6887 = icmp ult i32 %6885, %6884
  %6888 = icmp ult i32 %6885, 1
  %6889 = or i1 %6887, %6888
  %6890 = zext i1 %6889 to i8
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6890, i8* %6891, align 1, !tbaa !2432
  %6892 = and i32 %6885, 255
  %6893 = call i32 @llvm.ctpop.i32(i32 %6892) #16
  %6894 = trunc i32 %6893 to i8
  %6895 = and i8 %6894, 1
  %6896 = xor i8 %6895, 1
  %6897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6896, i8* %6897, align 1, !tbaa !2446
  %6898 = xor i64 1, %6881
  %6899 = trunc i64 %6898 to i32
  %6900 = xor i32 %6899, %6885
  %6901 = lshr i32 %6900, 4
  %6902 = trunc i32 %6901 to i8
  %6903 = and i8 %6902, 1
  %6904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6903, i8* %6904, align 1, !tbaa !2447
  %6905 = icmp eq i32 %6885, 0
  %6906 = zext i1 %6905 to i8
  %6907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6906, i8* %6907, align 1, !tbaa !2448
  %6908 = lshr i32 %6885, 31
  %6909 = trunc i32 %6908 to i8
  %6910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6909, i8* %6910, align 1, !tbaa !2449
  %6911 = lshr i32 %6884, 31
  %6912 = xor i32 %6908, %6911
  %6913 = add nuw nsw i32 %6912, %6908
  %6914 = icmp eq i32 %6913, 2
  %6915 = zext i1 %6914 to i8
  %6916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6915, i8* %6916, align 1, !tbaa !2450
  %6917 = load i64, i64* %RBP
  %6918 = sub i64 %6917, 40
  %6919 = load i64, i64* %PC
  %6920 = add i64 %6919, 4
  store i64 %6920, i64* %PC
  %6921 = inttoptr i64 %6918 to i64*
  %6922 = load i64, i64* %6921
  store i64 %6922, i64* %RCX, align 8, !tbaa !2428
  %6923 = load i64, i64* %RSI
  %6924 = load i64, i64* %RCX
  %6925 = add i64 %6924, 20
  %6926 = load i64, i64* %PC
  %6927 = add i64 %6926, 4
  store i64 %6927, i64* %PC
  %6928 = inttoptr i64 %6925 to i32*
  %6929 = load i32, i32* %6928
  %6930 = shl i64 %6923, 32
  %6931 = ashr exact i64 %6930, 32
  %6932 = sext i32 %6929 to i64
  %6933 = mul nsw i64 %6932, %6931
  %6934 = trunc i64 %6933 to i32
  %6935 = and i64 %6933, 4294967295
  store i64 %6935, i64* %RSI, align 8, !tbaa !2428
  %6936 = shl i64 %6933, 32
  %6937 = ashr exact i64 %6936, 32
  %6938 = icmp ne i64 %6937, %6933
  %6939 = zext i1 %6938 to i8
  %6940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6939, i8* %6940, align 1, !tbaa !2432
  %6941 = and i32 %6934, 255
  %6942 = call i32 @llvm.ctpop.i32(i32 %6941) #16
  %6943 = trunc i32 %6942 to i8
  %6944 = and i8 %6943, 1
  %6945 = xor i8 %6944, 1
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6945, i8* %6946, align 1, !tbaa !2446
  %6947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6947, align 1, !tbaa !2447
  %6948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6948, align 1, !tbaa !2448
  %6949 = lshr i32 %6934, 31
  %6950 = trunc i32 %6949 to i8
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6950, i8* %6951, align 1, !tbaa !2449
  %6952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6939, i8* %6952, align 1, !tbaa !2450
  %6953 = load i64, i64* %RDX
  %6954 = load i32, i32* %ESI
  %6955 = zext i32 %6954 to i64
  %6956 = load i64, i64* %PC
  %6957 = add i64 %6956, 2
  store i64 %6957, i64* %PC
  %6958 = trunc i64 %6953 to i32
  %6959 = add i32 %6954, %6958
  %6960 = zext i32 %6959 to i64
  store i64 %6960, i64* %RDX, align 8, !tbaa !2428
  %6961 = icmp ult i32 %6959, %6958
  %6962 = icmp ult i32 %6959, %6954
  %6963 = or i1 %6961, %6962
  %6964 = zext i1 %6963 to i8
  %6965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6964, i8* %6965, align 1, !tbaa !2432
  %6966 = and i32 %6959, 255
  %6967 = call i32 @llvm.ctpop.i32(i32 %6966) #16
  %6968 = trunc i32 %6967 to i8
  %6969 = and i8 %6968, 1
  %6970 = xor i8 %6969, 1
  %6971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6970, i8* %6971, align 1, !tbaa !2446
  %6972 = xor i64 %6955, %6953
  %6973 = trunc i64 %6972 to i32
  %6974 = xor i32 %6973, %6959
  %6975 = lshr i32 %6974, 4
  %6976 = trunc i32 %6975 to i8
  %6977 = and i8 %6976, 1
  %6978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6977, i8* %6978, align 1, !tbaa !2447
  %6979 = icmp eq i32 %6959, 0
  %6980 = zext i1 %6979 to i8
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6980, i8* %6981, align 1, !tbaa !2448
  %6982 = lshr i32 %6959, 31
  %6983 = trunc i32 %6982 to i8
  %6984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6983, i8* %6984, align 1, !tbaa !2449
  %6985 = lshr i32 %6958, 31
  %6986 = lshr i32 %6954, 31
  %6987 = xor i32 %6982, %6985
  %6988 = xor i32 %6982, %6986
  %6989 = add nuw nsw i32 %6987, %6988
  %6990 = icmp eq i32 %6989, 2
  %6991 = zext i1 %6990 to i8
  %6992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6991, i8* %6992, align 1, !tbaa !2450
  %6993 = load i64, i64* %RBP
  %6994 = sub i64 %6993, 76
  %6995 = load i64, i64* %PC
  %6996 = add i64 %6995, 3
  store i64 %6996, i64* %PC
  %6997 = inttoptr i64 %6994 to i32*
  %6998 = load i32, i32* %6997
  %6999 = zext i32 %6998 to i64
  store i64 %6999, i64* %RSI, align 8, !tbaa !2428
  %7000 = load i64, i64* %RSI
  %7001 = load i64, i64* %PC
  %7002 = add i64 %7001, 3
  store i64 %7002, i64* %PC
  %7003 = trunc i64 %7000 to i32
  %7004 = add i32 1, %7003
  %7005 = zext i32 %7004 to i64
  store i64 %7005, i64* %RSI, align 8, !tbaa !2428
  %7006 = icmp ult i32 %7004, %7003
  %7007 = icmp ult i32 %7004, 1
  %7008 = or i1 %7006, %7007
  %7009 = zext i1 %7008 to i8
  %7010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7009, i8* %7010, align 1, !tbaa !2432
  %7011 = and i32 %7004, 255
  %7012 = call i32 @llvm.ctpop.i32(i32 %7011) #16
  %7013 = trunc i32 %7012 to i8
  %7014 = and i8 %7013, 1
  %7015 = xor i8 %7014, 1
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7015, i8* %7016, align 1, !tbaa !2446
  %7017 = xor i64 1, %7000
  %7018 = trunc i64 %7017 to i32
  %7019 = xor i32 %7018, %7004
  %7020 = lshr i32 %7019, 4
  %7021 = trunc i32 %7020 to i8
  %7022 = and i8 %7021, 1
  %7023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7022, i8* %7023, align 1, !tbaa !2447
  %7024 = icmp eq i32 %7004, 0
  %7025 = zext i1 %7024 to i8
  %7026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7025, i8* %7026, align 1, !tbaa !2448
  %7027 = lshr i32 %7004, 31
  %7028 = trunc i32 %7027 to i8
  %7029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7028, i8* %7029, align 1, !tbaa !2449
  %7030 = lshr i32 %7003, 31
  %7031 = xor i32 %7027, %7030
  %7032 = add nuw nsw i32 %7031, %7027
  %7033 = icmp eq i32 %7032, 2
  %7034 = zext i1 %7033 to i8
  %7035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7034, i8* %7035, align 1, !tbaa !2450
  %7036 = load i64, i64* %RDX
  %7037 = load i32, i32* %ESI
  %7038 = zext i32 %7037 to i64
  %7039 = load i64, i64* %PC
  %7040 = add i64 %7039, 2
  store i64 %7040, i64* %PC
  %7041 = trunc i64 %7036 to i32
  %7042 = add i32 %7037, %7041
  %7043 = zext i32 %7042 to i64
  store i64 %7043, i64* %RDX, align 8, !tbaa !2428
  %7044 = icmp ult i32 %7042, %7041
  %7045 = icmp ult i32 %7042, %7037
  %7046 = or i1 %7044, %7045
  %7047 = zext i1 %7046 to i8
  %7048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7047, i8* %7048, align 1, !tbaa !2432
  %7049 = and i32 %7042, 255
  %7050 = call i32 @llvm.ctpop.i32(i32 %7049) #16
  %7051 = trunc i32 %7050 to i8
  %7052 = and i8 %7051, 1
  %7053 = xor i8 %7052, 1
  %7054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7053, i8* %7054, align 1, !tbaa !2446
  %7055 = xor i64 %7038, %7036
  %7056 = trunc i64 %7055 to i32
  %7057 = xor i32 %7056, %7042
  %7058 = lshr i32 %7057, 4
  %7059 = trunc i32 %7058 to i8
  %7060 = and i8 %7059, 1
  %7061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7060, i8* %7061, align 1, !tbaa !2447
  %7062 = icmp eq i32 %7042, 0
  %7063 = zext i1 %7062 to i8
  %7064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7063, i8* %7064, align 1, !tbaa !2448
  %7065 = lshr i32 %7042, 31
  %7066 = trunc i32 %7065 to i8
  %7067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7066, i8* %7067, align 1, !tbaa !2449
  %7068 = lshr i32 %7041, 31
  %7069 = lshr i32 %7037, 31
  %7070 = xor i32 %7065, %7068
  %7071 = xor i32 %7065, %7069
  %7072 = add nuw nsw i32 %7070, %7071
  %7073 = icmp eq i32 %7072, 2
  %7074 = zext i1 %7073 to i8
  %7075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7074, i8* %7075, align 1, !tbaa !2450
  %7076 = load i32, i32* %EDX
  %7077 = zext i32 %7076 to i64
  %7078 = load i64, i64* %PC
  %7079 = add i64 %7078, 3
  store i64 %7079, i64* %PC
  %7080 = shl i64 %7077, 32
  %7081 = ashr exact i64 %7080, 32
  store i64 %7081, i64* %RCX, align 8, !tbaa !2428
  %7082 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7083 = load i64, i64* %RAX
  %7084 = load i64, i64* %RCX
  %7085 = mul i64 %7084, 4
  %7086 = add i64 %7085, %7083
  %7087 = load i64, i64* %PC
  %7088 = add i64 %7087, 5
  store i64 %7088, i64* %PC
  %7089 = inttoptr i64 %7086 to float*
  %7090 = load float, float* %7089
  %7091 = bitcast i8* %7082 to float*
  store float %7090, float* %7091, align 1, !tbaa !2452
  %7092 = getelementptr inbounds i8, i8* %7082, i64 4
  %7093 = bitcast i8* %7092 to float*
  store float 0.000000e+00, float* %7093, align 1, !tbaa !2452
  %7094 = getelementptr inbounds i8, i8* %7082, i64 8
  %7095 = bitcast i8* %7094 to float*
  store float 0.000000e+00, float* %7095, align 1, !tbaa !2452
  %7096 = getelementptr inbounds i8, i8* %7082, i64 12
  %7097 = bitcast i8* %7096 to float*
  store float 0.000000e+00, float* %7097, align 1, !tbaa !2452
  %7098 = load i64, i64* %RBP
  %7099 = sub i64 %7098, 40
  %7100 = load i64, i64* %PC
  %7101 = add i64 %7100, 4
  store i64 %7101, i64* %PC
  %7102 = inttoptr i64 %7099 to i64*
  %7103 = load i64, i64* %7102
  store i64 %7103, i64* %RAX, align 8, !tbaa !2428
  %7104 = load i64, i64* %RAX
  %7105 = load i64, i64* %PC
  %7106 = add i64 %7105, 3
  store i64 %7106, i64* %PC
  %7107 = inttoptr i64 %7104 to i64*
  %7108 = load i64, i64* %7107
  store i64 %7108, i64* %RAX, align 8, !tbaa !2428
  %7109 = load i64, i64* %RBP
  %7110 = sub i64 %7109, 40
  %7111 = load i64, i64* %PC
  %7112 = add i64 %7111, 4
  store i64 %7112, i64* %PC
  %7113 = inttoptr i64 %7110 to i64*
  %7114 = load i64, i64* %7113
  store i64 %7114, i64* %RCX, align 8, !tbaa !2428
  %7115 = load i64, i64* %RCX
  %7116 = add i64 %7115, 12
  %7117 = load i64, i64* %PC
  %7118 = add i64 %7117, 4
  store i64 %7118, i64* %PC
  %7119 = inttoptr i64 %7116 to i32*
  %7120 = load i32, i32* %7119
  %7121 = sext i32 %7120 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %7122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7122, align 1, !tbaa !2432
  %7123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7123, align 1, !tbaa !2446
  %7124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7124, align 1, !tbaa !2447
  %7125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7125, align 1, !tbaa !2448
  %7126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7126, align 1, !tbaa !2449
  %7127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7127, align 1, !tbaa !2450
  %7128 = load i64, i64* %RBP
  %7129 = sub i64 %7128, 40
  %7130 = load i64, i64* %PC
  %7131 = add i64 %7130, 4
  store i64 %7131, i64* %PC
  %7132 = inttoptr i64 %7129 to i64*
  %7133 = load i64, i64* %7132
  store i64 %7133, i64* %RCX, align 8, !tbaa !2428
  %7134 = load i64, i64* %RDX
  %7135 = load i64, i64* %RCX
  %7136 = add i64 %7135, 16
  %7137 = load i64, i64* %PC
  %7138 = add i64 %7137, 4
  store i64 %7138, i64* %PC
  %7139 = inttoptr i64 %7136 to i32*
  %7140 = load i32, i32* %7139
  %7141 = shl i64 %7134, 32
  %7142 = ashr exact i64 %7141, 32
  %7143 = sext i32 %7140 to i64
  %7144 = mul nsw i64 %7143, %7142
  %7145 = trunc i64 %7144 to i32
  %7146 = and i64 %7144, 4294967295
  store i64 %7146, i64* %RDX, align 8, !tbaa !2428
  %7147 = shl i64 %7144, 32
  %7148 = ashr exact i64 %7147, 32
  %7149 = icmp ne i64 %7148, %7144
  %7150 = zext i1 %7149 to i8
  %7151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7150, i8* %7151, align 1, !tbaa !2432
  %7152 = and i32 %7145, 255
  %7153 = call i32 @llvm.ctpop.i32(i32 %7152) #16
  %7154 = trunc i32 %7153 to i8
  %7155 = and i8 %7154, 1
  %7156 = xor i8 %7155, 1
  %7157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7156, i8* %7157, align 1, !tbaa !2446
  %7158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7158, align 1, !tbaa !2447
  %7159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7159, align 1, !tbaa !2448
  %7160 = lshr i32 %7145, 31
  %7161 = trunc i32 %7160 to i8
  %7162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7161, i8* %7162, align 1, !tbaa !2449
  %7163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7150, i8* %7163, align 1, !tbaa !2450
  %7164 = load i64, i64* %RBP
  %7165 = sub i64 %7164, 40
  %7166 = load i64, i64* %PC
  %7167 = add i64 %7166, 4
  store i64 %7167, i64* %PC
  %7168 = inttoptr i64 %7165 to i64*
  %7169 = load i64, i64* %7168
  store i64 %7169, i64* %RCX, align 8, !tbaa !2428
  %7170 = load i64, i64* %RDX
  %7171 = load i64, i64* %RCX
  %7172 = add i64 %7171, 20
  %7173 = load i64, i64* %PC
  %7174 = add i64 %7173, 4
  store i64 %7174, i64* %PC
  %7175 = inttoptr i64 %7172 to i32*
  %7176 = load i32, i32* %7175
  %7177 = shl i64 %7170, 32
  %7178 = ashr exact i64 %7177, 32
  %7179 = sext i32 %7176 to i64
  %7180 = mul nsw i64 %7179, %7178
  %7181 = trunc i64 %7180 to i32
  %7182 = and i64 %7180, 4294967295
  store i64 %7182, i64* %RDX, align 8, !tbaa !2428
  %7183 = shl i64 %7180, 32
  %7184 = ashr exact i64 %7183, 32
  %7185 = icmp ne i64 %7184, %7180
  %7186 = zext i1 %7185 to i8
  %7187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7186, i8* %7187, align 1, !tbaa !2432
  %7188 = and i32 %7181, 255
  %7189 = call i32 @llvm.ctpop.i32(i32 %7188) #16
  %7190 = trunc i32 %7189 to i8
  %7191 = and i8 %7190, 1
  %7192 = xor i8 %7191, 1
  %7193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7192, i8* %7193, align 1, !tbaa !2446
  %7194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7194, align 1, !tbaa !2447
  %7195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7195, align 1, !tbaa !2448
  %7196 = lshr i32 %7181, 31
  %7197 = trunc i32 %7196 to i8
  %7198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7197, i8* %7198, align 1, !tbaa !2449
  %7199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7186, i8* %7199, align 1, !tbaa !2450
  %7200 = load i64, i64* %RBP
  %7201 = sub i64 %7200, 68
  %7202 = load i64, i64* %PC
  %7203 = add i64 %7202, 3
  store i64 %7203, i64* %PC
  %7204 = inttoptr i64 %7201 to i32*
  %7205 = load i32, i32* %7204
  %7206 = zext i32 %7205 to i64
  store i64 %7206, i64* %RSI, align 8, !tbaa !2428
  %7207 = load i64, i64* %RBP
  %7208 = sub i64 %7207, 40
  %7209 = load i64, i64* %PC
  %7210 = add i64 %7209, 4
  store i64 %7210, i64* %PC
  %7211 = inttoptr i64 %7208 to i64*
  %7212 = load i64, i64* %7211
  store i64 %7212, i64* %RCX, align 8, !tbaa !2428
  %7213 = load i64, i64* %RSI
  %7214 = load i64, i64* %RCX
  %7215 = add i64 %7214, 16
  %7216 = load i64, i64* %PC
  %7217 = add i64 %7216, 4
  store i64 %7217, i64* %PC
  %7218 = inttoptr i64 %7215 to i32*
  %7219 = load i32, i32* %7218
  %7220 = shl i64 %7213, 32
  %7221 = ashr exact i64 %7220, 32
  %7222 = sext i32 %7219 to i64
  %7223 = mul nsw i64 %7222, %7221
  %7224 = trunc i64 %7223 to i32
  %7225 = and i64 %7223, 4294967295
  store i64 %7225, i64* %RSI, align 8, !tbaa !2428
  %7226 = shl i64 %7223, 32
  %7227 = ashr exact i64 %7226, 32
  %7228 = icmp ne i64 %7227, %7223
  %7229 = zext i1 %7228 to i8
  %7230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7229, i8* %7230, align 1, !tbaa !2432
  %7231 = and i32 %7224, 255
  %7232 = call i32 @llvm.ctpop.i32(i32 %7231) #16
  %7233 = trunc i32 %7232 to i8
  %7234 = and i8 %7233, 1
  %7235 = xor i8 %7234, 1
  %7236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7235, i8* %7236, align 1, !tbaa !2446
  %7237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7237, align 1, !tbaa !2447
  %7238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7238, align 1, !tbaa !2448
  %7239 = lshr i32 %7224, 31
  %7240 = trunc i32 %7239 to i8
  %7241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7240, i8* %7241, align 1, !tbaa !2449
  %7242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7229, i8* %7242, align 1, !tbaa !2450
  %7243 = load i64, i64* %RBP
  %7244 = sub i64 %7243, 40
  %7245 = load i64, i64* %PC
  %7246 = add i64 %7245, 4
  store i64 %7246, i64* %PC
  %7247 = inttoptr i64 %7244 to i64*
  %7248 = load i64, i64* %7247
  store i64 %7248, i64* %RCX, align 8, !tbaa !2428
  %7249 = load i64, i64* %RSI
  %7250 = load i64, i64* %RCX
  %7251 = add i64 %7250, 20
  %7252 = load i64, i64* %PC
  %7253 = add i64 %7252, 4
  store i64 %7253, i64* %PC
  %7254 = inttoptr i64 %7251 to i32*
  %7255 = load i32, i32* %7254
  %7256 = shl i64 %7249, 32
  %7257 = ashr exact i64 %7256, 32
  %7258 = sext i32 %7255 to i64
  %7259 = mul nsw i64 %7258, %7257
  %7260 = trunc i64 %7259 to i32
  %7261 = and i64 %7259, 4294967295
  store i64 %7261, i64* %RSI, align 8, !tbaa !2428
  %7262 = shl i64 %7259, 32
  %7263 = ashr exact i64 %7262, 32
  %7264 = icmp ne i64 %7263, %7259
  %7265 = zext i1 %7264 to i8
  %7266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7265, i8* %7266, align 1, !tbaa !2432
  %7267 = and i32 %7260, 255
  %7268 = call i32 @llvm.ctpop.i32(i32 %7267) #16
  %7269 = trunc i32 %7268 to i8
  %7270 = and i8 %7269, 1
  %7271 = xor i8 %7270, 1
  %7272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7271, i8* %7272, align 1, !tbaa !2446
  %7273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7273, align 1, !tbaa !2447
  %7274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7274, align 1, !tbaa !2448
  %7275 = lshr i32 %7260, 31
  %7276 = trunc i32 %7275 to i8
  %7277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7276, i8* %7277, align 1, !tbaa !2449
  %7278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7265, i8* %7278, align 1, !tbaa !2450
  %7279 = load i64, i64* %RDX
  %7280 = load i32, i32* %ESI
  %7281 = zext i32 %7280 to i64
  %7282 = load i64, i64* %PC
  %7283 = add i64 %7282, 2
  store i64 %7283, i64* %PC
  %7284 = trunc i64 %7279 to i32
  %7285 = add i32 %7280, %7284
  %7286 = zext i32 %7285 to i64
  store i64 %7286, i64* %RDX, align 8, !tbaa !2428
  %7287 = icmp ult i32 %7285, %7284
  %7288 = icmp ult i32 %7285, %7280
  %7289 = or i1 %7287, %7288
  %7290 = zext i1 %7289 to i8
  %7291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7290, i8* %7291, align 1, !tbaa !2432
  %7292 = and i32 %7285, 255
  %7293 = call i32 @llvm.ctpop.i32(i32 %7292) #16
  %7294 = trunc i32 %7293 to i8
  %7295 = and i8 %7294, 1
  %7296 = xor i8 %7295, 1
  %7297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7296, i8* %7297, align 1, !tbaa !2446
  %7298 = xor i64 %7281, %7279
  %7299 = trunc i64 %7298 to i32
  %7300 = xor i32 %7299, %7285
  %7301 = lshr i32 %7300, 4
  %7302 = trunc i32 %7301 to i8
  %7303 = and i8 %7302, 1
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7303, i8* %7304, align 1, !tbaa !2447
  %7305 = icmp eq i32 %7285, 0
  %7306 = zext i1 %7305 to i8
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7306, i8* %7307, align 1, !tbaa !2448
  %7308 = lshr i32 %7285, 31
  %7309 = trunc i32 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7309, i8* %7310, align 1, !tbaa !2449
  %7311 = lshr i32 %7284, 31
  %7312 = lshr i32 %7280, 31
  %7313 = xor i32 %7308, %7311
  %7314 = xor i32 %7308, %7312
  %7315 = add nuw nsw i32 %7313, %7314
  %7316 = icmp eq i32 %7315, 2
  %7317 = zext i1 %7316 to i8
  %7318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7317, i8* %7318, align 1, !tbaa !2450
  %7319 = load i64, i64* %RBP
  %7320 = sub i64 %7319, 72
  %7321 = load i64, i64* %PC
  %7322 = add i64 %7321, 3
  store i64 %7322, i64* %PC
  %7323 = inttoptr i64 %7320 to i32*
  %7324 = load i32, i32* %7323
  %7325 = zext i32 %7324 to i64
  store i64 %7325, i64* %RSI, align 8, !tbaa !2428
  %7326 = load i64, i64* %RSI
  %7327 = load i64, i64* %PC
  %7328 = add i64 %7327, 3
  store i64 %7328, i64* %PC
  %7329 = trunc i64 %7326 to i32
  %7330 = sub i32 %7329, 1
  %7331 = zext i32 %7330 to i64
  store i64 %7331, i64* %RSI, align 8, !tbaa !2428
  %7332 = icmp ult i32 %7329, 1
  %7333 = zext i1 %7332 to i8
  %7334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7333, i8* %7334, align 1, !tbaa !2432
  %7335 = and i32 %7330, 255
  %7336 = call i32 @llvm.ctpop.i32(i32 %7335) #16
  %7337 = trunc i32 %7336 to i8
  %7338 = and i8 %7337, 1
  %7339 = xor i8 %7338, 1
  %7340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7339, i8* %7340, align 1, !tbaa !2446
  %7341 = xor i64 1, %7326
  %7342 = trunc i64 %7341 to i32
  %7343 = xor i32 %7342, %7330
  %7344 = lshr i32 %7343, 4
  %7345 = trunc i32 %7344 to i8
  %7346 = and i8 %7345, 1
  %7347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7346, i8* %7347, align 1, !tbaa !2447
  %7348 = icmp eq i32 %7330, 0
  %7349 = zext i1 %7348 to i8
  %7350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7349, i8* %7350, align 1, !tbaa !2448
  %7351 = lshr i32 %7330, 31
  %7352 = trunc i32 %7351 to i8
  %7353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7352, i8* %7353, align 1, !tbaa !2449
  %7354 = lshr i32 %7329, 31
  %7355 = xor i32 %7351, %7354
  %7356 = add nuw nsw i32 %7355, %7354
  %7357 = icmp eq i32 %7356, 2
  %7358 = zext i1 %7357 to i8
  %7359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7358, i8* %7359, align 1, !tbaa !2450
  %7360 = load i64, i64* %RBP
  %7361 = sub i64 %7360, 40
  %7362 = load i64, i64* %PC
  %7363 = add i64 %7362, 4
  store i64 %7363, i64* %PC
  %7364 = inttoptr i64 %7361 to i64*
  %7365 = load i64, i64* %7364
  store i64 %7365, i64* %RCX, align 8, !tbaa !2428
  %7366 = load i64, i64* %RSI
  %7367 = load i64, i64* %RCX
  %7368 = add i64 %7367, 20
  %7369 = load i64, i64* %PC
  %7370 = add i64 %7369, 4
  store i64 %7370, i64* %PC
  %7371 = inttoptr i64 %7368 to i32*
  %7372 = load i32, i32* %7371
  %7373 = shl i64 %7366, 32
  %7374 = ashr exact i64 %7373, 32
  %7375 = sext i32 %7372 to i64
  %7376 = mul nsw i64 %7375, %7374
  %7377 = trunc i64 %7376 to i32
  %7378 = and i64 %7376, 4294967295
  store i64 %7378, i64* %RSI, align 8, !tbaa !2428
  %7379 = shl i64 %7376, 32
  %7380 = ashr exact i64 %7379, 32
  %7381 = icmp ne i64 %7380, %7376
  %7382 = zext i1 %7381 to i8
  %7383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7382, i8* %7383, align 1, !tbaa !2432
  %7384 = and i32 %7377, 255
  %7385 = call i32 @llvm.ctpop.i32(i32 %7384) #16
  %7386 = trunc i32 %7385 to i8
  %7387 = and i8 %7386, 1
  %7388 = xor i8 %7387, 1
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7388, i8* %7389, align 1, !tbaa !2446
  %7390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7390, align 1, !tbaa !2447
  %7391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7391, align 1, !tbaa !2448
  %7392 = lshr i32 %7377, 31
  %7393 = trunc i32 %7392 to i8
  %7394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7393, i8* %7394, align 1, !tbaa !2449
  %7395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7382, i8* %7395, align 1, !tbaa !2450
  %7396 = load i64, i64* %RDX
  %7397 = load i32, i32* %ESI
  %7398 = zext i32 %7397 to i64
  %7399 = load i64, i64* %PC
  %7400 = add i64 %7399, 2
  store i64 %7400, i64* %PC
  %7401 = trunc i64 %7396 to i32
  %7402 = add i32 %7397, %7401
  %7403 = zext i32 %7402 to i64
  store i64 %7403, i64* %RDX, align 8, !tbaa !2428
  %7404 = icmp ult i32 %7402, %7401
  %7405 = icmp ult i32 %7402, %7397
  %7406 = or i1 %7404, %7405
  %7407 = zext i1 %7406 to i8
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7407, i8* %7408, align 1, !tbaa !2432
  %7409 = and i32 %7402, 255
  %7410 = call i32 @llvm.ctpop.i32(i32 %7409) #16
  %7411 = trunc i32 %7410 to i8
  %7412 = and i8 %7411, 1
  %7413 = xor i8 %7412, 1
  %7414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7413, i8* %7414, align 1, !tbaa !2446
  %7415 = xor i64 %7398, %7396
  %7416 = trunc i64 %7415 to i32
  %7417 = xor i32 %7416, %7402
  %7418 = lshr i32 %7417, 4
  %7419 = trunc i32 %7418 to i8
  %7420 = and i8 %7419, 1
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7420, i8* %7421, align 1, !tbaa !2447
  %7422 = icmp eq i32 %7402, 0
  %7423 = zext i1 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7423, i8* %7424, align 1, !tbaa !2448
  %7425 = lshr i32 %7402, 31
  %7426 = trunc i32 %7425 to i8
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7426, i8* %7427, align 1, !tbaa !2449
  %7428 = lshr i32 %7401, 31
  %7429 = lshr i32 %7397, 31
  %7430 = xor i32 %7425, %7428
  %7431 = xor i32 %7425, %7429
  %7432 = add nuw nsw i32 %7430, %7431
  %7433 = icmp eq i32 %7432, 2
  %7434 = zext i1 %7433 to i8
  %7435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7434, i8* %7435, align 1, !tbaa !2450
  %7436 = load i64, i64* %RBP
  %7437 = sub i64 %7436, 76
  %7438 = load i64, i64* %PC
  %7439 = add i64 %7438, 3
  store i64 %7439, i64* %PC
  %7440 = inttoptr i64 %7437 to i32*
  %7441 = load i32, i32* %7440
  %7442 = zext i32 %7441 to i64
  store i64 %7442, i64* %RSI, align 8, !tbaa !2428
  %7443 = load i64, i64* %RSI
  %7444 = load i64, i64* %PC
  %7445 = add i64 %7444, 3
  store i64 %7445, i64* %PC
  %7446 = trunc i64 %7443 to i32
  %7447 = add i32 1, %7446
  %7448 = zext i32 %7447 to i64
  store i64 %7448, i64* %RSI, align 8, !tbaa !2428
  %7449 = icmp ult i32 %7447, %7446
  %7450 = icmp ult i32 %7447, 1
  %7451 = or i1 %7449, %7450
  %7452 = zext i1 %7451 to i8
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7452, i8* %7453, align 1, !tbaa !2432
  %7454 = and i32 %7447, 255
  %7455 = call i32 @llvm.ctpop.i32(i32 %7454) #16
  %7456 = trunc i32 %7455 to i8
  %7457 = and i8 %7456, 1
  %7458 = xor i8 %7457, 1
  %7459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7458, i8* %7459, align 1, !tbaa !2446
  %7460 = xor i64 1, %7443
  %7461 = trunc i64 %7460 to i32
  %7462 = xor i32 %7461, %7447
  %7463 = lshr i32 %7462, 4
  %7464 = trunc i32 %7463 to i8
  %7465 = and i8 %7464, 1
  %7466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7465, i8* %7466, align 1, !tbaa !2447
  %7467 = icmp eq i32 %7447, 0
  %7468 = zext i1 %7467 to i8
  %7469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7468, i8* %7469, align 1, !tbaa !2448
  %7470 = lshr i32 %7447, 31
  %7471 = trunc i32 %7470 to i8
  %7472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7471, i8* %7472, align 1, !tbaa !2449
  %7473 = lshr i32 %7446, 31
  %7474 = xor i32 %7470, %7473
  %7475 = add nuw nsw i32 %7474, %7470
  %7476 = icmp eq i32 %7475, 2
  %7477 = zext i1 %7476 to i8
  %7478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7477, i8* %7478, align 1, !tbaa !2450
  %7479 = load i64, i64* %RDX
  %7480 = load i32, i32* %ESI
  %7481 = zext i32 %7480 to i64
  %7482 = load i64, i64* %PC
  %7483 = add i64 %7482, 2
  store i64 %7483, i64* %PC
  %7484 = trunc i64 %7479 to i32
  %7485 = add i32 %7480, %7484
  %7486 = zext i32 %7485 to i64
  store i64 %7486, i64* %RDX, align 8, !tbaa !2428
  %7487 = icmp ult i32 %7485, %7484
  %7488 = icmp ult i32 %7485, %7480
  %7489 = or i1 %7487, %7488
  %7490 = zext i1 %7489 to i8
  %7491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7490, i8* %7491, align 1, !tbaa !2432
  %7492 = and i32 %7485, 255
  %7493 = call i32 @llvm.ctpop.i32(i32 %7492) #16
  %7494 = trunc i32 %7493 to i8
  %7495 = and i8 %7494, 1
  %7496 = xor i8 %7495, 1
  %7497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7496, i8* %7497, align 1, !tbaa !2446
  %7498 = xor i64 %7481, %7479
  %7499 = trunc i64 %7498 to i32
  %7500 = xor i32 %7499, %7485
  %7501 = lshr i32 %7500, 4
  %7502 = trunc i32 %7501 to i8
  %7503 = and i8 %7502, 1
  %7504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7503, i8* %7504, align 1, !tbaa !2447
  %7505 = icmp eq i32 %7485, 0
  %7506 = zext i1 %7505 to i8
  %7507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7506, i8* %7507, align 1, !tbaa !2448
  %7508 = lshr i32 %7485, 31
  %7509 = trunc i32 %7508 to i8
  %7510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7509, i8* %7510, align 1, !tbaa !2449
  %7511 = lshr i32 %7484, 31
  %7512 = lshr i32 %7480, 31
  %7513 = xor i32 %7508, %7511
  %7514 = xor i32 %7508, %7512
  %7515 = add nuw nsw i32 %7513, %7514
  %7516 = icmp eq i32 %7515, 2
  %7517 = zext i1 %7516 to i8
  %7518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7517, i8* %7518, align 1, !tbaa !2450
  %7519 = load i32, i32* %EDX
  %7520 = zext i32 %7519 to i64
  %7521 = load i64, i64* %PC
  %7522 = add i64 %7521, 3
  store i64 %7522, i64* %PC
  %7523 = shl i64 %7520, 32
  %7524 = ashr exact i64 %7523, 32
  store i64 %7524, i64* %RCX, align 8, !tbaa !2428
  %7525 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7526 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7527 = load i64, i64* %RAX
  %7528 = load i64, i64* %RCX
  %7529 = mul i64 %7528, 4
  %7530 = add i64 %7529, %7527
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 5
  store i64 %7532, i64* %PC
  %7533 = bitcast i8* %7526 to <2 x float>*
  %7534 = load <2 x float>, <2 x float>* %7533, align 1
  %7535 = getelementptr inbounds i8, i8* %7526, i64 8
  %7536 = bitcast i8* %7535 to <2 x i32>*
  %7537 = load <2 x i32>, <2 x i32>* %7536, align 1
  %7538 = inttoptr i64 %7530 to float*
  %7539 = load float, float* %7538
  %7540 = extractelement <2 x float> %7534, i32 0
  %7541 = fsub float %7540, %7539
  %7542 = bitcast i8* %7525 to float*
  store float %7541, float* %7542, align 1, !tbaa !2452
  %7543 = bitcast <2 x float> %7534 to <2 x i32>
  %7544 = extractelement <2 x i32> %7543, i32 1
  %7545 = getelementptr inbounds i8, i8* %7525, i64 4
  %7546 = bitcast i8* %7545 to i32*
  store i32 %7544, i32* %7546, align 1, !tbaa !2452
  %7547 = extractelement <2 x i32> %7537, i32 0
  %7548 = getelementptr inbounds i8, i8* %7525, i64 8
  %7549 = bitcast i8* %7548 to i32*
  store i32 %7547, i32* %7549, align 1, !tbaa !2452
  %7550 = extractelement <2 x i32> %7537, i32 1
  %7551 = getelementptr inbounds i8, i8* %7525, i64 12
  %7552 = bitcast i8* %7551 to i32*
  store i32 %7550, i32* %7552, align 1, !tbaa !2452
  %7553 = load i64, i64* %RBP
  %7554 = sub i64 %7553, 40
  %7555 = load i64, i64* %PC
  %7556 = add i64 %7555, 4
  store i64 %7556, i64* %PC
  %7557 = inttoptr i64 %7554 to i64*
  %7558 = load i64, i64* %7557
  store i64 %7558, i64* %RAX, align 8, !tbaa !2428
  %7559 = load i64, i64* %RAX
  %7560 = load i64, i64* %PC
  %7561 = add i64 %7560, 3
  store i64 %7561, i64* %PC
  %7562 = inttoptr i64 %7559 to i64*
  %7563 = load i64, i64* %7562
  store i64 %7563, i64* %RAX, align 8, !tbaa !2428
  %7564 = load i64, i64* %RBP
  %7565 = sub i64 %7564, 40
  %7566 = load i64, i64* %PC
  %7567 = add i64 %7566, 4
  store i64 %7567, i64* %PC
  %7568 = inttoptr i64 %7565 to i64*
  %7569 = load i64, i64* %7568
  store i64 %7569, i64* %RCX, align 8, !tbaa !2428
  %7570 = load i64, i64* %RCX
  %7571 = add i64 %7570, 12
  %7572 = load i64, i64* %PC
  %7573 = add i64 %7572, 4
  store i64 %7573, i64* %PC
  %7574 = inttoptr i64 %7571 to i32*
  %7575 = load i32, i32* %7574
  %7576 = sext i32 %7575 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %7577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7577, align 1, !tbaa !2432
  %7578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7578, align 1, !tbaa !2446
  %7579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7579, align 1, !tbaa !2447
  %7580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7580, align 1, !tbaa !2448
  %7581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7581, align 1, !tbaa !2449
  %7582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7582, align 1, !tbaa !2450
  %7583 = load i64, i64* %RBP
  %7584 = sub i64 %7583, 40
  %7585 = load i64, i64* %PC
  %7586 = add i64 %7585, 4
  store i64 %7586, i64* %PC
  %7587 = inttoptr i64 %7584 to i64*
  %7588 = load i64, i64* %7587
  store i64 %7588, i64* %RCX, align 8, !tbaa !2428
  %7589 = load i64, i64* %RDX
  %7590 = load i64, i64* %RCX
  %7591 = add i64 %7590, 16
  %7592 = load i64, i64* %PC
  %7593 = add i64 %7592, 4
  store i64 %7593, i64* %PC
  %7594 = inttoptr i64 %7591 to i32*
  %7595 = load i32, i32* %7594
  %7596 = shl i64 %7589, 32
  %7597 = ashr exact i64 %7596, 32
  %7598 = sext i32 %7595 to i64
  %7599 = mul nsw i64 %7598, %7597
  %7600 = trunc i64 %7599 to i32
  %7601 = and i64 %7599, 4294967295
  store i64 %7601, i64* %RDX, align 8, !tbaa !2428
  %7602 = shl i64 %7599, 32
  %7603 = ashr exact i64 %7602, 32
  %7604 = icmp ne i64 %7603, %7599
  %7605 = zext i1 %7604 to i8
  %7606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7605, i8* %7606, align 1, !tbaa !2432
  %7607 = and i32 %7600, 255
  %7608 = call i32 @llvm.ctpop.i32(i32 %7607) #16
  %7609 = trunc i32 %7608 to i8
  %7610 = and i8 %7609, 1
  %7611 = xor i8 %7610, 1
  %7612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7611, i8* %7612, align 1, !tbaa !2446
  %7613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7613, align 1, !tbaa !2447
  %7614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7614, align 1, !tbaa !2448
  %7615 = lshr i32 %7600, 31
  %7616 = trunc i32 %7615 to i8
  %7617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7616, i8* %7617, align 1, !tbaa !2449
  %7618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7605, i8* %7618, align 1, !tbaa !2450
  %7619 = load i64, i64* %RBP
  %7620 = sub i64 %7619, 40
  %7621 = load i64, i64* %PC
  %7622 = add i64 %7621, 4
  store i64 %7622, i64* %PC
  %7623 = inttoptr i64 %7620 to i64*
  %7624 = load i64, i64* %7623
  store i64 %7624, i64* %RCX, align 8, !tbaa !2428
  %7625 = load i64, i64* %RDX
  %7626 = load i64, i64* %RCX
  %7627 = add i64 %7626, 20
  %7628 = load i64, i64* %PC
  %7629 = add i64 %7628, 4
  store i64 %7629, i64* %PC
  %7630 = inttoptr i64 %7627 to i32*
  %7631 = load i32, i32* %7630
  %7632 = shl i64 %7625, 32
  %7633 = ashr exact i64 %7632, 32
  %7634 = sext i32 %7631 to i64
  %7635 = mul nsw i64 %7634, %7633
  %7636 = trunc i64 %7635 to i32
  %7637 = and i64 %7635, 4294967295
  store i64 %7637, i64* %RDX, align 8, !tbaa !2428
  %7638 = shl i64 %7635, 32
  %7639 = ashr exact i64 %7638, 32
  %7640 = icmp ne i64 %7639, %7635
  %7641 = zext i1 %7640 to i8
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7641, i8* %7642, align 1, !tbaa !2432
  %7643 = and i32 %7636, 255
  %7644 = call i32 @llvm.ctpop.i32(i32 %7643) #16
  %7645 = trunc i32 %7644 to i8
  %7646 = and i8 %7645, 1
  %7647 = xor i8 %7646, 1
  %7648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7647, i8* %7648, align 1, !tbaa !2446
  %7649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7649, align 1, !tbaa !2447
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7650, align 1, !tbaa !2448
  %7651 = lshr i32 %7636, 31
  %7652 = trunc i32 %7651 to i8
  %7653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7652, i8* %7653, align 1, !tbaa !2449
  %7654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7641, i8* %7654, align 1, !tbaa !2450
  %7655 = load i64, i64* %RBP
  %7656 = sub i64 %7655, 68
  %7657 = load i64, i64* %PC
  %7658 = add i64 %7657, 3
  store i64 %7658, i64* %PC
  %7659 = inttoptr i64 %7656 to i32*
  %7660 = load i32, i32* %7659
  %7661 = zext i32 %7660 to i64
  store i64 %7661, i64* %RSI, align 8, !tbaa !2428
  %7662 = load i64, i64* %RBP
  %7663 = sub i64 %7662, 40
  %7664 = load i64, i64* %PC
  %7665 = add i64 %7664, 4
  store i64 %7665, i64* %PC
  %7666 = inttoptr i64 %7663 to i64*
  %7667 = load i64, i64* %7666
  store i64 %7667, i64* %RCX, align 8, !tbaa !2428
  %7668 = load i64, i64* %RSI
  %7669 = load i64, i64* %RCX
  %7670 = add i64 %7669, 16
  %7671 = load i64, i64* %PC
  %7672 = add i64 %7671, 4
  store i64 %7672, i64* %PC
  %7673 = inttoptr i64 %7670 to i32*
  %7674 = load i32, i32* %7673
  %7675 = shl i64 %7668, 32
  %7676 = ashr exact i64 %7675, 32
  %7677 = sext i32 %7674 to i64
  %7678 = mul nsw i64 %7677, %7676
  %7679 = trunc i64 %7678 to i32
  %7680 = and i64 %7678, 4294967295
  store i64 %7680, i64* %RSI, align 8, !tbaa !2428
  %7681 = shl i64 %7678, 32
  %7682 = ashr exact i64 %7681, 32
  %7683 = icmp ne i64 %7682, %7678
  %7684 = zext i1 %7683 to i8
  %7685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7684, i8* %7685, align 1, !tbaa !2432
  %7686 = and i32 %7679, 255
  %7687 = call i32 @llvm.ctpop.i32(i32 %7686) #16
  %7688 = trunc i32 %7687 to i8
  %7689 = and i8 %7688, 1
  %7690 = xor i8 %7689, 1
  %7691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7690, i8* %7691, align 1, !tbaa !2446
  %7692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7692, align 1, !tbaa !2447
  %7693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7693, align 1, !tbaa !2448
  %7694 = lshr i32 %7679, 31
  %7695 = trunc i32 %7694 to i8
  %7696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7695, i8* %7696, align 1, !tbaa !2449
  %7697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7684, i8* %7697, align 1, !tbaa !2450
  %7698 = load i64, i64* %RBP
  %7699 = sub i64 %7698, 40
  %7700 = load i64, i64* %PC
  %7701 = add i64 %7700, 4
  store i64 %7701, i64* %PC
  %7702 = inttoptr i64 %7699 to i64*
  %7703 = load i64, i64* %7702
  store i64 %7703, i64* %RCX, align 8, !tbaa !2428
  %7704 = load i64, i64* %RSI
  %7705 = load i64, i64* %RCX
  %7706 = add i64 %7705, 20
  %7707 = load i64, i64* %PC
  %7708 = add i64 %7707, 4
  store i64 %7708, i64* %PC
  %7709 = inttoptr i64 %7706 to i32*
  %7710 = load i32, i32* %7709
  %7711 = shl i64 %7704, 32
  %7712 = ashr exact i64 %7711, 32
  %7713 = sext i32 %7710 to i64
  %7714 = mul nsw i64 %7713, %7712
  %7715 = trunc i64 %7714 to i32
  %7716 = and i64 %7714, 4294967295
  store i64 %7716, i64* %RSI, align 8, !tbaa !2428
  %7717 = shl i64 %7714, 32
  %7718 = ashr exact i64 %7717, 32
  %7719 = icmp ne i64 %7718, %7714
  %7720 = zext i1 %7719 to i8
  %7721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7720, i8* %7721, align 1, !tbaa !2432
  %7722 = and i32 %7715, 255
  %7723 = call i32 @llvm.ctpop.i32(i32 %7722) #16
  %7724 = trunc i32 %7723 to i8
  %7725 = and i8 %7724, 1
  %7726 = xor i8 %7725, 1
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7726, i8* %7727, align 1, !tbaa !2446
  %7728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7728, align 1, !tbaa !2447
  %7729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7729, align 1, !tbaa !2448
  %7730 = lshr i32 %7715, 31
  %7731 = trunc i32 %7730 to i8
  %7732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7731, i8* %7732, align 1, !tbaa !2449
  %7733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7720, i8* %7733, align 1, !tbaa !2450
  %7734 = load i64, i64* %RDX
  %7735 = load i32, i32* %ESI
  %7736 = zext i32 %7735 to i64
  %7737 = load i64, i64* %PC
  %7738 = add i64 %7737, 2
  store i64 %7738, i64* %PC
  %7739 = trunc i64 %7734 to i32
  %7740 = add i32 %7735, %7739
  %7741 = zext i32 %7740 to i64
  store i64 %7741, i64* %RDX, align 8, !tbaa !2428
  %7742 = icmp ult i32 %7740, %7739
  %7743 = icmp ult i32 %7740, %7735
  %7744 = or i1 %7742, %7743
  %7745 = zext i1 %7744 to i8
  %7746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7745, i8* %7746, align 1, !tbaa !2432
  %7747 = and i32 %7740, 255
  %7748 = call i32 @llvm.ctpop.i32(i32 %7747) #16
  %7749 = trunc i32 %7748 to i8
  %7750 = and i8 %7749, 1
  %7751 = xor i8 %7750, 1
  %7752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7751, i8* %7752, align 1, !tbaa !2446
  %7753 = xor i64 %7736, %7734
  %7754 = trunc i64 %7753 to i32
  %7755 = xor i32 %7754, %7740
  %7756 = lshr i32 %7755, 4
  %7757 = trunc i32 %7756 to i8
  %7758 = and i8 %7757, 1
  %7759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7758, i8* %7759, align 1, !tbaa !2447
  %7760 = icmp eq i32 %7740, 0
  %7761 = zext i1 %7760 to i8
  %7762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7761, i8* %7762, align 1, !tbaa !2448
  %7763 = lshr i32 %7740, 31
  %7764 = trunc i32 %7763 to i8
  %7765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7764, i8* %7765, align 1, !tbaa !2449
  %7766 = lshr i32 %7739, 31
  %7767 = lshr i32 %7735, 31
  %7768 = xor i32 %7763, %7766
  %7769 = xor i32 %7763, %7767
  %7770 = add nuw nsw i32 %7768, %7769
  %7771 = icmp eq i32 %7770, 2
  %7772 = zext i1 %7771 to i8
  %7773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7772, i8* %7773, align 1, !tbaa !2450
  %7774 = load i64, i64* %RBP
  %7775 = sub i64 %7774, 72
  %7776 = load i64, i64* %PC
  %7777 = add i64 %7776, 3
  store i64 %7777, i64* %PC
  %7778 = inttoptr i64 %7775 to i32*
  %7779 = load i32, i32* %7778
  %7780 = zext i32 %7779 to i64
  store i64 %7780, i64* %RSI, align 8, !tbaa !2428
  %7781 = load i64, i64* %RSI
  %7782 = load i64, i64* %PC
  %7783 = add i64 %7782, 3
  store i64 %7783, i64* %PC
  %7784 = trunc i64 %7781 to i32
  %7785 = add i32 1, %7784
  %7786 = zext i32 %7785 to i64
  store i64 %7786, i64* %RSI, align 8, !tbaa !2428
  %7787 = icmp ult i32 %7785, %7784
  %7788 = icmp ult i32 %7785, 1
  %7789 = or i1 %7787, %7788
  %7790 = zext i1 %7789 to i8
  %7791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7790, i8* %7791, align 1, !tbaa !2432
  %7792 = and i32 %7785, 255
  %7793 = call i32 @llvm.ctpop.i32(i32 %7792) #16
  %7794 = trunc i32 %7793 to i8
  %7795 = and i8 %7794, 1
  %7796 = xor i8 %7795, 1
  %7797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7796, i8* %7797, align 1, !tbaa !2446
  %7798 = xor i64 1, %7781
  %7799 = trunc i64 %7798 to i32
  %7800 = xor i32 %7799, %7785
  %7801 = lshr i32 %7800, 4
  %7802 = trunc i32 %7801 to i8
  %7803 = and i8 %7802, 1
  %7804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7803, i8* %7804, align 1, !tbaa !2447
  %7805 = icmp eq i32 %7785, 0
  %7806 = zext i1 %7805 to i8
  %7807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7806, i8* %7807, align 1, !tbaa !2448
  %7808 = lshr i32 %7785, 31
  %7809 = trunc i32 %7808 to i8
  %7810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7809, i8* %7810, align 1, !tbaa !2449
  %7811 = lshr i32 %7784, 31
  %7812 = xor i32 %7808, %7811
  %7813 = add nuw nsw i32 %7812, %7808
  %7814 = icmp eq i32 %7813, 2
  %7815 = zext i1 %7814 to i8
  %7816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7815, i8* %7816, align 1, !tbaa !2450
  %7817 = load i64, i64* %RBP
  %7818 = sub i64 %7817, 40
  %7819 = load i64, i64* %PC
  %7820 = add i64 %7819, 4
  store i64 %7820, i64* %PC
  %7821 = inttoptr i64 %7818 to i64*
  %7822 = load i64, i64* %7821
  store i64 %7822, i64* %RCX, align 8, !tbaa !2428
  %7823 = load i64, i64* %RSI
  %7824 = load i64, i64* %RCX
  %7825 = add i64 %7824, 20
  %7826 = load i64, i64* %PC
  %7827 = add i64 %7826, 4
  store i64 %7827, i64* %PC
  %7828 = inttoptr i64 %7825 to i32*
  %7829 = load i32, i32* %7828
  %7830 = shl i64 %7823, 32
  %7831 = ashr exact i64 %7830, 32
  %7832 = sext i32 %7829 to i64
  %7833 = mul nsw i64 %7832, %7831
  %7834 = trunc i64 %7833 to i32
  %7835 = and i64 %7833, 4294967295
  store i64 %7835, i64* %RSI, align 8, !tbaa !2428
  %7836 = shl i64 %7833, 32
  %7837 = ashr exact i64 %7836, 32
  %7838 = icmp ne i64 %7837, %7833
  %7839 = zext i1 %7838 to i8
  %7840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7839, i8* %7840, align 1, !tbaa !2432
  %7841 = and i32 %7834, 255
  %7842 = call i32 @llvm.ctpop.i32(i32 %7841) #16
  %7843 = trunc i32 %7842 to i8
  %7844 = and i8 %7843, 1
  %7845 = xor i8 %7844, 1
  %7846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7845, i8* %7846, align 1, !tbaa !2446
  %7847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7847, align 1, !tbaa !2447
  %7848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7848, align 1, !tbaa !2448
  %7849 = lshr i32 %7834, 31
  %7850 = trunc i32 %7849 to i8
  %7851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7850, i8* %7851, align 1, !tbaa !2449
  %7852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7839, i8* %7852, align 1, !tbaa !2450
  %7853 = load i64, i64* %RDX
  %7854 = load i32, i32* %ESI
  %7855 = zext i32 %7854 to i64
  %7856 = load i64, i64* %PC
  %7857 = add i64 %7856, 2
  store i64 %7857, i64* %PC
  %7858 = trunc i64 %7853 to i32
  %7859 = add i32 %7854, %7858
  %7860 = zext i32 %7859 to i64
  store i64 %7860, i64* %RDX, align 8, !tbaa !2428
  %7861 = icmp ult i32 %7859, %7858
  %7862 = icmp ult i32 %7859, %7854
  %7863 = or i1 %7861, %7862
  %7864 = zext i1 %7863 to i8
  %7865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7864, i8* %7865, align 1, !tbaa !2432
  %7866 = and i32 %7859, 255
  %7867 = call i32 @llvm.ctpop.i32(i32 %7866) #16
  %7868 = trunc i32 %7867 to i8
  %7869 = and i8 %7868, 1
  %7870 = xor i8 %7869, 1
  %7871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7870, i8* %7871, align 1, !tbaa !2446
  %7872 = xor i64 %7855, %7853
  %7873 = trunc i64 %7872 to i32
  %7874 = xor i32 %7873, %7859
  %7875 = lshr i32 %7874, 4
  %7876 = trunc i32 %7875 to i8
  %7877 = and i8 %7876, 1
  %7878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7877, i8* %7878, align 1, !tbaa !2447
  %7879 = icmp eq i32 %7859, 0
  %7880 = zext i1 %7879 to i8
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7880, i8* %7881, align 1, !tbaa !2448
  %7882 = lshr i32 %7859, 31
  %7883 = trunc i32 %7882 to i8
  %7884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7883, i8* %7884, align 1, !tbaa !2449
  %7885 = lshr i32 %7858, 31
  %7886 = lshr i32 %7854, 31
  %7887 = xor i32 %7882, %7885
  %7888 = xor i32 %7882, %7886
  %7889 = add nuw nsw i32 %7887, %7888
  %7890 = icmp eq i32 %7889, 2
  %7891 = zext i1 %7890 to i8
  %7892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7891, i8* %7892, align 1, !tbaa !2450
  %7893 = load i64, i64* %RBP
  %7894 = sub i64 %7893, 76
  %7895 = load i64, i64* %PC
  %7896 = add i64 %7895, 3
  store i64 %7896, i64* %PC
  %7897 = inttoptr i64 %7894 to i32*
  %7898 = load i32, i32* %7897
  %7899 = zext i32 %7898 to i64
  store i64 %7899, i64* %RSI, align 8, !tbaa !2428
  %7900 = load i64, i64* %RSI
  %7901 = load i64, i64* %PC
  %7902 = add i64 %7901, 3
  store i64 %7902, i64* %PC
  %7903 = trunc i64 %7900 to i32
  %7904 = sub i32 %7903, 1
  %7905 = zext i32 %7904 to i64
  store i64 %7905, i64* %RSI, align 8, !tbaa !2428
  %7906 = icmp ult i32 %7903, 1
  %7907 = zext i1 %7906 to i8
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7907, i8* %7908, align 1, !tbaa !2432
  %7909 = and i32 %7904, 255
  %7910 = call i32 @llvm.ctpop.i32(i32 %7909) #16
  %7911 = trunc i32 %7910 to i8
  %7912 = and i8 %7911, 1
  %7913 = xor i8 %7912, 1
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7913, i8* %7914, align 1, !tbaa !2446
  %7915 = xor i64 1, %7900
  %7916 = trunc i64 %7915 to i32
  %7917 = xor i32 %7916, %7904
  %7918 = lshr i32 %7917, 4
  %7919 = trunc i32 %7918 to i8
  %7920 = and i8 %7919, 1
  %7921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7920, i8* %7921, align 1, !tbaa !2447
  %7922 = icmp eq i32 %7904, 0
  %7923 = zext i1 %7922 to i8
  %7924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7923, i8* %7924, align 1, !tbaa !2448
  %7925 = lshr i32 %7904, 31
  %7926 = trunc i32 %7925 to i8
  %7927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7926, i8* %7927, align 1, !tbaa !2449
  %7928 = lshr i32 %7903, 31
  %7929 = xor i32 %7925, %7928
  %7930 = add nuw nsw i32 %7929, %7928
  %7931 = icmp eq i32 %7930, 2
  %7932 = zext i1 %7931 to i8
  %7933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7932, i8* %7933, align 1, !tbaa !2450
  %7934 = load i64, i64* %RDX
  %7935 = load i32, i32* %ESI
  %7936 = zext i32 %7935 to i64
  %7937 = load i64, i64* %PC
  %7938 = add i64 %7937, 2
  store i64 %7938, i64* %PC
  %7939 = trunc i64 %7934 to i32
  %7940 = add i32 %7935, %7939
  %7941 = zext i32 %7940 to i64
  store i64 %7941, i64* %RDX, align 8, !tbaa !2428
  %7942 = icmp ult i32 %7940, %7939
  %7943 = icmp ult i32 %7940, %7935
  %7944 = or i1 %7942, %7943
  %7945 = zext i1 %7944 to i8
  %7946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7945, i8* %7946, align 1, !tbaa !2432
  %7947 = and i32 %7940, 255
  %7948 = call i32 @llvm.ctpop.i32(i32 %7947) #16
  %7949 = trunc i32 %7948 to i8
  %7950 = and i8 %7949, 1
  %7951 = xor i8 %7950, 1
  %7952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7951, i8* %7952, align 1, !tbaa !2446
  %7953 = xor i64 %7936, %7934
  %7954 = trunc i64 %7953 to i32
  %7955 = xor i32 %7954, %7940
  %7956 = lshr i32 %7955, 4
  %7957 = trunc i32 %7956 to i8
  %7958 = and i8 %7957, 1
  %7959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7958, i8* %7959, align 1, !tbaa !2447
  %7960 = icmp eq i32 %7940, 0
  %7961 = zext i1 %7960 to i8
  %7962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7961, i8* %7962, align 1, !tbaa !2448
  %7963 = lshr i32 %7940, 31
  %7964 = trunc i32 %7963 to i8
  %7965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7964, i8* %7965, align 1, !tbaa !2449
  %7966 = lshr i32 %7939, 31
  %7967 = lshr i32 %7935, 31
  %7968 = xor i32 %7963, %7966
  %7969 = xor i32 %7963, %7967
  %7970 = add nuw nsw i32 %7968, %7969
  %7971 = icmp eq i32 %7970, 2
  %7972 = zext i1 %7971 to i8
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7972, i8* %7973, align 1, !tbaa !2450
  %7974 = load i32, i32* %EDX
  %7975 = zext i32 %7974 to i64
  %7976 = load i64, i64* %PC
  %7977 = add i64 %7976, 3
  store i64 %7977, i64* %PC
  %7978 = shl i64 %7975, 32
  %7979 = ashr exact i64 %7978, 32
  store i64 %7979, i64* %RCX, align 8, !tbaa !2428
  %7980 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7981 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7982 = load i64, i64* %RAX
  %7983 = load i64, i64* %RCX
  %7984 = mul i64 %7983, 4
  %7985 = add i64 %7984, %7982
  %7986 = load i64, i64* %PC
  %7987 = add i64 %7986, 5
  store i64 %7987, i64* %PC
  %7988 = bitcast i8* %7981 to <2 x float>*
  %7989 = load <2 x float>, <2 x float>* %7988, align 1
  %7990 = getelementptr inbounds i8, i8* %7981, i64 8
  %7991 = bitcast i8* %7990 to <2 x i32>*
  %7992 = load <2 x i32>, <2 x i32>* %7991, align 1
  %7993 = inttoptr i64 %7985 to float*
  %7994 = load float, float* %7993
  %7995 = extractelement <2 x float> %7989, i32 0
  %7996 = fsub float %7995, %7994
  %7997 = bitcast i8* %7980 to float*
  store float %7996, float* %7997, align 1, !tbaa !2452
  %7998 = bitcast <2 x float> %7989 to <2 x i32>
  %7999 = extractelement <2 x i32> %7998, i32 1
  %8000 = getelementptr inbounds i8, i8* %7980, i64 4
  %8001 = bitcast i8* %8000 to i32*
  store i32 %7999, i32* %8001, align 1, !tbaa !2452
  %8002 = extractelement <2 x i32> %7992, i32 0
  %8003 = getelementptr inbounds i8, i8* %7980, i64 8
  %8004 = bitcast i8* %8003 to i32*
  store i32 %8002, i32* %8004, align 1, !tbaa !2452
  %8005 = extractelement <2 x i32> %7992, i32 1
  %8006 = getelementptr inbounds i8, i8* %7980, i64 12
  %8007 = bitcast i8* %8006 to i32*
  store i32 %8005, i32* %8007, align 1, !tbaa !2452
  %8008 = load i64, i64* %RBP
  %8009 = sub i64 %8008, 40
  %8010 = load i64, i64* %PC
  %8011 = add i64 %8010, 4
  store i64 %8011, i64* %PC
  %8012 = inttoptr i64 %8009 to i64*
  %8013 = load i64, i64* %8012
  store i64 %8013, i64* %RAX, align 8, !tbaa !2428
  %8014 = load i64, i64* %RAX
  %8015 = load i64, i64* %PC
  %8016 = add i64 %8015, 3
  store i64 %8016, i64* %PC
  %8017 = inttoptr i64 %8014 to i64*
  %8018 = load i64, i64* %8017
  store i64 %8018, i64* %RAX, align 8, !tbaa !2428
  %8019 = load i64, i64* %RBP
  %8020 = sub i64 %8019, 40
  %8021 = load i64, i64* %PC
  %8022 = add i64 %8021, 4
  store i64 %8022, i64* %PC
  %8023 = inttoptr i64 %8020 to i64*
  %8024 = load i64, i64* %8023
  store i64 %8024, i64* %RCX, align 8, !tbaa !2428
  %8025 = load i64, i64* %RCX
  %8026 = add i64 %8025, 12
  %8027 = load i64, i64* %PC
  %8028 = add i64 %8027, 4
  store i64 %8028, i64* %PC
  %8029 = inttoptr i64 %8026 to i32*
  %8030 = load i32, i32* %8029
  %8031 = sext i32 %8030 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8032, align 1, !tbaa !2432
  %8033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8033, align 1, !tbaa !2446
  %8034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8034, align 1, !tbaa !2447
  %8035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8035, align 1, !tbaa !2448
  %8036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8036, align 1, !tbaa !2449
  %8037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8037, align 1, !tbaa !2450
  %8038 = load i64, i64* %RBP
  %8039 = sub i64 %8038, 40
  %8040 = load i64, i64* %PC
  %8041 = add i64 %8040, 4
  store i64 %8041, i64* %PC
  %8042 = inttoptr i64 %8039 to i64*
  %8043 = load i64, i64* %8042
  store i64 %8043, i64* %RCX, align 8, !tbaa !2428
  %8044 = load i64, i64* %RDX
  %8045 = load i64, i64* %RCX
  %8046 = add i64 %8045, 16
  %8047 = load i64, i64* %PC
  %8048 = add i64 %8047, 4
  store i64 %8048, i64* %PC
  %8049 = inttoptr i64 %8046 to i32*
  %8050 = load i32, i32* %8049
  %8051 = shl i64 %8044, 32
  %8052 = ashr exact i64 %8051, 32
  %8053 = sext i32 %8050 to i64
  %8054 = mul nsw i64 %8053, %8052
  %8055 = trunc i64 %8054 to i32
  %8056 = and i64 %8054, 4294967295
  store i64 %8056, i64* %RDX, align 8, !tbaa !2428
  %8057 = shl i64 %8054, 32
  %8058 = ashr exact i64 %8057, 32
  %8059 = icmp ne i64 %8058, %8054
  %8060 = zext i1 %8059 to i8
  %8061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8060, i8* %8061, align 1, !tbaa !2432
  %8062 = and i32 %8055, 255
  %8063 = call i32 @llvm.ctpop.i32(i32 %8062) #16
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  %8066 = xor i8 %8065, 1
  %8067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8066, i8* %8067, align 1, !tbaa !2446
  %8068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8068, align 1, !tbaa !2447
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8069, align 1, !tbaa !2448
  %8070 = lshr i32 %8055, 31
  %8071 = trunc i32 %8070 to i8
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8071, i8* %8072, align 1, !tbaa !2449
  %8073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8060, i8* %8073, align 1, !tbaa !2450
  %8074 = load i64, i64* %RBP
  %8075 = sub i64 %8074, 40
  %8076 = load i64, i64* %PC
  %8077 = add i64 %8076, 4
  store i64 %8077, i64* %PC
  %8078 = inttoptr i64 %8075 to i64*
  %8079 = load i64, i64* %8078
  store i64 %8079, i64* %RCX, align 8, !tbaa !2428
  %8080 = load i64, i64* %RDX
  %8081 = load i64, i64* %RCX
  %8082 = add i64 %8081, 20
  %8083 = load i64, i64* %PC
  %8084 = add i64 %8083, 4
  store i64 %8084, i64* %PC
  %8085 = inttoptr i64 %8082 to i32*
  %8086 = load i32, i32* %8085
  %8087 = shl i64 %8080, 32
  %8088 = ashr exact i64 %8087, 32
  %8089 = sext i32 %8086 to i64
  %8090 = mul nsw i64 %8089, %8088
  %8091 = trunc i64 %8090 to i32
  %8092 = and i64 %8090, 4294967295
  store i64 %8092, i64* %RDX, align 8, !tbaa !2428
  %8093 = shl i64 %8090, 32
  %8094 = ashr exact i64 %8093, 32
  %8095 = icmp ne i64 %8094, %8090
  %8096 = zext i1 %8095 to i8
  %8097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8096, i8* %8097, align 1, !tbaa !2432
  %8098 = and i32 %8091, 255
  %8099 = call i32 @llvm.ctpop.i32(i32 %8098) #16
  %8100 = trunc i32 %8099 to i8
  %8101 = and i8 %8100, 1
  %8102 = xor i8 %8101, 1
  %8103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8102, i8* %8103, align 1, !tbaa !2446
  %8104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8104, align 1, !tbaa !2447
  %8105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8105, align 1, !tbaa !2448
  %8106 = lshr i32 %8091, 31
  %8107 = trunc i32 %8106 to i8
  %8108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8107, i8* %8108, align 1, !tbaa !2449
  %8109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8096, i8* %8109, align 1, !tbaa !2450
  %8110 = load i64, i64* %RBP
  %8111 = sub i64 %8110, 68
  %8112 = load i64, i64* %PC
  %8113 = add i64 %8112, 3
  store i64 %8113, i64* %PC
  %8114 = inttoptr i64 %8111 to i32*
  %8115 = load i32, i32* %8114
  %8116 = zext i32 %8115 to i64
  store i64 %8116, i64* %RSI, align 8, !tbaa !2428
  %8117 = load i64, i64* %RBP
  %8118 = sub i64 %8117, 40
  %8119 = load i64, i64* %PC
  %8120 = add i64 %8119, 4
  store i64 %8120, i64* %PC
  %8121 = inttoptr i64 %8118 to i64*
  %8122 = load i64, i64* %8121
  store i64 %8122, i64* %RCX, align 8, !tbaa !2428
  %8123 = load i64, i64* %RSI
  %8124 = load i64, i64* %RCX
  %8125 = add i64 %8124, 16
  %8126 = load i64, i64* %PC
  %8127 = add i64 %8126, 4
  store i64 %8127, i64* %PC
  %8128 = inttoptr i64 %8125 to i32*
  %8129 = load i32, i32* %8128
  %8130 = shl i64 %8123, 32
  %8131 = ashr exact i64 %8130, 32
  %8132 = sext i32 %8129 to i64
  %8133 = mul nsw i64 %8132, %8131
  %8134 = trunc i64 %8133 to i32
  %8135 = and i64 %8133, 4294967295
  store i64 %8135, i64* %RSI, align 8, !tbaa !2428
  %8136 = shl i64 %8133, 32
  %8137 = ashr exact i64 %8136, 32
  %8138 = icmp ne i64 %8137, %8133
  %8139 = zext i1 %8138 to i8
  %8140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8139, i8* %8140, align 1, !tbaa !2432
  %8141 = and i32 %8134, 255
  %8142 = call i32 @llvm.ctpop.i32(i32 %8141) #16
  %8143 = trunc i32 %8142 to i8
  %8144 = and i8 %8143, 1
  %8145 = xor i8 %8144, 1
  %8146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8145, i8* %8146, align 1, !tbaa !2446
  %8147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8147, align 1, !tbaa !2447
  %8148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8148, align 1, !tbaa !2448
  %8149 = lshr i32 %8134, 31
  %8150 = trunc i32 %8149 to i8
  %8151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8150, i8* %8151, align 1, !tbaa !2449
  %8152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8139, i8* %8152, align 1, !tbaa !2450
  %8153 = load i64, i64* %RBP
  %8154 = sub i64 %8153, 40
  %8155 = load i64, i64* %PC
  %8156 = add i64 %8155, 4
  store i64 %8156, i64* %PC
  %8157 = inttoptr i64 %8154 to i64*
  %8158 = load i64, i64* %8157
  store i64 %8158, i64* %RCX, align 8, !tbaa !2428
  %8159 = load i64, i64* %RSI
  %8160 = load i64, i64* %RCX
  %8161 = add i64 %8160, 20
  %8162 = load i64, i64* %PC
  %8163 = add i64 %8162, 4
  store i64 %8163, i64* %PC
  %8164 = inttoptr i64 %8161 to i32*
  %8165 = load i32, i32* %8164
  %8166 = shl i64 %8159, 32
  %8167 = ashr exact i64 %8166, 32
  %8168 = sext i32 %8165 to i64
  %8169 = mul nsw i64 %8168, %8167
  %8170 = trunc i64 %8169 to i32
  %8171 = and i64 %8169, 4294967295
  store i64 %8171, i64* %RSI, align 8, !tbaa !2428
  %8172 = shl i64 %8169, 32
  %8173 = ashr exact i64 %8172, 32
  %8174 = icmp ne i64 %8173, %8169
  %8175 = zext i1 %8174 to i8
  %8176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8175, i8* %8176, align 1, !tbaa !2432
  %8177 = and i32 %8170, 255
  %8178 = call i32 @llvm.ctpop.i32(i32 %8177) #16
  %8179 = trunc i32 %8178 to i8
  %8180 = and i8 %8179, 1
  %8181 = xor i8 %8180, 1
  %8182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8181, i8* %8182, align 1, !tbaa !2446
  %8183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8183, align 1, !tbaa !2447
  %8184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8184, align 1, !tbaa !2448
  %8185 = lshr i32 %8170, 31
  %8186 = trunc i32 %8185 to i8
  %8187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8186, i8* %8187, align 1, !tbaa !2449
  %8188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8175, i8* %8188, align 1, !tbaa !2450
  %8189 = load i64, i64* %RDX
  %8190 = load i32, i32* %ESI
  %8191 = zext i32 %8190 to i64
  %8192 = load i64, i64* %PC
  %8193 = add i64 %8192, 2
  store i64 %8193, i64* %PC
  %8194 = trunc i64 %8189 to i32
  %8195 = add i32 %8190, %8194
  %8196 = zext i32 %8195 to i64
  store i64 %8196, i64* %RDX, align 8, !tbaa !2428
  %8197 = icmp ult i32 %8195, %8194
  %8198 = icmp ult i32 %8195, %8190
  %8199 = or i1 %8197, %8198
  %8200 = zext i1 %8199 to i8
  %8201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8200, i8* %8201, align 1, !tbaa !2432
  %8202 = and i32 %8195, 255
  %8203 = call i32 @llvm.ctpop.i32(i32 %8202) #16
  %8204 = trunc i32 %8203 to i8
  %8205 = and i8 %8204, 1
  %8206 = xor i8 %8205, 1
  %8207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8206, i8* %8207, align 1, !tbaa !2446
  %8208 = xor i64 %8191, %8189
  %8209 = trunc i64 %8208 to i32
  %8210 = xor i32 %8209, %8195
  %8211 = lshr i32 %8210, 4
  %8212 = trunc i32 %8211 to i8
  %8213 = and i8 %8212, 1
  %8214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8213, i8* %8214, align 1, !tbaa !2447
  %8215 = icmp eq i32 %8195, 0
  %8216 = zext i1 %8215 to i8
  %8217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8216, i8* %8217, align 1, !tbaa !2448
  %8218 = lshr i32 %8195, 31
  %8219 = trunc i32 %8218 to i8
  %8220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8219, i8* %8220, align 1, !tbaa !2449
  %8221 = lshr i32 %8194, 31
  %8222 = lshr i32 %8190, 31
  %8223 = xor i32 %8218, %8221
  %8224 = xor i32 %8218, %8222
  %8225 = add nuw nsw i32 %8223, %8224
  %8226 = icmp eq i32 %8225, 2
  %8227 = zext i1 %8226 to i8
  %8228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8227, i8* %8228, align 1, !tbaa !2450
  %8229 = load i64, i64* %RBP
  %8230 = sub i64 %8229, 72
  %8231 = load i64, i64* %PC
  %8232 = add i64 %8231, 3
  store i64 %8232, i64* %PC
  %8233 = inttoptr i64 %8230 to i32*
  %8234 = load i32, i32* %8233
  %8235 = zext i32 %8234 to i64
  store i64 %8235, i64* %RSI, align 8, !tbaa !2428
  %8236 = load i64, i64* %RSI
  %8237 = load i64, i64* %PC
  %8238 = add i64 %8237, 3
  store i64 %8238, i64* %PC
  %8239 = trunc i64 %8236 to i32
  %8240 = sub i32 %8239, 1
  %8241 = zext i32 %8240 to i64
  store i64 %8241, i64* %RSI, align 8, !tbaa !2428
  %8242 = icmp ult i32 %8239, 1
  %8243 = zext i1 %8242 to i8
  %8244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8243, i8* %8244, align 1, !tbaa !2432
  %8245 = and i32 %8240, 255
  %8246 = call i32 @llvm.ctpop.i32(i32 %8245) #16
  %8247 = trunc i32 %8246 to i8
  %8248 = and i8 %8247, 1
  %8249 = xor i8 %8248, 1
  %8250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8249, i8* %8250, align 1, !tbaa !2446
  %8251 = xor i64 1, %8236
  %8252 = trunc i64 %8251 to i32
  %8253 = xor i32 %8252, %8240
  %8254 = lshr i32 %8253, 4
  %8255 = trunc i32 %8254 to i8
  %8256 = and i8 %8255, 1
  %8257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8256, i8* %8257, align 1, !tbaa !2447
  %8258 = icmp eq i32 %8240, 0
  %8259 = zext i1 %8258 to i8
  %8260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8259, i8* %8260, align 1, !tbaa !2448
  %8261 = lshr i32 %8240, 31
  %8262 = trunc i32 %8261 to i8
  %8263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8262, i8* %8263, align 1, !tbaa !2449
  %8264 = lshr i32 %8239, 31
  %8265 = xor i32 %8261, %8264
  %8266 = add nuw nsw i32 %8265, %8264
  %8267 = icmp eq i32 %8266, 2
  %8268 = zext i1 %8267 to i8
  %8269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8268, i8* %8269, align 1, !tbaa !2450
  %8270 = load i64, i64* %RBP
  %8271 = sub i64 %8270, 40
  %8272 = load i64, i64* %PC
  %8273 = add i64 %8272, 4
  store i64 %8273, i64* %PC
  %8274 = inttoptr i64 %8271 to i64*
  %8275 = load i64, i64* %8274
  store i64 %8275, i64* %RCX, align 8, !tbaa !2428
  %8276 = load i64, i64* %RSI
  %8277 = load i64, i64* %RCX
  %8278 = add i64 %8277, 20
  %8279 = load i64, i64* %PC
  %8280 = add i64 %8279, 4
  store i64 %8280, i64* %PC
  %8281 = inttoptr i64 %8278 to i32*
  %8282 = load i32, i32* %8281
  %8283 = shl i64 %8276, 32
  %8284 = ashr exact i64 %8283, 32
  %8285 = sext i32 %8282 to i64
  %8286 = mul nsw i64 %8285, %8284
  %8287 = trunc i64 %8286 to i32
  %8288 = and i64 %8286, 4294967295
  store i64 %8288, i64* %RSI, align 8, !tbaa !2428
  %8289 = shl i64 %8286, 32
  %8290 = ashr exact i64 %8289, 32
  %8291 = icmp ne i64 %8290, %8286
  %8292 = zext i1 %8291 to i8
  %8293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8292, i8* %8293, align 1, !tbaa !2432
  %8294 = and i32 %8287, 255
  %8295 = call i32 @llvm.ctpop.i32(i32 %8294) #16
  %8296 = trunc i32 %8295 to i8
  %8297 = and i8 %8296, 1
  %8298 = xor i8 %8297, 1
  %8299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8298, i8* %8299, align 1, !tbaa !2446
  %8300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8300, align 1, !tbaa !2447
  %8301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8301, align 1, !tbaa !2448
  %8302 = lshr i32 %8287, 31
  %8303 = trunc i32 %8302 to i8
  %8304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8303, i8* %8304, align 1, !tbaa !2449
  %8305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8292, i8* %8305, align 1, !tbaa !2450
  %8306 = load i64, i64* %RDX
  %8307 = load i32, i32* %ESI
  %8308 = zext i32 %8307 to i64
  %8309 = load i64, i64* %PC
  %8310 = add i64 %8309, 2
  store i64 %8310, i64* %PC
  %8311 = trunc i64 %8306 to i32
  %8312 = add i32 %8307, %8311
  %8313 = zext i32 %8312 to i64
  store i64 %8313, i64* %RDX, align 8, !tbaa !2428
  %8314 = icmp ult i32 %8312, %8311
  %8315 = icmp ult i32 %8312, %8307
  %8316 = or i1 %8314, %8315
  %8317 = zext i1 %8316 to i8
  %8318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8317, i8* %8318, align 1, !tbaa !2432
  %8319 = and i32 %8312, 255
  %8320 = call i32 @llvm.ctpop.i32(i32 %8319) #16
  %8321 = trunc i32 %8320 to i8
  %8322 = and i8 %8321, 1
  %8323 = xor i8 %8322, 1
  %8324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8323, i8* %8324, align 1, !tbaa !2446
  %8325 = xor i64 %8308, %8306
  %8326 = trunc i64 %8325 to i32
  %8327 = xor i32 %8326, %8312
  %8328 = lshr i32 %8327, 4
  %8329 = trunc i32 %8328 to i8
  %8330 = and i8 %8329, 1
  %8331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8330, i8* %8331, align 1, !tbaa !2447
  %8332 = icmp eq i32 %8312, 0
  %8333 = zext i1 %8332 to i8
  %8334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8333, i8* %8334, align 1, !tbaa !2448
  %8335 = lshr i32 %8312, 31
  %8336 = trunc i32 %8335 to i8
  %8337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8336, i8* %8337, align 1, !tbaa !2449
  %8338 = lshr i32 %8311, 31
  %8339 = lshr i32 %8307, 31
  %8340 = xor i32 %8335, %8338
  %8341 = xor i32 %8335, %8339
  %8342 = add nuw nsw i32 %8340, %8341
  %8343 = icmp eq i32 %8342, 2
  %8344 = zext i1 %8343 to i8
  %8345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8344, i8* %8345, align 1, !tbaa !2450
  %8346 = load i64, i64* %RBP
  %8347 = sub i64 %8346, 76
  %8348 = load i64, i64* %PC
  %8349 = add i64 %8348, 3
  store i64 %8349, i64* %PC
  %8350 = inttoptr i64 %8347 to i32*
  %8351 = load i32, i32* %8350
  %8352 = zext i32 %8351 to i64
  store i64 %8352, i64* %RSI, align 8, !tbaa !2428
  %8353 = load i64, i64* %RSI
  %8354 = load i64, i64* %PC
  %8355 = add i64 %8354, 3
  store i64 %8355, i64* %PC
  %8356 = trunc i64 %8353 to i32
  %8357 = sub i32 %8356, 1
  %8358 = zext i32 %8357 to i64
  store i64 %8358, i64* %RSI, align 8, !tbaa !2428
  %8359 = icmp ult i32 %8356, 1
  %8360 = zext i1 %8359 to i8
  %8361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8360, i8* %8361, align 1, !tbaa !2432
  %8362 = and i32 %8357, 255
  %8363 = call i32 @llvm.ctpop.i32(i32 %8362) #16
  %8364 = trunc i32 %8363 to i8
  %8365 = and i8 %8364, 1
  %8366 = xor i8 %8365, 1
  %8367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8366, i8* %8367, align 1, !tbaa !2446
  %8368 = xor i64 1, %8353
  %8369 = trunc i64 %8368 to i32
  %8370 = xor i32 %8369, %8357
  %8371 = lshr i32 %8370, 4
  %8372 = trunc i32 %8371 to i8
  %8373 = and i8 %8372, 1
  %8374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8373, i8* %8374, align 1, !tbaa !2447
  %8375 = icmp eq i32 %8357, 0
  %8376 = zext i1 %8375 to i8
  %8377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8376, i8* %8377, align 1, !tbaa !2448
  %8378 = lshr i32 %8357, 31
  %8379 = trunc i32 %8378 to i8
  %8380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8379, i8* %8380, align 1, !tbaa !2449
  %8381 = lshr i32 %8356, 31
  %8382 = xor i32 %8378, %8381
  %8383 = add nuw nsw i32 %8382, %8381
  %8384 = icmp eq i32 %8383, 2
  %8385 = zext i1 %8384 to i8
  %8386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8385, i8* %8386, align 1, !tbaa !2450
  %8387 = load i64, i64* %RDX
  %8388 = load i32, i32* %ESI
  %8389 = zext i32 %8388 to i64
  %8390 = load i64, i64* %PC
  %8391 = add i64 %8390, 2
  store i64 %8391, i64* %PC
  %8392 = trunc i64 %8387 to i32
  %8393 = add i32 %8388, %8392
  %8394 = zext i32 %8393 to i64
  store i64 %8394, i64* %RDX, align 8, !tbaa !2428
  %8395 = icmp ult i32 %8393, %8392
  %8396 = icmp ult i32 %8393, %8388
  %8397 = or i1 %8395, %8396
  %8398 = zext i1 %8397 to i8
  %8399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8398, i8* %8399, align 1, !tbaa !2432
  %8400 = and i32 %8393, 255
  %8401 = call i32 @llvm.ctpop.i32(i32 %8400) #16
  %8402 = trunc i32 %8401 to i8
  %8403 = and i8 %8402, 1
  %8404 = xor i8 %8403, 1
  %8405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8404, i8* %8405, align 1, !tbaa !2446
  %8406 = xor i64 %8389, %8387
  %8407 = trunc i64 %8406 to i32
  %8408 = xor i32 %8407, %8393
  %8409 = lshr i32 %8408, 4
  %8410 = trunc i32 %8409 to i8
  %8411 = and i8 %8410, 1
  %8412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8411, i8* %8412, align 1, !tbaa !2447
  %8413 = icmp eq i32 %8393, 0
  %8414 = zext i1 %8413 to i8
  %8415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8414, i8* %8415, align 1, !tbaa !2448
  %8416 = lshr i32 %8393, 31
  %8417 = trunc i32 %8416 to i8
  %8418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8417, i8* %8418, align 1, !tbaa !2449
  %8419 = lshr i32 %8392, 31
  %8420 = lshr i32 %8388, 31
  %8421 = xor i32 %8416, %8419
  %8422 = xor i32 %8416, %8420
  %8423 = add nuw nsw i32 %8421, %8422
  %8424 = icmp eq i32 %8423, 2
  %8425 = zext i1 %8424 to i8
  %8426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8425, i8* %8426, align 1, !tbaa !2450
  %8427 = load i32, i32* %EDX
  %8428 = zext i32 %8427 to i64
  %8429 = load i64, i64* %PC
  %8430 = add i64 %8429, 3
  store i64 %8430, i64* %PC
  %8431 = shl i64 %8428, 32
  %8432 = ashr exact i64 %8431, 32
  store i64 %8432, i64* %RCX, align 8, !tbaa !2428
  %8433 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8434 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8435 = load i64, i64* %RAX
  %8436 = load i64, i64* %RCX
  %8437 = mul i64 %8436, 4
  %8438 = add i64 %8437, %8435
  %8439 = load i64, i64* %PC
  %8440 = add i64 %8439, 5
  store i64 %8440, i64* %PC
  %8441 = bitcast i8* %8434 to <2 x float>*
  %8442 = load <2 x float>, <2 x float>* %8441, align 1
  %8443 = getelementptr inbounds i8, i8* %8434, i64 8
  %8444 = bitcast i8* %8443 to <2 x i32>*
  %8445 = load <2 x i32>, <2 x i32>* %8444, align 1
  %8446 = inttoptr i64 %8438 to float*
  %8447 = load float, float* %8446
  %8448 = extractelement <2 x float> %8442, i32 0
  %8449 = fadd float %8448, %8447
  %8450 = bitcast i8* %8433 to float*
  store float %8449, float* %8450, align 1, !tbaa !2452
  %8451 = bitcast <2 x float> %8442 to <2 x i32>
  %8452 = extractelement <2 x i32> %8451, i32 1
  %8453 = getelementptr inbounds i8, i8* %8433, i64 4
  %8454 = bitcast i8* %8453 to i32*
  store i32 %8452, i32* %8454, align 1, !tbaa !2452
  %8455 = extractelement <2 x i32> %8445, i32 0
  %8456 = getelementptr inbounds i8, i8* %8433, i64 8
  %8457 = bitcast i8* %8456 to i32*
  store i32 %8455, i32* %8457, align 1, !tbaa !2452
  %8458 = extractelement <2 x i32> %8445, i32 1
  %8459 = getelementptr inbounds i8, i8* %8433, i64 12
  %8460 = bitcast i8* %8459 to i32*
  store i32 %8458, i32* %8460, align 1, !tbaa !2452
  %8461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8463 = bitcast %union.vec128_t* %XMM2 to i8*
  %8464 = load i64, i64* %PC
  %8465 = add i64 %8464, 4
  store i64 %8465, i64* %PC
  %8466 = bitcast i8* %8462 to <2 x float>*
  %8467 = load <2 x float>, <2 x float>* %8466, align 1
  %8468 = getelementptr inbounds i8, i8* %8462, i64 8
  %8469 = bitcast i8* %8468 to <2 x i32>*
  %8470 = load <2 x i32>, <2 x i32>* %8469, align 1
  %8471 = bitcast i8* %8463 to <2 x float>*
  %8472 = load <2 x float>, <2 x float>* %8471, align 1
  %8473 = extractelement <2 x float> %8467, i32 0
  %8474 = extractelement <2 x float> %8472, i32 0
  %8475 = fmul float %8473, %8474
  %8476 = bitcast i8* %8461 to float*
  store float %8475, float* %8476, align 1, !tbaa !2452
  %8477 = bitcast <2 x float> %8467 to <2 x i32>
  %8478 = extractelement <2 x i32> %8477, i32 1
  %8479 = getelementptr inbounds i8, i8* %8461, i64 4
  %8480 = bitcast i8* %8479 to i32*
  store i32 %8478, i32* %8480, align 1, !tbaa !2452
  %8481 = extractelement <2 x i32> %8470, i32 0
  %8482 = getelementptr inbounds i8, i8* %8461, i64 8
  %8483 = bitcast i8* %8482 to i32*
  store i32 %8481, i32* %8483, align 1, !tbaa !2452
  %8484 = extractelement <2 x i32> %8470, i32 1
  %8485 = getelementptr inbounds i8, i8* %8461, i64 12
  %8486 = bitcast i8* %8485 to i32*
  store i32 %8484, i32* %8486, align 1, !tbaa !2452
  %8487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8488 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8489 = bitcast %union.vec128_t* %XMM1 to i8*
  %8490 = load i64, i64* %PC
  %8491 = add i64 %8490, 4
  store i64 %8491, i64* %PC
  %8492 = bitcast i8* %8488 to <2 x float>*
  %8493 = load <2 x float>, <2 x float>* %8492, align 1
  %8494 = getelementptr inbounds i8, i8* %8488, i64 8
  %8495 = bitcast i8* %8494 to <2 x i32>*
  %8496 = load <2 x i32>, <2 x i32>* %8495, align 1
  %8497 = bitcast i8* %8489 to <2 x float>*
  %8498 = load <2 x float>, <2 x float>* %8497, align 1
  %8499 = extractelement <2 x float> %8493, i32 0
  %8500 = extractelement <2 x float> %8498, i32 0
  %8501 = fadd float %8499, %8500
  %8502 = bitcast i8* %8487 to float*
  store float %8501, float* %8502, align 1, !tbaa !2452
  %8503 = bitcast <2 x float> %8493 to <2 x i32>
  %8504 = extractelement <2 x i32> %8503, i32 1
  %8505 = getelementptr inbounds i8, i8* %8487, i64 4
  %8506 = bitcast i8* %8505 to i32*
  store i32 %8504, i32* %8506, align 1, !tbaa !2452
  %8507 = extractelement <2 x i32> %8496, i32 0
  %8508 = getelementptr inbounds i8, i8* %8487, i64 8
  %8509 = bitcast i8* %8508 to i32*
  store i32 %8507, i32* %8509, align 1, !tbaa !2452
  %8510 = extractelement <2 x i32> %8496, i32 1
  %8511 = getelementptr inbounds i8, i8* %8487, i64 12
  %8512 = bitcast i8* %8511 to i32*
  store i32 %8510, i32* %8512, align 1, !tbaa !2452
  %8513 = load i64, i64* %RBP
  %8514 = sub i64 %8513, 24
  %8515 = load i64, i64* %PC
  %8516 = add i64 %8515, 4
  store i64 %8516, i64* %PC
  %8517 = inttoptr i64 %8514 to i64*
  %8518 = load i64, i64* %8517
  store i64 %8518, i64* %RAX, align 8, !tbaa !2428
  %8519 = load i64, i64* %RAX
  %8520 = load i64, i64* %PC
  %8521 = add i64 %8520, 3
  store i64 %8521, i64* %PC
  %8522 = inttoptr i64 %8519 to i64*
  %8523 = load i64, i64* %8522
  store i64 %8523, i64* %RAX, align 8, !tbaa !2428
  %8524 = load i64, i64* %RBP
  %8525 = sub i64 %8524, 24
  %8526 = load i64, i64* %PC
  %8527 = add i64 %8526, 4
  store i64 %8527, i64* %PC
  %8528 = inttoptr i64 %8525 to i64*
  %8529 = load i64, i64* %8528
  store i64 %8529, i64* %RCX, align 8, !tbaa !2428
  %8530 = load i64, i64* %RCX
  %8531 = add i64 %8530, 12
  %8532 = load i64, i64* %PC
  %8533 = add i64 %8532, 3
  store i64 %8533, i64* %PC
  %8534 = inttoptr i64 %8531 to i32*
  %8535 = load i32, i32* %8534
  %8536 = zext i32 %8535 to i64
  store i64 %8536, i64* %RDX, align 8, !tbaa !2428
  %8537 = load i64, i64* %RDX
  %8538 = load i64, i64* %PC
  %8539 = add i64 %8538, 3
  store i64 %8539, i64* %PC
  %8540 = trunc i64 %8537 to i32
  %8541 = shl i32 %8540, 1
  %8542 = icmp slt i32 %8540, 0
  %8543 = icmp slt i32 %8541, 0
  %8544 = xor i1 %8542, %8543
  %8545 = zext i32 %8541 to i64
  store i64 %8545, i64* %RDX, align 8, !tbaa !2428
  %8546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8547 = zext i1 %8542 to i8
  store i8 %8547, i8* %8546, align 1, !tbaa !2451
  %8548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8549 = and i32 %8541, 254
  %8550 = call i32 @llvm.ctpop.i32(i32 %8549) #16
  %8551 = trunc i32 %8550 to i8
  %8552 = and i8 %8551, 1
  %8553 = xor i8 %8552, 1
  store i8 %8553, i8* %8548, align 1, !tbaa !2451
  %8554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8554, align 1, !tbaa !2451
  %8555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8556 = icmp eq i32 %8541, 0
  %8557 = zext i1 %8556 to i8
  store i8 %8557, i8* %8555, align 1, !tbaa !2451
  %8558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8559 = lshr i32 %8541, 31
  %8560 = trunc i32 %8559 to i8
  store i8 %8560, i8* %8558, align 1, !tbaa !2451
  %8561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8562 = zext i1 %8544 to i8
  store i8 %8562, i8* %8561, align 1, !tbaa !2451
  %8563 = load i64, i64* %RBP
  %8564 = sub i64 %8563, 24
  %8565 = load i64, i64* %PC
  %8566 = add i64 %8565, 4
  store i64 %8566, i64* %PC
  %8567 = inttoptr i64 %8564 to i64*
  %8568 = load i64, i64* %8567
  store i64 %8568, i64* %RCX, align 8, !tbaa !2428
  %8569 = load i64, i64* %RDX
  %8570 = load i64, i64* %RCX
  %8571 = add i64 %8570, 16
  %8572 = load i64, i64* %PC
  %8573 = add i64 %8572, 4
  store i64 %8573, i64* %PC
  %8574 = inttoptr i64 %8571 to i32*
  %8575 = load i32, i32* %8574
  %8576 = shl i64 %8569, 32
  %8577 = ashr exact i64 %8576, 32
  %8578 = sext i32 %8575 to i64
  %8579 = mul nsw i64 %8578, %8577
  %8580 = trunc i64 %8579 to i32
  %8581 = and i64 %8579, 4294967295
  store i64 %8581, i64* %RDX, align 8, !tbaa !2428
  %8582 = shl i64 %8579, 32
  %8583 = ashr exact i64 %8582, 32
  %8584 = icmp ne i64 %8583, %8579
  %8585 = zext i1 %8584 to i8
  %8586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8585, i8* %8586, align 1, !tbaa !2432
  %8587 = and i32 %8580, 255
  %8588 = call i32 @llvm.ctpop.i32(i32 %8587) #16
  %8589 = trunc i32 %8588 to i8
  %8590 = and i8 %8589, 1
  %8591 = xor i8 %8590, 1
  %8592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8591, i8* %8592, align 1, !tbaa !2446
  %8593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8593, align 1, !tbaa !2447
  %8594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8594, align 1, !tbaa !2448
  %8595 = lshr i32 %8580, 31
  %8596 = trunc i32 %8595 to i8
  %8597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8596, i8* %8597, align 1, !tbaa !2449
  %8598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8585, i8* %8598, align 1, !tbaa !2450
  %8599 = load i64, i64* %RBP
  %8600 = sub i64 %8599, 24
  %8601 = load i64, i64* %PC
  %8602 = add i64 %8601, 4
  store i64 %8602, i64* %PC
  %8603 = inttoptr i64 %8600 to i64*
  %8604 = load i64, i64* %8603
  store i64 %8604, i64* %RCX, align 8, !tbaa !2428
  %8605 = load i64, i64* %RDX
  %8606 = load i64, i64* %RCX
  %8607 = add i64 %8606, 20
  %8608 = load i64, i64* %PC
  %8609 = add i64 %8608, 4
  store i64 %8609, i64* %PC
  %8610 = inttoptr i64 %8607 to i32*
  %8611 = load i32, i32* %8610
  %8612 = shl i64 %8605, 32
  %8613 = ashr exact i64 %8612, 32
  %8614 = sext i32 %8611 to i64
  %8615 = mul nsw i64 %8614, %8613
  %8616 = trunc i64 %8615 to i32
  %8617 = and i64 %8615, 4294967295
  store i64 %8617, i64* %RDX, align 8, !tbaa !2428
  %8618 = shl i64 %8615, 32
  %8619 = ashr exact i64 %8618, 32
  %8620 = icmp ne i64 %8619, %8615
  %8621 = zext i1 %8620 to i8
  %8622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8621, i8* %8622, align 1, !tbaa !2432
  %8623 = and i32 %8616, 255
  %8624 = call i32 @llvm.ctpop.i32(i32 %8623) #16
  %8625 = trunc i32 %8624 to i8
  %8626 = and i8 %8625, 1
  %8627 = xor i8 %8626, 1
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8627, i8* %8628, align 1, !tbaa !2446
  %8629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8629, align 1, !tbaa !2447
  %8630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8630, align 1, !tbaa !2448
  %8631 = lshr i32 %8616, 31
  %8632 = trunc i32 %8631 to i8
  %8633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8632, i8* %8633, align 1, !tbaa !2449
  %8634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8621, i8* %8634, align 1, !tbaa !2450
  %8635 = load i64, i64* %RBP
  %8636 = sub i64 %8635, 68
  %8637 = load i64, i64* %PC
  %8638 = add i64 %8637, 3
  store i64 %8638, i64* %PC
  %8639 = inttoptr i64 %8636 to i32*
  %8640 = load i32, i32* %8639
  %8641 = zext i32 %8640 to i64
  store i64 %8641, i64* %RSI, align 8, !tbaa !2428
  %8642 = load i64, i64* %RBP
  %8643 = sub i64 %8642, 24
  %8644 = load i64, i64* %PC
  %8645 = add i64 %8644, 4
  store i64 %8645, i64* %PC
  %8646 = inttoptr i64 %8643 to i64*
  %8647 = load i64, i64* %8646
  store i64 %8647, i64* %RCX, align 8, !tbaa !2428
  %8648 = load i64, i64* %RSI
  %8649 = load i64, i64* %RCX
  %8650 = add i64 %8649, 16
  %8651 = load i64, i64* %PC
  %8652 = add i64 %8651, 4
  store i64 %8652, i64* %PC
  %8653 = inttoptr i64 %8650 to i32*
  %8654 = load i32, i32* %8653
  %8655 = shl i64 %8648, 32
  %8656 = ashr exact i64 %8655, 32
  %8657 = sext i32 %8654 to i64
  %8658 = mul nsw i64 %8657, %8656
  %8659 = trunc i64 %8658 to i32
  %8660 = and i64 %8658, 4294967295
  store i64 %8660, i64* %RSI, align 8, !tbaa !2428
  %8661 = shl i64 %8658, 32
  %8662 = ashr exact i64 %8661, 32
  %8663 = icmp ne i64 %8662, %8658
  %8664 = zext i1 %8663 to i8
  %8665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8664, i8* %8665, align 1, !tbaa !2432
  %8666 = and i32 %8659, 255
  %8667 = call i32 @llvm.ctpop.i32(i32 %8666) #16
  %8668 = trunc i32 %8667 to i8
  %8669 = and i8 %8668, 1
  %8670 = xor i8 %8669, 1
  %8671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8670, i8* %8671, align 1, !tbaa !2446
  %8672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8672, align 1, !tbaa !2447
  %8673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8673, align 1, !tbaa !2448
  %8674 = lshr i32 %8659, 31
  %8675 = trunc i32 %8674 to i8
  %8676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8675, i8* %8676, align 1, !tbaa !2449
  %8677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8664, i8* %8677, align 1, !tbaa !2450
  %8678 = load i64, i64* %RBP
  %8679 = sub i64 %8678, 24
  %8680 = load i64, i64* %PC
  %8681 = add i64 %8680, 4
  store i64 %8681, i64* %PC
  %8682 = inttoptr i64 %8679 to i64*
  %8683 = load i64, i64* %8682
  store i64 %8683, i64* %RCX, align 8, !tbaa !2428
  %8684 = load i64, i64* %RSI
  %8685 = load i64, i64* %RCX
  %8686 = add i64 %8685, 20
  %8687 = load i64, i64* %PC
  %8688 = add i64 %8687, 4
  store i64 %8688, i64* %PC
  %8689 = inttoptr i64 %8686 to i32*
  %8690 = load i32, i32* %8689
  %8691 = shl i64 %8684, 32
  %8692 = ashr exact i64 %8691, 32
  %8693 = sext i32 %8690 to i64
  %8694 = mul nsw i64 %8693, %8692
  %8695 = trunc i64 %8694 to i32
  %8696 = and i64 %8694, 4294967295
  store i64 %8696, i64* %RSI, align 8, !tbaa !2428
  %8697 = shl i64 %8694, 32
  %8698 = ashr exact i64 %8697, 32
  %8699 = icmp ne i64 %8698, %8694
  %8700 = zext i1 %8699 to i8
  %8701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8700, i8* %8701, align 1, !tbaa !2432
  %8702 = and i32 %8695, 255
  %8703 = call i32 @llvm.ctpop.i32(i32 %8702) #16
  %8704 = trunc i32 %8703 to i8
  %8705 = and i8 %8704, 1
  %8706 = xor i8 %8705, 1
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8706, i8* %8707, align 1, !tbaa !2446
  %8708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8708, align 1, !tbaa !2447
  %8709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8709, align 1, !tbaa !2448
  %8710 = lshr i32 %8695, 31
  %8711 = trunc i32 %8710 to i8
  %8712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8711, i8* %8712, align 1, !tbaa !2449
  %8713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8700, i8* %8713, align 1, !tbaa !2450
  %8714 = load i64, i64* %RDX
  %8715 = load i32, i32* %ESI
  %8716 = zext i32 %8715 to i64
  %8717 = load i64, i64* %PC
  %8718 = add i64 %8717, 2
  store i64 %8718, i64* %PC
  %8719 = trunc i64 %8714 to i32
  %8720 = add i32 %8715, %8719
  %8721 = zext i32 %8720 to i64
  store i64 %8721, i64* %RDX, align 8, !tbaa !2428
  %8722 = icmp ult i32 %8720, %8719
  %8723 = icmp ult i32 %8720, %8715
  %8724 = or i1 %8722, %8723
  %8725 = zext i1 %8724 to i8
  %8726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8725, i8* %8726, align 1, !tbaa !2432
  %8727 = and i32 %8720, 255
  %8728 = call i32 @llvm.ctpop.i32(i32 %8727) #16
  %8729 = trunc i32 %8728 to i8
  %8730 = and i8 %8729, 1
  %8731 = xor i8 %8730, 1
  %8732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8731, i8* %8732, align 1, !tbaa !2446
  %8733 = xor i64 %8716, %8714
  %8734 = trunc i64 %8733 to i32
  %8735 = xor i32 %8734, %8720
  %8736 = lshr i32 %8735, 4
  %8737 = trunc i32 %8736 to i8
  %8738 = and i8 %8737, 1
  %8739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8738, i8* %8739, align 1, !tbaa !2447
  %8740 = icmp eq i32 %8720, 0
  %8741 = zext i1 %8740 to i8
  %8742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8741, i8* %8742, align 1, !tbaa !2448
  %8743 = lshr i32 %8720, 31
  %8744 = trunc i32 %8743 to i8
  %8745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8744, i8* %8745, align 1, !tbaa !2449
  %8746 = lshr i32 %8719, 31
  %8747 = lshr i32 %8715, 31
  %8748 = xor i32 %8743, %8746
  %8749 = xor i32 %8743, %8747
  %8750 = add nuw nsw i32 %8748, %8749
  %8751 = icmp eq i32 %8750, 2
  %8752 = zext i1 %8751 to i8
  %8753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8752, i8* %8753, align 1, !tbaa !2450
  %8754 = load i64, i64* %RBP
  %8755 = sub i64 %8754, 72
  %8756 = load i64, i64* %PC
  %8757 = add i64 %8756, 3
  store i64 %8757, i64* %PC
  %8758 = inttoptr i64 %8755 to i32*
  %8759 = load i32, i32* %8758
  %8760 = zext i32 %8759 to i64
  store i64 %8760, i64* %RSI, align 8, !tbaa !2428
  %8761 = load i64, i64* %RBP
  %8762 = sub i64 %8761, 24
  %8763 = load i64, i64* %PC
  %8764 = add i64 %8763, 4
  store i64 %8764, i64* %PC
  %8765 = inttoptr i64 %8762 to i64*
  %8766 = load i64, i64* %8765
  store i64 %8766, i64* %RCX, align 8, !tbaa !2428
  %8767 = load i64, i64* %RSI
  %8768 = load i64, i64* %RCX
  %8769 = add i64 %8768, 20
  %8770 = load i64, i64* %PC
  %8771 = add i64 %8770, 4
  store i64 %8771, i64* %PC
  %8772 = inttoptr i64 %8769 to i32*
  %8773 = load i32, i32* %8772
  %8774 = shl i64 %8767, 32
  %8775 = ashr exact i64 %8774, 32
  %8776 = sext i32 %8773 to i64
  %8777 = mul nsw i64 %8776, %8775
  %8778 = trunc i64 %8777 to i32
  %8779 = and i64 %8777, 4294967295
  store i64 %8779, i64* %RSI, align 8, !tbaa !2428
  %8780 = shl i64 %8777, 32
  %8781 = ashr exact i64 %8780, 32
  %8782 = icmp ne i64 %8781, %8777
  %8783 = zext i1 %8782 to i8
  %8784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8783, i8* %8784, align 1, !tbaa !2432
  %8785 = and i32 %8778, 255
  %8786 = call i32 @llvm.ctpop.i32(i32 %8785) #16
  %8787 = trunc i32 %8786 to i8
  %8788 = and i8 %8787, 1
  %8789 = xor i8 %8788, 1
  %8790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8789, i8* %8790, align 1, !tbaa !2446
  %8791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8791, align 1, !tbaa !2447
  %8792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8792, align 1, !tbaa !2448
  %8793 = lshr i32 %8778, 31
  %8794 = trunc i32 %8793 to i8
  %8795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8794, i8* %8795, align 1, !tbaa !2449
  %8796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8783, i8* %8796, align 1, !tbaa !2450
  %8797 = load i64, i64* %RDX
  %8798 = load i32, i32* %ESI
  %8799 = zext i32 %8798 to i64
  %8800 = load i64, i64* %PC
  %8801 = add i64 %8800, 2
  store i64 %8801, i64* %PC
  %8802 = trunc i64 %8797 to i32
  %8803 = add i32 %8798, %8802
  %8804 = zext i32 %8803 to i64
  store i64 %8804, i64* %RDX, align 8, !tbaa !2428
  %8805 = icmp ult i32 %8803, %8802
  %8806 = icmp ult i32 %8803, %8798
  %8807 = or i1 %8805, %8806
  %8808 = zext i1 %8807 to i8
  %8809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8808, i8* %8809, align 1, !tbaa !2432
  %8810 = and i32 %8803, 255
  %8811 = call i32 @llvm.ctpop.i32(i32 %8810) #16
  %8812 = trunc i32 %8811 to i8
  %8813 = and i8 %8812, 1
  %8814 = xor i8 %8813, 1
  %8815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8814, i8* %8815, align 1, !tbaa !2446
  %8816 = xor i64 %8799, %8797
  %8817 = trunc i64 %8816 to i32
  %8818 = xor i32 %8817, %8803
  %8819 = lshr i32 %8818, 4
  %8820 = trunc i32 %8819 to i8
  %8821 = and i8 %8820, 1
  %8822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8821, i8* %8822, align 1, !tbaa !2447
  %8823 = icmp eq i32 %8803, 0
  %8824 = zext i1 %8823 to i8
  %8825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8824, i8* %8825, align 1, !tbaa !2448
  %8826 = lshr i32 %8803, 31
  %8827 = trunc i32 %8826 to i8
  %8828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8827, i8* %8828, align 1, !tbaa !2449
  %8829 = lshr i32 %8802, 31
  %8830 = lshr i32 %8798, 31
  %8831 = xor i32 %8826, %8829
  %8832 = xor i32 %8826, %8830
  %8833 = add nuw nsw i32 %8831, %8832
  %8834 = icmp eq i32 %8833, 2
  %8835 = zext i1 %8834 to i8
  %8836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8835, i8* %8836, align 1, !tbaa !2450
  %8837 = load i64, i64* %RDX
  %8838 = load i64, i64* %RBP
  %8839 = sub i64 %8838, 76
  %8840 = load i64, i64* %PC
  %8841 = add i64 %8840, 3
  store i64 %8841, i64* %PC
  %8842 = trunc i64 %8837 to i32
  %8843 = inttoptr i64 %8839 to i32*
  %8844 = load i32, i32* %8843
  %8845 = add i32 %8844, %8842
  %8846 = zext i32 %8845 to i64
  store i64 %8846, i64* %RDX, align 8, !tbaa !2428
  %8847 = icmp ult i32 %8845, %8842
  %8848 = icmp ult i32 %8845, %8844
  %8849 = or i1 %8847, %8848
  %8850 = zext i1 %8849 to i8
  %8851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8850, i8* %8851, align 1, !tbaa !2432
  %8852 = and i32 %8845, 255
  %8853 = call i32 @llvm.ctpop.i32(i32 %8852) #16
  %8854 = trunc i32 %8853 to i8
  %8855 = and i8 %8854, 1
  %8856 = xor i8 %8855, 1
  %8857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8856, i8* %8857, align 1, !tbaa !2446
  %8858 = xor i32 %8844, %8842
  %8859 = xor i32 %8858, %8845
  %8860 = lshr i32 %8859, 4
  %8861 = trunc i32 %8860 to i8
  %8862 = and i8 %8861, 1
  %8863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8862, i8* %8863, align 1, !tbaa !2447
  %8864 = icmp eq i32 %8845, 0
  %8865 = zext i1 %8864 to i8
  %8866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8865, i8* %8866, align 1, !tbaa !2448
  %8867 = lshr i32 %8845, 31
  %8868 = trunc i32 %8867 to i8
  %8869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8868, i8* %8869, align 1, !tbaa !2449
  %8870 = lshr i32 %8842, 31
  %8871 = lshr i32 %8844, 31
  %8872 = xor i32 %8867, %8870
  %8873 = xor i32 %8867, %8871
  %8874 = add nuw nsw i32 %8872, %8873
  %8875 = icmp eq i32 %8874, 2
  %8876 = zext i1 %8875 to i8
  %8877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8876, i8* %8877, align 1, !tbaa !2450
  %8878 = load i32, i32* %EDX
  %8879 = zext i32 %8878 to i64
  %8880 = load i64, i64* %PC
  %8881 = add i64 %8880, 3
  store i64 %8881, i64* %PC
  %8882 = shl i64 %8879, 32
  %8883 = ashr exact i64 %8882, 32
  store i64 %8883, i64* %RCX, align 8, !tbaa !2428
  %8884 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8885 = load i64, i64* %RAX
  %8886 = load i64, i64* %RCX
  %8887 = mul i64 %8886, 4
  %8888 = add i64 %8887, %8885
  %8889 = load i64, i64* %PC
  %8890 = add i64 %8889, 5
  store i64 %8890, i64* %PC
  %8891 = inttoptr i64 %8888 to float*
  %8892 = load float, float* %8891
  %8893 = bitcast i8* %8884 to float*
  store float %8892, float* %8893, align 1, !tbaa !2452
  %8894 = getelementptr inbounds i8, i8* %8884, i64 4
  %8895 = bitcast i8* %8894 to float*
  store float 0.000000e+00, float* %8895, align 1, !tbaa !2452
  %8896 = getelementptr inbounds i8, i8* %8884, i64 8
  %8897 = bitcast i8* %8896 to float*
  store float 0.000000e+00, float* %8897, align 1, !tbaa !2452
  %8898 = getelementptr inbounds i8, i8* %8884, i64 12
  %8899 = bitcast i8* %8898 to float*
  store float 0.000000e+00, float* %8899, align 1, !tbaa !2452
  %8900 = load i64, i64* %RBP
  %8901 = sub i64 %8900, 40
  %8902 = load i64, i64* %PC
  %8903 = add i64 %8902, 4
  store i64 %8903, i64* %PC
  %8904 = inttoptr i64 %8901 to i64*
  %8905 = load i64, i64* %8904
  store i64 %8905, i64* %RAX, align 8, !tbaa !2428
  %8906 = load i64, i64* %RAX
  %8907 = load i64, i64* %PC
  %8908 = add i64 %8907, 3
  store i64 %8908, i64* %PC
  %8909 = inttoptr i64 %8906 to i64*
  %8910 = load i64, i64* %8909
  store i64 %8910, i64* %RAX, align 8, !tbaa !2428
  %8911 = load i64, i64* %RBP
  %8912 = sub i64 %8911, 40
  %8913 = load i64, i64* %PC
  %8914 = add i64 %8913, 4
  store i64 %8914, i64* %PC
  %8915 = inttoptr i64 %8912 to i64*
  %8916 = load i64, i64* %8915
  store i64 %8916, i64* %RCX, align 8, !tbaa !2428
  %8917 = load i64, i64* %RCX
  %8918 = add i64 %8917, 12
  %8919 = load i64, i64* %PC
  %8920 = add i64 %8919, 4
  store i64 %8920, i64* %PC
  %8921 = inttoptr i64 %8918 to i32*
  %8922 = load i32, i32* %8921
  %8923 = sext i32 %8922 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8924, align 1, !tbaa !2432
  %8925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8925, align 1, !tbaa !2446
  %8926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8926, align 1, !tbaa !2447
  %8927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8927, align 1, !tbaa !2448
  %8928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8928, align 1, !tbaa !2449
  %8929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8929, align 1, !tbaa !2450
  %8930 = load i64, i64* %RBP
  %8931 = sub i64 %8930, 40
  %8932 = load i64, i64* %PC
  %8933 = add i64 %8932, 4
  store i64 %8933, i64* %PC
  %8934 = inttoptr i64 %8931 to i64*
  %8935 = load i64, i64* %8934
  store i64 %8935, i64* %RCX, align 8, !tbaa !2428
  %8936 = load i64, i64* %RDX
  %8937 = load i64, i64* %RCX
  %8938 = add i64 %8937, 16
  %8939 = load i64, i64* %PC
  %8940 = add i64 %8939, 4
  store i64 %8940, i64* %PC
  %8941 = inttoptr i64 %8938 to i32*
  %8942 = load i32, i32* %8941
  %8943 = shl i64 %8936, 32
  %8944 = ashr exact i64 %8943, 32
  %8945 = sext i32 %8942 to i64
  %8946 = mul nsw i64 %8945, %8944
  %8947 = trunc i64 %8946 to i32
  %8948 = and i64 %8946, 4294967295
  store i64 %8948, i64* %RDX, align 8, !tbaa !2428
  %8949 = shl i64 %8946, 32
  %8950 = ashr exact i64 %8949, 32
  %8951 = icmp ne i64 %8950, %8946
  %8952 = zext i1 %8951 to i8
  %8953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8952, i8* %8953, align 1, !tbaa !2432
  %8954 = and i32 %8947, 255
  %8955 = call i32 @llvm.ctpop.i32(i32 %8954) #16
  %8956 = trunc i32 %8955 to i8
  %8957 = and i8 %8956, 1
  %8958 = xor i8 %8957, 1
  %8959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8958, i8* %8959, align 1, !tbaa !2446
  %8960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8960, align 1, !tbaa !2447
  %8961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8961, align 1, !tbaa !2448
  %8962 = lshr i32 %8947, 31
  %8963 = trunc i32 %8962 to i8
  %8964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8963, i8* %8964, align 1, !tbaa !2449
  %8965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8952, i8* %8965, align 1, !tbaa !2450
  %8966 = load i64, i64* %RBP
  %8967 = sub i64 %8966, 40
  %8968 = load i64, i64* %PC
  %8969 = add i64 %8968, 4
  store i64 %8969, i64* %PC
  %8970 = inttoptr i64 %8967 to i64*
  %8971 = load i64, i64* %8970
  store i64 %8971, i64* %RCX, align 8, !tbaa !2428
  %8972 = load i64, i64* %RDX
  %8973 = load i64, i64* %RCX
  %8974 = add i64 %8973, 20
  %8975 = load i64, i64* %PC
  %8976 = add i64 %8975, 4
  store i64 %8976, i64* %PC
  %8977 = inttoptr i64 %8974 to i32*
  %8978 = load i32, i32* %8977
  %8979 = shl i64 %8972, 32
  %8980 = ashr exact i64 %8979, 32
  %8981 = sext i32 %8978 to i64
  %8982 = mul nsw i64 %8981, %8980
  %8983 = trunc i64 %8982 to i32
  %8984 = and i64 %8982, 4294967295
  store i64 %8984, i64* %RDX, align 8, !tbaa !2428
  %8985 = shl i64 %8982, 32
  %8986 = ashr exact i64 %8985, 32
  %8987 = icmp ne i64 %8986, %8982
  %8988 = zext i1 %8987 to i8
  %8989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8988, i8* %8989, align 1, !tbaa !2432
  %8990 = and i32 %8983, 255
  %8991 = call i32 @llvm.ctpop.i32(i32 %8990) #16
  %8992 = trunc i32 %8991 to i8
  %8993 = and i8 %8992, 1
  %8994 = xor i8 %8993, 1
  %8995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8994, i8* %8995, align 1, !tbaa !2446
  %8996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8996, align 1, !tbaa !2447
  %8997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8997, align 1, !tbaa !2448
  %8998 = lshr i32 %8983, 31
  %8999 = trunc i32 %8998 to i8
  %9000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8999, i8* %9000, align 1, !tbaa !2449
  %9001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8988, i8* %9001, align 1, !tbaa !2450
  %9002 = load i64, i64* %RBP
  %9003 = sub i64 %9002, 68
  %9004 = load i64, i64* %PC
  %9005 = add i64 %9004, 3
  store i64 %9005, i64* %PC
  %9006 = inttoptr i64 %9003 to i32*
  %9007 = load i32, i32* %9006
  %9008 = zext i32 %9007 to i64
  store i64 %9008, i64* %RSI, align 8, !tbaa !2428
  %9009 = load i64, i64* %RSI
  %9010 = load i64, i64* %PC
  %9011 = add i64 %9010, 3
  store i64 %9011, i64* %PC
  %9012 = trunc i64 %9009 to i32
  %9013 = add i32 1, %9012
  %9014 = zext i32 %9013 to i64
  store i64 %9014, i64* %RSI, align 8, !tbaa !2428
  %9015 = icmp ult i32 %9013, %9012
  %9016 = icmp ult i32 %9013, 1
  %9017 = or i1 %9015, %9016
  %9018 = zext i1 %9017 to i8
  %9019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9018, i8* %9019, align 1, !tbaa !2432
  %9020 = and i32 %9013, 255
  %9021 = call i32 @llvm.ctpop.i32(i32 %9020) #16
  %9022 = trunc i32 %9021 to i8
  %9023 = and i8 %9022, 1
  %9024 = xor i8 %9023, 1
  %9025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9024, i8* %9025, align 1, !tbaa !2446
  %9026 = xor i64 1, %9009
  %9027 = trunc i64 %9026 to i32
  %9028 = xor i32 %9027, %9013
  %9029 = lshr i32 %9028, 4
  %9030 = trunc i32 %9029 to i8
  %9031 = and i8 %9030, 1
  %9032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9031, i8* %9032, align 1, !tbaa !2447
  %9033 = icmp eq i32 %9013, 0
  %9034 = zext i1 %9033 to i8
  %9035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9034, i8* %9035, align 1, !tbaa !2448
  %9036 = lshr i32 %9013, 31
  %9037 = trunc i32 %9036 to i8
  %9038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9037, i8* %9038, align 1, !tbaa !2449
  %9039 = lshr i32 %9012, 31
  %9040 = xor i32 %9036, %9039
  %9041 = add nuw nsw i32 %9040, %9036
  %9042 = icmp eq i32 %9041, 2
  %9043 = zext i1 %9042 to i8
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9043, i8* %9044, align 1, !tbaa !2450
  %9045 = load i64, i64* %RBP
  %9046 = sub i64 %9045, 40
  %9047 = load i64, i64* %PC
  %9048 = add i64 %9047, 4
  store i64 %9048, i64* %PC
  %9049 = inttoptr i64 %9046 to i64*
  %9050 = load i64, i64* %9049
  store i64 %9050, i64* %RCX, align 8, !tbaa !2428
  %9051 = load i64, i64* %RSI
  %9052 = load i64, i64* %RCX
  %9053 = add i64 %9052, 16
  %9054 = load i64, i64* %PC
  %9055 = add i64 %9054, 4
  store i64 %9055, i64* %PC
  %9056 = inttoptr i64 %9053 to i32*
  %9057 = load i32, i32* %9056
  %9058 = shl i64 %9051, 32
  %9059 = ashr exact i64 %9058, 32
  %9060 = sext i32 %9057 to i64
  %9061 = mul nsw i64 %9060, %9059
  %9062 = trunc i64 %9061 to i32
  %9063 = and i64 %9061, 4294967295
  store i64 %9063, i64* %RSI, align 8, !tbaa !2428
  %9064 = shl i64 %9061, 32
  %9065 = ashr exact i64 %9064, 32
  %9066 = icmp ne i64 %9065, %9061
  %9067 = zext i1 %9066 to i8
  %9068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9067, i8* %9068, align 1, !tbaa !2432
  %9069 = and i32 %9062, 255
  %9070 = call i32 @llvm.ctpop.i32(i32 %9069) #16
  %9071 = trunc i32 %9070 to i8
  %9072 = and i8 %9071, 1
  %9073 = xor i8 %9072, 1
  %9074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9073, i8* %9074, align 1, !tbaa !2446
  %9075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9075, align 1, !tbaa !2447
  %9076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9076, align 1, !tbaa !2448
  %9077 = lshr i32 %9062, 31
  %9078 = trunc i32 %9077 to i8
  %9079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9078, i8* %9079, align 1, !tbaa !2449
  %9080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9067, i8* %9080, align 1, !tbaa !2450
  %9081 = load i64, i64* %RBP
  %9082 = sub i64 %9081, 40
  %9083 = load i64, i64* %PC
  %9084 = add i64 %9083, 4
  store i64 %9084, i64* %PC
  %9085 = inttoptr i64 %9082 to i64*
  %9086 = load i64, i64* %9085
  store i64 %9086, i64* %RCX, align 8, !tbaa !2428
  %9087 = load i64, i64* %RSI
  %9088 = load i64, i64* %RCX
  %9089 = add i64 %9088, 20
  %9090 = load i64, i64* %PC
  %9091 = add i64 %9090, 4
  store i64 %9091, i64* %PC
  %9092 = inttoptr i64 %9089 to i32*
  %9093 = load i32, i32* %9092
  %9094 = shl i64 %9087, 32
  %9095 = ashr exact i64 %9094, 32
  %9096 = sext i32 %9093 to i64
  %9097 = mul nsw i64 %9096, %9095
  %9098 = trunc i64 %9097 to i32
  %9099 = and i64 %9097, 4294967295
  store i64 %9099, i64* %RSI, align 8, !tbaa !2428
  %9100 = shl i64 %9097, 32
  %9101 = ashr exact i64 %9100, 32
  %9102 = icmp ne i64 %9101, %9097
  %9103 = zext i1 %9102 to i8
  %9104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9103, i8* %9104, align 1, !tbaa !2432
  %9105 = and i32 %9098, 255
  %9106 = call i32 @llvm.ctpop.i32(i32 %9105) #16
  %9107 = trunc i32 %9106 to i8
  %9108 = and i8 %9107, 1
  %9109 = xor i8 %9108, 1
  %9110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9109, i8* %9110, align 1, !tbaa !2446
  %9111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9111, align 1, !tbaa !2447
  %9112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9112, align 1, !tbaa !2448
  %9113 = lshr i32 %9098, 31
  %9114 = trunc i32 %9113 to i8
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9114, i8* %9115, align 1, !tbaa !2449
  %9116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9103, i8* %9116, align 1, !tbaa !2450
  %9117 = load i64, i64* %RDX
  %9118 = load i32, i32* %ESI
  %9119 = zext i32 %9118 to i64
  %9120 = load i64, i64* %PC
  %9121 = add i64 %9120, 2
  store i64 %9121, i64* %PC
  %9122 = trunc i64 %9117 to i32
  %9123 = add i32 %9118, %9122
  %9124 = zext i32 %9123 to i64
  store i64 %9124, i64* %RDX, align 8, !tbaa !2428
  %9125 = icmp ult i32 %9123, %9122
  %9126 = icmp ult i32 %9123, %9118
  %9127 = or i1 %9125, %9126
  %9128 = zext i1 %9127 to i8
  %9129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9128, i8* %9129, align 1, !tbaa !2432
  %9130 = and i32 %9123, 255
  %9131 = call i32 @llvm.ctpop.i32(i32 %9130) #16
  %9132 = trunc i32 %9131 to i8
  %9133 = and i8 %9132, 1
  %9134 = xor i8 %9133, 1
  %9135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9134, i8* %9135, align 1, !tbaa !2446
  %9136 = xor i64 %9119, %9117
  %9137 = trunc i64 %9136 to i32
  %9138 = xor i32 %9137, %9123
  %9139 = lshr i32 %9138, 4
  %9140 = trunc i32 %9139 to i8
  %9141 = and i8 %9140, 1
  %9142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9141, i8* %9142, align 1, !tbaa !2447
  %9143 = icmp eq i32 %9123, 0
  %9144 = zext i1 %9143 to i8
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9144, i8* %9145, align 1, !tbaa !2448
  %9146 = lshr i32 %9123, 31
  %9147 = trunc i32 %9146 to i8
  %9148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9147, i8* %9148, align 1, !tbaa !2449
  %9149 = lshr i32 %9122, 31
  %9150 = lshr i32 %9118, 31
  %9151 = xor i32 %9146, %9149
  %9152 = xor i32 %9146, %9150
  %9153 = add nuw nsw i32 %9151, %9152
  %9154 = icmp eq i32 %9153, 2
  %9155 = zext i1 %9154 to i8
  %9156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9155, i8* %9156, align 1, !tbaa !2450
  %9157 = load i64, i64* %RBP
  %9158 = sub i64 %9157, 72
  %9159 = load i64, i64* %PC
  %9160 = add i64 %9159, 3
  store i64 %9160, i64* %PC
  %9161 = inttoptr i64 %9158 to i32*
  %9162 = load i32, i32* %9161
  %9163 = zext i32 %9162 to i64
  store i64 %9163, i64* %RSI, align 8, !tbaa !2428
  %9164 = load i64, i64* %RBP
  %9165 = sub i64 %9164, 40
  %9166 = load i64, i64* %PC
  %9167 = add i64 %9166, 4
  store i64 %9167, i64* %PC
  %9168 = inttoptr i64 %9165 to i64*
  %9169 = load i64, i64* %9168
  store i64 %9169, i64* %RCX, align 8, !tbaa !2428
  %9170 = load i64, i64* %RSI
  %9171 = load i64, i64* %RCX
  %9172 = add i64 %9171, 20
  %9173 = load i64, i64* %PC
  %9174 = add i64 %9173, 4
  store i64 %9174, i64* %PC
  %9175 = inttoptr i64 %9172 to i32*
  %9176 = load i32, i32* %9175
  %9177 = shl i64 %9170, 32
  %9178 = ashr exact i64 %9177, 32
  %9179 = sext i32 %9176 to i64
  %9180 = mul nsw i64 %9179, %9178
  %9181 = trunc i64 %9180 to i32
  %9182 = and i64 %9180, 4294967295
  store i64 %9182, i64* %RSI, align 8, !tbaa !2428
  %9183 = shl i64 %9180, 32
  %9184 = ashr exact i64 %9183, 32
  %9185 = icmp ne i64 %9184, %9180
  %9186 = zext i1 %9185 to i8
  %9187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9186, i8* %9187, align 1, !tbaa !2432
  %9188 = and i32 %9181, 255
  %9189 = call i32 @llvm.ctpop.i32(i32 %9188) #16
  %9190 = trunc i32 %9189 to i8
  %9191 = and i8 %9190, 1
  %9192 = xor i8 %9191, 1
  %9193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9192, i8* %9193, align 1, !tbaa !2446
  %9194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9194, align 1, !tbaa !2447
  %9195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9195, align 1, !tbaa !2448
  %9196 = lshr i32 %9181, 31
  %9197 = trunc i32 %9196 to i8
  %9198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9197, i8* %9198, align 1, !tbaa !2449
  %9199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9186, i8* %9199, align 1, !tbaa !2450
  %9200 = load i64, i64* %RDX
  %9201 = load i32, i32* %ESI
  %9202 = zext i32 %9201 to i64
  %9203 = load i64, i64* %PC
  %9204 = add i64 %9203, 2
  store i64 %9204, i64* %PC
  %9205 = trunc i64 %9200 to i32
  %9206 = add i32 %9201, %9205
  %9207 = zext i32 %9206 to i64
  store i64 %9207, i64* %RDX, align 8, !tbaa !2428
  %9208 = icmp ult i32 %9206, %9205
  %9209 = icmp ult i32 %9206, %9201
  %9210 = or i1 %9208, %9209
  %9211 = zext i1 %9210 to i8
  %9212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9211, i8* %9212, align 1, !tbaa !2432
  %9213 = and i32 %9206, 255
  %9214 = call i32 @llvm.ctpop.i32(i32 %9213) #16
  %9215 = trunc i32 %9214 to i8
  %9216 = and i8 %9215, 1
  %9217 = xor i8 %9216, 1
  %9218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9217, i8* %9218, align 1, !tbaa !2446
  %9219 = xor i64 %9202, %9200
  %9220 = trunc i64 %9219 to i32
  %9221 = xor i32 %9220, %9206
  %9222 = lshr i32 %9221, 4
  %9223 = trunc i32 %9222 to i8
  %9224 = and i8 %9223, 1
  %9225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9224, i8* %9225, align 1, !tbaa !2447
  %9226 = icmp eq i32 %9206, 0
  %9227 = zext i1 %9226 to i8
  %9228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9227, i8* %9228, align 1, !tbaa !2448
  %9229 = lshr i32 %9206, 31
  %9230 = trunc i32 %9229 to i8
  %9231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9230, i8* %9231, align 1, !tbaa !2449
  %9232 = lshr i32 %9205, 31
  %9233 = lshr i32 %9201, 31
  %9234 = xor i32 %9229, %9232
  %9235 = xor i32 %9229, %9233
  %9236 = add nuw nsw i32 %9234, %9235
  %9237 = icmp eq i32 %9236, 2
  %9238 = zext i1 %9237 to i8
  %9239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9238, i8* %9239, align 1, !tbaa !2450
  %9240 = load i64, i64* %RBP
  %9241 = sub i64 %9240, 76
  %9242 = load i64, i64* %PC
  %9243 = add i64 %9242, 3
  store i64 %9243, i64* %PC
  %9244 = inttoptr i64 %9241 to i32*
  %9245 = load i32, i32* %9244
  %9246 = zext i32 %9245 to i64
  store i64 %9246, i64* %RSI, align 8, !tbaa !2428
  %9247 = load i64, i64* %RSI
  %9248 = load i64, i64* %PC
  %9249 = add i64 %9248, 3
  store i64 %9249, i64* %PC
  %9250 = trunc i64 %9247 to i32
  %9251 = add i32 1, %9250
  %9252 = zext i32 %9251 to i64
  store i64 %9252, i64* %RSI, align 8, !tbaa !2428
  %9253 = icmp ult i32 %9251, %9250
  %9254 = icmp ult i32 %9251, 1
  %9255 = or i1 %9253, %9254
  %9256 = zext i1 %9255 to i8
  %9257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9256, i8* %9257, align 1, !tbaa !2432
  %9258 = and i32 %9251, 255
  %9259 = call i32 @llvm.ctpop.i32(i32 %9258) #16
  %9260 = trunc i32 %9259 to i8
  %9261 = and i8 %9260, 1
  %9262 = xor i8 %9261, 1
  %9263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9262, i8* %9263, align 1, !tbaa !2446
  %9264 = xor i64 1, %9247
  %9265 = trunc i64 %9264 to i32
  %9266 = xor i32 %9265, %9251
  %9267 = lshr i32 %9266, 4
  %9268 = trunc i32 %9267 to i8
  %9269 = and i8 %9268, 1
  %9270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9269, i8* %9270, align 1, !tbaa !2447
  %9271 = icmp eq i32 %9251, 0
  %9272 = zext i1 %9271 to i8
  %9273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9272, i8* %9273, align 1, !tbaa !2448
  %9274 = lshr i32 %9251, 31
  %9275 = trunc i32 %9274 to i8
  %9276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9275, i8* %9276, align 1, !tbaa !2449
  %9277 = lshr i32 %9250, 31
  %9278 = xor i32 %9274, %9277
  %9279 = add nuw nsw i32 %9278, %9274
  %9280 = icmp eq i32 %9279, 2
  %9281 = zext i1 %9280 to i8
  %9282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9281, i8* %9282, align 1, !tbaa !2450
  %9283 = load i64, i64* %RDX
  %9284 = load i32, i32* %ESI
  %9285 = zext i32 %9284 to i64
  %9286 = load i64, i64* %PC
  %9287 = add i64 %9286, 2
  store i64 %9287, i64* %PC
  %9288 = trunc i64 %9283 to i32
  %9289 = add i32 %9284, %9288
  %9290 = zext i32 %9289 to i64
  store i64 %9290, i64* %RDX, align 8, !tbaa !2428
  %9291 = icmp ult i32 %9289, %9288
  %9292 = icmp ult i32 %9289, %9284
  %9293 = or i1 %9291, %9292
  %9294 = zext i1 %9293 to i8
  %9295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9294, i8* %9295, align 1, !tbaa !2432
  %9296 = and i32 %9289, 255
  %9297 = call i32 @llvm.ctpop.i32(i32 %9296) #16
  %9298 = trunc i32 %9297 to i8
  %9299 = and i8 %9298, 1
  %9300 = xor i8 %9299, 1
  %9301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9300, i8* %9301, align 1, !tbaa !2446
  %9302 = xor i64 %9285, %9283
  %9303 = trunc i64 %9302 to i32
  %9304 = xor i32 %9303, %9289
  %9305 = lshr i32 %9304, 4
  %9306 = trunc i32 %9305 to i8
  %9307 = and i8 %9306, 1
  %9308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9307, i8* %9308, align 1, !tbaa !2447
  %9309 = icmp eq i32 %9289, 0
  %9310 = zext i1 %9309 to i8
  %9311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9310, i8* %9311, align 1, !tbaa !2448
  %9312 = lshr i32 %9289, 31
  %9313 = trunc i32 %9312 to i8
  %9314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9313, i8* %9314, align 1, !tbaa !2449
  %9315 = lshr i32 %9288, 31
  %9316 = lshr i32 %9284, 31
  %9317 = xor i32 %9312, %9315
  %9318 = xor i32 %9312, %9316
  %9319 = add nuw nsw i32 %9317, %9318
  %9320 = icmp eq i32 %9319, 2
  %9321 = zext i1 %9320 to i8
  %9322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9321, i8* %9322, align 1, !tbaa !2450
  %9323 = load i32, i32* %EDX
  %9324 = zext i32 %9323 to i64
  %9325 = load i64, i64* %PC
  %9326 = add i64 %9325, 3
  store i64 %9326, i64* %PC
  %9327 = shl i64 %9324, 32
  %9328 = ashr exact i64 %9327, 32
  store i64 %9328, i64* %RCX, align 8, !tbaa !2428
  %9329 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9330 = load i64, i64* %RAX
  %9331 = load i64, i64* %RCX
  %9332 = mul i64 %9331, 4
  %9333 = add i64 %9332, %9330
  %9334 = load i64, i64* %PC
  %9335 = add i64 %9334, 5
  store i64 %9335, i64* %PC
  %9336 = inttoptr i64 %9333 to float*
  %9337 = load float, float* %9336
  %9338 = bitcast i8* %9329 to float*
  store float %9337, float* %9338, align 1, !tbaa !2452
  %9339 = getelementptr inbounds i8, i8* %9329, i64 4
  %9340 = bitcast i8* %9339 to float*
  store float 0.000000e+00, float* %9340, align 1, !tbaa !2452
  %9341 = getelementptr inbounds i8, i8* %9329, i64 8
  %9342 = bitcast i8* %9341 to float*
  store float 0.000000e+00, float* %9342, align 1, !tbaa !2452
  %9343 = getelementptr inbounds i8, i8* %9329, i64 12
  %9344 = bitcast i8* %9343 to float*
  store float 0.000000e+00, float* %9344, align 1, !tbaa !2452
  %9345 = load i64, i64* %RBP
  %9346 = sub i64 %9345, 40
  %9347 = load i64, i64* %PC
  %9348 = add i64 %9347, 4
  store i64 %9348, i64* %PC
  %9349 = inttoptr i64 %9346 to i64*
  %9350 = load i64, i64* %9349
  store i64 %9350, i64* %RAX, align 8, !tbaa !2428
  %9351 = load i64, i64* %RAX
  %9352 = load i64, i64* %PC
  %9353 = add i64 %9352, 3
  store i64 %9353, i64* %PC
  %9354 = inttoptr i64 %9351 to i64*
  %9355 = load i64, i64* %9354
  store i64 %9355, i64* %RAX, align 8, !tbaa !2428
  %9356 = load i64, i64* %RBP
  %9357 = sub i64 %9356, 40
  %9358 = load i64, i64* %PC
  %9359 = add i64 %9358, 4
  store i64 %9359, i64* %PC
  %9360 = inttoptr i64 %9357 to i64*
  %9361 = load i64, i64* %9360
  store i64 %9361, i64* %RCX, align 8, !tbaa !2428
  %9362 = load i64, i64* %RCX
  %9363 = add i64 %9362, 12
  %9364 = load i64, i64* %PC
  %9365 = add i64 %9364, 4
  store i64 %9365, i64* %PC
  %9366 = inttoptr i64 %9363 to i32*
  %9367 = load i32, i32* %9366
  %9368 = sext i32 %9367 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9369, align 1, !tbaa !2432
  %9370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9370, align 1, !tbaa !2446
  %9371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9371, align 1, !tbaa !2447
  %9372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9372, align 1, !tbaa !2448
  %9373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9373, align 1, !tbaa !2449
  %9374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9374, align 1, !tbaa !2450
  %9375 = load i64, i64* %RBP
  %9376 = sub i64 %9375, 40
  %9377 = load i64, i64* %PC
  %9378 = add i64 %9377, 4
  store i64 %9378, i64* %PC
  %9379 = inttoptr i64 %9376 to i64*
  %9380 = load i64, i64* %9379
  store i64 %9380, i64* %RCX, align 8, !tbaa !2428
  %9381 = load i64, i64* %RDX
  %9382 = load i64, i64* %RCX
  %9383 = add i64 %9382, 16
  %9384 = load i64, i64* %PC
  %9385 = add i64 %9384, 4
  store i64 %9385, i64* %PC
  %9386 = inttoptr i64 %9383 to i32*
  %9387 = load i32, i32* %9386
  %9388 = shl i64 %9381, 32
  %9389 = ashr exact i64 %9388, 32
  %9390 = sext i32 %9387 to i64
  %9391 = mul nsw i64 %9390, %9389
  %9392 = trunc i64 %9391 to i32
  %9393 = and i64 %9391, 4294967295
  store i64 %9393, i64* %RDX, align 8, !tbaa !2428
  %9394 = shl i64 %9391, 32
  %9395 = ashr exact i64 %9394, 32
  %9396 = icmp ne i64 %9395, %9391
  %9397 = zext i1 %9396 to i8
  %9398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9397, i8* %9398, align 1, !tbaa !2432
  %9399 = and i32 %9392, 255
  %9400 = call i32 @llvm.ctpop.i32(i32 %9399) #16
  %9401 = trunc i32 %9400 to i8
  %9402 = and i8 %9401, 1
  %9403 = xor i8 %9402, 1
  %9404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9403, i8* %9404, align 1, !tbaa !2446
  %9405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9405, align 1, !tbaa !2447
  %9406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9406, align 1, !tbaa !2448
  %9407 = lshr i32 %9392, 31
  %9408 = trunc i32 %9407 to i8
  %9409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9408, i8* %9409, align 1, !tbaa !2449
  %9410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9397, i8* %9410, align 1, !tbaa !2450
  %9411 = load i64, i64* %RBP
  %9412 = sub i64 %9411, 40
  %9413 = load i64, i64* %PC
  %9414 = add i64 %9413, 4
  store i64 %9414, i64* %PC
  %9415 = inttoptr i64 %9412 to i64*
  %9416 = load i64, i64* %9415
  store i64 %9416, i64* %RCX, align 8, !tbaa !2428
  %9417 = load i64, i64* %RDX
  %9418 = load i64, i64* %RCX
  %9419 = add i64 %9418, 20
  %9420 = load i64, i64* %PC
  %9421 = add i64 %9420, 4
  store i64 %9421, i64* %PC
  %9422 = inttoptr i64 %9419 to i32*
  %9423 = load i32, i32* %9422
  %9424 = shl i64 %9417, 32
  %9425 = ashr exact i64 %9424, 32
  %9426 = sext i32 %9423 to i64
  %9427 = mul nsw i64 %9426, %9425
  %9428 = trunc i64 %9427 to i32
  %9429 = and i64 %9427, 4294967295
  store i64 %9429, i64* %RDX, align 8, !tbaa !2428
  %9430 = shl i64 %9427, 32
  %9431 = ashr exact i64 %9430, 32
  %9432 = icmp ne i64 %9431, %9427
  %9433 = zext i1 %9432 to i8
  %9434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9433, i8* %9434, align 1, !tbaa !2432
  %9435 = and i32 %9428, 255
  %9436 = call i32 @llvm.ctpop.i32(i32 %9435) #16
  %9437 = trunc i32 %9436 to i8
  %9438 = and i8 %9437, 1
  %9439 = xor i8 %9438, 1
  %9440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9439, i8* %9440, align 1, !tbaa !2446
  %9441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9441, align 1, !tbaa !2447
  %9442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9442, align 1, !tbaa !2448
  %9443 = lshr i32 %9428, 31
  %9444 = trunc i32 %9443 to i8
  %9445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9444, i8* %9445, align 1, !tbaa !2449
  %9446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9433, i8* %9446, align 1, !tbaa !2450
  %9447 = load i64, i64* %RBP
  %9448 = sub i64 %9447, 68
  %9449 = load i64, i64* %PC
  %9450 = add i64 %9449, 3
  store i64 %9450, i64* %PC
  %9451 = inttoptr i64 %9448 to i32*
  %9452 = load i32, i32* %9451
  %9453 = zext i32 %9452 to i64
  store i64 %9453, i64* %RSI, align 8, !tbaa !2428
  %9454 = load i64, i64* %RSI
  %9455 = load i64, i64* %PC
  %9456 = add i64 %9455, 3
  store i64 %9456, i64* %PC
  %9457 = trunc i64 %9454 to i32
  %9458 = sub i32 %9457, 1
  %9459 = zext i32 %9458 to i64
  store i64 %9459, i64* %RSI, align 8, !tbaa !2428
  %9460 = icmp ult i32 %9457, 1
  %9461 = zext i1 %9460 to i8
  %9462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9461, i8* %9462, align 1, !tbaa !2432
  %9463 = and i32 %9458, 255
  %9464 = call i32 @llvm.ctpop.i32(i32 %9463) #16
  %9465 = trunc i32 %9464 to i8
  %9466 = and i8 %9465, 1
  %9467 = xor i8 %9466, 1
  %9468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9467, i8* %9468, align 1, !tbaa !2446
  %9469 = xor i64 1, %9454
  %9470 = trunc i64 %9469 to i32
  %9471 = xor i32 %9470, %9458
  %9472 = lshr i32 %9471, 4
  %9473 = trunc i32 %9472 to i8
  %9474 = and i8 %9473, 1
  %9475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9474, i8* %9475, align 1, !tbaa !2447
  %9476 = icmp eq i32 %9458, 0
  %9477 = zext i1 %9476 to i8
  %9478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9477, i8* %9478, align 1, !tbaa !2448
  %9479 = lshr i32 %9458, 31
  %9480 = trunc i32 %9479 to i8
  %9481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9480, i8* %9481, align 1, !tbaa !2449
  %9482 = lshr i32 %9457, 31
  %9483 = xor i32 %9479, %9482
  %9484 = add nuw nsw i32 %9483, %9482
  %9485 = icmp eq i32 %9484, 2
  %9486 = zext i1 %9485 to i8
  %9487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9486, i8* %9487, align 1, !tbaa !2450
  %9488 = load i64, i64* %RBP
  %9489 = sub i64 %9488, 40
  %9490 = load i64, i64* %PC
  %9491 = add i64 %9490, 4
  store i64 %9491, i64* %PC
  %9492 = inttoptr i64 %9489 to i64*
  %9493 = load i64, i64* %9492
  store i64 %9493, i64* %RCX, align 8, !tbaa !2428
  %9494 = load i64, i64* %RSI
  %9495 = load i64, i64* %RCX
  %9496 = add i64 %9495, 16
  %9497 = load i64, i64* %PC
  %9498 = add i64 %9497, 4
  store i64 %9498, i64* %PC
  %9499 = inttoptr i64 %9496 to i32*
  %9500 = load i32, i32* %9499
  %9501 = shl i64 %9494, 32
  %9502 = ashr exact i64 %9501, 32
  %9503 = sext i32 %9500 to i64
  %9504 = mul nsw i64 %9503, %9502
  %9505 = trunc i64 %9504 to i32
  %9506 = and i64 %9504, 4294967295
  store i64 %9506, i64* %RSI, align 8, !tbaa !2428
  %9507 = shl i64 %9504, 32
  %9508 = ashr exact i64 %9507, 32
  %9509 = icmp ne i64 %9508, %9504
  %9510 = zext i1 %9509 to i8
  %9511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9510, i8* %9511, align 1, !tbaa !2432
  %9512 = and i32 %9505, 255
  %9513 = call i32 @llvm.ctpop.i32(i32 %9512) #16
  %9514 = trunc i32 %9513 to i8
  %9515 = and i8 %9514, 1
  %9516 = xor i8 %9515, 1
  %9517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9516, i8* %9517, align 1, !tbaa !2446
  %9518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9518, align 1, !tbaa !2447
  %9519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9519, align 1, !tbaa !2448
  %9520 = lshr i32 %9505, 31
  %9521 = trunc i32 %9520 to i8
  %9522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9521, i8* %9522, align 1, !tbaa !2449
  %9523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9510, i8* %9523, align 1, !tbaa !2450
  %9524 = load i64, i64* %RBP
  %9525 = sub i64 %9524, 40
  %9526 = load i64, i64* %PC
  %9527 = add i64 %9526, 4
  store i64 %9527, i64* %PC
  %9528 = inttoptr i64 %9525 to i64*
  %9529 = load i64, i64* %9528
  store i64 %9529, i64* %RCX, align 8, !tbaa !2428
  %9530 = load i64, i64* %RSI
  %9531 = load i64, i64* %RCX
  %9532 = add i64 %9531, 20
  %9533 = load i64, i64* %PC
  %9534 = add i64 %9533, 4
  store i64 %9534, i64* %PC
  %9535 = inttoptr i64 %9532 to i32*
  %9536 = load i32, i32* %9535
  %9537 = shl i64 %9530, 32
  %9538 = ashr exact i64 %9537, 32
  %9539 = sext i32 %9536 to i64
  %9540 = mul nsw i64 %9539, %9538
  %9541 = trunc i64 %9540 to i32
  %9542 = and i64 %9540, 4294967295
  store i64 %9542, i64* %RSI, align 8, !tbaa !2428
  %9543 = shl i64 %9540, 32
  %9544 = ashr exact i64 %9543, 32
  %9545 = icmp ne i64 %9544, %9540
  %9546 = zext i1 %9545 to i8
  %9547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9546, i8* %9547, align 1, !tbaa !2432
  %9548 = and i32 %9541, 255
  %9549 = call i32 @llvm.ctpop.i32(i32 %9548) #16
  %9550 = trunc i32 %9549 to i8
  %9551 = and i8 %9550, 1
  %9552 = xor i8 %9551, 1
  %9553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9552, i8* %9553, align 1, !tbaa !2446
  %9554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9554, align 1, !tbaa !2447
  %9555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9555, align 1, !tbaa !2448
  %9556 = lshr i32 %9541, 31
  %9557 = trunc i32 %9556 to i8
  %9558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9557, i8* %9558, align 1, !tbaa !2449
  %9559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9546, i8* %9559, align 1, !tbaa !2450
  %9560 = load i64, i64* %RDX
  %9561 = load i32, i32* %ESI
  %9562 = zext i32 %9561 to i64
  %9563 = load i64, i64* %PC
  %9564 = add i64 %9563, 2
  store i64 %9564, i64* %PC
  %9565 = trunc i64 %9560 to i32
  %9566 = add i32 %9561, %9565
  %9567 = zext i32 %9566 to i64
  store i64 %9567, i64* %RDX, align 8, !tbaa !2428
  %9568 = icmp ult i32 %9566, %9565
  %9569 = icmp ult i32 %9566, %9561
  %9570 = or i1 %9568, %9569
  %9571 = zext i1 %9570 to i8
  %9572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9571, i8* %9572, align 1, !tbaa !2432
  %9573 = and i32 %9566, 255
  %9574 = call i32 @llvm.ctpop.i32(i32 %9573) #16
  %9575 = trunc i32 %9574 to i8
  %9576 = and i8 %9575, 1
  %9577 = xor i8 %9576, 1
  %9578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9577, i8* %9578, align 1, !tbaa !2446
  %9579 = xor i64 %9562, %9560
  %9580 = trunc i64 %9579 to i32
  %9581 = xor i32 %9580, %9566
  %9582 = lshr i32 %9581, 4
  %9583 = trunc i32 %9582 to i8
  %9584 = and i8 %9583, 1
  %9585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9584, i8* %9585, align 1, !tbaa !2447
  %9586 = icmp eq i32 %9566, 0
  %9587 = zext i1 %9586 to i8
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9587, i8* %9588, align 1, !tbaa !2448
  %9589 = lshr i32 %9566, 31
  %9590 = trunc i32 %9589 to i8
  %9591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9590, i8* %9591, align 1, !tbaa !2449
  %9592 = lshr i32 %9565, 31
  %9593 = lshr i32 %9561, 31
  %9594 = xor i32 %9589, %9592
  %9595 = xor i32 %9589, %9593
  %9596 = add nuw nsw i32 %9594, %9595
  %9597 = icmp eq i32 %9596, 2
  %9598 = zext i1 %9597 to i8
  %9599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9598, i8* %9599, align 1, !tbaa !2450
  %9600 = load i64, i64* %RBP
  %9601 = sub i64 %9600, 72
  %9602 = load i64, i64* %PC
  %9603 = add i64 %9602, 3
  store i64 %9603, i64* %PC
  %9604 = inttoptr i64 %9601 to i32*
  %9605 = load i32, i32* %9604
  %9606 = zext i32 %9605 to i64
  store i64 %9606, i64* %RSI, align 8, !tbaa !2428
  %9607 = load i64, i64* %RBP
  %9608 = sub i64 %9607, 40
  %9609 = load i64, i64* %PC
  %9610 = add i64 %9609, 4
  store i64 %9610, i64* %PC
  %9611 = inttoptr i64 %9608 to i64*
  %9612 = load i64, i64* %9611
  store i64 %9612, i64* %RCX, align 8, !tbaa !2428
  %9613 = load i64, i64* %RSI
  %9614 = load i64, i64* %RCX
  %9615 = add i64 %9614, 20
  %9616 = load i64, i64* %PC
  %9617 = add i64 %9616, 4
  store i64 %9617, i64* %PC
  %9618 = inttoptr i64 %9615 to i32*
  %9619 = load i32, i32* %9618
  %9620 = shl i64 %9613, 32
  %9621 = ashr exact i64 %9620, 32
  %9622 = sext i32 %9619 to i64
  %9623 = mul nsw i64 %9622, %9621
  %9624 = trunc i64 %9623 to i32
  %9625 = and i64 %9623, 4294967295
  store i64 %9625, i64* %RSI, align 8, !tbaa !2428
  %9626 = shl i64 %9623, 32
  %9627 = ashr exact i64 %9626, 32
  %9628 = icmp ne i64 %9627, %9623
  %9629 = zext i1 %9628 to i8
  %9630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9629, i8* %9630, align 1, !tbaa !2432
  %9631 = and i32 %9624, 255
  %9632 = call i32 @llvm.ctpop.i32(i32 %9631) #16
  %9633 = trunc i32 %9632 to i8
  %9634 = and i8 %9633, 1
  %9635 = xor i8 %9634, 1
  %9636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9635, i8* %9636, align 1, !tbaa !2446
  %9637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9637, align 1, !tbaa !2447
  %9638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9638, align 1, !tbaa !2448
  %9639 = lshr i32 %9624, 31
  %9640 = trunc i32 %9639 to i8
  %9641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9640, i8* %9641, align 1, !tbaa !2449
  %9642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9629, i8* %9642, align 1, !tbaa !2450
  %9643 = load i64, i64* %RDX
  %9644 = load i32, i32* %ESI
  %9645 = zext i32 %9644 to i64
  %9646 = load i64, i64* %PC
  %9647 = add i64 %9646, 2
  store i64 %9647, i64* %PC
  %9648 = trunc i64 %9643 to i32
  %9649 = add i32 %9644, %9648
  %9650 = zext i32 %9649 to i64
  store i64 %9650, i64* %RDX, align 8, !tbaa !2428
  %9651 = icmp ult i32 %9649, %9648
  %9652 = icmp ult i32 %9649, %9644
  %9653 = or i1 %9651, %9652
  %9654 = zext i1 %9653 to i8
  %9655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9654, i8* %9655, align 1, !tbaa !2432
  %9656 = and i32 %9649, 255
  %9657 = call i32 @llvm.ctpop.i32(i32 %9656) #16
  %9658 = trunc i32 %9657 to i8
  %9659 = and i8 %9658, 1
  %9660 = xor i8 %9659, 1
  %9661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9660, i8* %9661, align 1, !tbaa !2446
  %9662 = xor i64 %9645, %9643
  %9663 = trunc i64 %9662 to i32
  %9664 = xor i32 %9663, %9649
  %9665 = lshr i32 %9664, 4
  %9666 = trunc i32 %9665 to i8
  %9667 = and i8 %9666, 1
  %9668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9667, i8* %9668, align 1, !tbaa !2447
  %9669 = icmp eq i32 %9649, 0
  %9670 = zext i1 %9669 to i8
  %9671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9670, i8* %9671, align 1, !tbaa !2448
  %9672 = lshr i32 %9649, 31
  %9673 = trunc i32 %9672 to i8
  %9674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9673, i8* %9674, align 1, !tbaa !2449
  %9675 = lshr i32 %9648, 31
  %9676 = lshr i32 %9644, 31
  %9677 = xor i32 %9672, %9675
  %9678 = xor i32 %9672, %9676
  %9679 = add nuw nsw i32 %9677, %9678
  %9680 = icmp eq i32 %9679, 2
  %9681 = zext i1 %9680 to i8
  %9682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9681, i8* %9682, align 1, !tbaa !2450
  %9683 = load i64, i64* %RBP
  %9684 = sub i64 %9683, 76
  %9685 = load i64, i64* %PC
  %9686 = add i64 %9685, 3
  store i64 %9686, i64* %PC
  %9687 = inttoptr i64 %9684 to i32*
  %9688 = load i32, i32* %9687
  %9689 = zext i32 %9688 to i64
  store i64 %9689, i64* %RSI, align 8, !tbaa !2428
  %9690 = load i64, i64* %RSI
  %9691 = load i64, i64* %PC
  %9692 = add i64 %9691, 3
  store i64 %9692, i64* %PC
  %9693 = trunc i64 %9690 to i32
  %9694 = add i32 1, %9693
  %9695 = zext i32 %9694 to i64
  store i64 %9695, i64* %RSI, align 8, !tbaa !2428
  %9696 = icmp ult i32 %9694, %9693
  %9697 = icmp ult i32 %9694, 1
  %9698 = or i1 %9696, %9697
  %9699 = zext i1 %9698 to i8
  %9700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9699, i8* %9700, align 1, !tbaa !2432
  %9701 = and i32 %9694, 255
  %9702 = call i32 @llvm.ctpop.i32(i32 %9701) #16
  %9703 = trunc i32 %9702 to i8
  %9704 = and i8 %9703, 1
  %9705 = xor i8 %9704, 1
  %9706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9705, i8* %9706, align 1, !tbaa !2446
  %9707 = xor i64 1, %9690
  %9708 = trunc i64 %9707 to i32
  %9709 = xor i32 %9708, %9694
  %9710 = lshr i32 %9709, 4
  %9711 = trunc i32 %9710 to i8
  %9712 = and i8 %9711, 1
  %9713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9712, i8* %9713, align 1, !tbaa !2447
  %9714 = icmp eq i32 %9694, 0
  %9715 = zext i1 %9714 to i8
  %9716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9715, i8* %9716, align 1, !tbaa !2448
  %9717 = lshr i32 %9694, 31
  %9718 = trunc i32 %9717 to i8
  %9719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9718, i8* %9719, align 1, !tbaa !2449
  %9720 = lshr i32 %9693, 31
  %9721 = xor i32 %9717, %9720
  %9722 = add nuw nsw i32 %9721, %9717
  %9723 = icmp eq i32 %9722, 2
  %9724 = zext i1 %9723 to i8
  %9725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9724, i8* %9725, align 1, !tbaa !2450
  %9726 = load i64, i64* %RDX
  %9727 = load i32, i32* %ESI
  %9728 = zext i32 %9727 to i64
  %9729 = load i64, i64* %PC
  %9730 = add i64 %9729, 2
  store i64 %9730, i64* %PC
  %9731 = trunc i64 %9726 to i32
  %9732 = add i32 %9727, %9731
  %9733 = zext i32 %9732 to i64
  store i64 %9733, i64* %RDX, align 8, !tbaa !2428
  %9734 = icmp ult i32 %9732, %9731
  %9735 = icmp ult i32 %9732, %9727
  %9736 = or i1 %9734, %9735
  %9737 = zext i1 %9736 to i8
  %9738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9737, i8* %9738, align 1, !tbaa !2432
  %9739 = and i32 %9732, 255
  %9740 = call i32 @llvm.ctpop.i32(i32 %9739) #16
  %9741 = trunc i32 %9740 to i8
  %9742 = and i8 %9741, 1
  %9743 = xor i8 %9742, 1
  %9744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9743, i8* %9744, align 1, !tbaa !2446
  %9745 = xor i64 %9728, %9726
  %9746 = trunc i64 %9745 to i32
  %9747 = xor i32 %9746, %9732
  %9748 = lshr i32 %9747, 4
  %9749 = trunc i32 %9748 to i8
  %9750 = and i8 %9749, 1
  %9751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9750, i8* %9751, align 1, !tbaa !2447
  %9752 = icmp eq i32 %9732, 0
  %9753 = zext i1 %9752 to i8
  %9754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9753, i8* %9754, align 1, !tbaa !2448
  %9755 = lshr i32 %9732, 31
  %9756 = trunc i32 %9755 to i8
  %9757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9756, i8* %9757, align 1, !tbaa !2449
  %9758 = lshr i32 %9731, 31
  %9759 = lshr i32 %9727, 31
  %9760 = xor i32 %9755, %9758
  %9761 = xor i32 %9755, %9759
  %9762 = add nuw nsw i32 %9760, %9761
  %9763 = icmp eq i32 %9762, 2
  %9764 = zext i1 %9763 to i8
  %9765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9764, i8* %9765, align 1, !tbaa !2450
  %9766 = load i32, i32* %EDX
  %9767 = zext i32 %9766 to i64
  %9768 = load i64, i64* %PC
  %9769 = add i64 %9768, 3
  store i64 %9769, i64* %PC
  %9770 = shl i64 %9767, 32
  %9771 = ashr exact i64 %9770, 32
  store i64 %9771, i64* %RCX, align 8, !tbaa !2428
  %9772 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9773 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9774 = load i64, i64* %RAX
  %9775 = load i64, i64* %RCX
  %9776 = mul i64 %9775, 4
  %9777 = add i64 %9776, %9774
  %9778 = load i64, i64* %PC
  %9779 = add i64 %9778, 5
  store i64 %9779, i64* %PC
  %9780 = bitcast i8* %9773 to <2 x float>*
  %9781 = load <2 x float>, <2 x float>* %9780, align 1
  %9782 = getelementptr inbounds i8, i8* %9773, i64 8
  %9783 = bitcast i8* %9782 to <2 x i32>*
  %9784 = load <2 x i32>, <2 x i32>* %9783, align 1
  %9785 = inttoptr i64 %9777 to float*
  %9786 = load float, float* %9785
  %9787 = extractelement <2 x float> %9781, i32 0
  %9788 = fsub float %9787, %9786
  %9789 = bitcast i8* %9772 to float*
  store float %9788, float* %9789, align 1, !tbaa !2452
  %9790 = bitcast <2 x float> %9781 to <2 x i32>
  %9791 = extractelement <2 x i32> %9790, i32 1
  %9792 = getelementptr inbounds i8, i8* %9772, i64 4
  %9793 = bitcast i8* %9792 to i32*
  store i32 %9791, i32* %9793, align 1, !tbaa !2452
  %9794 = extractelement <2 x i32> %9784, i32 0
  %9795 = getelementptr inbounds i8, i8* %9772, i64 8
  %9796 = bitcast i8* %9795 to i32*
  store i32 %9794, i32* %9796, align 1, !tbaa !2452
  %9797 = extractelement <2 x i32> %9784, i32 1
  %9798 = getelementptr inbounds i8, i8* %9772, i64 12
  %9799 = bitcast i8* %9798 to i32*
  store i32 %9797, i32* %9799, align 1, !tbaa !2452
  %9800 = load i64, i64* %RBP
  %9801 = sub i64 %9800, 40
  %9802 = load i64, i64* %PC
  %9803 = add i64 %9802, 4
  store i64 %9803, i64* %PC
  %9804 = inttoptr i64 %9801 to i64*
  %9805 = load i64, i64* %9804
  store i64 %9805, i64* %RAX, align 8, !tbaa !2428
  %9806 = load i64, i64* %RAX
  %9807 = load i64, i64* %PC
  %9808 = add i64 %9807, 3
  store i64 %9808, i64* %PC
  %9809 = inttoptr i64 %9806 to i64*
  %9810 = load i64, i64* %9809
  store i64 %9810, i64* %RAX, align 8, !tbaa !2428
  %9811 = load i64, i64* %RBP
  %9812 = sub i64 %9811, 40
  %9813 = load i64, i64* %PC
  %9814 = add i64 %9813, 4
  store i64 %9814, i64* %PC
  %9815 = inttoptr i64 %9812 to i64*
  %9816 = load i64, i64* %9815
  store i64 %9816, i64* %RCX, align 8, !tbaa !2428
  %9817 = load i64, i64* %RCX
  %9818 = add i64 %9817, 12
  %9819 = load i64, i64* %PC
  %9820 = add i64 %9819, 4
  store i64 %9820, i64* %PC
  %9821 = inttoptr i64 %9818 to i32*
  %9822 = load i32, i32* %9821
  %9823 = sext i32 %9822 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9824, align 1, !tbaa !2432
  %9825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9825, align 1, !tbaa !2446
  %9826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9826, align 1, !tbaa !2447
  %9827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9827, align 1, !tbaa !2448
  %9828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9828, align 1, !tbaa !2449
  %9829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9829, align 1, !tbaa !2450
  %9830 = load i64, i64* %RBP
  %9831 = sub i64 %9830, 40
  %9832 = load i64, i64* %PC
  %9833 = add i64 %9832, 4
  store i64 %9833, i64* %PC
  %9834 = inttoptr i64 %9831 to i64*
  %9835 = load i64, i64* %9834
  store i64 %9835, i64* %RCX, align 8, !tbaa !2428
  %9836 = load i64, i64* %RDX
  %9837 = load i64, i64* %RCX
  %9838 = add i64 %9837, 16
  %9839 = load i64, i64* %PC
  %9840 = add i64 %9839, 4
  store i64 %9840, i64* %PC
  %9841 = inttoptr i64 %9838 to i32*
  %9842 = load i32, i32* %9841
  %9843 = shl i64 %9836, 32
  %9844 = ashr exact i64 %9843, 32
  %9845 = sext i32 %9842 to i64
  %9846 = mul nsw i64 %9845, %9844
  %9847 = trunc i64 %9846 to i32
  %9848 = and i64 %9846, 4294967295
  store i64 %9848, i64* %RDX, align 8, !tbaa !2428
  %9849 = shl i64 %9846, 32
  %9850 = ashr exact i64 %9849, 32
  %9851 = icmp ne i64 %9850, %9846
  %9852 = zext i1 %9851 to i8
  %9853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9852, i8* %9853, align 1, !tbaa !2432
  %9854 = and i32 %9847, 255
  %9855 = call i32 @llvm.ctpop.i32(i32 %9854) #16
  %9856 = trunc i32 %9855 to i8
  %9857 = and i8 %9856, 1
  %9858 = xor i8 %9857, 1
  %9859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9858, i8* %9859, align 1, !tbaa !2446
  %9860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9860, align 1, !tbaa !2447
  %9861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9861, align 1, !tbaa !2448
  %9862 = lshr i32 %9847, 31
  %9863 = trunc i32 %9862 to i8
  %9864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9863, i8* %9864, align 1, !tbaa !2449
  %9865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9852, i8* %9865, align 1, !tbaa !2450
  %9866 = load i64, i64* %RBP
  %9867 = sub i64 %9866, 40
  %9868 = load i64, i64* %PC
  %9869 = add i64 %9868, 4
  store i64 %9869, i64* %PC
  %9870 = inttoptr i64 %9867 to i64*
  %9871 = load i64, i64* %9870
  store i64 %9871, i64* %RCX, align 8, !tbaa !2428
  %9872 = load i64, i64* %RDX
  %9873 = load i64, i64* %RCX
  %9874 = add i64 %9873, 20
  %9875 = load i64, i64* %PC
  %9876 = add i64 %9875, 4
  store i64 %9876, i64* %PC
  %9877 = inttoptr i64 %9874 to i32*
  %9878 = load i32, i32* %9877
  %9879 = shl i64 %9872, 32
  %9880 = ashr exact i64 %9879, 32
  %9881 = sext i32 %9878 to i64
  %9882 = mul nsw i64 %9881, %9880
  %9883 = trunc i64 %9882 to i32
  %9884 = and i64 %9882, 4294967295
  store i64 %9884, i64* %RDX, align 8, !tbaa !2428
  %9885 = shl i64 %9882, 32
  %9886 = ashr exact i64 %9885, 32
  %9887 = icmp ne i64 %9886, %9882
  %9888 = zext i1 %9887 to i8
  %9889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9888, i8* %9889, align 1, !tbaa !2432
  %9890 = and i32 %9883, 255
  %9891 = call i32 @llvm.ctpop.i32(i32 %9890) #16
  %9892 = trunc i32 %9891 to i8
  %9893 = and i8 %9892, 1
  %9894 = xor i8 %9893, 1
  %9895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9894, i8* %9895, align 1, !tbaa !2446
  %9896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9896, align 1, !tbaa !2447
  %9897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9897, align 1, !tbaa !2448
  %9898 = lshr i32 %9883, 31
  %9899 = trunc i32 %9898 to i8
  %9900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9899, i8* %9900, align 1, !tbaa !2449
  %9901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9888, i8* %9901, align 1, !tbaa !2450
  %9902 = load i64, i64* %RBP
  %9903 = sub i64 %9902, 68
  %9904 = load i64, i64* %PC
  %9905 = add i64 %9904, 3
  store i64 %9905, i64* %PC
  %9906 = inttoptr i64 %9903 to i32*
  %9907 = load i32, i32* %9906
  %9908 = zext i32 %9907 to i64
  store i64 %9908, i64* %RSI, align 8, !tbaa !2428
  %9909 = load i64, i64* %RSI
  %9910 = load i64, i64* %PC
  %9911 = add i64 %9910, 3
  store i64 %9911, i64* %PC
  %9912 = trunc i64 %9909 to i32
  %9913 = add i32 1, %9912
  %9914 = zext i32 %9913 to i64
  store i64 %9914, i64* %RSI, align 8, !tbaa !2428
  %9915 = icmp ult i32 %9913, %9912
  %9916 = icmp ult i32 %9913, 1
  %9917 = or i1 %9915, %9916
  %9918 = zext i1 %9917 to i8
  %9919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9918, i8* %9919, align 1, !tbaa !2432
  %9920 = and i32 %9913, 255
  %9921 = call i32 @llvm.ctpop.i32(i32 %9920) #16
  %9922 = trunc i32 %9921 to i8
  %9923 = and i8 %9922, 1
  %9924 = xor i8 %9923, 1
  %9925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9924, i8* %9925, align 1, !tbaa !2446
  %9926 = xor i64 1, %9909
  %9927 = trunc i64 %9926 to i32
  %9928 = xor i32 %9927, %9913
  %9929 = lshr i32 %9928, 4
  %9930 = trunc i32 %9929 to i8
  %9931 = and i8 %9930, 1
  %9932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9931, i8* %9932, align 1, !tbaa !2447
  %9933 = icmp eq i32 %9913, 0
  %9934 = zext i1 %9933 to i8
  %9935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9934, i8* %9935, align 1, !tbaa !2448
  %9936 = lshr i32 %9913, 31
  %9937 = trunc i32 %9936 to i8
  %9938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9937, i8* %9938, align 1, !tbaa !2449
  %9939 = lshr i32 %9912, 31
  %9940 = xor i32 %9936, %9939
  %9941 = add nuw nsw i32 %9940, %9936
  %9942 = icmp eq i32 %9941, 2
  %9943 = zext i1 %9942 to i8
  %9944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9943, i8* %9944, align 1, !tbaa !2450
  %9945 = load i64, i64* %RBP
  %9946 = sub i64 %9945, 40
  %9947 = load i64, i64* %PC
  %9948 = add i64 %9947, 4
  store i64 %9948, i64* %PC
  %9949 = inttoptr i64 %9946 to i64*
  %9950 = load i64, i64* %9949
  store i64 %9950, i64* %RCX, align 8, !tbaa !2428
  %9951 = load i64, i64* %RSI
  %9952 = load i64, i64* %RCX
  %9953 = add i64 %9952, 16
  %9954 = load i64, i64* %PC
  %9955 = add i64 %9954, 4
  store i64 %9955, i64* %PC
  %9956 = inttoptr i64 %9953 to i32*
  %9957 = load i32, i32* %9956
  %9958 = shl i64 %9951, 32
  %9959 = ashr exact i64 %9958, 32
  %9960 = sext i32 %9957 to i64
  %9961 = mul nsw i64 %9960, %9959
  %9962 = trunc i64 %9961 to i32
  %9963 = and i64 %9961, 4294967295
  store i64 %9963, i64* %RSI, align 8, !tbaa !2428
  %9964 = shl i64 %9961, 32
  %9965 = ashr exact i64 %9964, 32
  %9966 = icmp ne i64 %9965, %9961
  %9967 = zext i1 %9966 to i8
  %9968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9967, i8* %9968, align 1, !tbaa !2432
  %9969 = and i32 %9962, 255
  %9970 = call i32 @llvm.ctpop.i32(i32 %9969) #16
  %9971 = trunc i32 %9970 to i8
  %9972 = and i8 %9971, 1
  %9973 = xor i8 %9972, 1
  %9974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9973, i8* %9974, align 1, !tbaa !2446
  %9975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9975, align 1, !tbaa !2447
  %9976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9976, align 1, !tbaa !2448
  %9977 = lshr i32 %9962, 31
  %9978 = trunc i32 %9977 to i8
  %9979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9978, i8* %9979, align 1, !tbaa !2449
  %9980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9967, i8* %9980, align 1, !tbaa !2450
  %9981 = load i64, i64* %RBP
  %9982 = sub i64 %9981, 40
  %9983 = load i64, i64* %PC
  %9984 = add i64 %9983, 4
  store i64 %9984, i64* %PC
  %9985 = inttoptr i64 %9982 to i64*
  %9986 = load i64, i64* %9985
  store i64 %9986, i64* %RCX, align 8, !tbaa !2428
  %9987 = load i64, i64* %RSI
  %9988 = load i64, i64* %RCX
  %9989 = add i64 %9988, 20
  %9990 = load i64, i64* %PC
  %9991 = add i64 %9990, 4
  store i64 %9991, i64* %PC
  %9992 = inttoptr i64 %9989 to i32*
  %9993 = load i32, i32* %9992
  %9994 = shl i64 %9987, 32
  %9995 = ashr exact i64 %9994, 32
  %9996 = sext i32 %9993 to i64
  %9997 = mul nsw i64 %9996, %9995
  %9998 = trunc i64 %9997 to i32
  %9999 = and i64 %9997, 4294967295
  store i64 %9999, i64* %RSI, align 8, !tbaa !2428
  %10000 = shl i64 %9997, 32
  %10001 = ashr exact i64 %10000, 32
  %10002 = icmp ne i64 %10001, %9997
  %10003 = zext i1 %10002 to i8
  %10004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10003, i8* %10004, align 1, !tbaa !2432
  %10005 = and i32 %9998, 255
  %10006 = call i32 @llvm.ctpop.i32(i32 %10005) #16
  %10007 = trunc i32 %10006 to i8
  %10008 = and i8 %10007, 1
  %10009 = xor i8 %10008, 1
  %10010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10009, i8* %10010, align 1, !tbaa !2446
  %10011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10011, align 1, !tbaa !2447
  %10012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10012, align 1, !tbaa !2448
  %10013 = lshr i32 %9998, 31
  %10014 = trunc i32 %10013 to i8
  %10015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10014, i8* %10015, align 1, !tbaa !2449
  %10016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10003, i8* %10016, align 1, !tbaa !2450
  %10017 = load i64, i64* %RDX
  %10018 = load i32, i32* %ESI
  %10019 = zext i32 %10018 to i64
  %10020 = load i64, i64* %PC
  %10021 = add i64 %10020, 2
  store i64 %10021, i64* %PC
  %10022 = trunc i64 %10017 to i32
  %10023 = add i32 %10018, %10022
  %10024 = zext i32 %10023 to i64
  store i64 %10024, i64* %RDX, align 8, !tbaa !2428
  %10025 = icmp ult i32 %10023, %10022
  %10026 = icmp ult i32 %10023, %10018
  %10027 = or i1 %10025, %10026
  %10028 = zext i1 %10027 to i8
  %10029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10028, i8* %10029, align 1, !tbaa !2432
  %10030 = and i32 %10023, 255
  %10031 = call i32 @llvm.ctpop.i32(i32 %10030) #16
  %10032 = trunc i32 %10031 to i8
  %10033 = and i8 %10032, 1
  %10034 = xor i8 %10033, 1
  %10035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10034, i8* %10035, align 1, !tbaa !2446
  %10036 = xor i64 %10019, %10017
  %10037 = trunc i64 %10036 to i32
  %10038 = xor i32 %10037, %10023
  %10039 = lshr i32 %10038, 4
  %10040 = trunc i32 %10039 to i8
  %10041 = and i8 %10040, 1
  %10042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10041, i8* %10042, align 1, !tbaa !2447
  %10043 = icmp eq i32 %10023, 0
  %10044 = zext i1 %10043 to i8
  %10045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10044, i8* %10045, align 1, !tbaa !2448
  %10046 = lshr i32 %10023, 31
  %10047 = trunc i32 %10046 to i8
  %10048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10047, i8* %10048, align 1, !tbaa !2449
  %10049 = lshr i32 %10022, 31
  %10050 = lshr i32 %10018, 31
  %10051 = xor i32 %10046, %10049
  %10052 = xor i32 %10046, %10050
  %10053 = add nuw nsw i32 %10051, %10052
  %10054 = icmp eq i32 %10053, 2
  %10055 = zext i1 %10054 to i8
  %10056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10055, i8* %10056, align 1, !tbaa !2450
  %10057 = load i64, i64* %RBP
  %10058 = sub i64 %10057, 72
  %10059 = load i64, i64* %PC
  %10060 = add i64 %10059, 3
  store i64 %10060, i64* %PC
  %10061 = inttoptr i64 %10058 to i32*
  %10062 = load i32, i32* %10061
  %10063 = zext i32 %10062 to i64
  store i64 %10063, i64* %RSI, align 8, !tbaa !2428
  %10064 = load i64, i64* %RBP
  %10065 = sub i64 %10064, 40
  %10066 = load i64, i64* %PC
  %10067 = add i64 %10066, 4
  store i64 %10067, i64* %PC
  %10068 = inttoptr i64 %10065 to i64*
  %10069 = load i64, i64* %10068
  store i64 %10069, i64* %RCX, align 8, !tbaa !2428
  %10070 = load i64, i64* %RSI
  %10071 = load i64, i64* %RCX
  %10072 = add i64 %10071, 20
  %10073 = load i64, i64* %PC
  %10074 = add i64 %10073, 4
  store i64 %10074, i64* %PC
  %10075 = inttoptr i64 %10072 to i32*
  %10076 = load i32, i32* %10075
  %10077 = shl i64 %10070, 32
  %10078 = ashr exact i64 %10077, 32
  %10079 = sext i32 %10076 to i64
  %10080 = mul nsw i64 %10079, %10078
  %10081 = trunc i64 %10080 to i32
  %10082 = and i64 %10080, 4294967295
  store i64 %10082, i64* %RSI, align 8, !tbaa !2428
  %10083 = shl i64 %10080, 32
  %10084 = ashr exact i64 %10083, 32
  %10085 = icmp ne i64 %10084, %10080
  %10086 = zext i1 %10085 to i8
  %10087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10086, i8* %10087, align 1, !tbaa !2432
  %10088 = and i32 %10081, 255
  %10089 = call i32 @llvm.ctpop.i32(i32 %10088) #16
  %10090 = trunc i32 %10089 to i8
  %10091 = and i8 %10090, 1
  %10092 = xor i8 %10091, 1
  %10093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10092, i8* %10093, align 1, !tbaa !2446
  %10094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10094, align 1, !tbaa !2447
  %10095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10095, align 1, !tbaa !2448
  %10096 = lshr i32 %10081, 31
  %10097 = trunc i32 %10096 to i8
  %10098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10097, i8* %10098, align 1, !tbaa !2449
  %10099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10086, i8* %10099, align 1, !tbaa !2450
  %10100 = load i64, i64* %RDX
  %10101 = load i32, i32* %ESI
  %10102 = zext i32 %10101 to i64
  %10103 = load i64, i64* %PC
  %10104 = add i64 %10103, 2
  store i64 %10104, i64* %PC
  %10105 = trunc i64 %10100 to i32
  %10106 = add i32 %10101, %10105
  %10107 = zext i32 %10106 to i64
  store i64 %10107, i64* %RDX, align 8, !tbaa !2428
  %10108 = icmp ult i32 %10106, %10105
  %10109 = icmp ult i32 %10106, %10101
  %10110 = or i1 %10108, %10109
  %10111 = zext i1 %10110 to i8
  %10112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10111, i8* %10112, align 1, !tbaa !2432
  %10113 = and i32 %10106, 255
  %10114 = call i32 @llvm.ctpop.i32(i32 %10113) #16
  %10115 = trunc i32 %10114 to i8
  %10116 = and i8 %10115, 1
  %10117 = xor i8 %10116, 1
  %10118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10117, i8* %10118, align 1, !tbaa !2446
  %10119 = xor i64 %10102, %10100
  %10120 = trunc i64 %10119 to i32
  %10121 = xor i32 %10120, %10106
  %10122 = lshr i32 %10121, 4
  %10123 = trunc i32 %10122 to i8
  %10124 = and i8 %10123, 1
  %10125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10124, i8* %10125, align 1, !tbaa !2447
  %10126 = icmp eq i32 %10106, 0
  %10127 = zext i1 %10126 to i8
  %10128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10127, i8* %10128, align 1, !tbaa !2448
  %10129 = lshr i32 %10106, 31
  %10130 = trunc i32 %10129 to i8
  %10131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10130, i8* %10131, align 1, !tbaa !2449
  %10132 = lshr i32 %10105, 31
  %10133 = lshr i32 %10101, 31
  %10134 = xor i32 %10129, %10132
  %10135 = xor i32 %10129, %10133
  %10136 = add nuw nsw i32 %10134, %10135
  %10137 = icmp eq i32 %10136, 2
  %10138 = zext i1 %10137 to i8
  %10139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10138, i8* %10139, align 1, !tbaa !2450
  %10140 = load i64, i64* %RBP
  %10141 = sub i64 %10140, 76
  %10142 = load i64, i64* %PC
  %10143 = add i64 %10142, 3
  store i64 %10143, i64* %PC
  %10144 = inttoptr i64 %10141 to i32*
  %10145 = load i32, i32* %10144
  %10146 = zext i32 %10145 to i64
  store i64 %10146, i64* %RSI, align 8, !tbaa !2428
  %10147 = load i64, i64* %RSI
  %10148 = load i64, i64* %PC
  %10149 = add i64 %10148, 3
  store i64 %10149, i64* %PC
  %10150 = trunc i64 %10147 to i32
  %10151 = sub i32 %10150, 1
  %10152 = zext i32 %10151 to i64
  store i64 %10152, i64* %RSI, align 8, !tbaa !2428
  %10153 = icmp ult i32 %10150, 1
  %10154 = zext i1 %10153 to i8
  %10155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10154, i8* %10155, align 1, !tbaa !2432
  %10156 = and i32 %10151, 255
  %10157 = call i32 @llvm.ctpop.i32(i32 %10156) #16
  %10158 = trunc i32 %10157 to i8
  %10159 = and i8 %10158, 1
  %10160 = xor i8 %10159, 1
  %10161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10160, i8* %10161, align 1, !tbaa !2446
  %10162 = xor i64 1, %10147
  %10163 = trunc i64 %10162 to i32
  %10164 = xor i32 %10163, %10151
  %10165 = lshr i32 %10164, 4
  %10166 = trunc i32 %10165 to i8
  %10167 = and i8 %10166, 1
  %10168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10167, i8* %10168, align 1, !tbaa !2447
  %10169 = icmp eq i32 %10151, 0
  %10170 = zext i1 %10169 to i8
  %10171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10170, i8* %10171, align 1, !tbaa !2448
  %10172 = lshr i32 %10151, 31
  %10173 = trunc i32 %10172 to i8
  %10174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10173, i8* %10174, align 1, !tbaa !2449
  %10175 = lshr i32 %10150, 31
  %10176 = xor i32 %10172, %10175
  %10177 = add nuw nsw i32 %10176, %10175
  %10178 = icmp eq i32 %10177, 2
  %10179 = zext i1 %10178 to i8
  %10180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10179, i8* %10180, align 1, !tbaa !2450
  %10181 = load i64, i64* %RDX
  %10182 = load i32, i32* %ESI
  %10183 = zext i32 %10182 to i64
  %10184 = load i64, i64* %PC
  %10185 = add i64 %10184, 2
  store i64 %10185, i64* %PC
  %10186 = trunc i64 %10181 to i32
  %10187 = add i32 %10182, %10186
  %10188 = zext i32 %10187 to i64
  store i64 %10188, i64* %RDX, align 8, !tbaa !2428
  %10189 = icmp ult i32 %10187, %10186
  %10190 = icmp ult i32 %10187, %10182
  %10191 = or i1 %10189, %10190
  %10192 = zext i1 %10191 to i8
  %10193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10192, i8* %10193, align 1, !tbaa !2432
  %10194 = and i32 %10187, 255
  %10195 = call i32 @llvm.ctpop.i32(i32 %10194) #16
  %10196 = trunc i32 %10195 to i8
  %10197 = and i8 %10196, 1
  %10198 = xor i8 %10197, 1
  %10199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10198, i8* %10199, align 1, !tbaa !2446
  %10200 = xor i64 %10183, %10181
  %10201 = trunc i64 %10200 to i32
  %10202 = xor i32 %10201, %10187
  %10203 = lshr i32 %10202, 4
  %10204 = trunc i32 %10203 to i8
  %10205 = and i8 %10204, 1
  %10206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10205, i8* %10206, align 1, !tbaa !2447
  %10207 = icmp eq i32 %10187, 0
  %10208 = zext i1 %10207 to i8
  %10209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10208, i8* %10209, align 1, !tbaa !2448
  %10210 = lshr i32 %10187, 31
  %10211 = trunc i32 %10210 to i8
  %10212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10211, i8* %10212, align 1, !tbaa !2449
  %10213 = lshr i32 %10186, 31
  %10214 = lshr i32 %10182, 31
  %10215 = xor i32 %10210, %10213
  %10216 = xor i32 %10210, %10214
  %10217 = add nuw nsw i32 %10215, %10216
  %10218 = icmp eq i32 %10217, 2
  %10219 = zext i1 %10218 to i8
  %10220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10219, i8* %10220, align 1, !tbaa !2450
  %10221 = load i32, i32* %EDX
  %10222 = zext i32 %10221 to i64
  %10223 = load i64, i64* %PC
  %10224 = add i64 %10223, 3
  store i64 %10224, i64* %PC
  %10225 = shl i64 %10222, 32
  %10226 = ashr exact i64 %10225, 32
  store i64 %10226, i64* %RCX, align 8, !tbaa !2428
  %10227 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10228 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10229 = load i64, i64* %RAX
  %10230 = load i64, i64* %RCX
  %10231 = mul i64 %10230, 4
  %10232 = add i64 %10231, %10229
  %10233 = load i64, i64* %PC
  %10234 = add i64 %10233, 5
  store i64 %10234, i64* %PC
  %10235 = bitcast i8* %10228 to <2 x float>*
  %10236 = load <2 x float>, <2 x float>* %10235, align 1
  %10237 = getelementptr inbounds i8, i8* %10228, i64 8
  %10238 = bitcast i8* %10237 to <2 x i32>*
  %10239 = load <2 x i32>, <2 x i32>* %10238, align 1
  %10240 = inttoptr i64 %10232 to float*
  %10241 = load float, float* %10240
  %10242 = extractelement <2 x float> %10236, i32 0
  %10243 = fsub float %10242, %10241
  %10244 = bitcast i8* %10227 to float*
  store float %10243, float* %10244, align 1, !tbaa !2452
  %10245 = bitcast <2 x float> %10236 to <2 x i32>
  %10246 = extractelement <2 x i32> %10245, i32 1
  %10247 = getelementptr inbounds i8, i8* %10227, i64 4
  %10248 = bitcast i8* %10247 to i32*
  store i32 %10246, i32* %10248, align 1, !tbaa !2452
  %10249 = extractelement <2 x i32> %10239, i32 0
  %10250 = getelementptr inbounds i8, i8* %10227, i64 8
  %10251 = bitcast i8* %10250 to i32*
  store i32 %10249, i32* %10251, align 1, !tbaa !2452
  %10252 = extractelement <2 x i32> %10239, i32 1
  %10253 = getelementptr inbounds i8, i8* %10227, i64 12
  %10254 = bitcast i8* %10253 to i32*
  store i32 %10252, i32* %10254, align 1, !tbaa !2452
  %10255 = load i64, i64* %RBP
  %10256 = sub i64 %10255, 40
  %10257 = load i64, i64* %PC
  %10258 = add i64 %10257, 4
  store i64 %10258, i64* %PC
  %10259 = inttoptr i64 %10256 to i64*
  %10260 = load i64, i64* %10259
  store i64 %10260, i64* %RAX, align 8, !tbaa !2428
  %10261 = load i64, i64* %RAX
  %10262 = load i64, i64* %PC
  %10263 = add i64 %10262, 3
  store i64 %10263, i64* %PC
  %10264 = inttoptr i64 %10261 to i64*
  %10265 = load i64, i64* %10264
  store i64 %10265, i64* %RAX, align 8, !tbaa !2428
  %10266 = load i64, i64* %RBP
  %10267 = sub i64 %10266, 40
  %10268 = load i64, i64* %PC
  %10269 = add i64 %10268, 4
  store i64 %10269, i64* %PC
  %10270 = inttoptr i64 %10267 to i64*
  %10271 = load i64, i64* %10270
  store i64 %10271, i64* %RCX, align 8, !tbaa !2428
  %10272 = load i64, i64* %RCX
  %10273 = add i64 %10272, 12
  %10274 = load i64, i64* %PC
  %10275 = add i64 %10274, 4
  store i64 %10275, i64* %PC
  %10276 = inttoptr i64 %10273 to i32*
  %10277 = load i32, i32* %10276
  %10278 = sext i32 %10277 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %10279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10279, align 1, !tbaa !2432
  %10280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10280, align 1, !tbaa !2446
  %10281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10281, align 1, !tbaa !2447
  %10282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10282, align 1, !tbaa !2448
  %10283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10283, align 1, !tbaa !2449
  %10284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10284, align 1, !tbaa !2450
  %10285 = load i64, i64* %RBP
  %10286 = sub i64 %10285, 40
  %10287 = load i64, i64* %PC
  %10288 = add i64 %10287, 4
  store i64 %10288, i64* %PC
  %10289 = inttoptr i64 %10286 to i64*
  %10290 = load i64, i64* %10289
  store i64 %10290, i64* %RCX, align 8, !tbaa !2428
  %10291 = load i64, i64* %RDX
  %10292 = load i64, i64* %RCX
  %10293 = add i64 %10292, 16
  %10294 = load i64, i64* %PC
  %10295 = add i64 %10294, 4
  store i64 %10295, i64* %PC
  %10296 = inttoptr i64 %10293 to i32*
  %10297 = load i32, i32* %10296
  %10298 = shl i64 %10291, 32
  %10299 = ashr exact i64 %10298, 32
  %10300 = sext i32 %10297 to i64
  %10301 = mul nsw i64 %10300, %10299
  %10302 = trunc i64 %10301 to i32
  %10303 = and i64 %10301, 4294967295
  store i64 %10303, i64* %RDX, align 8, !tbaa !2428
  %10304 = shl i64 %10301, 32
  %10305 = ashr exact i64 %10304, 32
  %10306 = icmp ne i64 %10305, %10301
  %10307 = zext i1 %10306 to i8
  %10308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10307, i8* %10308, align 1, !tbaa !2432
  %10309 = and i32 %10302, 255
  %10310 = call i32 @llvm.ctpop.i32(i32 %10309) #16
  %10311 = trunc i32 %10310 to i8
  %10312 = and i8 %10311, 1
  %10313 = xor i8 %10312, 1
  %10314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10313, i8* %10314, align 1, !tbaa !2446
  %10315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10315, align 1, !tbaa !2447
  %10316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10316, align 1, !tbaa !2448
  %10317 = lshr i32 %10302, 31
  %10318 = trunc i32 %10317 to i8
  %10319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10318, i8* %10319, align 1, !tbaa !2449
  %10320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10307, i8* %10320, align 1, !tbaa !2450
  %10321 = load i64, i64* %RBP
  %10322 = sub i64 %10321, 40
  %10323 = load i64, i64* %PC
  %10324 = add i64 %10323, 4
  store i64 %10324, i64* %PC
  %10325 = inttoptr i64 %10322 to i64*
  %10326 = load i64, i64* %10325
  store i64 %10326, i64* %RCX, align 8, !tbaa !2428
  %10327 = load i64, i64* %RDX
  %10328 = load i64, i64* %RCX
  %10329 = add i64 %10328, 20
  %10330 = load i64, i64* %PC
  %10331 = add i64 %10330, 4
  store i64 %10331, i64* %PC
  %10332 = inttoptr i64 %10329 to i32*
  %10333 = load i32, i32* %10332
  %10334 = shl i64 %10327, 32
  %10335 = ashr exact i64 %10334, 32
  %10336 = sext i32 %10333 to i64
  %10337 = mul nsw i64 %10336, %10335
  %10338 = trunc i64 %10337 to i32
  %10339 = and i64 %10337, 4294967295
  store i64 %10339, i64* %RDX, align 8, !tbaa !2428
  %10340 = shl i64 %10337, 32
  %10341 = ashr exact i64 %10340, 32
  %10342 = icmp ne i64 %10341, %10337
  %10343 = zext i1 %10342 to i8
  %10344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10343, i8* %10344, align 1, !tbaa !2432
  %10345 = and i32 %10338, 255
  %10346 = call i32 @llvm.ctpop.i32(i32 %10345) #16
  %10347 = trunc i32 %10346 to i8
  %10348 = and i8 %10347, 1
  %10349 = xor i8 %10348, 1
  %10350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10349, i8* %10350, align 1, !tbaa !2446
  %10351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10351, align 1, !tbaa !2447
  %10352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10352, align 1, !tbaa !2448
  %10353 = lshr i32 %10338, 31
  %10354 = trunc i32 %10353 to i8
  %10355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10354, i8* %10355, align 1, !tbaa !2449
  %10356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10343, i8* %10356, align 1, !tbaa !2450
  %10357 = load i64, i64* %RBP
  %10358 = sub i64 %10357, 68
  %10359 = load i64, i64* %PC
  %10360 = add i64 %10359, 3
  store i64 %10360, i64* %PC
  %10361 = inttoptr i64 %10358 to i32*
  %10362 = load i32, i32* %10361
  %10363 = zext i32 %10362 to i64
  store i64 %10363, i64* %RSI, align 8, !tbaa !2428
  %10364 = load i64, i64* %RSI
  %10365 = load i64, i64* %PC
  %10366 = add i64 %10365, 3
  store i64 %10366, i64* %PC
  %10367 = trunc i64 %10364 to i32
  %10368 = sub i32 %10367, 1
  %10369 = zext i32 %10368 to i64
  store i64 %10369, i64* %RSI, align 8, !tbaa !2428
  %10370 = icmp ult i32 %10367, 1
  %10371 = zext i1 %10370 to i8
  %10372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10371, i8* %10372, align 1, !tbaa !2432
  %10373 = and i32 %10368, 255
  %10374 = call i32 @llvm.ctpop.i32(i32 %10373) #16
  %10375 = trunc i32 %10374 to i8
  %10376 = and i8 %10375, 1
  %10377 = xor i8 %10376, 1
  %10378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10377, i8* %10378, align 1, !tbaa !2446
  %10379 = xor i64 1, %10364
  %10380 = trunc i64 %10379 to i32
  %10381 = xor i32 %10380, %10368
  %10382 = lshr i32 %10381, 4
  %10383 = trunc i32 %10382 to i8
  %10384 = and i8 %10383, 1
  %10385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10384, i8* %10385, align 1, !tbaa !2447
  %10386 = icmp eq i32 %10368, 0
  %10387 = zext i1 %10386 to i8
  %10388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10387, i8* %10388, align 1, !tbaa !2448
  %10389 = lshr i32 %10368, 31
  %10390 = trunc i32 %10389 to i8
  %10391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10390, i8* %10391, align 1, !tbaa !2449
  %10392 = lshr i32 %10367, 31
  %10393 = xor i32 %10389, %10392
  %10394 = add nuw nsw i32 %10393, %10392
  %10395 = icmp eq i32 %10394, 2
  %10396 = zext i1 %10395 to i8
  %10397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10396, i8* %10397, align 1, !tbaa !2450
  %10398 = load i64, i64* %RBP
  %10399 = sub i64 %10398, 40
  %10400 = load i64, i64* %PC
  %10401 = add i64 %10400, 4
  store i64 %10401, i64* %PC
  %10402 = inttoptr i64 %10399 to i64*
  %10403 = load i64, i64* %10402
  store i64 %10403, i64* %RCX, align 8, !tbaa !2428
  %10404 = load i64, i64* %RSI
  %10405 = load i64, i64* %RCX
  %10406 = add i64 %10405, 16
  %10407 = load i64, i64* %PC
  %10408 = add i64 %10407, 4
  store i64 %10408, i64* %PC
  %10409 = inttoptr i64 %10406 to i32*
  %10410 = load i32, i32* %10409
  %10411 = shl i64 %10404, 32
  %10412 = ashr exact i64 %10411, 32
  %10413 = sext i32 %10410 to i64
  %10414 = mul nsw i64 %10413, %10412
  %10415 = trunc i64 %10414 to i32
  %10416 = and i64 %10414, 4294967295
  store i64 %10416, i64* %RSI, align 8, !tbaa !2428
  %10417 = shl i64 %10414, 32
  %10418 = ashr exact i64 %10417, 32
  %10419 = icmp ne i64 %10418, %10414
  %10420 = zext i1 %10419 to i8
  %10421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10420, i8* %10421, align 1, !tbaa !2432
  %10422 = and i32 %10415, 255
  %10423 = call i32 @llvm.ctpop.i32(i32 %10422) #16
  %10424 = trunc i32 %10423 to i8
  %10425 = and i8 %10424, 1
  %10426 = xor i8 %10425, 1
  %10427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10426, i8* %10427, align 1, !tbaa !2446
  %10428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10428, align 1, !tbaa !2447
  %10429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10429, align 1, !tbaa !2448
  %10430 = lshr i32 %10415, 31
  %10431 = trunc i32 %10430 to i8
  %10432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10431, i8* %10432, align 1, !tbaa !2449
  %10433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10420, i8* %10433, align 1, !tbaa !2450
  %10434 = load i64, i64* %RBP
  %10435 = sub i64 %10434, 40
  %10436 = load i64, i64* %PC
  %10437 = add i64 %10436, 4
  store i64 %10437, i64* %PC
  %10438 = inttoptr i64 %10435 to i64*
  %10439 = load i64, i64* %10438
  store i64 %10439, i64* %RCX, align 8, !tbaa !2428
  %10440 = load i64, i64* %RSI
  %10441 = load i64, i64* %RCX
  %10442 = add i64 %10441, 20
  %10443 = load i64, i64* %PC
  %10444 = add i64 %10443, 4
  store i64 %10444, i64* %PC
  %10445 = inttoptr i64 %10442 to i32*
  %10446 = load i32, i32* %10445
  %10447 = shl i64 %10440, 32
  %10448 = ashr exact i64 %10447, 32
  %10449 = sext i32 %10446 to i64
  %10450 = mul nsw i64 %10449, %10448
  %10451 = trunc i64 %10450 to i32
  %10452 = and i64 %10450, 4294967295
  store i64 %10452, i64* %RSI, align 8, !tbaa !2428
  %10453 = shl i64 %10450, 32
  %10454 = ashr exact i64 %10453, 32
  %10455 = icmp ne i64 %10454, %10450
  %10456 = zext i1 %10455 to i8
  %10457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10456, i8* %10457, align 1, !tbaa !2432
  %10458 = and i32 %10451, 255
  %10459 = call i32 @llvm.ctpop.i32(i32 %10458) #16
  %10460 = trunc i32 %10459 to i8
  %10461 = and i8 %10460, 1
  %10462 = xor i8 %10461, 1
  %10463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10462, i8* %10463, align 1, !tbaa !2446
  %10464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10464, align 1, !tbaa !2447
  %10465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10465, align 1, !tbaa !2448
  %10466 = lshr i32 %10451, 31
  %10467 = trunc i32 %10466 to i8
  %10468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10467, i8* %10468, align 1, !tbaa !2449
  %10469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10456, i8* %10469, align 1, !tbaa !2450
  %10470 = load i64, i64* %RDX
  %10471 = load i32, i32* %ESI
  %10472 = zext i32 %10471 to i64
  %10473 = load i64, i64* %PC
  %10474 = add i64 %10473, 2
  store i64 %10474, i64* %PC
  %10475 = trunc i64 %10470 to i32
  %10476 = add i32 %10471, %10475
  %10477 = zext i32 %10476 to i64
  store i64 %10477, i64* %RDX, align 8, !tbaa !2428
  %10478 = icmp ult i32 %10476, %10475
  %10479 = icmp ult i32 %10476, %10471
  %10480 = or i1 %10478, %10479
  %10481 = zext i1 %10480 to i8
  %10482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10481, i8* %10482, align 1, !tbaa !2432
  %10483 = and i32 %10476, 255
  %10484 = call i32 @llvm.ctpop.i32(i32 %10483) #16
  %10485 = trunc i32 %10484 to i8
  %10486 = and i8 %10485, 1
  %10487 = xor i8 %10486, 1
  %10488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10487, i8* %10488, align 1, !tbaa !2446
  %10489 = xor i64 %10472, %10470
  %10490 = trunc i64 %10489 to i32
  %10491 = xor i32 %10490, %10476
  %10492 = lshr i32 %10491, 4
  %10493 = trunc i32 %10492 to i8
  %10494 = and i8 %10493, 1
  %10495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10494, i8* %10495, align 1, !tbaa !2447
  %10496 = icmp eq i32 %10476, 0
  %10497 = zext i1 %10496 to i8
  %10498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10497, i8* %10498, align 1, !tbaa !2448
  %10499 = lshr i32 %10476, 31
  %10500 = trunc i32 %10499 to i8
  %10501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10500, i8* %10501, align 1, !tbaa !2449
  %10502 = lshr i32 %10475, 31
  %10503 = lshr i32 %10471, 31
  %10504 = xor i32 %10499, %10502
  %10505 = xor i32 %10499, %10503
  %10506 = add nuw nsw i32 %10504, %10505
  %10507 = icmp eq i32 %10506, 2
  %10508 = zext i1 %10507 to i8
  %10509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10508, i8* %10509, align 1, !tbaa !2450
  %10510 = load i64, i64* %RBP
  %10511 = sub i64 %10510, 72
  %10512 = load i64, i64* %PC
  %10513 = add i64 %10512, 3
  store i64 %10513, i64* %PC
  %10514 = inttoptr i64 %10511 to i32*
  %10515 = load i32, i32* %10514
  %10516 = zext i32 %10515 to i64
  store i64 %10516, i64* %RSI, align 8, !tbaa !2428
  %10517 = load i64, i64* %RBP
  %10518 = sub i64 %10517, 40
  %10519 = load i64, i64* %PC
  %10520 = add i64 %10519, 4
  store i64 %10520, i64* %PC
  %10521 = inttoptr i64 %10518 to i64*
  %10522 = load i64, i64* %10521
  store i64 %10522, i64* %RCX, align 8, !tbaa !2428
  %10523 = load i64, i64* %RSI
  %10524 = load i64, i64* %RCX
  %10525 = add i64 %10524, 20
  %10526 = load i64, i64* %PC
  %10527 = add i64 %10526, 4
  store i64 %10527, i64* %PC
  %10528 = inttoptr i64 %10525 to i32*
  %10529 = load i32, i32* %10528
  %10530 = shl i64 %10523, 32
  %10531 = ashr exact i64 %10530, 32
  %10532 = sext i32 %10529 to i64
  %10533 = mul nsw i64 %10532, %10531
  %10534 = trunc i64 %10533 to i32
  %10535 = and i64 %10533, 4294967295
  store i64 %10535, i64* %RSI, align 8, !tbaa !2428
  %10536 = shl i64 %10533, 32
  %10537 = ashr exact i64 %10536, 32
  %10538 = icmp ne i64 %10537, %10533
  %10539 = zext i1 %10538 to i8
  %10540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10539, i8* %10540, align 1, !tbaa !2432
  %10541 = and i32 %10534, 255
  %10542 = call i32 @llvm.ctpop.i32(i32 %10541) #16
  %10543 = trunc i32 %10542 to i8
  %10544 = and i8 %10543, 1
  %10545 = xor i8 %10544, 1
  %10546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10545, i8* %10546, align 1, !tbaa !2446
  %10547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10547, align 1, !tbaa !2447
  %10548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10548, align 1, !tbaa !2448
  %10549 = lshr i32 %10534, 31
  %10550 = trunc i32 %10549 to i8
  %10551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10550, i8* %10551, align 1, !tbaa !2449
  %10552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10539, i8* %10552, align 1, !tbaa !2450
  %10553 = load i64, i64* %RDX
  %10554 = load i32, i32* %ESI
  %10555 = zext i32 %10554 to i64
  %10556 = load i64, i64* %PC
  %10557 = add i64 %10556, 2
  store i64 %10557, i64* %PC
  %10558 = trunc i64 %10553 to i32
  %10559 = add i32 %10554, %10558
  %10560 = zext i32 %10559 to i64
  store i64 %10560, i64* %RDX, align 8, !tbaa !2428
  %10561 = icmp ult i32 %10559, %10558
  %10562 = icmp ult i32 %10559, %10554
  %10563 = or i1 %10561, %10562
  %10564 = zext i1 %10563 to i8
  %10565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10564, i8* %10565, align 1, !tbaa !2432
  %10566 = and i32 %10559, 255
  %10567 = call i32 @llvm.ctpop.i32(i32 %10566) #16
  %10568 = trunc i32 %10567 to i8
  %10569 = and i8 %10568, 1
  %10570 = xor i8 %10569, 1
  %10571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10570, i8* %10571, align 1, !tbaa !2446
  %10572 = xor i64 %10555, %10553
  %10573 = trunc i64 %10572 to i32
  %10574 = xor i32 %10573, %10559
  %10575 = lshr i32 %10574, 4
  %10576 = trunc i32 %10575 to i8
  %10577 = and i8 %10576, 1
  %10578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10577, i8* %10578, align 1, !tbaa !2447
  %10579 = icmp eq i32 %10559, 0
  %10580 = zext i1 %10579 to i8
  %10581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10580, i8* %10581, align 1, !tbaa !2448
  %10582 = lshr i32 %10559, 31
  %10583 = trunc i32 %10582 to i8
  %10584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10583, i8* %10584, align 1, !tbaa !2449
  %10585 = lshr i32 %10558, 31
  %10586 = lshr i32 %10554, 31
  %10587 = xor i32 %10582, %10585
  %10588 = xor i32 %10582, %10586
  %10589 = add nuw nsw i32 %10587, %10588
  %10590 = icmp eq i32 %10589, 2
  %10591 = zext i1 %10590 to i8
  %10592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10591, i8* %10592, align 1, !tbaa !2450
  %10593 = load i64, i64* %RBP
  %10594 = sub i64 %10593, 76
  %10595 = load i64, i64* %PC
  %10596 = add i64 %10595, 3
  store i64 %10596, i64* %PC
  %10597 = inttoptr i64 %10594 to i32*
  %10598 = load i32, i32* %10597
  %10599 = zext i32 %10598 to i64
  store i64 %10599, i64* %RSI, align 8, !tbaa !2428
  %10600 = load i64, i64* %RSI
  %10601 = load i64, i64* %PC
  %10602 = add i64 %10601, 3
  store i64 %10602, i64* %PC
  %10603 = trunc i64 %10600 to i32
  %10604 = sub i32 %10603, 1
  %10605 = zext i32 %10604 to i64
  store i64 %10605, i64* %RSI, align 8, !tbaa !2428
  %10606 = icmp ult i32 %10603, 1
  %10607 = zext i1 %10606 to i8
  %10608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10607, i8* %10608, align 1, !tbaa !2432
  %10609 = and i32 %10604, 255
  %10610 = call i32 @llvm.ctpop.i32(i32 %10609) #16
  %10611 = trunc i32 %10610 to i8
  %10612 = and i8 %10611, 1
  %10613 = xor i8 %10612, 1
  %10614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10613, i8* %10614, align 1, !tbaa !2446
  %10615 = xor i64 1, %10600
  %10616 = trunc i64 %10615 to i32
  %10617 = xor i32 %10616, %10604
  %10618 = lshr i32 %10617, 4
  %10619 = trunc i32 %10618 to i8
  %10620 = and i8 %10619, 1
  %10621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10620, i8* %10621, align 1, !tbaa !2447
  %10622 = icmp eq i32 %10604, 0
  %10623 = zext i1 %10622 to i8
  %10624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10623, i8* %10624, align 1, !tbaa !2448
  %10625 = lshr i32 %10604, 31
  %10626 = trunc i32 %10625 to i8
  %10627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10626, i8* %10627, align 1, !tbaa !2449
  %10628 = lshr i32 %10603, 31
  %10629 = xor i32 %10625, %10628
  %10630 = add nuw nsw i32 %10629, %10628
  %10631 = icmp eq i32 %10630, 2
  %10632 = zext i1 %10631 to i8
  %10633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10632, i8* %10633, align 1, !tbaa !2450
  %10634 = load i64, i64* %RDX
  %10635 = load i32, i32* %ESI
  %10636 = zext i32 %10635 to i64
  %10637 = load i64, i64* %PC
  %10638 = add i64 %10637, 2
  store i64 %10638, i64* %PC
  %10639 = trunc i64 %10634 to i32
  %10640 = add i32 %10635, %10639
  %10641 = zext i32 %10640 to i64
  store i64 %10641, i64* %RDX, align 8, !tbaa !2428
  %10642 = icmp ult i32 %10640, %10639
  %10643 = icmp ult i32 %10640, %10635
  %10644 = or i1 %10642, %10643
  %10645 = zext i1 %10644 to i8
  %10646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10645, i8* %10646, align 1, !tbaa !2432
  %10647 = and i32 %10640, 255
  %10648 = call i32 @llvm.ctpop.i32(i32 %10647) #16
  %10649 = trunc i32 %10648 to i8
  %10650 = and i8 %10649, 1
  %10651 = xor i8 %10650, 1
  %10652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10651, i8* %10652, align 1, !tbaa !2446
  %10653 = xor i64 %10636, %10634
  %10654 = trunc i64 %10653 to i32
  %10655 = xor i32 %10654, %10640
  %10656 = lshr i32 %10655, 4
  %10657 = trunc i32 %10656 to i8
  %10658 = and i8 %10657, 1
  %10659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10658, i8* %10659, align 1, !tbaa !2447
  %10660 = icmp eq i32 %10640, 0
  %10661 = zext i1 %10660 to i8
  %10662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10661, i8* %10662, align 1, !tbaa !2448
  %10663 = lshr i32 %10640, 31
  %10664 = trunc i32 %10663 to i8
  %10665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10664, i8* %10665, align 1, !tbaa !2449
  %10666 = lshr i32 %10639, 31
  %10667 = lshr i32 %10635, 31
  %10668 = xor i32 %10663, %10666
  %10669 = xor i32 %10663, %10667
  %10670 = add nuw nsw i32 %10668, %10669
  %10671 = icmp eq i32 %10670, 2
  %10672 = zext i1 %10671 to i8
  %10673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10672, i8* %10673, align 1, !tbaa !2450
  %10674 = load i32, i32* %EDX
  %10675 = zext i32 %10674 to i64
  %10676 = load i64, i64* %PC
  %10677 = add i64 %10676, 3
  store i64 %10677, i64* %PC
  %10678 = shl i64 %10675, 32
  %10679 = ashr exact i64 %10678, 32
  store i64 %10679, i64* %RCX, align 8, !tbaa !2428
  %10680 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10681 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10682 = load i64, i64* %RAX
  %10683 = load i64, i64* %RCX
  %10684 = mul i64 %10683, 4
  %10685 = add i64 %10684, %10682
  %10686 = load i64, i64* %PC
  %10687 = add i64 %10686, 5
  store i64 %10687, i64* %PC
  %10688 = bitcast i8* %10681 to <2 x float>*
  %10689 = load <2 x float>, <2 x float>* %10688, align 1
  %10690 = getelementptr inbounds i8, i8* %10681, i64 8
  %10691 = bitcast i8* %10690 to <2 x i32>*
  %10692 = load <2 x i32>, <2 x i32>* %10691, align 1
  %10693 = inttoptr i64 %10685 to float*
  %10694 = load float, float* %10693
  %10695 = extractelement <2 x float> %10689, i32 0
  %10696 = fadd float %10695, %10694
  %10697 = bitcast i8* %10680 to float*
  store float %10696, float* %10697, align 1, !tbaa !2452
  %10698 = bitcast <2 x float> %10689 to <2 x i32>
  %10699 = extractelement <2 x i32> %10698, i32 1
  %10700 = getelementptr inbounds i8, i8* %10680, i64 4
  %10701 = bitcast i8* %10700 to i32*
  store i32 %10699, i32* %10701, align 1, !tbaa !2452
  %10702 = extractelement <2 x i32> %10692, i32 0
  %10703 = getelementptr inbounds i8, i8* %10680, i64 8
  %10704 = bitcast i8* %10703 to i32*
  store i32 %10702, i32* %10704, align 1, !tbaa !2452
  %10705 = extractelement <2 x i32> %10692, i32 1
  %10706 = getelementptr inbounds i8, i8* %10680, i64 12
  %10707 = bitcast i8* %10706 to i32*
  store i32 %10705, i32* %10707, align 1, !tbaa !2452
  %10708 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10709 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10710 = bitcast %union.vec128_t* %XMM2 to i8*
  %10711 = load i64, i64* %PC
  %10712 = add i64 %10711, 4
  store i64 %10712, i64* %PC
  %10713 = bitcast i8* %10709 to <2 x float>*
  %10714 = load <2 x float>, <2 x float>* %10713, align 1
  %10715 = getelementptr inbounds i8, i8* %10709, i64 8
  %10716 = bitcast i8* %10715 to <2 x i32>*
  %10717 = load <2 x i32>, <2 x i32>* %10716, align 1
  %10718 = bitcast i8* %10710 to <2 x float>*
  %10719 = load <2 x float>, <2 x float>* %10718, align 1
  %10720 = extractelement <2 x float> %10714, i32 0
  %10721 = extractelement <2 x float> %10719, i32 0
  %10722 = fmul float %10720, %10721
  %10723 = bitcast i8* %10708 to float*
  store float %10722, float* %10723, align 1, !tbaa !2452
  %10724 = bitcast <2 x float> %10714 to <2 x i32>
  %10725 = extractelement <2 x i32> %10724, i32 1
  %10726 = getelementptr inbounds i8, i8* %10708, i64 4
  %10727 = bitcast i8* %10726 to i32*
  store i32 %10725, i32* %10727, align 1, !tbaa !2452
  %10728 = extractelement <2 x i32> %10717, i32 0
  %10729 = getelementptr inbounds i8, i8* %10708, i64 8
  %10730 = bitcast i8* %10729 to i32*
  store i32 %10728, i32* %10730, align 1, !tbaa !2452
  %10731 = extractelement <2 x i32> %10717, i32 1
  %10732 = getelementptr inbounds i8, i8* %10708, i64 12
  %10733 = bitcast i8* %10732 to i32*
  store i32 %10731, i32* %10733, align 1, !tbaa !2452
  %10734 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10736 = bitcast %union.vec128_t* %XMM1 to i8*
  %10737 = load i64, i64* %PC
  %10738 = add i64 %10737, 4
  store i64 %10738, i64* %PC
  %10739 = bitcast i8* %10735 to <2 x float>*
  %10740 = load <2 x float>, <2 x float>* %10739, align 1
  %10741 = getelementptr inbounds i8, i8* %10735, i64 8
  %10742 = bitcast i8* %10741 to <2 x i32>*
  %10743 = load <2 x i32>, <2 x i32>* %10742, align 1
  %10744 = bitcast i8* %10736 to <2 x float>*
  %10745 = load <2 x float>, <2 x float>* %10744, align 1
  %10746 = extractelement <2 x float> %10740, i32 0
  %10747 = extractelement <2 x float> %10745, i32 0
  %10748 = fadd float %10746, %10747
  %10749 = bitcast i8* %10734 to float*
  store float %10748, float* %10749, align 1, !tbaa !2452
  %10750 = bitcast <2 x float> %10740 to <2 x i32>
  %10751 = extractelement <2 x i32> %10750, i32 1
  %10752 = getelementptr inbounds i8, i8* %10734, i64 4
  %10753 = bitcast i8* %10752 to i32*
  store i32 %10751, i32* %10753, align 1, !tbaa !2452
  %10754 = extractelement <2 x i32> %10743, i32 0
  %10755 = getelementptr inbounds i8, i8* %10734, i64 8
  %10756 = bitcast i8* %10755 to i32*
  store i32 %10754, i32* %10756, align 1, !tbaa !2452
  %10757 = extractelement <2 x i32> %10743, i32 1
  %10758 = getelementptr inbounds i8, i8* %10734, i64 12
  %10759 = bitcast i8* %10758 to i32*
  store i32 %10757, i32* %10759, align 1, !tbaa !2452
  %10760 = load i64, i64* %RBP
  %10761 = sub i64 %10760, 32
  %10762 = load i64, i64* %PC
  %10763 = add i64 %10762, 4
  store i64 %10763, i64* %PC
  %10764 = inttoptr i64 %10761 to i64*
  %10765 = load i64, i64* %10764
  store i64 %10765, i64* %RAX, align 8, !tbaa !2428
  %10766 = load i64, i64* %RAX
  %10767 = load i64, i64* %PC
  %10768 = add i64 %10767, 3
  store i64 %10768, i64* %PC
  %10769 = inttoptr i64 %10766 to i64*
  %10770 = load i64, i64* %10769
  store i64 %10770, i64* %RAX, align 8, !tbaa !2428
  %10771 = load i64, i64* %RBP
  %10772 = sub i64 %10771, 32
  %10773 = load i64, i64* %PC
  %10774 = add i64 %10773, 4
  store i64 %10774, i64* %PC
  %10775 = inttoptr i64 %10772 to i64*
  %10776 = load i64, i64* %10775
  store i64 %10776, i64* %RCX, align 8, !tbaa !2428
  %10777 = load i64, i64* %RCX
  %10778 = add i64 %10777, 12
  %10779 = load i64, i64* %PC
  %10780 = add i64 %10779, 4
  store i64 %10780, i64* %PC
  %10781 = inttoptr i64 %10778 to i32*
  %10782 = load i32, i32* %10781
  %10783 = sext i32 %10782 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %10784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10784, align 1, !tbaa !2432
  %10785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10785, align 1, !tbaa !2446
  %10786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10786, align 1, !tbaa !2447
  %10787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10787, align 1, !tbaa !2448
  %10788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10788, align 1, !tbaa !2449
  %10789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10789, align 1, !tbaa !2450
  %10790 = load i64, i64* %RBP
  %10791 = sub i64 %10790, 32
  %10792 = load i64, i64* %PC
  %10793 = add i64 %10792, 4
  store i64 %10793, i64* %PC
  %10794 = inttoptr i64 %10791 to i64*
  %10795 = load i64, i64* %10794
  store i64 %10795, i64* %RCX, align 8, !tbaa !2428
  %10796 = load i64, i64* %RDX
  %10797 = load i64, i64* %RCX
  %10798 = add i64 %10797, 16
  %10799 = load i64, i64* %PC
  %10800 = add i64 %10799, 4
  store i64 %10800, i64* %PC
  %10801 = inttoptr i64 %10798 to i32*
  %10802 = load i32, i32* %10801
  %10803 = shl i64 %10796, 32
  %10804 = ashr exact i64 %10803, 32
  %10805 = sext i32 %10802 to i64
  %10806 = mul nsw i64 %10805, %10804
  %10807 = trunc i64 %10806 to i32
  %10808 = and i64 %10806, 4294967295
  store i64 %10808, i64* %RDX, align 8, !tbaa !2428
  %10809 = shl i64 %10806, 32
  %10810 = ashr exact i64 %10809, 32
  %10811 = icmp ne i64 %10810, %10806
  %10812 = zext i1 %10811 to i8
  %10813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10812, i8* %10813, align 1, !tbaa !2432
  %10814 = and i32 %10807, 255
  %10815 = call i32 @llvm.ctpop.i32(i32 %10814) #16
  %10816 = trunc i32 %10815 to i8
  %10817 = and i8 %10816, 1
  %10818 = xor i8 %10817, 1
  %10819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10818, i8* %10819, align 1, !tbaa !2446
  %10820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10820, align 1, !tbaa !2447
  %10821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10821, align 1, !tbaa !2448
  %10822 = lshr i32 %10807, 31
  %10823 = trunc i32 %10822 to i8
  %10824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10823, i8* %10824, align 1, !tbaa !2449
  %10825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10812, i8* %10825, align 1, !tbaa !2450
  %10826 = load i64, i64* %RBP
  %10827 = sub i64 %10826, 32
  %10828 = load i64, i64* %PC
  %10829 = add i64 %10828, 4
  store i64 %10829, i64* %PC
  %10830 = inttoptr i64 %10827 to i64*
  %10831 = load i64, i64* %10830
  store i64 %10831, i64* %RCX, align 8, !tbaa !2428
  %10832 = load i64, i64* %RDX
  %10833 = load i64, i64* %RCX
  %10834 = add i64 %10833, 20
  %10835 = load i64, i64* %PC
  %10836 = add i64 %10835, 4
  store i64 %10836, i64* %PC
  %10837 = inttoptr i64 %10834 to i32*
  %10838 = load i32, i32* %10837
  %10839 = shl i64 %10832, 32
  %10840 = ashr exact i64 %10839, 32
  %10841 = sext i32 %10838 to i64
  %10842 = mul nsw i64 %10841, %10840
  %10843 = trunc i64 %10842 to i32
  %10844 = and i64 %10842, 4294967295
  store i64 %10844, i64* %RDX, align 8, !tbaa !2428
  %10845 = shl i64 %10842, 32
  %10846 = ashr exact i64 %10845, 32
  %10847 = icmp ne i64 %10846, %10842
  %10848 = zext i1 %10847 to i8
  %10849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10848, i8* %10849, align 1, !tbaa !2432
  %10850 = and i32 %10843, 255
  %10851 = call i32 @llvm.ctpop.i32(i32 %10850) #16
  %10852 = trunc i32 %10851 to i8
  %10853 = and i8 %10852, 1
  %10854 = xor i8 %10853, 1
  %10855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10854, i8* %10855, align 1, !tbaa !2446
  %10856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10856, align 1, !tbaa !2447
  %10857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10857, align 1, !tbaa !2448
  %10858 = lshr i32 %10843, 31
  %10859 = trunc i32 %10858 to i8
  %10860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10859, i8* %10860, align 1, !tbaa !2449
  %10861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10848, i8* %10861, align 1, !tbaa !2450
  %10862 = load i64, i64* %RBP
  %10863 = sub i64 %10862, 68
  %10864 = load i64, i64* %PC
  %10865 = add i64 %10864, 3
  store i64 %10865, i64* %PC
  %10866 = inttoptr i64 %10863 to i32*
  %10867 = load i32, i32* %10866
  %10868 = zext i32 %10867 to i64
  store i64 %10868, i64* %RSI, align 8, !tbaa !2428
  %10869 = load i64, i64* %RBP
  %10870 = sub i64 %10869, 32
  %10871 = load i64, i64* %PC
  %10872 = add i64 %10871, 4
  store i64 %10872, i64* %PC
  %10873 = inttoptr i64 %10870 to i64*
  %10874 = load i64, i64* %10873
  store i64 %10874, i64* %RCX, align 8, !tbaa !2428
  %10875 = load i64, i64* %RSI
  %10876 = load i64, i64* %RCX
  %10877 = add i64 %10876, 16
  %10878 = load i64, i64* %PC
  %10879 = add i64 %10878, 4
  store i64 %10879, i64* %PC
  %10880 = inttoptr i64 %10877 to i32*
  %10881 = load i32, i32* %10880
  %10882 = shl i64 %10875, 32
  %10883 = ashr exact i64 %10882, 32
  %10884 = sext i32 %10881 to i64
  %10885 = mul nsw i64 %10884, %10883
  %10886 = trunc i64 %10885 to i32
  %10887 = and i64 %10885, 4294967295
  store i64 %10887, i64* %RSI, align 8, !tbaa !2428
  %10888 = shl i64 %10885, 32
  %10889 = ashr exact i64 %10888, 32
  %10890 = icmp ne i64 %10889, %10885
  %10891 = zext i1 %10890 to i8
  %10892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10891, i8* %10892, align 1, !tbaa !2432
  %10893 = and i32 %10886, 255
  %10894 = call i32 @llvm.ctpop.i32(i32 %10893) #16
  %10895 = trunc i32 %10894 to i8
  %10896 = and i8 %10895, 1
  %10897 = xor i8 %10896, 1
  %10898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10897, i8* %10898, align 1, !tbaa !2446
  %10899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10899, align 1, !tbaa !2447
  %10900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10900, align 1, !tbaa !2448
  %10901 = lshr i32 %10886, 31
  %10902 = trunc i32 %10901 to i8
  %10903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10902, i8* %10903, align 1, !tbaa !2449
  %10904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10891, i8* %10904, align 1, !tbaa !2450
  %10905 = load i64, i64* %RBP
  %10906 = sub i64 %10905, 32
  %10907 = load i64, i64* %PC
  %10908 = add i64 %10907, 4
  store i64 %10908, i64* %PC
  %10909 = inttoptr i64 %10906 to i64*
  %10910 = load i64, i64* %10909
  store i64 %10910, i64* %RCX, align 8, !tbaa !2428
  %10911 = load i64, i64* %RSI
  %10912 = load i64, i64* %RCX
  %10913 = add i64 %10912, 20
  %10914 = load i64, i64* %PC
  %10915 = add i64 %10914, 4
  store i64 %10915, i64* %PC
  %10916 = inttoptr i64 %10913 to i32*
  %10917 = load i32, i32* %10916
  %10918 = shl i64 %10911, 32
  %10919 = ashr exact i64 %10918, 32
  %10920 = sext i32 %10917 to i64
  %10921 = mul nsw i64 %10920, %10919
  %10922 = trunc i64 %10921 to i32
  %10923 = and i64 %10921, 4294967295
  store i64 %10923, i64* %RSI, align 8, !tbaa !2428
  %10924 = shl i64 %10921, 32
  %10925 = ashr exact i64 %10924, 32
  %10926 = icmp ne i64 %10925, %10921
  %10927 = zext i1 %10926 to i8
  %10928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10927, i8* %10928, align 1, !tbaa !2432
  %10929 = and i32 %10922, 255
  %10930 = call i32 @llvm.ctpop.i32(i32 %10929) #16
  %10931 = trunc i32 %10930 to i8
  %10932 = and i8 %10931, 1
  %10933 = xor i8 %10932, 1
  %10934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10933, i8* %10934, align 1, !tbaa !2446
  %10935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10935, align 1, !tbaa !2447
  %10936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10936, align 1, !tbaa !2448
  %10937 = lshr i32 %10922, 31
  %10938 = trunc i32 %10937 to i8
  %10939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10938, i8* %10939, align 1, !tbaa !2449
  %10940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10927, i8* %10940, align 1, !tbaa !2450
  %10941 = load i64, i64* %RDX
  %10942 = load i32, i32* %ESI
  %10943 = zext i32 %10942 to i64
  %10944 = load i64, i64* %PC
  %10945 = add i64 %10944, 2
  store i64 %10945, i64* %PC
  %10946 = trunc i64 %10941 to i32
  %10947 = add i32 %10942, %10946
  %10948 = zext i32 %10947 to i64
  store i64 %10948, i64* %RDX, align 8, !tbaa !2428
  %10949 = icmp ult i32 %10947, %10946
  %10950 = icmp ult i32 %10947, %10942
  %10951 = or i1 %10949, %10950
  %10952 = zext i1 %10951 to i8
  %10953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10952, i8* %10953, align 1, !tbaa !2432
  %10954 = and i32 %10947, 255
  %10955 = call i32 @llvm.ctpop.i32(i32 %10954) #16
  %10956 = trunc i32 %10955 to i8
  %10957 = and i8 %10956, 1
  %10958 = xor i8 %10957, 1
  %10959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10958, i8* %10959, align 1, !tbaa !2446
  %10960 = xor i64 %10943, %10941
  %10961 = trunc i64 %10960 to i32
  %10962 = xor i32 %10961, %10947
  %10963 = lshr i32 %10962, 4
  %10964 = trunc i32 %10963 to i8
  %10965 = and i8 %10964, 1
  %10966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10965, i8* %10966, align 1, !tbaa !2447
  %10967 = icmp eq i32 %10947, 0
  %10968 = zext i1 %10967 to i8
  %10969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10968, i8* %10969, align 1, !tbaa !2448
  %10970 = lshr i32 %10947, 31
  %10971 = trunc i32 %10970 to i8
  %10972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10971, i8* %10972, align 1, !tbaa !2449
  %10973 = lshr i32 %10946, 31
  %10974 = lshr i32 %10942, 31
  %10975 = xor i32 %10970, %10973
  %10976 = xor i32 %10970, %10974
  %10977 = add nuw nsw i32 %10975, %10976
  %10978 = icmp eq i32 %10977, 2
  %10979 = zext i1 %10978 to i8
  %10980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10979, i8* %10980, align 1, !tbaa !2450
  %10981 = load i64, i64* %RBP
  %10982 = sub i64 %10981, 72
  %10983 = load i64, i64* %PC
  %10984 = add i64 %10983, 3
  store i64 %10984, i64* %PC
  %10985 = inttoptr i64 %10982 to i32*
  %10986 = load i32, i32* %10985
  %10987 = zext i32 %10986 to i64
  store i64 %10987, i64* %RSI, align 8, !tbaa !2428
  %10988 = load i64, i64* %RBP
  %10989 = sub i64 %10988, 32
  %10990 = load i64, i64* %PC
  %10991 = add i64 %10990, 4
  store i64 %10991, i64* %PC
  %10992 = inttoptr i64 %10989 to i64*
  %10993 = load i64, i64* %10992
  store i64 %10993, i64* %RCX, align 8, !tbaa !2428
  %10994 = load i64, i64* %RSI
  %10995 = load i64, i64* %RCX
  %10996 = add i64 %10995, 20
  %10997 = load i64, i64* %PC
  %10998 = add i64 %10997, 4
  store i64 %10998, i64* %PC
  %10999 = inttoptr i64 %10996 to i32*
  %11000 = load i32, i32* %10999
  %11001 = shl i64 %10994, 32
  %11002 = ashr exact i64 %11001, 32
  %11003 = sext i32 %11000 to i64
  %11004 = mul nsw i64 %11003, %11002
  %11005 = trunc i64 %11004 to i32
  %11006 = and i64 %11004, 4294967295
  store i64 %11006, i64* %RSI, align 8, !tbaa !2428
  %11007 = shl i64 %11004, 32
  %11008 = ashr exact i64 %11007, 32
  %11009 = icmp ne i64 %11008, %11004
  %11010 = zext i1 %11009 to i8
  %11011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11010, i8* %11011, align 1, !tbaa !2432
  %11012 = and i32 %11005, 255
  %11013 = call i32 @llvm.ctpop.i32(i32 %11012) #16
  %11014 = trunc i32 %11013 to i8
  %11015 = and i8 %11014, 1
  %11016 = xor i8 %11015, 1
  %11017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11016, i8* %11017, align 1, !tbaa !2446
  %11018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11018, align 1, !tbaa !2447
  %11019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11019, align 1, !tbaa !2448
  %11020 = lshr i32 %11005, 31
  %11021 = trunc i32 %11020 to i8
  %11022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11021, i8* %11022, align 1, !tbaa !2449
  %11023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11010, i8* %11023, align 1, !tbaa !2450
  %11024 = load i64, i64* %RDX
  %11025 = load i32, i32* %ESI
  %11026 = zext i32 %11025 to i64
  %11027 = load i64, i64* %PC
  %11028 = add i64 %11027, 2
  store i64 %11028, i64* %PC
  %11029 = trunc i64 %11024 to i32
  %11030 = add i32 %11025, %11029
  %11031 = zext i32 %11030 to i64
  store i64 %11031, i64* %RDX, align 8, !tbaa !2428
  %11032 = icmp ult i32 %11030, %11029
  %11033 = icmp ult i32 %11030, %11025
  %11034 = or i1 %11032, %11033
  %11035 = zext i1 %11034 to i8
  %11036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11035, i8* %11036, align 1, !tbaa !2432
  %11037 = and i32 %11030, 255
  %11038 = call i32 @llvm.ctpop.i32(i32 %11037) #16
  %11039 = trunc i32 %11038 to i8
  %11040 = and i8 %11039, 1
  %11041 = xor i8 %11040, 1
  %11042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11041, i8* %11042, align 1, !tbaa !2446
  %11043 = xor i64 %11026, %11024
  %11044 = trunc i64 %11043 to i32
  %11045 = xor i32 %11044, %11030
  %11046 = lshr i32 %11045, 4
  %11047 = trunc i32 %11046 to i8
  %11048 = and i8 %11047, 1
  %11049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11048, i8* %11049, align 1, !tbaa !2447
  %11050 = icmp eq i32 %11030, 0
  %11051 = zext i1 %11050 to i8
  %11052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11051, i8* %11052, align 1, !tbaa !2448
  %11053 = lshr i32 %11030, 31
  %11054 = trunc i32 %11053 to i8
  %11055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11054, i8* %11055, align 1, !tbaa !2449
  %11056 = lshr i32 %11029, 31
  %11057 = lshr i32 %11025, 31
  %11058 = xor i32 %11053, %11056
  %11059 = xor i32 %11053, %11057
  %11060 = add nuw nsw i32 %11058, %11059
  %11061 = icmp eq i32 %11060, 2
  %11062 = zext i1 %11061 to i8
  %11063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11062, i8* %11063, align 1, !tbaa !2450
  %11064 = load i64, i64* %RDX
  %11065 = load i64, i64* %RBP
  %11066 = sub i64 %11065, 76
  %11067 = load i64, i64* %PC
  %11068 = add i64 %11067, 3
  store i64 %11068, i64* %PC
  %11069 = trunc i64 %11064 to i32
  %11070 = inttoptr i64 %11066 to i32*
  %11071 = load i32, i32* %11070
  %11072 = add i32 %11071, %11069
  %11073 = zext i32 %11072 to i64
  store i64 %11073, i64* %RDX, align 8, !tbaa !2428
  %11074 = icmp ult i32 %11072, %11069
  %11075 = icmp ult i32 %11072, %11071
  %11076 = or i1 %11074, %11075
  %11077 = zext i1 %11076 to i8
  %11078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11077, i8* %11078, align 1, !tbaa !2432
  %11079 = and i32 %11072, 255
  %11080 = call i32 @llvm.ctpop.i32(i32 %11079) #16
  %11081 = trunc i32 %11080 to i8
  %11082 = and i8 %11081, 1
  %11083 = xor i8 %11082, 1
  %11084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11083, i8* %11084, align 1, !tbaa !2446
  %11085 = xor i32 %11071, %11069
  %11086 = xor i32 %11085, %11072
  %11087 = lshr i32 %11086, 4
  %11088 = trunc i32 %11087 to i8
  %11089 = and i8 %11088, 1
  %11090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11089, i8* %11090, align 1, !tbaa !2447
  %11091 = icmp eq i32 %11072, 0
  %11092 = zext i1 %11091 to i8
  %11093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11092, i8* %11093, align 1, !tbaa !2448
  %11094 = lshr i32 %11072, 31
  %11095 = trunc i32 %11094 to i8
  %11096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11095, i8* %11096, align 1, !tbaa !2449
  %11097 = lshr i32 %11069, 31
  %11098 = lshr i32 %11071, 31
  %11099 = xor i32 %11094, %11097
  %11100 = xor i32 %11094, %11098
  %11101 = add nuw nsw i32 %11099, %11100
  %11102 = icmp eq i32 %11101, 2
  %11103 = zext i1 %11102 to i8
  %11104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11103, i8* %11104, align 1, !tbaa !2450
  %11105 = load i32, i32* %EDX
  %11106 = zext i32 %11105 to i64
  %11107 = load i64, i64* %PC
  %11108 = add i64 %11107, 3
  store i64 %11108, i64* %PC
  %11109 = shl i64 %11106, 32
  %11110 = ashr exact i64 %11109, 32
  store i64 %11110, i64* %RCX, align 8, !tbaa !2428
  %11111 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11112 = load i64, i64* %RAX
  %11113 = load i64, i64* %RCX
  %11114 = mul i64 %11113, 4
  %11115 = add i64 %11114, %11112
  %11116 = load i64, i64* %PC
  %11117 = add i64 %11116, 5
  store i64 %11117, i64* %PC
  %11118 = inttoptr i64 %11115 to float*
  %11119 = load float, float* %11118
  %11120 = bitcast i8* %11111 to float*
  store float %11119, float* %11120, align 1, !tbaa !2452
  %11121 = getelementptr inbounds i8, i8* %11111, i64 4
  %11122 = bitcast i8* %11121 to float*
  store float 0.000000e+00, float* %11122, align 1, !tbaa !2452
  %11123 = getelementptr inbounds i8, i8* %11111, i64 8
  %11124 = bitcast i8* %11123 to float*
  store float 0.000000e+00, float* %11124, align 1, !tbaa !2452
  %11125 = getelementptr inbounds i8, i8* %11111, i64 12
  %11126 = bitcast i8* %11125 to float*
  store float 0.000000e+00, float* %11126, align 1, !tbaa !2452
  %11127 = load i64, i64* %RBP
  %11128 = sub i64 %11127, 40
  %11129 = load i64, i64* %PC
  %11130 = add i64 %11129, 4
  store i64 %11130, i64* %PC
  %11131 = inttoptr i64 %11128 to i64*
  %11132 = load i64, i64* %11131
  store i64 %11132, i64* %RAX, align 8, !tbaa !2428
  %11133 = load i64, i64* %RAX
  %11134 = load i64, i64* %PC
  %11135 = add i64 %11134, 3
  store i64 %11135, i64* %PC
  %11136 = inttoptr i64 %11133 to i64*
  %11137 = load i64, i64* %11136
  store i64 %11137, i64* %RAX, align 8, !tbaa !2428
  %11138 = load i64, i64* %RBP
  %11139 = sub i64 %11138, 40
  %11140 = load i64, i64* %PC
  %11141 = add i64 %11140, 4
  store i64 %11141, i64* %PC
  %11142 = inttoptr i64 %11139 to i64*
  %11143 = load i64, i64* %11142
  store i64 %11143, i64* %RCX, align 8, !tbaa !2428
  %11144 = load i64, i64* %RCX
  %11145 = add i64 %11144, 12
  %11146 = load i64, i64* %PC
  %11147 = add i64 %11146, 4
  store i64 %11147, i64* %PC
  %11148 = inttoptr i64 %11145 to i32*
  %11149 = load i32, i32* %11148
  %11150 = sext i32 %11149 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %11151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11151, align 1, !tbaa !2432
  %11152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11152, align 1, !tbaa !2446
  %11153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11153, align 1, !tbaa !2447
  %11154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11154, align 1, !tbaa !2448
  %11155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %11155, align 1, !tbaa !2449
  %11156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11156, align 1, !tbaa !2450
  %11157 = load i64, i64* %RBP
  %11158 = sub i64 %11157, 40
  %11159 = load i64, i64* %PC
  %11160 = add i64 %11159, 4
  store i64 %11160, i64* %PC
  %11161 = inttoptr i64 %11158 to i64*
  %11162 = load i64, i64* %11161
  store i64 %11162, i64* %RCX, align 8, !tbaa !2428
  %11163 = load i64, i64* %RDX
  %11164 = load i64, i64* %RCX
  %11165 = add i64 %11164, 16
  %11166 = load i64, i64* %PC
  %11167 = add i64 %11166, 4
  store i64 %11167, i64* %PC
  %11168 = inttoptr i64 %11165 to i32*
  %11169 = load i32, i32* %11168
  %11170 = shl i64 %11163, 32
  %11171 = ashr exact i64 %11170, 32
  %11172 = sext i32 %11169 to i64
  %11173 = mul nsw i64 %11172, %11171
  %11174 = trunc i64 %11173 to i32
  %11175 = and i64 %11173, 4294967295
  store i64 %11175, i64* %RDX, align 8, !tbaa !2428
  %11176 = shl i64 %11173, 32
  %11177 = ashr exact i64 %11176, 32
  %11178 = icmp ne i64 %11177, %11173
  %11179 = zext i1 %11178 to i8
  %11180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11179, i8* %11180, align 1, !tbaa !2432
  %11181 = and i32 %11174, 255
  %11182 = call i32 @llvm.ctpop.i32(i32 %11181) #16
  %11183 = trunc i32 %11182 to i8
  %11184 = and i8 %11183, 1
  %11185 = xor i8 %11184, 1
  %11186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11185, i8* %11186, align 1, !tbaa !2446
  %11187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11187, align 1, !tbaa !2447
  %11188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11188, align 1, !tbaa !2448
  %11189 = lshr i32 %11174, 31
  %11190 = trunc i32 %11189 to i8
  %11191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11190, i8* %11191, align 1, !tbaa !2449
  %11192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11179, i8* %11192, align 1, !tbaa !2450
  %11193 = load i64, i64* %RBP
  %11194 = sub i64 %11193, 40
  %11195 = load i64, i64* %PC
  %11196 = add i64 %11195, 4
  store i64 %11196, i64* %PC
  %11197 = inttoptr i64 %11194 to i64*
  %11198 = load i64, i64* %11197
  store i64 %11198, i64* %RCX, align 8, !tbaa !2428
  %11199 = load i64, i64* %RDX
  %11200 = load i64, i64* %RCX
  %11201 = add i64 %11200, 20
  %11202 = load i64, i64* %PC
  %11203 = add i64 %11202, 4
  store i64 %11203, i64* %PC
  %11204 = inttoptr i64 %11201 to i32*
  %11205 = load i32, i32* %11204
  %11206 = shl i64 %11199, 32
  %11207 = ashr exact i64 %11206, 32
  %11208 = sext i32 %11205 to i64
  %11209 = mul nsw i64 %11208, %11207
  %11210 = trunc i64 %11209 to i32
  %11211 = and i64 %11209, 4294967295
  store i64 %11211, i64* %RDX, align 8, !tbaa !2428
  %11212 = shl i64 %11209, 32
  %11213 = ashr exact i64 %11212, 32
  %11214 = icmp ne i64 %11213, %11209
  %11215 = zext i1 %11214 to i8
  %11216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11215, i8* %11216, align 1, !tbaa !2432
  %11217 = and i32 %11210, 255
  %11218 = call i32 @llvm.ctpop.i32(i32 %11217) #16
  %11219 = trunc i32 %11218 to i8
  %11220 = and i8 %11219, 1
  %11221 = xor i8 %11220, 1
  %11222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11221, i8* %11222, align 1, !tbaa !2446
  %11223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11223, align 1, !tbaa !2447
  %11224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11224, align 1, !tbaa !2448
  %11225 = lshr i32 %11210, 31
  %11226 = trunc i32 %11225 to i8
  %11227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11226, i8* %11227, align 1, !tbaa !2449
  %11228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11215, i8* %11228, align 1, !tbaa !2450
  %11229 = load i64, i64* %RBP
  %11230 = sub i64 %11229, 68
  %11231 = load i64, i64* %PC
  %11232 = add i64 %11231, 3
  store i64 %11232, i64* %PC
  %11233 = inttoptr i64 %11230 to i32*
  %11234 = load i32, i32* %11233
  %11235 = zext i32 %11234 to i64
  store i64 %11235, i64* %RSI, align 8, !tbaa !2428
  %11236 = load i64, i64* %RSI
  %11237 = load i64, i64* %PC
  %11238 = add i64 %11237, 3
  store i64 %11238, i64* %PC
  %11239 = trunc i64 %11236 to i32
  %11240 = sub i32 %11239, 1
  %11241 = zext i32 %11240 to i64
  store i64 %11241, i64* %RSI, align 8, !tbaa !2428
  %11242 = icmp ult i32 %11239, 1
  %11243 = zext i1 %11242 to i8
  %11244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11243, i8* %11244, align 1, !tbaa !2432
  %11245 = and i32 %11240, 255
  %11246 = call i32 @llvm.ctpop.i32(i32 %11245) #16
  %11247 = trunc i32 %11246 to i8
  %11248 = and i8 %11247, 1
  %11249 = xor i8 %11248, 1
  %11250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11249, i8* %11250, align 1, !tbaa !2446
  %11251 = xor i64 1, %11236
  %11252 = trunc i64 %11251 to i32
  %11253 = xor i32 %11252, %11240
  %11254 = lshr i32 %11253, 4
  %11255 = trunc i32 %11254 to i8
  %11256 = and i8 %11255, 1
  %11257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11256, i8* %11257, align 1, !tbaa !2447
  %11258 = icmp eq i32 %11240, 0
  %11259 = zext i1 %11258 to i8
  %11260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11259, i8* %11260, align 1, !tbaa !2448
  %11261 = lshr i32 %11240, 31
  %11262 = trunc i32 %11261 to i8
  %11263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11262, i8* %11263, align 1, !tbaa !2449
  %11264 = lshr i32 %11239, 31
  %11265 = xor i32 %11261, %11264
  %11266 = add nuw nsw i32 %11265, %11264
  %11267 = icmp eq i32 %11266, 2
  %11268 = zext i1 %11267 to i8
  %11269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11268, i8* %11269, align 1, !tbaa !2450
  %11270 = load i64, i64* %RBP
  %11271 = sub i64 %11270, 40
  %11272 = load i64, i64* %PC
  %11273 = add i64 %11272, 4
  store i64 %11273, i64* %PC
  %11274 = inttoptr i64 %11271 to i64*
  %11275 = load i64, i64* %11274
  store i64 %11275, i64* %RCX, align 8, !tbaa !2428
  %11276 = load i64, i64* %RSI
  %11277 = load i64, i64* %RCX
  %11278 = add i64 %11277, 16
  %11279 = load i64, i64* %PC
  %11280 = add i64 %11279, 4
  store i64 %11280, i64* %PC
  %11281 = inttoptr i64 %11278 to i32*
  %11282 = load i32, i32* %11281
  %11283 = shl i64 %11276, 32
  %11284 = ashr exact i64 %11283, 32
  %11285 = sext i32 %11282 to i64
  %11286 = mul nsw i64 %11285, %11284
  %11287 = trunc i64 %11286 to i32
  %11288 = and i64 %11286, 4294967295
  store i64 %11288, i64* %RSI, align 8, !tbaa !2428
  %11289 = shl i64 %11286, 32
  %11290 = ashr exact i64 %11289, 32
  %11291 = icmp ne i64 %11290, %11286
  %11292 = zext i1 %11291 to i8
  %11293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11292, i8* %11293, align 1, !tbaa !2432
  %11294 = and i32 %11287, 255
  %11295 = call i32 @llvm.ctpop.i32(i32 %11294) #16
  %11296 = trunc i32 %11295 to i8
  %11297 = and i8 %11296, 1
  %11298 = xor i8 %11297, 1
  %11299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11298, i8* %11299, align 1, !tbaa !2446
  %11300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11300, align 1, !tbaa !2447
  %11301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11301, align 1, !tbaa !2448
  %11302 = lshr i32 %11287, 31
  %11303 = trunc i32 %11302 to i8
  %11304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11303, i8* %11304, align 1, !tbaa !2449
  %11305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11292, i8* %11305, align 1, !tbaa !2450
  %11306 = load i64, i64* %RBP
  %11307 = sub i64 %11306, 40
  %11308 = load i64, i64* %PC
  %11309 = add i64 %11308, 4
  store i64 %11309, i64* %PC
  %11310 = inttoptr i64 %11307 to i64*
  %11311 = load i64, i64* %11310
  store i64 %11311, i64* %RCX, align 8, !tbaa !2428
  %11312 = load i64, i64* %RSI
  %11313 = load i64, i64* %RCX
  %11314 = add i64 %11313, 20
  %11315 = load i64, i64* %PC
  %11316 = add i64 %11315, 4
  store i64 %11316, i64* %PC
  %11317 = inttoptr i64 %11314 to i32*
  %11318 = load i32, i32* %11317
  %11319 = shl i64 %11312, 32
  %11320 = ashr exact i64 %11319, 32
  %11321 = sext i32 %11318 to i64
  %11322 = mul nsw i64 %11321, %11320
  %11323 = trunc i64 %11322 to i32
  %11324 = and i64 %11322, 4294967295
  store i64 %11324, i64* %RSI, align 8, !tbaa !2428
  %11325 = shl i64 %11322, 32
  %11326 = ashr exact i64 %11325, 32
  %11327 = icmp ne i64 %11326, %11322
  %11328 = zext i1 %11327 to i8
  %11329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11328, i8* %11329, align 1, !tbaa !2432
  %11330 = and i32 %11323, 255
  %11331 = call i32 @llvm.ctpop.i32(i32 %11330) #16
  %11332 = trunc i32 %11331 to i8
  %11333 = and i8 %11332, 1
  %11334 = xor i8 %11333, 1
  %11335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11334, i8* %11335, align 1, !tbaa !2446
  %11336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11336, align 1, !tbaa !2447
  %11337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11337, align 1, !tbaa !2448
  %11338 = lshr i32 %11323, 31
  %11339 = trunc i32 %11338 to i8
  %11340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11339, i8* %11340, align 1, !tbaa !2449
  %11341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11328, i8* %11341, align 1, !tbaa !2450
  %11342 = load i64, i64* %RDX
  %11343 = load i32, i32* %ESI
  %11344 = zext i32 %11343 to i64
  %11345 = load i64, i64* %PC
  %11346 = add i64 %11345, 2
  store i64 %11346, i64* %PC
  %11347 = trunc i64 %11342 to i32
  %11348 = add i32 %11343, %11347
  %11349 = zext i32 %11348 to i64
  store i64 %11349, i64* %RDX, align 8, !tbaa !2428
  %11350 = icmp ult i32 %11348, %11347
  %11351 = icmp ult i32 %11348, %11343
  %11352 = or i1 %11350, %11351
  %11353 = zext i1 %11352 to i8
  %11354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11353, i8* %11354, align 1, !tbaa !2432
  %11355 = and i32 %11348, 255
  %11356 = call i32 @llvm.ctpop.i32(i32 %11355) #16
  %11357 = trunc i32 %11356 to i8
  %11358 = and i8 %11357, 1
  %11359 = xor i8 %11358, 1
  %11360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11359, i8* %11360, align 1, !tbaa !2446
  %11361 = xor i64 %11344, %11342
  %11362 = trunc i64 %11361 to i32
  %11363 = xor i32 %11362, %11348
  %11364 = lshr i32 %11363, 4
  %11365 = trunc i32 %11364 to i8
  %11366 = and i8 %11365, 1
  %11367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11366, i8* %11367, align 1, !tbaa !2447
  %11368 = icmp eq i32 %11348, 0
  %11369 = zext i1 %11368 to i8
  %11370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11369, i8* %11370, align 1, !tbaa !2448
  %11371 = lshr i32 %11348, 31
  %11372 = trunc i32 %11371 to i8
  %11373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11372, i8* %11373, align 1, !tbaa !2449
  %11374 = lshr i32 %11347, 31
  %11375 = lshr i32 %11343, 31
  %11376 = xor i32 %11371, %11374
  %11377 = xor i32 %11371, %11375
  %11378 = add nuw nsw i32 %11376, %11377
  %11379 = icmp eq i32 %11378, 2
  %11380 = zext i1 %11379 to i8
  %11381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11380, i8* %11381, align 1, !tbaa !2450
  %11382 = load i64, i64* %RBP
  %11383 = sub i64 %11382, 72
  %11384 = load i64, i64* %PC
  %11385 = add i64 %11384, 3
  store i64 %11385, i64* %PC
  %11386 = inttoptr i64 %11383 to i32*
  %11387 = load i32, i32* %11386
  %11388 = zext i32 %11387 to i64
  store i64 %11388, i64* %RSI, align 8, !tbaa !2428
  %11389 = load i64, i64* %RBP
  %11390 = sub i64 %11389, 40
  %11391 = load i64, i64* %PC
  %11392 = add i64 %11391, 4
  store i64 %11392, i64* %PC
  %11393 = inttoptr i64 %11390 to i64*
  %11394 = load i64, i64* %11393
  store i64 %11394, i64* %RCX, align 8, !tbaa !2428
  %11395 = load i64, i64* %RSI
  %11396 = load i64, i64* %RCX
  %11397 = add i64 %11396, 20
  %11398 = load i64, i64* %PC
  %11399 = add i64 %11398, 4
  store i64 %11399, i64* %PC
  %11400 = inttoptr i64 %11397 to i32*
  %11401 = load i32, i32* %11400
  %11402 = shl i64 %11395, 32
  %11403 = ashr exact i64 %11402, 32
  %11404 = sext i32 %11401 to i64
  %11405 = mul nsw i64 %11404, %11403
  %11406 = trunc i64 %11405 to i32
  %11407 = and i64 %11405, 4294967295
  store i64 %11407, i64* %RSI, align 8, !tbaa !2428
  %11408 = shl i64 %11405, 32
  %11409 = ashr exact i64 %11408, 32
  %11410 = icmp ne i64 %11409, %11405
  %11411 = zext i1 %11410 to i8
  %11412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11411, i8* %11412, align 1, !tbaa !2432
  %11413 = and i32 %11406, 255
  %11414 = call i32 @llvm.ctpop.i32(i32 %11413) #16
  %11415 = trunc i32 %11414 to i8
  %11416 = and i8 %11415, 1
  %11417 = xor i8 %11416, 1
  %11418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11417, i8* %11418, align 1, !tbaa !2446
  %11419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11419, align 1, !tbaa !2447
  %11420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11420, align 1, !tbaa !2448
  %11421 = lshr i32 %11406, 31
  %11422 = trunc i32 %11421 to i8
  %11423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11422, i8* %11423, align 1, !tbaa !2449
  %11424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11411, i8* %11424, align 1, !tbaa !2450
  %11425 = load i64, i64* %RDX
  %11426 = load i32, i32* %ESI
  %11427 = zext i32 %11426 to i64
  %11428 = load i64, i64* %PC
  %11429 = add i64 %11428, 2
  store i64 %11429, i64* %PC
  %11430 = trunc i64 %11425 to i32
  %11431 = add i32 %11426, %11430
  %11432 = zext i32 %11431 to i64
  store i64 %11432, i64* %RDX, align 8, !tbaa !2428
  %11433 = icmp ult i32 %11431, %11430
  %11434 = icmp ult i32 %11431, %11426
  %11435 = or i1 %11433, %11434
  %11436 = zext i1 %11435 to i8
  %11437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11436, i8* %11437, align 1, !tbaa !2432
  %11438 = and i32 %11431, 255
  %11439 = call i32 @llvm.ctpop.i32(i32 %11438) #16
  %11440 = trunc i32 %11439 to i8
  %11441 = and i8 %11440, 1
  %11442 = xor i8 %11441, 1
  %11443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11442, i8* %11443, align 1, !tbaa !2446
  %11444 = xor i64 %11427, %11425
  %11445 = trunc i64 %11444 to i32
  %11446 = xor i32 %11445, %11431
  %11447 = lshr i32 %11446, 4
  %11448 = trunc i32 %11447 to i8
  %11449 = and i8 %11448, 1
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11449, i8* %11450, align 1, !tbaa !2447
  %11451 = icmp eq i32 %11431, 0
  %11452 = zext i1 %11451 to i8
  %11453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11452, i8* %11453, align 1, !tbaa !2448
  %11454 = lshr i32 %11431, 31
  %11455 = trunc i32 %11454 to i8
  %11456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11455, i8* %11456, align 1, !tbaa !2449
  %11457 = lshr i32 %11430, 31
  %11458 = lshr i32 %11426, 31
  %11459 = xor i32 %11454, %11457
  %11460 = xor i32 %11454, %11458
  %11461 = add nuw nsw i32 %11459, %11460
  %11462 = icmp eq i32 %11461, 2
  %11463 = zext i1 %11462 to i8
  %11464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11463, i8* %11464, align 1, !tbaa !2450
  %11465 = load i64, i64* %RDX
  %11466 = load i64, i64* %RBP
  %11467 = sub i64 %11466, 76
  %11468 = load i64, i64* %PC
  %11469 = add i64 %11468, 3
  store i64 %11469, i64* %PC
  %11470 = trunc i64 %11465 to i32
  %11471 = inttoptr i64 %11467 to i32*
  %11472 = load i32, i32* %11471
  %11473 = add i32 %11472, %11470
  %11474 = zext i32 %11473 to i64
  store i64 %11474, i64* %RDX, align 8, !tbaa !2428
  %11475 = icmp ult i32 %11473, %11470
  %11476 = icmp ult i32 %11473, %11472
  %11477 = or i1 %11475, %11476
  %11478 = zext i1 %11477 to i8
  %11479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11478, i8* %11479, align 1, !tbaa !2432
  %11480 = and i32 %11473, 255
  %11481 = call i32 @llvm.ctpop.i32(i32 %11480) #16
  %11482 = trunc i32 %11481 to i8
  %11483 = and i8 %11482, 1
  %11484 = xor i8 %11483, 1
  %11485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11484, i8* %11485, align 1, !tbaa !2446
  %11486 = xor i32 %11472, %11470
  %11487 = xor i32 %11486, %11473
  %11488 = lshr i32 %11487, 4
  %11489 = trunc i32 %11488 to i8
  %11490 = and i8 %11489, 1
  %11491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11490, i8* %11491, align 1, !tbaa !2447
  %11492 = icmp eq i32 %11473, 0
  %11493 = zext i1 %11492 to i8
  %11494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11493, i8* %11494, align 1, !tbaa !2448
  %11495 = lshr i32 %11473, 31
  %11496 = trunc i32 %11495 to i8
  %11497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11496, i8* %11497, align 1, !tbaa !2449
  %11498 = lshr i32 %11470, 31
  %11499 = lshr i32 %11472, 31
  %11500 = xor i32 %11495, %11498
  %11501 = xor i32 %11495, %11499
  %11502 = add nuw nsw i32 %11500, %11501
  %11503 = icmp eq i32 %11502, 2
  %11504 = zext i1 %11503 to i8
  %11505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11504, i8* %11505, align 1, !tbaa !2450
  %11506 = load i32, i32* %EDX
  %11507 = zext i32 %11506 to i64
  %11508 = load i64, i64* %PC
  %11509 = add i64 %11508, 3
  store i64 %11509, i64* %PC
  %11510 = shl i64 %11507, 32
  %11511 = ashr exact i64 %11510, 32
  store i64 %11511, i64* %RCX, align 8, !tbaa !2428
  %11512 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11513 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11514 = load i64, i64* %RAX
  %11515 = load i64, i64* %RCX
  %11516 = mul i64 %11515, 4
  %11517 = add i64 %11516, %11514
  %11518 = load i64, i64* %PC
  %11519 = add i64 %11518, 5
  store i64 %11519, i64* %PC
  %11520 = bitcast i8* %11513 to <2 x float>*
  %11521 = load <2 x float>, <2 x float>* %11520, align 1
  %11522 = getelementptr inbounds i8, i8* %11513, i64 8
  %11523 = bitcast i8* %11522 to <2 x i32>*
  %11524 = load <2 x i32>, <2 x i32>* %11523, align 1
  %11525 = inttoptr i64 %11517 to float*
  %11526 = load float, float* %11525
  %11527 = extractelement <2 x float> %11521, i32 0
  %11528 = fmul float %11527, %11526
  %11529 = bitcast i8* %11512 to float*
  store float %11528, float* %11529, align 1, !tbaa !2452
  %11530 = bitcast <2 x float> %11521 to <2 x i32>
  %11531 = extractelement <2 x i32> %11530, i32 1
  %11532 = getelementptr inbounds i8, i8* %11512, i64 4
  %11533 = bitcast i8* %11532 to i32*
  store i32 %11531, i32* %11533, align 1, !tbaa !2452
  %11534 = extractelement <2 x i32> %11524, i32 0
  %11535 = getelementptr inbounds i8, i8* %11512, i64 8
  %11536 = bitcast i8* %11535 to i32*
  store i32 %11534, i32* %11536, align 1, !tbaa !2452
  %11537 = extractelement <2 x i32> %11524, i32 1
  %11538 = getelementptr inbounds i8, i8* %11512, i64 12
  %11539 = bitcast i8* %11538 to i32*
  store i32 %11537, i32* %11539, align 1, !tbaa !2452
  %11540 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11541 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11542 = bitcast %union.vec128_t* %XMM1 to i8*
  %11543 = load i64, i64* %PC
  %11544 = add i64 %11543, 4
  store i64 %11544, i64* %PC
  %11545 = bitcast i8* %11541 to <2 x float>*
  %11546 = load <2 x float>, <2 x float>* %11545, align 1
  %11547 = getelementptr inbounds i8, i8* %11541, i64 8
  %11548 = bitcast i8* %11547 to <2 x i32>*
  %11549 = load <2 x i32>, <2 x i32>* %11548, align 1
  %11550 = bitcast i8* %11542 to <2 x float>*
  %11551 = load <2 x float>, <2 x float>* %11550, align 1
  %11552 = extractelement <2 x float> %11546, i32 0
  %11553 = extractelement <2 x float> %11551, i32 0
  %11554 = fadd float %11552, %11553
  %11555 = bitcast i8* %11540 to float*
  store float %11554, float* %11555, align 1, !tbaa !2452
  %11556 = bitcast <2 x float> %11546 to <2 x i32>
  %11557 = extractelement <2 x i32> %11556, i32 1
  %11558 = getelementptr inbounds i8, i8* %11540, i64 4
  %11559 = bitcast i8* %11558 to i32*
  store i32 %11557, i32* %11559, align 1, !tbaa !2452
  %11560 = extractelement <2 x i32> %11549, i32 0
  %11561 = getelementptr inbounds i8, i8* %11540, i64 8
  %11562 = bitcast i8* %11561 to i32*
  store i32 %11560, i32* %11562, align 1, !tbaa !2452
  %11563 = extractelement <2 x i32> %11549, i32 1
  %11564 = getelementptr inbounds i8, i8* %11540, i64 12
  %11565 = bitcast i8* %11564 to i32*
  store i32 %11563, i32* %11565, align 1, !tbaa !2452
  %11566 = load i64, i64* %RBP
  %11567 = sub i64 %11566, 32
  %11568 = load i64, i64* %PC
  %11569 = add i64 %11568, 4
  store i64 %11569, i64* %PC
  %11570 = inttoptr i64 %11567 to i64*
  %11571 = load i64, i64* %11570
  store i64 %11571, i64* %RAX, align 8, !tbaa !2428
  %11572 = load i64, i64* %RAX
  %11573 = load i64, i64* %PC
  %11574 = add i64 %11573, 3
  store i64 %11574, i64* %PC
  %11575 = inttoptr i64 %11572 to i64*
  %11576 = load i64, i64* %11575
  store i64 %11576, i64* %RAX, align 8, !tbaa !2428
  %11577 = load i64, i64* %RBP
  %11578 = sub i64 %11577, 32
  %11579 = load i64, i64* %PC
  %11580 = add i64 %11579, 4
  store i64 %11580, i64* %PC
  %11581 = inttoptr i64 %11578 to i64*
  %11582 = load i64, i64* %11581
  store i64 %11582, i64* %RCX, align 8, !tbaa !2428
  %11583 = load i64, i64* %RCX
  %11584 = add i64 %11583, 12
  %11585 = load i64, i64* %PC
  %11586 = add i64 %11585, 3
  store i64 %11586, i64* %PC
  %11587 = inttoptr i64 %11584 to i32*
  %11588 = load i32, i32* %11587
  %11589 = zext i32 %11588 to i64
  store i64 %11589, i64* %RDX, align 8, !tbaa !2428
  %11590 = load i64, i64* %RDX
  %11591 = load i64, i64* %PC
  %11592 = add i64 %11591, 3
  store i64 %11592, i64* %PC
  %11593 = load i64, i64* %RBP
  %11594 = sub i64 %11593, 32
  %11595 = load i64, i64* %PC
  %11596 = add i64 %11595, 4
  store i64 %11596, i64* %PC
  %11597 = inttoptr i64 %11594 to i64*
  %11598 = load i64, i64* %11597
  store i64 %11598, i64* %RCX, align 8, !tbaa !2428
  %11599 = load i64, i64* %RDX
  %11600 = load i64, i64* %RCX
  %11601 = add i64 %11600, 16
  %11602 = load i64, i64* %PC
  %11603 = add i64 %11602, 4
  store i64 %11603, i64* %PC
  %11604 = inttoptr i64 %11601 to i32*
  %11605 = load i32, i32* %11604
  %11606 = shl i64 %11599, 32
  %11607 = ashr exact i64 %11606, 32
  %11608 = sext i32 %11605 to i64
  %11609 = mul nsw i64 %11608, %11607
  %11610 = trunc i64 %11609 to i32
  %11611 = and i64 %11609, 4294967295
  store i64 %11611, i64* %RDX, align 8, !tbaa !2428
  %11612 = shl i64 %11609, 32
  %11613 = ashr exact i64 %11612, 32
  %11614 = icmp ne i64 %11613, %11609
  %11615 = zext i1 %11614 to i8
  %11616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11615, i8* %11616, align 1, !tbaa !2432
  %11617 = and i32 %11610, 255
  %11618 = call i32 @llvm.ctpop.i32(i32 %11617) #16
  %11619 = trunc i32 %11618 to i8
  %11620 = and i8 %11619, 1
  %11621 = xor i8 %11620, 1
  %11622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11621, i8* %11622, align 1, !tbaa !2446
  %11623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11623, align 1, !tbaa !2447
  %11624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11624, align 1, !tbaa !2448
  %11625 = lshr i32 %11610, 31
  %11626 = trunc i32 %11625 to i8
  %11627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11626, i8* %11627, align 1, !tbaa !2449
  %11628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11615, i8* %11628, align 1, !tbaa !2450
  %11629 = load i64, i64* %RBP
  %11630 = sub i64 %11629, 32
  %11631 = load i64, i64* %PC
  %11632 = add i64 %11631, 4
  store i64 %11632, i64* %PC
  %11633 = inttoptr i64 %11630 to i64*
  %11634 = load i64, i64* %11633
  store i64 %11634, i64* %RCX, align 8, !tbaa !2428
  %11635 = load i64, i64* %RDX
  %11636 = load i64, i64* %RCX
  %11637 = add i64 %11636, 20
  %11638 = load i64, i64* %PC
  %11639 = add i64 %11638, 4
  store i64 %11639, i64* %PC
  %11640 = inttoptr i64 %11637 to i32*
  %11641 = load i32, i32* %11640
  %11642 = shl i64 %11635, 32
  %11643 = ashr exact i64 %11642, 32
  %11644 = sext i32 %11641 to i64
  %11645 = mul nsw i64 %11644, %11643
  %11646 = trunc i64 %11645 to i32
  %11647 = and i64 %11645, 4294967295
  store i64 %11647, i64* %RDX, align 8, !tbaa !2428
  %11648 = shl i64 %11645, 32
  %11649 = ashr exact i64 %11648, 32
  %11650 = icmp ne i64 %11649, %11645
  %11651 = zext i1 %11650 to i8
  %11652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11651, i8* %11652, align 1, !tbaa !2432
  %11653 = and i32 %11646, 255
  %11654 = call i32 @llvm.ctpop.i32(i32 %11653) #16
  %11655 = trunc i32 %11654 to i8
  %11656 = and i8 %11655, 1
  %11657 = xor i8 %11656, 1
  %11658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11657, i8* %11658, align 1, !tbaa !2446
  %11659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11659, align 1, !tbaa !2447
  %11660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11660, align 1, !tbaa !2448
  %11661 = lshr i32 %11646, 31
  %11662 = trunc i32 %11661 to i8
  %11663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11662, i8* %11663, align 1, !tbaa !2449
  %11664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11651, i8* %11664, align 1, !tbaa !2450
  %11665 = load i64, i64* %RBP
  %11666 = sub i64 %11665, 68
  %11667 = load i64, i64* %PC
  %11668 = add i64 %11667, 3
  store i64 %11668, i64* %PC
  %11669 = inttoptr i64 %11666 to i32*
  %11670 = load i32, i32* %11669
  %11671 = zext i32 %11670 to i64
  store i64 %11671, i64* %RSI, align 8, !tbaa !2428
  %11672 = load i64, i64* %RBP
  %11673 = sub i64 %11672, 32
  %11674 = load i64, i64* %PC
  %11675 = add i64 %11674, 4
  store i64 %11675, i64* %PC
  %11676 = inttoptr i64 %11673 to i64*
  %11677 = load i64, i64* %11676
  store i64 %11677, i64* %RCX, align 8, !tbaa !2428
  %11678 = load i64, i64* %RSI
  %11679 = load i64, i64* %RCX
  %11680 = add i64 %11679, 16
  %11681 = load i64, i64* %PC
  %11682 = add i64 %11681, 4
  store i64 %11682, i64* %PC
  %11683 = inttoptr i64 %11680 to i32*
  %11684 = load i32, i32* %11683
  %11685 = shl i64 %11678, 32
  %11686 = ashr exact i64 %11685, 32
  %11687 = sext i32 %11684 to i64
  %11688 = mul nsw i64 %11687, %11686
  %11689 = trunc i64 %11688 to i32
  %11690 = and i64 %11688, 4294967295
  store i64 %11690, i64* %RSI, align 8, !tbaa !2428
  %11691 = shl i64 %11688, 32
  %11692 = ashr exact i64 %11691, 32
  %11693 = icmp ne i64 %11692, %11688
  %11694 = zext i1 %11693 to i8
  %11695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11694, i8* %11695, align 1, !tbaa !2432
  %11696 = and i32 %11689, 255
  %11697 = call i32 @llvm.ctpop.i32(i32 %11696) #16
  %11698 = trunc i32 %11697 to i8
  %11699 = and i8 %11698, 1
  %11700 = xor i8 %11699, 1
  %11701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11700, i8* %11701, align 1, !tbaa !2446
  %11702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11702, align 1, !tbaa !2447
  %11703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11703, align 1, !tbaa !2448
  %11704 = lshr i32 %11689, 31
  %11705 = trunc i32 %11704 to i8
  %11706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11705, i8* %11706, align 1, !tbaa !2449
  %11707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11694, i8* %11707, align 1, !tbaa !2450
  %11708 = load i64, i64* %RBP
  %11709 = sub i64 %11708, 32
  %11710 = load i64, i64* %PC
  %11711 = add i64 %11710, 4
  store i64 %11711, i64* %PC
  %11712 = inttoptr i64 %11709 to i64*
  %11713 = load i64, i64* %11712
  store i64 %11713, i64* %RCX, align 8, !tbaa !2428
  %11714 = load i64, i64* %RSI
  %11715 = load i64, i64* %RCX
  %11716 = add i64 %11715, 20
  %11717 = load i64, i64* %PC
  %11718 = add i64 %11717, 4
  store i64 %11718, i64* %PC
  %11719 = inttoptr i64 %11716 to i32*
  %11720 = load i32, i32* %11719
  %11721 = shl i64 %11714, 32
  %11722 = ashr exact i64 %11721, 32
  %11723 = sext i32 %11720 to i64
  %11724 = mul nsw i64 %11723, %11722
  %11725 = trunc i64 %11724 to i32
  %11726 = and i64 %11724, 4294967295
  store i64 %11726, i64* %RSI, align 8, !tbaa !2428
  %11727 = shl i64 %11724, 32
  %11728 = ashr exact i64 %11727, 32
  %11729 = icmp ne i64 %11728, %11724
  %11730 = zext i1 %11729 to i8
  %11731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11730, i8* %11731, align 1, !tbaa !2432
  %11732 = and i32 %11725, 255
  %11733 = call i32 @llvm.ctpop.i32(i32 %11732) #16
  %11734 = trunc i32 %11733 to i8
  %11735 = and i8 %11734, 1
  %11736 = xor i8 %11735, 1
  %11737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11736, i8* %11737, align 1, !tbaa !2446
  %11738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11738, align 1, !tbaa !2447
  %11739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11739, align 1, !tbaa !2448
  %11740 = lshr i32 %11725, 31
  %11741 = trunc i32 %11740 to i8
  %11742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11741, i8* %11742, align 1, !tbaa !2449
  %11743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11730, i8* %11743, align 1, !tbaa !2450
  %11744 = load i64, i64* %RDX
  %11745 = load i32, i32* %ESI
  %11746 = zext i32 %11745 to i64
  %11747 = load i64, i64* %PC
  %11748 = add i64 %11747, 2
  store i64 %11748, i64* %PC
  %11749 = trunc i64 %11744 to i32
  %11750 = add i32 %11745, %11749
  %11751 = zext i32 %11750 to i64
  store i64 %11751, i64* %RDX, align 8, !tbaa !2428
  %11752 = icmp ult i32 %11750, %11749
  %11753 = icmp ult i32 %11750, %11745
  %11754 = or i1 %11752, %11753
  %11755 = zext i1 %11754 to i8
  %11756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11755, i8* %11756, align 1, !tbaa !2432
  %11757 = and i32 %11750, 255
  %11758 = call i32 @llvm.ctpop.i32(i32 %11757) #16
  %11759 = trunc i32 %11758 to i8
  %11760 = and i8 %11759, 1
  %11761 = xor i8 %11760, 1
  %11762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11761, i8* %11762, align 1, !tbaa !2446
  %11763 = xor i64 %11746, %11744
  %11764 = trunc i64 %11763 to i32
  %11765 = xor i32 %11764, %11750
  %11766 = lshr i32 %11765, 4
  %11767 = trunc i32 %11766 to i8
  %11768 = and i8 %11767, 1
  %11769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11768, i8* %11769, align 1, !tbaa !2447
  %11770 = icmp eq i32 %11750, 0
  %11771 = zext i1 %11770 to i8
  %11772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11771, i8* %11772, align 1, !tbaa !2448
  %11773 = lshr i32 %11750, 31
  %11774 = trunc i32 %11773 to i8
  %11775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11774, i8* %11775, align 1, !tbaa !2449
  %11776 = lshr i32 %11749, 31
  %11777 = lshr i32 %11745, 31
  %11778 = xor i32 %11773, %11776
  %11779 = xor i32 %11773, %11777
  %11780 = add nuw nsw i32 %11778, %11779
  %11781 = icmp eq i32 %11780, 2
  %11782 = zext i1 %11781 to i8
  %11783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11782, i8* %11783, align 1, !tbaa !2450
  %11784 = load i64, i64* %RBP
  %11785 = sub i64 %11784, 72
  %11786 = load i64, i64* %PC
  %11787 = add i64 %11786, 3
  store i64 %11787, i64* %PC
  %11788 = inttoptr i64 %11785 to i32*
  %11789 = load i32, i32* %11788
  %11790 = zext i32 %11789 to i64
  store i64 %11790, i64* %RSI, align 8, !tbaa !2428
  %11791 = load i64, i64* %RBP
  %11792 = sub i64 %11791, 32
  %11793 = load i64, i64* %PC
  %11794 = add i64 %11793, 4
  store i64 %11794, i64* %PC
  %11795 = inttoptr i64 %11792 to i64*
  %11796 = load i64, i64* %11795
  store i64 %11796, i64* %RCX, align 8, !tbaa !2428
  %11797 = load i64, i64* %RSI
  %11798 = load i64, i64* %RCX
  %11799 = add i64 %11798, 20
  %11800 = load i64, i64* %PC
  %11801 = add i64 %11800, 4
  store i64 %11801, i64* %PC
  %11802 = inttoptr i64 %11799 to i32*
  %11803 = load i32, i32* %11802
  %11804 = shl i64 %11797, 32
  %11805 = ashr exact i64 %11804, 32
  %11806 = sext i32 %11803 to i64
  %11807 = mul nsw i64 %11806, %11805
  %11808 = trunc i64 %11807 to i32
  %11809 = and i64 %11807, 4294967295
  store i64 %11809, i64* %RSI, align 8, !tbaa !2428
  %11810 = shl i64 %11807, 32
  %11811 = ashr exact i64 %11810, 32
  %11812 = icmp ne i64 %11811, %11807
  %11813 = zext i1 %11812 to i8
  %11814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11813, i8* %11814, align 1, !tbaa !2432
  %11815 = and i32 %11808, 255
  %11816 = call i32 @llvm.ctpop.i32(i32 %11815) #16
  %11817 = trunc i32 %11816 to i8
  %11818 = and i8 %11817, 1
  %11819 = xor i8 %11818, 1
  %11820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11819, i8* %11820, align 1, !tbaa !2446
  %11821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11821, align 1, !tbaa !2447
  %11822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11822, align 1, !tbaa !2448
  %11823 = lshr i32 %11808, 31
  %11824 = trunc i32 %11823 to i8
  %11825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11824, i8* %11825, align 1, !tbaa !2449
  %11826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11813, i8* %11826, align 1, !tbaa !2450
  %11827 = load i64, i64* %RDX
  %11828 = load i32, i32* %ESI
  %11829 = zext i32 %11828 to i64
  %11830 = load i64, i64* %PC
  %11831 = add i64 %11830, 2
  store i64 %11831, i64* %PC
  %11832 = trunc i64 %11827 to i32
  %11833 = add i32 %11828, %11832
  %11834 = zext i32 %11833 to i64
  store i64 %11834, i64* %RDX, align 8, !tbaa !2428
  %11835 = icmp ult i32 %11833, %11832
  %11836 = icmp ult i32 %11833, %11828
  %11837 = or i1 %11835, %11836
  %11838 = zext i1 %11837 to i8
  %11839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11838, i8* %11839, align 1, !tbaa !2432
  %11840 = and i32 %11833, 255
  %11841 = call i32 @llvm.ctpop.i32(i32 %11840) #16
  %11842 = trunc i32 %11841 to i8
  %11843 = and i8 %11842, 1
  %11844 = xor i8 %11843, 1
  %11845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11844, i8* %11845, align 1, !tbaa !2446
  %11846 = xor i64 %11829, %11827
  %11847 = trunc i64 %11846 to i32
  %11848 = xor i32 %11847, %11833
  %11849 = lshr i32 %11848, 4
  %11850 = trunc i32 %11849 to i8
  %11851 = and i8 %11850, 1
  %11852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11851, i8* %11852, align 1, !tbaa !2447
  %11853 = icmp eq i32 %11833, 0
  %11854 = zext i1 %11853 to i8
  %11855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11854, i8* %11855, align 1, !tbaa !2448
  %11856 = lshr i32 %11833, 31
  %11857 = trunc i32 %11856 to i8
  %11858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11857, i8* %11858, align 1, !tbaa !2449
  %11859 = lshr i32 %11832, 31
  %11860 = lshr i32 %11828, 31
  %11861 = xor i32 %11856, %11859
  %11862 = xor i32 %11856, %11860
  %11863 = add nuw nsw i32 %11861, %11862
  %11864 = icmp eq i32 %11863, 2
  %11865 = zext i1 %11864 to i8
  %11866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11865, i8* %11866, align 1, !tbaa !2450
  %11867 = load i64, i64* %RDX
  %11868 = load i64, i64* %RBP
  %11869 = sub i64 %11868, 76
  %11870 = load i64, i64* %PC
  %11871 = add i64 %11870, 3
  store i64 %11871, i64* %PC
  %11872 = trunc i64 %11867 to i32
  %11873 = inttoptr i64 %11869 to i32*
  %11874 = load i32, i32* %11873
  %11875 = add i32 %11874, %11872
  %11876 = zext i32 %11875 to i64
  store i64 %11876, i64* %RDX, align 8, !tbaa !2428
  %11877 = icmp ult i32 %11875, %11872
  %11878 = icmp ult i32 %11875, %11874
  %11879 = or i1 %11877, %11878
  %11880 = zext i1 %11879 to i8
  %11881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11880, i8* %11881, align 1, !tbaa !2432
  %11882 = and i32 %11875, 255
  %11883 = call i32 @llvm.ctpop.i32(i32 %11882) #16
  %11884 = trunc i32 %11883 to i8
  %11885 = and i8 %11884, 1
  %11886 = xor i8 %11885, 1
  %11887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11886, i8* %11887, align 1, !tbaa !2446
  %11888 = xor i32 %11874, %11872
  %11889 = xor i32 %11888, %11875
  %11890 = lshr i32 %11889, 4
  %11891 = trunc i32 %11890 to i8
  %11892 = and i8 %11891, 1
  %11893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11892, i8* %11893, align 1, !tbaa !2447
  %11894 = icmp eq i32 %11875, 0
  %11895 = zext i1 %11894 to i8
  %11896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11895, i8* %11896, align 1, !tbaa !2448
  %11897 = lshr i32 %11875, 31
  %11898 = trunc i32 %11897 to i8
  %11899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11898, i8* %11899, align 1, !tbaa !2449
  %11900 = lshr i32 %11872, 31
  %11901 = lshr i32 %11874, 31
  %11902 = xor i32 %11897, %11900
  %11903 = xor i32 %11897, %11901
  %11904 = add nuw nsw i32 %11902, %11903
  %11905 = icmp eq i32 %11904, 2
  %11906 = zext i1 %11905 to i8
  %11907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11906, i8* %11907, align 1, !tbaa !2450
  %11908 = load i32, i32* %EDX
  %11909 = zext i32 %11908 to i64
  %11910 = load i64, i64* %PC
  %11911 = add i64 %11910, 3
  store i64 %11911, i64* %PC
  %11912 = shl i64 %11909, 32
  %11913 = ashr exact i64 %11912, 32
  store i64 %11913, i64* %RCX, align 8, !tbaa !2428
  %11914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11915 = load i64, i64* %RAX
  %11916 = load i64, i64* %RCX
  %11917 = mul i64 %11916, 4
  %11918 = add i64 %11917, %11915
  %11919 = load i64, i64* %PC
  %11920 = add i64 %11919, 5
  store i64 %11920, i64* %PC
  %11921 = inttoptr i64 %11918 to float*
  %11922 = load float, float* %11921
  %11923 = bitcast i8* %11914 to float*
  store float %11922, float* %11923, align 1, !tbaa !2452
  %11924 = getelementptr inbounds i8, i8* %11914, i64 4
  %11925 = bitcast i8* %11924 to float*
  store float 0.000000e+00, float* %11925, align 1, !tbaa !2452
  %11926 = getelementptr inbounds i8, i8* %11914, i64 8
  %11927 = bitcast i8* %11926 to float*
  store float 0.000000e+00, float* %11927, align 1, !tbaa !2452
  %11928 = getelementptr inbounds i8, i8* %11914, i64 12
  %11929 = bitcast i8* %11928 to float*
  store float 0.000000e+00, float* %11929, align 1, !tbaa !2452
  %11930 = load i64, i64* %RBP
  %11931 = sub i64 %11930, 40
  %11932 = load i64, i64* %PC
  %11933 = add i64 %11932, 4
  store i64 %11933, i64* %PC
  %11934 = inttoptr i64 %11931 to i64*
  %11935 = load i64, i64* %11934
  store i64 %11935, i64* %RAX, align 8, !tbaa !2428
  %11936 = load i64, i64* %RAX
  %11937 = load i64, i64* %PC
  %11938 = add i64 %11937, 3
  store i64 %11938, i64* %PC
  %11939 = inttoptr i64 %11936 to i64*
  %11940 = load i64, i64* %11939
  store i64 %11940, i64* %RAX, align 8, !tbaa !2428
  %11941 = load i64, i64* %RBP
  %11942 = sub i64 %11941, 40
  %11943 = load i64, i64* %PC
  %11944 = add i64 %11943, 4
  store i64 %11944, i64* %PC
  %11945 = inttoptr i64 %11942 to i64*
  %11946 = load i64, i64* %11945
  store i64 %11946, i64* %RCX, align 8, !tbaa !2428
  %11947 = load i64, i64* %RCX
  %11948 = add i64 %11947, 12
  %11949 = load i64, i64* %PC
  %11950 = add i64 %11949, 4
  store i64 %11950, i64* %PC
  %11951 = inttoptr i64 %11948 to i32*
  %11952 = load i32, i32* %11951
  %11953 = sext i32 %11952 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %11954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11954, align 1, !tbaa !2432
  %11955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11955, align 1, !tbaa !2446
  %11956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11956, align 1, !tbaa !2447
  %11957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11957, align 1, !tbaa !2448
  %11958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %11958, align 1, !tbaa !2449
  %11959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11959, align 1, !tbaa !2450
  %11960 = load i64, i64* %RBP
  %11961 = sub i64 %11960, 40
  %11962 = load i64, i64* %PC
  %11963 = add i64 %11962, 4
  store i64 %11963, i64* %PC
  %11964 = inttoptr i64 %11961 to i64*
  %11965 = load i64, i64* %11964
  store i64 %11965, i64* %RCX, align 8, !tbaa !2428
  %11966 = load i64, i64* %RDX
  %11967 = load i64, i64* %RCX
  %11968 = add i64 %11967, 16
  %11969 = load i64, i64* %PC
  %11970 = add i64 %11969, 4
  store i64 %11970, i64* %PC
  %11971 = inttoptr i64 %11968 to i32*
  %11972 = load i32, i32* %11971
  %11973 = shl i64 %11966, 32
  %11974 = ashr exact i64 %11973, 32
  %11975 = sext i32 %11972 to i64
  %11976 = mul nsw i64 %11975, %11974
  %11977 = trunc i64 %11976 to i32
  %11978 = and i64 %11976, 4294967295
  store i64 %11978, i64* %RDX, align 8, !tbaa !2428
  %11979 = shl i64 %11976, 32
  %11980 = ashr exact i64 %11979, 32
  %11981 = icmp ne i64 %11980, %11976
  %11982 = zext i1 %11981 to i8
  %11983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11982, i8* %11983, align 1, !tbaa !2432
  %11984 = and i32 %11977, 255
  %11985 = call i32 @llvm.ctpop.i32(i32 %11984) #16
  %11986 = trunc i32 %11985 to i8
  %11987 = and i8 %11986, 1
  %11988 = xor i8 %11987, 1
  %11989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11988, i8* %11989, align 1, !tbaa !2446
  %11990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11990, align 1, !tbaa !2447
  %11991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11991, align 1, !tbaa !2448
  %11992 = lshr i32 %11977, 31
  %11993 = trunc i32 %11992 to i8
  %11994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11993, i8* %11994, align 1, !tbaa !2449
  %11995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11982, i8* %11995, align 1, !tbaa !2450
  %11996 = load i64, i64* %RBP
  %11997 = sub i64 %11996, 40
  %11998 = load i64, i64* %PC
  %11999 = add i64 %11998, 4
  store i64 %11999, i64* %PC
  %12000 = inttoptr i64 %11997 to i64*
  %12001 = load i64, i64* %12000
  store i64 %12001, i64* %RCX, align 8, !tbaa !2428
  %12002 = load i64, i64* %RDX
  %12003 = load i64, i64* %RCX
  %12004 = add i64 %12003, 20
  %12005 = load i64, i64* %PC
  %12006 = add i64 %12005, 4
  store i64 %12006, i64* %PC
  %12007 = inttoptr i64 %12004 to i32*
  %12008 = load i32, i32* %12007
  %12009 = shl i64 %12002, 32
  %12010 = ashr exact i64 %12009, 32
  %12011 = sext i32 %12008 to i64
  %12012 = mul nsw i64 %12011, %12010
  %12013 = trunc i64 %12012 to i32
  %12014 = and i64 %12012, 4294967295
  store i64 %12014, i64* %RDX, align 8, !tbaa !2428
  %12015 = shl i64 %12012, 32
  %12016 = ashr exact i64 %12015, 32
  %12017 = icmp ne i64 %12016, %12012
  %12018 = zext i1 %12017 to i8
  %12019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12018, i8* %12019, align 1, !tbaa !2432
  %12020 = and i32 %12013, 255
  %12021 = call i32 @llvm.ctpop.i32(i32 %12020) #16
  %12022 = trunc i32 %12021 to i8
  %12023 = and i8 %12022, 1
  %12024 = xor i8 %12023, 1
  %12025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12024, i8* %12025, align 1, !tbaa !2446
  %12026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12026, align 1, !tbaa !2447
  %12027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12027, align 1, !tbaa !2448
  %12028 = lshr i32 %12013, 31
  %12029 = trunc i32 %12028 to i8
  %12030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12029, i8* %12030, align 1, !tbaa !2449
  %12031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12018, i8* %12031, align 1, !tbaa !2450
  %12032 = load i64, i64* %RBP
  %12033 = sub i64 %12032, 68
  %12034 = load i64, i64* %PC
  %12035 = add i64 %12034, 3
  store i64 %12035, i64* %PC
  %12036 = inttoptr i64 %12033 to i32*
  %12037 = load i32, i32* %12036
  %12038 = zext i32 %12037 to i64
  store i64 %12038, i64* %RSI, align 8, !tbaa !2428
  %12039 = load i64, i64* %RBP
  %12040 = sub i64 %12039, 40
  %12041 = load i64, i64* %PC
  %12042 = add i64 %12041, 4
  store i64 %12042, i64* %PC
  %12043 = inttoptr i64 %12040 to i64*
  %12044 = load i64, i64* %12043
  store i64 %12044, i64* %RCX, align 8, !tbaa !2428
  %12045 = load i64, i64* %RSI
  %12046 = load i64, i64* %RCX
  %12047 = add i64 %12046, 16
  %12048 = load i64, i64* %PC
  %12049 = add i64 %12048, 4
  store i64 %12049, i64* %PC
  %12050 = inttoptr i64 %12047 to i32*
  %12051 = load i32, i32* %12050
  %12052 = shl i64 %12045, 32
  %12053 = ashr exact i64 %12052, 32
  %12054 = sext i32 %12051 to i64
  %12055 = mul nsw i64 %12054, %12053
  %12056 = trunc i64 %12055 to i32
  %12057 = and i64 %12055, 4294967295
  store i64 %12057, i64* %RSI, align 8, !tbaa !2428
  %12058 = shl i64 %12055, 32
  %12059 = ashr exact i64 %12058, 32
  %12060 = icmp ne i64 %12059, %12055
  %12061 = zext i1 %12060 to i8
  %12062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12061, i8* %12062, align 1, !tbaa !2432
  %12063 = and i32 %12056, 255
  %12064 = call i32 @llvm.ctpop.i32(i32 %12063) #16
  %12065 = trunc i32 %12064 to i8
  %12066 = and i8 %12065, 1
  %12067 = xor i8 %12066, 1
  %12068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12067, i8* %12068, align 1, !tbaa !2446
  %12069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12069, align 1, !tbaa !2447
  %12070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12070, align 1, !tbaa !2448
  %12071 = lshr i32 %12056, 31
  %12072 = trunc i32 %12071 to i8
  %12073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12072, i8* %12073, align 1, !tbaa !2449
  %12074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12061, i8* %12074, align 1, !tbaa !2450
  %12075 = load i64, i64* %RBP
  %12076 = sub i64 %12075, 40
  %12077 = load i64, i64* %PC
  %12078 = add i64 %12077, 4
  store i64 %12078, i64* %PC
  %12079 = inttoptr i64 %12076 to i64*
  %12080 = load i64, i64* %12079
  store i64 %12080, i64* %RCX, align 8, !tbaa !2428
  %12081 = load i64, i64* %RSI
  %12082 = load i64, i64* %RCX
  %12083 = add i64 %12082, 20
  %12084 = load i64, i64* %PC
  %12085 = add i64 %12084, 4
  store i64 %12085, i64* %PC
  %12086 = inttoptr i64 %12083 to i32*
  %12087 = load i32, i32* %12086
  %12088 = shl i64 %12081, 32
  %12089 = ashr exact i64 %12088, 32
  %12090 = sext i32 %12087 to i64
  %12091 = mul nsw i64 %12090, %12089
  %12092 = trunc i64 %12091 to i32
  %12093 = and i64 %12091, 4294967295
  store i64 %12093, i64* %RSI, align 8, !tbaa !2428
  %12094 = shl i64 %12091, 32
  %12095 = ashr exact i64 %12094, 32
  %12096 = icmp ne i64 %12095, %12091
  %12097 = zext i1 %12096 to i8
  %12098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12097, i8* %12098, align 1, !tbaa !2432
  %12099 = and i32 %12092, 255
  %12100 = call i32 @llvm.ctpop.i32(i32 %12099) #16
  %12101 = trunc i32 %12100 to i8
  %12102 = and i8 %12101, 1
  %12103 = xor i8 %12102, 1
  %12104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12103, i8* %12104, align 1, !tbaa !2446
  %12105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12105, align 1, !tbaa !2447
  %12106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12106, align 1, !tbaa !2448
  %12107 = lshr i32 %12092, 31
  %12108 = trunc i32 %12107 to i8
  %12109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12108, i8* %12109, align 1, !tbaa !2449
  %12110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12097, i8* %12110, align 1, !tbaa !2450
  %12111 = load i64, i64* %RDX
  %12112 = load i32, i32* %ESI
  %12113 = zext i32 %12112 to i64
  %12114 = load i64, i64* %PC
  %12115 = add i64 %12114, 2
  store i64 %12115, i64* %PC
  %12116 = trunc i64 %12111 to i32
  %12117 = add i32 %12112, %12116
  %12118 = zext i32 %12117 to i64
  store i64 %12118, i64* %RDX, align 8, !tbaa !2428
  %12119 = icmp ult i32 %12117, %12116
  %12120 = icmp ult i32 %12117, %12112
  %12121 = or i1 %12119, %12120
  %12122 = zext i1 %12121 to i8
  %12123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12122, i8* %12123, align 1, !tbaa !2432
  %12124 = and i32 %12117, 255
  %12125 = call i32 @llvm.ctpop.i32(i32 %12124) #16
  %12126 = trunc i32 %12125 to i8
  %12127 = and i8 %12126, 1
  %12128 = xor i8 %12127, 1
  %12129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12128, i8* %12129, align 1, !tbaa !2446
  %12130 = xor i64 %12113, %12111
  %12131 = trunc i64 %12130 to i32
  %12132 = xor i32 %12131, %12117
  %12133 = lshr i32 %12132, 4
  %12134 = trunc i32 %12133 to i8
  %12135 = and i8 %12134, 1
  %12136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12135, i8* %12136, align 1, !tbaa !2447
  %12137 = icmp eq i32 %12117, 0
  %12138 = zext i1 %12137 to i8
  %12139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12138, i8* %12139, align 1, !tbaa !2448
  %12140 = lshr i32 %12117, 31
  %12141 = trunc i32 %12140 to i8
  %12142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12141, i8* %12142, align 1, !tbaa !2449
  %12143 = lshr i32 %12116, 31
  %12144 = lshr i32 %12112, 31
  %12145 = xor i32 %12140, %12143
  %12146 = xor i32 %12140, %12144
  %12147 = add nuw nsw i32 %12145, %12146
  %12148 = icmp eq i32 %12147, 2
  %12149 = zext i1 %12148 to i8
  %12150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12149, i8* %12150, align 1, !tbaa !2450
  %12151 = load i64, i64* %RBP
  %12152 = sub i64 %12151, 72
  %12153 = load i64, i64* %PC
  %12154 = add i64 %12153, 3
  store i64 %12154, i64* %PC
  %12155 = inttoptr i64 %12152 to i32*
  %12156 = load i32, i32* %12155
  %12157 = zext i32 %12156 to i64
  store i64 %12157, i64* %RSI, align 8, !tbaa !2428
  %12158 = load i64, i64* %RSI
  %12159 = load i64, i64* %PC
  %12160 = add i64 %12159, 3
  store i64 %12160, i64* %PC
  %12161 = trunc i64 %12158 to i32
  %12162 = sub i32 %12161, 1
  %12163 = zext i32 %12162 to i64
  store i64 %12163, i64* %RSI, align 8, !tbaa !2428
  %12164 = icmp ult i32 %12161, 1
  %12165 = zext i1 %12164 to i8
  %12166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12165, i8* %12166, align 1, !tbaa !2432
  %12167 = and i32 %12162, 255
  %12168 = call i32 @llvm.ctpop.i32(i32 %12167) #16
  %12169 = trunc i32 %12168 to i8
  %12170 = and i8 %12169, 1
  %12171 = xor i8 %12170, 1
  %12172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12171, i8* %12172, align 1, !tbaa !2446
  %12173 = xor i64 1, %12158
  %12174 = trunc i64 %12173 to i32
  %12175 = xor i32 %12174, %12162
  %12176 = lshr i32 %12175, 4
  %12177 = trunc i32 %12176 to i8
  %12178 = and i8 %12177, 1
  %12179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12178, i8* %12179, align 1, !tbaa !2447
  %12180 = icmp eq i32 %12162, 0
  %12181 = zext i1 %12180 to i8
  %12182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12181, i8* %12182, align 1, !tbaa !2448
  %12183 = lshr i32 %12162, 31
  %12184 = trunc i32 %12183 to i8
  %12185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12184, i8* %12185, align 1, !tbaa !2449
  %12186 = lshr i32 %12161, 31
  %12187 = xor i32 %12183, %12186
  %12188 = add nuw nsw i32 %12187, %12186
  %12189 = icmp eq i32 %12188, 2
  %12190 = zext i1 %12189 to i8
  %12191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12190, i8* %12191, align 1, !tbaa !2450
  %12192 = load i64, i64* %RBP
  %12193 = sub i64 %12192, 40
  %12194 = load i64, i64* %PC
  %12195 = add i64 %12194, 4
  store i64 %12195, i64* %PC
  %12196 = inttoptr i64 %12193 to i64*
  %12197 = load i64, i64* %12196
  store i64 %12197, i64* %RCX, align 8, !tbaa !2428
  %12198 = load i64, i64* %RSI
  %12199 = load i64, i64* %RCX
  %12200 = add i64 %12199, 20
  %12201 = load i64, i64* %PC
  %12202 = add i64 %12201, 4
  store i64 %12202, i64* %PC
  %12203 = inttoptr i64 %12200 to i32*
  %12204 = load i32, i32* %12203
  %12205 = shl i64 %12198, 32
  %12206 = ashr exact i64 %12205, 32
  %12207 = sext i32 %12204 to i64
  %12208 = mul nsw i64 %12207, %12206
  %12209 = trunc i64 %12208 to i32
  %12210 = and i64 %12208, 4294967295
  store i64 %12210, i64* %RSI, align 8, !tbaa !2428
  %12211 = shl i64 %12208, 32
  %12212 = ashr exact i64 %12211, 32
  %12213 = icmp ne i64 %12212, %12208
  %12214 = zext i1 %12213 to i8
  %12215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12214, i8* %12215, align 1, !tbaa !2432
  %12216 = and i32 %12209, 255
  %12217 = call i32 @llvm.ctpop.i32(i32 %12216) #16
  %12218 = trunc i32 %12217 to i8
  %12219 = and i8 %12218, 1
  %12220 = xor i8 %12219, 1
  %12221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12220, i8* %12221, align 1, !tbaa !2446
  %12222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12222, align 1, !tbaa !2447
  %12223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12223, align 1, !tbaa !2448
  %12224 = lshr i32 %12209, 31
  %12225 = trunc i32 %12224 to i8
  %12226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12225, i8* %12226, align 1, !tbaa !2449
  %12227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12214, i8* %12227, align 1, !tbaa !2450
  %12228 = load i64, i64* %RDX
  %12229 = load i32, i32* %ESI
  %12230 = zext i32 %12229 to i64
  %12231 = load i64, i64* %PC
  %12232 = add i64 %12231, 2
  store i64 %12232, i64* %PC
  %12233 = trunc i64 %12228 to i32
  %12234 = add i32 %12229, %12233
  %12235 = zext i32 %12234 to i64
  store i64 %12235, i64* %RDX, align 8, !tbaa !2428
  %12236 = icmp ult i32 %12234, %12233
  %12237 = icmp ult i32 %12234, %12229
  %12238 = or i1 %12236, %12237
  %12239 = zext i1 %12238 to i8
  %12240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12239, i8* %12240, align 1, !tbaa !2432
  %12241 = and i32 %12234, 255
  %12242 = call i32 @llvm.ctpop.i32(i32 %12241) #16
  %12243 = trunc i32 %12242 to i8
  %12244 = and i8 %12243, 1
  %12245 = xor i8 %12244, 1
  %12246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12245, i8* %12246, align 1, !tbaa !2446
  %12247 = xor i64 %12230, %12228
  %12248 = trunc i64 %12247 to i32
  %12249 = xor i32 %12248, %12234
  %12250 = lshr i32 %12249, 4
  %12251 = trunc i32 %12250 to i8
  %12252 = and i8 %12251, 1
  %12253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12252, i8* %12253, align 1, !tbaa !2447
  %12254 = icmp eq i32 %12234, 0
  %12255 = zext i1 %12254 to i8
  %12256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12255, i8* %12256, align 1, !tbaa !2448
  %12257 = lshr i32 %12234, 31
  %12258 = trunc i32 %12257 to i8
  %12259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12258, i8* %12259, align 1, !tbaa !2449
  %12260 = lshr i32 %12233, 31
  %12261 = lshr i32 %12229, 31
  %12262 = xor i32 %12257, %12260
  %12263 = xor i32 %12257, %12261
  %12264 = add nuw nsw i32 %12262, %12263
  %12265 = icmp eq i32 %12264, 2
  %12266 = zext i1 %12265 to i8
  %12267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12266, i8* %12267, align 1, !tbaa !2450
  %12268 = load i64, i64* %RDX
  %12269 = load i64, i64* %RBP
  %12270 = sub i64 %12269, 76
  %12271 = load i64, i64* %PC
  %12272 = add i64 %12271, 3
  store i64 %12272, i64* %PC
  %12273 = trunc i64 %12268 to i32
  %12274 = inttoptr i64 %12270 to i32*
  %12275 = load i32, i32* %12274
  %12276 = add i32 %12275, %12273
  %12277 = zext i32 %12276 to i64
  store i64 %12277, i64* %RDX, align 8, !tbaa !2428
  %12278 = icmp ult i32 %12276, %12273
  %12279 = icmp ult i32 %12276, %12275
  %12280 = or i1 %12278, %12279
  %12281 = zext i1 %12280 to i8
  %12282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12281, i8* %12282, align 1, !tbaa !2432
  %12283 = and i32 %12276, 255
  %12284 = call i32 @llvm.ctpop.i32(i32 %12283) #16
  %12285 = trunc i32 %12284 to i8
  %12286 = and i8 %12285, 1
  %12287 = xor i8 %12286, 1
  %12288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12287, i8* %12288, align 1, !tbaa !2446
  %12289 = xor i32 %12275, %12273
  %12290 = xor i32 %12289, %12276
  %12291 = lshr i32 %12290, 4
  %12292 = trunc i32 %12291 to i8
  %12293 = and i8 %12292, 1
  %12294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12293, i8* %12294, align 1, !tbaa !2447
  %12295 = icmp eq i32 %12276, 0
  %12296 = zext i1 %12295 to i8
  %12297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12296, i8* %12297, align 1, !tbaa !2448
  %12298 = lshr i32 %12276, 31
  %12299 = trunc i32 %12298 to i8
  %12300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12299, i8* %12300, align 1, !tbaa !2449
  %12301 = lshr i32 %12273, 31
  %12302 = lshr i32 %12275, 31
  %12303 = xor i32 %12298, %12301
  %12304 = xor i32 %12298, %12302
  %12305 = add nuw nsw i32 %12303, %12304
  %12306 = icmp eq i32 %12305, 2
  %12307 = zext i1 %12306 to i8
  %12308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12307, i8* %12308, align 1, !tbaa !2450
  %12309 = load i32, i32* %EDX
  %12310 = zext i32 %12309 to i64
  %12311 = load i64, i64* %PC
  %12312 = add i64 %12311, 3
  store i64 %12312, i64* %PC
  %12313 = shl i64 %12310, 32
  %12314 = ashr exact i64 %12313, 32
  store i64 %12314, i64* %RCX, align 8, !tbaa !2428
  %12315 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12316 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12317 = load i64, i64* %RAX
  %12318 = load i64, i64* %RCX
  %12319 = mul i64 %12318, 4
  %12320 = add i64 %12319, %12317
  %12321 = load i64, i64* %PC
  %12322 = add i64 %12321, 5
  store i64 %12322, i64* %PC
  %12323 = bitcast i8* %12316 to <2 x float>*
  %12324 = load <2 x float>, <2 x float>* %12323, align 1
  %12325 = getelementptr inbounds i8, i8* %12316, i64 8
  %12326 = bitcast i8* %12325 to <2 x i32>*
  %12327 = load <2 x i32>, <2 x i32>* %12326, align 1
  %12328 = inttoptr i64 %12320 to float*
  %12329 = load float, float* %12328
  %12330 = extractelement <2 x float> %12324, i32 0
  %12331 = fmul float %12330, %12329
  %12332 = bitcast i8* %12315 to float*
  store float %12331, float* %12332, align 1, !tbaa !2452
  %12333 = bitcast <2 x float> %12324 to <2 x i32>
  %12334 = extractelement <2 x i32> %12333, i32 1
  %12335 = getelementptr inbounds i8, i8* %12315, i64 4
  %12336 = bitcast i8* %12335 to i32*
  store i32 %12334, i32* %12336, align 1, !tbaa !2452
  %12337 = extractelement <2 x i32> %12327, i32 0
  %12338 = getelementptr inbounds i8, i8* %12315, i64 8
  %12339 = bitcast i8* %12338 to i32*
  store i32 %12337, i32* %12339, align 1, !tbaa !2452
  %12340 = extractelement <2 x i32> %12327, i32 1
  %12341 = getelementptr inbounds i8, i8* %12315, i64 12
  %12342 = bitcast i8* %12341 to i32*
  store i32 %12340, i32* %12342, align 1, !tbaa !2452
  %12343 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12344 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12345 = bitcast %union.vec128_t* %XMM1 to i8*
  %12346 = load i64, i64* %PC
  %12347 = add i64 %12346, 4
  store i64 %12347, i64* %PC
  %12348 = bitcast i8* %12344 to <2 x float>*
  %12349 = load <2 x float>, <2 x float>* %12348, align 1
  %12350 = getelementptr inbounds i8, i8* %12344, i64 8
  %12351 = bitcast i8* %12350 to <2 x i32>*
  %12352 = load <2 x i32>, <2 x i32>* %12351, align 1
  %12353 = bitcast i8* %12345 to <2 x float>*
  %12354 = load <2 x float>, <2 x float>* %12353, align 1
  %12355 = extractelement <2 x float> %12349, i32 0
  %12356 = extractelement <2 x float> %12354, i32 0
  %12357 = fadd float %12355, %12356
  %12358 = bitcast i8* %12343 to float*
  store float %12357, float* %12358, align 1, !tbaa !2452
  %12359 = bitcast <2 x float> %12349 to <2 x i32>
  %12360 = extractelement <2 x i32> %12359, i32 1
  %12361 = getelementptr inbounds i8, i8* %12343, i64 4
  %12362 = bitcast i8* %12361 to i32*
  store i32 %12360, i32* %12362, align 1, !tbaa !2452
  %12363 = extractelement <2 x i32> %12352, i32 0
  %12364 = getelementptr inbounds i8, i8* %12343, i64 8
  %12365 = bitcast i8* %12364 to i32*
  store i32 %12363, i32* %12365, align 1, !tbaa !2452
  %12366 = extractelement <2 x i32> %12352, i32 1
  %12367 = getelementptr inbounds i8, i8* %12343, i64 12
  %12368 = bitcast i8* %12367 to i32*
  store i32 %12366, i32* %12368, align 1, !tbaa !2452
  %12369 = load i64, i64* %RBP
  %12370 = sub i64 %12369, 32
  %12371 = load i64, i64* %PC
  %12372 = add i64 %12371, 4
  store i64 %12372, i64* %PC
  %12373 = inttoptr i64 %12370 to i64*
  %12374 = load i64, i64* %12373
  store i64 %12374, i64* %RAX, align 8, !tbaa !2428
  %12375 = load i64, i64* %RAX
  %12376 = load i64, i64* %PC
  %12377 = add i64 %12376, 3
  store i64 %12377, i64* %PC
  %12378 = inttoptr i64 %12375 to i64*
  %12379 = load i64, i64* %12378
  store i64 %12379, i64* %RAX, align 8, !tbaa !2428
  %12380 = load i64, i64* %RBP
  %12381 = sub i64 %12380, 32
  %12382 = load i64, i64* %PC
  %12383 = add i64 %12382, 4
  store i64 %12383, i64* %PC
  %12384 = inttoptr i64 %12381 to i64*
  %12385 = load i64, i64* %12384
  store i64 %12385, i64* %RCX, align 8, !tbaa !2428
  %12386 = load i64, i64* %RCX
  %12387 = add i64 %12386, 12
  %12388 = load i64, i64* %PC
  %12389 = add i64 %12388, 3
  store i64 %12389, i64* %PC
  %12390 = inttoptr i64 %12387 to i32*
  %12391 = load i32, i32* %12390
  %12392 = zext i32 %12391 to i64
  store i64 %12392, i64* %RDX, align 8, !tbaa !2428
  %12393 = load i64, i64* %RDX
  %12394 = load i64, i64* %PC
  %12395 = add i64 %12394, 3
  store i64 %12395, i64* %PC
  %12396 = trunc i64 %12393 to i32
  %12397 = shl i32 %12396, 1
  %12398 = icmp slt i32 %12396, 0
  %12399 = icmp slt i32 %12397, 0
  %12400 = xor i1 %12398, %12399
  %12401 = zext i32 %12397 to i64
  store i64 %12401, i64* %RDX, align 8, !tbaa !2428
  %12402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12403 = zext i1 %12398 to i8
  store i8 %12403, i8* %12402, align 1, !tbaa !2451
  %12404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12405 = and i32 %12397, 254
  %12406 = call i32 @llvm.ctpop.i32(i32 %12405) #16
  %12407 = trunc i32 %12406 to i8
  %12408 = and i8 %12407, 1
  %12409 = xor i8 %12408, 1
  store i8 %12409, i8* %12404, align 1, !tbaa !2451
  %12410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12410, align 1, !tbaa !2451
  %12411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12412 = icmp eq i32 %12397, 0
  %12413 = zext i1 %12412 to i8
  store i8 %12413, i8* %12411, align 1, !tbaa !2451
  %12414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12415 = lshr i32 %12397, 31
  %12416 = trunc i32 %12415 to i8
  store i8 %12416, i8* %12414, align 1, !tbaa !2451
  %12417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %12418 = zext i1 %12400 to i8
  store i8 %12418, i8* %12417, align 1, !tbaa !2451
  %12419 = load i64, i64* %RBP
  %12420 = sub i64 %12419, 32
  %12421 = load i64, i64* %PC
  %12422 = add i64 %12421, 4
  store i64 %12422, i64* %PC
  %12423 = inttoptr i64 %12420 to i64*
  %12424 = load i64, i64* %12423
  store i64 %12424, i64* %RCX, align 8, !tbaa !2428
  %12425 = load i64, i64* %RDX
  %12426 = load i64, i64* %RCX
  %12427 = add i64 %12426, 16
  %12428 = load i64, i64* %PC
  %12429 = add i64 %12428, 4
  store i64 %12429, i64* %PC
  %12430 = inttoptr i64 %12427 to i32*
  %12431 = load i32, i32* %12430
  %12432 = shl i64 %12425, 32
  %12433 = ashr exact i64 %12432, 32
  %12434 = sext i32 %12431 to i64
  %12435 = mul nsw i64 %12434, %12433
  %12436 = trunc i64 %12435 to i32
  %12437 = and i64 %12435, 4294967295
  store i64 %12437, i64* %RDX, align 8, !tbaa !2428
  %12438 = shl i64 %12435, 32
  %12439 = ashr exact i64 %12438, 32
  %12440 = icmp ne i64 %12439, %12435
  %12441 = zext i1 %12440 to i8
  %12442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12441, i8* %12442, align 1, !tbaa !2432
  %12443 = and i32 %12436, 255
  %12444 = call i32 @llvm.ctpop.i32(i32 %12443) #16
  %12445 = trunc i32 %12444 to i8
  %12446 = and i8 %12445, 1
  %12447 = xor i8 %12446, 1
  %12448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12447, i8* %12448, align 1, !tbaa !2446
  %12449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12449, align 1, !tbaa !2447
  %12450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12450, align 1, !tbaa !2448
  %12451 = lshr i32 %12436, 31
  %12452 = trunc i32 %12451 to i8
  %12453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12452, i8* %12453, align 1, !tbaa !2449
  %12454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12441, i8* %12454, align 1, !tbaa !2450
  %12455 = load i64, i64* %RBP
  %12456 = sub i64 %12455, 32
  %12457 = load i64, i64* %PC
  %12458 = add i64 %12457, 4
  store i64 %12458, i64* %PC
  %12459 = inttoptr i64 %12456 to i64*
  %12460 = load i64, i64* %12459
  store i64 %12460, i64* %RCX, align 8, !tbaa !2428
  %12461 = load i64, i64* %RDX
  %12462 = load i64, i64* %RCX
  %12463 = add i64 %12462, 20
  %12464 = load i64, i64* %PC
  %12465 = add i64 %12464, 4
  store i64 %12465, i64* %PC
  %12466 = inttoptr i64 %12463 to i32*
  %12467 = load i32, i32* %12466
  %12468 = shl i64 %12461, 32
  %12469 = ashr exact i64 %12468, 32
  %12470 = sext i32 %12467 to i64
  %12471 = mul nsw i64 %12470, %12469
  %12472 = trunc i64 %12471 to i32
  %12473 = and i64 %12471, 4294967295
  store i64 %12473, i64* %RDX, align 8, !tbaa !2428
  %12474 = shl i64 %12471, 32
  %12475 = ashr exact i64 %12474, 32
  %12476 = icmp ne i64 %12475, %12471
  %12477 = zext i1 %12476 to i8
  %12478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12477, i8* %12478, align 1, !tbaa !2432
  %12479 = and i32 %12472, 255
  %12480 = call i32 @llvm.ctpop.i32(i32 %12479) #16
  %12481 = trunc i32 %12480 to i8
  %12482 = and i8 %12481, 1
  %12483 = xor i8 %12482, 1
  %12484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12483, i8* %12484, align 1, !tbaa !2446
  %12485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12485, align 1, !tbaa !2447
  %12486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12486, align 1, !tbaa !2448
  %12487 = lshr i32 %12472, 31
  %12488 = trunc i32 %12487 to i8
  %12489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12488, i8* %12489, align 1, !tbaa !2449
  %12490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12477, i8* %12490, align 1, !tbaa !2450
  %12491 = load i64, i64* %RBP
  %12492 = sub i64 %12491, 68
  %12493 = load i64, i64* %PC
  %12494 = add i64 %12493, 3
  store i64 %12494, i64* %PC
  %12495 = inttoptr i64 %12492 to i32*
  %12496 = load i32, i32* %12495
  %12497 = zext i32 %12496 to i64
  store i64 %12497, i64* %RSI, align 8, !tbaa !2428
  %12498 = load i64, i64* %RBP
  %12499 = sub i64 %12498, 32
  %12500 = load i64, i64* %PC
  %12501 = add i64 %12500, 4
  store i64 %12501, i64* %PC
  %12502 = inttoptr i64 %12499 to i64*
  %12503 = load i64, i64* %12502
  store i64 %12503, i64* %RCX, align 8, !tbaa !2428
  %12504 = load i64, i64* %RSI
  %12505 = load i64, i64* %RCX
  %12506 = add i64 %12505, 16
  %12507 = load i64, i64* %PC
  %12508 = add i64 %12507, 4
  store i64 %12508, i64* %PC
  %12509 = inttoptr i64 %12506 to i32*
  %12510 = load i32, i32* %12509
  %12511 = shl i64 %12504, 32
  %12512 = ashr exact i64 %12511, 32
  %12513 = sext i32 %12510 to i64
  %12514 = mul nsw i64 %12513, %12512
  %12515 = trunc i64 %12514 to i32
  %12516 = and i64 %12514, 4294967295
  store i64 %12516, i64* %RSI, align 8, !tbaa !2428
  %12517 = shl i64 %12514, 32
  %12518 = ashr exact i64 %12517, 32
  %12519 = icmp ne i64 %12518, %12514
  %12520 = zext i1 %12519 to i8
  %12521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12520, i8* %12521, align 1, !tbaa !2432
  %12522 = and i32 %12515, 255
  %12523 = call i32 @llvm.ctpop.i32(i32 %12522) #16
  %12524 = trunc i32 %12523 to i8
  %12525 = and i8 %12524, 1
  %12526 = xor i8 %12525, 1
  %12527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12526, i8* %12527, align 1, !tbaa !2446
  %12528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12528, align 1, !tbaa !2447
  %12529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12529, align 1, !tbaa !2448
  %12530 = lshr i32 %12515, 31
  %12531 = trunc i32 %12530 to i8
  %12532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12531, i8* %12532, align 1, !tbaa !2449
  %12533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12520, i8* %12533, align 1, !tbaa !2450
  %12534 = load i64, i64* %RBP
  %12535 = sub i64 %12534, 32
  %12536 = load i64, i64* %PC
  %12537 = add i64 %12536, 4
  store i64 %12537, i64* %PC
  %12538 = inttoptr i64 %12535 to i64*
  %12539 = load i64, i64* %12538
  store i64 %12539, i64* %RCX, align 8, !tbaa !2428
  %12540 = load i64, i64* %RSI
  %12541 = load i64, i64* %RCX
  %12542 = add i64 %12541, 20
  %12543 = load i64, i64* %PC
  %12544 = add i64 %12543, 4
  store i64 %12544, i64* %PC
  %12545 = inttoptr i64 %12542 to i32*
  %12546 = load i32, i32* %12545
  %12547 = shl i64 %12540, 32
  %12548 = ashr exact i64 %12547, 32
  %12549 = sext i32 %12546 to i64
  %12550 = mul nsw i64 %12549, %12548
  %12551 = trunc i64 %12550 to i32
  %12552 = and i64 %12550, 4294967295
  store i64 %12552, i64* %RSI, align 8, !tbaa !2428
  %12553 = shl i64 %12550, 32
  %12554 = ashr exact i64 %12553, 32
  %12555 = icmp ne i64 %12554, %12550
  %12556 = zext i1 %12555 to i8
  %12557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12556, i8* %12557, align 1, !tbaa !2432
  %12558 = and i32 %12551, 255
  %12559 = call i32 @llvm.ctpop.i32(i32 %12558) #16
  %12560 = trunc i32 %12559 to i8
  %12561 = and i8 %12560, 1
  %12562 = xor i8 %12561, 1
  %12563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12562, i8* %12563, align 1, !tbaa !2446
  %12564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12564, align 1, !tbaa !2447
  %12565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12565, align 1, !tbaa !2448
  %12566 = lshr i32 %12551, 31
  %12567 = trunc i32 %12566 to i8
  %12568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12567, i8* %12568, align 1, !tbaa !2449
  %12569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12556, i8* %12569, align 1, !tbaa !2450
  %12570 = load i64, i64* %RDX
  %12571 = load i32, i32* %ESI
  %12572 = zext i32 %12571 to i64
  %12573 = load i64, i64* %PC
  %12574 = add i64 %12573, 2
  store i64 %12574, i64* %PC
  %12575 = trunc i64 %12570 to i32
  %12576 = add i32 %12571, %12575
  %12577 = zext i32 %12576 to i64
  store i64 %12577, i64* %RDX, align 8, !tbaa !2428
  %12578 = icmp ult i32 %12576, %12575
  %12579 = icmp ult i32 %12576, %12571
  %12580 = or i1 %12578, %12579
  %12581 = zext i1 %12580 to i8
  %12582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12581, i8* %12582, align 1, !tbaa !2432
  %12583 = and i32 %12576, 255
  %12584 = call i32 @llvm.ctpop.i32(i32 %12583) #16
  %12585 = trunc i32 %12584 to i8
  %12586 = and i8 %12585, 1
  %12587 = xor i8 %12586, 1
  %12588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12587, i8* %12588, align 1, !tbaa !2446
  %12589 = xor i64 %12572, %12570
  %12590 = trunc i64 %12589 to i32
  %12591 = xor i32 %12590, %12576
  %12592 = lshr i32 %12591, 4
  %12593 = trunc i32 %12592 to i8
  %12594 = and i8 %12593, 1
  %12595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12594, i8* %12595, align 1, !tbaa !2447
  %12596 = icmp eq i32 %12576, 0
  %12597 = zext i1 %12596 to i8
  %12598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12597, i8* %12598, align 1, !tbaa !2448
  %12599 = lshr i32 %12576, 31
  %12600 = trunc i32 %12599 to i8
  %12601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12600, i8* %12601, align 1, !tbaa !2449
  %12602 = lshr i32 %12575, 31
  %12603 = lshr i32 %12571, 31
  %12604 = xor i32 %12599, %12602
  %12605 = xor i32 %12599, %12603
  %12606 = add nuw nsw i32 %12604, %12605
  %12607 = icmp eq i32 %12606, 2
  %12608 = zext i1 %12607 to i8
  %12609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12608, i8* %12609, align 1, !tbaa !2450
  %12610 = load i64, i64* %RBP
  %12611 = sub i64 %12610, 72
  %12612 = load i64, i64* %PC
  %12613 = add i64 %12612, 3
  store i64 %12613, i64* %PC
  %12614 = inttoptr i64 %12611 to i32*
  %12615 = load i32, i32* %12614
  %12616 = zext i32 %12615 to i64
  store i64 %12616, i64* %RSI, align 8, !tbaa !2428
  %12617 = load i64, i64* %RBP
  %12618 = sub i64 %12617, 32
  %12619 = load i64, i64* %PC
  %12620 = add i64 %12619, 4
  store i64 %12620, i64* %PC
  %12621 = inttoptr i64 %12618 to i64*
  %12622 = load i64, i64* %12621
  store i64 %12622, i64* %RCX, align 8, !tbaa !2428
  %12623 = load i64, i64* %RSI
  %12624 = load i64, i64* %RCX
  %12625 = add i64 %12624, 20
  %12626 = load i64, i64* %PC
  %12627 = add i64 %12626, 4
  store i64 %12627, i64* %PC
  %12628 = inttoptr i64 %12625 to i32*
  %12629 = load i32, i32* %12628
  %12630 = shl i64 %12623, 32
  %12631 = ashr exact i64 %12630, 32
  %12632 = sext i32 %12629 to i64
  %12633 = mul nsw i64 %12632, %12631
  %12634 = trunc i64 %12633 to i32
  %12635 = and i64 %12633, 4294967295
  store i64 %12635, i64* %RSI, align 8, !tbaa !2428
  %12636 = shl i64 %12633, 32
  %12637 = ashr exact i64 %12636, 32
  %12638 = icmp ne i64 %12637, %12633
  %12639 = zext i1 %12638 to i8
  %12640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12639, i8* %12640, align 1, !tbaa !2432
  %12641 = and i32 %12634, 255
  %12642 = call i32 @llvm.ctpop.i32(i32 %12641) #16
  %12643 = trunc i32 %12642 to i8
  %12644 = and i8 %12643, 1
  %12645 = xor i8 %12644, 1
  %12646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12645, i8* %12646, align 1, !tbaa !2446
  %12647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12647, align 1, !tbaa !2447
  %12648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12648, align 1, !tbaa !2448
  %12649 = lshr i32 %12634, 31
  %12650 = trunc i32 %12649 to i8
  %12651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12650, i8* %12651, align 1, !tbaa !2449
  %12652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12639, i8* %12652, align 1, !tbaa !2450
  %12653 = load i64, i64* %RDX
  %12654 = load i32, i32* %ESI
  %12655 = zext i32 %12654 to i64
  %12656 = load i64, i64* %PC
  %12657 = add i64 %12656, 2
  store i64 %12657, i64* %PC
  %12658 = trunc i64 %12653 to i32
  %12659 = add i32 %12654, %12658
  %12660 = zext i32 %12659 to i64
  store i64 %12660, i64* %RDX, align 8, !tbaa !2428
  %12661 = icmp ult i32 %12659, %12658
  %12662 = icmp ult i32 %12659, %12654
  %12663 = or i1 %12661, %12662
  %12664 = zext i1 %12663 to i8
  %12665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12664, i8* %12665, align 1, !tbaa !2432
  %12666 = and i32 %12659, 255
  %12667 = call i32 @llvm.ctpop.i32(i32 %12666) #16
  %12668 = trunc i32 %12667 to i8
  %12669 = and i8 %12668, 1
  %12670 = xor i8 %12669, 1
  %12671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12670, i8* %12671, align 1, !tbaa !2446
  %12672 = xor i64 %12655, %12653
  %12673 = trunc i64 %12672 to i32
  %12674 = xor i32 %12673, %12659
  %12675 = lshr i32 %12674, 4
  %12676 = trunc i32 %12675 to i8
  %12677 = and i8 %12676, 1
  %12678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12677, i8* %12678, align 1, !tbaa !2447
  %12679 = icmp eq i32 %12659, 0
  %12680 = zext i1 %12679 to i8
  %12681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12680, i8* %12681, align 1, !tbaa !2448
  %12682 = lshr i32 %12659, 31
  %12683 = trunc i32 %12682 to i8
  %12684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12683, i8* %12684, align 1, !tbaa !2449
  %12685 = lshr i32 %12658, 31
  %12686 = lshr i32 %12654, 31
  %12687 = xor i32 %12682, %12685
  %12688 = xor i32 %12682, %12686
  %12689 = add nuw nsw i32 %12687, %12688
  %12690 = icmp eq i32 %12689, 2
  %12691 = zext i1 %12690 to i8
  %12692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12691, i8* %12692, align 1, !tbaa !2450
  %12693 = load i64, i64* %RDX
  %12694 = load i64, i64* %RBP
  %12695 = sub i64 %12694, 76
  %12696 = load i64, i64* %PC
  %12697 = add i64 %12696, 3
  store i64 %12697, i64* %PC
  %12698 = trunc i64 %12693 to i32
  %12699 = inttoptr i64 %12695 to i32*
  %12700 = load i32, i32* %12699
  %12701 = add i32 %12700, %12698
  %12702 = zext i32 %12701 to i64
  store i64 %12702, i64* %RDX, align 8, !tbaa !2428
  %12703 = icmp ult i32 %12701, %12698
  %12704 = icmp ult i32 %12701, %12700
  %12705 = or i1 %12703, %12704
  %12706 = zext i1 %12705 to i8
  %12707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12706, i8* %12707, align 1, !tbaa !2432
  %12708 = and i32 %12701, 255
  %12709 = call i32 @llvm.ctpop.i32(i32 %12708) #16
  %12710 = trunc i32 %12709 to i8
  %12711 = and i8 %12710, 1
  %12712 = xor i8 %12711, 1
  %12713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12712, i8* %12713, align 1, !tbaa !2446
  %12714 = xor i32 %12700, %12698
  %12715 = xor i32 %12714, %12701
  %12716 = lshr i32 %12715, 4
  %12717 = trunc i32 %12716 to i8
  %12718 = and i8 %12717, 1
  %12719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12718, i8* %12719, align 1, !tbaa !2447
  %12720 = icmp eq i32 %12701, 0
  %12721 = zext i1 %12720 to i8
  %12722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12721, i8* %12722, align 1, !tbaa !2448
  %12723 = lshr i32 %12701, 31
  %12724 = trunc i32 %12723 to i8
  %12725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12724, i8* %12725, align 1, !tbaa !2449
  %12726 = lshr i32 %12698, 31
  %12727 = lshr i32 %12700, 31
  %12728 = xor i32 %12723, %12726
  %12729 = xor i32 %12723, %12727
  %12730 = add nuw nsw i32 %12728, %12729
  %12731 = icmp eq i32 %12730, 2
  %12732 = zext i1 %12731 to i8
  %12733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12732, i8* %12733, align 1, !tbaa !2450
  %12734 = load i32, i32* %EDX
  %12735 = zext i32 %12734 to i64
  %12736 = load i64, i64* %PC
  %12737 = add i64 %12736, 3
  store i64 %12737, i64* %PC
  %12738 = shl i64 %12735, 32
  %12739 = ashr exact i64 %12738, 32
  store i64 %12739, i64* %RCX, align 8, !tbaa !2428
  %12740 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12741 = load i64, i64* %RAX
  %12742 = load i64, i64* %RCX
  %12743 = mul i64 %12742, 4
  %12744 = add i64 %12743, %12741
  %12745 = load i64, i64* %PC
  %12746 = add i64 %12745, 5
  store i64 %12746, i64* %PC
  %12747 = inttoptr i64 %12744 to float*
  %12748 = load float, float* %12747
  %12749 = bitcast i8* %12740 to float*
  store float %12748, float* %12749, align 1, !tbaa !2452
  %12750 = getelementptr inbounds i8, i8* %12740, i64 4
  %12751 = bitcast i8* %12750 to float*
  store float 0.000000e+00, float* %12751, align 1, !tbaa !2452
  %12752 = getelementptr inbounds i8, i8* %12740, i64 8
  %12753 = bitcast i8* %12752 to float*
  store float 0.000000e+00, float* %12753, align 1, !tbaa !2452
  %12754 = getelementptr inbounds i8, i8* %12740, i64 12
  %12755 = bitcast i8* %12754 to float*
  store float 0.000000e+00, float* %12755, align 1, !tbaa !2452
  %12756 = load i64, i64* %RBP
  %12757 = sub i64 %12756, 40
  %12758 = load i64, i64* %PC
  %12759 = add i64 %12758, 4
  store i64 %12759, i64* %PC
  %12760 = inttoptr i64 %12757 to i64*
  %12761 = load i64, i64* %12760
  store i64 %12761, i64* %RAX, align 8, !tbaa !2428
  %12762 = load i64, i64* %RAX
  %12763 = load i64, i64* %PC
  %12764 = add i64 %12763, 3
  store i64 %12764, i64* %PC
  %12765 = inttoptr i64 %12762 to i64*
  %12766 = load i64, i64* %12765
  store i64 %12766, i64* %RAX, align 8, !tbaa !2428
  %12767 = load i64, i64* %RBP
  %12768 = sub i64 %12767, 40
  %12769 = load i64, i64* %PC
  %12770 = add i64 %12769, 4
  store i64 %12770, i64* %PC
  %12771 = inttoptr i64 %12768 to i64*
  %12772 = load i64, i64* %12771
  store i64 %12772, i64* %RCX, align 8, !tbaa !2428
  %12773 = load i64, i64* %RCX
  %12774 = add i64 %12773, 12
  %12775 = load i64, i64* %PC
  %12776 = add i64 %12775, 4
  store i64 %12776, i64* %PC
  %12777 = inttoptr i64 %12774 to i32*
  %12778 = load i32, i32* %12777
  %12779 = sext i32 %12778 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %12780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12780, align 1, !tbaa !2432
  %12781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12781, align 1, !tbaa !2446
  %12782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12782, align 1, !tbaa !2447
  %12783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12783, align 1, !tbaa !2448
  %12784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12784, align 1, !tbaa !2449
  %12785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12785, align 1, !tbaa !2450
  %12786 = load i64, i64* %RBP
  %12787 = sub i64 %12786, 40
  %12788 = load i64, i64* %PC
  %12789 = add i64 %12788, 4
  store i64 %12789, i64* %PC
  %12790 = inttoptr i64 %12787 to i64*
  %12791 = load i64, i64* %12790
  store i64 %12791, i64* %RCX, align 8, !tbaa !2428
  %12792 = load i64, i64* %RDX
  %12793 = load i64, i64* %RCX
  %12794 = add i64 %12793, 16
  %12795 = load i64, i64* %PC
  %12796 = add i64 %12795, 4
  store i64 %12796, i64* %PC
  %12797 = inttoptr i64 %12794 to i32*
  %12798 = load i32, i32* %12797
  %12799 = shl i64 %12792, 32
  %12800 = ashr exact i64 %12799, 32
  %12801 = sext i32 %12798 to i64
  %12802 = mul nsw i64 %12801, %12800
  %12803 = trunc i64 %12802 to i32
  %12804 = and i64 %12802, 4294967295
  store i64 %12804, i64* %RDX, align 8, !tbaa !2428
  %12805 = shl i64 %12802, 32
  %12806 = ashr exact i64 %12805, 32
  %12807 = icmp ne i64 %12806, %12802
  %12808 = zext i1 %12807 to i8
  %12809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12808, i8* %12809, align 1, !tbaa !2432
  %12810 = and i32 %12803, 255
  %12811 = call i32 @llvm.ctpop.i32(i32 %12810) #16
  %12812 = trunc i32 %12811 to i8
  %12813 = and i8 %12812, 1
  %12814 = xor i8 %12813, 1
  %12815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12814, i8* %12815, align 1, !tbaa !2446
  %12816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12816, align 1, !tbaa !2447
  %12817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12817, align 1, !tbaa !2448
  %12818 = lshr i32 %12803, 31
  %12819 = trunc i32 %12818 to i8
  %12820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12819, i8* %12820, align 1, !tbaa !2449
  %12821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12808, i8* %12821, align 1, !tbaa !2450
  %12822 = load i64, i64* %RBP
  %12823 = sub i64 %12822, 40
  %12824 = load i64, i64* %PC
  %12825 = add i64 %12824, 4
  store i64 %12825, i64* %PC
  %12826 = inttoptr i64 %12823 to i64*
  %12827 = load i64, i64* %12826
  store i64 %12827, i64* %RCX, align 8, !tbaa !2428
  %12828 = load i64, i64* %RDX
  %12829 = load i64, i64* %RCX
  %12830 = add i64 %12829, 20
  %12831 = load i64, i64* %PC
  %12832 = add i64 %12831, 4
  store i64 %12832, i64* %PC
  %12833 = inttoptr i64 %12830 to i32*
  %12834 = load i32, i32* %12833
  %12835 = shl i64 %12828, 32
  %12836 = ashr exact i64 %12835, 32
  %12837 = sext i32 %12834 to i64
  %12838 = mul nsw i64 %12837, %12836
  %12839 = trunc i64 %12838 to i32
  %12840 = and i64 %12838, 4294967295
  store i64 %12840, i64* %RDX, align 8, !tbaa !2428
  %12841 = shl i64 %12838, 32
  %12842 = ashr exact i64 %12841, 32
  %12843 = icmp ne i64 %12842, %12838
  %12844 = zext i1 %12843 to i8
  %12845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12844, i8* %12845, align 1, !tbaa !2432
  %12846 = and i32 %12839, 255
  %12847 = call i32 @llvm.ctpop.i32(i32 %12846) #16
  %12848 = trunc i32 %12847 to i8
  %12849 = and i8 %12848, 1
  %12850 = xor i8 %12849, 1
  %12851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12850, i8* %12851, align 1, !tbaa !2446
  %12852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12852, align 1, !tbaa !2447
  %12853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12853, align 1, !tbaa !2448
  %12854 = lshr i32 %12839, 31
  %12855 = trunc i32 %12854 to i8
  %12856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12855, i8* %12856, align 1, !tbaa !2449
  %12857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12844, i8* %12857, align 1, !tbaa !2450
  %12858 = load i64, i64* %RBP
  %12859 = sub i64 %12858, 68
  %12860 = load i64, i64* %PC
  %12861 = add i64 %12860, 3
  store i64 %12861, i64* %PC
  %12862 = inttoptr i64 %12859 to i32*
  %12863 = load i32, i32* %12862
  %12864 = zext i32 %12863 to i64
  store i64 %12864, i64* %RSI, align 8, !tbaa !2428
  %12865 = load i64, i64* %RBP
  %12866 = sub i64 %12865, 40
  %12867 = load i64, i64* %PC
  %12868 = add i64 %12867, 4
  store i64 %12868, i64* %PC
  %12869 = inttoptr i64 %12866 to i64*
  %12870 = load i64, i64* %12869
  store i64 %12870, i64* %RCX, align 8, !tbaa !2428
  %12871 = load i64, i64* %RSI
  %12872 = load i64, i64* %RCX
  %12873 = add i64 %12872, 16
  %12874 = load i64, i64* %PC
  %12875 = add i64 %12874, 4
  store i64 %12875, i64* %PC
  %12876 = inttoptr i64 %12873 to i32*
  %12877 = load i32, i32* %12876
  %12878 = shl i64 %12871, 32
  %12879 = ashr exact i64 %12878, 32
  %12880 = sext i32 %12877 to i64
  %12881 = mul nsw i64 %12880, %12879
  %12882 = trunc i64 %12881 to i32
  %12883 = and i64 %12881, 4294967295
  store i64 %12883, i64* %RSI, align 8, !tbaa !2428
  %12884 = shl i64 %12881, 32
  %12885 = ashr exact i64 %12884, 32
  %12886 = icmp ne i64 %12885, %12881
  %12887 = zext i1 %12886 to i8
  %12888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12887, i8* %12888, align 1, !tbaa !2432
  %12889 = and i32 %12882, 255
  %12890 = call i32 @llvm.ctpop.i32(i32 %12889) #16
  %12891 = trunc i32 %12890 to i8
  %12892 = and i8 %12891, 1
  %12893 = xor i8 %12892, 1
  %12894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12893, i8* %12894, align 1, !tbaa !2446
  %12895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12895, align 1, !tbaa !2447
  %12896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12896, align 1, !tbaa !2448
  %12897 = lshr i32 %12882, 31
  %12898 = trunc i32 %12897 to i8
  %12899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12898, i8* %12899, align 1, !tbaa !2449
  %12900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12887, i8* %12900, align 1, !tbaa !2450
  %12901 = load i64, i64* %RBP
  %12902 = sub i64 %12901, 40
  %12903 = load i64, i64* %PC
  %12904 = add i64 %12903, 4
  store i64 %12904, i64* %PC
  %12905 = inttoptr i64 %12902 to i64*
  %12906 = load i64, i64* %12905
  store i64 %12906, i64* %RCX, align 8, !tbaa !2428
  %12907 = load i64, i64* %RSI
  %12908 = load i64, i64* %RCX
  %12909 = add i64 %12908, 20
  %12910 = load i64, i64* %PC
  %12911 = add i64 %12910, 4
  store i64 %12911, i64* %PC
  %12912 = inttoptr i64 %12909 to i32*
  %12913 = load i32, i32* %12912
  %12914 = shl i64 %12907, 32
  %12915 = ashr exact i64 %12914, 32
  %12916 = sext i32 %12913 to i64
  %12917 = mul nsw i64 %12916, %12915
  %12918 = trunc i64 %12917 to i32
  %12919 = and i64 %12917, 4294967295
  store i64 %12919, i64* %RSI, align 8, !tbaa !2428
  %12920 = shl i64 %12917, 32
  %12921 = ashr exact i64 %12920, 32
  %12922 = icmp ne i64 %12921, %12917
  %12923 = zext i1 %12922 to i8
  %12924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12923, i8* %12924, align 1, !tbaa !2432
  %12925 = and i32 %12918, 255
  %12926 = call i32 @llvm.ctpop.i32(i32 %12925) #16
  %12927 = trunc i32 %12926 to i8
  %12928 = and i8 %12927, 1
  %12929 = xor i8 %12928, 1
  %12930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12929, i8* %12930, align 1, !tbaa !2446
  %12931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12931, align 1, !tbaa !2447
  %12932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12932, align 1, !tbaa !2448
  %12933 = lshr i32 %12918, 31
  %12934 = trunc i32 %12933 to i8
  %12935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12934, i8* %12935, align 1, !tbaa !2449
  %12936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12923, i8* %12936, align 1, !tbaa !2450
  %12937 = load i64, i64* %RDX
  %12938 = load i32, i32* %ESI
  %12939 = zext i32 %12938 to i64
  %12940 = load i64, i64* %PC
  %12941 = add i64 %12940, 2
  store i64 %12941, i64* %PC
  %12942 = trunc i64 %12937 to i32
  %12943 = add i32 %12938, %12942
  %12944 = zext i32 %12943 to i64
  store i64 %12944, i64* %RDX, align 8, !tbaa !2428
  %12945 = icmp ult i32 %12943, %12942
  %12946 = icmp ult i32 %12943, %12938
  %12947 = or i1 %12945, %12946
  %12948 = zext i1 %12947 to i8
  %12949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12948, i8* %12949, align 1, !tbaa !2432
  %12950 = and i32 %12943, 255
  %12951 = call i32 @llvm.ctpop.i32(i32 %12950) #16
  %12952 = trunc i32 %12951 to i8
  %12953 = and i8 %12952, 1
  %12954 = xor i8 %12953, 1
  %12955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12954, i8* %12955, align 1, !tbaa !2446
  %12956 = xor i64 %12939, %12937
  %12957 = trunc i64 %12956 to i32
  %12958 = xor i32 %12957, %12943
  %12959 = lshr i32 %12958, 4
  %12960 = trunc i32 %12959 to i8
  %12961 = and i8 %12960, 1
  %12962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12961, i8* %12962, align 1, !tbaa !2447
  %12963 = icmp eq i32 %12943, 0
  %12964 = zext i1 %12963 to i8
  %12965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12964, i8* %12965, align 1, !tbaa !2448
  %12966 = lshr i32 %12943, 31
  %12967 = trunc i32 %12966 to i8
  %12968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12967, i8* %12968, align 1, !tbaa !2449
  %12969 = lshr i32 %12942, 31
  %12970 = lshr i32 %12938, 31
  %12971 = xor i32 %12966, %12969
  %12972 = xor i32 %12966, %12970
  %12973 = add nuw nsw i32 %12971, %12972
  %12974 = icmp eq i32 %12973, 2
  %12975 = zext i1 %12974 to i8
  %12976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12975, i8* %12976, align 1, !tbaa !2450
  %12977 = load i64, i64* %RBP
  %12978 = sub i64 %12977, 72
  %12979 = load i64, i64* %PC
  %12980 = add i64 %12979, 3
  store i64 %12980, i64* %PC
  %12981 = inttoptr i64 %12978 to i32*
  %12982 = load i32, i32* %12981
  %12983 = zext i32 %12982 to i64
  store i64 %12983, i64* %RSI, align 8, !tbaa !2428
  %12984 = load i64, i64* %RBP
  %12985 = sub i64 %12984, 40
  %12986 = load i64, i64* %PC
  %12987 = add i64 %12986, 4
  store i64 %12987, i64* %PC
  %12988 = inttoptr i64 %12985 to i64*
  %12989 = load i64, i64* %12988
  store i64 %12989, i64* %RCX, align 8, !tbaa !2428
  %12990 = load i64, i64* %RSI
  %12991 = load i64, i64* %RCX
  %12992 = add i64 %12991, 20
  %12993 = load i64, i64* %PC
  %12994 = add i64 %12993, 4
  store i64 %12994, i64* %PC
  %12995 = inttoptr i64 %12992 to i32*
  %12996 = load i32, i32* %12995
  %12997 = shl i64 %12990, 32
  %12998 = ashr exact i64 %12997, 32
  %12999 = sext i32 %12996 to i64
  %13000 = mul nsw i64 %12999, %12998
  %13001 = trunc i64 %13000 to i32
  %13002 = and i64 %13000, 4294967295
  store i64 %13002, i64* %RSI, align 8, !tbaa !2428
  %13003 = shl i64 %13000, 32
  %13004 = ashr exact i64 %13003, 32
  %13005 = icmp ne i64 %13004, %13000
  %13006 = zext i1 %13005 to i8
  %13007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13006, i8* %13007, align 1, !tbaa !2432
  %13008 = and i32 %13001, 255
  %13009 = call i32 @llvm.ctpop.i32(i32 %13008) #16
  %13010 = trunc i32 %13009 to i8
  %13011 = and i8 %13010, 1
  %13012 = xor i8 %13011, 1
  %13013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13012, i8* %13013, align 1, !tbaa !2446
  %13014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13014, align 1, !tbaa !2447
  %13015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13015, align 1, !tbaa !2448
  %13016 = lshr i32 %13001, 31
  %13017 = trunc i32 %13016 to i8
  %13018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13017, i8* %13018, align 1, !tbaa !2449
  %13019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13006, i8* %13019, align 1, !tbaa !2450
  %13020 = load i64, i64* %RDX
  %13021 = load i32, i32* %ESI
  %13022 = zext i32 %13021 to i64
  %13023 = load i64, i64* %PC
  %13024 = add i64 %13023, 2
  store i64 %13024, i64* %PC
  %13025 = trunc i64 %13020 to i32
  %13026 = add i32 %13021, %13025
  %13027 = zext i32 %13026 to i64
  store i64 %13027, i64* %RDX, align 8, !tbaa !2428
  %13028 = icmp ult i32 %13026, %13025
  %13029 = icmp ult i32 %13026, %13021
  %13030 = or i1 %13028, %13029
  %13031 = zext i1 %13030 to i8
  %13032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13031, i8* %13032, align 1, !tbaa !2432
  %13033 = and i32 %13026, 255
  %13034 = call i32 @llvm.ctpop.i32(i32 %13033) #16
  %13035 = trunc i32 %13034 to i8
  %13036 = and i8 %13035, 1
  %13037 = xor i8 %13036, 1
  %13038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13037, i8* %13038, align 1, !tbaa !2446
  %13039 = xor i64 %13022, %13020
  %13040 = trunc i64 %13039 to i32
  %13041 = xor i32 %13040, %13026
  %13042 = lshr i32 %13041, 4
  %13043 = trunc i32 %13042 to i8
  %13044 = and i8 %13043, 1
  %13045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13044, i8* %13045, align 1, !tbaa !2447
  %13046 = icmp eq i32 %13026, 0
  %13047 = zext i1 %13046 to i8
  %13048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13047, i8* %13048, align 1, !tbaa !2448
  %13049 = lshr i32 %13026, 31
  %13050 = trunc i32 %13049 to i8
  %13051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13050, i8* %13051, align 1, !tbaa !2449
  %13052 = lshr i32 %13025, 31
  %13053 = lshr i32 %13021, 31
  %13054 = xor i32 %13049, %13052
  %13055 = xor i32 %13049, %13053
  %13056 = add nuw nsw i32 %13054, %13055
  %13057 = icmp eq i32 %13056, 2
  %13058 = zext i1 %13057 to i8
  %13059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13058, i8* %13059, align 1, !tbaa !2450
  %13060 = load i64, i64* %RBP
  %13061 = sub i64 %13060, 76
  %13062 = load i64, i64* %PC
  %13063 = add i64 %13062, 3
  store i64 %13063, i64* %PC
  %13064 = inttoptr i64 %13061 to i32*
  %13065 = load i32, i32* %13064
  %13066 = zext i32 %13065 to i64
  store i64 %13066, i64* %RSI, align 8, !tbaa !2428
  %13067 = load i64, i64* %RSI
  %13068 = load i64, i64* %PC
  %13069 = add i64 %13068, 3
  store i64 %13069, i64* %PC
  %13070 = trunc i64 %13067 to i32
  %13071 = sub i32 %13070, 1
  %13072 = zext i32 %13071 to i64
  store i64 %13072, i64* %RSI, align 8, !tbaa !2428
  %13073 = icmp ult i32 %13070, 1
  %13074 = zext i1 %13073 to i8
  %13075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13074, i8* %13075, align 1, !tbaa !2432
  %13076 = and i32 %13071, 255
  %13077 = call i32 @llvm.ctpop.i32(i32 %13076) #16
  %13078 = trunc i32 %13077 to i8
  %13079 = and i8 %13078, 1
  %13080 = xor i8 %13079, 1
  %13081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13080, i8* %13081, align 1, !tbaa !2446
  %13082 = xor i64 1, %13067
  %13083 = trunc i64 %13082 to i32
  %13084 = xor i32 %13083, %13071
  %13085 = lshr i32 %13084, 4
  %13086 = trunc i32 %13085 to i8
  %13087 = and i8 %13086, 1
  %13088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13087, i8* %13088, align 1, !tbaa !2447
  %13089 = icmp eq i32 %13071, 0
  %13090 = zext i1 %13089 to i8
  %13091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13090, i8* %13091, align 1, !tbaa !2448
  %13092 = lshr i32 %13071, 31
  %13093 = trunc i32 %13092 to i8
  %13094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13093, i8* %13094, align 1, !tbaa !2449
  %13095 = lshr i32 %13070, 31
  %13096 = xor i32 %13092, %13095
  %13097 = add nuw nsw i32 %13096, %13095
  %13098 = icmp eq i32 %13097, 2
  %13099 = zext i1 %13098 to i8
  %13100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13099, i8* %13100, align 1, !tbaa !2450
  %13101 = load i64, i64* %RDX
  %13102 = load i32, i32* %ESI
  %13103 = zext i32 %13102 to i64
  %13104 = load i64, i64* %PC
  %13105 = add i64 %13104, 2
  store i64 %13105, i64* %PC
  %13106 = trunc i64 %13101 to i32
  %13107 = add i32 %13102, %13106
  %13108 = zext i32 %13107 to i64
  store i64 %13108, i64* %RDX, align 8, !tbaa !2428
  %13109 = icmp ult i32 %13107, %13106
  %13110 = icmp ult i32 %13107, %13102
  %13111 = or i1 %13109, %13110
  %13112 = zext i1 %13111 to i8
  %13113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13112, i8* %13113, align 1, !tbaa !2432
  %13114 = and i32 %13107, 255
  %13115 = call i32 @llvm.ctpop.i32(i32 %13114) #16
  %13116 = trunc i32 %13115 to i8
  %13117 = and i8 %13116, 1
  %13118 = xor i8 %13117, 1
  %13119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13118, i8* %13119, align 1, !tbaa !2446
  %13120 = xor i64 %13103, %13101
  %13121 = trunc i64 %13120 to i32
  %13122 = xor i32 %13121, %13107
  %13123 = lshr i32 %13122, 4
  %13124 = trunc i32 %13123 to i8
  %13125 = and i8 %13124, 1
  %13126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13125, i8* %13126, align 1, !tbaa !2447
  %13127 = icmp eq i32 %13107, 0
  %13128 = zext i1 %13127 to i8
  %13129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13128, i8* %13129, align 1, !tbaa !2448
  %13130 = lshr i32 %13107, 31
  %13131 = trunc i32 %13130 to i8
  %13132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13131, i8* %13132, align 1, !tbaa !2449
  %13133 = lshr i32 %13106, 31
  %13134 = lshr i32 %13102, 31
  %13135 = xor i32 %13130, %13133
  %13136 = xor i32 %13130, %13134
  %13137 = add nuw nsw i32 %13135, %13136
  %13138 = icmp eq i32 %13137, 2
  %13139 = zext i1 %13138 to i8
  %13140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13139, i8* %13140, align 1, !tbaa !2450
  %13141 = load i32, i32* %EDX
  %13142 = zext i32 %13141 to i64
  %13143 = load i64, i64* %PC
  %13144 = add i64 %13143, 3
  store i64 %13144, i64* %PC
  %13145 = shl i64 %13142, 32
  %13146 = ashr exact i64 %13145, 32
  store i64 %13146, i64* %RCX, align 8, !tbaa !2428
  %13147 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13148 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13149 = load i64, i64* %RAX
  %13150 = load i64, i64* %RCX
  %13151 = mul i64 %13150, 4
  %13152 = add i64 %13151, %13149
  %13153 = load i64, i64* %PC
  %13154 = add i64 %13153, 5
  store i64 %13154, i64* %PC
  %13155 = bitcast i8* %13148 to <2 x float>*
  %13156 = load <2 x float>, <2 x float>* %13155, align 1
  %13157 = getelementptr inbounds i8, i8* %13148, i64 8
  %13158 = bitcast i8* %13157 to <2 x i32>*
  %13159 = load <2 x i32>, <2 x i32>* %13158, align 1
  %13160 = inttoptr i64 %13152 to float*
  %13161 = load float, float* %13160
  %13162 = extractelement <2 x float> %13156, i32 0
  %13163 = fmul float %13162, %13161
  %13164 = bitcast i8* %13147 to float*
  store float %13163, float* %13164, align 1, !tbaa !2452
  %13165 = bitcast <2 x float> %13156 to <2 x i32>
  %13166 = extractelement <2 x i32> %13165, i32 1
  %13167 = getelementptr inbounds i8, i8* %13147, i64 4
  %13168 = bitcast i8* %13167 to i32*
  store i32 %13166, i32* %13168, align 1, !tbaa !2452
  %13169 = extractelement <2 x i32> %13159, i32 0
  %13170 = getelementptr inbounds i8, i8* %13147, i64 8
  %13171 = bitcast i8* %13170 to i32*
  store i32 %13169, i32* %13171, align 1, !tbaa !2452
  %13172 = extractelement <2 x i32> %13159, i32 1
  %13173 = getelementptr inbounds i8, i8* %13147, i64 12
  %13174 = bitcast i8* %13173 to i32*
  store i32 %13172, i32* %13174, align 1, !tbaa !2452
  %13175 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13176 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13177 = bitcast %union.vec128_t* %XMM1 to i8*
  %13178 = load i64, i64* %PC
  %13179 = add i64 %13178, 4
  store i64 %13179, i64* %PC
  %13180 = bitcast i8* %13176 to <2 x float>*
  %13181 = load <2 x float>, <2 x float>* %13180, align 1
  %13182 = getelementptr inbounds i8, i8* %13176, i64 8
  %13183 = bitcast i8* %13182 to <2 x i32>*
  %13184 = load <2 x i32>, <2 x i32>* %13183, align 1
  %13185 = bitcast i8* %13177 to <2 x float>*
  %13186 = load <2 x float>, <2 x float>* %13185, align 1
  %13187 = extractelement <2 x float> %13181, i32 0
  %13188 = extractelement <2 x float> %13186, i32 0
  %13189 = fadd float %13187, %13188
  %13190 = bitcast i8* %13175 to float*
  store float %13189, float* %13190, align 1, !tbaa !2452
  %13191 = bitcast <2 x float> %13181 to <2 x i32>
  %13192 = extractelement <2 x i32> %13191, i32 1
  %13193 = getelementptr inbounds i8, i8* %13175, i64 4
  %13194 = bitcast i8* %13193 to i32*
  store i32 %13192, i32* %13194, align 1, !tbaa !2452
  %13195 = extractelement <2 x i32> %13184, i32 0
  %13196 = getelementptr inbounds i8, i8* %13175, i64 8
  %13197 = bitcast i8* %13196 to i32*
  store i32 %13195, i32* %13197, align 1, !tbaa !2452
  %13198 = extractelement <2 x i32> %13184, i32 1
  %13199 = getelementptr inbounds i8, i8* %13175, i64 12
  %13200 = bitcast i8* %13199 to i32*
  store i32 %13198, i32* %13200, align 1, !tbaa !2452
  %13201 = load i64, i64* %RBP
  %13202 = sub i64 %13201, 56
  %13203 = load i64, i64* %PC
  %13204 = add i64 %13203, 4
  store i64 %13204, i64* %PC
  %13205 = inttoptr i64 %13202 to i64*
  %13206 = load i64, i64* %13205
  store i64 %13206, i64* %RAX, align 8, !tbaa !2428
  %13207 = load i64, i64* %RAX
  %13208 = load i64, i64* %PC
  %13209 = add i64 %13208, 3
  store i64 %13209, i64* %PC
  %13210 = inttoptr i64 %13207 to i64*
  %13211 = load i64, i64* %13210
  store i64 %13211, i64* %RAX, align 8, !tbaa !2428
  %13212 = load i64, i64* %RBP
  %13213 = sub i64 %13212, 56
  %13214 = load i64, i64* %PC
  %13215 = add i64 %13214, 4
  store i64 %13215, i64* %PC
  %13216 = inttoptr i64 %13213 to i64*
  %13217 = load i64, i64* %13216
  store i64 %13217, i64* %RCX, align 8, !tbaa !2428
  %13218 = load i64, i64* %RCX
  %13219 = add i64 %13218, 12
  %13220 = load i64, i64* %PC
  %13221 = add i64 %13220, 4
  store i64 %13221, i64* %PC
  %13222 = inttoptr i64 %13219 to i32*
  %13223 = load i32, i32* %13222
  %13224 = sext i32 %13223 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %13225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %13225, align 1, !tbaa !2432
  %13226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %13226, align 1, !tbaa !2446
  %13227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13227, align 1, !tbaa !2447
  %13228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13228, align 1, !tbaa !2448
  %13229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13229, align 1, !tbaa !2449
  %13230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13230, align 1, !tbaa !2450
  %13231 = load i64, i64* %RBP
  %13232 = sub i64 %13231, 56
  %13233 = load i64, i64* %PC
  %13234 = add i64 %13233, 4
  store i64 %13234, i64* %PC
  %13235 = inttoptr i64 %13232 to i64*
  %13236 = load i64, i64* %13235
  store i64 %13236, i64* %RCX, align 8, !tbaa !2428
  %13237 = load i64, i64* %RDX
  %13238 = load i64, i64* %RCX
  %13239 = add i64 %13238, 16
  %13240 = load i64, i64* %PC
  %13241 = add i64 %13240, 4
  store i64 %13241, i64* %PC
  %13242 = inttoptr i64 %13239 to i32*
  %13243 = load i32, i32* %13242
  %13244 = shl i64 %13237, 32
  %13245 = ashr exact i64 %13244, 32
  %13246 = sext i32 %13243 to i64
  %13247 = mul nsw i64 %13246, %13245
  %13248 = trunc i64 %13247 to i32
  %13249 = and i64 %13247, 4294967295
  store i64 %13249, i64* %RDX, align 8, !tbaa !2428
  %13250 = shl i64 %13247, 32
  %13251 = ashr exact i64 %13250, 32
  %13252 = icmp ne i64 %13251, %13247
  %13253 = zext i1 %13252 to i8
  %13254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13253, i8* %13254, align 1, !tbaa !2432
  %13255 = and i32 %13248, 255
  %13256 = call i32 @llvm.ctpop.i32(i32 %13255) #16
  %13257 = trunc i32 %13256 to i8
  %13258 = and i8 %13257, 1
  %13259 = xor i8 %13258, 1
  %13260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13259, i8* %13260, align 1, !tbaa !2446
  %13261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13261, align 1, !tbaa !2447
  %13262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13262, align 1, !tbaa !2448
  %13263 = lshr i32 %13248, 31
  %13264 = trunc i32 %13263 to i8
  %13265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13264, i8* %13265, align 1, !tbaa !2449
  %13266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13253, i8* %13266, align 1, !tbaa !2450
  %13267 = load i64, i64* %RBP
  %13268 = sub i64 %13267, 56
  %13269 = load i64, i64* %PC
  %13270 = add i64 %13269, 4
  store i64 %13270, i64* %PC
  %13271 = inttoptr i64 %13268 to i64*
  %13272 = load i64, i64* %13271
  store i64 %13272, i64* %RCX, align 8, !tbaa !2428
  %13273 = load i64, i64* %RDX
  %13274 = load i64, i64* %RCX
  %13275 = add i64 %13274, 20
  %13276 = load i64, i64* %PC
  %13277 = add i64 %13276, 4
  store i64 %13277, i64* %PC
  %13278 = inttoptr i64 %13275 to i32*
  %13279 = load i32, i32* %13278
  %13280 = shl i64 %13273, 32
  %13281 = ashr exact i64 %13280, 32
  %13282 = sext i32 %13279 to i64
  %13283 = mul nsw i64 %13282, %13281
  %13284 = trunc i64 %13283 to i32
  %13285 = and i64 %13283, 4294967295
  store i64 %13285, i64* %RDX, align 8, !tbaa !2428
  %13286 = shl i64 %13283, 32
  %13287 = ashr exact i64 %13286, 32
  %13288 = icmp ne i64 %13287, %13283
  %13289 = zext i1 %13288 to i8
  %13290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13289, i8* %13290, align 1, !tbaa !2432
  %13291 = and i32 %13284, 255
  %13292 = call i32 @llvm.ctpop.i32(i32 %13291) #16
  %13293 = trunc i32 %13292 to i8
  %13294 = and i8 %13293, 1
  %13295 = xor i8 %13294, 1
  %13296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13295, i8* %13296, align 1, !tbaa !2446
  %13297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13297, align 1, !tbaa !2447
  %13298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13298, align 1, !tbaa !2448
  %13299 = lshr i32 %13284, 31
  %13300 = trunc i32 %13299 to i8
  %13301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13300, i8* %13301, align 1, !tbaa !2449
  %13302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13289, i8* %13302, align 1, !tbaa !2450
  %13303 = load i64, i64* %RBP
  %13304 = sub i64 %13303, 68
  %13305 = load i64, i64* %PC
  %13306 = add i64 %13305, 3
  store i64 %13306, i64* %PC
  %13307 = inttoptr i64 %13304 to i32*
  %13308 = load i32, i32* %13307
  %13309 = zext i32 %13308 to i64
  store i64 %13309, i64* %RSI, align 8, !tbaa !2428
  %13310 = load i64, i64* %RBP
  %13311 = sub i64 %13310, 56
  %13312 = load i64, i64* %PC
  %13313 = add i64 %13312, 4
  store i64 %13313, i64* %PC
  %13314 = inttoptr i64 %13311 to i64*
  %13315 = load i64, i64* %13314
  store i64 %13315, i64* %RCX, align 8, !tbaa !2428
  %13316 = load i64, i64* %RSI
  %13317 = load i64, i64* %RCX
  %13318 = add i64 %13317, 16
  %13319 = load i64, i64* %PC
  %13320 = add i64 %13319, 4
  store i64 %13320, i64* %PC
  %13321 = inttoptr i64 %13318 to i32*
  %13322 = load i32, i32* %13321
  %13323 = shl i64 %13316, 32
  %13324 = ashr exact i64 %13323, 32
  %13325 = sext i32 %13322 to i64
  %13326 = mul nsw i64 %13325, %13324
  %13327 = trunc i64 %13326 to i32
  %13328 = and i64 %13326, 4294967295
  store i64 %13328, i64* %RSI, align 8, !tbaa !2428
  %13329 = shl i64 %13326, 32
  %13330 = ashr exact i64 %13329, 32
  %13331 = icmp ne i64 %13330, %13326
  %13332 = zext i1 %13331 to i8
  %13333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13332, i8* %13333, align 1, !tbaa !2432
  %13334 = and i32 %13327, 255
  %13335 = call i32 @llvm.ctpop.i32(i32 %13334) #16
  %13336 = trunc i32 %13335 to i8
  %13337 = and i8 %13336, 1
  %13338 = xor i8 %13337, 1
  %13339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13338, i8* %13339, align 1, !tbaa !2446
  %13340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13340, align 1, !tbaa !2447
  %13341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13341, align 1, !tbaa !2448
  %13342 = lshr i32 %13327, 31
  %13343 = trunc i32 %13342 to i8
  %13344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13343, i8* %13344, align 1, !tbaa !2449
  %13345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13332, i8* %13345, align 1, !tbaa !2450
  %13346 = load i64, i64* %RBP
  %13347 = sub i64 %13346, 56
  %13348 = load i64, i64* %PC
  %13349 = add i64 %13348, 4
  store i64 %13349, i64* %PC
  %13350 = inttoptr i64 %13347 to i64*
  %13351 = load i64, i64* %13350
  store i64 %13351, i64* %RCX, align 8, !tbaa !2428
  %13352 = load i64, i64* %RSI
  %13353 = load i64, i64* %RCX
  %13354 = add i64 %13353, 20
  %13355 = load i64, i64* %PC
  %13356 = add i64 %13355, 4
  store i64 %13356, i64* %PC
  %13357 = inttoptr i64 %13354 to i32*
  %13358 = load i32, i32* %13357
  %13359 = shl i64 %13352, 32
  %13360 = ashr exact i64 %13359, 32
  %13361 = sext i32 %13358 to i64
  %13362 = mul nsw i64 %13361, %13360
  %13363 = trunc i64 %13362 to i32
  %13364 = and i64 %13362, 4294967295
  store i64 %13364, i64* %RSI, align 8, !tbaa !2428
  %13365 = shl i64 %13362, 32
  %13366 = ashr exact i64 %13365, 32
  %13367 = icmp ne i64 %13366, %13362
  %13368 = zext i1 %13367 to i8
  %13369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13368, i8* %13369, align 1, !tbaa !2432
  %13370 = and i32 %13363, 255
  %13371 = call i32 @llvm.ctpop.i32(i32 %13370) #16
  %13372 = trunc i32 %13371 to i8
  %13373 = and i8 %13372, 1
  %13374 = xor i8 %13373, 1
  %13375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13374, i8* %13375, align 1, !tbaa !2446
  %13376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13376, align 1, !tbaa !2447
  %13377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13377, align 1, !tbaa !2448
  %13378 = lshr i32 %13363, 31
  %13379 = trunc i32 %13378 to i8
  %13380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13379, i8* %13380, align 1, !tbaa !2449
  %13381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13368, i8* %13381, align 1, !tbaa !2450
  %13382 = load i64, i64* %RDX
  %13383 = load i32, i32* %ESI
  %13384 = zext i32 %13383 to i64
  %13385 = load i64, i64* %PC
  %13386 = add i64 %13385, 2
  store i64 %13386, i64* %PC
  %13387 = trunc i64 %13382 to i32
  %13388 = add i32 %13383, %13387
  %13389 = zext i32 %13388 to i64
  store i64 %13389, i64* %RDX, align 8, !tbaa !2428
  %13390 = icmp ult i32 %13388, %13387
  %13391 = icmp ult i32 %13388, %13383
  %13392 = or i1 %13390, %13391
  %13393 = zext i1 %13392 to i8
  %13394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13393, i8* %13394, align 1, !tbaa !2432
  %13395 = and i32 %13388, 255
  %13396 = call i32 @llvm.ctpop.i32(i32 %13395) #16
  %13397 = trunc i32 %13396 to i8
  %13398 = and i8 %13397, 1
  %13399 = xor i8 %13398, 1
  %13400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13399, i8* %13400, align 1, !tbaa !2446
  %13401 = xor i64 %13384, %13382
  %13402 = trunc i64 %13401 to i32
  %13403 = xor i32 %13402, %13388
  %13404 = lshr i32 %13403, 4
  %13405 = trunc i32 %13404 to i8
  %13406 = and i8 %13405, 1
  %13407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13406, i8* %13407, align 1, !tbaa !2447
  %13408 = icmp eq i32 %13388, 0
  %13409 = zext i1 %13408 to i8
  %13410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13409, i8* %13410, align 1, !tbaa !2448
  %13411 = lshr i32 %13388, 31
  %13412 = trunc i32 %13411 to i8
  %13413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13412, i8* %13413, align 1, !tbaa !2449
  %13414 = lshr i32 %13387, 31
  %13415 = lshr i32 %13383, 31
  %13416 = xor i32 %13411, %13414
  %13417 = xor i32 %13411, %13415
  %13418 = add nuw nsw i32 %13416, %13417
  %13419 = icmp eq i32 %13418, 2
  %13420 = zext i1 %13419 to i8
  %13421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13420, i8* %13421, align 1, !tbaa !2450
  %13422 = load i64, i64* %RBP
  %13423 = sub i64 %13422, 72
  %13424 = load i64, i64* %PC
  %13425 = add i64 %13424, 3
  store i64 %13425, i64* %PC
  %13426 = inttoptr i64 %13423 to i32*
  %13427 = load i32, i32* %13426
  %13428 = zext i32 %13427 to i64
  store i64 %13428, i64* %RSI, align 8, !tbaa !2428
  %13429 = load i64, i64* %RBP
  %13430 = sub i64 %13429, 56
  %13431 = load i64, i64* %PC
  %13432 = add i64 %13431, 4
  store i64 %13432, i64* %PC
  %13433 = inttoptr i64 %13430 to i64*
  %13434 = load i64, i64* %13433
  store i64 %13434, i64* %RCX, align 8, !tbaa !2428
  %13435 = load i64, i64* %RSI
  %13436 = load i64, i64* %RCX
  %13437 = add i64 %13436, 20
  %13438 = load i64, i64* %PC
  %13439 = add i64 %13438, 4
  store i64 %13439, i64* %PC
  %13440 = inttoptr i64 %13437 to i32*
  %13441 = load i32, i32* %13440
  %13442 = shl i64 %13435, 32
  %13443 = ashr exact i64 %13442, 32
  %13444 = sext i32 %13441 to i64
  %13445 = mul nsw i64 %13444, %13443
  %13446 = trunc i64 %13445 to i32
  %13447 = and i64 %13445, 4294967295
  store i64 %13447, i64* %RSI, align 8, !tbaa !2428
  %13448 = shl i64 %13445, 32
  %13449 = ashr exact i64 %13448, 32
  %13450 = icmp ne i64 %13449, %13445
  %13451 = zext i1 %13450 to i8
  %13452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13451, i8* %13452, align 1, !tbaa !2432
  %13453 = and i32 %13446, 255
  %13454 = call i32 @llvm.ctpop.i32(i32 %13453) #16
  %13455 = trunc i32 %13454 to i8
  %13456 = and i8 %13455, 1
  %13457 = xor i8 %13456, 1
  %13458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13457, i8* %13458, align 1, !tbaa !2446
  %13459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13459, align 1, !tbaa !2447
  %13460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13460, align 1, !tbaa !2448
  %13461 = lshr i32 %13446, 31
  %13462 = trunc i32 %13461 to i8
  %13463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13462, i8* %13463, align 1, !tbaa !2449
  %13464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13451, i8* %13464, align 1, !tbaa !2450
  %13465 = load i64, i64* %RDX
  %13466 = load i32, i32* %ESI
  %13467 = zext i32 %13466 to i64
  %13468 = load i64, i64* %PC
  %13469 = add i64 %13468, 2
  store i64 %13469, i64* %PC
  %13470 = trunc i64 %13465 to i32
  %13471 = add i32 %13466, %13470
  %13472 = zext i32 %13471 to i64
  store i64 %13472, i64* %RDX, align 8, !tbaa !2428
  %13473 = icmp ult i32 %13471, %13470
  %13474 = icmp ult i32 %13471, %13466
  %13475 = or i1 %13473, %13474
  %13476 = zext i1 %13475 to i8
  %13477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13476, i8* %13477, align 1, !tbaa !2432
  %13478 = and i32 %13471, 255
  %13479 = call i32 @llvm.ctpop.i32(i32 %13478) #16
  %13480 = trunc i32 %13479 to i8
  %13481 = and i8 %13480, 1
  %13482 = xor i8 %13481, 1
  %13483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13482, i8* %13483, align 1, !tbaa !2446
  %13484 = xor i64 %13467, %13465
  %13485 = trunc i64 %13484 to i32
  %13486 = xor i32 %13485, %13471
  %13487 = lshr i32 %13486, 4
  %13488 = trunc i32 %13487 to i8
  %13489 = and i8 %13488, 1
  %13490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13489, i8* %13490, align 1, !tbaa !2447
  %13491 = icmp eq i32 %13471, 0
  %13492 = zext i1 %13491 to i8
  %13493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13492, i8* %13493, align 1, !tbaa !2448
  %13494 = lshr i32 %13471, 31
  %13495 = trunc i32 %13494 to i8
  %13496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13495, i8* %13496, align 1, !tbaa !2449
  %13497 = lshr i32 %13470, 31
  %13498 = lshr i32 %13466, 31
  %13499 = xor i32 %13494, %13497
  %13500 = xor i32 %13494, %13498
  %13501 = add nuw nsw i32 %13499, %13500
  %13502 = icmp eq i32 %13501, 2
  %13503 = zext i1 %13502 to i8
  %13504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13503, i8* %13504, align 1, !tbaa !2450
  %13505 = load i64, i64* %RDX
  %13506 = load i64, i64* %RBP
  %13507 = sub i64 %13506, 76
  %13508 = load i64, i64* %PC
  %13509 = add i64 %13508, 3
  store i64 %13509, i64* %PC
  %13510 = trunc i64 %13505 to i32
  %13511 = inttoptr i64 %13507 to i32*
  %13512 = load i32, i32* %13511
  %13513 = add i32 %13512, %13510
  %13514 = zext i32 %13513 to i64
  store i64 %13514, i64* %RDX, align 8, !tbaa !2428
  %13515 = icmp ult i32 %13513, %13510
  %13516 = icmp ult i32 %13513, %13512
  %13517 = or i1 %13515, %13516
  %13518 = zext i1 %13517 to i8
  %13519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13518, i8* %13519, align 1, !tbaa !2432
  %13520 = and i32 %13513, 255
  %13521 = call i32 @llvm.ctpop.i32(i32 %13520) #16
  %13522 = trunc i32 %13521 to i8
  %13523 = and i8 %13522, 1
  %13524 = xor i8 %13523, 1
  %13525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13524, i8* %13525, align 1, !tbaa !2446
  %13526 = xor i32 %13512, %13510
  %13527 = xor i32 %13526, %13513
  %13528 = lshr i32 %13527, 4
  %13529 = trunc i32 %13528 to i8
  %13530 = and i8 %13529, 1
  %13531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13530, i8* %13531, align 1, !tbaa !2447
  %13532 = icmp eq i32 %13513, 0
  %13533 = zext i1 %13532 to i8
  %13534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13533, i8* %13534, align 1, !tbaa !2448
  %13535 = lshr i32 %13513, 31
  %13536 = trunc i32 %13535 to i8
  %13537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13536, i8* %13537, align 1, !tbaa !2449
  %13538 = lshr i32 %13510, 31
  %13539 = lshr i32 %13512, 31
  %13540 = xor i32 %13535, %13538
  %13541 = xor i32 %13535, %13539
  %13542 = add nuw nsw i32 %13540, %13541
  %13543 = icmp eq i32 %13542, 2
  %13544 = zext i1 %13543 to i8
  %13545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13544, i8* %13545, align 1, !tbaa !2450
  %13546 = load i32, i32* %EDX
  %13547 = zext i32 %13546 to i64
  %13548 = load i64, i64* %PC
  %13549 = add i64 %13548, 3
  store i64 %13549, i64* %PC
  %13550 = shl i64 %13547, 32
  %13551 = ashr exact i64 %13550, 32
  store i64 %13551, i64* %RCX, align 8, !tbaa !2428
  %13552 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13553 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13554 = load i64, i64* %RAX
  %13555 = load i64, i64* %RCX
  %13556 = mul i64 %13555, 4
  %13557 = add i64 %13556, %13554
  %13558 = load i64, i64* %PC
  %13559 = add i64 %13558, 5
  store i64 %13559, i64* %PC
  %13560 = bitcast i8* %13553 to <2 x float>*
  %13561 = load <2 x float>, <2 x float>* %13560, align 1
  %13562 = getelementptr inbounds i8, i8* %13553, i64 8
  %13563 = bitcast i8* %13562 to <2 x i32>*
  %13564 = load <2 x i32>, <2 x i32>* %13563, align 1
  %13565 = inttoptr i64 %13557 to float*
  %13566 = load float, float* %13565
  %13567 = extractelement <2 x float> %13561, i32 0
  %13568 = fadd float %13567, %13566
  %13569 = bitcast i8* %13552 to float*
  store float %13568, float* %13569, align 1, !tbaa !2452
  %13570 = bitcast <2 x float> %13561 to <2 x i32>
  %13571 = extractelement <2 x i32> %13570, i32 1
  %13572 = getelementptr inbounds i8, i8* %13552, i64 4
  %13573 = bitcast i8* %13572 to i32*
  store i32 %13571, i32* %13573, align 1, !tbaa !2452
  %13574 = extractelement <2 x i32> %13564, i32 0
  %13575 = getelementptr inbounds i8, i8* %13552, i64 8
  %13576 = bitcast i8* %13575 to i32*
  store i32 %13574, i32* %13576, align 1, !tbaa !2452
  %13577 = extractelement <2 x i32> %13564, i32 1
  %13578 = getelementptr inbounds i8, i8* %13552, i64 12
  %13579 = bitcast i8* %13578 to i32*
  store i32 %13577, i32* %13579, align 1, !tbaa !2452
  %13580 = load i64, i64* %RBP
  %13581 = sub i64 %13580, 100
  %13582 = bitcast %union.vec128_t* %XMM0 to i8*
  %13583 = load i64, i64* %PC
  %13584 = add i64 %13583, 5
  store i64 %13584, i64* %PC
  %13585 = bitcast i8* %13582 to <2 x float>*
  %13586 = load <2 x float>, <2 x float>* %13585, align 1
  %13587 = extractelement <2 x float> %13586, i32 0
  %13588 = inttoptr i64 %13581 to float*
  store float %13587, float* %13588
  %13589 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13590 = load i64, i64* %RBP
  %13591 = sub i64 %13590, 100
  %13592 = load i64, i64* %PC
  %13593 = add i64 %13592, 5
  store i64 %13593, i64* %PC
  %13594 = inttoptr i64 %13591 to float*
  %13595 = load float, float* %13594
  %13596 = bitcast i8* %13589 to float*
  store float %13595, float* %13596, align 1, !tbaa !2452
  %13597 = getelementptr inbounds i8, i8* %13589, i64 4
  %13598 = bitcast i8* %13597 to float*
  store float 0.000000e+00, float* %13598, align 1, !tbaa !2452
  %13599 = getelementptr inbounds i8, i8* %13589, i64 8
  %13600 = bitcast i8* %13599 to float*
  store float 0.000000e+00, float* %13600, align 1, !tbaa !2452
  %13601 = getelementptr inbounds i8, i8* %13589, i64 12
  %13602 = bitcast i8* %13601 to float*
  store float 0.000000e+00, float* %13602, align 1, !tbaa !2452
  %13603 = load i64, i64* %RBP
  %13604 = sub i64 %13603, 16
  %13605 = load i64, i64* %PC
  %13606 = add i64 %13605, 4
  store i64 %13606, i64* %PC
  %13607 = inttoptr i64 %13604 to i64*
  %13608 = load i64, i64* %13607
  store i64 %13608, i64* %RAX, align 8, !tbaa !2428
  %13609 = load i64, i64* %RAX
  %13610 = load i64, i64* %PC
  %13611 = add i64 %13610, 3
  store i64 %13611, i64* %PC
  %13612 = inttoptr i64 %13609 to i64*
  %13613 = load i64, i64* %13612
  store i64 %13613, i64* %RAX, align 8, !tbaa !2428
  %13614 = load i64, i64* %RBP
  %13615 = sub i64 %13614, 16
  %13616 = load i64, i64* %PC
  %13617 = add i64 %13616, 4
  store i64 %13617, i64* %PC
  %13618 = inttoptr i64 %13615 to i64*
  %13619 = load i64, i64* %13618
  store i64 %13619, i64* %RCX, align 8, !tbaa !2428
  %13620 = load i64, i64* %RCX
  %13621 = add i64 %13620, 12
  %13622 = load i64, i64* %PC
  %13623 = add i64 %13622, 4
  store i64 %13623, i64* %PC
  %13624 = inttoptr i64 %13621 to i32*
  %13625 = load i32, i32* %13624
  %13626 = sext i32 %13625 to i64
  %13627 = mul nsw i64 %13626, 3
  %13628 = trunc i64 %13627 to i32
  %13629 = and i64 %13627, 4294967295
  store i64 %13629, i64* %RDX, align 8, !tbaa !2428
  %13630 = shl i64 %13627, 32
  %13631 = ashr exact i64 %13630, 32
  %13632 = icmp ne i64 %13631, %13627
  %13633 = zext i1 %13632 to i8
  %13634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13633, i8* %13634, align 1, !tbaa !2432
  %13635 = and i32 %13628, 255
  %13636 = call i32 @llvm.ctpop.i32(i32 %13635) #16
  %13637 = trunc i32 %13636 to i8
  %13638 = and i8 %13637, 1
  %13639 = xor i8 %13638, 1
  %13640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13639, i8* %13640, align 1, !tbaa !2446
  %13641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13641, align 1, !tbaa !2447
  %13642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13642, align 1, !tbaa !2448
  %13643 = lshr i32 %13628, 31
  %13644 = trunc i32 %13643 to i8
  %13645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13644, i8* %13645, align 1, !tbaa !2449
  %13646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13633, i8* %13646, align 1, !tbaa !2450
  %13647 = load i64, i64* %RBP
  %13648 = sub i64 %13647, 16
  %13649 = load i64, i64* %PC
  %13650 = add i64 %13649, 4
  store i64 %13650, i64* %PC
  %13651 = inttoptr i64 %13648 to i64*
  %13652 = load i64, i64* %13651
  store i64 %13652, i64* %RCX, align 8, !tbaa !2428
  %13653 = load i64, i64* %RDX
  %13654 = load i64, i64* %RCX
  %13655 = add i64 %13654, 16
  %13656 = load i64, i64* %PC
  %13657 = add i64 %13656, 4
  store i64 %13657, i64* %PC
  %13658 = inttoptr i64 %13655 to i32*
  %13659 = load i32, i32* %13658
  %13660 = shl i64 %13653, 32
  %13661 = ashr exact i64 %13660, 32
  %13662 = sext i32 %13659 to i64
  %13663 = mul nsw i64 %13662, %13661
  %13664 = trunc i64 %13663 to i32
  %13665 = and i64 %13663, 4294967295
  store i64 %13665, i64* %RDX, align 8, !tbaa !2428
  %13666 = shl i64 %13663, 32
  %13667 = ashr exact i64 %13666, 32
  %13668 = icmp ne i64 %13667, %13663
  %13669 = zext i1 %13668 to i8
  %13670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13669, i8* %13670, align 1, !tbaa !2432
  %13671 = and i32 %13664, 255
  %13672 = call i32 @llvm.ctpop.i32(i32 %13671) #16
  %13673 = trunc i32 %13672 to i8
  %13674 = and i8 %13673, 1
  %13675 = xor i8 %13674, 1
  %13676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13675, i8* %13676, align 1, !tbaa !2446
  %13677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13677, align 1, !tbaa !2447
  %13678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13678, align 1, !tbaa !2448
  %13679 = lshr i32 %13664, 31
  %13680 = trunc i32 %13679 to i8
  %13681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13680, i8* %13681, align 1, !tbaa !2449
  %13682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13669, i8* %13682, align 1, !tbaa !2450
  %13683 = load i64, i64* %RBP
  %13684 = sub i64 %13683, 16
  %13685 = load i64, i64* %PC
  %13686 = add i64 %13685, 4
  store i64 %13686, i64* %PC
  %13687 = inttoptr i64 %13684 to i64*
  %13688 = load i64, i64* %13687
  store i64 %13688, i64* %RCX, align 8, !tbaa !2428
  %13689 = load i64, i64* %RDX
  %13690 = load i64, i64* %RCX
  %13691 = add i64 %13690, 20
  %13692 = load i64, i64* %PC
  %13693 = add i64 %13692, 4
  store i64 %13693, i64* %PC
  %13694 = inttoptr i64 %13691 to i32*
  %13695 = load i32, i32* %13694
  %13696 = shl i64 %13689, 32
  %13697 = ashr exact i64 %13696, 32
  %13698 = sext i32 %13695 to i64
  %13699 = mul nsw i64 %13698, %13697
  %13700 = trunc i64 %13699 to i32
  %13701 = and i64 %13699, 4294967295
  store i64 %13701, i64* %RDX, align 8, !tbaa !2428
  %13702 = shl i64 %13699, 32
  %13703 = ashr exact i64 %13702, 32
  %13704 = icmp ne i64 %13703, %13699
  %13705 = zext i1 %13704 to i8
  %13706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13705, i8* %13706, align 1, !tbaa !2432
  %13707 = and i32 %13700, 255
  %13708 = call i32 @llvm.ctpop.i32(i32 %13707) #16
  %13709 = trunc i32 %13708 to i8
  %13710 = and i8 %13709, 1
  %13711 = xor i8 %13710, 1
  %13712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13711, i8* %13712, align 1, !tbaa !2446
  %13713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13713, align 1, !tbaa !2447
  %13714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13714, align 1, !tbaa !2448
  %13715 = lshr i32 %13700, 31
  %13716 = trunc i32 %13715 to i8
  %13717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13716, i8* %13717, align 1, !tbaa !2449
  %13718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13705, i8* %13718, align 1, !tbaa !2450
  %13719 = load i64, i64* %RBP
  %13720 = sub i64 %13719, 68
  %13721 = load i64, i64* %PC
  %13722 = add i64 %13721, 3
  store i64 %13722, i64* %PC
  %13723 = inttoptr i64 %13720 to i32*
  %13724 = load i32, i32* %13723
  %13725 = zext i32 %13724 to i64
  store i64 %13725, i64* %RSI, align 8, !tbaa !2428
  %13726 = load i64, i64* %RBP
  %13727 = sub i64 %13726, 16
  %13728 = load i64, i64* %PC
  %13729 = add i64 %13728, 4
  store i64 %13729, i64* %PC
  %13730 = inttoptr i64 %13727 to i64*
  %13731 = load i64, i64* %13730
  store i64 %13731, i64* %RCX, align 8, !tbaa !2428
  %13732 = load i64, i64* %RSI
  %13733 = load i64, i64* %RCX
  %13734 = add i64 %13733, 16
  %13735 = load i64, i64* %PC
  %13736 = add i64 %13735, 4
  store i64 %13736, i64* %PC
  %13737 = inttoptr i64 %13734 to i32*
  %13738 = load i32, i32* %13737
  %13739 = shl i64 %13732, 32
  %13740 = ashr exact i64 %13739, 32
  %13741 = sext i32 %13738 to i64
  %13742 = mul nsw i64 %13741, %13740
  %13743 = trunc i64 %13742 to i32
  %13744 = and i64 %13742, 4294967295
  store i64 %13744, i64* %RSI, align 8, !tbaa !2428
  %13745 = shl i64 %13742, 32
  %13746 = ashr exact i64 %13745, 32
  %13747 = icmp ne i64 %13746, %13742
  %13748 = zext i1 %13747 to i8
  %13749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13748, i8* %13749, align 1, !tbaa !2432
  %13750 = and i32 %13743, 255
  %13751 = call i32 @llvm.ctpop.i32(i32 %13750) #16
  %13752 = trunc i32 %13751 to i8
  %13753 = and i8 %13752, 1
  %13754 = xor i8 %13753, 1
  %13755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13754, i8* %13755, align 1, !tbaa !2446
  %13756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13756, align 1, !tbaa !2447
  %13757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13757, align 1, !tbaa !2448
  %13758 = lshr i32 %13743, 31
  %13759 = trunc i32 %13758 to i8
  %13760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13759, i8* %13760, align 1, !tbaa !2449
  %13761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13748, i8* %13761, align 1, !tbaa !2450
  %13762 = load i64, i64* %RBP
  %13763 = sub i64 %13762, 16
  %13764 = load i64, i64* %PC
  %13765 = add i64 %13764, 4
  store i64 %13765, i64* %PC
  %13766 = inttoptr i64 %13763 to i64*
  %13767 = load i64, i64* %13766
  store i64 %13767, i64* %RCX, align 8, !tbaa !2428
  %13768 = load i64, i64* %RSI
  %13769 = load i64, i64* %RCX
  %13770 = add i64 %13769, 20
  %13771 = load i64, i64* %PC
  %13772 = add i64 %13771, 4
  store i64 %13772, i64* %PC
  %13773 = inttoptr i64 %13770 to i32*
  %13774 = load i32, i32* %13773
  %13775 = shl i64 %13768, 32
  %13776 = ashr exact i64 %13775, 32
  %13777 = sext i32 %13774 to i64
  %13778 = mul nsw i64 %13777, %13776
  %13779 = trunc i64 %13778 to i32
  %13780 = and i64 %13778, 4294967295
  store i64 %13780, i64* %RSI, align 8, !tbaa !2428
  %13781 = shl i64 %13778, 32
  %13782 = ashr exact i64 %13781, 32
  %13783 = icmp ne i64 %13782, %13778
  %13784 = zext i1 %13783 to i8
  %13785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13784, i8* %13785, align 1, !tbaa !2432
  %13786 = and i32 %13779, 255
  %13787 = call i32 @llvm.ctpop.i32(i32 %13786) #16
  %13788 = trunc i32 %13787 to i8
  %13789 = and i8 %13788, 1
  %13790 = xor i8 %13789, 1
  %13791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13790, i8* %13791, align 1, !tbaa !2446
  %13792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13792, align 1, !tbaa !2447
  %13793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13793, align 1, !tbaa !2448
  %13794 = lshr i32 %13779, 31
  %13795 = trunc i32 %13794 to i8
  %13796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13795, i8* %13796, align 1, !tbaa !2449
  %13797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13784, i8* %13797, align 1, !tbaa !2450
  %13798 = load i64, i64* %RDX
  %13799 = load i32, i32* %ESI
  %13800 = zext i32 %13799 to i64
  %13801 = load i64, i64* %PC
  %13802 = add i64 %13801, 2
  store i64 %13802, i64* %PC
  %13803 = trunc i64 %13798 to i32
  %13804 = add i32 %13799, %13803
  %13805 = zext i32 %13804 to i64
  store i64 %13805, i64* %RDX, align 8, !tbaa !2428
  %13806 = icmp ult i32 %13804, %13803
  %13807 = icmp ult i32 %13804, %13799
  %13808 = or i1 %13806, %13807
  %13809 = zext i1 %13808 to i8
  %13810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13809, i8* %13810, align 1, !tbaa !2432
  %13811 = and i32 %13804, 255
  %13812 = call i32 @llvm.ctpop.i32(i32 %13811) #16
  %13813 = trunc i32 %13812 to i8
  %13814 = and i8 %13813, 1
  %13815 = xor i8 %13814, 1
  %13816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13815, i8* %13816, align 1, !tbaa !2446
  %13817 = xor i64 %13800, %13798
  %13818 = trunc i64 %13817 to i32
  %13819 = xor i32 %13818, %13804
  %13820 = lshr i32 %13819, 4
  %13821 = trunc i32 %13820 to i8
  %13822 = and i8 %13821, 1
  %13823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13822, i8* %13823, align 1, !tbaa !2447
  %13824 = icmp eq i32 %13804, 0
  %13825 = zext i1 %13824 to i8
  %13826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13825, i8* %13826, align 1, !tbaa !2448
  %13827 = lshr i32 %13804, 31
  %13828 = trunc i32 %13827 to i8
  %13829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13828, i8* %13829, align 1, !tbaa !2449
  %13830 = lshr i32 %13803, 31
  %13831 = lshr i32 %13799, 31
  %13832 = xor i32 %13827, %13830
  %13833 = xor i32 %13827, %13831
  %13834 = add nuw nsw i32 %13832, %13833
  %13835 = icmp eq i32 %13834, 2
  %13836 = zext i1 %13835 to i8
  %13837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13836, i8* %13837, align 1, !tbaa !2450
  %13838 = load i64, i64* %RBP
  %13839 = sub i64 %13838, 72
  %13840 = load i64, i64* %PC
  %13841 = add i64 %13840, 3
  store i64 %13841, i64* %PC
  %13842 = inttoptr i64 %13839 to i32*
  %13843 = load i32, i32* %13842
  %13844 = zext i32 %13843 to i64
  store i64 %13844, i64* %RSI, align 8, !tbaa !2428
  %13845 = load i64, i64* %RBP
  %13846 = sub i64 %13845, 16
  %13847 = load i64, i64* %PC
  %13848 = add i64 %13847, 4
  store i64 %13848, i64* %PC
  %13849 = inttoptr i64 %13846 to i64*
  %13850 = load i64, i64* %13849
  store i64 %13850, i64* %RCX, align 8, !tbaa !2428
  %13851 = load i64, i64* %RSI
  %13852 = load i64, i64* %RCX
  %13853 = add i64 %13852, 20
  %13854 = load i64, i64* %PC
  %13855 = add i64 %13854, 4
  store i64 %13855, i64* %PC
  %13856 = inttoptr i64 %13853 to i32*
  %13857 = load i32, i32* %13856
  %13858 = shl i64 %13851, 32
  %13859 = ashr exact i64 %13858, 32
  %13860 = sext i32 %13857 to i64
  %13861 = mul nsw i64 %13860, %13859
  %13862 = trunc i64 %13861 to i32
  %13863 = and i64 %13861, 4294967295
  store i64 %13863, i64* %RSI, align 8, !tbaa !2428
  %13864 = shl i64 %13861, 32
  %13865 = ashr exact i64 %13864, 32
  %13866 = icmp ne i64 %13865, %13861
  %13867 = zext i1 %13866 to i8
  %13868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13867, i8* %13868, align 1, !tbaa !2432
  %13869 = and i32 %13862, 255
  %13870 = call i32 @llvm.ctpop.i32(i32 %13869) #16
  %13871 = trunc i32 %13870 to i8
  %13872 = and i8 %13871, 1
  %13873 = xor i8 %13872, 1
  %13874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13873, i8* %13874, align 1, !tbaa !2446
  %13875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13875, align 1, !tbaa !2447
  %13876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13876, align 1, !tbaa !2448
  %13877 = lshr i32 %13862, 31
  %13878 = trunc i32 %13877 to i8
  %13879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13878, i8* %13879, align 1, !tbaa !2449
  %13880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13867, i8* %13880, align 1, !tbaa !2450
  %13881 = load i64, i64* %RDX
  %13882 = load i32, i32* %ESI
  %13883 = zext i32 %13882 to i64
  %13884 = load i64, i64* %PC
  %13885 = add i64 %13884, 2
  store i64 %13885, i64* %PC
  %13886 = trunc i64 %13881 to i32
  %13887 = add i32 %13882, %13886
  %13888 = zext i32 %13887 to i64
  store i64 %13888, i64* %RDX, align 8, !tbaa !2428
  %13889 = icmp ult i32 %13887, %13886
  %13890 = icmp ult i32 %13887, %13882
  %13891 = or i1 %13889, %13890
  %13892 = zext i1 %13891 to i8
  %13893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13892, i8* %13893, align 1, !tbaa !2432
  %13894 = and i32 %13887, 255
  %13895 = call i32 @llvm.ctpop.i32(i32 %13894) #16
  %13896 = trunc i32 %13895 to i8
  %13897 = and i8 %13896, 1
  %13898 = xor i8 %13897, 1
  %13899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13898, i8* %13899, align 1, !tbaa !2446
  %13900 = xor i64 %13883, %13881
  %13901 = trunc i64 %13900 to i32
  %13902 = xor i32 %13901, %13887
  %13903 = lshr i32 %13902, 4
  %13904 = trunc i32 %13903 to i8
  %13905 = and i8 %13904, 1
  %13906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13905, i8* %13906, align 1, !tbaa !2447
  %13907 = icmp eq i32 %13887, 0
  %13908 = zext i1 %13907 to i8
  %13909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13908, i8* %13909, align 1, !tbaa !2448
  %13910 = lshr i32 %13887, 31
  %13911 = trunc i32 %13910 to i8
  %13912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13911, i8* %13912, align 1, !tbaa !2449
  %13913 = lshr i32 %13886, 31
  %13914 = lshr i32 %13882, 31
  %13915 = xor i32 %13910, %13913
  %13916 = xor i32 %13910, %13914
  %13917 = add nuw nsw i32 %13915, %13916
  %13918 = icmp eq i32 %13917, 2
  %13919 = zext i1 %13918 to i8
  %13920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13919, i8* %13920, align 1, !tbaa !2450
  %13921 = load i64, i64* %RDX
  %13922 = load i64, i64* %RBP
  %13923 = sub i64 %13922, 76
  %13924 = load i64, i64* %PC
  %13925 = add i64 %13924, 3
  store i64 %13925, i64* %PC
  %13926 = trunc i64 %13921 to i32
  %13927 = inttoptr i64 %13923 to i32*
  %13928 = load i32, i32* %13927
  %13929 = add i32 %13928, %13926
  %13930 = zext i32 %13929 to i64
  store i64 %13930, i64* %RDX, align 8, !tbaa !2428
  %13931 = icmp ult i32 %13929, %13926
  %13932 = icmp ult i32 %13929, %13928
  %13933 = or i1 %13931, %13932
  %13934 = zext i1 %13933 to i8
  %13935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13934, i8* %13935, align 1, !tbaa !2432
  %13936 = and i32 %13929, 255
  %13937 = call i32 @llvm.ctpop.i32(i32 %13936) #16
  %13938 = trunc i32 %13937 to i8
  %13939 = and i8 %13938, 1
  %13940 = xor i8 %13939, 1
  %13941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13940, i8* %13941, align 1, !tbaa !2446
  %13942 = xor i32 %13928, %13926
  %13943 = xor i32 %13942, %13929
  %13944 = lshr i32 %13943, 4
  %13945 = trunc i32 %13944 to i8
  %13946 = and i8 %13945, 1
  %13947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13946, i8* %13947, align 1, !tbaa !2447
  %13948 = icmp eq i32 %13929, 0
  %13949 = zext i1 %13948 to i8
  %13950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13949, i8* %13950, align 1, !tbaa !2448
  %13951 = lshr i32 %13929, 31
  %13952 = trunc i32 %13951 to i8
  %13953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13952, i8* %13953, align 1, !tbaa !2449
  %13954 = lshr i32 %13926, 31
  %13955 = lshr i32 %13928, 31
  %13956 = xor i32 %13951, %13954
  %13957 = xor i32 %13951, %13955
  %13958 = add nuw nsw i32 %13956, %13957
  %13959 = icmp eq i32 %13958, 2
  %13960 = zext i1 %13959 to i8
  %13961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13960, i8* %13961, align 1, !tbaa !2450
  %13962 = load i32, i32* %EDX
  %13963 = zext i32 %13962 to i64
  %13964 = load i64, i64* %PC
  %13965 = add i64 %13964, 3
  store i64 %13965, i64* %PC
  %13966 = shl i64 %13963, 32
  %13967 = ashr exact i64 %13966, 32
  store i64 %13967, i64* %RCX, align 8, !tbaa !2428
  %13968 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13969 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13970 = load i64, i64* %RAX
  %13971 = load i64, i64* %RCX
  %13972 = mul i64 %13971, 4
  %13973 = add i64 %13972, %13970
  %13974 = load i64, i64* %PC
  %13975 = add i64 %13974, 5
  store i64 %13975, i64* %PC
  %13976 = bitcast i8* %13969 to <2 x float>*
  %13977 = load <2 x float>, <2 x float>* %13976, align 1
  %13978 = getelementptr inbounds i8, i8* %13969, i64 8
  %13979 = bitcast i8* %13978 to <2 x i32>*
  %13980 = load <2 x i32>, <2 x i32>* %13979, align 1
  %13981 = inttoptr i64 %13973 to float*
  %13982 = load float, float* %13981
  %13983 = extractelement <2 x float> %13977, i32 0
  %13984 = fmul float %13983, %13982
  %13985 = bitcast i8* %13968 to float*
  store float %13984, float* %13985, align 1, !tbaa !2452
  %13986 = bitcast <2 x float> %13977 to <2 x i32>
  %13987 = extractelement <2 x i32> %13986, i32 1
  %13988 = getelementptr inbounds i8, i8* %13968, i64 4
  %13989 = bitcast i8* %13988 to i32*
  store i32 %13987, i32* %13989, align 1, !tbaa !2452
  %13990 = extractelement <2 x i32> %13980, i32 0
  %13991 = getelementptr inbounds i8, i8* %13968, i64 8
  %13992 = bitcast i8* %13991 to i32*
  store i32 %13990, i32* %13992, align 1, !tbaa !2452
  %13993 = extractelement <2 x i32> %13980, i32 1
  %13994 = getelementptr inbounds i8, i8* %13968, i64 12
  %13995 = bitcast i8* %13994 to i32*
  store i32 %13993, i32* %13995, align 1, !tbaa !2452
  %13996 = load i64, i64* %RBP
  %13997 = sub i64 %13996, 40
  %13998 = load i64, i64* %PC
  %13999 = add i64 %13998, 4
  store i64 %13999, i64* %PC
  %14000 = inttoptr i64 %13997 to i64*
  %14001 = load i64, i64* %14000
  store i64 %14001, i64* %RAX, align 8, !tbaa !2428
  %14002 = load i64, i64* %RAX
  %14003 = load i64, i64* %PC
  %14004 = add i64 %14003, 3
  store i64 %14004, i64* %PC
  %14005 = inttoptr i64 %14002 to i64*
  %14006 = load i64, i64* %14005
  store i64 %14006, i64* %RAX, align 8, !tbaa !2428
  %14007 = load i64, i64* %RBP
  %14008 = sub i64 %14007, 40
  %14009 = load i64, i64* %PC
  %14010 = add i64 %14009, 4
  store i64 %14010, i64* %PC
  %14011 = inttoptr i64 %14008 to i64*
  %14012 = load i64, i64* %14011
  store i64 %14012, i64* %RCX, align 8, !tbaa !2428
  %14013 = load i64, i64* %RCX
  %14014 = add i64 %14013, 12
  %14015 = load i64, i64* %PC
  %14016 = add i64 %14015, 4
  store i64 %14016, i64* %PC
  %14017 = inttoptr i64 %14014 to i32*
  %14018 = load i32, i32* %14017
  %14019 = sext i32 %14018 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14020, align 1, !tbaa !2432
  %14021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14021, align 1, !tbaa !2446
  %14022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14022, align 1, !tbaa !2447
  %14023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14023, align 1, !tbaa !2448
  %14024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14024, align 1, !tbaa !2449
  %14025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14025, align 1, !tbaa !2450
  %14026 = load i64, i64* %RBP
  %14027 = sub i64 %14026, 40
  %14028 = load i64, i64* %PC
  %14029 = add i64 %14028, 4
  store i64 %14029, i64* %PC
  %14030 = inttoptr i64 %14027 to i64*
  %14031 = load i64, i64* %14030
  store i64 %14031, i64* %RCX, align 8, !tbaa !2428
  %14032 = load i64, i64* %RDX
  %14033 = load i64, i64* %RCX
  %14034 = add i64 %14033, 16
  %14035 = load i64, i64* %PC
  %14036 = add i64 %14035, 4
  store i64 %14036, i64* %PC
  %14037 = inttoptr i64 %14034 to i32*
  %14038 = load i32, i32* %14037
  %14039 = shl i64 %14032, 32
  %14040 = ashr exact i64 %14039, 32
  %14041 = sext i32 %14038 to i64
  %14042 = mul nsw i64 %14041, %14040
  %14043 = trunc i64 %14042 to i32
  %14044 = and i64 %14042, 4294967295
  store i64 %14044, i64* %RDX, align 8, !tbaa !2428
  %14045 = shl i64 %14042, 32
  %14046 = ashr exact i64 %14045, 32
  %14047 = icmp ne i64 %14046, %14042
  %14048 = zext i1 %14047 to i8
  %14049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14048, i8* %14049, align 1, !tbaa !2432
  %14050 = and i32 %14043, 255
  %14051 = call i32 @llvm.ctpop.i32(i32 %14050) #16
  %14052 = trunc i32 %14051 to i8
  %14053 = and i8 %14052, 1
  %14054 = xor i8 %14053, 1
  %14055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14054, i8* %14055, align 1, !tbaa !2446
  %14056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14056, align 1, !tbaa !2447
  %14057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14057, align 1, !tbaa !2448
  %14058 = lshr i32 %14043, 31
  %14059 = trunc i32 %14058 to i8
  %14060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14059, i8* %14060, align 1, !tbaa !2449
  %14061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14048, i8* %14061, align 1, !tbaa !2450
  %14062 = load i64, i64* %RBP
  %14063 = sub i64 %14062, 40
  %14064 = load i64, i64* %PC
  %14065 = add i64 %14064, 4
  store i64 %14065, i64* %PC
  %14066 = inttoptr i64 %14063 to i64*
  %14067 = load i64, i64* %14066
  store i64 %14067, i64* %RCX, align 8, !tbaa !2428
  %14068 = load i64, i64* %RDX
  %14069 = load i64, i64* %RCX
  %14070 = add i64 %14069, 20
  %14071 = load i64, i64* %PC
  %14072 = add i64 %14071, 4
  store i64 %14072, i64* %PC
  %14073 = inttoptr i64 %14070 to i32*
  %14074 = load i32, i32* %14073
  %14075 = shl i64 %14068, 32
  %14076 = ashr exact i64 %14075, 32
  %14077 = sext i32 %14074 to i64
  %14078 = mul nsw i64 %14077, %14076
  %14079 = trunc i64 %14078 to i32
  %14080 = and i64 %14078, 4294967295
  store i64 %14080, i64* %RDX, align 8, !tbaa !2428
  %14081 = shl i64 %14078, 32
  %14082 = ashr exact i64 %14081, 32
  %14083 = icmp ne i64 %14082, %14078
  %14084 = zext i1 %14083 to i8
  %14085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14084, i8* %14085, align 1, !tbaa !2432
  %14086 = and i32 %14079, 255
  %14087 = call i32 @llvm.ctpop.i32(i32 %14086) #16
  %14088 = trunc i32 %14087 to i8
  %14089 = and i8 %14088, 1
  %14090 = xor i8 %14089, 1
  %14091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14090, i8* %14091, align 1, !tbaa !2446
  %14092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14092, align 1, !tbaa !2447
  %14093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14093, align 1, !tbaa !2448
  %14094 = lshr i32 %14079, 31
  %14095 = trunc i32 %14094 to i8
  %14096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14095, i8* %14096, align 1, !tbaa !2449
  %14097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14084, i8* %14097, align 1, !tbaa !2450
  %14098 = load i64, i64* %RBP
  %14099 = sub i64 %14098, 68
  %14100 = load i64, i64* %PC
  %14101 = add i64 %14100, 3
  store i64 %14101, i64* %PC
  %14102 = inttoptr i64 %14099 to i32*
  %14103 = load i32, i32* %14102
  %14104 = zext i32 %14103 to i64
  store i64 %14104, i64* %RSI, align 8, !tbaa !2428
  %14105 = load i64, i64* %RBP
  %14106 = sub i64 %14105, 40
  %14107 = load i64, i64* %PC
  %14108 = add i64 %14107, 4
  store i64 %14108, i64* %PC
  %14109 = inttoptr i64 %14106 to i64*
  %14110 = load i64, i64* %14109
  store i64 %14110, i64* %RCX, align 8, !tbaa !2428
  %14111 = load i64, i64* %RSI
  %14112 = load i64, i64* %RCX
  %14113 = add i64 %14112, 16
  %14114 = load i64, i64* %PC
  %14115 = add i64 %14114, 4
  store i64 %14115, i64* %PC
  %14116 = inttoptr i64 %14113 to i32*
  %14117 = load i32, i32* %14116
  %14118 = shl i64 %14111, 32
  %14119 = ashr exact i64 %14118, 32
  %14120 = sext i32 %14117 to i64
  %14121 = mul nsw i64 %14120, %14119
  %14122 = trunc i64 %14121 to i32
  %14123 = and i64 %14121, 4294967295
  store i64 %14123, i64* %RSI, align 8, !tbaa !2428
  %14124 = shl i64 %14121, 32
  %14125 = ashr exact i64 %14124, 32
  %14126 = icmp ne i64 %14125, %14121
  %14127 = zext i1 %14126 to i8
  %14128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14127, i8* %14128, align 1, !tbaa !2432
  %14129 = and i32 %14122, 255
  %14130 = call i32 @llvm.ctpop.i32(i32 %14129) #16
  %14131 = trunc i32 %14130 to i8
  %14132 = and i8 %14131, 1
  %14133 = xor i8 %14132, 1
  %14134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14133, i8* %14134, align 1, !tbaa !2446
  %14135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14135, align 1, !tbaa !2447
  %14136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14136, align 1, !tbaa !2448
  %14137 = lshr i32 %14122, 31
  %14138 = trunc i32 %14137 to i8
  %14139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14138, i8* %14139, align 1, !tbaa !2449
  %14140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14127, i8* %14140, align 1, !tbaa !2450
  %14141 = load i64, i64* %RBP
  %14142 = sub i64 %14141, 40
  %14143 = load i64, i64* %PC
  %14144 = add i64 %14143, 4
  store i64 %14144, i64* %PC
  %14145 = inttoptr i64 %14142 to i64*
  %14146 = load i64, i64* %14145
  store i64 %14146, i64* %RCX, align 8, !tbaa !2428
  %14147 = load i64, i64* %RSI
  %14148 = load i64, i64* %RCX
  %14149 = add i64 %14148, 20
  %14150 = load i64, i64* %PC
  %14151 = add i64 %14150, 4
  store i64 %14151, i64* %PC
  %14152 = inttoptr i64 %14149 to i32*
  %14153 = load i32, i32* %14152
  %14154 = shl i64 %14147, 32
  %14155 = ashr exact i64 %14154, 32
  %14156 = sext i32 %14153 to i64
  %14157 = mul nsw i64 %14156, %14155
  %14158 = trunc i64 %14157 to i32
  %14159 = and i64 %14157, 4294967295
  store i64 %14159, i64* %RSI, align 8, !tbaa !2428
  %14160 = shl i64 %14157, 32
  %14161 = ashr exact i64 %14160, 32
  %14162 = icmp ne i64 %14161, %14157
  %14163 = zext i1 %14162 to i8
  %14164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14163, i8* %14164, align 1, !tbaa !2432
  %14165 = and i32 %14158, 255
  %14166 = call i32 @llvm.ctpop.i32(i32 %14165) #16
  %14167 = trunc i32 %14166 to i8
  %14168 = and i8 %14167, 1
  %14169 = xor i8 %14168, 1
  %14170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14169, i8* %14170, align 1, !tbaa !2446
  %14171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14171, align 1, !tbaa !2447
  %14172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14172, align 1, !tbaa !2448
  %14173 = lshr i32 %14158, 31
  %14174 = trunc i32 %14173 to i8
  %14175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14174, i8* %14175, align 1, !tbaa !2449
  %14176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14163, i8* %14176, align 1, !tbaa !2450
  %14177 = load i64, i64* %RDX
  %14178 = load i32, i32* %ESI
  %14179 = zext i32 %14178 to i64
  %14180 = load i64, i64* %PC
  %14181 = add i64 %14180, 2
  store i64 %14181, i64* %PC
  %14182 = trunc i64 %14177 to i32
  %14183 = add i32 %14178, %14182
  %14184 = zext i32 %14183 to i64
  store i64 %14184, i64* %RDX, align 8, !tbaa !2428
  %14185 = icmp ult i32 %14183, %14182
  %14186 = icmp ult i32 %14183, %14178
  %14187 = or i1 %14185, %14186
  %14188 = zext i1 %14187 to i8
  %14189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14188, i8* %14189, align 1, !tbaa !2432
  %14190 = and i32 %14183, 255
  %14191 = call i32 @llvm.ctpop.i32(i32 %14190) #16
  %14192 = trunc i32 %14191 to i8
  %14193 = and i8 %14192, 1
  %14194 = xor i8 %14193, 1
  %14195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14194, i8* %14195, align 1, !tbaa !2446
  %14196 = xor i64 %14179, %14177
  %14197 = trunc i64 %14196 to i32
  %14198 = xor i32 %14197, %14183
  %14199 = lshr i32 %14198, 4
  %14200 = trunc i32 %14199 to i8
  %14201 = and i8 %14200, 1
  %14202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14201, i8* %14202, align 1, !tbaa !2447
  %14203 = icmp eq i32 %14183, 0
  %14204 = zext i1 %14203 to i8
  %14205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14204, i8* %14205, align 1, !tbaa !2448
  %14206 = lshr i32 %14183, 31
  %14207 = trunc i32 %14206 to i8
  %14208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14207, i8* %14208, align 1, !tbaa !2449
  %14209 = lshr i32 %14182, 31
  %14210 = lshr i32 %14178, 31
  %14211 = xor i32 %14206, %14209
  %14212 = xor i32 %14206, %14210
  %14213 = add nuw nsw i32 %14211, %14212
  %14214 = icmp eq i32 %14213, 2
  %14215 = zext i1 %14214 to i8
  %14216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14215, i8* %14216, align 1, !tbaa !2450
  %14217 = load i64, i64* %RBP
  %14218 = sub i64 %14217, 72
  %14219 = load i64, i64* %PC
  %14220 = add i64 %14219, 3
  store i64 %14220, i64* %PC
  %14221 = inttoptr i64 %14218 to i32*
  %14222 = load i32, i32* %14221
  %14223 = zext i32 %14222 to i64
  store i64 %14223, i64* %RSI, align 8, !tbaa !2428
  %14224 = load i64, i64* %RBP
  %14225 = sub i64 %14224, 40
  %14226 = load i64, i64* %PC
  %14227 = add i64 %14226, 4
  store i64 %14227, i64* %PC
  %14228 = inttoptr i64 %14225 to i64*
  %14229 = load i64, i64* %14228
  store i64 %14229, i64* %RCX, align 8, !tbaa !2428
  %14230 = load i64, i64* %RSI
  %14231 = load i64, i64* %RCX
  %14232 = add i64 %14231, 20
  %14233 = load i64, i64* %PC
  %14234 = add i64 %14233, 4
  store i64 %14234, i64* %PC
  %14235 = inttoptr i64 %14232 to i32*
  %14236 = load i32, i32* %14235
  %14237 = shl i64 %14230, 32
  %14238 = ashr exact i64 %14237, 32
  %14239 = sext i32 %14236 to i64
  %14240 = mul nsw i64 %14239, %14238
  %14241 = trunc i64 %14240 to i32
  %14242 = and i64 %14240, 4294967295
  store i64 %14242, i64* %RSI, align 8, !tbaa !2428
  %14243 = shl i64 %14240, 32
  %14244 = ashr exact i64 %14243, 32
  %14245 = icmp ne i64 %14244, %14240
  %14246 = zext i1 %14245 to i8
  %14247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14246, i8* %14247, align 1, !tbaa !2432
  %14248 = and i32 %14241, 255
  %14249 = call i32 @llvm.ctpop.i32(i32 %14248) #16
  %14250 = trunc i32 %14249 to i8
  %14251 = and i8 %14250, 1
  %14252 = xor i8 %14251, 1
  %14253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14252, i8* %14253, align 1, !tbaa !2446
  %14254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14254, align 1, !tbaa !2447
  %14255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14255, align 1, !tbaa !2448
  %14256 = lshr i32 %14241, 31
  %14257 = trunc i32 %14256 to i8
  %14258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14257, i8* %14258, align 1, !tbaa !2449
  %14259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14246, i8* %14259, align 1, !tbaa !2450
  %14260 = load i64, i64* %RDX
  %14261 = load i32, i32* %ESI
  %14262 = zext i32 %14261 to i64
  %14263 = load i64, i64* %PC
  %14264 = add i64 %14263, 2
  store i64 %14264, i64* %PC
  %14265 = trunc i64 %14260 to i32
  %14266 = add i32 %14261, %14265
  %14267 = zext i32 %14266 to i64
  store i64 %14267, i64* %RDX, align 8, !tbaa !2428
  %14268 = icmp ult i32 %14266, %14265
  %14269 = icmp ult i32 %14266, %14261
  %14270 = or i1 %14268, %14269
  %14271 = zext i1 %14270 to i8
  %14272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14271, i8* %14272, align 1, !tbaa !2432
  %14273 = and i32 %14266, 255
  %14274 = call i32 @llvm.ctpop.i32(i32 %14273) #16
  %14275 = trunc i32 %14274 to i8
  %14276 = and i8 %14275, 1
  %14277 = xor i8 %14276, 1
  %14278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14277, i8* %14278, align 1, !tbaa !2446
  %14279 = xor i64 %14262, %14260
  %14280 = trunc i64 %14279 to i32
  %14281 = xor i32 %14280, %14266
  %14282 = lshr i32 %14281, 4
  %14283 = trunc i32 %14282 to i8
  %14284 = and i8 %14283, 1
  %14285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14284, i8* %14285, align 1, !tbaa !2447
  %14286 = icmp eq i32 %14266, 0
  %14287 = zext i1 %14286 to i8
  %14288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14287, i8* %14288, align 1, !tbaa !2448
  %14289 = lshr i32 %14266, 31
  %14290 = trunc i32 %14289 to i8
  %14291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14290, i8* %14291, align 1, !tbaa !2449
  %14292 = lshr i32 %14265, 31
  %14293 = lshr i32 %14261, 31
  %14294 = xor i32 %14289, %14292
  %14295 = xor i32 %14289, %14293
  %14296 = add nuw nsw i32 %14294, %14295
  %14297 = icmp eq i32 %14296, 2
  %14298 = zext i1 %14297 to i8
  %14299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14298, i8* %14299, align 1, !tbaa !2450
  %14300 = load i64, i64* %RDX
  %14301 = load i64, i64* %RBP
  %14302 = sub i64 %14301, 76
  %14303 = load i64, i64* %PC
  %14304 = add i64 %14303, 3
  store i64 %14304, i64* %PC
  %14305 = trunc i64 %14300 to i32
  %14306 = inttoptr i64 %14302 to i32*
  %14307 = load i32, i32* %14306
  %14308 = add i32 %14307, %14305
  %14309 = zext i32 %14308 to i64
  store i64 %14309, i64* %RDX, align 8, !tbaa !2428
  %14310 = icmp ult i32 %14308, %14305
  %14311 = icmp ult i32 %14308, %14307
  %14312 = or i1 %14310, %14311
  %14313 = zext i1 %14312 to i8
  %14314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14313, i8* %14314, align 1, !tbaa !2432
  %14315 = and i32 %14308, 255
  %14316 = call i32 @llvm.ctpop.i32(i32 %14315) #16
  %14317 = trunc i32 %14316 to i8
  %14318 = and i8 %14317, 1
  %14319 = xor i8 %14318, 1
  %14320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14319, i8* %14320, align 1, !tbaa !2446
  %14321 = xor i32 %14307, %14305
  %14322 = xor i32 %14321, %14308
  %14323 = lshr i32 %14322, 4
  %14324 = trunc i32 %14323 to i8
  %14325 = and i8 %14324, 1
  %14326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14325, i8* %14326, align 1, !tbaa !2447
  %14327 = icmp eq i32 %14308, 0
  %14328 = zext i1 %14327 to i8
  %14329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14328, i8* %14329, align 1, !tbaa !2448
  %14330 = lshr i32 %14308, 31
  %14331 = trunc i32 %14330 to i8
  %14332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14331, i8* %14332, align 1, !tbaa !2449
  %14333 = lshr i32 %14305, 31
  %14334 = lshr i32 %14307, 31
  %14335 = xor i32 %14330, %14333
  %14336 = xor i32 %14330, %14334
  %14337 = add nuw nsw i32 %14335, %14336
  %14338 = icmp eq i32 %14337, 2
  %14339 = zext i1 %14338 to i8
  %14340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14339, i8* %14340, align 1, !tbaa !2450
  %14341 = load i32, i32* %EDX
  %14342 = zext i32 %14341 to i64
  %14343 = load i64, i64* %PC
  %14344 = add i64 %14343, 3
  store i64 %14344, i64* %PC
  %14345 = shl i64 %14342, 32
  %14346 = ashr exact i64 %14345, 32
  store i64 %14346, i64* %RCX, align 8, !tbaa !2428
  %14347 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14348 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14349 = load i64, i64* %RAX
  %14350 = load i64, i64* %RCX
  %14351 = mul i64 %14350, 4
  %14352 = add i64 %14351, %14349
  %14353 = load i64, i64* %PC
  %14354 = add i64 %14353, 5
  store i64 %14354, i64* %PC
  %14355 = bitcast i8* %14348 to <2 x float>*
  %14356 = load <2 x float>, <2 x float>* %14355, align 1
  %14357 = getelementptr inbounds i8, i8* %14348, i64 8
  %14358 = bitcast i8* %14357 to <2 x i32>*
  %14359 = load <2 x i32>, <2 x i32>* %14358, align 1
  %14360 = inttoptr i64 %14352 to float*
  %14361 = load float, float* %14360
  %14362 = extractelement <2 x float> %14356, i32 0
  %14363 = fsub float %14362, %14361
  %14364 = bitcast i8* %14347 to float*
  store float %14363, float* %14364, align 1, !tbaa !2452
  %14365 = bitcast <2 x float> %14356 to <2 x i32>
  %14366 = extractelement <2 x i32> %14365, i32 1
  %14367 = getelementptr inbounds i8, i8* %14347, i64 4
  %14368 = bitcast i8* %14367 to i32*
  store i32 %14366, i32* %14368, align 1, !tbaa !2452
  %14369 = extractelement <2 x i32> %14359, i32 0
  %14370 = getelementptr inbounds i8, i8* %14347, i64 8
  %14371 = bitcast i8* %14370 to i32*
  store i32 %14369, i32* %14371, align 1, !tbaa !2452
  %14372 = extractelement <2 x i32> %14359, i32 1
  %14373 = getelementptr inbounds i8, i8* %14347, i64 12
  %14374 = bitcast i8* %14373 to i32*
  store i32 %14372, i32* %14374, align 1, !tbaa !2452
  %14375 = load i64, i64* %RBP
  %14376 = sub i64 %14375, 48
  %14377 = load i64, i64* %PC
  %14378 = add i64 %14377, 4
  store i64 %14378, i64* %PC
  %14379 = inttoptr i64 %14376 to i64*
  %14380 = load i64, i64* %14379
  store i64 %14380, i64* %RAX, align 8, !tbaa !2428
  %14381 = load i64, i64* %RAX
  %14382 = load i64, i64* %PC
  %14383 = add i64 %14382, 3
  store i64 %14383, i64* %PC
  %14384 = inttoptr i64 %14381 to i64*
  %14385 = load i64, i64* %14384
  store i64 %14385, i64* %RAX, align 8, !tbaa !2428
  %14386 = load i64, i64* %RBP
  %14387 = sub i64 %14386, 48
  %14388 = load i64, i64* %PC
  %14389 = add i64 %14388, 4
  store i64 %14389, i64* %PC
  %14390 = inttoptr i64 %14387 to i64*
  %14391 = load i64, i64* %14390
  store i64 %14391, i64* %RCX, align 8, !tbaa !2428
  %14392 = load i64, i64* %RCX
  %14393 = add i64 %14392, 12
  %14394 = load i64, i64* %PC
  %14395 = add i64 %14394, 4
  store i64 %14395, i64* %PC
  %14396 = inttoptr i64 %14393 to i32*
  %14397 = load i32, i32* %14396
  %14398 = sext i32 %14397 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14399, align 1, !tbaa !2432
  %14400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14400, align 1, !tbaa !2446
  %14401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14401, align 1, !tbaa !2447
  %14402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14402, align 1, !tbaa !2448
  %14403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14403, align 1, !tbaa !2449
  %14404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14404, align 1, !tbaa !2450
  %14405 = load i64, i64* %RBP
  %14406 = sub i64 %14405, 48
  %14407 = load i64, i64* %PC
  %14408 = add i64 %14407, 4
  store i64 %14408, i64* %PC
  %14409 = inttoptr i64 %14406 to i64*
  %14410 = load i64, i64* %14409
  store i64 %14410, i64* %RCX, align 8, !tbaa !2428
  %14411 = load i64, i64* %RDX
  %14412 = load i64, i64* %RCX
  %14413 = add i64 %14412, 16
  %14414 = load i64, i64* %PC
  %14415 = add i64 %14414, 4
  store i64 %14415, i64* %PC
  %14416 = inttoptr i64 %14413 to i32*
  %14417 = load i32, i32* %14416
  %14418 = shl i64 %14411, 32
  %14419 = ashr exact i64 %14418, 32
  %14420 = sext i32 %14417 to i64
  %14421 = mul nsw i64 %14420, %14419
  %14422 = trunc i64 %14421 to i32
  %14423 = and i64 %14421, 4294967295
  store i64 %14423, i64* %RDX, align 8, !tbaa !2428
  %14424 = shl i64 %14421, 32
  %14425 = ashr exact i64 %14424, 32
  %14426 = icmp ne i64 %14425, %14421
  %14427 = zext i1 %14426 to i8
  %14428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14427, i8* %14428, align 1, !tbaa !2432
  %14429 = and i32 %14422, 255
  %14430 = call i32 @llvm.ctpop.i32(i32 %14429) #16
  %14431 = trunc i32 %14430 to i8
  %14432 = and i8 %14431, 1
  %14433 = xor i8 %14432, 1
  %14434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14433, i8* %14434, align 1, !tbaa !2446
  %14435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14435, align 1, !tbaa !2447
  %14436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14436, align 1, !tbaa !2448
  %14437 = lshr i32 %14422, 31
  %14438 = trunc i32 %14437 to i8
  %14439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14438, i8* %14439, align 1, !tbaa !2449
  %14440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14427, i8* %14440, align 1, !tbaa !2450
  %14441 = load i64, i64* %RBP
  %14442 = sub i64 %14441, 48
  %14443 = load i64, i64* %PC
  %14444 = add i64 %14443, 4
  store i64 %14444, i64* %PC
  %14445 = inttoptr i64 %14442 to i64*
  %14446 = load i64, i64* %14445
  store i64 %14446, i64* %RCX, align 8, !tbaa !2428
  %14447 = load i64, i64* %RDX
  %14448 = load i64, i64* %RCX
  %14449 = add i64 %14448, 20
  %14450 = load i64, i64* %PC
  %14451 = add i64 %14450, 4
  store i64 %14451, i64* %PC
  %14452 = inttoptr i64 %14449 to i32*
  %14453 = load i32, i32* %14452
  %14454 = shl i64 %14447, 32
  %14455 = ashr exact i64 %14454, 32
  %14456 = sext i32 %14453 to i64
  %14457 = mul nsw i64 %14456, %14455
  %14458 = trunc i64 %14457 to i32
  %14459 = and i64 %14457, 4294967295
  store i64 %14459, i64* %RDX, align 8, !tbaa !2428
  %14460 = shl i64 %14457, 32
  %14461 = ashr exact i64 %14460, 32
  %14462 = icmp ne i64 %14461, %14457
  %14463 = zext i1 %14462 to i8
  %14464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14463, i8* %14464, align 1, !tbaa !2432
  %14465 = and i32 %14458, 255
  %14466 = call i32 @llvm.ctpop.i32(i32 %14465) #16
  %14467 = trunc i32 %14466 to i8
  %14468 = and i8 %14467, 1
  %14469 = xor i8 %14468, 1
  %14470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14469, i8* %14470, align 1, !tbaa !2446
  %14471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14471, align 1, !tbaa !2447
  %14472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14472, align 1, !tbaa !2448
  %14473 = lshr i32 %14458, 31
  %14474 = trunc i32 %14473 to i8
  %14475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14474, i8* %14475, align 1, !tbaa !2449
  %14476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14463, i8* %14476, align 1, !tbaa !2450
  %14477 = load i64, i64* %RBP
  %14478 = sub i64 %14477, 68
  %14479 = load i64, i64* %PC
  %14480 = add i64 %14479, 3
  store i64 %14480, i64* %PC
  %14481 = inttoptr i64 %14478 to i32*
  %14482 = load i32, i32* %14481
  %14483 = zext i32 %14482 to i64
  store i64 %14483, i64* %RSI, align 8, !tbaa !2428
  %14484 = load i64, i64* %RBP
  %14485 = sub i64 %14484, 48
  %14486 = load i64, i64* %PC
  %14487 = add i64 %14486, 4
  store i64 %14487, i64* %PC
  %14488 = inttoptr i64 %14485 to i64*
  %14489 = load i64, i64* %14488
  store i64 %14489, i64* %RCX, align 8, !tbaa !2428
  %14490 = load i64, i64* %RSI
  %14491 = load i64, i64* %RCX
  %14492 = add i64 %14491, 16
  %14493 = load i64, i64* %PC
  %14494 = add i64 %14493, 4
  store i64 %14494, i64* %PC
  %14495 = inttoptr i64 %14492 to i32*
  %14496 = load i32, i32* %14495
  %14497 = shl i64 %14490, 32
  %14498 = ashr exact i64 %14497, 32
  %14499 = sext i32 %14496 to i64
  %14500 = mul nsw i64 %14499, %14498
  %14501 = trunc i64 %14500 to i32
  %14502 = and i64 %14500, 4294967295
  store i64 %14502, i64* %RSI, align 8, !tbaa !2428
  %14503 = shl i64 %14500, 32
  %14504 = ashr exact i64 %14503, 32
  %14505 = icmp ne i64 %14504, %14500
  %14506 = zext i1 %14505 to i8
  %14507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14506, i8* %14507, align 1, !tbaa !2432
  %14508 = and i32 %14501, 255
  %14509 = call i32 @llvm.ctpop.i32(i32 %14508) #16
  %14510 = trunc i32 %14509 to i8
  %14511 = and i8 %14510, 1
  %14512 = xor i8 %14511, 1
  %14513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14512, i8* %14513, align 1, !tbaa !2446
  %14514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14514, align 1, !tbaa !2447
  %14515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14515, align 1, !tbaa !2448
  %14516 = lshr i32 %14501, 31
  %14517 = trunc i32 %14516 to i8
  %14518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14517, i8* %14518, align 1, !tbaa !2449
  %14519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14506, i8* %14519, align 1, !tbaa !2450
  %14520 = load i64, i64* %RBP
  %14521 = sub i64 %14520, 48
  %14522 = load i64, i64* %PC
  %14523 = add i64 %14522, 4
  store i64 %14523, i64* %PC
  %14524 = inttoptr i64 %14521 to i64*
  %14525 = load i64, i64* %14524
  store i64 %14525, i64* %RCX, align 8, !tbaa !2428
  %14526 = load i64, i64* %RSI
  %14527 = load i64, i64* %RCX
  %14528 = add i64 %14527, 20
  %14529 = load i64, i64* %PC
  %14530 = add i64 %14529, 4
  store i64 %14530, i64* %PC
  %14531 = inttoptr i64 %14528 to i32*
  %14532 = load i32, i32* %14531
  %14533 = shl i64 %14526, 32
  %14534 = ashr exact i64 %14533, 32
  %14535 = sext i32 %14532 to i64
  %14536 = mul nsw i64 %14535, %14534
  %14537 = trunc i64 %14536 to i32
  %14538 = and i64 %14536, 4294967295
  store i64 %14538, i64* %RSI, align 8, !tbaa !2428
  %14539 = shl i64 %14536, 32
  %14540 = ashr exact i64 %14539, 32
  %14541 = icmp ne i64 %14540, %14536
  %14542 = zext i1 %14541 to i8
  %14543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14542, i8* %14543, align 1, !tbaa !2432
  %14544 = and i32 %14537, 255
  %14545 = call i32 @llvm.ctpop.i32(i32 %14544) #16
  %14546 = trunc i32 %14545 to i8
  %14547 = and i8 %14546, 1
  %14548 = xor i8 %14547, 1
  %14549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14548, i8* %14549, align 1, !tbaa !2446
  %14550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14550, align 1, !tbaa !2447
  %14551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14551, align 1, !tbaa !2448
  %14552 = lshr i32 %14537, 31
  %14553 = trunc i32 %14552 to i8
  %14554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14553, i8* %14554, align 1, !tbaa !2449
  %14555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14542, i8* %14555, align 1, !tbaa !2450
  %14556 = load i64, i64* %RDX
  %14557 = load i32, i32* %ESI
  %14558 = zext i32 %14557 to i64
  %14559 = load i64, i64* %PC
  %14560 = add i64 %14559, 2
  store i64 %14560, i64* %PC
  %14561 = trunc i64 %14556 to i32
  %14562 = add i32 %14557, %14561
  %14563 = zext i32 %14562 to i64
  store i64 %14563, i64* %RDX, align 8, !tbaa !2428
  %14564 = icmp ult i32 %14562, %14561
  %14565 = icmp ult i32 %14562, %14557
  %14566 = or i1 %14564, %14565
  %14567 = zext i1 %14566 to i8
  %14568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14567, i8* %14568, align 1, !tbaa !2432
  %14569 = and i32 %14562, 255
  %14570 = call i32 @llvm.ctpop.i32(i32 %14569) #16
  %14571 = trunc i32 %14570 to i8
  %14572 = and i8 %14571, 1
  %14573 = xor i8 %14572, 1
  %14574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14573, i8* %14574, align 1, !tbaa !2446
  %14575 = xor i64 %14558, %14556
  %14576 = trunc i64 %14575 to i32
  %14577 = xor i32 %14576, %14562
  %14578 = lshr i32 %14577, 4
  %14579 = trunc i32 %14578 to i8
  %14580 = and i8 %14579, 1
  %14581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14580, i8* %14581, align 1, !tbaa !2447
  %14582 = icmp eq i32 %14562, 0
  %14583 = zext i1 %14582 to i8
  %14584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14583, i8* %14584, align 1, !tbaa !2448
  %14585 = lshr i32 %14562, 31
  %14586 = trunc i32 %14585 to i8
  %14587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14586, i8* %14587, align 1, !tbaa !2449
  %14588 = lshr i32 %14561, 31
  %14589 = lshr i32 %14557, 31
  %14590 = xor i32 %14585, %14588
  %14591 = xor i32 %14585, %14589
  %14592 = add nuw nsw i32 %14590, %14591
  %14593 = icmp eq i32 %14592, 2
  %14594 = zext i1 %14593 to i8
  %14595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14594, i8* %14595, align 1, !tbaa !2450
  %14596 = load i64, i64* %RBP
  %14597 = sub i64 %14596, 72
  %14598 = load i64, i64* %PC
  %14599 = add i64 %14598, 3
  store i64 %14599, i64* %PC
  %14600 = inttoptr i64 %14597 to i32*
  %14601 = load i32, i32* %14600
  %14602 = zext i32 %14601 to i64
  store i64 %14602, i64* %RSI, align 8, !tbaa !2428
  %14603 = load i64, i64* %RBP
  %14604 = sub i64 %14603, 48
  %14605 = load i64, i64* %PC
  %14606 = add i64 %14605, 4
  store i64 %14606, i64* %PC
  %14607 = inttoptr i64 %14604 to i64*
  %14608 = load i64, i64* %14607
  store i64 %14608, i64* %RCX, align 8, !tbaa !2428
  %14609 = load i64, i64* %RSI
  %14610 = load i64, i64* %RCX
  %14611 = add i64 %14610, 20
  %14612 = load i64, i64* %PC
  %14613 = add i64 %14612, 4
  store i64 %14613, i64* %PC
  %14614 = inttoptr i64 %14611 to i32*
  %14615 = load i32, i32* %14614
  %14616 = shl i64 %14609, 32
  %14617 = ashr exact i64 %14616, 32
  %14618 = sext i32 %14615 to i64
  %14619 = mul nsw i64 %14618, %14617
  %14620 = trunc i64 %14619 to i32
  %14621 = and i64 %14619, 4294967295
  store i64 %14621, i64* %RSI, align 8, !tbaa !2428
  %14622 = shl i64 %14619, 32
  %14623 = ashr exact i64 %14622, 32
  %14624 = icmp ne i64 %14623, %14619
  %14625 = zext i1 %14624 to i8
  %14626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14625, i8* %14626, align 1, !tbaa !2432
  %14627 = and i32 %14620, 255
  %14628 = call i32 @llvm.ctpop.i32(i32 %14627) #16
  %14629 = trunc i32 %14628 to i8
  %14630 = and i8 %14629, 1
  %14631 = xor i8 %14630, 1
  %14632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14631, i8* %14632, align 1, !tbaa !2446
  %14633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14633, align 1, !tbaa !2447
  %14634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14634, align 1, !tbaa !2448
  %14635 = lshr i32 %14620, 31
  %14636 = trunc i32 %14635 to i8
  %14637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14636, i8* %14637, align 1, !tbaa !2449
  %14638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14625, i8* %14638, align 1, !tbaa !2450
  %14639 = load i64, i64* %RDX
  %14640 = load i32, i32* %ESI
  %14641 = zext i32 %14640 to i64
  %14642 = load i64, i64* %PC
  %14643 = add i64 %14642, 2
  store i64 %14643, i64* %PC
  %14644 = trunc i64 %14639 to i32
  %14645 = add i32 %14640, %14644
  %14646 = zext i32 %14645 to i64
  store i64 %14646, i64* %RDX, align 8, !tbaa !2428
  %14647 = icmp ult i32 %14645, %14644
  %14648 = icmp ult i32 %14645, %14640
  %14649 = or i1 %14647, %14648
  %14650 = zext i1 %14649 to i8
  %14651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14650, i8* %14651, align 1, !tbaa !2432
  %14652 = and i32 %14645, 255
  %14653 = call i32 @llvm.ctpop.i32(i32 %14652) #16
  %14654 = trunc i32 %14653 to i8
  %14655 = and i8 %14654, 1
  %14656 = xor i8 %14655, 1
  %14657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14656, i8* %14657, align 1, !tbaa !2446
  %14658 = xor i64 %14641, %14639
  %14659 = trunc i64 %14658 to i32
  %14660 = xor i32 %14659, %14645
  %14661 = lshr i32 %14660, 4
  %14662 = trunc i32 %14661 to i8
  %14663 = and i8 %14662, 1
  %14664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14663, i8* %14664, align 1, !tbaa !2447
  %14665 = icmp eq i32 %14645, 0
  %14666 = zext i1 %14665 to i8
  %14667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14666, i8* %14667, align 1, !tbaa !2448
  %14668 = lshr i32 %14645, 31
  %14669 = trunc i32 %14668 to i8
  %14670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14669, i8* %14670, align 1, !tbaa !2449
  %14671 = lshr i32 %14644, 31
  %14672 = lshr i32 %14640, 31
  %14673 = xor i32 %14668, %14671
  %14674 = xor i32 %14668, %14672
  %14675 = add nuw nsw i32 %14673, %14674
  %14676 = icmp eq i32 %14675, 2
  %14677 = zext i1 %14676 to i8
  %14678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14677, i8* %14678, align 1, !tbaa !2450
  %14679 = load i64, i64* %RDX
  %14680 = load i64, i64* %RBP
  %14681 = sub i64 %14680, 76
  %14682 = load i64, i64* %PC
  %14683 = add i64 %14682, 3
  store i64 %14683, i64* %PC
  %14684 = trunc i64 %14679 to i32
  %14685 = inttoptr i64 %14681 to i32*
  %14686 = load i32, i32* %14685
  %14687 = add i32 %14686, %14684
  %14688 = zext i32 %14687 to i64
  store i64 %14688, i64* %RDX, align 8, !tbaa !2428
  %14689 = icmp ult i32 %14687, %14684
  %14690 = icmp ult i32 %14687, %14686
  %14691 = or i1 %14689, %14690
  %14692 = zext i1 %14691 to i8
  %14693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14692, i8* %14693, align 1, !tbaa !2432
  %14694 = and i32 %14687, 255
  %14695 = call i32 @llvm.ctpop.i32(i32 %14694) #16
  %14696 = trunc i32 %14695 to i8
  %14697 = and i8 %14696, 1
  %14698 = xor i8 %14697, 1
  %14699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14698, i8* %14699, align 1, !tbaa !2446
  %14700 = xor i32 %14686, %14684
  %14701 = xor i32 %14700, %14687
  %14702 = lshr i32 %14701, 4
  %14703 = trunc i32 %14702 to i8
  %14704 = and i8 %14703, 1
  %14705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14704, i8* %14705, align 1, !tbaa !2447
  %14706 = icmp eq i32 %14687, 0
  %14707 = zext i1 %14706 to i8
  %14708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14707, i8* %14708, align 1, !tbaa !2448
  %14709 = lshr i32 %14687, 31
  %14710 = trunc i32 %14709 to i8
  %14711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14710, i8* %14711, align 1, !tbaa !2449
  %14712 = lshr i32 %14684, 31
  %14713 = lshr i32 %14686, 31
  %14714 = xor i32 %14709, %14712
  %14715 = xor i32 %14709, %14713
  %14716 = add nuw nsw i32 %14714, %14715
  %14717 = icmp eq i32 %14716, 2
  %14718 = zext i1 %14717 to i8
  %14719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14718, i8* %14719, align 1, !tbaa !2450
  %14720 = load i32, i32* %EDX
  %14721 = zext i32 %14720 to i64
  %14722 = load i64, i64* %PC
  %14723 = add i64 %14722, 3
  store i64 %14723, i64* %PC
  %14724 = shl i64 %14721, 32
  %14725 = ashr exact i64 %14724, 32
  store i64 %14725, i64* %RCX, align 8, !tbaa !2428
  %14726 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14728 = load i64, i64* %RAX
  %14729 = load i64, i64* %RCX
  %14730 = mul i64 %14729, 4
  %14731 = add i64 %14730, %14728
  %14732 = load i64, i64* %PC
  %14733 = add i64 %14732, 5
  store i64 %14733, i64* %PC
  %14734 = bitcast i8* %14727 to <2 x float>*
  %14735 = load <2 x float>, <2 x float>* %14734, align 1
  %14736 = getelementptr inbounds i8, i8* %14727, i64 8
  %14737 = bitcast i8* %14736 to <2 x i32>*
  %14738 = load <2 x i32>, <2 x i32>* %14737, align 1
  %14739 = inttoptr i64 %14731 to float*
  %14740 = load float, float* %14739
  %14741 = extractelement <2 x float> %14735, i32 0
  %14742 = fmul float %14741, %14740
  %14743 = bitcast i8* %14726 to float*
  store float %14742, float* %14743, align 1, !tbaa !2452
  %14744 = bitcast <2 x float> %14735 to <2 x i32>
  %14745 = extractelement <2 x i32> %14744, i32 1
  %14746 = getelementptr inbounds i8, i8* %14726, i64 4
  %14747 = bitcast i8* %14746 to i32*
  store i32 %14745, i32* %14747, align 1, !tbaa !2452
  %14748 = extractelement <2 x i32> %14738, i32 0
  %14749 = getelementptr inbounds i8, i8* %14726, i64 8
  %14750 = bitcast i8* %14749 to i32*
  store i32 %14748, i32* %14750, align 1, !tbaa !2452
  %14751 = extractelement <2 x i32> %14738, i32 1
  %14752 = getelementptr inbounds i8, i8* %14726, i64 12
  %14753 = bitcast i8* %14752 to i32*
  store i32 %14751, i32* %14753, align 1, !tbaa !2452
  %14754 = load i64, i64* %RBP
  %14755 = sub i64 %14754, 104
  %14756 = bitcast %union.vec128_t* %XMM0 to i8*
  %14757 = load i64, i64* %PC
  %14758 = add i64 %14757, 5
  store i64 %14758, i64* %PC
  %14759 = bitcast i8* %14756 to <2 x float>*
  %14760 = load <2 x float>, <2 x float>* %14759, align 1
  %14761 = extractelement <2 x float> %14760, i32 0
  %14762 = inttoptr i64 %14755 to float*
  store float %14761, float* %14762
  %14763 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14764 = load i64, i64* %RBP
  %14765 = sub i64 %14764, 104
  %14766 = load i64, i64* %PC
  %14767 = add i64 %14766, 5
  store i64 %14767, i64* %PC
  %14768 = inttoptr i64 %14765 to float*
  %14769 = load float, float* %14768
  %14770 = bitcast i8* %14763 to float*
  store float %14769, float* %14770, align 1, !tbaa !2452
  %14771 = getelementptr inbounds i8, i8* %14763, i64 4
  %14772 = bitcast i8* %14771 to float*
  store float 0.000000e+00, float* %14772, align 1, !tbaa !2452
  %14773 = getelementptr inbounds i8, i8* %14763, i64 8
  %14774 = bitcast i8* %14773 to float*
  store float 0.000000e+00, float* %14774, align 1, !tbaa !2452
  %14775 = getelementptr inbounds i8, i8* %14763, i64 12
  %14776 = bitcast i8* %14775 to float*
  store float 0.000000e+00, float* %14776, align 1, !tbaa !2452
  %14777 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14779 = load i64, i64* %RBP
  %14780 = sub i64 %14779, 104
  %14781 = load i64, i64* %PC
  %14782 = add i64 %14781, 5
  store i64 %14782, i64* %PC
  %14783 = bitcast i8* %14778 to <2 x float>*
  %14784 = load <2 x float>, <2 x float>* %14783, align 1
  %14785 = getelementptr inbounds i8, i8* %14778, i64 8
  %14786 = bitcast i8* %14785 to <2 x i32>*
  %14787 = load <2 x i32>, <2 x i32>* %14786, align 1
  %14788 = inttoptr i64 %14780 to float*
  %14789 = load float, float* %14788
  %14790 = extractelement <2 x float> %14784, i32 0
  %14791 = fmul float %14790, %14789
  %14792 = bitcast i8* %14777 to float*
  store float %14791, float* %14792, align 1, !tbaa !2452
  %14793 = bitcast <2 x float> %14784 to <2 x i32>
  %14794 = extractelement <2 x i32> %14793, i32 1
  %14795 = getelementptr inbounds i8, i8* %14777, i64 4
  %14796 = bitcast i8* %14795 to i32*
  store i32 %14794, i32* %14796, align 1, !tbaa !2452
  %14797 = extractelement <2 x i32> %14787, i32 0
  %14798 = getelementptr inbounds i8, i8* %14777, i64 8
  %14799 = bitcast i8* %14798 to i32*
  store i32 %14797, i32* %14799, align 1, !tbaa !2452
  %14800 = extractelement <2 x i32> %14787, i32 1
  %14801 = getelementptr inbounds i8, i8* %14777, i64 12
  %14802 = bitcast i8* %14801 to i32*
  store i32 %14800, i32* %14802, align 1, !tbaa !2452
  %14803 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14804 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14805 = load i64, i64* %RBP
  %14806 = sub i64 %14805, 96
  %14807 = load i64, i64* %PC
  %14808 = add i64 %14807, 5
  store i64 %14808, i64* %PC
  %14809 = bitcast i8* %14804 to <2 x float>*
  %14810 = load <2 x float>, <2 x float>* %14809, align 1
  %14811 = getelementptr inbounds i8, i8* %14804, i64 8
  %14812 = bitcast i8* %14811 to <2 x i32>*
  %14813 = load <2 x i32>, <2 x i32>* %14812, align 1
  %14814 = inttoptr i64 %14806 to float*
  %14815 = load float, float* %14814
  %14816 = extractelement <2 x float> %14810, i32 0
  %14817 = fadd float %14816, %14815
  %14818 = bitcast i8* %14803 to float*
  store float %14817, float* %14818, align 1, !tbaa !2452
  %14819 = bitcast <2 x float> %14810 to <2 x i32>
  %14820 = extractelement <2 x i32> %14819, i32 1
  %14821 = getelementptr inbounds i8, i8* %14803, i64 4
  %14822 = bitcast i8* %14821 to i32*
  store i32 %14820, i32* %14822, align 1, !tbaa !2452
  %14823 = extractelement <2 x i32> %14813, i32 0
  %14824 = getelementptr inbounds i8, i8* %14803, i64 8
  %14825 = bitcast i8* %14824 to i32*
  store i32 %14823, i32* %14825, align 1, !tbaa !2452
  %14826 = extractelement <2 x i32> %14813, i32 1
  %14827 = getelementptr inbounds i8, i8* %14803, i64 12
  %14828 = bitcast i8* %14827 to i32*
  store i32 %14826, i32* %14828, align 1, !tbaa !2452
  %14829 = load i64, i64* %RBP
  %14830 = sub i64 %14829, 96
  %14831 = bitcast %union.vec128_t* %XMM0 to i8*
  %14832 = load i64, i64* %PC
  %14833 = add i64 %14832, 5
  store i64 %14833, i64* %PC
  %14834 = bitcast i8* %14831 to <2 x float>*
  %14835 = load <2 x float>, <2 x float>* %14834, align 1
  %14836 = extractelement <2 x float> %14835, i32 0
  %14837 = inttoptr i64 %14830 to float*
  store float %14836, float* %14837
  %14838 = load i64, i64* %RBP
  %14839 = sub i64 %14838, 40
  %14840 = load i64, i64* %PC
  %14841 = add i64 %14840, 4
  store i64 %14841, i64* %PC
  %14842 = inttoptr i64 %14839 to i64*
  %14843 = load i64, i64* %14842
  store i64 %14843, i64* %RAX, align 8, !tbaa !2428
  %14844 = load i64, i64* %RAX
  %14845 = load i64, i64* %PC
  %14846 = add i64 %14845, 3
  store i64 %14846, i64* %PC
  %14847 = inttoptr i64 %14844 to i64*
  %14848 = load i64, i64* %14847
  store i64 %14848, i64* %RAX, align 8, !tbaa !2428
  %14849 = load i64, i64* %RBP
  %14850 = sub i64 %14849, 40
  %14851 = load i64, i64* %PC
  %14852 = add i64 %14851, 4
  store i64 %14852, i64* %PC
  %14853 = inttoptr i64 %14850 to i64*
  %14854 = load i64, i64* %14853
  store i64 %14854, i64* %RCX, align 8, !tbaa !2428
  %14855 = load i64, i64* %RCX
  %14856 = add i64 %14855, 12
  %14857 = load i64, i64* %PC
  %14858 = add i64 %14857, 4
  store i64 %14858, i64* %PC
  %14859 = inttoptr i64 %14856 to i32*
  %14860 = load i32, i32* %14859
  %14861 = sext i32 %14860 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14862, align 1, !tbaa !2432
  %14863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14863, align 1, !tbaa !2446
  %14864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14864, align 1, !tbaa !2447
  %14865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14865, align 1, !tbaa !2448
  %14866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14866, align 1, !tbaa !2449
  %14867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14867, align 1, !tbaa !2450
  %14868 = load i64, i64* %RBP
  %14869 = sub i64 %14868, 40
  %14870 = load i64, i64* %PC
  %14871 = add i64 %14870, 4
  store i64 %14871, i64* %PC
  %14872 = inttoptr i64 %14869 to i64*
  %14873 = load i64, i64* %14872
  store i64 %14873, i64* %RCX, align 8, !tbaa !2428
  %14874 = load i64, i64* %RDX
  %14875 = load i64, i64* %RCX
  %14876 = add i64 %14875, 16
  %14877 = load i64, i64* %PC
  %14878 = add i64 %14877, 4
  store i64 %14878, i64* %PC
  %14879 = inttoptr i64 %14876 to i32*
  %14880 = load i32, i32* %14879
  %14881 = shl i64 %14874, 32
  %14882 = ashr exact i64 %14881, 32
  %14883 = sext i32 %14880 to i64
  %14884 = mul nsw i64 %14883, %14882
  %14885 = trunc i64 %14884 to i32
  %14886 = and i64 %14884, 4294967295
  store i64 %14886, i64* %RDX, align 8, !tbaa !2428
  %14887 = shl i64 %14884, 32
  %14888 = ashr exact i64 %14887, 32
  %14889 = icmp ne i64 %14888, %14884
  %14890 = zext i1 %14889 to i8
  %14891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14890, i8* %14891, align 1, !tbaa !2432
  %14892 = and i32 %14885, 255
  %14893 = call i32 @llvm.ctpop.i32(i32 %14892) #16
  %14894 = trunc i32 %14893 to i8
  %14895 = and i8 %14894, 1
  %14896 = xor i8 %14895, 1
  %14897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14896, i8* %14897, align 1, !tbaa !2446
  %14898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14898, align 1, !tbaa !2447
  %14899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14899, align 1, !tbaa !2448
  %14900 = lshr i32 %14885, 31
  %14901 = trunc i32 %14900 to i8
  %14902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14901, i8* %14902, align 1, !tbaa !2449
  %14903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14890, i8* %14903, align 1, !tbaa !2450
  %14904 = load i64, i64* %RBP
  %14905 = sub i64 %14904, 40
  %14906 = load i64, i64* %PC
  %14907 = add i64 %14906, 4
  store i64 %14907, i64* %PC
  %14908 = inttoptr i64 %14905 to i64*
  %14909 = load i64, i64* %14908
  store i64 %14909, i64* %RCX, align 8, !tbaa !2428
  %14910 = load i64, i64* %RDX
  %14911 = load i64, i64* %RCX
  %14912 = add i64 %14911, 20
  %14913 = load i64, i64* %PC
  %14914 = add i64 %14913, 4
  store i64 %14914, i64* %PC
  %14915 = inttoptr i64 %14912 to i32*
  %14916 = load i32, i32* %14915
  %14917 = shl i64 %14910, 32
  %14918 = ashr exact i64 %14917, 32
  %14919 = sext i32 %14916 to i64
  %14920 = mul nsw i64 %14919, %14918
  %14921 = trunc i64 %14920 to i32
  %14922 = and i64 %14920, 4294967295
  store i64 %14922, i64* %RDX, align 8, !tbaa !2428
  %14923 = shl i64 %14920, 32
  %14924 = ashr exact i64 %14923, 32
  %14925 = icmp ne i64 %14924, %14920
  %14926 = zext i1 %14925 to i8
  %14927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14926, i8* %14927, align 1, !tbaa !2432
  %14928 = and i32 %14921, 255
  %14929 = call i32 @llvm.ctpop.i32(i32 %14928) #16
  %14930 = trunc i32 %14929 to i8
  %14931 = and i8 %14930, 1
  %14932 = xor i8 %14931, 1
  %14933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14932, i8* %14933, align 1, !tbaa !2446
  %14934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14934, align 1, !tbaa !2447
  %14935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14935, align 1, !tbaa !2448
  %14936 = lshr i32 %14921, 31
  %14937 = trunc i32 %14936 to i8
  %14938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14937, i8* %14938, align 1, !tbaa !2449
  %14939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14926, i8* %14939, align 1, !tbaa !2450
  %14940 = load i64, i64* %RBP
  %14941 = sub i64 %14940, 68
  %14942 = load i64, i64* %PC
  %14943 = add i64 %14942, 3
  store i64 %14943, i64* %PC
  %14944 = inttoptr i64 %14941 to i32*
  %14945 = load i32, i32* %14944
  %14946 = zext i32 %14945 to i64
  store i64 %14946, i64* %RSI, align 8, !tbaa !2428
  %14947 = load i64, i64* %RBP
  %14948 = sub i64 %14947, 40
  %14949 = load i64, i64* %PC
  %14950 = add i64 %14949, 4
  store i64 %14950, i64* %PC
  %14951 = inttoptr i64 %14948 to i64*
  %14952 = load i64, i64* %14951
  store i64 %14952, i64* %RCX, align 8, !tbaa !2428
  %14953 = load i64, i64* %RSI
  %14954 = load i64, i64* %RCX
  %14955 = add i64 %14954, 16
  %14956 = load i64, i64* %PC
  %14957 = add i64 %14956, 4
  store i64 %14957, i64* %PC
  %14958 = inttoptr i64 %14955 to i32*
  %14959 = load i32, i32* %14958
  %14960 = shl i64 %14953, 32
  %14961 = ashr exact i64 %14960, 32
  %14962 = sext i32 %14959 to i64
  %14963 = mul nsw i64 %14962, %14961
  %14964 = trunc i64 %14963 to i32
  %14965 = and i64 %14963, 4294967295
  store i64 %14965, i64* %RSI, align 8, !tbaa !2428
  %14966 = shl i64 %14963, 32
  %14967 = ashr exact i64 %14966, 32
  %14968 = icmp ne i64 %14967, %14963
  %14969 = zext i1 %14968 to i8
  %14970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14969, i8* %14970, align 1, !tbaa !2432
  %14971 = and i32 %14964, 255
  %14972 = call i32 @llvm.ctpop.i32(i32 %14971) #16
  %14973 = trunc i32 %14972 to i8
  %14974 = and i8 %14973, 1
  %14975 = xor i8 %14974, 1
  %14976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14975, i8* %14976, align 1, !tbaa !2446
  %14977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14977, align 1, !tbaa !2447
  %14978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14978, align 1, !tbaa !2448
  %14979 = lshr i32 %14964, 31
  %14980 = trunc i32 %14979 to i8
  %14981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14980, i8* %14981, align 1, !tbaa !2449
  %14982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14969, i8* %14982, align 1, !tbaa !2450
  %14983 = load i64, i64* %RBP
  %14984 = sub i64 %14983, 40
  %14985 = load i64, i64* %PC
  %14986 = add i64 %14985, 4
  store i64 %14986, i64* %PC
  %14987 = inttoptr i64 %14984 to i64*
  %14988 = load i64, i64* %14987
  store i64 %14988, i64* %RCX, align 8, !tbaa !2428
  %14989 = load i64, i64* %RSI
  %14990 = load i64, i64* %RCX
  %14991 = add i64 %14990, 20
  %14992 = load i64, i64* %PC
  %14993 = add i64 %14992, 4
  store i64 %14993, i64* %PC
  %14994 = inttoptr i64 %14991 to i32*
  %14995 = load i32, i32* %14994
  %14996 = shl i64 %14989, 32
  %14997 = ashr exact i64 %14996, 32
  %14998 = sext i32 %14995 to i64
  %14999 = mul nsw i64 %14998, %14997
  %15000 = trunc i64 %14999 to i32
  %15001 = and i64 %14999, 4294967295
  store i64 %15001, i64* %RSI, align 8, !tbaa !2428
  %15002 = shl i64 %14999, 32
  %15003 = ashr exact i64 %15002, 32
  %15004 = icmp ne i64 %15003, %14999
  %15005 = zext i1 %15004 to i8
  %15006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15005, i8* %15006, align 1, !tbaa !2432
  %15007 = and i32 %15000, 255
  %15008 = call i32 @llvm.ctpop.i32(i32 %15007) #16
  %15009 = trunc i32 %15008 to i8
  %15010 = and i8 %15009, 1
  %15011 = xor i8 %15010, 1
  %15012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15011, i8* %15012, align 1, !tbaa !2446
  %15013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15013, align 1, !tbaa !2447
  %15014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15014, align 1, !tbaa !2448
  %15015 = lshr i32 %15000, 31
  %15016 = trunc i32 %15015 to i8
  %15017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15016, i8* %15017, align 1, !tbaa !2449
  %15018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15005, i8* %15018, align 1, !tbaa !2450
  %15019 = load i64, i64* %RDX
  %15020 = load i32, i32* %ESI
  %15021 = zext i32 %15020 to i64
  %15022 = load i64, i64* %PC
  %15023 = add i64 %15022, 2
  store i64 %15023, i64* %PC
  %15024 = trunc i64 %15019 to i32
  %15025 = add i32 %15020, %15024
  %15026 = zext i32 %15025 to i64
  store i64 %15026, i64* %RDX, align 8, !tbaa !2428
  %15027 = icmp ult i32 %15025, %15024
  %15028 = icmp ult i32 %15025, %15020
  %15029 = or i1 %15027, %15028
  %15030 = zext i1 %15029 to i8
  %15031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15030, i8* %15031, align 1, !tbaa !2432
  %15032 = and i32 %15025, 255
  %15033 = call i32 @llvm.ctpop.i32(i32 %15032) #16
  %15034 = trunc i32 %15033 to i8
  %15035 = and i8 %15034, 1
  %15036 = xor i8 %15035, 1
  %15037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15036, i8* %15037, align 1, !tbaa !2446
  %15038 = xor i64 %15021, %15019
  %15039 = trunc i64 %15038 to i32
  %15040 = xor i32 %15039, %15025
  %15041 = lshr i32 %15040, 4
  %15042 = trunc i32 %15041 to i8
  %15043 = and i8 %15042, 1
  %15044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15043, i8* %15044, align 1, !tbaa !2447
  %15045 = icmp eq i32 %15025, 0
  %15046 = zext i1 %15045 to i8
  %15047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15046, i8* %15047, align 1, !tbaa !2448
  %15048 = lshr i32 %15025, 31
  %15049 = trunc i32 %15048 to i8
  %15050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15049, i8* %15050, align 1, !tbaa !2449
  %15051 = lshr i32 %15024, 31
  %15052 = lshr i32 %15020, 31
  %15053 = xor i32 %15048, %15051
  %15054 = xor i32 %15048, %15052
  %15055 = add nuw nsw i32 %15053, %15054
  %15056 = icmp eq i32 %15055, 2
  %15057 = zext i1 %15056 to i8
  %15058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15057, i8* %15058, align 1, !tbaa !2450
  %15059 = load i64, i64* %RBP
  %15060 = sub i64 %15059, 72
  %15061 = load i64, i64* %PC
  %15062 = add i64 %15061, 3
  store i64 %15062, i64* %PC
  %15063 = inttoptr i64 %15060 to i32*
  %15064 = load i32, i32* %15063
  %15065 = zext i32 %15064 to i64
  store i64 %15065, i64* %RSI, align 8, !tbaa !2428
  %15066 = load i64, i64* %RBP
  %15067 = sub i64 %15066, 40
  %15068 = load i64, i64* %PC
  %15069 = add i64 %15068, 4
  store i64 %15069, i64* %PC
  %15070 = inttoptr i64 %15067 to i64*
  %15071 = load i64, i64* %15070
  store i64 %15071, i64* %RCX, align 8, !tbaa !2428
  %15072 = load i64, i64* %RSI
  %15073 = load i64, i64* %RCX
  %15074 = add i64 %15073, 20
  %15075 = load i64, i64* %PC
  %15076 = add i64 %15075, 4
  store i64 %15076, i64* %PC
  %15077 = inttoptr i64 %15074 to i32*
  %15078 = load i32, i32* %15077
  %15079 = shl i64 %15072, 32
  %15080 = ashr exact i64 %15079, 32
  %15081 = sext i32 %15078 to i64
  %15082 = mul nsw i64 %15081, %15080
  %15083 = trunc i64 %15082 to i32
  %15084 = and i64 %15082, 4294967295
  store i64 %15084, i64* %RSI, align 8, !tbaa !2428
  %15085 = shl i64 %15082, 32
  %15086 = ashr exact i64 %15085, 32
  %15087 = icmp ne i64 %15086, %15082
  %15088 = zext i1 %15087 to i8
  %15089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15088, i8* %15089, align 1, !tbaa !2432
  %15090 = and i32 %15083, 255
  %15091 = call i32 @llvm.ctpop.i32(i32 %15090) #16
  %15092 = trunc i32 %15091 to i8
  %15093 = and i8 %15092, 1
  %15094 = xor i8 %15093, 1
  %15095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15094, i8* %15095, align 1, !tbaa !2446
  %15096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15096, align 1, !tbaa !2447
  %15097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15097, align 1, !tbaa !2448
  %15098 = lshr i32 %15083, 31
  %15099 = trunc i32 %15098 to i8
  %15100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15099, i8* %15100, align 1, !tbaa !2449
  %15101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15088, i8* %15101, align 1, !tbaa !2450
  %15102 = load i64, i64* %RDX
  %15103 = load i32, i32* %ESI
  %15104 = zext i32 %15103 to i64
  %15105 = load i64, i64* %PC
  %15106 = add i64 %15105, 2
  store i64 %15106, i64* %PC
  %15107 = trunc i64 %15102 to i32
  %15108 = add i32 %15103, %15107
  %15109 = zext i32 %15108 to i64
  store i64 %15109, i64* %RDX, align 8, !tbaa !2428
  %15110 = icmp ult i32 %15108, %15107
  %15111 = icmp ult i32 %15108, %15103
  %15112 = or i1 %15110, %15111
  %15113 = zext i1 %15112 to i8
  %15114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15113, i8* %15114, align 1, !tbaa !2432
  %15115 = and i32 %15108, 255
  %15116 = call i32 @llvm.ctpop.i32(i32 %15115) #16
  %15117 = trunc i32 %15116 to i8
  %15118 = and i8 %15117, 1
  %15119 = xor i8 %15118, 1
  %15120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15119, i8* %15120, align 1, !tbaa !2446
  %15121 = xor i64 %15104, %15102
  %15122 = trunc i64 %15121 to i32
  %15123 = xor i32 %15122, %15108
  %15124 = lshr i32 %15123, 4
  %15125 = trunc i32 %15124 to i8
  %15126 = and i8 %15125, 1
  %15127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15126, i8* %15127, align 1, !tbaa !2447
  %15128 = icmp eq i32 %15108, 0
  %15129 = zext i1 %15128 to i8
  %15130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15129, i8* %15130, align 1, !tbaa !2448
  %15131 = lshr i32 %15108, 31
  %15132 = trunc i32 %15131 to i8
  %15133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15132, i8* %15133, align 1, !tbaa !2449
  %15134 = lshr i32 %15107, 31
  %15135 = lshr i32 %15103, 31
  %15136 = xor i32 %15131, %15134
  %15137 = xor i32 %15131, %15135
  %15138 = add nuw nsw i32 %15136, %15137
  %15139 = icmp eq i32 %15138, 2
  %15140 = zext i1 %15139 to i8
  %15141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15140, i8* %15141, align 1, !tbaa !2450
  %15142 = load i64, i64* %RDX
  %15143 = load i64, i64* %RBP
  %15144 = sub i64 %15143, 76
  %15145 = load i64, i64* %PC
  %15146 = add i64 %15145, 3
  store i64 %15146, i64* %PC
  %15147 = trunc i64 %15142 to i32
  %15148 = inttoptr i64 %15144 to i32*
  %15149 = load i32, i32* %15148
  %15150 = add i32 %15149, %15147
  %15151 = zext i32 %15150 to i64
  store i64 %15151, i64* %RDX, align 8, !tbaa !2428
  %15152 = icmp ult i32 %15150, %15147
  %15153 = icmp ult i32 %15150, %15149
  %15154 = or i1 %15152, %15153
  %15155 = zext i1 %15154 to i8
  %15156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15155, i8* %15156, align 1, !tbaa !2432
  %15157 = and i32 %15150, 255
  %15158 = call i32 @llvm.ctpop.i32(i32 %15157) #16
  %15159 = trunc i32 %15158 to i8
  %15160 = and i8 %15159, 1
  %15161 = xor i8 %15160, 1
  %15162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15161, i8* %15162, align 1, !tbaa !2446
  %15163 = xor i32 %15149, %15147
  %15164 = xor i32 %15163, %15150
  %15165 = lshr i32 %15164, 4
  %15166 = trunc i32 %15165 to i8
  %15167 = and i8 %15166, 1
  %15168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15167, i8* %15168, align 1, !tbaa !2447
  %15169 = icmp eq i32 %15150, 0
  %15170 = zext i1 %15169 to i8
  %15171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15170, i8* %15171, align 1, !tbaa !2448
  %15172 = lshr i32 %15150, 31
  %15173 = trunc i32 %15172 to i8
  %15174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15173, i8* %15174, align 1, !tbaa !2449
  %15175 = lshr i32 %15147, 31
  %15176 = lshr i32 %15149, 31
  %15177 = xor i32 %15172, %15175
  %15178 = xor i32 %15172, %15176
  %15179 = add nuw nsw i32 %15177, %15178
  %15180 = icmp eq i32 %15179, 2
  %15181 = zext i1 %15180 to i8
  %15182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15181, i8* %15182, align 1, !tbaa !2450
  %15183 = load i32, i32* %EDX
  %15184 = zext i32 %15183 to i64
  %15185 = load i64, i64* %PC
  %15186 = add i64 %15185, 3
  store i64 %15186, i64* %PC
  %15187 = shl i64 %15184, 32
  %15188 = ashr exact i64 %15187, 32
  store i64 %15188, i64* %RCX, align 8, !tbaa !2428
  %15189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15190 = load i64, i64* %RAX
  %15191 = load i64, i64* %RCX
  %15192 = mul i64 %15191, 4
  %15193 = add i64 %15192, %15190
  %15194 = load i64, i64* %PC
  %15195 = add i64 %15194, 5
  store i64 %15195, i64* %PC
  %15196 = inttoptr i64 %15193 to float*
  %15197 = load float, float* %15196
  %15198 = bitcast i8* %15189 to float*
  store float %15197, float* %15198, align 1, !tbaa !2452
  %15199 = getelementptr inbounds i8, i8* %15189, i64 4
  %15200 = bitcast i8* %15199 to float*
  store float 0.000000e+00, float* %15200, align 1, !tbaa !2452
  %15201 = getelementptr inbounds i8, i8* %15189, i64 8
  %15202 = bitcast i8* %15201 to float*
  store float 0.000000e+00, float* %15202, align 1, !tbaa !2452
  %15203 = getelementptr inbounds i8, i8* %15189, i64 12
  %15204 = bitcast i8* %15203 to float*
  store float 0.000000e+00, float* %15204, align 1, !tbaa !2452
  %15205 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15206 = load i64, i64* %PC
  %15207 = add i64 %15206, 9
  store i64 %15207, i64* %PC
  %15208 = load float, float* bitcast (%omega_type* @omega to float*)
  %15209 = bitcast i8* %15205 to float*
  store float %15208, float* %15209, align 1, !tbaa !2452
  %15210 = getelementptr inbounds i8, i8* %15205, i64 4
  %15211 = bitcast i8* %15210 to float*
  store float 0.000000e+00, float* %15211, align 1, !tbaa !2452
  %15212 = getelementptr inbounds i8, i8* %15205, i64 8
  %15213 = bitcast i8* %15212 to float*
  store float 0.000000e+00, float* %15213, align 1, !tbaa !2452
  %15214 = getelementptr inbounds i8, i8* %15205, i64 12
  %15215 = bitcast i8* %15214 to float*
  store float 0.000000e+00, float* %15215, align 1, !tbaa !2452
  %15216 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15217 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15218 = load i64, i64* %RBP
  %15219 = sub i64 %15218, 104
  %15220 = load i64, i64* %PC
  %15221 = add i64 %15220, 5
  store i64 %15221, i64* %PC
  %15222 = bitcast i8* %15217 to <2 x float>*
  %15223 = load <2 x float>, <2 x float>* %15222, align 1
  %15224 = getelementptr inbounds i8, i8* %15217, i64 8
  %15225 = bitcast i8* %15224 to <2 x i32>*
  %15226 = load <2 x i32>, <2 x i32>* %15225, align 1
  %15227 = inttoptr i64 %15219 to float*
  %15228 = load float, float* %15227
  %15229 = extractelement <2 x float> %15223, i32 0
  %15230 = fmul float %15229, %15228
  %15231 = bitcast i8* %15216 to float*
  store float %15230, float* %15231, align 1, !tbaa !2452
  %15232 = bitcast <2 x float> %15223 to <2 x i32>
  %15233 = extractelement <2 x i32> %15232, i32 1
  %15234 = getelementptr inbounds i8, i8* %15216, i64 4
  %15235 = bitcast i8* %15234 to i32*
  store i32 %15233, i32* %15235, align 1, !tbaa !2452
  %15236 = extractelement <2 x i32> %15226, i32 0
  %15237 = getelementptr inbounds i8, i8* %15216, i64 8
  %15238 = bitcast i8* %15237 to i32*
  store i32 %15236, i32* %15238, align 1, !tbaa !2452
  %15239 = extractelement <2 x i32> %15226, i32 1
  %15240 = getelementptr inbounds i8, i8* %15216, i64 12
  %15241 = bitcast i8* %15240 to i32*
  store i32 %15239, i32* %15241, align 1, !tbaa !2452
  %15242 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15243 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15244 = bitcast %union.vec128_t* %XMM1 to i8*
  %15245 = load i64, i64* %PC
  %15246 = add i64 %15245, 4
  store i64 %15246, i64* %PC
  %15247 = bitcast i8* %15243 to <2 x float>*
  %15248 = load <2 x float>, <2 x float>* %15247, align 1
  %15249 = getelementptr inbounds i8, i8* %15243, i64 8
  %15250 = bitcast i8* %15249 to <2 x i32>*
  %15251 = load <2 x i32>, <2 x i32>* %15250, align 1
  %15252 = bitcast i8* %15244 to <2 x float>*
  %15253 = load <2 x float>, <2 x float>* %15252, align 1
  %15254 = extractelement <2 x float> %15248, i32 0
  %15255 = extractelement <2 x float> %15253, i32 0
  %15256 = fadd float %15254, %15255
  %15257 = bitcast i8* %15242 to float*
  store float %15256, float* %15257, align 1, !tbaa !2452
  %15258 = bitcast <2 x float> %15248 to <2 x i32>
  %15259 = extractelement <2 x i32> %15258, i32 1
  %15260 = getelementptr inbounds i8, i8* %15242, i64 4
  %15261 = bitcast i8* %15260 to i32*
  store i32 %15259, i32* %15261, align 1, !tbaa !2452
  %15262 = extractelement <2 x i32> %15251, i32 0
  %15263 = getelementptr inbounds i8, i8* %15242, i64 8
  %15264 = bitcast i8* %15263 to i32*
  store i32 %15262, i32* %15264, align 1, !tbaa !2452
  %15265 = extractelement <2 x i32> %15251, i32 1
  %15266 = getelementptr inbounds i8, i8* %15242, i64 12
  %15267 = bitcast i8* %15266 to i32*
  store i32 %15265, i32* %15267, align 1, !tbaa !2452
  %15268 = load i64, i64* %RBP
  %15269 = sub i64 %15268, 64
  %15270 = load i64, i64* %PC
  %15271 = add i64 %15270, 4
  store i64 %15271, i64* %PC
  %15272 = inttoptr i64 %15269 to i64*
  %15273 = load i64, i64* %15272
  store i64 %15273, i64* %RAX, align 8, !tbaa !2428
  %15274 = load i64, i64* %RAX
  %15275 = load i64, i64* %PC
  %15276 = add i64 %15275, 3
  store i64 %15276, i64* %PC
  %15277 = inttoptr i64 %15274 to i64*
  %15278 = load i64, i64* %15277
  store i64 %15278, i64* %RAX, align 8, !tbaa !2428
  %15279 = load i64, i64* %RBP
  %15280 = sub i64 %15279, 64
  %15281 = load i64, i64* %PC
  %15282 = add i64 %15281, 4
  store i64 %15282, i64* %PC
  %15283 = inttoptr i64 %15280 to i64*
  %15284 = load i64, i64* %15283
  store i64 %15284, i64* %RCX, align 8, !tbaa !2428
  %15285 = load i64, i64* %RCX
  %15286 = add i64 %15285, 12
  %15287 = load i64, i64* %PC
  %15288 = add i64 %15287, 4
  store i64 %15288, i64* %PC
  %15289 = inttoptr i64 %15286 to i32*
  %15290 = load i32, i32* %15289
  %15291 = sext i32 %15290 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %15292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15292, align 1, !tbaa !2432
  %15293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %15293, align 1, !tbaa !2446
  %15294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15294, align 1, !tbaa !2447
  %15295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15295, align 1, !tbaa !2448
  %15296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15296, align 1, !tbaa !2449
  %15297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15297, align 1, !tbaa !2450
  %15298 = load i64, i64* %RBP
  %15299 = sub i64 %15298, 64
  %15300 = load i64, i64* %PC
  %15301 = add i64 %15300, 4
  store i64 %15301, i64* %PC
  %15302 = inttoptr i64 %15299 to i64*
  %15303 = load i64, i64* %15302
  store i64 %15303, i64* %RCX, align 8, !tbaa !2428
  %15304 = load i64, i64* %RDX
  %15305 = load i64, i64* %RCX
  %15306 = add i64 %15305, 16
  %15307 = load i64, i64* %PC
  %15308 = add i64 %15307, 4
  store i64 %15308, i64* %PC
  %15309 = inttoptr i64 %15306 to i32*
  %15310 = load i32, i32* %15309
  %15311 = shl i64 %15304, 32
  %15312 = ashr exact i64 %15311, 32
  %15313 = sext i32 %15310 to i64
  %15314 = mul nsw i64 %15313, %15312
  %15315 = trunc i64 %15314 to i32
  %15316 = and i64 %15314, 4294967295
  store i64 %15316, i64* %RDX, align 8, !tbaa !2428
  %15317 = shl i64 %15314, 32
  %15318 = ashr exact i64 %15317, 32
  %15319 = icmp ne i64 %15318, %15314
  %15320 = zext i1 %15319 to i8
  %15321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15320, i8* %15321, align 1, !tbaa !2432
  %15322 = and i32 %15315, 255
  %15323 = call i32 @llvm.ctpop.i32(i32 %15322) #16
  %15324 = trunc i32 %15323 to i8
  %15325 = and i8 %15324, 1
  %15326 = xor i8 %15325, 1
  %15327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15326, i8* %15327, align 1, !tbaa !2446
  %15328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15328, align 1, !tbaa !2447
  %15329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15329, align 1, !tbaa !2448
  %15330 = lshr i32 %15315, 31
  %15331 = trunc i32 %15330 to i8
  %15332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15331, i8* %15332, align 1, !tbaa !2449
  %15333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15320, i8* %15333, align 1, !tbaa !2450
  %15334 = load i64, i64* %RBP
  %15335 = sub i64 %15334, 64
  %15336 = load i64, i64* %PC
  %15337 = add i64 %15336, 4
  store i64 %15337, i64* %PC
  %15338 = inttoptr i64 %15335 to i64*
  %15339 = load i64, i64* %15338
  store i64 %15339, i64* %RCX, align 8, !tbaa !2428
  %15340 = load i64, i64* %RDX
  %15341 = load i64, i64* %RCX
  %15342 = add i64 %15341, 20
  %15343 = load i64, i64* %PC
  %15344 = add i64 %15343, 4
  store i64 %15344, i64* %PC
  %15345 = inttoptr i64 %15342 to i32*
  %15346 = load i32, i32* %15345
  %15347 = shl i64 %15340, 32
  %15348 = ashr exact i64 %15347, 32
  %15349 = sext i32 %15346 to i64
  %15350 = mul nsw i64 %15349, %15348
  %15351 = trunc i64 %15350 to i32
  %15352 = and i64 %15350, 4294967295
  store i64 %15352, i64* %RDX, align 8, !tbaa !2428
  %15353 = shl i64 %15350, 32
  %15354 = ashr exact i64 %15353, 32
  %15355 = icmp ne i64 %15354, %15350
  %15356 = zext i1 %15355 to i8
  %15357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15356, i8* %15357, align 1, !tbaa !2432
  %15358 = and i32 %15351, 255
  %15359 = call i32 @llvm.ctpop.i32(i32 %15358) #16
  %15360 = trunc i32 %15359 to i8
  %15361 = and i8 %15360, 1
  %15362 = xor i8 %15361, 1
  %15363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15362, i8* %15363, align 1, !tbaa !2446
  %15364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15364, align 1, !tbaa !2447
  %15365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15365, align 1, !tbaa !2448
  %15366 = lshr i32 %15351, 31
  %15367 = trunc i32 %15366 to i8
  %15368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15367, i8* %15368, align 1, !tbaa !2449
  %15369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15356, i8* %15369, align 1, !tbaa !2450
  %15370 = load i64, i64* %RBP
  %15371 = sub i64 %15370, 68
  %15372 = load i64, i64* %PC
  %15373 = add i64 %15372, 3
  store i64 %15373, i64* %PC
  %15374 = inttoptr i64 %15371 to i32*
  %15375 = load i32, i32* %15374
  %15376 = zext i32 %15375 to i64
  store i64 %15376, i64* %RSI, align 8, !tbaa !2428
  %15377 = load i64, i64* %RBP
  %15378 = sub i64 %15377, 64
  %15379 = load i64, i64* %PC
  %15380 = add i64 %15379, 4
  store i64 %15380, i64* %PC
  %15381 = inttoptr i64 %15378 to i64*
  %15382 = load i64, i64* %15381
  store i64 %15382, i64* %RCX, align 8, !tbaa !2428
  %15383 = load i64, i64* %RSI
  %15384 = load i64, i64* %RCX
  %15385 = add i64 %15384, 16
  %15386 = load i64, i64* %PC
  %15387 = add i64 %15386, 4
  store i64 %15387, i64* %PC
  %15388 = inttoptr i64 %15385 to i32*
  %15389 = load i32, i32* %15388
  %15390 = shl i64 %15383, 32
  %15391 = ashr exact i64 %15390, 32
  %15392 = sext i32 %15389 to i64
  %15393 = mul nsw i64 %15392, %15391
  %15394 = trunc i64 %15393 to i32
  %15395 = and i64 %15393, 4294967295
  store i64 %15395, i64* %RSI, align 8, !tbaa !2428
  %15396 = shl i64 %15393, 32
  %15397 = ashr exact i64 %15396, 32
  %15398 = icmp ne i64 %15397, %15393
  %15399 = zext i1 %15398 to i8
  %15400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15399, i8* %15400, align 1, !tbaa !2432
  %15401 = and i32 %15394, 255
  %15402 = call i32 @llvm.ctpop.i32(i32 %15401) #16
  %15403 = trunc i32 %15402 to i8
  %15404 = and i8 %15403, 1
  %15405 = xor i8 %15404, 1
  %15406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15405, i8* %15406, align 1, !tbaa !2446
  %15407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15407, align 1, !tbaa !2447
  %15408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15408, align 1, !tbaa !2448
  %15409 = lshr i32 %15394, 31
  %15410 = trunc i32 %15409 to i8
  %15411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15410, i8* %15411, align 1, !tbaa !2449
  %15412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15399, i8* %15412, align 1, !tbaa !2450
  %15413 = load i64, i64* %RBP
  %15414 = sub i64 %15413, 64
  %15415 = load i64, i64* %PC
  %15416 = add i64 %15415, 4
  store i64 %15416, i64* %PC
  %15417 = inttoptr i64 %15414 to i64*
  %15418 = load i64, i64* %15417
  store i64 %15418, i64* %RCX, align 8, !tbaa !2428
  %15419 = load i64, i64* %RSI
  %15420 = load i64, i64* %RCX
  %15421 = add i64 %15420, 20
  %15422 = load i64, i64* %PC
  %15423 = add i64 %15422, 4
  store i64 %15423, i64* %PC
  %15424 = inttoptr i64 %15421 to i32*
  %15425 = load i32, i32* %15424
  %15426 = shl i64 %15419, 32
  %15427 = ashr exact i64 %15426, 32
  %15428 = sext i32 %15425 to i64
  %15429 = mul nsw i64 %15428, %15427
  %15430 = trunc i64 %15429 to i32
  %15431 = and i64 %15429, 4294967295
  store i64 %15431, i64* %RSI, align 8, !tbaa !2428
  %15432 = shl i64 %15429, 32
  %15433 = ashr exact i64 %15432, 32
  %15434 = icmp ne i64 %15433, %15429
  %15435 = zext i1 %15434 to i8
  %15436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15435, i8* %15436, align 1, !tbaa !2432
  %15437 = and i32 %15430, 255
  %15438 = call i32 @llvm.ctpop.i32(i32 %15437) #16
  %15439 = trunc i32 %15438 to i8
  %15440 = and i8 %15439, 1
  %15441 = xor i8 %15440, 1
  %15442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15441, i8* %15442, align 1, !tbaa !2446
  %15443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15443, align 1, !tbaa !2447
  %15444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15444, align 1, !tbaa !2448
  %15445 = lshr i32 %15430, 31
  %15446 = trunc i32 %15445 to i8
  %15447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15446, i8* %15447, align 1, !tbaa !2449
  %15448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15435, i8* %15448, align 1, !tbaa !2450
  %15449 = load i64, i64* %RDX
  %15450 = load i32, i32* %ESI
  %15451 = zext i32 %15450 to i64
  %15452 = load i64, i64* %PC
  %15453 = add i64 %15452, 2
  store i64 %15453, i64* %PC
  %15454 = trunc i64 %15449 to i32
  %15455 = add i32 %15450, %15454
  %15456 = zext i32 %15455 to i64
  store i64 %15456, i64* %RDX, align 8, !tbaa !2428
  %15457 = icmp ult i32 %15455, %15454
  %15458 = icmp ult i32 %15455, %15450
  %15459 = or i1 %15457, %15458
  %15460 = zext i1 %15459 to i8
  %15461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15460, i8* %15461, align 1, !tbaa !2432
  %15462 = and i32 %15455, 255
  %15463 = call i32 @llvm.ctpop.i32(i32 %15462) #16
  %15464 = trunc i32 %15463 to i8
  %15465 = and i8 %15464, 1
  %15466 = xor i8 %15465, 1
  %15467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15466, i8* %15467, align 1, !tbaa !2446
  %15468 = xor i64 %15451, %15449
  %15469 = trunc i64 %15468 to i32
  %15470 = xor i32 %15469, %15455
  %15471 = lshr i32 %15470, 4
  %15472 = trunc i32 %15471 to i8
  %15473 = and i8 %15472, 1
  %15474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15473, i8* %15474, align 1, !tbaa !2447
  %15475 = icmp eq i32 %15455, 0
  %15476 = zext i1 %15475 to i8
  %15477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15476, i8* %15477, align 1, !tbaa !2448
  %15478 = lshr i32 %15455, 31
  %15479 = trunc i32 %15478 to i8
  %15480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15479, i8* %15480, align 1, !tbaa !2449
  %15481 = lshr i32 %15454, 31
  %15482 = lshr i32 %15450, 31
  %15483 = xor i32 %15478, %15481
  %15484 = xor i32 %15478, %15482
  %15485 = add nuw nsw i32 %15483, %15484
  %15486 = icmp eq i32 %15485, 2
  %15487 = zext i1 %15486 to i8
  %15488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15487, i8* %15488, align 1, !tbaa !2450
  %15489 = load i64, i64* %RBP
  %15490 = sub i64 %15489, 72
  %15491 = load i64, i64* %PC
  %15492 = add i64 %15491, 3
  store i64 %15492, i64* %PC
  %15493 = inttoptr i64 %15490 to i32*
  %15494 = load i32, i32* %15493
  %15495 = zext i32 %15494 to i64
  store i64 %15495, i64* %RSI, align 8, !tbaa !2428
  %15496 = load i64, i64* %RBP
  %15497 = sub i64 %15496, 64
  %15498 = load i64, i64* %PC
  %15499 = add i64 %15498, 4
  store i64 %15499, i64* %PC
  %15500 = inttoptr i64 %15497 to i64*
  %15501 = load i64, i64* %15500
  store i64 %15501, i64* %RCX, align 8, !tbaa !2428
  %15502 = load i64, i64* %RSI
  %15503 = load i64, i64* %RCX
  %15504 = add i64 %15503, 20
  %15505 = load i64, i64* %PC
  %15506 = add i64 %15505, 4
  store i64 %15506, i64* %PC
  %15507 = inttoptr i64 %15504 to i32*
  %15508 = load i32, i32* %15507
  %15509 = shl i64 %15502, 32
  %15510 = ashr exact i64 %15509, 32
  %15511 = sext i32 %15508 to i64
  %15512 = mul nsw i64 %15511, %15510
  %15513 = trunc i64 %15512 to i32
  %15514 = and i64 %15512, 4294967295
  store i64 %15514, i64* %RSI, align 8, !tbaa !2428
  %15515 = shl i64 %15512, 32
  %15516 = ashr exact i64 %15515, 32
  %15517 = icmp ne i64 %15516, %15512
  %15518 = zext i1 %15517 to i8
  %15519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15518, i8* %15519, align 1, !tbaa !2432
  %15520 = and i32 %15513, 255
  %15521 = call i32 @llvm.ctpop.i32(i32 %15520) #16
  %15522 = trunc i32 %15521 to i8
  %15523 = and i8 %15522, 1
  %15524 = xor i8 %15523, 1
  %15525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15524, i8* %15525, align 1, !tbaa !2446
  %15526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15526, align 1, !tbaa !2447
  %15527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15527, align 1, !tbaa !2448
  %15528 = lshr i32 %15513, 31
  %15529 = trunc i32 %15528 to i8
  %15530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15529, i8* %15530, align 1, !tbaa !2449
  %15531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15518, i8* %15531, align 1, !tbaa !2450
  %15532 = load i64, i64* %RDX
  %15533 = load i32, i32* %ESI
  %15534 = zext i32 %15533 to i64
  %15535 = load i64, i64* %PC
  %15536 = add i64 %15535, 2
  store i64 %15536, i64* %PC
  %15537 = trunc i64 %15532 to i32
  %15538 = add i32 %15533, %15537
  %15539 = zext i32 %15538 to i64
  store i64 %15539, i64* %RDX, align 8, !tbaa !2428
  %15540 = icmp ult i32 %15538, %15537
  %15541 = icmp ult i32 %15538, %15533
  %15542 = or i1 %15540, %15541
  %15543 = zext i1 %15542 to i8
  %15544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15543, i8* %15544, align 1, !tbaa !2432
  %15545 = and i32 %15538, 255
  %15546 = call i32 @llvm.ctpop.i32(i32 %15545) #16
  %15547 = trunc i32 %15546 to i8
  %15548 = and i8 %15547, 1
  %15549 = xor i8 %15548, 1
  %15550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15549, i8* %15550, align 1, !tbaa !2446
  %15551 = xor i64 %15534, %15532
  %15552 = trunc i64 %15551 to i32
  %15553 = xor i32 %15552, %15538
  %15554 = lshr i32 %15553, 4
  %15555 = trunc i32 %15554 to i8
  %15556 = and i8 %15555, 1
  %15557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15556, i8* %15557, align 1, !tbaa !2447
  %15558 = icmp eq i32 %15538, 0
  %15559 = zext i1 %15558 to i8
  %15560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15559, i8* %15560, align 1, !tbaa !2448
  %15561 = lshr i32 %15538, 31
  %15562 = trunc i32 %15561 to i8
  %15563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15562, i8* %15563, align 1, !tbaa !2449
  %15564 = lshr i32 %15537, 31
  %15565 = lshr i32 %15533, 31
  %15566 = xor i32 %15561, %15564
  %15567 = xor i32 %15561, %15565
  %15568 = add nuw nsw i32 %15566, %15567
  %15569 = icmp eq i32 %15568, 2
  %15570 = zext i1 %15569 to i8
  %15571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15570, i8* %15571, align 1, !tbaa !2450
  %15572 = load i64, i64* %RDX
  %15573 = load i64, i64* %RBP
  %15574 = sub i64 %15573, 76
  %15575 = load i64, i64* %PC
  %15576 = add i64 %15575, 3
  store i64 %15576, i64* %PC
  %15577 = trunc i64 %15572 to i32
  %15578 = inttoptr i64 %15574 to i32*
  %15579 = load i32, i32* %15578
  %15580 = add i32 %15579, %15577
  %15581 = zext i32 %15580 to i64
  store i64 %15581, i64* %RDX, align 8, !tbaa !2428
  %15582 = icmp ult i32 %15580, %15577
  %15583 = icmp ult i32 %15580, %15579
  %15584 = or i1 %15582, %15583
  %15585 = zext i1 %15584 to i8
  %15586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15585, i8* %15586, align 1, !tbaa !2432
  %15587 = and i32 %15580, 255
  %15588 = call i32 @llvm.ctpop.i32(i32 %15587) #16
  %15589 = trunc i32 %15588 to i8
  %15590 = and i8 %15589, 1
  %15591 = xor i8 %15590, 1
  %15592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15591, i8* %15592, align 1, !tbaa !2446
  %15593 = xor i32 %15579, %15577
  %15594 = xor i32 %15593, %15580
  %15595 = lshr i32 %15594, 4
  %15596 = trunc i32 %15595 to i8
  %15597 = and i8 %15596, 1
  %15598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15597, i8* %15598, align 1, !tbaa !2447
  %15599 = icmp eq i32 %15580, 0
  %15600 = zext i1 %15599 to i8
  %15601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15600, i8* %15601, align 1, !tbaa !2448
  %15602 = lshr i32 %15580, 31
  %15603 = trunc i32 %15602 to i8
  %15604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15603, i8* %15604, align 1, !tbaa !2449
  %15605 = lshr i32 %15577, 31
  %15606 = lshr i32 %15579, 31
  %15607 = xor i32 %15602, %15605
  %15608 = xor i32 %15602, %15606
  %15609 = add nuw nsw i32 %15607, %15608
  %15610 = icmp eq i32 %15609, 2
  %15611 = zext i1 %15610 to i8
  %15612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15611, i8* %15612, align 1, !tbaa !2450
  %15613 = load i32, i32* %EDX
  %15614 = zext i32 %15613 to i64
  %15615 = load i64, i64* %PC
  %15616 = add i64 %15615, 3
  store i64 %15616, i64* %PC
  %15617 = shl i64 %15614, 32
  %15618 = ashr exact i64 %15617, 32
  store i64 %15618, i64* %RCX, align 8, !tbaa !2428
  %15619 = load i64, i64* %RAX
  %15620 = load i64, i64* %RCX
  %15621 = mul i64 %15620, 4
  %15622 = add i64 %15621, %15619
  %15623 = bitcast %union.vec128_t* %XMM0 to i8*
  %15624 = load i64, i64* %PC
  %15625 = add i64 %15624, 5
  store i64 %15625, i64* %PC
  %15626 = bitcast i8* %15623 to <2 x float>*
  %15627 = load <2 x float>, <2 x float>* %15626, align 1
  %15628 = extractelement <2 x float> %15627, i32 0
  %15629 = inttoptr i64 %15622 to float*
  store float %15628, float* %15629
  %15630 = load i64, i64* %RBP
  %15631 = sub i64 %15630, 76
  %15632 = load i64, i64* %PC
  %15633 = add i64 %15632, 3
  store i64 %15633, i64* %PC
  %15634 = inttoptr i64 %15631 to i32*
  %15635 = load i32, i32* %15634
  %15636 = zext i32 %15635 to i64
  store i64 %15636, i64* %RAX, align 8, !tbaa !2428
  %15637 = load i64, i64* %RAX
  %15638 = load i64, i64* %PC
  %15639 = add i64 %15638, 3
  store i64 %15639, i64* %PC
  %15640 = trunc i64 %15637 to i32
  %15641 = add i32 1, %15640
  %15642 = zext i32 %15641 to i64
  store i64 %15642, i64* %RAX, align 8, !tbaa !2428
  %15643 = icmp ult i32 %15641, %15640
  %15644 = icmp ult i32 %15641, 1
  %15645 = or i1 %15643, %15644
  %15646 = zext i1 %15645 to i8
  %15647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15646, i8* %15647, align 1, !tbaa !2432
  %15648 = and i32 %15641, 255
  %15649 = call i32 @llvm.ctpop.i32(i32 %15648) #16
  %15650 = trunc i32 %15649 to i8
  %15651 = and i8 %15650, 1
  %15652 = xor i8 %15651, 1
  %15653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15652, i8* %15653, align 1, !tbaa !2446
  %15654 = xor i64 1, %15637
  %15655 = trunc i64 %15654 to i32
  %15656 = xor i32 %15655, %15641
  %15657 = lshr i32 %15656, 4
  %15658 = trunc i32 %15657 to i8
  %15659 = and i8 %15658, 1
  %15660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15659, i8* %15660, align 1, !tbaa !2447
  %15661 = icmp eq i32 %15641, 0
  %15662 = zext i1 %15661 to i8
  %15663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15662, i8* %15663, align 1, !tbaa !2448
  %15664 = lshr i32 %15641, 31
  %15665 = trunc i32 %15664 to i8
  %15666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15665, i8* %15666, align 1, !tbaa !2449
  %15667 = lshr i32 %15640, 31
  %15668 = xor i32 %15664, %15667
  %15669 = add nuw nsw i32 %15668, %15664
  %15670 = icmp eq i32 %15669, 2
  %15671 = zext i1 %15670 to i8
  %15672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15671, i8* %15672, align 1, !tbaa !2450
  %15673 = load i64, i64* %RBP
  %15674 = sub i64 %15673, 76
  %15675 = load i32, i32* %EAX
  %15676 = zext i32 %15675 to i64
  %15677 = load i64, i64* %PC
  %15678 = add i64 %15677, 3
  store i64 %15678, i64* %PC
  %15679 = inttoptr i64 %15674 to i32*
  store i32 %15675, i32* %15679
  %15680 = load i64, i64* %PC
  %15681 = sub i64 %15680, 2748
  %15682 = load i64, i64* %PC
  %15683 = add i64 %15682, 5
  store i64 %15683, i64* %PC
  %15684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15681, i64* %15684, align 8, !tbaa !2428
  br label %block_400d9a

block_401888:                                     ; preds = %block_401881, %block_401973
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.6, %block_401881 ], [ %MEMORY.1, %block_401973 ]
  %15685 = load i64, i64* %RBP
  %15686 = sub i64 %15685, 68
  %15687 = load i64, i64* %PC
  %15688 = add i64 %15687, 3
  store i64 %15688, i64* %PC
  %15689 = inttoptr i64 %15686 to i32*
  %15690 = load i32, i32* %15689
  %15691 = zext i32 %15690 to i64
  store i64 %15691, i64* %RAX, align 8, !tbaa !2428
  %15692 = load i32, i32* %EAX
  %15693 = zext i32 %15692 to i64
  %15694 = load i64, i64* %RBP
  %15695 = sub i64 %15694, 84
  %15696 = load i64, i64* %PC
  %15697 = add i64 %15696, 3
  store i64 %15697, i64* %PC
  %15698 = inttoptr i64 %15695 to i32*
  %15699 = load i32, i32* %15698
  %15700 = sub i32 %15692, %15699
  %15701 = icmp ult i32 %15692, %15699
  %15702 = zext i1 %15701 to i8
  %15703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15702, i8* %15703, align 1, !tbaa !2432
  %15704 = and i32 %15700, 255
  %15705 = call i32 @llvm.ctpop.i32(i32 %15704) #16
  %15706 = trunc i32 %15705 to i8
  %15707 = and i8 %15706, 1
  %15708 = xor i8 %15707, 1
  %15709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15708, i8* %15709, align 1, !tbaa !2446
  %15710 = xor i32 %15699, %15692
  %15711 = xor i32 %15710, %15700
  %15712 = lshr i32 %15711, 4
  %15713 = trunc i32 %15712 to i8
  %15714 = and i8 %15713, 1
  %15715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15714, i8* %15715, align 1, !tbaa !2447
  %15716 = icmp eq i32 %15700, 0
  %15717 = zext i1 %15716 to i8
  %15718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15717, i8* %15718, align 1, !tbaa !2448
  %15719 = lshr i32 %15700, 31
  %15720 = trunc i32 %15719 to i8
  %15721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15720, i8* %15721, align 1, !tbaa !2449
  %15722 = lshr i32 %15692, 31
  %15723 = lshr i32 %15699, 31
  %15724 = xor i32 %15723, %15722
  %15725 = xor i32 %15719, %15722
  %15726 = add nuw nsw i32 %15725, %15724
  %15727 = icmp eq i32 %15726, 2
  %15728 = zext i1 %15727 to i8
  %15729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15728, i8* %15729, align 1, !tbaa !2450
  %15730 = load i64, i64* %PC
  %15731 = add i64 %15730, 248
  %15732 = load i64, i64* %PC
  %15733 = add i64 %15732, 6
  %15734 = load i64, i64* %PC
  %15735 = add i64 %15734, 6
  store i64 %15735, i64* %PC
  %15736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15737 = load i8, i8* %15736, align 1, !tbaa !2449
  %15738 = icmp ne i8 %15737, 0
  %15739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15740 = load i8, i8* %15739, align 1, !tbaa !2450
  %15741 = icmp ne i8 %15740, 0
  %15742 = xor i1 %15738, %15741
  %15743 = xor i1 %15742, true
  %15744 = zext i1 %15743 to i8
  store i8 %15744, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %15745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15746 = select i1 %15742, i64 %15733, i64 %15731
  store i64 %15746, i64* %15745, align 8, !tbaa !2428
  %15747 = load i8, i8* %BRANCH_TAKEN
  %15748 = icmp eq i8 %15747, 1
  br i1 %15748, label %block_401986, label %block_401894

block_400d87:                                     ; preds = %block_400d80, %block_40185b
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_400d80 ], [ %MEMORY.2, %block_40185b ]
  %15749 = load i64, i64* %RBP
  %15750 = sub i64 %15749, 72
  %15751 = load i64, i64* %PC
  %15752 = add i64 %15751, 3
  store i64 %15752, i64* %PC
  %15753 = inttoptr i64 %15750 to i32*
  %15754 = load i32, i32* %15753
  %15755 = zext i32 %15754 to i64
  store i64 %15755, i64* %RAX, align 8, !tbaa !2428
  %15756 = load i32, i32* %EAX
  %15757 = zext i32 %15756 to i64
  %15758 = load i64, i64* %RBP
  %15759 = sub i64 %15758, 88
  %15760 = load i64, i64* %PC
  %15761 = add i64 %15760, 3
  store i64 %15761, i64* %PC
  %15762 = inttoptr i64 %15759 to i32*
  %15763 = load i32, i32* %15762
  %15764 = sub i32 %15756, %15763
  %15765 = icmp ult i32 %15756, %15763
  %15766 = zext i1 %15765 to i8
  %15767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15766, i8* %15767, align 1, !tbaa !2432
  %15768 = and i32 %15764, 255
  %15769 = call i32 @llvm.ctpop.i32(i32 %15768) #16
  %15770 = trunc i32 %15769 to i8
  %15771 = and i8 %15770, 1
  %15772 = xor i8 %15771, 1
  %15773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15772, i8* %15773, align 1, !tbaa !2446
  %15774 = xor i32 %15763, %15756
  %15775 = xor i32 %15774, %15764
  %15776 = lshr i32 %15775, 4
  %15777 = trunc i32 %15776 to i8
  %15778 = and i8 %15777, 1
  %15779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15778, i8* %15779, align 1, !tbaa !2447
  %15780 = icmp eq i32 %15764, 0
  %15781 = zext i1 %15780 to i8
  %15782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15781, i8* %15782, align 1, !tbaa !2448
  %15783 = lshr i32 %15764, 31
  %15784 = trunc i32 %15783 to i8
  %15785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15784, i8* %15785, align 1, !tbaa !2449
  %15786 = lshr i32 %15756, 31
  %15787 = lshr i32 %15763, 31
  %15788 = xor i32 %15787, %15786
  %15789 = xor i32 %15783, %15786
  %15790 = add nuw nsw i32 %15789, %15788
  %15791 = icmp eq i32 %15790, 2
  %15792 = zext i1 %15791 to i8
  %15793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15792, i8* %15793, align 1, !tbaa !2450
  %15794 = load i64, i64* %PC
  %15795 = add i64 %15794, 2785
  %15796 = load i64, i64* %PC
  %15797 = add i64 %15796, 6
  %15798 = load i64, i64* %PC
  %15799 = add i64 %15798, 6
  store i64 %15799, i64* %PC
  %15800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15801 = load i8, i8* %15800, align 1, !tbaa !2449
  %15802 = icmp ne i8 %15801, 0
  %15803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15804 = load i8, i8* %15803, align 1, !tbaa !2450
  %15805 = icmp ne i8 %15804, 0
  %15806 = xor i1 %15802, %15805
  %15807 = xor i1 %15806, true
  %15808 = zext i1 %15807 to i8
  store i8 %15808, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %15809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15810 = select i1 %15806, i64 %15797, i64 %15795
  store i64 %15810, i64* %15809, align 8, !tbaa !2428
  %15811 = load i8, i8* %BRANCH_TAKEN
  %15812 = icmp eq i8 %15811, 1
  br i1 %15812, label %block_40186e, label %block_400d93

block_401881:                                     ; preds = %block_400d74
  %15813 = sub i64 %15945, 68
  %15814 = load i64, i64* %PC
  %15815 = add i64 %15814, 7
  store i64 %15815, i64* %PC
  %15816 = inttoptr i64 %15813 to i32*
  store i32 1, i32* %15816
  br label %block_401888

block_401986:                                     ; preds = %block_401888
  %15817 = load i64, i64* %PC
  %15818 = add i64 %15817, 5
  %15819 = load i64, i64* %PC
  %15820 = add i64 %15819, 5
  store i64 %15820, i64* %PC
  %15821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15818, i64* %15821, align 8, !tbaa !2428
  %15822 = load i64, i64* %RBP
  %15823 = sub i64 %15822, 80
  %15824 = load i64, i64* %PC
  %15825 = add i64 %15824, 3
  store i64 %15825, i64* %PC
  %15826 = inttoptr i64 %15823 to i32*
  %15827 = load i32, i32* %15826
  %15828 = zext i32 %15827 to i64
  store i64 %15828, i64* %RAX, align 8, !tbaa !2428
  %15829 = load i64, i64* %RAX
  %15830 = load i64, i64* %PC
  %15831 = add i64 %15830, 3
  store i64 %15831, i64* %PC
  %15832 = trunc i64 %15829 to i32
  %15833 = add i32 1, %15832
  %15834 = zext i32 %15833 to i64
  store i64 %15834, i64* %RAX, align 8, !tbaa !2428
  %15835 = icmp ult i32 %15833, %15832
  %15836 = icmp ult i32 %15833, 1
  %15837 = or i1 %15835, %15836
  %15838 = zext i1 %15837 to i8
  %15839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15838, i8* %15839, align 1, !tbaa !2432
  %15840 = and i32 %15833, 255
  %15841 = call i32 @llvm.ctpop.i32(i32 %15840) #16
  %15842 = trunc i32 %15841 to i8
  %15843 = and i8 %15842, 1
  %15844 = xor i8 %15843, 1
  %15845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15844, i8* %15845, align 1, !tbaa !2446
  %15846 = xor i64 1, %15829
  %15847 = trunc i64 %15846 to i32
  %15848 = xor i32 %15847, %15833
  %15849 = lshr i32 %15848, 4
  %15850 = trunc i32 %15849 to i8
  %15851 = and i8 %15850, 1
  %15852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15851, i8* %15852, align 1, !tbaa !2447
  %15853 = icmp eq i32 %15833, 0
  %15854 = zext i1 %15853 to i8
  %15855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15854, i8* %15855, align 1, !tbaa !2448
  %15856 = lshr i32 %15833, 31
  %15857 = trunc i32 %15856 to i8
  %15858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15857, i8* %15858, align 1, !tbaa !2449
  %15859 = lshr i32 %15832, 31
  %15860 = xor i32 %15856, %15859
  %15861 = add nuw nsw i32 %15860, %15856
  %15862 = icmp eq i32 %15861, 2
  %15863 = zext i1 %15862 to i8
  %15864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15863, i8* %15864, align 1, !tbaa !2450
  %15865 = load i64, i64* %RBP
  %15866 = sub i64 %15865, 80
  %15867 = load i32, i32* %EAX
  %15868 = zext i32 %15867 to i64
  %15869 = load i64, i64* %PC
  %15870 = add i64 %15869, 3
  store i64 %15870, i64* %PC
  %15871 = inttoptr i64 %15866 to i32*
  store i32 %15867, i32* %15871
  %15872 = load i64, i64* %PC
  %15873 = sub i64 %15872, 3131
  %15874 = load i64, i64* %PC
  %15875 = add i64 %15874, 5
  store i64 %15875, i64* %PC
  %15876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15873, i64* %15876, align 8, !tbaa !2428
  br label %block_400d59

block_400d80:                                     ; preds = %block_400d74
  %15877 = sub i64 %15945, 72
  %15878 = load i64, i64* %PC
  %15879 = add i64 %15878, 7
  store i64 %15879, i64* %PC
  %15880 = inttoptr i64 %15877 to i32*
  store i32 1, i32* %15880
  br label %block_400d87

block_400d74:                                     ; preds = %block_400d65, %block_40186e
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.3, %block_400d65 ], [ %MEMORY.5, %block_40186e ]
  %15881 = load i64, i64* %RBP
  %15882 = sub i64 %15881, 68
  %15883 = load i64, i64* %PC
  %15884 = add i64 %15883, 3
  store i64 %15884, i64* %PC
  %15885 = inttoptr i64 %15882 to i32*
  %15886 = load i32, i32* %15885
  %15887 = zext i32 %15886 to i64
  store i64 %15887, i64* %RAX, align 8, !tbaa !2428
  %15888 = load i32, i32* %EAX
  %15889 = zext i32 %15888 to i64
  %15890 = load i64, i64* %RBP
  %15891 = sub i64 %15890, 84
  %15892 = load i64, i64* %PC
  %15893 = add i64 %15892, 3
  store i64 %15893, i64* %PC
  %15894 = inttoptr i64 %15891 to i32*
  %15895 = load i32, i32* %15894
  %15896 = sub i32 %15888, %15895
  %15897 = icmp ult i32 %15888, %15895
  %15898 = zext i1 %15897 to i8
  %15899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15898, i8* %15899, align 1, !tbaa !2432
  %15900 = and i32 %15896, 255
  %15901 = call i32 @llvm.ctpop.i32(i32 %15900) #16
  %15902 = trunc i32 %15901 to i8
  %15903 = and i8 %15902, 1
  %15904 = xor i8 %15903, 1
  %15905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15904, i8* %15905, align 1, !tbaa !2446
  %15906 = xor i32 %15895, %15888
  %15907 = xor i32 %15906, %15896
  %15908 = lshr i32 %15907, 4
  %15909 = trunc i32 %15908 to i8
  %15910 = and i8 %15909, 1
  %15911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15910, i8* %15911, align 1, !tbaa !2447
  %15912 = icmp eq i32 %15896, 0
  %15913 = zext i1 %15912 to i8
  %15914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15913, i8* %15914, align 1, !tbaa !2448
  %15915 = lshr i32 %15896, 31
  %15916 = trunc i32 %15915 to i8
  %15917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15916, i8* %15917, align 1, !tbaa !2449
  %15918 = lshr i32 %15888, 31
  %15919 = lshr i32 %15895, 31
  %15920 = xor i32 %15919, %15918
  %15921 = xor i32 %15915, %15918
  %15922 = add nuw nsw i32 %15921, %15920
  %15923 = icmp eq i32 %15922, 2
  %15924 = zext i1 %15923 to i8
  %15925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15924, i8* %15925, align 1, !tbaa !2450
  %15926 = load i64, i64* %PC
  %15927 = add i64 %15926, 2823
  %15928 = load i64, i64* %PC
  %15929 = add i64 %15928, 6
  %15930 = load i64, i64* %PC
  %15931 = add i64 %15930, 6
  store i64 %15931, i64* %PC
  %15932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15933 = load i8, i8* %15932, align 1, !tbaa !2449
  %15934 = icmp ne i8 %15933, 0
  %15935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15936 = load i8, i8* %15935, align 1, !tbaa !2450
  %15937 = icmp ne i8 %15936, 0
  %15938 = xor i1 %15934, %15937
  %15939 = xor i1 %15938, true
  %15940 = zext i1 %15939 to i8
  store i8 %15940, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %15941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15942 = select i1 %15938, i64 %15929, i64 %15927
  store i64 %15942, i64* %15941, align 8, !tbaa !2428
  %15943 = load i8, i8* %BRANCH_TAKEN
  %15944 = icmp eq i8 %15943, 1
  %15945 = load i64, i64* %RBP
  br i1 %15944, label %block_401881, label %block_400d80
}

; Function Attrs: noinline
define %struct.Memory* @sub_400680_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400680:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400610_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019a0_clearMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4019a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2432
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2446
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2447
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2450
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 8
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %77, align 1, !tbaa !2432
  %78 = trunc i64 %76 to i32
  %79 = and i32 %78, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2446
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %76, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %76, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %76, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 21
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 6
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %105 = load i8, i8* %104, align 1, !tbaa !2448
  store i8 %105, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %107 = icmp ne i8 %105, 0
  %108 = select i1 %107, i64 %99, i64 %101
  store i64 %108, i64* %106, align 8, !tbaa !2428
  %109 = load i8, i8* %BRANCH_TAKEN
  %110 = icmp eq i8 %109, 1
  br i1 %110, label %block_4019c9, label %block_4019ba

block_4019ba:                                     ; preds = %block_4019a0
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RAX, align 8, !tbaa !2428
  %117 = load i64, i64* %RAX
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 3
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  %126 = sub i64 %125, 5252
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  store i64 %128, i64* %134
  store i64 %133, i64* %131, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %126, i64* %135, align 8, !tbaa !2428
  %136 = load i64, i64* %PC
  %137 = call %struct.Memory* @ext_603118_free(%struct.State* %0, i64 %136, %struct.Memory* %2)
  br label %block_4019c9

block_4019c9:                                     ; preds = %block_4019ba, %block_4019a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4019a0 ], [ %137, %block_4019ba ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 8
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 7
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  store i64 0, i64* %147
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 8
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX
  %155 = add i64 %154, 8
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 7
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i32*
  store i32 0, i32* %158
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX
  %166 = add i64 %165, 16
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 7
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i32*
  store i32 0, i32* %169
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 8
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = load i64, i64* %RAX
  %177 = add i64 %176, 12
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  store i32 0, i32* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 8
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RAX
  %188 = add i64 %187, 20
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 0, i32* %191
  %192 = load i64, i64* %RSP
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = add i64 16, %192
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  %196 = icmp ult i64 %195, %192
  %197 = icmp ult i64 %195, 16
  %198 = or i1 %196, %197
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %199, i8* %200, align 1, !tbaa !2432
  %201 = trunc i64 %195 to i32
  %202 = and i32 %201, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i64 16, %192
  %209 = xor i64 %208, %195
  %210 = lshr i64 %209, 4
  %211 = trunc i64 %210 to i8
  %212 = and i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %212, i8* %213, align 1, !tbaa !2447
  %214 = icmp eq i64 %195, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %215, i8* %216, align 1, !tbaa !2448
  %217 = lshr i64 %195, 63
  %218 = trunc i64 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %218, i8* %219, align 1, !tbaa !2449
  %220 = lshr i64 %192, 63
  %221 = xor i64 %217, %220
  %222 = add nuw nsw i64 %221, %217
  %223 = icmp eq i64 %222, 2
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %RBP, align 8, !tbaa !2428
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 1
  store i64 %234, i64* %PC
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %237 = load i64, i64* %236, align 8, !tbaa !2428
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %235, align 8, !tbaa !2428
  %240 = add i64 %237, 8
  store i64 %240, i64* %236, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c20_mat_set(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400c20:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 8
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 12
  %58 = load i32, i32* %ESI
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = bitcast %union.vec128_t* %XMM0 to i8*
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 5
  store i64 %67, i64* %PC
  %68 = bitcast i8* %65 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 1
  %70 = extractelement <2 x float> %69, i32 0
  %71 = inttoptr i64 %64 to float*
  store float %70, float* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 20
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76
  br label %block_400c37

block_400cd7:                                     ; preds = %block_400c65
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 5
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 5
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %78, i64* %81, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 24
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 3
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i32*
  %87 = load i32, i32* %86
  %88 = zext i32 %87 to i64
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = load i64, i64* %RAX
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 3
  store i64 %91, i64* %PC
  %92 = trunc i64 %89 to i32
  %93 = add i32 1, %92
  %94 = zext i32 %93 to i64
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = icmp ult i32 %93, %92
  %96 = icmp ult i32 %93, 1
  %97 = or i1 %95, %96
  %98 = zext i1 %97 to i8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %98, i8* %99, align 1, !tbaa !2432
  %100 = and i32 %93, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2446
  %106 = xor i64 1, %89
  %107 = trunc i64 %106 to i32
  %108 = xor i32 %107, %93
  %109 = lshr i32 %108, 4
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = icmp eq i32 %93, 0
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %114, i8* %115, align 1, !tbaa !2448
  %116 = lshr i32 %93, 31
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %117, i8* %118, align 1, !tbaa !2449
  %119 = lshr i32 %92, 31
  %120 = xor i32 %116, %119
  %121 = add nuw nsw i32 %120, %116
  %122 = icmp eq i32 %121, 2
  %123 = zext i1 %122 to i8
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %123, i8* %124, align 1, !tbaa !2450
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 24
  %127 = load i32, i32* %EAX
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %126 to i32*
  store i32 %127, i32* %131
  %132 = load i64, i64* %PC
  %133 = sub i64 %132, 151
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 5
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %133, i64* %136, align 8, !tbaa !2428
  br label %block_400c4e

block_400c5e:                                     ; preds = %block_400c4e
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 28
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 7
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  store i32 0, i32* %141
  br label %block_400c65

block_400c37:                                     ; preds = %block_400cea, %block_400c20
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400c20 ], [ %MEMORY.1, %block_400cea ]
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 20
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 3
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %RAX, align 8, !tbaa !2428
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 8
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %RCX, align 8, !tbaa !2428
  %155 = load i32, i32* %EAX
  %156 = zext i32 %155 to i64
  %157 = load i64, i64* %RCX
  %158 = add i64 %157, 12
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = sub i32 %155, %162
  %164 = icmp ult i32 %155, %162
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %165, i8* %166, align 1, !tbaa !2432
  %167 = and i32 %163, 255
  %168 = call i32 @llvm.ctpop.i32(i32 %167) #16
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %171, i8* %172, align 1, !tbaa !2446
  %173 = xor i32 %162, %155
  %174 = xor i32 %173, %163
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %177, i8* %178, align 1, !tbaa !2447
  %179 = icmp eq i32 %163, 0
  %180 = zext i1 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %180, i8* %181, align 1, !tbaa !2448
  %182 = lshr i32 %163, 31
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %183, i8* %184, align 1, !tbaa !2449
  %185 = lshr i32 %155, 31
  %186 = lshr i32 %162, 31
  %187 = xor i32 %186, %185
  %188 = xor i32 %182, %185
  %189 = add nuw nsw i32 %188, %187
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %191, i8* %192, align 1, !tbaa !2450
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 188
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 6
  store i64 %198, i64* %PC
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %200 = load i8, i8* %199, align 1, !tbaa !2449
  %201 = icmp ne i8 %200, 0
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %203 = load i8, i8* %202, align 1, !tbaa !2450
  %204 = icmp ne i8 %203, 0
  %205 = xor i1 %201, %204
  %206 = xor i1 %205, true
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %209 = select i1 %205, i64 %196, i64 %194
  store i64 %209, i64* %208, align 8, !tbaa !2428
  %210 = load i8, i8* %BRANCH_TAKEN
  %211 = icmp eq i8 %210, 1
  br i1 %211, label %block_400cfd, label %block_400c47

block_400c75:                                     ; preds = %block_400c65
  %212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 16
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to float*
  %218 = load float, float* %217
  %219 = bitcast i8* %212 to float*
  store float %218, float* %219, align 1, !tbaa !2452
  %220 = getelementptr inbounds i8, i8* %212, i64 4
  %221 = bitcast i8* %220 to float*
  store float 0.000000e+00, float* %221, align 1, !tbaa !2452
  %222 = getelementptr inbounds i8, i8* %212, i64 8
  %223 = bitcast i8* %222 to float*
  store float 0.000000e+00, float* %223, align 1, !tbaa !2452
  %224 = getelementptr inbounds i8, i8* %212, i64 12
  %225 = bitcast i8* %224 to float*
  store float 0.000000e+00, float* %225, align 1, !tbaa !2452
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 8
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %232 to i64*
  %236 = load i64, i64* %235
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 12
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241
  %243 = zext i32 %242 to i64
  store i64 %243, i64* %RCX, align 8, !tbaa !2428
  %244 = load i64, i64* %RBP
  %245 = sub i64 %244, 8
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248
  store i64 %249, i64* %RDX, align 8, !tbaa !2428
  %250 = load i64, i64* %RCX
  %251 = load i64, i64* %RDX
  %252 = add i64 %251, 12
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255
  %257 = shl i64 %250, 32
  %258 = ashr exact i64 %257, 32
  %259 = sext i32 %256 to i64
  %260 = mul nsw i64 %259, %258
  %261 = trunc i64 %260 to i32
  %262 = and i64 %260, 4294967295
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = shl i64 %260, 32
  %264 = ashr exact i64 %263, 32
  %265 = icmp ne i64 %264, %260
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = and i32 %261, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2446
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %274, align 1, !tbaa !2447
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %275, align 1, !tbaa !2448
  %276 = lshr i32 %261, 31
  %277 = trunc i32 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %277, i8* %278, align 1, !tbaa !2449
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %266, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 8
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RDX, align 8, !tbaa !2428
  %286 = load i64, i64* %RCX
  %287 = load i64, i64* %RDX
  %288 = add i64 %287, 16
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i32*
  %292 = load i32, i32* %291
  %293 = shl i64 %286, 32
  %294 = ashr exact i64 %293, 32
  %295 = sext i32 %292 to i64
  %296 = mul nsw i64 %295, %294
  %297 = trunc i64 %296 to i32
  %298 = and i64 %296, 4294967295
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = shl i64 %296, 32
  %300 = ashr exact i64 %299, 32
  %301 = icmp ne i64 %300, %296
  %302 = zext i1 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %302, i8* %303, align 1, !tbaa !2432
  %304 = and i32 %297, 255
  %305 = call i32 @llvm.ctpop.i32(i32 %304) #16
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = xor i8 %307, 1
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %308, i8* %309, align 1, !tbaa !2446
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %310, align 1, !tbaa !2447
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %311, align 1, !tbaa !2448
  %312 = lshr i32 %297, 31
  %313 = trunc i32 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %313, i8* %314, align 1, !tbaa !2449
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %302, i8* %315, align 1, !tbaa !2450
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = load i64, i64* %RCX
  %323 = load i64, i64* %RDX
  %324 = add i64 %323, 20
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i32*
  %328 = load i32, i32* %327
  %329 = shl i64 %322, 32
  %330 = ashr exact i64 %329, 32
  %331 = sext i32 %328 to i64
  %332 = mul nsw i64 %331, %330
  %333 = trunc i64 %332 to i32
  %334 = and i64 %332, 4294967295
  store i64 %334, i64* %RCX, align 8, !tbaa !2428
  %335 = shl i64 %332, 32
  %336 = ashr exact i64 %335, 32
  %337 = icmp ne i64 %336, %332
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %338, i8* %339, align 1, !tbaa !2432
  %340 = and i32 %333, 255
  %341 = call i32 @llvm.ctpop.i32(i32 %340) #16
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %344, i8* %345, align 1, !tbaa !2446
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %346, align 1, !tbaa !2447
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %333, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %351, align 1, !tbaa !2450
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 20
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 3
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  %357 = load i32, i32* %356
  %358 = zext i32 %357 to i64
  store i64 %358, i64* %RSI, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 8
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RDX, align 8, !tbaa !2428
  %365 = load i64, i64* %RSI
  %366 = load i64, i64* %RDX
  %367 = add i64 %366, 16
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i32*
  %371 = load i32, i32* %370
  %372 = shl i64 %365, 32
  %373 = ashr exact i64 %372, 32
  %374 = sext i32 %371 to i64
  %375 = mul nsw i64 %374, %373
  %376 = trunc i64 %375 to i32
  %377 = and i64 %375, 4294967295
  store i64 %377, i64* %RSI, align 8, !tbaa !2428
  %378 = shl i64 %375, 32
  %379 = ashr exact i64 %378, 32
  %380 = icmp ne i64 %379, %375
  %381 = zext i1 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %381, i8* %382, align 1, !tbaa !2432
  %383 = and i32 %376, 255
  %384 = call i32 @llvm.ctpop.i32(i32 %383) #16
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %387, i8* %388, align 1, !tbaa !2446
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %389, align 1, !tbaa !2447
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %390, align 1, !tbaa !2448
  %391 = lshr i32 %376, 31
  %392 = trunc i32 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %392, i8* %393, align 1, !tbaa !2449
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %381, i8* %394, align 1, !tbaa !2450
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 8
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399
  store i64 %400, i64* %RDX, align 8, !tbaa !2428
  %401 = load i64, i64* %RSI
  %402 = load i64, i64* %RDX
  %403 = add i64 %402, 20
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = shl i64 %401, 32
  %409 = ashr exact i64 %408, 32
  %410 = sext i32 %407 to i64
  %411 = mul nsw i64 %410, %409
  %412 = trunc i64 %411 to i32
  %413 = and i64 %411, 4294967295
  store i64 %413, i64* %RSI, align 8, !tbaa !2428
  %414 = shl i64 %411, 32
  %415 = ashr exact i64 %414, 32
  %416 = icmp ne i64 %415, %411
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %417, i8* %418, align 1, !tbaa !2432
  %419 = and i32 %412, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #16
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2446
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %425, align 1, !tbaa !2447
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %426, align 1, !tbaa !2448
  %427 = lshr i32 %412, 31
  %428 = trunc i32 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %428, i8* %429, align 1, !tbaa !2449
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %417, i8* %430, align 1, !tbaa !2450
  %431 = load i64, i64* %RCX
  %432 = load i32, i32* %ESI
  %433 = zext i32 %432 to i64
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 2
  store i64 %435, i64* %PC
  %436 = trunc i64 %431 to i32
  %437 = add i32 %432, %436
  %438 = zext i32 %437 to i64
  store i64 %438, i64* %RCX, align 8, !tbaa !2428
  %439 = icmp ult i32 %437, %436
  %440 = icmp ult i32 %437, %432
  %441 = or i1 %439, %440
  %442 = zext i1 %441 to i8
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %442, i8* %443, align 1, !tbaa !2432
  %444 = and i32 %437, 255
  %445 = call i32 @llvm.ctpop.i32(i32 %444) #16
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = xor i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %448, i8* %449, align 1, !tbaa !2446
  %450 = xor i64 %433, %431
  %451 = trunc i64 %450 to i32
  %452 = xor i32 %451, %437
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %455, i8* %456, align 1, !tbaa !2447
  %457 = icmp eq i32 %437, 0
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %458, i8* %459, align 1, !tbaa !2448
  %460 = lshr i32 %437, 31
  %461 = trunc i32 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %461, i8* %462, align 1, !tbaa !2449
  %463 = lshr i32 %436, 31
  %464 = lshr i32 %432, 31
  %465 = xor i32 %460, %463
  %466 = xor i32 %460, %464
  %467 = add nuw nsw i32 %465, %466
  %468 = icmp eq i32 %467, 2
  %469 = zext i1 %468 to i8
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %469, i8* %470, align 1, !tbaa !2450
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 24
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 3
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %RSI, align 8, !tbaa !2428
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 8
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RDX, align 8, !tbaa !2428
  %484 = load i64, i64* %RSI
  %485 = load i64, i64* %RDX
  %486 = add i64 %485, 20
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 4
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i32*
  %490 = load i32, i32* %489
  %491 = shl i64 %484, 32
  %492 = ashr exact i64 %491, 32
  %493 = sext i32 %490 to i64
  %494 = mul nsw i64 %493, %492
  %495 = trunc i64 %494 to i32
  %496 = and i64 %494, 4294967295
  store i64 %496, i64* %RSI, align 8, !tbaa !2428
  %497 = shl i64 %494, 32
  %498 = ashr exact i64 %497, 32
  %499 = icmp ne i64 %498, %494
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %500, i8* %501, align 1, !tbaa !2432
  %502 = and i32 %495, 255
  %503 = call i32 @llvm.ctpop.i32(i32 %502) #16
  %504 = trunc i32 %503 to i8
  %505 = and i8 %504, 1
  %506 = xor i8 %505, 1
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %506, i8* %507, align 1, !tbaa !2446
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %508, align 1, !tbaa !2447
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %509, align 1, !tbaa !2448
  %510 = lshr i32 %495, 31
  %511 = trunc i32 %510 to i8
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %511, i8* %512, align 1, !tbaa !2449
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %500, i8* %513, align 1, !tbaa !2450
  %514 = load i64, i64* %RCX
  %515 = load i32, i32* %ESI
  %516 = zext i32 %515 to i64
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 2
  store i64 %518, i64* %PC
  %519 = trunc i64 %514 to i32
  %520 = add i32 %515, %519
  %521 = zext i32 %520 to i64
  store i64 %521, i64* %RCX, align 8, !tbaa !2428
  %522 = icmp ult i32 %520, %519
  %523 = icmp ult i32 %520, %515
  %524 = or i1 %522, %523
  %525 = zext i1 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %525, i8* %526, align 1, !tbaa !2432
  %527 = and i32 %520, 255
  %528 = call i32 @llvm.ctpop.i32(i32 %527) #16
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  %531 = xor i8 %530, 1
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %531, i8* %532, align 1, !tbaa !2446
  %533 = xor i64 %516, %514
  %534 = trunc i64 %533 to i32
  %535 = xor i32 %534, %520
  %536 = lshr i32 %535, 4
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %538, i8* %539, align 1, !tbaa !2447
  %540 = icmp eq i32 %520, 0
  %541 = zext i1 %540 to i8
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %541, i8* %542, align 1, !tbaa !2448
  %543 = lshr i32 %520, 31
  %544 = trunc i32 %543 to i8
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %544, i8* %545, align 1, !tbaa !2449
  %546 = lshr i32 %519, 31
  %547 = lshr i32 %515, 31
  %548 = xor i32 %543, %546
  %549 = xor i32 %543, %547
  %550 = add nuw nsw i32 %548, %549
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2450
  %554 = load i64, i64* %RCX
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 28
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = trunc i64 %554 to i32
  %560 = inttoptr i64 %556 to i32*
  %561 = load i32, i32* %560
  %562 = add i32 %561, %559
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RCX, align 8, !tbaa !2428
  %564 = icmp ult i32 %562, %559
  %565 = icmp ult i32 %562, %561
  %566 = or i1 %564, %565
  %567 = zext i1 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %567, i8* %568, align 1, !tbaa !2432
  %569 = and i32 %562, 255
  %570 = call i32 @llvm.ctpop.i32(i32 %569) #16
  %571 = trunc i32 %570 to i8
  %572 = and i8 %571, 1
  %573 = xor i8 %572, 1
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %573, i8* %574, align 1, !tbaa !2446
  %575 = xor i32 %561, %559
  %576 = xor i32 %575, %562
  %577 = lshr i32 %576, 4
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %579, i8* %580, align 1, !tbaa !2447
  %581 = icmp eq i32 %562, 0
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %582, i8* %583, align 1, !tbaa !2448
  %584 = lshr i32 %562, 31
  %585 = trunc i32 %584 to i8
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %585, i8* %586, align 1, !tbaa !2449
  %587 = lshr i32 %559, 31
  %588 = lshr i32 %561, 31
  %589 = xor i32 %584, %587
  %590 = xor i32 %584, %588
  %591 = add nuw nsw i32 %589, %590
  %592 = icmp eq i32 %591, 2
  %593 = zext i1 %592 to i8
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %593, i8* %594, align 1, !tbaa !2450
  %595 = load i32, i32* %ECX
  %596 = zext i32 %595 to i64
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC
  %599 = shl i64 %596, 32
  %600 = ashr exact i64 %599, 32
  store i64 %600, i64* %RDX, align 8, !tbaa !2428
  %601 = load i64, i64* %RAX
  %602 = load i64, i64* %RDX
  %603 = mul i64 %602, 4
  %604 = add i64 %603, %601
  %605 = bitcast %union.vec128_t* %XMM0 to i8*
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  %608 = bitcast i8* %605 to <2 x float>*
  %609 = load <2 x float>, <2 x float>* %608, align 1
  %610 = extractelement <2 x float> %609, i32 0
  %611 = inttoptr i64 %604 to float*
  store float %610, float* %611
  %612 = load i64, i64* %RBP
  %613 = sub i64 %612, 28
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 3
  store i64 %615, i64* %PC
  %616 = inttoptr i64 %613 to i32*
  %617 = load i32, i32* %616
  %618 = zext i32 %617 to i64
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %619 = load i64, i64* %RAX
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = trunc i64 %619 to i32
  %623 = add i32 1, %622
  %624 = zext i32 %623 to i64
  store i64 %624, i64* %RAX, align 8, !tbaa !2428
  %625 = icmp ult i32 %623, %622
  %626 = icmp ult i32 %623, 1
  %627 = or i1 %625, %626
  %628 = zext i1 %627 to i8
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %628, i8* %629, align 1, !tbaa !2432
  %630 = and i32 %623, 255
  %631 = call i32 @llvm.ctpop.i32(i32 %630) #16
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %634, i8* %635, align 1, !tbaa !2446
  %636 = xor i64 1, %619
  %637 = trunc i64 %636 to i32
  %638 = xor i32 %637, %623
  %639 = lshr i32 %638, 4
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %641, i8* %642, align 1, !tbaa !2447
  %643 = icmp eq i32 %623, 0
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %644, i8* %645, align 1, !tbaa !2448
  %646 = lshr i32 %623, 31
  %647 = trunc i32 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %647, i8* %648, align 1, !tbaa !2449
  %649 = lshr i32 %622, 31
  %650 = xor i32 %646, %649
  %651 = add nuw nsw i32 %650, %646
  %652 = icmp eq i32 %651, 2
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %653, i8* %654, align 1, !tbaa !2450
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 28
  %657 = load i32, i32* %EAX
  %658 = zext i32 %657 to i64
  %659 = load i64, i64* %PC
  %660 = add i64 %659, 3
  store i64 %660, i64* %PC
  %661 = inttoptr i64 %656 to i32*
  store i32 %657, i32* %661
  %662 = load i64, i64* %PC
  %663 = sub i64 %662, 109
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 5
  store i64 %665, i64* %PC
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %663, i64* %666, align 8, !tbaa !2428
  br label %block_400c65

block_400c4e:                                     ; preds = %block_400c47, %block_400cd7
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_400c47 ], [ %MEMORY.2, %block_400cd7 ]
  %667 = load i64, i64* %RBP
  %668 = sub i64 %667, 24
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 3
  store i64 %670, i64* %PC
  %671 = inttoptr i64 %668 to i32*
  %672 = load i32, i32* %671
  %673 = zext i32 %672 to i64
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 8
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 4
  store i64 %677, i64* %PC
  %678 = inttoptr i64 %675 to i64*
  %679 = load i64, i64* %678
  store i64 %679, i64* %RCX, align 8, !tbaa !2428
  %680 = load i32, i32* %EAX
  %681 = zext i32 %680 to i64
  %682 = load i64, i64* %RCX
  %683 = add i64 %682, 16
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 3
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i32*
  %687 = load i32, i32* %686
  %688 = sub i32 %680, %687
  %689 = icmp ult i32 %680, %687
  %690 = zext i1 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %690, i8* %691, align 1, !tbaa !2432
  %692 = and i32 %688, 255
  %693 = call i32 @llvm.ctpop.i32(i32 %692) #16
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %696, i8* %697, align 1, !tbaa !2446
  %698 = xor i32 %687, %680
  %699 = xor i32 %698, %688
  %700 = lshr i32 %699, 4
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %702, i8* %703, align 1, !tbaa !2447
  %704 = icmp eq i32 %688, 0
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %705, i8* %706, align 1, !tbaa !2448
  %707 = lshr i32 %688, 31
  %708 = trunc i32 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %708, i8* %709, align 1, !tbaa !2449
  %710 = lshr i32 %680, 31
  %711 = lshr i32 %687, 31
  %712 = xor i32 %711, %710
  %713 = xor i32 %707, %710
  %714 = add nuw nsw i32 %713, %712
  %715 = icmp eq i32 %714, 2
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %716, i8* %717, align 1, !tbaa !2450
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 146
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 6
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 6
  store i64 %723, i64* %PC
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %725 = load i8, i8* %724, align 1, !tbaa !2449
  %726 = icmp ne i8 %725, 0
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %728 = load i8, i8* %727, align 1, !tbaa !2450
  %729 = icmp ne i8 %728, 0
  %730 = xor i1 %726, %729
  %731 = xor i1 %730, true
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %734 = select i1 %730, i64 %721, i64 %719
  store i64 %734, i64* %733, align 8, !tbaa !2428
  %735 = load i8, i8* %BRANCH_TAKEN
  %736 = icmp eq i8 %735, 1
  br i1 %736, label %block_400cea, label %block_400c5e

block_400cea:                                     ; preds = %block_400c4e
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 5
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 5
  store i64 %740, i64* %PC
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %738, i64* %741, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 20
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 3
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i32*
  %747 = load i32, i32* %746
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RAX, align 8, !tbaa !2428
  %749 = load i64, i64* %RAX
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 3
  store i64 %751, i64* %PC
  %752 = trunc i64 %749 to i32
  %753 = add i32 1, %752
  %754 = zext i32 %753 to i64
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = icmp ult i32 %753, %752
  %756 = icmp ult i32 %753, 1
  %757 = or i1 %755, %756
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %758, i8* %759, align 1, !tbaa !2432
  %760 = and i32 %753, 255
  %761 = call i32 @llvm.ctpop.i32(i32 %760) #16
  %762 = trunc i32 %761 to i8
  %763 = and i8 %762, 1
  %764 = xor i8 %763, 1
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %764, i8* %765, align 1, !tbaa !2446
  %766 = xor i64 1, %749
  %767 = trunc i64 %766 to i32
  %768 = xor i32 %767, %753
  %769 = lshr i32 %768, 4
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %771, i8* %772, align 1, !tbaa !2447
  %773 = icmp eq i32 %753, 0
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %774, i8* %775, align 1, !tbaa !2448
  %776 = lshr i32 %753, 31
  %777 = trunc i32 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %777, i8* %778, align 1, !tbaa !2449
  %779 = lshr i32 %752, 31
  %780 = xor i32 %776, %779
  %781 = add nuw nsw i32 %780, %776
  %782 = icmp eq i32 %781, 2
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %783, i8* %784, align 1, !tbaa !2450
  %785 = load i64, i64* %RBP
  %786 = sub i64 %785, 20
  %787 = load i32, i32* %EAX
  %788 = zext i32 %787 to i64
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 3
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %786 to i32*
  store i32 %787, i32* %791
  %792 = load i64, i64* %PC
  %793 = sub i64 %792, 193
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 5
  store i64 %795, i64* %PC
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %793, i64* %796, align 8, !tbaa !2428
  br label %block_400c37

block_400c65:                                     ; preds = %block_400c75, %block_400c5e
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400c5e ], [ %MEMORY.2, %block_400c75 ]
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 28
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 3
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %798 to i32*
  %802 = load i32, i32* %801
  %803 = zext i32 %802 to i64
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 8
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RCX, align 8, !tbaa !2428
  %810 = load i32, i32* %EAX
  %811 = zext i32 %810 to i64
  %812 = load i64, i64* %RCX
  %813 = add i64 %812, 20
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 3
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %813 to i32*
  %817 = load i32, i32* %816
  %818 = sub i32 %810, %817
  %819 = icmp ult i32 %810, %817
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %820, i8* %821, align 1, !tbaa !2432
  %822 = and i32 %818, 255
  %823 = call i32 @llvm.ctpop.i32(i32 %822) #16
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %826, i8* %827, align 1, !tbaa !2446
  %828 = xor i32 %817, %810
  %829 = xor i32 %828, %818
  %830 = lshr i32 %829, 4
  %831 = trunc i32 %830 to i8
  %832 = and i8 %831, 1
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %832, i8* %833, align 1, !tbaa !2447
  %834 = icmp eq i32 %818, 0
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %835, i8* %836, align 1, !tbaa !2448
  %837 = lshr i32 %818, 31
  %838 = trunc i32 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %838, i8* %839, align 1, !tbaa !2449
  %840 = lshr i32 %810, 31
  %841 = lshr i32 %817, 31
  %842 = xor i32 %841, %840
  %843 = xor i32 %837, %840
  %844 = add nuw nsw i32 %843, %842
  %845 = icmp eq i32 %844, 2
  %846 = zext i1 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %846, i8* %847, align 1, !tbaa !2450
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 104
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 6
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 6
  store i64 %853, i64* %PC
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %855 = load i8, i8* %854, align 1, !tbaa !2449
  %856 = icmp ne i8 %855, 0
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %858 = load i8, i8* %857, align 1, !tbaa !2450
  %859 = icmp ne i8 %858, 0
  %860 = xor i1 %856, %859
  %861 = xor i1 %860, true
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %864 = select i1 %860, i64 %851, i64 %849
  store i64 %864, i64* %863, align 8, !tbaa !2428
  %865 = load i8, i8* %BRANCH_TAKEN
  %866 = icmp eq i8 %865, 1
  br i1 %866, label %block_400cd7, label %block_400c75

block_400cfd:                                     ; preds = %block_400c37
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 1
  store i64 %868, i64* %PC
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %870 = load i64, i64* %869, align 8, !tbaa !2428
  %871 = add i64 %870, 8
  %872 = inttoptr i64 %870 to i64*
  %873 = load i64, i64* %872
  store i64 %873, i64* %RBP, align 8, !tbaa !2428
  store i64 %871, i64* %869, align 8, !tbaa !2428
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 1
  store i64 %875, i64* %PC
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %878 = load i64, i64* %877, align 8, !tbaa !2428
  %879 = inttoptr i64 %878 to i64*
  %880 = load i64, i64* %879
  store i64 %880, i64* %876, align 8, !tbaa !2428
  %881 = add i64 %878, 8
  store i64 %881, i64* %877, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400c47:                                     ; preds = %block_400c37
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 24
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 7
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %883 to i32*
  store i32 0, i32* %886
  br label %block_400c4e
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400680_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400680_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400680_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400650___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400650;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400650___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400650___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603138_strcmp(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400550_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400590_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400560_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401db0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401db0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401db0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401d40___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401d40___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d40___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400690;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400690_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603168___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603140_malloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603118_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @set_param() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401aa0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @set_param_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401aa0_set_param(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mflops() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @mflops_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a60_mflops(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @newMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400a90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @newMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400a90_newMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @jacobi() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400d00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @jacobi_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400d00_jacobi(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400518;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400518__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @fflop() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @fflop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a10_fflop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400b20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400b20_mat_set_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @clearMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4019a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @clearMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4019a0_clearMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401db4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401db4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400c20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400c20_mat_set(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c90_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401db0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401d40___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"double", !2430, i64 0}
