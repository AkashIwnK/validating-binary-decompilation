; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4004e0__init_type = type <{ [23 x i8] }>
%seg_400500__plt_type = type <{ [112 x i8] }>
%seg_400570__text_type = type <{ [60 x i8], i32, [6098 x i8] }>
%seg_401d84__fini_type = type <{ [9 x i8] }>
%seg_401d90__rodata_type = type <{ [40 x i8], [34 x i8], [30 x i8], [29 x i8], [13 x i8], [3 x i8], [3 x i8], [2 x i8], [2 x i8], [3 x i8], [3 x i8], [28 x i8] }>
%seg_401e50__eh_frame_hdr_type = type <{ [132 x i8] }>
%seg_401ed8__eh_frame_type = type <{ [504 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_603048__data_type = type <{ [16 x i8] }>
%omega_type = type <{ [4 x i8] }>
%seg_603060__bss_type = type <{ [4 x i8], [4 x i8], [8 x i8] }>
%b_type = type <{ [24 x i8] }>
%p_type = type <{ [24 x i8] }>
%wrk2_type = type <{ [24 x i8] }>
%c_type = type <{ [24 x i8] }>
%a_type = type <{ [24 x i8] }>
%wrk1_type = type <{ [24 x i8] }>
%bnd_type = type <{ [24 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4004e0__init = internal constant %seg_4004e0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\0D+ \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400500__plt = internal constant %seg_400500__plt_type <{ [112 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\02+ \00\00\00\00\00\00\00\00\00\00\00\FF%\FA* \00\00\00\00\00\00\00\00\00\00\00\FF%\F2* \00\00\00\00\00\00\00\00\00\00\00\FF%\EA* \00\00\00\00\00\00\00\00\00\00\00\FF%\E2* \00\00\00\00\00\00\00\00\00\00\00\FF%\DA* \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400570__text = internal constant %seg_400570__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\80\1D@\00H\C7\C1\10\1D@\00H\C7\C7`\06@\00\FF\15V* \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_401ed8__eh_frame_type* @seg_401ed8__eh_frame to i64), i64 55) to i32), [6098 x i8] c"U\B8`0`\00H=`0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF`0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE`0`\00UH\81\EE`0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF`0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=9* \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05'* \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\B0\00\00\00H\B8\B8\1D@\00\00\00\00\00\C7E\FC\00\00\00\00\89}\F8H\89u\F0\C7E\BC@\00\00\00\C7E\C0@\00\00\00\C7E\C4\80\00\00\00\8B}\BC\89}\D0\8B}\C0\89}\CC\8B}\C4\89}\C8\8B}\D0\83\EF\01\89}\DC\8B}\CC\83\EF\01\89}\D8\8B}\C8\83\EF\01\89}\D4\8Bu\D0\8BU\CC\8BM\C8H\89\C7\B0\00\E8H\FE\FF\FFH\BF\DA\1D@\00\00\00\00\00\8Bu\DC\8BU\D8\8BM\D4\89E\94\B0\00\E8+\FE\FF\FFH\BF\880`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\90\E8J\03\00\00H\BF\001`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\8C\E8)\03\00\00H\BF\E80`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\88\E8\08\03\00\00H\BF\A00`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\84\E8\E7\02\00\00H\BF\D00`\00\00\00\00\00\BE\04\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\80\E8\C6\02\00\00H\BFp0`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85|\FF\FF\FF\E8\A2\02\00\00H\BF\B80`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85x\FF\FF\FF\E8~\02\00\00H\BF\880`\00\00\00\00\00\89\85t\FF\FF\FF\E8\F9\02\00\00H\BF\001`\00\00\00\00\001\F6\F3\0F\10\05\89\15\00\00\E8\E0\03\00\00H\BF\E80`\00\00\00\00\001\F6\0FW\C0\E8\CC\03\00\00H\BF\A00`\00\00\00\00\001\F6\0FW\C0\E8\B8\03\00\00H\BF\D00`\00\00\00\00\001\F6\F3\0F\10\05H\15\00\00\E8\9F\03\00\00H\BF\D00`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05,\15\00\00\E8\83\03\00\00H\BF\D00`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05\10\15\00\00\E8g\03\00\00H\BF\D00`\00\00\00\00\00\BE\03\00\00\00\F3\0F\10\05\F8\14\00\00\E8K\03\00\00H\BFp0`\00\00\00\00\001\F6\0FW\C0\E87\03\00\00H\BFp0`\00\00\00\00\00\BE\01\00\00\00\0FW\C0\E8 \03\00\00H\BFp0`\00\00\00\00\00\BE\02\00\00\00\0FW\C0\E8\09\03\00\00H\BF\B80`\00\00\00\00\001\F6\F3\0F\10\05\99\14\00\00\E8\F0\02\00\00H\BF\B80`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05}\14\00\00\E8\D4\02\00\00H\BF\B80`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05a\14\00\00\E8\B8\02\00\00H\BE\D00`\00\00\00\00\00H\BAp0`\00\00\00\00\00H\B9\B80`\00\00\00\00\00I\B8\880`\00\00\00\00\00I\B9\001`\00\00\00\00\00H\BF\E80`\00\00\00\00\00I\BA\A00`\00\00\00\00\00\C7E\E0@\00\00\00\8BE\E0H\89\BDh\FF\FF\FF\89\C7L\8B\9Dh\FF\FF\FFL\89\1C$L\89T$\08\E8*\03\00\00H\BF\F8\1D@\00\00\00\00\00\F3\0F\11E\B8\8Bu\E0\B0\00\E8a\FB\FF\FFH\BF\15\1E@\00\00\00\00\00\F3\0F\10E\B8\F3\0FZ\C0\89\85d\FF\FF\FF\B0\01\E8A\FB\FF\FFH\BF\880`\00\00\00\00\00\89\85`\FF\FF\FF\E8|\0F\00\00H\BF\001`\00\00\00\00\00\E8m\0F\00\00H\BF\E80`\00\00\00\00\00\E8^\0F\00\00H\BF\A00`\00\00\00\00\00\E8O\0F\00\00H\BF\D00`\00\00\00\00\00\E8@\0F\00\00H\BFp0`\00\00\00\00\00\E81\0F\00\00H\BF\B80`\00\00\00\00\00\E8\22\0F\00\001\C0H\81\C4\B0\00\00\00]\C3\0F\1F\80\00\00\00\00UH\89\E5H\83\EC H\89}\F8\89u\F4\89U\F0\89M\ECD\89E\E8\8BM\F4H\8B}\F8\89O\08\8BM\F0H\8B}\F8\89O\0C\8BM\ECH\8B}\F8\89O\10\8BM\E8H\8B}\F8\89O\14H\8B}\F8H\C7\07\00\00\00\00\8BM\F4\0F\AFM\F0\0F\AFM\EC\0F\AFM\E8Hc\F9H\C1\E7\02\E8\89\FA\FF\FF1\C9\BA\01\00\00\00H\8B}\F8H\89\07H\8BE\F8H\838\00\0FE\CA\89\C8H\83\C4 ]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8\C7E\F4\00\00\00\00\8BE\F4H\8BM\F8;A\0C\0F\8D\D8\00\00\00\C7E\F0\00\00\00\00\8BE\F0H\8BM\F8;A\10\0F\8D\AE\00\00\00\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\14\0F\8D\84\00\00\00\8BE\F4\0F\AFE\F4\F3\0F*\C0H\8BM\F8\8BA\0C\83\E8\01H\8BM\F8\8BQ\0C\83\EA\01\0F\AF\C2\F3\0F*\C8\F3\0F^\C1H\8BM\F8H\8B\09H\8Bu\F8kF\0C\00H\8Bu\F8\0F\AFF\10H\8Bu\F8\0F\AFF\14\8BU\F4H\8Bu\F8\0F\AFV\10H\8Bu\F8\0F\AFV\14\01\D0\8BU\F0H\8Bu\F8\0F\AFV\14\01\D0\03E\ECHc\F0\F3\0F\11\04\B1\8BE\EC\83\C0\01\89E\EC\E9l\FF\FF\FF\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9B\FF\FF\FF\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\18\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8\89u\F4\F3\0F\11E\F0\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\0C\0F\8D\B6\00\00\00\C7E\E8\00\00\00\00\8BE\E8H\8BM\F8;A\10\0F\8D\8C\00\00\00\C7E\E4\00\00\00\00\8BE\E4H\8BM\F8;A\14\0F\8Db\00\00\00\F3\0F\10E\F0H\8BE\F8H\8B\00\8BM\F4H\8BU\F8\0F\AFJ\0CH\8BU\F8\0F\AFJ\10H\8BU\F8\0F\AFJ\14\8Bu\ECH\8BU\F8\0F\AFr\10H\8BU\F8\0F\AFr\14\01\F1\8Bu\E8H\8BU\F8\0F\AFr\14\01\F1\03M\E4Hc\D1\F3\0F\11\04\90\8BE\E4\83\C0\01\89E\E4\E9\8E\FF\FF\FF\E9\00\00\00\00\8BE\E8\83\C0\01\89E\E8\E9d\FF\FF\FF\E9\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9:\FF\FF\FF]\C3\90UH\89\E5H\8BE\18L\8BU\10\89}\FCH\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0H\8BM\D8\8By\0C\83\EF\01\89}\BCH\8BM\D8\8By\10\83\EF\01\89}\B8H\8BM\D8\8By\14\83\EF\01\89}\B4\C7E\C0\00\00\00\00L\89U\A0H\89E\98\8BE\C0;E\FC\0F\8D4\0C\00\00\0FW\C0\F3\0F\11E\B0\C7E\CC\01\00\00\00\8BE\CC;E\BC\0F\8D\01\0B\00\00\C7E\C8\01\00\00\00\8BE\C8;E\B8\0F\8D\DB\0A\00\00\C7E\C4\01\00\00\00\8BE\C4;E\B4\0F\8D\B5\0A\00\00H\8BE\F0H\8B\00H\8BM\F0kQ\0C\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\CCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\C8H\8BM\F0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\04\88H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\CCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\C8H\8BM\F0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\01H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\CCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\C8H\8BM\F0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\C6\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8kQ\0C\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\CCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\C8H\8BM\E8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\CCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\C8H\8BM\E8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\01H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\CCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\C8H\8BM\E8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0kQ\0C\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\CCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\C8H\8BM\E0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\CCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\C8H\8BM\E0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\01H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\CCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\C8H\8BM\E0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\8Bu\C4\83\EE\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\10H\8B\00H\8BM\10kQ\0C\00H\8BM\10\0F\AFQ\10H\8BM\10\0F\AFQ\14\8Bu\CCH\8BM\10\0F\AFq\10H\8BM\10\0F\AFq\14\01\F2\8Bu\C8H\8BM\10\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FX\04\88\F3\0F\11E\AC\F3\0F\10E\ACH\8BE\F0H\8B\00H\8BM\F0kQ\0C\03H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\CCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\C8H\8BM\F0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\5C\04\88H\8BE\D0H\8B\00H\8BM\D0kQ\0C\00H\8BM\D0\0F\AFQ\10H\8BM\D0\0F\AFQ\14\8Bu\CCH\8BM\D0\0F\AFq\10H\8BM\D0\0F\AFq\14\01\F2\8Bu\C8H\8BM\D0\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0FY\04\88\F3\0F\11E\A8\F3\0F\10E\A8\F3\0FYE\A8\F3\0FXE\B0\F3\0F\11E\B0H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\04\88\F3\0F\10\0C%X0`\00\F3\0FYM\A8\F3\0FX\C1H\8BE\18H\8B\00H\8BM\18kQ\0C\00H\8BM\18\0F\AFQ\10H\8BM\18\0F\AFQ\14\8Bu\CCH\8BM\18\0F\AFq\10H\8BM\18\0F\AFq\14\01\F2\8Bu\C8H\8BM\18\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\11\04\88\8BE\C4\83\C0\01\89E\C4\E9?\F5\FF\FF\E9\00\00\00\00\8BE\C8\83\C0\01\89E\C8\E9\19\F5\FF\FF\E9\00\00\00\00\8BE\CC\83\C0\01\89E\CC\E9\F3\F4\FF\FF\C7E\CC\01\00\00\00\8BE\CC;E\BC\0F\8D\F2\00\00\00\C7E\C8\01\00\00\00\8BE\C8;E\B8\0F\8D\CC\00\00\00\C7E\C4\01\00\00\00\8BE\C4;E\B4\0F\8D\A6\00\00\00H\8BE\18H\8B\00H\8BM\18kQ\0C\00H\8BM\18\0F\AFQ\10H\8BM\18\0F\AFQ\14\8Bu\CCH\8BM\18\0F\AFq\10H\8BM\18\0F\AFq\14\01\F2\8Bu\C8H\8BM\18\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\CCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\C8H\8BM\D8\0F\AFq\14\01\F2\03U\C4Hc\CA\F3\0F\11\04\88\8BE\C4\83\C0\01\89E\C4\E9N\FF\FF\FF\E9\00\00\00\00\8BE\C8\83\C0\01\89E\C8\E9(\FF\FF\FF\E9\00\00\00\00\8BE\CC\83\C0\01\89E\CC\E9\02\FF\FF\FF\E9\00\00\00\00\8BE\C0\83\C0\01\89E\C0\E9\C0\F3\FF\FF\F3\0F\10E\B0]\C3UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8H\83?\00\0F\84\0F\00\00\00H\8BE\F8H\8B\00H\89\C7\E8w\EB\FF\FFH\8BE\F8H\C7\00\00\00\00\00H\8BE\F8\C7@\08\00\00\00\00H\8BE\F8\C7@\10\00\00\00\00H\8BE\F8\C7@\0C\00\00\00\00H\8BE\F8\C7@\14\00\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\05\B4\03\00\00\89}\FC\89u\F8\89U\F4\8BU\F4\83\EA\02\F2\0F*\CA\8BU\F8\83\EA\02\F2\0F*\D2\F2\0FY\CA\8BU\FC\83\EA\02\F2\0F*\D2\F2\0FY\CA\F2\0FY\C8\0F(\C1]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\15l\03\00\00\89}\FC\F2\0F\11E\F0\F2\0F\11M\E8\F2\0F\10E\E8\F2\0F^E\F0\F2\0FY\C2\8B}\FC\F2\0F*\CF\F2\0FY\C1]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F0\B8\22\1E@\00\89\C6\E8\B0\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8%\1E@\00\89\C6\E8\97\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00 \00\00\00H\8BE\F8\C7@\04 \00\00\00H\8BE\F8\C7@\08@\00\00\00\E9z\01\00\00H\8B}\F0\B8#\1E@\00\89\C6\E8Y\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8&\1E@\00\89\C6\E8@\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00@\00\00\00H\8BE\F8\C7@\04@\00\00\00H\8BE\F8\C7@\08\80\00\00\00\E9#\01\00\00H\8B}\F0\B8(\1E@\00\89\C6\E8\02\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8*\1E@\00\89\C6\E8\E9\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\80\00\00\00H\8BE\F8\C7@\04\80\00\00\00H\8BE\F8\C7@\08\00\01\00\00\E9\CC\00\00\00H\8B}\F0\B8-\1E@\00\89\C6\E8\AB\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B80\1E@\00\89\C6\E8\92\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\01\00\00H\8BE\F8\C7@\04\00\01\00\00H\8BE\F8\C7@\08\00\02\00\00\E9u\00\00\00H\8B}\F0\B8,\1E@\00\89\C6\E8T\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8/\1E@\00\89\C6\E8;\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\02\00\00H\8BE\F8\C7@\04\00\02\00\00H\8BE\F8\C7@\08\00\04\00\00\E9\1E\00\00\00H\BF2\1E@\00\00\00\00\00\B0\00\E8\DC\E8\FF\FF\BF\06\00\00\00\89E\EC\E8\0F\E9\FF\FFH\83\C4 ]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8D}\F01\C0\89\C6\E8\BB\E8\FF\FF\83<%d0`\00\00\89E\E4\0F\855\00\00\00\83<%h0`\00\00\0F\85'\00\00\00\0FW\C0H\8BE\F0\89\C1\89\0C%d0`\00H\8BE\F8\89\C1\89\0C%h0`\00\F2\0F\11E\E8\E9=\00\00\00\F2\0F\10\05\ED\00\00\00H\8BE\F0Hc\0C%d0`\00H)\C8\F2H\0F*\C8H\8BE\F8Hc\0C%h0`\00H)\C8\F2H\0F*\D0\F2\0F^\D0\F2\0FX\CA\F2\0F\11M\E8\F2\0F\10E\E8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00AWAVI\89\D7AUATL\8D%\CE\10 \00UH\8D-\CE\10 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\9F\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401d84__fini = internal constant %seg_401d84__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401d90__rodata = internal constant %seg_401d90__rodata_type <{ [40 x i8] c"\01\00\02\00\00\00\80?\AB\AA*>\00\00\00\00\00\00\00\00\00\00A@\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\80\84.A", [34 x i8] c"mimax = %d mjmax = %d mkmax = %d\0A\00", [30 x i8] c"imax = %d jmax = %d kmax =%d\0A\00", [29 x i8] c" Loop executed for %d times\0A\00", [13 x i8] c" Gosa : %e \0A\00", [3 x i8] c"XS\00", [3 x i8] c"xs\00", [2 x i8] c"M\00", [2 x i8] c"m\00", [3 x i8] c"XL\00", [3 x i8] c"xl\00", [28 x i8] c"Invalid input character !!\0A\00" }>
@seg_401e50__eh_frame_hdr = internal constant %seg_401e50__eh_frame_hdr_type <{ [132 x i8] c"\01\1B\03;\84\00\00\00\0F\00\00\00\B0\E6\FF\FF\E0\00\00\00 \E7\FF\FF\A0\00\00\00P\E7\FF\FF\CC\00\00\00\10\E8\FF\FF\08\01\00\00\10\EC\FF\FF$\01\00\00\A0\EC\FF\FF@\01\00\00\A0\ED\FF\FF\5C\01\00\00\80\EE\FF\FFx\01\00\00 \FB\FF\FF\94\01\00\00\90\FB\FF\FF\B0\01\00\00\E0\FB\FF\FF\CC\01\00\00 \FC\FF\FF\E8\01\00\00\10\FE\FF\FF\04\02\00\00\C0\FE\FF\FF \02\00\000\FF\FF\FFh\02\00\00" }>
@seg_401ed8__eh_frame = internal constant %seg_401ed8__eh_frame_type <{ [504 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00x\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00|\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\C8\E5\FF\FFp\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\00\E7\FF\FF\F9\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\E4\EA\FF\FF\88\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00X\EB\FF\FF\F9\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00<\EC\FF\FF\DF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\00\ED\FF\FF\A0\0C\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\84\F9\FF\FFf\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\D8\F9\FF\FFD\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\0C\FA\FF\FF4\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\000\FA\FF\FF\E7\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\04\FC\FF\FF\A3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00p\01\00\00\98\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\B8\01\00\00\C0\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400650_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400620___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64)* @exit to i64) }>
@seg_603048__data = internal global %seg_603048__data_type zeroinitializer
@omega = global %omega_type <{ [4 x i8] c"\CD\CCL?" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@b = global %b_type zeroinitializer
@p = global %p_type zeroinitializer
@wrk2 = global %wrk2_type zeroinitializer
@c = global %c_type zeroinitializer
@a = global %a_type zeroinitializer
@wrk1 = global %wrk1_type zeroinitializer
@bnd = global %bnd_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400650_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400620___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401d80___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401d10___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_init_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @newMat_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mflops_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @fflop_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @jacobi_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @clearMat_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @set_param_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400af0_mat_set_init_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4004e0__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005b0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400cd0_jacobi_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcmp(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400bf0_mat_set(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400bf0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 8
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 12
  %58 = load i32, i32* %ESI
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = bitcast %union.vec128_t* %XMM0 to i8*
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 5
  store i64 %67, i64* %PC
  %68 = bitcast i8* %65 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 1
  %70 = extractelement <2 x float> %69, i32 0
  %71 = inttoptr i64 %64 to float*
  store float %70, float* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 20
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76
  br label %block_400c07

block_400c35:                                     ; preds = %block_400c45, %block_400c2e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_400c2e ], [ %MEMORY.0, %block_400c45 ]
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 28
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i32*
  %82 = load i32, i32* %81
  %83 = zext i32 %82 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RCX, align 8, !tbaa !2428
  %90 = load i32, i32* %EAX
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %RCX
  %93 = add i64 %92, 20
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sub i32 %90, %97
  %99 = icmp ult i32 %90, %97
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = and i32 %98, 255
  %103 = call i32 @llvm.ctpop.i32(i32 %102) #16
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %106, i8* %107, align 1, !tbaa !2446
  %108 = xor i32 %97, %90
  %109 = xor i32 %108, %98
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %112, i8* %113, align 1, !tbaa !2447
  %114 = icmp eq i32 %98, 0
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %115, i8* %116, align 1, !tbaa !2448
  %117 = lshr i32 %98, 31
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %118, i8* %119, align 1, !tbaa !2449
  %120 = lshr i32 %90, 31
  %121 = lshr i32 %97, 31
  %122 = xor i32 %121, %120
  %123 = xor i32 %117, %120
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %126, i8* %127, align 1, !tbaa !2450
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 104
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 6
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 6
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %135 = load i8, i8* %134, align 1, !tbaa !2449
  %136 = icmp ne i8 %135, 0
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %138 = load i8, i8* %137, align 1, !tbaa !2450
  %139 = icmp ne i8 %138, 0
  %140 = xor i1 %136, %139
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %144 = select i1 %140, i64 %131, i64 %129
  store i64 %144, i64* %143, align 8, !tbaa !2428
  %145 = load i8, i8* %BRANCH_TAKEN
  %146 = icmp eq i8 %145, 1
  br i1 %146, label %block_400ca7, label %block_400c45

block_400c17:                                     ; preds = %block_400c07
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 24
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 7
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i32*
  store i32 0, i32* %151
  br label %block_400c1e

block_400ccd:                                     ; preds = %block_400c07
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 1
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %155 = load i64, i64* %154, align 8, !tbaa !2428
  %156 = add i64 %155, 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %RBP, align 8, !tbaa !2428
  store i64 %156, i64* %154, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 1
  store i64 %160, i64* %PC
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %163 = load i64, i64* %162, align 8, !tbaa !2428
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %161, align 8, !tbaa !2428
  %166 = add i64 %163, 8
  store i64 %166, i64* %162, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400c2e:                                     ; preds = %block_400c1e
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 28
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 7
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i32*
  store i32 0, i32* %171
  br label %block_400c35

block_400c07:                                     ; preds = %block_400cba, %block_400bf0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400bf0 ], [ %MEMORY.2, %block_400cba ]
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 20
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = load i32, i32* %EAX
  %186 = zext i32 %185 to i64
  %187 = load i64, i64* %RCX
  %188 = add i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  %192 = load i32, i32* %191
  %193 = sub i32 %185, %192
  %194 = icmp ult i32 %185, %192
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %195, i8* %196, align 1, !tbaa !2432
  %197 = and i32 %193, 255
  %198 = call i32 @llvm.ctpop.i32(i32 %197) #16
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  %201 = xor i8 %200, 1
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %201, i8* %202, align 1, !tbaa !2446
  %203 = xor i32 %192, %185
  %204 = xor i32 %203, %193
  %205 = lshr i32 %204, 4
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %207, i8* %208, align 1, !tbaa !2447
  %209 = icmp eq i32 %193, 0
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %210, i8* %211, align 1, !tbaa !2448
  %212 = lshr i32 %193, 31
  %213 = trunc i32 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = lshr i32 %185, 31
  %216 = lshr i32 %192, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %212, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %221, i8* %222, align 1, !tbaa !2450
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 188
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 6
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 6
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %230 = load i8, i8* %229, align 1, !tbaa !2449
  %231 = icmp ne i8 %230, 0
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %233 = load i8, i8* %232, align 1, !tbaa !2450
  %234 = icmp ne i8 %233, 0
  %235 = xor i1 %231, %234
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %239 = select i1 %235, i64 %226, i64 %224
  store i64 %239, i64* %238, align 8, !tbaa !2428
  %240 = load i8, i8* %BRANCH_TAKEN
  %241 = icmp eq i8 %240, 1
  br i1 %241, label %block_400ccd, label %block_400c17

block_400ca7:                                     ; preds = %block_400c35
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 5
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %243, i64* %246, align 8, !tbaa !2428
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 24
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 3
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i32*
  %252 = load i32, i32* %251
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = trunc i64 %254 to i32
  %258 = add i32 1, %257
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = icmp ult i32 %258, %257
  %261 = icmp ult i32 %258, 1
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %263, i8* %264, align 1, !tbaa !2432
  %265 = and i32 %258, 255
  %266 = call i32 @llvm.ctpop.i32(i32 %265) #16
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %269, i8* %270, align 1, !tbaa !2446
  %271 = xor i64 1, %254
  %272 = trunc i64 %271 to i32
  %273 = xor i32 %272, %258
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %276, i8* %277, align 1, !tbaa !2447
  %278 = icmp eq i32 %258, 0
  %279 = zext i1 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %279, i8* %280, align 1, !tbaa !2448
  %281 = lshr i32 %258, 31
  %282 = trunc i32 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %282, i8* %283, align 1, !tbaa !2449
  %284 = lshr i32 %257, 31
  %285 = xor i32 %281, %284
  %286 = add nuw nsw i32 %285, %281
  %287 = icmp eq i32 %286, 2
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %288, i8* %289, align 1, !tbaa !2450
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 24
  %292 = load i32, i32* %EAX
  %293 = zext i32 %292 to i64
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %291 to i32*
  store i32 %292, i32* %296
  %297 = load i64, i64* %PC
  %298 = sub i64 %297, 151
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %298, i64* %301, align 8, !tbaa !2428
  br label %block_400c1e

block_400c1e:                                     ; preds = %block_400ca7, %block_400c17
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400c17 ], [ %MEMORY.0, %block_400ca7 ]
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 24
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = load i32, i32* %EAX
  %316 = zext i32 %315 to i64
  %317 = load i64, i64* %RCX
  %318 = add i64 %317, 16
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = sub i32 %315, %322
  %324 = icmp ult i32 %315, %322
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %325, i8* %326, align 1, !tbaa !2432
  %327 = and i32 %323, 255
  %328 = call i32 @llvm.ctpop.i32(i32 %327) #16
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %331, i8* %332, align 1, !tbaa !2446
  %333 = xor i32 %322, %315
  %334 = xor i32 %333, %323
  %335 = lshr i32 %334, 4
  %336 = trunc i32 %335 to i8
  %337 = and i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %337, i8* %338, align 1, !tbaa !2447
  %339 = icmp eq i32 %323, 0
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %340, i8* %341, align 1, !tbaa !2448
  %342 = lshr i32 %323, 31
  %343 = trunc i32 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %343, i8* %344, align 1, !tbaa !2449
  %345 = lshr i32 %315, 31
  %346 = lshr i32 %322, 31
  %347 = xor i32 %346, %345
  %348 = xor i32 %342, %345
  %349 = add nuw nsw i32 %348, %347
  %350 = icmp eq i32 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 146
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 6
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 6
  store i64 %358, i64* %PC
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %360 = load i8, i8* %359, align 1, !tbaa !2449
  %361 = icmp ne i8 %360, 0
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %363 = load i8, i8* %362, align 1, !tbaa !2450
  %364 = icmp ne i8 %363, 0
  %365 = xor i1 %361, %364
  %366 = xor i1 %365, true
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %369 = select i1 %365, i64 %356, i64 %354
  store i64 %369, i64* %368, align 8, !tbaa !2428
  %370 = load i8, i8* %BRANCH_TAKEN
  %371 = icmp eq i8 %370, 1
  br i1 %371, label %block_400cba, label %block_400c2e

block_400cba:                                     ; preds = %block_400c1e
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 5
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  store i64 %375, i64* %PC
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %376, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 20
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = trunc i64 %384 to i32
  %388 = add i32 1, %387
  %389 = zext i32 %388 to i64
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = icmp ult i32 %388, %387
  %391 = icmp ult i32 %388, 1
  %392 = or i1 %390, %391
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %393, i8* %394, align 1, !tbaa !2432
  %395 = and i32 %388, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = xor i64 1, %384
  %402 = trunc i64 %401 to i32
  %403 = xor i32 %402, %388
  %404 = lshr i32 %403, 4
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %406, i8* %407, align 1, !tbaa !2447
  %408 = icmp eq i32 %388, 0
  %409 = zext i1 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %409, i8* %410, align 1, !tbaa !2448
  %411 = lshr i32 %388, 31
  %412 = trunc i32 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %412, i8* %413, align 1, !tbaa !2449
  %414 = lshr i32 %387, 31
  %415 = xor i32 %411, %414
  %416 = add nuw nsw i32 %415, %411
  %417 = icmp eq i32 %416, 2
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %418, i8* %419, align 1, !tbaa !2450
  %420 = load i64, i64* %RBP
  %421 = sub i64 %420, 20
  %422 = load i32, i32* %EAX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %421 to i32*
  store i32 %422, i32* %426
  %427 = load i64, i64* %PC
  %428 = sub i64 %427, 193
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 5
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %428, i64* %431, align 8, !tbaa !2428
  br label %block_400c07

block_400c45:                                     ; preds = %block_400c35
  %432 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to float*
  %438 = load float, float* %437
  %439 = bitcast i8* %432 to float*
  store float %438, float* %439, align 1, !tbaa !2452
  %440 = getelementptr inbounds i8, i8* %432, i64 4
  %441 = bitcast i8* %440 to float*
  store float 0.000000e+00, float* %441, align 1, !tbaa !2452
  %442 = getelementptr inbounds i8, i8* %432, i64 8
  %443 = bitcast i8* %442 to float*
  store float 0.000000e+00, float* %443, align 1, !tbaa !2452
  %444 = getelementptr inbounds i8, i8* %432, i64 12
  %445 = bitcast i8* %444 to float*
  store float 0.000000e+00, float* %445, align 1, !tbaa !2452
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 12
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 8
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RDX, align 8, !tbaa !2428
  %470 = load i64, i64* %RCX
  %471 = load i64, i64* %RDX
  %472 = add i64 %471, 12
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = shl i64 %470, 32
  %478 = ashr exact i64 %477, 32
  %479 = sext i32 %476 to i64
  %480 = mul nsw i64 %479, %478
  %481 = trunc i64 %480 to i32
  %482 = and i64 %480, 4294967295
  store i64 %482, i64* %RCX, align 8, !tbaa !2428
  %483 = shl i64 %480, 32
  %484 = ashr exact i64 %483, 32
  %485 = icmp ne i64 %484, %480
  %486 = zext i1 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %486, i8* %487, align 1, !tbaa !2432
  %488 = and i32 %481, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2446
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2447
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %495, align 1, !tbaa !2448
  %496 = lshr i32 %481, 31
  %497 = trunc i32 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2449
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %486, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RDX, align 8, !tbaa !2428
  %506 = load i64, i64* %RCX
  %507 = load i64, i64* %RDX
  %508 = add i64 %507, 16
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i32*
  %512 = load i32, i32* %511
  %513 = shl i64 %506, 32
  %514 = ashr exact i64 %513, 32
  %515 = sext i32 %512 to i64
  %516 = mul nsw i64 %515, %514
  %517 = trunc i64 %516 to i32
  %518 = and i64 %516, 4294967295
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = shl i64 %516, 32
  %520 = ashr exact i64 %519, 32
  %521 = icmp ne i64 %520, %516
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %522, i8* %523, align 1, !tbaa !2432
  %524 = and i32 %517, 255
  %525 = call i32 @llvm.ctpop.i32(i32 %524) #16
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %528, i8* %529, align 1, !tbaa !2446
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %530, align 1, !tbaa !2447
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %531, align 1, !tbaa !2448
  %532 = lshr i32 %517, 31
  %533 = trunc i32 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %533, i8* %534, align 1, !tbaa !2449
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %522, i8* %535, align 1, !tbaa !2450
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 8
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %RDX, align 8, !tbaa !2428
  %542 = load i64, i64* %RCX
  %543 = load i64, i64* %RDX
  %544 = add i64 %543, 20
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = shl i64 %542, 32
  %550 = ashr exact i64 %549, 32
  %551 = sext i32 %548 to i64
  %552 = mul nsw i64 %551, %550
  %553 = trunc i64 %552 to i32
  %554 = and i64 %552, 4294967295
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = shl i64 %552, 32
  %556 = ashr exact i64 %555, 32
  %557 = icmp ne i64 %556, %552
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %558, i8* %559, align 1, !tbaa !2432
  %560 = and i32 %553, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2446
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %566, align 1, !tbaa !2447
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %567, align 1, !tbaa !2448
  %568 = lshr i32 %553, 31
  %569 = trunc i32 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %569, i8* %570, align 1, !tbaa !2449
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %558, i8* %571, align 1, !tbaa !2450
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 20
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i32*
  %577 = load i32, i32* %576
  %578 = zext i32 %577 to i64
  store i64 %578, i64* %RSI, align 8, !tbaa !2428
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 8
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RDX, align 8, !tbaa !2428
  %585 = load i64, i64* %RSI
  %586 = load i64, i64* %RDX
  %587 = add i64 %586, 16
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i32*
  %591 = load i32, i32* %590
  %592 = shl i64 %585, 32
  %593 = ashr exact i64 %592, 32
  %594 = sext i32 %591 to i64
  %595 = mul nsw i64 %594, %593
  %596 = trunc i64 %595 to i32
  %597 = and i64 %595, 4294967295
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %598 = shl i64 %595, 32
  %599 = ashr exact i64 %598, 32
  %600 = icmp ne i64 %599, %595
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2432
  %603 = and i32 %596, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2446
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %609, align 1, !tbaa !2447
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %610, align 1, !tbaa !2448
  %611 = lshr i32 %596, 31
  %612 = trunc i32 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %612, i8* %613, align 1, !tbaa !2449
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %601, i8* %614, align 1, !tbaa !2450
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 8
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 4
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = load i64, i64* %RSI
  %622 = load i64, i64* %RDX
  %623 = add i64 %622, 20
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = shl i64 %621, 32
  %629 = ashr exact i64 %628, 32
  %630 = sext i32 %627 to i64
  %631 = mul nsw i64 %630, %629
  %632 = trunc i64 %631 to i32
  %633 = and i64 %631, 4294967295
  store i64 %633, i64* %RSI, align 8, !tbaa !2428
  %634 = shl i64 %631, 32
  %635 = ashr exact i64 %634, 32
  %636 = icmp ne i64 %635, %631
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %637, i8* %638, align 1, !tbaa !2432
  %639 = and i32 %632, 255
  %640 = call i32 @llvm.ctpop.i32(i32 %639) #16
  %641 = trunc i32 %640 to i8
  %642 = and i8 %641, 1
  %643 = xor i8 %642, 1
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %643, i8* %644, align 1, !tbaa !2446
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %645, align 1, !tbaa !2447
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %646, align 1, !tbaa !2448
  %647 = lshr i32 %632, 31
  %648 = trunc i32 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %648, i8* %649, align 1, !tbaa !2449
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %637, i8* %650, align 1, !tbaa !2450
  %651 = load i64, i64* %RCX
  %652 = load i32, i32* %ESI
  %653 = zext i32 %652 to i64
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 2
  store i64 %655, i64* %PC
  %656 = trunc i64 %651 to i32
  %657 = add i32 %652, %656
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RCX, align 8, !tbaa !2428
  %659 = icmp ult i32 %657, %656
  %660 = icmp ult i32 %657, %652
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %662, i8* %663, align 1, !tbaa !2432
  %664 = and i32 %657, 255
  %665 = call i32 @llvm.ctpop.i32(i32 %664) #16
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %668, i8* %669, align 1, !tbaa !2446
  %670 = xor i64 %653, %651
  %671 = trunc i64 %670 to i32
  %672 = xor i32 %671, %657
  %673 = lshr i32 %672, 4
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %675, i8* %676, align 1, !tbaa !2447
  %677 = icmp eq i32 %657, 0
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %678, i8* %679, align 1, !tbaa !2448
  %680 = lshr i32 %657, 31
  %681 = trunc i32 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %681, i8* %682, align 1, !tbaa !2449
  %683 = lshr i32 %656, 31
  %684 = lshr i32 %652, 31
  %685 = xor i32 %680, %683
  %686 = xor i32 %680, %684
  %687 = add nuw nsw i32 %685, %686
  %688 = icmp eq i32 %687, 2
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %689, i8* %690, align 1, !tbaa !2450
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 24
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 8
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RDX, align 8, !tbaa !2428
  %704 = load i64, i64* %RSI
  %705 = load i64, i64* %RDX
  %706 = add i64 %705, 20
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = shl i64 %704, 32
  %712 = ashr exact i64 %711, 32
  %713 = sext i32 %710 to i64
  %714 = mul nsw i64 %713, %712
  %715 = trunc i64 %714 to i32
  %716 = and i64 %714, 4294967295
  store i64 %716, i64* %RSI, align 8, !tbaa !2428
  %717 = shl i64 %714, 32
  %718 = ashr exact i64 %717, 32
  %719 = icmp ne i64 %718, %714
  %720 = zext i1 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %720, i8* %721, align 1, !tbaa !2432
  %722 = and i32 %715, 255
  %723 = call i32 @llvm.ctpop.i32(i32 %722) #16
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = xor i8 %725, 1
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %726, i8* %727, align 1, !tbaa !2446
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %728, align 1, !tbaa !2447
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %729, align 1, !tbaa !2448
  %730 = lshr i32 %715, 31
  %731 = trunc i32 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %720, i8* %733, align 1, !tbaa !2450
  %734 = load i64, i64* %RCX
  %735 = load i32, i32* %ESI
  %736 = zext i32 %735 to i64
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 2
  store i64 %738, i64* %PC
  %739 = trunc i64 %734 to i32
  %740 = add i32 %735, %739
  %741 = zext i32 %740 to i64
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %742 = icmp ult i32 %740, %739
  %743 = icmp ult i32 %740, %735
  %744 = or i1 %742, %743
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %745, i8* %746, align 1, !tbaa !2432
  %747 = and i32 %740, 255
  %748 = call i32 @llvm.ctpop.i32(i32 %747) #16
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %751, i8* %752, align 1, !tbaa !2446
  %753 = xor i64 %736, %734
  %754 = trunc i64 %753 to i32
  %755 = xor i32 %754, %740
  %756 = lshr i32 %755, 4
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %758, i8* %759, align 1, !tbaa !2447
  %760 = icmp eq i32 %740, 0
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %761, i8* %762, align 1, !tbaa !2448
  %763 = lshr i32 %740, 31
  %764 = trunc i32 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %764, i8* %765, align 1, !tbaa !2449
  %766 = lshr i32 %739, 31
  %767 = lshr i32 %735, 31
  %768 = xor i32 %763, %766
  %769 = xor i32 %763, %767
  %770 = add nuw nsw i32 %768, %769
  %771 = icmp eq i32 %770, 2
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %772, i8* %773, align 1, !tbaa !2450
  %774 = load i64, i64* %RCX
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 28
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = trunc i64 %774 to i32
  %780 = inttoptr i64 %776 to i32*
  %781 = load i32, i32* %780
  %782 = add i32 %781, %779
  %783 = zext i32 %782 to i64
  store i64 %783, i64* %RCX, align 8, !tbaa !2428
  %784 = icmp ult i32 %782, %779
  %785 = icmp ult i32 %782, %781
  %786 = or i1 %784, %785
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %787, i8* %788, align 1, !tbaa !2432
  %789 = and i32 %782, 255
  %790 = call i32 @llvm.ctpop.i32(i32 %789) #16
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  %793 = xor i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %793, i8* %794, align 1, !tbaa !2446
  %795 = xor i32 %781, %779
  %796 = xor i32 %795, %782
  %797 = lshr i32 %796, 4
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %799, i8* %800, align 1, !tbaa !2447
  %801 = icmp eq i32 %782, 0
  %802 = zext i1 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %802, i8* %803, align 1, !tbaa !2448
  %804 = lshr i32 %782, 31
  %805 = trunc i32 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %805, i8* %806, align 1, !tbaa !2449
  %807 = lshr i32 %779, 31
  %808 = lshr i32 %781, 31
  %809 = xor i32 %804, %807
  %810 = xor i32 %804, %808
  %811 = add nuw nsw i32 %809, %810
  %812 = icmp eq i32 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2450
  %815 = load i32, i32* %ECX
  %816 = zext i32 %815 to i64
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 3
  store i64 %818, i64* %PC
  %819 = shl i64 %816, 32
  %820 = ashr exact i64 %819, 32
  store i64 %820, i64* %RDX, align 8, !tbaa !2428
  %821 = load i64, i64* %RAX
  %822 = load i64, i64* %RDX
  %823 = mul i64 %822, 4
  %824 = add i64 %823, %821
  %825 = bitcast %union.vec128_t* %XMM0 to i8*
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = bitcast i8* %825 to <2 x float>*
  %829 = load <2 x float>, <2 x float>* %828, align 1
  %830 = extractelement <2 x float> %829, i32 0
  %831 = inttoptr i64 %824 to float*
  store float %830, float* %831
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 28
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 3
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RAX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 3
  store i64 %841, i64* %PC
  %842 = trunc i64 %839 to i32
  %843 = add i32 1, %842
  %844 = zext i32 %843 to i64
  store i64 %844, i64* %RAX, align 8, !tbaa !2428
  %845 = icmp ult i32 %843, %842
  %846 = icmp ult i32 %843, 1
  %847 = or i1 %845, %846
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %848, i8* %849, align 1, !tbaa !2432
  %850 = and i32 %843, 255
  %851 = call i32 @llvm.ctpop.i32(i32 %850) #16
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = xor i8 %853, 1
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %854, i8* %855, align 1, !tbaa !2446
  %856 = xor i64 1, %839
  %857 = trunc i64 %856 to i32
  %858 = xor i32 %857, %843
  %859 = lshr i32 %858, 4
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %861, i8* %862, align 1, !tbaa !2447
  %863 = icmp eq i32 %843, 0
  %864 = zext i1 %863 to i8
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %864, i8* %865, align 1, !tbaa !2448
  %866 = lshr i32 %843, 31
  %867 = trunc i32 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %867, i8* %868, align 1, !tbaa !2449
  %869 = lshr i32 %842, 31
  %870 = xor i32 %866, %869
  %871 = add nuw nsw i32 %870, %866
  %872 = icmp eq i32 %871, 2
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %873, i8* %874, align 1, !tbaa !2450
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 28
  %877 = load i32, i32* %EAX
  %878 = zext i32 %877 to i64
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %876 to i32*
  store i32 %877, i32* %881
  %882 = load i64, i64* %PC
  %883 = sub i64 %882, 109
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 5
  store i64 %885, i64* %PC
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %883, i64* %886, align 8, !tbaa !2428
  br label %block_400c35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400660_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400660:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 17
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %R8D = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 17
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %R8 = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 19
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R9 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 21
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R10 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 23
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R11 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %56 to %"class.std::bitset"*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = load i64, i64* %RBP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 1
  store i64 %61, i64* %PC
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %63 = load i64, i64* %62, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %59, i64* %65
  store i64 %64, i64* %62, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC
  %72 = sub i64 %69, 176
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  %73 = icmp ult i64 %69, 176
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %74, i8* %75, align 1, !tbaa !2432
  %76 = trunc i64 %72 to i32
  %77 = and i32 %76, 255
  %78 = call i32 @llvm.ctpop.i32(i32 %77) #16
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = xor i64 176, %69
  %84 = xor i64 %83, %72
  %85 = lshr i64 %84, 4
  %86 = trunc i64 %85 to i8
  %87 = and i8 %86, 1
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %87, i8* %88, align 1, !tbaa !2447
  %89 = icmp eq i64 %72, 0
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %90, i8* %91, align 1, !tbaa !2448
  %92 = lshr i64 %72, 63
  %93 = trunc i64 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %93, i8* %94, align 1, !tbaa !2449
  %95 = lshr i64 %69, 63
  %96 = xor i64 %92, %95
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2450
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 40), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 4
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 0, i32* %107
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i32, i32* %EDI
  %111 = zext i32 %110 to i64
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %109 to i32*
  store i32 %110, i32* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 16
  %117 = load i64, i64* %RSI
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %116 to i64*
  store i64 %117, i64* %120
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 68
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 7
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i32*
  store i32 64, i32* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 64, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 60
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 128, i32* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 68
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 48
  %145 = load i32, i32* %EDI
  %146 = zext i32 %145 to i64
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %144 to i32*
  store i32 %145, i32* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDI, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 52
  %159 = load i32, i32* %EDI
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %163
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 60
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  %169 = load i32, i32* %168
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RDI, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 56
  %173 = load i32, i32* %EDI
  %174 = zext i32 %173 to i64
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %177
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 48
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 3
  store i64 %187, i64* %PC
  %188 = trunc i64 %185 to i32
  %189 = sub i32 %188, 1
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RDI, align 8, !tbaa !2428
  %191 = icmp ult i32 %188, 1
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2432
  %194 = and i32 %189, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2446
  %200 = xor i64 1, %185
  %201 = trunc i64 %200 to i32
  %202 = xor i32 %201, %189
  %203 = lshr i32 %202, 4
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2447
  %207 = icmp eq i32 %189, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2448
  %210 = lshr i32 %189, 31
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2449
  %213 = lshr i32 %188, 31
  %214 = xor i32 %210, %213
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2450
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 36
  %221 = load i32, i32* %EDI
  %222 = zext i32 %221 to i64
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %220 to i32*
  store i32 %221, i32* %225
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 52
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RDI, align 8, !tbaa !2428
  %233 = load i64, i64* %RDI
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = trunc i64 %233 to i32
  %237 = sub i32 %236, 1
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  %239 = icmp ult i32 %236, 1
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %240, i8* %241, align 1, !tbaa !2432
  %242 = and i32 %237, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = xor i64 1, %233
  %249 = trunc i64 %248 to i32
  %250 = xor i32 %249, %237
  %251 = lshr i32 %250, 4
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2447
  %255 = icmp eq i32 %237, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2448
  %258 = lshr i32 %237, 31
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2449
  %261 = lshr i32 %236, 31
  %262 = xor i32 %258, %261
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 40
  %269 = load i32, i32* %EDI
  %270 = zext i32 %269 to i64
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 3
  store i64 %272, i64* %PC
  %273 = inttoptr i64 %268 to i32*
  store i32 %269, i32* %273
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 56
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 3
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to i32*
  %279 = load i32, i32* %278
  %280 = zext i32 %279 to i64
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %281 = load i64, i64* %RDI
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = trunc i64 %281 to i32
  %285 = sub i32 %284, 1
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = icmp ult i32 %284, 1
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2432
  %290 = and i32 %285, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2446
  %296 = xor i64 1, %281
  %297 = trunc i64 %296 to i32
  %298 = xor i32 %297, %285
  %299 = lshr i32 %298, 4
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %301, i8* %302, align 1, !tbaa !2447
  %303 = icmp eq i32 %285, 0
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = lshr i32 %285, 31
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i32 %284, 31
  %310 = xor i32 %306, %309
  %311 = add nuw nsw i32 %310, %309
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 44
  %317 = load i32, i32* %EDI
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %316 to i32*
  store i32 %317, i32* %321
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 48
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RSI, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 52
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RDX, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 56
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  store i64 %343, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 2
  store i64 %347, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %348 = load i64, i64* %PC
  %349 = sub i64 %348, 435
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %351, i64* %357
  store i64 %356, i64* %354, align 8, !tbaa !2428
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %349, i64* %358, align 8, !tbaa !2428
  %359 = load i64, i64* %PC
  %360 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %359, %struct.Memory* %2)
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 10
  store i64 %362, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 74), i64* %RDI, align 8, !tbaa !2428
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 36
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 3
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RSI, align 8, !tbaa !2428
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 40
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 44
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 108
  %386 = load i32, i32* %EAX
  %387 = zext i32 %386 to i64
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 3
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %385 to i32*
  store i32 %386, i32* %390
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 2
  store i64 %392, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %393 = load i64, i64* %PC
  %394 = sub i64 %393, 464
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 5
  store i64 %398, i64* %PC
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %400 = load i64, i64* %399, align 8, !tbaa !2428
  %401 = add i64 %400, -8
  %402 = inttoptr i64 %401 to i64*
  store i64 %396, i64* %402
  store i64 %401, i64* %399, align 8, !tbaa !2428
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %394, i64* %403, align 8, !tbaa !2428
  %404 = load i64, i64* %PC
  %405 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %404, %struct.Memory* %360)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 10
  store i64 %407, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 48
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RDX, align 8, !tbaa !2428
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 52
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to i32*
  %422 = load i32, i32* %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RCX, align 8, !tbaa !2428
  %424 = bitcast i32* %R8D to i64*
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 56
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %424, align 8, !tbaa !2428
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 112
  %434 = load i32, i32* %EAX
  %435 = zext i32 %434 to i64
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %433 to i32*
  store i32 %434, i32* %438
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 847
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %446 = load i64, i64* %445, align 8, !tbaa !2428
  %447 = add i64 %446, -8
  %448 = inttoptr i64 %447 to i64*
  store i64 %442, i64* %448
  store i64 %447, i64* %445, align 8, !tbaa !2428
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %440, i64* %449, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %450, %struct.Memory* %405)
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 10
  store i64 %453, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 48
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 52
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = bitcast i32* %R8D to i64*
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 56
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %470, align 8, !tbaa !2428
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 116
  %480 = load i32, i32* %EAX
  %481 = zext i32 %480 to i64
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %479 to i32*
  store i32 %480, i32* %484
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 814
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %492 = load i64, i64* %491, align 8, !tbaa !2428
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %488, i64* %494
  store i64 %493, i64* %491, align 8, !tbaa !2428
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %486, i64* %495, align 8, !tbaa !2428
  %496 = load i64, i64* %PC
  %497 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %496, %struct.Memory* %451)
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 10
  store i64 %499, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 48
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 3
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i32*
  %507 = load i32, i32* %506
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RDX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 52
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RCX, align 8, !tbaa !2428
  %516 = bitcast i32* %R8D to i64*
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 56
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 4
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %516, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 120
  %526 = load i32, i32* %EAX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %530
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 781
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %542, %struct.Memory* %497)
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 10
  store i64 %545, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 48
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %RDX, align 8, !tbaa !2428
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 52
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = bitcast i32* %R8D to i64*
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 56
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %562, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 124
  %572 = load i32, i32* %EAX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %571 to i32*
  store i32 %572, i32* %576
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 748
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 5
  store i64 %582, i64* %PC
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %584 = load i64, i64* %583, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %580, i64* %586
  store i64 %585, i64* %583, align 8, !tbaa !2428
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %578, i64* %587, align 8, !tbaa !2428
  %588 = load i64, i64* %PC
  %589 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %588, %struct.Memory* %543)
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 10
  store i64 %591, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 5
  store i64 %593, i64* %PC
  store i64 4, i64* %RSI, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP
  %595 = sub i64 %594, 48
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i32*
  %599 = load i32, i32* %598
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RDX, align 8, !tbaa !2428
  %601 = load i64, i64* %RBP
  %602 = sub i64 %601, 52
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 3
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %602 to i32*
  %606 = load i32, i32* %605
  %607 = zext i32 %606 to i64
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = bitcast i32* %R8D to i64*
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 56
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i32*
  %614 = load i32, i32* %613
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %608, align 8, !tbaa !2428
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 128
  %618 = load i32, i32* %EAX
  %619 = zext i32 %618 to i64
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %617 to i32*
  store i32 %618, i32* %622
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 715
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %630 = load i64, i64* %629, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %626, i64* %632
  store i64 %631, i64* %629, align 8, !tbaa !2428
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %633, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %634, %struct.Memory* %589)
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 10
  store i64 %637, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 48
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RDX, align 8, !tbaa !2428
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 52
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = bitcast i32* %R8D to i64*
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 56
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  %660 = load i32, i32* %659
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %654, align 8, !tbaa !2428
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 132
  %664 = load i32, i32* %EAX
  %665 = zext i32 %664 to i64
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 6
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %663 to i32*
  store i32 %664, i32* %668
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 679
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %676 = load i64, i64* %675, align 8, !tbaa !2428
  %677 = add i64 %676, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %672, i64* %678
  store i64 %677, i64* %675, align 8, !tbaa !2428
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %670, i64* %679, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  %681 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %680, %struct.Memory* %635)
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 10
  store i64 %683, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 48
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %687 to i32*
  %691 = load i32, i32* %690
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RDX, align 8, !tbaa !2428
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 52
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = bitcast i32* %R8D to i64*
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 56
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %700, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 136
  %710 = load i32, i32* %EAX
  %711 = zext i32 %710 to i64
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 6
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %709 to i32*
  store i32 %710, i32* %714
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 643
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %722 = load i64, i64* %721, align 8, !tbaa !2428
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %718, i64* %724
  store i64 %723, i64* %721, align 8, !tbaa !2428
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %725, align 8, !tbaa !2428
  %726 = load i64, i64* %PC
  %727 = call %struct.Memory* @sub_400a60_newMat_renamed_(%struct.State* %0, i64 %726, %struct.Memory* %681)
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 10
  store i64 %729, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 140
  %732 = load i32, i32* %EAX
  %733 = zext i32 %732 to i64
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  store i64 %735, i64* %PC
  %736 = inttoptr i64 %731 to i32*
  store i32 %732, i32* %736
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 766
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 5
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %744 = load i64, i64* %743, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %740, i64* %746
  store i64 %745, i64* %743, align 8, !tbaa !2428
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %738, i64* %747, align 8, !tbaa !2428
  %748 = load i64, i64* %PC
  %749 = call %struct.Memory* @sub_400af0_mat_set_init_renamed_(%struct.State* %0, i64 %748, %struct.Memory* %727)
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 10
  store i64 %751, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %RSI
  %753 = load i32, i32* %ESI
  %754 = zext i32 %753 to i64
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 2
  store i64 %756, i64* %PC
  %757 = xor i64 %754, %752
  %758 = trunc i64 %757 to i32
  %759 = and i64 %757, 4294967295
  store i64 %759, i64* %RSI, align 8, !tbaa !2428
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %760, align 1, !tbaa !2432
  %761 = and i32 %758, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #16
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2446
  %767 = icmp eq i32 %758, 0
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %768, i8* %769, align 1, !tbaa !2448
  %770 = lshr i32 %758, 31
  %771 = trunc i32 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %771, i8* %772, align 1, !tbaa !2449
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %773, align 1, !tbaa !2450
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %774, align 1, !tbaa !2447
  %775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 8
  store i64 %777, i64* %PC
  %778 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %779 = bitcast i8* %775 to float*
  store float %778, float* %779, align 1, !tbaa !2452
  %780 = getelementptr inbounds i8, i8* %775, i64 4
  %781 = bitcast i8* %780 to float*
  store float 0.000000e+00, float* %781, align 1, !tbaa !2452
  %782 = getelementptr inbounds i8, i8* %775, i64 8
  %783 = bitcast i8* %782 to float*
  store float 0.000000e+00, float* %783, align 1, !tbaa !2452
  %784 = getelementptr inbounds i8, i8* %775, i64 12
  %785 = bitcast i8* %784 to float*
  store float 0.000000e+00, float* %785, align 1, !tbaa !2452
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 997
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %793 = load i64, i64* %792, align 8, !tbaa !2428
  %794 = add i64 %793, -8
  %795 = inttoptr i64 %794 to i64*
  store i64 %789, i64* %795
  store i64 %794, i64* %792, align 8, !tbaa !2428
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %787, i64* %796, align 8, !tbaa !2428
  %797 = load i64, i64* %PC
  %798 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %797, %struct.Memory* %749)
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 10
  store i64 %800, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %801 = load i64, i64* %RSI
  %802 = load i32, i32* %ESI
  %803 = zext i32 %802 to i64
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 2
  store i64 %805, i64* %PC
  %806 = xor i64 %803, %801
  %807 = trunc i64 %806 to i32
  %808 = and i64 %806, 4294967295
  store i64 %808, i64* %RSI, align 8, !tbaa !2428
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %809, align 1, !tbaa !2432
  %810 = and i32 %807, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2446
  %816 = icmp eq i32 %807, 0
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %817, i8* %818, align 1, !tbaa !2448
  %819 = lshr i32 %807, 31
  %820 = trunc i32 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %820, i8* %821, align 1, !tbaa !2449
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %822, align 1, !tbaa !2450
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %823, align 1, !tbaa !2447
  %824 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %825 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %826 = bitcast %union.vec128_t* %XMM0 to i8*
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = bitcast i8* %825 to i64*
  %830 = load i64, i64* %829, align 1
  %831 = getelementptr inbounds i8, i8* %825, i64 8
  %832 = bitcast i8* %831 to i64*
  %833 = load i64, i64* %832, align 1
  %834 = bitcast i8* %826 to i64*
  %835 = load i64, i64* %834, align 1
  %836 = getelementptr inbounds i8, i8* %826, i64 8
  %837 = bitcast i8* %836 to i64*
  %838 = load i64, i64* %837, align 1
  %839 = xor i64 %835, %830
  %840 = xor i64 %838, %833
  %841 = trunc i64 %839 to i32
  %842 = lshr i64 %839, 32
  %843 = trunc i64 %842 to i32
  %844 = bitcast i8* %824 to i32*
  store i32 %841, i32* %844, align 1, !tbaa !2454
  %845 = getelementptr inbounds i8, i8* %824, i64 4
  %846 = bitcast i8* %845 to i32*
  store i32 %843, i32* %846, align 1, !tbaa !2454
  %847 = trunc i64 %840 to i32
  %848 = getelementptr inbounds i8, i8* %824, i64 8
  %849 = bitcast i8* %848 to i32*
  store i32 %847, i32* %849, align 1, !tbaa !2454
  %850 = lshr i64 %840, 32
  %851 = trunc i64 %850 to i32
  %852 = getelementptr inbounds i8, i8* %824, i64 12
  %853 = bitcast i8* %852 to i32*
  store i32 %851, i32* %853, align 1, !tbaa !2454
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 977
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %861 = load i64, i64* %860, align 8, !tbaa !2428
  %862 = add i64 %861, -8
  %863 = inttoptr i64 %862 to i64*
  store i64 %857, i64* %863
  store i64 %862, i64* %860, align 8, !tbaa !2428
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %864, align 8, !tbaa !2428
  %865 = load i64, i64* %PC
  %866 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %865, %struct.Memory* %798)
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 10
  store i64 %868, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RSI
  %870 = load i32, i32* %ESI
  %871 = zext i32 %870 to i64
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 2
  store i64 %873, i64* %PC
  %874 = xor i64 %871, %869
  %875 = trunc i64 %874 to i32
  %876 = and i64 %874, 4294967295
  store i64 %876, i64* %RSI, align 8, !tbaa !2428
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %877, align 1, !tbaa !2432
  %878 = and i32 %875, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = icmp eq i32 %875, 0
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %885, i8* %886, align 1, !tbaa !2448
  %887 = lshr i32 %875, 31
  %888 = trunc i32 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %888, i8* %889, align 1, !tbaa !2449
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %890, align 1, !tbaa !2450
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %891, align 1, !tbaa !2447
  %892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %894 = bitcast %union.vec128_t* %XMM0 to i8*
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = bitcast i8* %893 to i64*
  %898 = load i64, i64* %897, align 1
  %899 = getelementptr inbounds i8, i8* %893, i64 8
  %900 = bitcast i8* %899 to i64*
  %901 = load i64, i64* %900, align 1
  %902 = bitcast i8* %894 to i64*
  %903 = load i64, i64* %902, align 1
  %904 = getelementptr inbounds i8, i8* %894, i64 8
  %905 = bitcast i8* %904 to i64*
  %906 = load i64, i64* %905, align 1
  %907 = xor i64 %903, %898
  %908 = xor i64 %906, %901
  %909 = trunc i64 %907 to i32
  %910 = lshr i64 %907, 32
  %911 = trunc i64 %910 to i32
  %912 = bitcast i8* %892 to i32*
  store i32 %909, i32* %912, align 1, !tbaa !2454
  %913 = getelementptr inbounds i8, i8* %892, i64 4
  %914 = bitcast i8* %913 to i32*
  store i32 %911, i32* %914, align 1, !tbaa !2454
  %915 = trunc i64 %908 to i32
  %916 = getelementptr inbounds i8, i8* %892, i64 8
  %917 = bitcast i8* %916 to i32*
  store i32 %915, i32* %917, align 1, !tbaa !2454
  %918 = lshr i64 %908, 32
  %919 = trunc i64 %918 to i32
  %920 = getelementptr inbounds i8, i8* %892, i64 12
  %921 = bitcast i8* %920 to i32*
  store i32 %919, i32* %921, align 1, !tbaa !2454
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 957
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %929 = load i64, i64* %928, align 8, !tbaa !2428
  %930 = add i64 %929, -8
  %931 = inttoptr i64 %930 to i64*
  store i64 %925, i64* %931
  store i64 %930, i64* %928, align 8, !tbaa !2428
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %923, i64* %932, align 8, !tbaa !2428
  %933 = load i64, i64* %PC
  %934 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %933, %struct.Memory* %866)
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 10
  store i64 %936, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %937 = load i64, i64* %RSI
  %938 = load i32, i32* %ESI
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 2
  store i64 %941, i64* %PC
  %942 = xor i64 %939, %937
  %943 = trunc i64 %942 to i32
  %944 = and i64 %942, 4294967295
  store i64 %944, i64* %RSI, align 8, !tbaa !2428
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %945, align 1, !tbaa !2432
  %946 = and i32 %943, 255
  %947 = call i32 @llvm.ctpop.i32(i32 %946) #16
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %950, i8* %951, align 1, !tbaa !2446
  %952 = icmp eq i32 %943, 0
  %953 = zext i1 %952 to i8
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %953, i8* %954, align 1, !tbaa !2448
  %955 = lshr i32 %943, 31
  %956 = trunc i32 %955 to i8
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %956, i8* %957, align 1, !tbaa !2449
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %958, align 1, !tbaa !2450
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %959, align 1, !tbaa !2447
  %960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 8
  store i64 %962, i64* %PC
  %963 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %964 = bitcast i8* %960 to float*
  store float %963, float* %964, align 1, !tbaa !2452
  %965 = getelementptr inbounds i8, i8* %960, i64 4
  %966 = bitcast i8* %965 to float*
  store float 0.000000e+00, float* %966, align 1, !tbaa !2452
  %967 = getelementptr inbounds i8, i8* %960, i64 8
  %968 = bitcast i8* %967 to float*
  store float 0.000000e+00, float* %968, align 1, !tbaa !2452
  %969 = getelementptr inbounds i8, i8* %960, i64 12
  %970 = bitcast i8* %969 to float*
  store float 0.000000e+00, float* %970, align 1, !tbaa !2452
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 932
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 5
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 5
  store i64 %976, i64* %PC
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %978 = load i64, i64* %977, align 8, !tbaa !2428
  %979 = add i64 %978, -8
  %980 = inttoptr i64 %979 to i64*
  store i64 %974, i64* %980
  store i64 %979, i64* %977, align 8, !tbaa !2428
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %972, i64* %981, align 8, !tbaa !2428
  %982 = load i64, i64* %PC
  %983 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %982, %struct.Memory* %934)
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 10
  store i64 %985, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  store i64 %987, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 8
  store i64 %990, i64* %PC
  %991 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %992 = bitcast i8* %988 to float*
  store float %991, float* %992, align 1, !tbaa !2452
  %993 = getelementptr inbounds i8, i8* %988, i64 4
  %994 = bitcast i8* %993 to float*
  store float 0.000000e+00, float* %994, align 1, !tbaa !2452
  %995 = getelementptr inbounds i8, i8* %988, i64 8
  %996 = bitcast i8* %995 to float*
  store float 0.000000e+00, float* %996, align 1, !tbaa !2452
  %997 = getelementptr inbounds i8, i8* %988, i64 12
  %998 = bitcast i8* %997 to float*
  store float 0.000000e+00, float* %998, align 1, !tbaa !2452
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 904
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 5
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  store i64 %1004, i64* %PC
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1006 = load i64, i64* %1005, align 8, !tbaa !2428
  %1007 = add i64 %1006, -8
  %1008 = inttoptr i64 %1007 to i64*
  store i64 %1002, i64* %1008
  store i64 %1007, i64* %1005, align 8, !tbaa !2428
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1000, i64* %1009, align 8, !tbaa !2428
  %1010 = load i64, i64* %PC
  %1011 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1010, %struct.Memory* %983)
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 10
  store i64 %1013, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 8
  store i64 %1018, i64* %PC
  %1019 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %1020 = bitcast i8* %1016 to float*
  store float %1019, float* %1020, align 1, !tbaa !2452
  %1021 = getelementptr inbounds i8, i8* %1016, i64 4
  %1022 = bitcast i8* %1021 to float*
  store float 0.000000e+00, float* %1022, align 1, !tbaa !2452
  %1023 = getelementptr inbounds i8, i8* %1016, i64 8
  %1024 = bitcast i8* %1023 to float*
  store float 0.000000e+00, float* %1024, align 1, !tbaa !2452
  %1025 = getelementptr inbounds i8, i8* %1016, i64 12
  %1026 = bitcast i8* %1025 to float*
  store float 0.000000e+00, float* %1026, align 1, !tbaa !2452
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 876
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 5
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1034 = load i64, i64* %1033, align 8, !tbaa !2428
  %1035 = add i64 %1034, -8
  %1036 = inttoptr i64 %1035 to i64*
  store i64 %1030, i64* %1036
  store i64 %1035, i64* %1033, align 8, !tbaa !2428
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1028, i64* %1037, align 8, !tbaa !2428
  %1038 = load i64, i64* %PC
  %1039 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1038, %struct.Memory* %1011)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 10
  store i64 %1041, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 5
  store i64 %1043, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %1044 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 8
  store i64 %1046, i64* %PC
  %1047 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 8) to float*)
  %1048 = bitcast i8* %1044 to float*
  store float %1047, float* %1048, align 1, !tbaa !2452
  %1049 = getelementptr inbounds i8, i8* %1044, i64 4
  %1050 = bitcast i8* %1049 to float*
  store float 0.000000e+00, float* %1050, align 1, !tbaa !2452
  %1051 = getelementptr inbounds i8, i8* %1044, i64 8
  %1052 = bitcast i8* %1051 to float*
  store float 0.000000e+00, float* %1052, align 1, !tbaa !2452
  %1053 = getelementptr inbounds i8, i8* %1044, i64 12
  %1054 = bitcast i8* %1053 to float*
  store float 0.000000e+00, float* %1054, align 1, !tbaa !2452
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 848
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1062 = load i64, i64* %1061, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1058, i64* %1064
  store i64 %1063, i64* %1061, align 8, !tbaa !2428
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1065, align 8, !tbaa !2428
  %1066 = load i64, i64* %PC
  %1067 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1066, %struct.Memory* %1039)
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 10
  store i64 %1069, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1070 = load i64, i64* %RSI
  %1071 = load i32, i32* %ESI
  %1072 = zext i32 %1071 to i64
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 2
  store i64 %1074, i64* %PC
  %1075 = xor i64 %1072, %1070
  %1076 = trunc i64 %1075 to i32
  %1077 = and i64 %1075, 4294967295
  store i64 %1077, i64* %RSI, align 8, !tbaa !2428
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1078, align 1, !tbaa !2432
  %1079 = and i32 %1076, 255
  %1080 = call i32 @llvm.ctpop.i32(i32 %1079) #16
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = xor i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1083, i8* %1084, align 1, !tbaa !2446
  %1085 = icmp eq i32 %1076, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2448
  %1088 = lshr i32 %1076, 31
  %1089 = trunc i32 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2449
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1091, align 1, !tbaa !2450
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1092, align 1, !tbaa !2447
  %1093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1094 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1095 = bitcast %union.vec128_t* %XMM0 to i8*
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 3
  store i64 %1097, i64* %PC
  %1098 = bitcast i8* %1094 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %1094, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = bitcast i8* %1095 to i64*
  %1104 = load i64, i64* %1103, align 1
  %1105 = getelementptr inbounds i8, i8* %1095, i64 8
  %1106 = bitcast i8* %1105 to i64*
  %1107 = load i64, i64* %1106, align 1
  %1108 = xor i64 %1104, %1099
  %1109 = xor i64 %1107, %1102
  %1110 = trunc i64 %1108 to i32
  %1111 = lshr i64 %1108, 32
  %1112 = trunc i64 %1111 to i32
  %1113 = bitcast i8* %1093 to i32*
  store i32 %1110, i32* %1113, align 1, !tbaa !2454
  %1114 = getelementptr inbounds i8, i8* %1093, i64 4
  %1115 = bitcast i8* %1114 to i32*
  store i32 %1112, i32* %1115, align 1, !tbaa !2454
  %1116 = trunc i64 %1109 to i32
  %1117 = getelementptr inbounds i8, i8* %1093, i64 8
  %1118 = bitcast i8* %1117 to i32*
  store i32 %1116, i32* %1118, align 1, !tbaa !2454
  %1119 = lshr i64 %1109, 32
  %1120 = trunc i64 %1119 to i32
  %1121 = getelementptr inbounds i8, i8* %1093, i64 12
  %1122 = bitcast i8* %1121 to i32*
  store i32 %1120, i32* %1122, align 1, !tbaa !2454
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 828
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1130 = load i64, i64* %1129, align 8, !tbaa !2428
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1126, i64* %1132
  store i64 %1131, i64* %1129, align 8, !tbaa !2428
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1124, i64* %1133, align 8, !tbaa !2428
  %1134 = load i64, i64* %PC
  %1135 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1134, %struct.Memory* %1067)
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 10
  store i64 %1137, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 5
  store i64 %1139, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1141 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1142 = bitcast %union.vec128_t* %XMM0 to i8*
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 3
  store i64 %1144, i64* %PC
  %1145 = bitcast i8* %1141 to i64*
  %1146 = load i64, i64* %1145, align 1
  %1147 = getelementptr inbounds i8, i8* %1141, i64 8
  %1148 = bitcast i8* %1147 to i64*
  %1149 = load i64, i64* %1148, align 1
  %1150 = bitcast i8* %1142 to i64*
  %1151 = load i64, i64* %1150, align 1
  %1152 = getelementptr inbounds i8, i8* %1142, i64 8
  %1153 = bitcast i8* %1152 to i64*
  %1154 = load i64, i64* %1153, align 1
  %1155 = xor i64 %1151, %1146
  %1156 = xor i64 %1154, %1149
  %1157 = trunc i64 %1155 to i32
  %1158 = lshr i64 %1155, 32
  %1159 = trunc i64 %1158 to i32
  %1160 = bitcast i8* %1140 to i32*
  store i32 %1157, i32* %1160, align 1, !tbaa !2454
  %1161 = getelementptr inbounds i8, i8* %1140, i64 4
  %1162 = bitcast i8* %1161 to i32*
  store i32 %1159, i32* %1162, align 1, !tbaa !2454
  %1163 = trunc i64 %1156 to i32
  %1164 = getelementptr inbounds i8, i8* %1140, i64 8
  %1165 = bitcast i8* %1164 to i32*
  store i32 %1163, i32* %1165, align 1, !tbaa !2454
  %1166 = lshr i64 %1156, 32
  %1167 = trunc i64 %1166 to i32
  %1168 = getelementptr inbounds i8, i8* %1140, i64 12
  %1169 = bitcast i8* %1168 to i32*
  store i32 %1167, i32* %1169, align 1, !tbaa !2454
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 805
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 5
  store i64 %1175, i64* %PC
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1177 = load i64, i64* %1176, align 8, !tbaa !2428
  %1178 = add i64 %1177, -8
  %1179 = inttoptr i64 %1178 to i64*
  store i64 %1173, i64* %1179
  store i64 %1178, i64* %1176, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1171, i64* %1180, align 8, !tbaa !2428
  %1181 = load i64, i64* %PC
  %1182 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1181, %struct.Memory* %1135)
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 10
  store i64 %1184, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1189 = bitcast %union.vec128_t* %XMM0 to i8*
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 3
  store i64 %1191, i64* %PC
  %1192 = bitcast i8* %1188 to i64*
  %1193 = load i64, i64* %1192, align 1
  %1194 = getelementptr inbounds i8, i8* %1188, i64 8
  %1195 = bitcast i8* %1194 to i64*
  %1196 = load i64, i64* %1195, align 1
  %1197 = bitcast i8* %1189 to i64*
  %1198 = load i64, i64* %1197, align 1
  %1199 = getelementptr inbounds i8, i8* %1189, i64 8
  %1200 = bitcast i8* %1199 to i64*
  %1201 = load i64, i64* %1200, align 1
  %1202 = xor i64 %1198, %1193
  %1203 = xor i64 %1201, %1196
  %1204 = trunc i64 %1202 to i32
  %1205 = lshr i64 %1202, 32
  %1206 = trunc i64 %1205 to i32
  %1207 = bitcast i8* %1187 to i32*
  store i32 %1204, i32* %1207, align 1, !tbaa !2454
  %1208 = getelementptr inbounds i8, i8* %1187, i64 4
  %1209 = bitcast i8* %1208 to i32*
  store i32 %1206, i32* %1209, align 1, !tbaa !2454
  %1210 = trunc i64 %1203 to i32
  %1211 = getelementptr inbounds i8, i8* %1187, i64 8
  %1212 = bitcast i8* %1211 to i32*
  store i32 %1210, i32* %1212, align 1, !tbaa !2454
  %1213 = lshr i64 %1203, 32
  %1214 = trunc i64 %1213 to i32
  %1215 = getelementptr inbounds i8, i8* %1187, i64 12
  %1216 = bitcast i8* %1215 to i32*
  store i32 %1214, i32* %1216, align 1, !tbaa !2454
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 782
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1228, %struct.Memory* %1182)
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 10
  store i64 %1231, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1232 = load i64, i64* %RSI
  %1233 = load i32, i32* %ESI
  %1234 = zext i32 %1233 to i64
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 2
  store i64 %1236, i64* %PC
  %1237 = xor i64 %1234, %1232
  %1238 = trunc i64 %1237 to i32
  %1239 = and i64 %1237, 4294967295
  store i64 %1239, i64* %RSI, align 8, !tbaa !2428
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1240, align 1, !tbaa !2432
  %1241 = and i32 %1238, 255
  %1242 = call i32 @llvm.ctpop.i32(i32 %1241) #16
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = xor i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1245, i8* %1246, align 1, !tbaa !2446
  %1247 = icmp eq i32 %1238, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = lshr i32 %1238, 31
  %1251 = trunc i32 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1253, align 1, !tbaa !2450
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1254, align 1, !tbaa !2447
  %1255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 8
  store i64 %1257, i64* %PC
  %1258 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %1259 = bitcast i8* %1255 to float*
  store float %1258, float* %1259, align 1, !tbaa !2452
  %1260 = getelementptr inbounds i8, i8* %1255, i64 4
  %1261 = bitcast i8* %1260 to float*
  store float 0.000000e+00, float* %1261, align 1, !tbaa !2452
  %1262 = getelementptr inbounds i8, i8* %1255, i64 8
  %1263 = bitcast i8* %1262 to float*
  store float 0.000000e+00, float* %1263, align 1, !tbaa !2452
  %1264 = getelementptr inbounds i8, i8* %1255, i64 12
  %1265 = bitcast i8* %1264 to float*
  store float 0.000000e+00, float* %1265, align 1, !tbaa !2452
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 757
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1277, %struct.Memory* %1229)
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 10
  store i64 %1280, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 5
  store i64 %1282, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 8
  store i64 %1285, i64* %PC
  %1286 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %1287 = bitcast i8* %1283 to float*
  store float %1286, float* %1287, align 1, !tbaa !2452
  %1288 = getelementptr inbounds i8, i8* %1283, i64 4
  %1289 = bitcast i8* %1288 to float*
  store float 0.000000e+00, float* %1289, align 1, !tbaa !2452
  %1290 = getelementptr inbounds i8, i8* %1283, i64 8
  %1291 = bitcast i8* %1290 to float*
  store float 0.000000e+00, float* %1291, align 1, !tbaa !2452
  %1292 = getelementptr inbounds i8, i8* %1283, i64 12
  %1293 = bitcast i8* %1292 to float*
  store float 0.000000e+00, float* %1293, align 1, !tbaa !2452
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 729
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1301 = load i64, i64* %1300, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1297, i64* %1303
  store i64 %1302, i64* %1300, align 8, !tbaa !2428
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1295, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %PC
  %1306 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1305, %struct.Memory* %1278)
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 10
  store i64 %1308, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 5
  store i64 %1310, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 8
  store i64 %1313, i64* %PC
  %1314 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 4) to float*)
  %1315 = bitcast i8* %1311 to float*
  store float %1314, float* %1315, align 1, !tbaa !2452
  %1316 = getelementptr inbounds i8, i8* %1311, i64 4
  %1317 = bitcast i8* %1316 to float*
  store float 0.000000e+00, float* %1317, align 1, !tbaa !2452
  %1318 = getelementptr inbounds i8, i8* %1311, i64 8
  %1319 = bitcast i8* %1318 to float*
  store float 0.000000e+00, float* %1319, align 1, !tbaa !2452
  %1320 = getelementptr inbounds i8, i8* %1311, i64 12
  %1321 = bitcast i8* %1320 to float*
  store float 0.000000e+00, float* %1321, align 1, !tbaa !2452
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 701
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 5
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  store i64 %1327, i64* %PC
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1329 = load i64, i64* %1328, align 8, !tbaa !2428
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1325, i64* %1331
  store i64 %1330, i64* %1328, align 8, !tbaa !2428
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1323, i64* %1332, align 8, !tbaa !2428
  %1333 = load i64, i64* %PC
  %1334 = call %struct.Memory* @sub_400bf0_mat_set_renamed_(%struct.State* %0, i64 %1333, %struct.Memory* %1306)
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 10
  store i64 %1336, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RSI, align 8, !tbaa !2428
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 10
  store i64 %1338, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDX, align 8, !tbaa !2428
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 10
  store i64 %1340, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RCX, align 8, !tbaa !2428
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 10
  store i64 %1342, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %R8, align 8, !tbaa !2428
  %1343 = load i64, i64* %PC
  %1344 = add i64 %1343, 10
  store i64 %1344, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %R9, align 8, !tbaa !2428
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 10
  store i64 %1346, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 10
  store i64 %1348, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %R10, align 8, !tbaa !2428
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 32
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 7
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to i32*
  store i32 64, i32* %1353
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 32
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 3
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i32*
  %1359 = load i32, i32* %1358
  %1360 = zext i32 %1359 to i64
  store i64 %1360, i64* %RAX, align 8, !tbaa !2428
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 152
  %1363 = load i64, i64* %RDI
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 7
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1362 to i64*
  store i64 %1363, i64* %1366
  %1367 = load i32, i32* %EAX
  %1368 = zext i32 %1367 to i64
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 2
  store i64 %1370, i64* %PC
  %1371 = and i64 %1368, 4294967295
  store i64 %1371, i64* %RDI, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 152
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 7
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i64*
  %1377 = load i64, i64* %1376
  store i64 %1377, i64* %R11, align 8, !tbaa !2428
  %1378 = load i64, i64* %RSP
  %1379 = load i64, i64* %R11
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1378 to i64*
  store i64 %1379, i64* %1382
  %1383 = load i64, i64* %RSP
  %1384 = add i64 %1383, 8
  %1385 = load i64, i64* %R10
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1384 to i64*
  store i64 %1385, i64* %1388
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 815
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1396 = load i64, i64* %1395, align 8, !tbaa !2428
  %1397 = add i64 %1396, -8
  %1398 = inttoptr i64 %1397 to i64*
  store i64 %1392, i64* %1398
  store i64 %1397, i64* %1395, align 8, !tbaa !2428
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1390, i64* %1399, align 8, !tbaa !2428
  %1400 = load i64, i64* %PC
  %1401 = call %struct.Memory* @sub_400cd0_jacobi_renamed_(%struct.State* %0, i64 %1400, %struct.Memory* %1334)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 10
  store i64 %1403, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 104), i64* %RDI, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 72
  %1406 = bitcast %union.vec128_t* %XMM0 to i8*
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = bitcast i8* %1406 to <2 x float>*
  %1410 = load <2 x float>, <2 x float>* %1409, align 1
  %1411 = extractelement <2 x float> %1410, i32 0
  %1412 = inttoptr i64 %1405 to float*
  store float %1411, float* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 32
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RSI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 2
  store i64 %1421, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1178
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %1433, %struct.Memory* %1401)
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 10
  store i64 %1436, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 133), i64* %RDI, align 8, !tbaa !2428
  %1437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 72
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 5
  store i64 %1441, i64* %PC
  %1442 = inttoptr i64 %1439 to float*
  %1443 = load float, float* %1442
  %1444 = bitcast i8* %1437 to float*
  store float %1443, float* %1444, align 1, !tbaa !2452
  %1445 = getelementptr inbounds i8, i8* %1437, i64 4
  %1446 = bitcast i8* %1445 to float*
  store float 0.000000e+00, float* %1446, align 1, !tbaa !2452
  %1447 = getelementptr inbounds i8, i8* %1437, i64 8
  %1448 = bitcast i8* %1447 to float*
  store float 0.000000e+00, float* %1448, align 1, !tbaa !2452
  %1449 = getelementptr inbounds i8, i8* %1437, i64 12
  %1450 = bitcast i8* %1449 to float*
  store float 0.000000e+00, float* %1450, align 1, !tbaa !2452
  %1451 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1452 = bitcast %union.vec128_t* %XMM0 to i8*
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 4
  store i64 %1454, i64* %PC
  %1455 = bitcast i8* %1452 to <2 x float>*
  %1456 = load <2 x float>, <2 x float>* %1455, align 1
  %1457 = extractelement <2 x float> %1456, i32 0
  %1458 = fpext float %1457 to double
  %1459 = bitcast i8* %1451 to double*
  store double %1458, double* %1459, align 1, !tbaa !2455
  %1460 = load i64, i64* %RBP
  %1461 = sub i64 %1460, 156
  %1462 = load i32, i32* %EAX
  %1463 = zext i32 %1462 to i64
  %1464 = load i64, i64* %PC
  %1465 = add i64 %1464, 6
  store i64 %1465, i64* %PC
  %1466 = inttoptr i64 %1461 to i32*
  store i32 %1462, i32* %1466
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 2
  store i64 %1468, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %1469 = load i64, i64* %PC
  %1470 = sub i64 %1469, 1210
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 5
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 5
  store i64 %1474, i64* %PC
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1476 = load i64, i64* %1475, align 8, !tbaa !2428
  %1477 = add i64 %1476, -8
  %1478 = inttoptr i64 %1477 to i64*
  store i64 %1472, i64* %1478
  store i64 %1477, i64* %1475, align 8, !tbaa !2428
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1470, i64* %1479, align 8, !tbaa !2428
  %1480 = load i64, i64* %PC
  %1481 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %1480, %struct.Memory* %1434)
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 10
  store i64 %1483, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %1484 = load i64, i64* %RBP
  %1485 = sub i64 %1484, 160
  %1486 = load i32, i32* %EAX
  %1487 = zext i32 %1486 to i64
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 6
  store i64 %1489, i64* %PC
  %1490 = inttoptr i64 %1485 to i32*
  store i32 %1486, i32* %1490
  %1491 = load i64, i64* %PC
  %1492 = add i64 %1491, 3969
  %1493 = load i64, i64* %PC
  %1494 = add i64 %1493, 5
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 5
  store i64 %1496, i64* %PC
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1498 = load i64, i64* %1497, align 8, !tbaa !2428
  %1499 = add i64 %1498, -8
  %1500 = inttoptr i64 %1499 to i64*
  store i64 %1494, i64* %1500
  store i64 %1499, i64* %1497, align 8, !tbaa !2428
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1492, i64* %1501, align 8, !tbaa !2428
  %1502 = load i64, i64* %PC
  %1503 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1502, %struct.Memory* %1481)
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 10
  store i64 %1505, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %1506 = load i64, i64* %PC
  %1507 = add i64 %1506, 3954
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 5
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 5
  store i64 %1511, i64* %PC
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1513 = load i64, i64* %1512, align 8, !tbaa !2428
  %1514 = add i64 %1513, -8
  %1515 = inttoptr i64 %1514 to i64*
  store i64 %1509, i64* %1515
  store i64 %1514, i64* %1512, align 8, !tbaa !2428
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1507, i64* %1516, align 8, !tbaa !2428
  %1517 = load i64, i64* %PC
  %1518 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1517, %struct.Memory* %1503)
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 10
  store i64 %1520, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 3939
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 5
  %1525 = load i64, i64* %PC
  %1526 = add i64 %1525, 5
  store i64 %1526, i64* %PC
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1528 = load i64, i64* %1527, align 8, !tbaa !2428
  %1529 = add i64 %1528, -8
  %1530 = inttoptr i64 %1529 to i64*
  store i64 %1524, i64* %1530
  store i64 %1529, i64* %1527, align 8, !tbaa !2428
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1522, i64* %1531, align 8, !tbaa !2428
  %1532 = load i64, i64* %PC
  %1533 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1532, %struct.Memory* %1518)
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 10
  store i64 %1535, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 3924
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 5
  %1540 = load i64, i64* %PC
  %1541 = add i64 %1540, 5
  store i64 %1541, i64* %PC
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1543 = load i64, i64* %1542, align 8, !tbaa !2428
  %1544 = add i64 %1543, -8
  %1545 = inttoptr i64 %1544 to i64*
  store i64 %1539, i64* %1545
  store i64 %1544, i64* %1542, align 8, !tbaa !2428
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1537, i64* %1546, align 8, !tbaa !2428
  %1547 = load i64, i64* %PC
  %1548 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1547, %struct.Memory* %1533)
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 10
  store i64 %1550, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 3909
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 5
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 5
  store i64 %1556, i64* %PC
  %1557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1558 = load i64, i64* %1557, align 8, !tbaa !2428
  %1559 = add i64 %1558, -8
  %1560 = inttoptr i64 %1559 to i64*
  store i64 %1554, i64* %1560
  store i64 %1559, i64* %1557, align 8, !tbaa !2428
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1552, i64* %1561, align 8, !tbaa !2428
  %1562 = load i64, i64* %PC
  %1563 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1562, %struct.Memory* %1548)
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 10
  store i64 %1565, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1566 = load i64, i64* %PC
  %1567 = add i64 %1566, 3894
  %1568 = load i64, i64* %PC
  %1569 = add i64 %1568, 5
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 5
  store i64 %1571, i64* %PC
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1573 = load i64, i64* %1572, align 8, !tbaa !2428
  %1574 = add i64 %1573, -8
  %1575 = inttoptr i64 %1574 to i64*
  store i64 %1569, i64* %1575
  store i64 %1574, i64* %1572, align 8, !tbaa !2428
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1567, i64* %1576, align 8, !tbaa !2428
  %1577 = load i64, i64* %PC
  %1578 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1577, %struct.Memory* %1563)
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 10
  store i64 %1580, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 3879
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 5
  %1585 = load i64, i64* %PC
  %1586 = add i64 %1585, 5
  store i64 %1586, i64* %PC
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1588 = load i64, i64* %1587, align 8, !tbaa !2428
  %1589 = add i64 %1588, -8
  %1590 = inttoptr i64 %1589 to i64*
  store i64 %1584, i64* %1590
  store i64 %1589, i64* %1587, align 8, !tbaa !2428
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1582, i64* %1591, align 8, !tbaa !2428
  %1592 = load i64, i64* %PC
  %1593 = call %struct.Memory* @sub_401970_clearMat_renamed_(%struct.State* %0, i64 %1592, %struct.Memory* %1578)
  %1594 = load i64, i64* %RAX
  %1595 = load i32, i32* %EAX
  %1596 = zext i32 %1595 to i64
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 2
  store i64 %1598, i64* %PC
  %1599 = xor i64 %1596, %1594
  %1600 = trunc i64 %1599 to i32
  %1601 = and i64 %1599, 4294967295
  store i64 %1601, i64* %RAX, align 8, !tbaa !2428
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1602, align 1, !tbaa !2432
  %1603 = and i32 %1600, 255
  %1604 = call i32 @llvm.ctpop.i32(i32 %1603) #16
  %1605 = trunc i32 %1604 to i8
  %1606 = and i8 %1605, 1
  %1607 = xor i8 %1606, 1
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1607, i8* %1608, align 1, !tbaa !2446
  %1609 = icmp eq i32 %1600, 0
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1610, i8* %1611, align 1, !tbaa !2448
  %1612 = lshr i32 %1600, 31
  %1613 = trunc i32 %1612 to i8
  %1614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1613, i8* %1614, align 1, !tbaa !2449
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1615, align 1, !tbaa !2450
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1616, align 1, !tbaa !2447
  %1617 = load i64, i64* %RSP
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 7
  store i64 %1619, i64* %PC
  %1620 = add i64 176, %1617
  store i64 %1620, i64* %RSP, align 8, !tbaa !2428
  %1621 = icmp ult i64 %1620, %1617
  %1622 = icmp ult i64 %1620, 176
  %1623 = or i1 %1621, %1622
  %1624 = zext i1 %1623 to i8
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1624, i8* %1625, align 1, !tbaa !2432
  %1626 = trunc i64 %1620 to i32
  %1627 = and i32 %1626, 255
  %1628 = call i32 @llvm.ctpop.i32(i32 %1627) #16
  %1629 = trunc i32 %1628 to i8
  %1630 = and i8 %1629, 1
  %1631 = xor i8 %1630, 1
  %1632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1631, i8* %1632, align 1, !tbaa !2446
  %1633 = xor i64 176, %1617
  %1634 = xor i64 %1633, %1620
  %1635 = lshr i64 %1634, 4
  %1636 = trunc i64 %1635 to i8
  %1637 = and i8 %1636, 1
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1637, i8* %1638, align 1, !tbaa !2447
  %1639 = icmp eq i64 %1620, 0
  %1640 = zext i1 %1639 to i8
  %1641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1640, i8* %1641, align 1, !tbaa !2448
  %1642 = lshr i64 %1620, 63
  %1643 = trunc i64 %1642 to i8
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1643, i8* %1644, align 1, !tbaa !2449
  %1645 = lshr i64 %1617, 63
  %1646 = xor i64 %1642, %1645
  %1647 = add nuw nsw i64 %1646, %1642
  %1648 = icmp eq i64 %1647, 2
  %1649 = zext i1 %1648 to i8
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1649, i8* %1650, align 1, !tbaa !2450
  %1651 = load i64, i64* %PC
  %1652 = add i64 %1651, 1
  store i64 %1652, i64* %PC
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1654 = load i64, i64* %1653, align 8, !tbaa !2428
  %1655 = add i64 %1654, 8
  %1656 = inttoptr i64 %1654 to i64*
  %1657 = load i64, i64* %1656
  store i64 %1657, i64* %RBP, align 8, !tbaa !2428
  store i64 %1655, i64* %1653, align 8, !tbaa !2428
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 1
  store i64 %1659, i64* %PC
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1662 = load i64, i64* %1661, align 8, !tbaa !2428
  %1663 = inttoptr i64 %1662 to i64*
  %1664 = load i64, i64* %1663
  store i64 %1664, i64* %1660, align 8, !tbaa !2428
  %1665 = add i64 %1662, 8
  store i64 %1665, i64* %1661, align 8, !tbaa !2428
  ret %struct.Memory* %1593
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400618, label %block_400603

block_40061a:                                     ; preds = %block_40060d
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_400620___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_400615:                                     ; preds = %block_40060d
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_400618

block_40060d:                                     ; preds = %block_400603
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4195866, label %block_40061a
    i64 4195861, label %block_400615
  ]

block_400618:                                     ; preds = %block_400603, %block_400615, %block_4005e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005e0 ], [ %2, %block_400603 ], [ %2, %block_400615 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400603:                                     ; preds = %block_4005e0
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_400618, label %block_40060d

; <label>:270:                                    ; preds = %block_40060d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a70_set_param(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a70:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 32
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 32
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2432
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2446
  %52 = xor i64 32, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2447
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2448
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2449
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2450
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RSI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 146), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %90 = load i32, i32* %EAX
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = and i64 %91, 4294967295
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 5451
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %96, i64* %105, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %106, %struct.Memory* %2)
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %108, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2447
  %120 = icmp eq i32 %108, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2448
  %123 = lshr i32 %108, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2449
  %126 = lshr i32 %108, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2450
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 31
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2448
  store i8 %139, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = icmp ne i8 %139, 0
  %142 = select i1 %141, i64 %133, i64 %135
  store i64 %142, i64* %140, align 8, !tbaa !2428
  %143 = load i8, i8* %BRANCH_TAKEN
  %144 = icmp eq i8 %143, 1
  br i1 %144, label %block_401ab2, label %block_401a99

block_401b9e:                                     ; preds = %block_401b85
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 16
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 160), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %153 = load i32, i32* %EAX
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 2
  store i64 %156, i64* %PC
  %157 = and i64 %154, 4294967295
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = sub i64 %158, 5737
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  store i64 %163, i64* %PC
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 %161, i64* %167
  store i64 %166, i64* %164, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %159, i64* %168, align 8, !tbaa !2428
  %169 = load i64, i64* %PC
  %170 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %169, %struct.Memory* %854)
  %171 = load i32, i32* %EAX
  %172 = zext i32 %171 to i64
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 3
  store i64 %174, i64* %PC
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %175, align 1, !tbaa !2432
  %176 = and i32 %171, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i32 %171, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i32 %171, 31
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i32 %171, 31
  %190 = xor i32 %186, %189
  %191 = add nuw nsw i32 %190, %189
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 43
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 6
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 6
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %202 = load i8, i8* %201, align 1, !tbaa !2448
  %203 = icmp eq i8 %202, 0
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %206 = select i1 %203, i64 %196, i64 %198
  store i64 %206, i64* %205, align 8, !tbaa !2428
  %207 = load i8, i8* %BRANCH_TAKEN
  %208 = icmp eq i8 %207, 1
  br i1 %208, label %block_401bdc, label %block_401bb7

block_401bdc:                                     ; preds = %block_401b9e
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 16
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %RDI, align 8, !tbaa !2428
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 156), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %217 = load i32, i32* %EAX
  %218 = zext i32 %217 to i64
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 2
  store i64 %220, i64* %PC
  %221 = and i64 %218, 4294967295
  store i64 %221, i64* %RSI, align 8, !tbaa !2428
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 5799
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %233, %struct.Memory* %170)
  %235 = load i32, i32* %EAX
  %236 = zext i32 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %239, align 1, !tbaa !2432
  %240 = and i32 %235, 255
  %241 = call i32 @llvm.ctpop.i32(i32 %240) #16
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  %244 = xor i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %244, i8* %245, align 1, !tbaa !2446
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %246, align 1, !tbaa !2447
  %247 = icmp eq i32 %235, 0
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %248, i8* %249, align 1, !tbaa !2448
  %250 = lshr i32 %235, 31
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %251, i8* %252, align 1, !tbaa !2449
  %253 = lshr i32 %235, 31
  %254 = xor i32 %250, %253
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %257, i8* %258, align 1, !tbaa !2450
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 31
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 6
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 6
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %266 = load i8, i8* %265, align 1, !tbaa !2448
  store i8 %266, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %268 = icmp ne i8 %266, 0
  %269 = select i1 %268, i64 %260, i64 %262
  store i64 %269, i64* %267, align 8, !tbaa !2428
  %270 = load i8, i8* %BRANCH_TAKEN
  %271 = icmp eq i8 %270, 1
  br i1 %271, label %block_401c0e, label %block_401bf5

block_401a99:                                     ; preds = %block_401a70
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 16
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 4
  store i64 %275, i64* %PC
  %276 = inttoptr i64 %273 to i64*
  %277 = load i64, i64* %276
  store i64 %277, i64* %RDI, align 8, !tbaa !2428
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 5
  store i64 %279, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 149), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %280 = load i32, i32* %EAX
  %281 = zext i32 %280 to i64
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 2
  store i64 %283, i64* %PC
  %284 = and i64 %281, 4294967295
  store i64 %284, i64* %RSI, align 8, !tbaa !2428
  %285 = load i64, i64* %PC
  %286 = sub i64 %285, 5476
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 5
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 5
  store i64 %290, i64* %PC
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %292 = load i64, i64* %291, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %288, i64* %294
  store i64 %293, i64* %291, align 8, !tbaa !2428
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %286, i64* %295, align 8, !tbaa !2428
  %296 = load i64, i64* %PC
  %297 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %296, %struct.Memory* %107)
  %298 = load i32, i32* %EAX
  %299 = zext i32 %298 to i64
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %302, align 1, !tbaa !2432
  %303 = and i32 %298, 255
  %304 = call i32 @llvm.ctpop.i32(i32 %303) #16
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %307, i8* %308, align 1, !tbaa !2446
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %309, align 1, !tbaa !2447
  %310 = icmp eq i32 %298, 0
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %311, i8* %312, align 1, !tbaa !2448
  %313 = lshr i32 %298, 31
  %314 = trunc i32 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %314, i8* %315, align 1, !tbaa !2449
  %316 = lshr i32 %298, 31
  %317 = xor i32 %313, %316
  %318 = add nuw nsw i32 %317, %316
  %319 = icmp eq i32 %318, 2
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %320, i8* %321, align 1, !tbaa !2450
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 43
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 6
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 6
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %329 = load i8, i8* %328, align 1, !tbaa !2448
  %330 = icmp eq i8 %329, 0
  %331 = zext i1 %330 to i8
  store i8 %331, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %333 = select i1 %330, i64 %323, i64 %325
  store i64 %333, i64* %332, align 8, !tbaa !2428
  %334 = load i8, i8* %BRANCH_TAKEN
  %335 = icmp eq i8 %334, 1
  br i1 %335, label %block_401ad7, label %block_401ab2

block_401bb7:                                     ; preds = %block_401b85, %block_401b9e
  %MEMORY.0 = phi %struct.Memory* [ %854, %block_401b85 ], [ %170, %block_401b9e ]
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 8
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = load i64, i64* %RAX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 6
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %342 to i32*
  store i32 256, i32* %345
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 8
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RAX, align 8, !tbaa !2428
  %352 = load i64, i64* %RAX
  %353 = add i64 %352, 4
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 7
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i32*
  store i32 256, i32* %356
  %357 = load i64, i64* %RBP
  %358 = sub i64 %357, 8
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = load i64, i64* %RAX
  %364 = add i64 %363, 8
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 7
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  store i32 512, i32* %367
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 122
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 5
  store i64 %371, i64* %PC
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %369, i64* %372, align 8, !tbaa !2428
  br label %block_401c51

block_401bf5:                                     ; preds = %block_401bdc
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 16
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RDI, align 8, !tbaa !2428
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 159), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %381 = load i32, i32* %EAX
  %382 = zext i32 %381 to i64
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 2
  store i64 %384, i64* %PC
  %385 = and i64 %382, 4294967295
  store i64 %385, i64* %RSI, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = sub i64 %386, 5824
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 5
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 5
  store i64 %391, i64* %PC
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %393 = load i64, i64* %392, align 8, !tbaa !2428
  %394 = add i64 %393, -8
  %395 = inttoptr i64 %394 to i64*
  store i64 %389, i64* %395
  store i64 %394, i64* %392, align 8, !tbaa !2428
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %387, i64* %396, align 8, !tbaa !2428
  %397 = load i64, i64* %PC
  %398 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %397, %struct.Memory* %234)
  %399 = load i32, i32* %EAX
  %400 = zext i32 %399 to i64
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 3
  store i64 %402, i64* %PC
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %403, align 1, !tbaa !2432
  %404 = and i32 %399, 255
  %405 = call i32 @llvm.ctpop.i32(i32 %404) #16
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %408, i8* %409, align 1, !tbaa !2446
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %410, align 1, !tbaa !2447
  %411 = icmp eq i32 %399, 0
  %412 = zext i1 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %412, i8* %413, align 1, !tbaa !2448
  %414 = lshr i32 %399, 31
  %415 = trunc i32 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %415, i8* %416, align 1, !tbaa !2449
  %417 = lshr i32 %399, 31
  %418 = xor i32 %414, %417
  %419 = add nuw nsw i32 %418, %417
  %420 = icmp eq i32 %419, 2
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 43
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 6
  store i64 %428, i64* %PC
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %430 = load i8, i8* %429, align 1, !tbaa !2448
  %431 = icmp eq i8 %430, 0
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %434 = select i1 %431, i64 %424, i64 %426
  store i64 %434, i64* %433, align 8, !tbaa !2428
  %435 = load i8, i8* %BRANCH_TAKEN
  %436 = icmp eq i8 %435, 1
  br i1 %436, label %block_401c33, label %block_401c0e

block_401ab2:                                     ; preds = %block_401a99, %block_401a70
  %MEMORY.1 = phi %struct.Memory* [ %107, %block_401a70 ], [ %297, %block_401a99 ]
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 8
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i64*
  %442 = load i64, i64* %441
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = load i64, i64* %RAX
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 6
  store i64 %445, i64* %PC
  %446 = inttoptr i64 %443 to i32*
  store i32 32, i32* %446
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 8
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 4
  store i64 %450, i64* %PC
  %451 = inttoptr i64 %448 to i64*
  %452 = load i64, i64* %451
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = load i64, i64* %RAX
  %454 = add i64 %453, 4
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 7
  store i64 %456, i64* %PC
  %457 = inttoptr i64 %454 to i32*
  store i32 32, i32* %457
  %458 = load i64, i64* %RBP
  %459 = sub i64 %458, 8
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 4
  store i64 %461, i64* %PC
  %462 = inttoptr i64 %459 to i64*
  %463 = load i64, i64* %462
  store i64 %463, i64* %RAX, align 8, !tbaa !2428
  %464 = load i64, i64* %RAX
  %465 = add i64 %464, 8
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 7
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i32*
  store i32 64, i32* %468
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 383
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 5
  store i64 %472, i64* %PC
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %470, i64* %473, align 8, !tbaa !2428
  br label %block_401c51

block_401c33:                                     ; preds = %block_401bf5
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 10
  store i64 %475, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 162), i64* %RDI, align 8, !tbaa !2428
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 2
  store i64 %477, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %478 = load i64, i64* %PC
  %479 = sub i64 %478, 5919
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 5
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 5
  store i64 %483, i64* %PC
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %485 = load i64, i64* %484, align 8, !tbaa !2428
  %486 = add i64 %485, -8
  %487 = inttoptr i64 %486 to i64*
  store i64 %481, i64* %487
  store i64 %486, i64* %484, align 8, !tbaa !2428
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %479, i64* %488, align 8, !tbaa !2428
  %489 = load i64, i64* %PC
  %490 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %489, %struct.Memory* %398)
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 5
  store i64 %492, i64* %PC
  store i64 6, i64* %RDI, align 8, !tbaa !2428
  %493 = load i64, i64* %RBP
  %494 = sub i64 %493, 20
  %495 = load i32, i32* %EAX
  %496 = zext i32 %495 to i64
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 3
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %494 to i32*
  store i32 %495, i32* %499
  %500 = load i64, i64* %PC
  %501 = sub i64 %500, 5868
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 5
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 5
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %507 = load i64, i64* %506, align 8, !tbaa !2428
  %508 = add i64 %507, -8
  %509 = inttoptr i64 %508 to i64*
  store i64 %503, i64* %509
  store i64 %508, i64* %506, align 8, !tbaa !2428
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %501, i64* %510, align 8, !tbaa !2428
  %511 = load i64, i64* %PC
  %512 = call %struct.Memory* @ext_400560_exit(%struct.State* %0, i64 %511, %struct.Memory* %490)
  %513 = load i64, i64* %PC
  %514 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %513, %struct.Memory* %512)
  ret %struct.Memory* %514

block_401af0:                                     ; preds = %block_401ad7
  %515 = load i64, i64* %RBP
  %516 = sub i64 %515, 16
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 4
  store i64 %518, i64* %PC
  %519 = inttoptr i64 %516 to i64*
  %520 = load i64, i64* %519
  store i64 %520, i64* %RDI, align 8, !tbaa !2428
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 5
  store i64 %522, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 150), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %523 = load i32, i32* %EAX
  %524 = zext i32 %523 to i64
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 2
  store i64 %526, i64* %PC
  %527 = and i64 %524, 4294967295
  store i64 %527, i64* %RSI, align 8, !tbaa !2428
  %528 = load i64, i64* %PC
  %529 = sub i64 %528, 5563
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 5
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 5
  store i64 %533, i64* %PC
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %535 = load i64, i64* %534, align 8, !tbaa !2428
  %536 = add i64 %535, -8
  %537 = inttoptr i64 %536 to i64*
  store i64 %531, i64* %537
  store i64 %536, i64* %534, align 8, !tbaa !2428
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %529, i64* %538, align 8, !tbaa !2428
  %539 = load i64, i64* %PC
  %540 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %539, %struct.Memory* %641)
  %541 = load i32, i32* %EAX
  %542 = zext i32 %541 to i64
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %545, align 1, !tbaa !2432
  %546 = and i32 %541, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %552, align 1, !tbaa !2447
  %553 = icmp eq i32 %541, 0
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %554, i8* %555, align 1, !tbaa !2448
  %556 = lshr i32 %541, 31
  %557 = trunc i32 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %557, i8* %558, align 1, !tbaa !2449
  %559 = lshr i32 %541, 31
  %560 = xor i32 %556, %559
  %561 = add nuw nsw i32 %560, %559
  %562 = icmp eq i32 %561, 2
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %563, i8* %564, align 1, !tbaa !2450
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 43
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 6
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 6
  store i64 %570, i64* %PC
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %572 = load i8, i8* %571, align 1, !tbaa !2448
  %573 = icmp eq i8 %572, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %576 = select i1 %573, i64 %566, i64 %568
  store i64 %576, i64* %575, align 8, !tbaa !2428
  %577 = load i8, i8* %BRANCH_TAKEN
  %578 = icmp eq i8 %577, 1
  br i1 %578, label %block_401b2e, label %block_401b09

block_401c0e:                                     ; preds = %block_401bf5, %block_401bdc
  %MEMORY.2 = phi %struct.Memory* [ %234, %block_401bdc ], [ %398, %block_401bf5 ]
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 8
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 6
  store i64 %587, i64* %PC
  %588 = inttoptr i64 %585 to i32*
  store i32 512, i32* %588
  %589 = load i64, i64* %RBP
  %590 = sub i64 %589, 8
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i64*
  %594 = load i64, i64* %593
  store i64 %594, i64* %RAX, align 8, !tbaa !2428
  %595 = load i64, i64* %RAX
  %596 = add i64 %595, 4
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 7
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i32*
  store i32 512, i32* %599
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 8
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 4
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RAX
  %607 = add i64 %606, 8
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 7
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i32*
  store i32 1024, i32* %610
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 35
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 5
  store i64 %614, i64* %PC
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %612, i64* %615, align 8, !tbaa !2428
  br label %block_401c51

block_401ad7:                                     ; preds = %block_401a99
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 16
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i64*
  %621 = load i64, i64* %620
  store i64 %621, i64* %RDI, align 8, !tbaa !2428
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 5
  store i64 %623, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 147), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %624 = load i32, i32* %EAX
  %625 = zext i32 %624 to i64
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 2
  store i64 %627, i64* %PC
  %628 = and i64 %625, 4294967295
  store i64 %628, i64* %RSI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 5538
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %640, %struct.Memory* %297)
  %642 = load i32, i32* %EAX
  %643 = zext i32 %642 to i64
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %646, align 1, !tbaa !2432
  %647 = and i32 %642, 255
  %648 = call i32 @llvm.ctpop.i32(i32 %647) #16
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %651, i8* %652, align 1, !tbaa !2446
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %653, align 1, !tbaa !2447
  %654 = icmp eq i32 %642, 0
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %655, i8* %656, align 1, !tbaa !2448
  %657 = lshr i32 %642, 31
  %658 = trunc i32 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %658, i8* %659, align 1, !tbaa !2449
  %660 = lshr i32 %642, 31
  %661 = xor i32 %657, %660
  %662 = add nuw nsw i32 %661, %660
  %663 = icmp eq i32 %662, 2
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %664, i8* %665, align 1, !tbaa !2450
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 31
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 6
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 6
  store i64 %671, i64* %PC
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %673 = load i8, i8* %672, align 1, !tbaa !2448
  store i8 %673, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %675 = icmp ne i8 %673, 0
  %676 = select i1 %675, i64 %667, i64 %669
  store i64 %676, i64* %674, align 8, !tbaa !2428
  %677 = load i8, i8* %BRANCH_TAKEN
  %678 = icmp eq i8 %677, 1
  br i1 %678, label %block_401b09, label %block_401af0

block_401b09:                                     ; preds = %block_401ad7, %block_401af0
  %MEMORY.3 = phi %struct.Memory* [ %641, %block_401ad7 ], [ %540, %block_401af0 ]
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 8
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %RAX, align 8, !tbaa !2428
  %685 = load i64, i64* %RAX
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 6
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  store i32 64, i32* %688
  %689 = load i64, i64* %RBP
  %690 = sub i64 %689, 8
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = load i64, i64* %RAX
  %696 = add i64 %695, 4
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  store i32 64, i32* %699
  %700 = load i64, i64* %RBP
  %701 = sub i64 %700, 8
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i64*
  %705 = load i64, i64* %704
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = load i64, i64* %RAX
  %707 = add i64 %706, 8
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 7
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i32*
  store i32 128, i32* %710
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 296
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 5
  store i64 %714, i64* %PC
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %712, i64* %715, align 8, !tbaa !2428
  br label %block_401c51

block_401c51:                                     ; preds = %block_401b60, %block_401b09, %block_401c0e, %block_401ab2, %block_401bb7
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_401ab2 ], [ %MEMORY.3, %block_401b09 ], [ %MEMORY.5, %block_401b60 ], [ %MEMORY.0, %block_401bb7 ], [ %MEMORY.2, %block_401c0e ]
  %716 = load i64, i64* %RSP
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = add i64 32, %716
  store i64 %719, i64* %RSP, align 8, !tbaa !2428
  %720 = icmp ult i64 %719, %716
  %721 = icmp ult i64 %719, 32
  %722 = or i1 %720, %721
  %723 = zext i1 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %723, i8* %724, align 1, !tbaa !2432
  %725 = trunc i64 %719 to i32
  %726 = and i32 %725, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2446
  %732 = xor i64 32, %716
  %733 = xor i64 %732, %719
  %734 = lshr i64 %733, 4
  %735 = trunc i64 %734 to i8
  %736 = and i8 %735, 1
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %736, i8* %737, align 1, !tbaa !2447
  %738 = icmp eq i64 %719, 0
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %739, i8* %740, align 1, !tbaa !2448
  %741 = lshr i64 %719, 63
  %742 = trunc i64 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %742, i8* %743, align 1, !tbaa !2449
  %744 = lshr i64 %716, 63
  %745 = xor i64 %741, %744
  %746 = add nuw nsw i64 %745, %741
  %747 = icmp eq i64 %746, 2
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %748, i8* %749, align 1, !tbaa !2450
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 1
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %753 = load i64, i64* %752, align 8, !tbaa !2428
  %754 = add i64 %753, 8
  %755 = inttoptr i64 %753 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RBP, align 8, !tbaa !2428
  store i64 %754, i64* %752, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 1
  store i64 %758, i64* %PC
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %761 = load i64, i64* %760, align 8, !tbaa !2428
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  store i64 %763, i64* %759, align 8, !tbaa !2428
  %764 = add i64 %761, 8
  store i64 %764, i64* %760, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401b47:                                     ; preds = %block_401b2e
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 16
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  store i64 %772, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 154), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %773 = load i32, i32* %EAX
  %774 = zext i32 %773 to i64
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 2
  store i64 %776, i64* %PC
  %777 = and i64 %774, 4294967295
  store i64 %777, i64* %RSI, align 8, !tbaa !2428
  %778 = load i64, i64* %PC
  %779 = sub i64 %778, 5650
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 5
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 5
  store i64 %783, i64* %PC
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %785 = load i64, i64* %784, align 8, !tbaa !2428
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %781, i64* %787
  store i64 %786, i64* %784, align 8, !tbaa !2428
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %779, i64* %788, align 8, !tbaa !2428
  %789 = load i64, i64* %PC
  %790 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %789, %struct.Memory* %917)
  %791 = load i32, i32* %EAX
  %792 = zext i32 %791 to i64
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %795, align 1, !tbaa !2432
  %796 = and i32 %791, 255
  %797 = call i32 @llvm.ctpop.i32(i32 %796) #16
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = xor i8 %799, 1
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %800, i8* %801, align 1, !tbaa !2446
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %802, align 1, !tbaa !2447
  %803 = icmp eq i32 %791, 0
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %804, i8* %805, align 1, !tbaa !2448
  %806 = lshr i32 %791, 31
  %807 = trunc i32 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %807, i8* %808, align 1, !tbaa !2449
  %809 = lshr i32 %791, 31
  %810 = xor i32 %806, %809
  %811 = add nuw nsw i32 %810, %809
  %812 = icmp eq i32 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2450
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 43
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 6
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 6
  store i64 %820, i64* %PC
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %822 = load i8, i8* %821, align 1, !tbaa !2448
  %823 = icmp eq i8 %822, 0
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %826 = select i1 %823, i64 %816, i64 %818
  store i64 %826, i64* %825, align 8, !tbaa !2428
  %827 = load i8, i8* %BRANCH_TAKEN
  %828 = icmp eq i8 %827, 1
  br i1 %828, label %block_401b85, label %block_401b60

block_401b85:                                     ; preds = %block_401b47
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 16
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 4
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i64*
  %834 = load i64, i64* %833
  store i64 %834, i64* %RDI, align 8, !tbaa !2428
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 157), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %837 = load i32, i32* %EAX
  %838 = zext i32 %837 to i64
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 2
  store i64 %840, i64* %PC
  %841 = and i64 %838, 4294967295
  store i64 %841, i64* %RSI, align 8, !tbaa !2428
  %842 = load i64, i64* %PC
  %843 = sub i64 %842, 5712
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %849 = load i64, i64* %848, align 8, !tbaa !2428
  %850 = add i64 %849, -8
  %851 = inttoptr i64 %850 to i64*
  store i64 %845, i64* %851
  store i64 %850, i64* %848, align 8, !tbaa !2428
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %843, i64* %852, align 8, !tbaa !2428
  %853 = load i64, i64* %PC
  %854 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %853, %struct.Memory* %790)
  %855 = load i32, i32* %EAX
  %856 = zext i32 %855 to i64
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %859, align 1, !tbaa !2432
  %860 = and i32 %855, 255
  %861 = call i32 @llvm.ctpop.i32(i32 %860) #16
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %864, i8* %865, align 1, !tbaa !2446
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %866, align 1, !tbaa !2447
  %867 = icmp eq i32 %855, 0
  %868 = zext i1 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %868, i8* %869, align 1, !tbaa !2448
  %870 = lshr i32 %855, 31
  %871 = trunc i32 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %871, i8* %872, align 1, !tbaa !2449
  %873 = lshr i32 %855, 31
  %874 = xor i32 %870, %873
  %875 = add nuw nsw i32 %874, %873
  %876 = icmp eq i32 %875, 2
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %877, i8* %878, align 1, !tbaa !2450
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 31
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 6
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 6
  store i64 %884, i64* %PC
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %886 = load i8, i8* %885, align 1, !tbaa !2448
  store i8 %886, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %888 = icmp ne i8 %886, 0
  %889 = select i1 %888, i64 %880, i64 %882
  store i64 %889, i64* %887, align 8, !tbaa !2428
  %890 = load i8, i8* %BRANCH_TAKEN
  %891 = icmp eq i8 %890, 1
  br i1 %891, label %block_401bb7, label %block_401b9e

block_401b2e:                                     ; preds = %block_401af0
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 16
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RDI, align 8, !tbaa !2428
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  store i64 %899, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 152), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %900 = load i32, i32* %EAX
  %901 = zext i32 %900 to i64
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 2
  store i64 %903, i64* %PC
  %904 = and i64 %901, 4294967295
  store i64 %904, i64* %RSI, align 8, !tbaa !2428
  %905 = load i64, i64* %PC
  %906 = sub i64 %905, 5625
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 5
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 5
  store i64 %910, i64* %PC
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %912 = load i64, i64* %911, align 8, !tbaa !2428
  %913 = add i64 %912, -8
  %914 = inttoptr i64 %913 to i64*
  store i64 %908, i64* %914
  store i64 %913, i64* %911, align 8, !tbaa !2428
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %906, i64* %915, align 8, !tbaa !2428
  %916 = load i64, i64* %PC
  %917 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %916, %struct.Memory* %540)
  %918 = load i32, i32* %EAX
  %919 = zext i32 %918 to i64
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %922, align 1, !tbaa !2432
  %923 = and i32 %918, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2446
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %929, align 1, !tbaa !2447
  %930 = icmp eq i32 %918, 0
  %931 = zext i1 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %931, i8* %932, align 1, !tbaa !2448
  %933 = lshr i32 %918, 31
  %934 = trunc i32 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %934, i8* %935, align 1, !tbaa !2449
  %936 = lshr i32 %918, 31
  %937 = xor i32 %933, %936
  %938 = add nuw nsw i32 %937, %936
  %939 = icmp eq i32 %938, 2
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %940, i8* %941, align 1, !tbaa !2450
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 31
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 6
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 6
  store i64 %947, i64* %PC
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %949 = load i8, i8* %948, align 1, !tbaa !2448
  store i8 %949, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %951 = icmp ne i8 %949, 0
  %952 = select i1 %951, i64 %943, i64 %945
  store i64 %952, i64* %950, align 8, !tbaa !2428
  %953 = load i8, i8* %BRANCH_TAKEN
  %954 = icmp eq i8 %953, 1
  br i1 %954, label %block_401b60, label %block_401b47

block_401b60:                                     ; preds = %block_401b2e, %block_401b47
  %MEMORY.5 = phi %struct.Memory* [ %917, %block_401b2e ], [ %790, %block_401b47 ]
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 8
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 4
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i64*
  %960 = load i64, i64* %959
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RAX
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 6
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i32*
  store i32 128, i32* %964
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 8
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 4
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i64*
  %970 = load i64, i64* %969
  store i64 %970, i64* %RAX, align 8, !tbaa !2428
  %971 = load i64, i64* %RAX
  %972 = add i64 %971, 4
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 7
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  store i32 128, i32* %975
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 8
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980
  store i64 %981, i64* %RAX, align 8, !tbaa !2428
  %982 = load i64, i64* %RAX
  %983 = add i64 %982, 8
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  store i32 256, i32* %986
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 209
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 5
  store i64 %990, i64* %PC
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %988, i64* %991, align 8, !tbaa !2428
  br label %block_401c51
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a30_mflops(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a30:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %19 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %18, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %19 to %"class.std::bitset"*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %21 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %20, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %21 to %"class.std::bitset"*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %23 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %22, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %23 to %"class.std::bitset"*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %25 to %union.vec128_t*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %27 to %union.vec128_t*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %29 to %union.vec128_t*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 8
  store i64 %42, i64* %PC
  %43 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 24) to double*)
  %44 = bitcast i8* %40 to double*
  store double %43, double* %44, align 1, !tbaa !2455
  %45 = getelementptr inbounds i8, i8* %40, i64 8
  %46 = bitcast i8* %45 to double*
  store double 0.000000e+00, double* %46, align 1, !tbaa !2455
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 4
  %49 = load i32, i32* %EDI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = bitcast %union.vec128_t* %XMM0 to i8*
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 5
  store i64 %58, i64* %PC
  %59 = bitcast i8* %56 to double*
  %60 = load double, double* %59, align 1
  %61 = inttoptr i64 %55 to double*
  store double %60, double* %61
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 24
  %64 = bitcast %union.vec128_t* %XMM1 to i8*
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 5
  store i64 %66, i64* %PC
  %67 = bitcast i8* %64 to double*
  %68 = load double, double* %67, align 1
  %69 = inttoptr i64 %63 to double*
  store double %68, double* %69
  %70 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %71 = load i64, i64* %RBP
  %72 = sub i64 %71, 24
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 5
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to double*
  %76 = load double, double* %75
  %77 = bitcast i8* %70 to double*
  store double %76, double* %77, align 1, !tbaa !2455
  %78 = getelementptr inbounds i8, i8* %70, i64 8
  %79 = bitcast i8* %78 to double*
  store double 0.000000e+00, double* %79, align 1, !tbaa !2455
  %80 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %81 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 5
  store i64 %85, i64* %PC
  %86 = bitcast i8* %81 to double*
  %87 = load double, double* %86, align 1
  %88 = getelementptr inbounds i8, i8* %81, i64 8
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 1
  %91 = inttoptr i64 %83 to double*
  %92 = load double, double* %91
  %93 = fdiv double %87, %92
  %94 = bitcast i8* %80 to double*
  store double %93, double* %94, align 1, !tbaa !2455
  %95 = getelementptr inbounds i8, i8* %80, i64 8
  %96 = bitcast i8* %95 to i64*
  store i64 %90, i64* %96, align 1, !tbaa !2455
  %97 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %98 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %99 = bitcast %union.vec128_t* %XMM2 to i8*
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = bitcast i8* %98 to double*
  %103 = load double, double* %102, align 1
  %104 = getelementptr inbounds i8, i8* %98, i64 8
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = bitcast i8* %99 to double*
  %108 = load double, double* %107, align 1
  %109 = fmul double %103, %108
  %110 = bitcast i8* %97 to double*
  store double %109, double* %110, align 1, !tbaa !2455
  %111 = getelementptr inbounds i8, i8* %97, i64 8
  %112 = bitcast i8* %111 to i64*
  store i64 %106, i64* %112, align 1, !tbaa !2455
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 4
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 3
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %114 to i32*
  %118 = load i32, i32* %117
  %119 = zext i32 %118 to i64
  store i64 %119, i64* %RDI, align 8, !tbaa !2428
  %120 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %121 = load i32, i32* %EDI
  %122 = zext i32 %121 to i64
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = sitofp i32 %121 to double
  %126 = bitcast i8* %120 to double*
  store double %125, double* %126, align 1, !tbaa !2455
  %127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %128 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %129 = bitcast %union.vec128_t* %XMM1 to i8*
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 4
  store i64 %131, i64* %PC
  %132 = bitcast i8* %128 to double*
  %133 = load double, double* %132, align 1
  %134 = getelementptr inbounds i8, i8* %128, i64 8
  %135 = bitcast i8* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = bitcast i8* %129 to double*
  %138 = load double, double* %137, align 1
  %139 = fmul double %133, %138
  %140 = bitcast i8* %127 to double*
  store double %139, double* %140, align 1, !tbaa !2455
  %141 = getelementptr inbounds i8, i8* %127, i64 8
  %142 = bitcast i8* %141 to i64*
  store i64 %136, i64* %142, align 1, !tbaa !2455
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 1
  store i64 %144, i64* %PC
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = add i64 %146, 8
  %148 = inttoptr i64 %146 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RBP, align 8, !tbaa !2428
  store i64 %147, i64* %145, align 8, !tbaa !2428
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 1
  store i64 %151, i64* %PC
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %154 = load i64, i64* %153, align 8, !tbaa !2428
  %155 = inttoptr i64 %154 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %152, align 8, !tbaa !2428
  %157 = add i64 %154, 8
  store i64 %157, i64* %153, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cd0_jacobi(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cd0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 21
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R10 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %57 to %union.vec128_t*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %59 to %union.vec128_t*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RBP
  %71 = add i64 %70, 24
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = load i64, i64* %RBP
  %77 = add i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %R10, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EDI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RDX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 32
  %103 = load i64, i64* %RCX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 40
  %109 = load i64, i64* %R8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 48
  %115 = load i64, i64* %R9
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 40
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = load i64, i64* %RCX
  %126 = add i64 %125, 12
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = load i64, i64* %RDI
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = trunc i64 %132 to i32
  %136 = sub i32 %135, 1
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RDI, align 8, !tbaa !2428
  %138 = icmp ult i32 %135, 1
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %139, i8* %140, align 1, !tbaa !2432
  %141 = and i32 %136, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #16
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2446
  %147 = xor i64 1, %132
  %148 = trunc i64 %147 to i32
  %149 = xor i32 %148, %136
  %150 = lshr i32 %149, 4
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %152, i8* %153, align 1, !tbaa !2447
  %154 = icmp eq i32 %136, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2448
  %157 = lshr i32 %136, 31
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2449
  %160 = lshr i32 %135, 31
  %161 = xor i32 %157, %160
  %162 = add nuw nsw i32 %161, %160
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 68
  %168 = load i32, i32* %EDI
  %169 = zext i32 %168 to i64
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 3
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %167 to i32*
  store i32 %168, i32* %172
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 40
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = load i64, i64* %RCX
  %180 = add i64 %179, 16
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 3
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i32*
  %184 = load i32, i32* %183
  %185 = zext i32 %184 to i64
  store i64 %185, i64* %RDI, align 8, !tbaa !2428
  %186 = load i64, i64* %RDI
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 3
  store i64 %188, i64* %PC
  %189 = trunc i64 %186 to i32
  %190 = sub i32 %189, 1
  %191 = zext i32 %190 to i64
  store i64 %191, i64* %RDI, align 8, !tbaa !2428
  %192 = icmp ult i32 %189, 1
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %193, i8* %194, align 1, !tbaa !2432
  %195 = and i32 %190, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2446
  %201 = xor i64 1, %186
  %202 = trunc i64 %201 to i32
  %203 = xor i32 %202, %190
  %204 = lshr i32 %203, 4
  %205 = trunc i32 %204 to i8
  %206 = and i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = icmp eq i32 %190, 0
  %209 = zext i1 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = lshr i32 %190, 31
  %212 = trunc i32 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i32 %189, 31
  %215 = xor i32 %211, %214
  %216 = add nuw nsw i32 %215, %214
  %217 = icmp eq i32 %216, 2
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %218, i8* %219, align 1, !tbaa !2450
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 72
  %222 = load i32, i32* %EDI
  %223 = zext i32 %222 to i64
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 3
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %221 to i32*
  store i32 %222, i32* %226
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 40
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = add i64 %233, 20
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i32*
  %238 = load i32, i32* %237
  %239 = zext i32 %238 to i64
  store i64 %239, i64* %RDI, align 8, !tbaa !2428
  %240 = load i64, i64* %RDI
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 3
  store i64 %242, i64* %PC
  %243 = trunc i64 %240 to i32
  %244 = sub i32 %243, 1
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RDI, align 8, !tbaa !2428
  %246 = icmp ult i32 %243, 1
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %247, i8* %248, align 1, !tbaa !2432
  %249 = and i32 %244, 255
  %250 = call i32 @llvm.ctpop.i32(i32 %249) #16
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %253, i8* %254, align 1, !tbaa !2446
  %255 = xor i64 1, %240
  %256 = trunc i64 %255 to i32
  %257 = xor i32 %256, %244
  %258 = lshr i32 %257, 4
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = icmp eq i32 %244, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2448
  %265 = lshr i32 %244, 31
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = lshr i32 %243, 31
  %269 = xor i32 %265, %268
  %270 = add nuw nsw i32 %269, %268
  %271 = icmp eq i32 %270, 2
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 76
  %276 = load i32, i32* %EDI
  %277 = zext i32 %276 to i64
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %275 to i32*
  store i32 %276, i32* %280
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 64
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 7
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i32*
  store i32 0, i32* %285
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 96
  %288 = load i64, i64* %R10
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %287 to i64*
  store i64 %288, i64* %291
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 104
  %294 = load i64, i64* %RAX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %293 to i64*
  store i64 %294, i64* %297
  br label %block_400d29

block_40187e:                                     ; preds = %block_40188a, %block_401877
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_401877 ], [ %MEMORY.0, %block_40188a ]
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 60
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = zext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i32, i32* %EAX
  %306 = zext i32 %305 to i64
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 76
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 3
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i32*
  %312 = load i32, i32* %311
  %313 = sub i32 %305, %312
  %314 = icmp ult i32 %305, %312
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %315, i8* %316, align 1, !tbaa !2432
  %317 = and i32 %313, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2446
  %323 = xor i32 %312, %305
  %324 = xor i32 %323, %313
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2447
  %329 = icmp eq i32 %313, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2448
  %332 = lshr i32 %313, 31
  %333 = trunc i32 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2449
  %335 = lshr i32 %305, 31
  %336 = lshr i32 %312, 31
  %337 = xor i32 %336, %335
  %338 = xor i32 %332, %335
  %339 = add nuw nsw i32 %338, %337
  %340 = icmp eq i32 %339, 2
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %341, i8* %342, align 1, !tbaa !2450
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 172
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 6
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 6
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %350 = load i8, i8* %349, align 1, !tbaa !2449
  %351 = icmp ne i8 %350, 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %353 = load i8, i8* %352, align 1, !tbaa !2450
  %354 = icmp ne i8 %353, 0
  %355 = xor i1 %351, %354
  %356 = xor i1 %355, true
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %359 = select i1 %355, i64 %346, i64 %344
  store i64 %359, i64* %358, align 8, !tbaa !2428
  %360 = load i8, i8* %BRANCH_TAKEN
  %361 = icmp eq i8 %360, 1
  br i1 %361, label %block_401930, label %block_40188a

block_401877:                                     ; preds = %block_40186b
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 60
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 7
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  store i32 1, i32* %366
  br label %block_40187e

block_40186b:                                     ; preds = %block_401930, %block_401864
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_401864 ], [ %MEMORY.0, %block_401930 ]
  %367 = load i64, i64* %RBP
  %368 = sub i64 %367, 56
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 3
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i32*
  %372 = load i32, i32* %371
  %373 = zext i32 %372 to i64
  store i64 %373, i64* %RAX, align 8, !tbaa !2428
  %374 = load i32, i32* %EAX
  %375 = zext i32 %374 to i64
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 72
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 3
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i32*
  %381 = load i32, i32* %380
  %382 = sub i32 %374, %381
  %383 = icmp ult i32 %374, %381
  %384 = zext i1 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %384, i8* %385, align 1, !tbaa !2432
  %386 = and i32 %382, 255
  %387 = call i32 @llvm.ctpop.i32(i32 %386) #16
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %390, i8* %391, align 1, !tbaa !2446
  %392 = xor i32 %381, %374
  %393 = xor i32 %392, %382
  %394 = lshr i32 %393, 4
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %396, i8* %397, align 1, !tbaa !2447
  %398 = icmp eq i32 %382, 0
  %399 = zext i1 %398 to i8
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %399, i8* %400, align 1, !tbaa !2448
  %401 = lshr i32 %382, 31
  %402 = trunc i32 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %402, i8* %403, align 1, !tbaa !2449
  %404 = lshr i32 %374, 31
  %405 = lshr i32 %381, 31
  %406 = xor i32 %405, %404
  %407 = xor i32 %401, %404
  %408 = add nuw nsw i32 %407, %406
  %409 = icmp eq i32 %408, 2
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %410, i8* %411, align 1, !tbaa !2450
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 210
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 6
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 6
  store i64 %417, i64* %PC
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %419 = load i8, i8* %418, align 1, !tbaa !2449
  %420 = icmp ne i8 %419, 0
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %422 = load i8, i8* %421, align 1, !tbaa !2450
  %423 = icmp ne i8 %422, 0
  %424 = xor i1 %420, %423
  %425 = xor i1 %424, true
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %428 = select i1 %424, i64 %415, i64 %413
  store i64 %428, i64* %427, align 8, !tbaa !2428
  %429 = load i8, i8* %BRANCH_TAKEN
  %430 = icmp eq i8 %429, 1
  br i1 %430, label %block_401943, label %block_401877

block_401969:                                     ; preds = %block_400d29
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 80
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to float*
  %436 = load float, float* %435
  %437 = bitcast i8* %15157 to float*
  store float %436, float* %437, align 1, !tbaa !2452
  %438 = getelementptr inbounds i8, i8* %15157, i64 4
  %439 = bitcast i8* %438 to float*
  store float 0.000000e+00, float* %439, align 1, !tbaa !2452
  %440 = getelementptr inbounds i8, i8* %15157, i64 8
  %441 = bitcast i8* %440 to float*
  store float 0.000000e+00, float* %441, align 1, !tbaa !2452
  %442 = getelementptr inbounds i8, i8* %15157, i64 12
  %443 = bitcast i8* %442 to float*
  store float 0.000000e+00, float* %443, align 1, !tbaa !2452
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 1
  store i64 %445, i64* %PC
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %447 = load i64, i64* %446, align 8, !tbaa !2428
  %448 = add i64 %447, 8
  %449 = inttoptr i64 %447 to i64*
  %450 = load i64, i64* %449
  store i64 %450, i64* %RBP, align 8, !tbaa !2428
  store i64 %448, i64* %446, align 8, !tbaa !2428
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 1
  store i64 %452, i64* %PC
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %455 = load i64, i64* %454, align 8, !tbaa !2428
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  store i64 %457, i64* %453, align 8, !tbaa !2428
  %458 = add i64 %455, 8
  store i64 %458, i64* %454, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_401864:                                     ; preds = %block_401858
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 56
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i32*
  store i32 1, i32* %463
  br label %block_40186b

block_400d76:                                     ; preds = %block_400d6a
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 16
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RAX, align 8, !tbaa !2428
  %470 = load i64, i64* %RAX
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 3
  store i64 %472, i64* %PC
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473
  store i64 %474, i64* %RAX, align 8, !tbaa !2428
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 16
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RCX, align 8, !tbaa !2428
  %481 = load i64, i64* %RCX
  %482 = add i64 %481, 12
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  %486 = load i32, i32* %485
  %487 = sext i32 %486 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %488, align 1, !tbaa !2432
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %489, align 1, !tbaa !2446
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %490, align 1, !tbaa !2447
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %491, align 1, !tbaa !2448
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %492, align 1, !tbaa !2449
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %493, align 1, !tbaa !2450
  %494 = load i64, i64* %RBP
  %495 = sub i64 %494, 16
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 4
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i64*
  %499 = load i64, i64* %498
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = load i64, i64* %RDX
  %501 = load i64, i64* %RCX
  %502 = add i64 %501, 16
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to i32*
  %506 = load i32, i32* %505
  %507 = shl i64 %500, 32
  %508 = ashr exact i64 %507, 32
  %509 = sext i32 %506 to i64
  %510 = mul nsw i64 %509, %508
  %511 = trunc i64 %510 to i32
  %512 = and i64 %510, 4294967295
  store i64 %512, i64* %RDX, align 8, !tbaa !2428
  %513 = shl i64 %510, 32
  %514 = ashr exact i64 %513, 32
  %515 = icmp ne i64 %514, %510
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %516, i8* %517, align 1, !tbaa !2432
  %518 = and i32 %511, 255
  %519 = call i32 @llvm.ctpop.i32(i32 %518) #16
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = xor i8 %521, 1
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %522, i8* %523, align 1, !tbaa !2446
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %524, align 1, !tbaa !2447
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %525, align 1, !tbaa !2448
  %526 = lshr i32 %511, 31
  %527 = trunc i32 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2449
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %516, i8* %529, align 1, !tbaa !2450
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 16
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 4
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i64*
  %535 = load i64, i64* %534
  store i64 %535, i64* %RCX, align 8, !tbaa !2428
  %536 = load i64, i64* %RDX
  %537 = load i64, i64* %RCX
  %538 = add i64 %537, 20
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 4
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %538 to i32*
  %542 = load i32, i32* %541
  %543 = shl i64 %536, 32
  %544 = ashr exact i64 %543, 32
  %545 = sext i32 %542 to i64
  %546 = mul nsw i64 %545, %544
  %547 = trunc i64 %546 to i32
  %548 = and i64 %546, 4294967295
  store i64 %548, i64* %RDX, align 8, !tbaa !2428
  %549 = shl i64 %546, 32
  %550 = ashr exact i64 %549, 32
  %551 = icmp ne i64 %550, %546
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %552, i8* %553, align 1, !tbaa !2432
  %554 = and i32 %547, 255
  %555 = call i32 @llvm.ctpop.i32(i32 %554) #16
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = xor i8 %557, 1
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %558, i8* %559, align 1, !tbaa !2446
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %560, align 1, !tbaa !2447
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %561, align 1, !tbaa !2448
  %562 = lshr i32 %547, 31
  %563 = trunc i32 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %563, i8* %564, align 1, !tbaa !2449
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %565, align 1, !tbaa !2450
  %566 = load i64, i64* %RBP
  %567 = sub i64 %566, 52
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 3
  store i64 %569, i64* %PC
  %570 = inttoptr i64 %567 to i32*
  %571 = load i32, i32* %570
  %572 = zext i32 %571 to i64
  store i64 %572, i64* %RSI, align 8, !tbaa !2428
  %573 = load i64, i64* %RBP
  %574 = sub i64 %573, 16
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 4
  store i64 %576, i64* %PC
  %577 = inttoptr i64 %574 to i64*
  %578 = load i64, i64* %577
  store i64 %578, i64* %RCX, align 8, !tbaa !2428
  %579 = load i64, i64* %RSI
  %580 = load i64, i64* %RCX
  %581 = add i64 %580, 16
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %581 to i32*
  %585 = load i32, i32* %584
  %586 = shl i64 %579, 32
  %587 = ashr exact i64 %586, 32
  %588 = sext i32 %585 to i64
  %589 = mul nsw i64 %588, %587
  %590 = trunc i64 %589 to i32
  %591 = and i64 %589, 4294967295
  store i64 %591, i64* %RSI, align 8, !tbaa !2428
  %592 = shl i64 %589, 32
  %593 = ashr exact i64 %592, 32
  %594 = icmp ne i64 %593, %589
  %595 = zext i1 %594 to i8
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %595, i8* %596, align 1, !tbaa !2432
  %597 = and i32 %590, 255
  %598 = call i32 @llvm.ctpop.i32(i32 %597) #16
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %601, i8* %602, align 1, !tbaa !2446
  %603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %603, align 1, !tbaa !2447
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %604, align 1, !tbaa !2448
  %605 = lshr i32 %590, 31
  %606 = trunc i32 %605 to i8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %606, i8* %607, align 1, !tbaa !2449
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %595, i8* %608, align 1, !tbaa !2450
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 16
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613
  store i64 %614, i64* %RCX, align 8, !tbaa !2428
  %615 = load i64, i64* %RSI
  %616 = load i64, i64* %RCX
  %617 = add i64 %616, 20
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i32*
  %621 = load i32, i32* %620
  %622 = shl i64 %615, 32
  %623 = ashr exact i64 %622, 32
  %624 = sext i32 %621 to i64
  %625 = mul nsw i64 %624, %623
  %626 = trunc i64 %625 to i32
  %627 = and i64 %625, 4294967295
  store i64 %627, i64* %RSI, align 8, !tbaa !2428
  %628 = shl i64 %625, 32
  %629 = ashr exact i64 %628, 32
  %630 = icmp ne i64 %629, %625
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %631, i8* %632, align 1, !tbaa !2432
  %633 = and i32 %626, 255
  %634 = call i32 @llvm.ctpop.i32(i32 %633) #16
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  %637 = xor i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %637, i8* %638, align 1, !tbaa !2446
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %639, align 1, !tbaa !2447
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %640, align 1, !tbaa !2448
  %641 = lshr i32 %626, 31
  %642 = trunc i32 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %642, i8* %643, align 1, !tbaa !2449
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %644, align 1, !tbaa !2450
  %645 = load i64, i64* %RDX
  %646 = load i32, i32* %ESI
  %647 = zext i32 %646 to i64
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 2
  store i64 %649, i64* %PC
  %650 = trunc i64 %645 to i32
  %651 = add i32 %646, %650
  %652 = zext i32 %651 to i64
  store i64 %652, i64* %RDX, align 8, !tbaa !2428
  %653 = icmp ult i32 %651, %650
  %654 = icmp ult i32 %651, %646
  %655 = or i1 %653, %654
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = and i32 %651, 255
  %659 = call i32 @llvm.ctpop.i32(i32 %658) #16
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %662, i8* %663, align 1, !tbaa !2446
  %664 = xor i64 %647, %645
  %665 = trunc i64 %664 to i32
  %666 = xor i32 %665, %651
  %667 = lshr i32 %666, 4
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i32 %651, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i32 %651, 31
  %675 = trunc i32 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i32 %650, 31
  %678 = lshr i32 %646, 31
  %679 = xor i32 %674, %677
  %680 = xor i32 %674, %678
  %681 = add nuw nsw i32 %679, %680
  %682 = icmp eq i32 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 56
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RSI, align 8, !tbaa !2428
  %692 = load i64, i64* %RBP
  %693 = sub i64 %692, 16
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %693 to i64*
  %697 = load i64, i64* %696
  store i64 %697, i64* %RCX, align 8, !tbaa !2428
  %698 = load i64, i64* %RSI
  %699 = load i64, i64* %RCX
  %700 = add i64 %699, 20
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 4
  store i64 %702, i64* %PC
  %703 = inttoptr i64 %700 to i32*
  %704 = load i32, i32* %703
  %705 = shl i64 %698, 32
  %706 = ashr exact i64 %705, 32
  %707 = sext i32 %704 to i64
  %708 = mul nsw i64 %707, %706
  %709 = trunc i64 %708 to i32
  %710 = and i64 %708, 4294967295
  store i64 %710, i64* %RSI, align 8, !tbaa !2428
  %711 = shl i64 %708, 32
  %712 = ashr exact i64 %711, 32
  %713 = icmp ne i64 %712, %708
  %714 = zext i1 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %714, i8* %715, align 1, !tbaa !2432
  %716 = and i32 %709, 255
  %717 = call i32 @llvm.ctpop.i32(i32 %716) #16
  %718 = trunc i32 %717 to i8
  %719 = and i8 %718, 1
  %720 = xor i8 %719, 1
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %720, i8* %721, align 1, !tbaa !2446
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %722, align 1, !tbaa !2447
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %723, align 1, !tbaa !2448
  %724 = lshr i32 %709, 31
  %725 = trunc i32 %724 to i8
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %725, i8* %726, align 1, !tbaa !2449
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %714, i8* %727, align 1, !tbaa !2450
  %728 = load i64, i64* %RDX
  %729 = load i32, i32* %ESI
  %730 = zext i32 %729 to i64
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 2
  store i64 %732, i64* %PC
  %733 = trunc i64 %728 to i32
  %734 = add i32 %729, %733
  %735 = zext i32 %734 to i64
  store i64 %735, i64* %RDX, align 8, !tbaa !2428
  %736 = icmp ult i32 %734, %733
  %737 = icmp ult i32 %734, %729
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %739, i8* %740, align 1, !tbaa !2432
  %741 = and i32 %734, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2446
  %747 = xor i64 %730, %728
  %748 = trunc i64 %747 to i32
  %749 = xor i32 %748, %734
  %750 = lshr i32 %749, 4
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %752, i8* %753, align 1, !tbaa !2447
  %754 = icmp eq i32 %734, 0
  %755 = zext i1 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %755, i8* %756, align 1, !tbaa !2448
  %757 = lshr i32 %734, 31
  %758 = trunc i32 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %758, i8* %759, align 1, !tbaa !2449
  %760 = lshr i32 %733, 31
  %761 = lshr i32 %729, 31
  %762 = xor i32 %757, %760
  %763 = xor i32 %757, %761
  %764 = add nuw nsw i32 %762, %763
  %765 = icmp eq i32 %764, 2
  %766 = zext i1 %765 to i8
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %766, i8* %767, align 1, !tbaa !2450
  %768 = load i64, i64* %RDX
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 60
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 3
  store i64 %772, i64* %PC
  %773 = trunc i64 %768 to i32
  %774 = inttoptr i64 %770 to i32*
  %775 = load i32, i32* %774
  %776 = add i32 %775, %773
  %777 = zext i32 %776 to i64
  store i64 %777, i64* %RDX, align 8, !tbaa !2428
  %778 = icmp ult i32 %776, %773
  %779 = icmp ult i32 %776, %775
  %780 = or i1 %778, %779
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %781, i8* %782, align 1, !tbaa !2432
  %783 = and i32 %776, 255
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %787, i8* %788, align 1, !tbaa !2446
  %789 = xor i32 %775, %773
  %790 = xor i32 %789, %776
  %791 = lshr i32 %790, 4
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %793, i8* %794, align 1, !tbaa !2447
  %795 = icmp eq i32 %776, 0
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %796, i8* %797, align 1, !tbaa !2448
  %798 = lshr i32 %776, 31
  %799 = trunc i32 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = lshr i32 %773, 31
  %802 = lshr i32 %775, 31
  %803 = xor i32 %798, %801
  %804 = xor i32 %798, %802
  %805 = add nuw nsw i32 %803, %804
  %806 = icmp eq i32 %805, 2
  %807 = zext i1 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %807, i8* %808, align 1, !tbaa !2450
  %809 = load i32, i32* %EDX
  %810 = zext i32 %809 to i64
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  %813 = shl i64 %810, 32
  %814 = ashr exact i64 %813, 32
  store i64 %814, i64* %RCX, align 8, !tbaa !2428
  %815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %816 = load i64, i64* %RAX
  %817 = load i64, i64* %RCX
  %818 = mul i64 %817, 4
  %819 = add i64 %818, %816
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 5
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %819 to float*
  %823 = load float, float* %822
  %824 = bitcast i8* %815 to float*
  store float %823, float* %824, align 1, !tbaa !2452
  %825 = getelementptr inbounds i8, i8* %815, i64 4
  %826 = bitcast i8* %825 to float*
  store float 0.000000e+00, float* %826, align 1, !tbaa !2452
  %827 = getelementptr inbounds i8, i8* %815, i64 8
  %828 = bitcast i8* %827 to float*
  store float 0.000000e+00, float* %828, align 1, !tbaa !2452
  %829 = getelementptr inbounds i8, i8* %815, i64 12
  %830 = bitcast i8* %829 to float*
  store float 0.000000e+00, float* %830, align 1, !tbaa !2452
  %831 = load i64, i64* %RBP
  %832 = sub i64 %831, 40
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = inttoptr i64 %832 to i64*
  %836 = load i64, i64* %835
  store i64 %836, i64* %RAX, align 8, !tbaa !2428
  %837 = load i64, i64* %RAX
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 3
  store i64 %839, i64* %PC
  %840 = inttoptr i64 %837 to i64*
  %841 = load i64, i64* %840
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = load i64, i64* %RBP
  %843 = sub i64 %842, 40
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 4
  store i64 %845, i64* %PC
  %846 = inttoptr i64 %843 to i64*
  %847 = load i64, i64* %846
  store i64 %847, i64* %RCX, align 8, !tbaa !2428
  %848 = load i64, i64* %RCX
  %849 = add i64 %848, 12
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 4
  store i64 %851, i64* %PC
  %852 = inttoptr i64 %849 to i32*
  %853 = load i32, i32* %852
  %854 = sext i32 %853 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %855, align 1, !tbaa !2432
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %856, align 1, !tbaa !2446
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %857, align 1, !tbaa !2447
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %858, align 1, !tbaa !2448
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %859, align 1, !tbaa !2449
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %860, align 1, !tbaa !2450
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 40
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = inttoptr i64 %862 to i64*
  %866 = load i64, i64* %865
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = load i64, i64* %RDX
  %868 = load i64, i64* %RCX
  %869 = add i64 %868, 16
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 4
  store i64 %871, i64* %PC
  %872 = inttoptr i64 %869 to i32*
  %873 = load i32, i32* %872
  %874 = shl i64 %867, 32
  %875 = ashr exact i64 %874, 32
  %876 = sext i32 %873 to i64
  %877 = mul nsw i64 %876, %875
  %878 = trunc i64 %877 to i32
  %879 = and i64 %877, 4294967295
  store i64 %879, i64* %RDX, align 8, !tbaa !2428
  %880 = shl i64 %877, 32
  %881 = ashr exact i64 %880, 32
  %882 = icmp ne i64 %881, %877
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %883, i8* %884, align 1, !tbaa !2432
  %885 = and i32 %878, 255
  %886 = call i32 @llvm.ctpop.i32(i32 %885) #16
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = xor i8 %888, 1
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %889, i8* %890, align 1, !tbaa !2446
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %891, align 1, !tbaa !2447
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %892, align 1, !tbaa !2448
  %893 = lshr i32 %878, 31
  %894 = trunc i32 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2449
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %883, i8* %896, align 1, !tbaa !2450
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 40
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901
  store i64 %902, i64* %RCX, align 8, !tbaa !2428
  %903 = load i64, i64* %RDX
  %904 = load i64, i64* %RCX
  %905 = add i64 %904, 20
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %905 to i32*
  %909 = load i32, i32* %908
  %910 = shl i64 %903, 32
  %911 = ashr exact i64 %910, 32
  %912 = sext i32 %909 to i64
  %913 = mul nsw i64 %912, %911
  %914 = trunc i64 %913 to i32
  %915 = and i64 %913, 4294967295
  store i64 %915, i64* %RDX, align 8, !tbaa !2428
  %916 = shl i64 %913, 32
  %917 = ashr exact i64 %916, 32
  %918 = icmp ne i64 %917, %913
  %919 = zext i1 %918 to i8
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %919, i8* %920, align 1, !tbaa !2432
  %921 = and i32 %914, 255
  %922 = call i32 @llvm.ctpop.i32(i32 %921) #16
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %925, i8* %926, align 1, !tbaa !2446
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %927, align 1, !tbaa !2447
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %928, align 1, !tbaa !2448
  %929 = lshr i32 %914, 31
  %930 = trunc i32 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %930, i8* %931, align 1, !tbaa !2449
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %919, i8* %932, align 1, !tbaa !2450
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 52
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 3
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i32*
  %938 = load i32, i32* %937
  %939 = zext i32 %938 to i64
  store i64 %939, i64* %RSI, align 8, !tbaa !2428
  %940 = load i64, i64* %RSI
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 3
  store i64 %942, i64* %PC
  %943 = trunc i64 %940 to i32
  %944 = add i32 1, %943
  %945 = zext i32 %944 to i64
  store i64 %945, i64* %RSI, align 8, !tbaa !2428
  %946 = icmp ult i32 %944, %943
  %947 = icmp ult i32 %944, 1
  %948 = or i1 %946, %947
  %949 = zext i1 %948 to i8
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %949, i8* %950, align 1, !tbaa !2432
  %951 = and i32 %944, 255
  %952 = call i32 @llvm.ctpop.i32(i32 %951) #16
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  %955 = xor i8 %954, 1
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %955, i8* %956, align 1, !tbaa !2446
  %957 = xor i64 1, %940
  %958 = trunc i64 %957 to i32
  %959 = xor i32 %958, %944
  %960 = lshr i32 %959, 4
  %961 = trunc i32 %960 to i8
  %962 = and i8 %961, 1
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %962, i8* %963, align 1, !tbaa !2447
  %964 = icmp eq i32 %944, 0
  %965 = zext i1 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %965, i8* %966, align 1, !tbaa !2448
  %967 = lshr i32 %944, 31
  %968 = trunc i32 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %968, i8* %969, align 1, !tbaa !2449
  %970 = lshr i32 %943, 31
  %971 = xor i32 %967, %970
  %972 = add nuw nsw i32 %971, %967
  %973 = icmp eq i32 %972, 2
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %974, i8* %975, align 1, !tbaa !2450
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 40
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980
  store i64 %981, i64* %RCX, align 8, !tbaa !2428
  %982 = load i64, i64* %RSI
  %983 = load i64, i64* %RCX
  %984 = add i64 %983, 16
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 4
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %984 to i32*
  %988 = load i32, i32* %987
  %989 = shl i64 %982, 32
  %990 = ashr exact i64 %989, 32
  %991 = sext i32 %988 to i64
  %992 = mul nsw i64 %991, %990
  %993 = trunc i64 %992 to i32
  %994 = and i64 %992, 4294967295
  store i64 %994, i64* %RSI, align 8, !tbaa !2428
  %995 = shl i64 %992, 32
  %996 = ashr exact i64 %995, 32
  %997 = icmp ne i64 %996, %992
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %998, i8* %999, align 1, !tbaa !2432
  %1000 = and i32 %993, 255
  %1001 = call i32 @llvm.ctpop.i32(i32 %1000) #16
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1004, i8* %1005, align 1, !tbaa !2446
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1006, align 1, !tbaa !2447
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1007, align 1, !tbaa !2448
  %1008 = lshr i32 %993, 31
  %1009 = trunc i32 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1009, i8* %1010, align 1, !tbaa !2449
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %998, i8* %1011, align 1, !tbaa !2450
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 40
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 4
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i64*
  %1017 = load i64, i64* %1016
  store i64 %1017, i64* %RCX, align 8, !tbaa !2428
  %1018 = load i64, i64* %RSI
  %1019 = load i64, i64* %RCX
  %1020 = add i64 %1019, 20
  %1021 = load i64, i64* %PC
  %1022 = add i64 %1021, 4
  store i64 %1022, i64* %PC
  %1023 = inttoptr i64 %1020 to i32*
  %1024 = load i32, i32* %1023
  %1025 = shl i64 %1018, 32
  %1026 = ashr exact i64 %1025, 32
  %1027 = sext i32 %1024 to i64
  %1028 = mul nsw i64 %1027, %1026
  %1029 = trunc i64 %1028 to i32
  %1030 = and i64 %1028, 4294967295
  store i64 %1030, i64* %RSI, align 8, !tbaa !2428
  %1031 = shl i64 %1028, 32
  %1032 = ashr exact i64 %1031, 32
  %1033 = icmp ne i64 %1032, %1028
  %1034 = zext i1 %1033 to i8
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1034, i8* %1035, align 1, !tbaa !2432
  %1036 = and i32 %1029, 255
  %1037 = call i32 @llvm.ctpop.i32(i32 %1036) #16
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1040, i8* %1041, align 1, !tbaa !2446
  %1042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1042, align 1, !tbaa !2447
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1043, align 1, !tbaa !2448
  %1044 = lshr i32 %1029, 31
  %1045 = trunc i32 %1044 to i8
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1045, i8* %1046, align 1, !tbaa !2449
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1034, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %RDX
  %1049 = load i32, i32* %ESI
  %1050 = zext i32 %1049 to i64
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 2
  store i64 %1052, i64* %PC
  %1053 = trunc i64 %1048 to i32
  %1054 = add i32 %1049, %1053
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDX, align 8, !tbaa !2428
  %1056 = icmp ult i32 %1054, %1053
  %1057 = icmp ult i32 %1054, %1049
  %1058 = or i1 %1056, %1057
  %1059 = zext i1 %1058 to i8
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1059, i8* %1060, align 1, !tbaa !2432
  %1061 = and i32 %1054, 255
  %1062 = call i32 @llvm.ctpop.i32(i32 %1061) #16
  %1063 = trunc i32 %1062 to i8
  %1064 = and i8 %1063, 1
  %1065 = xor i8 %1064, 1
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1065, i8* %1066, align 1, !tbaa !2446
  %1067 = xor i64 %1050, %1048
  %1068 = trunc i64 %1067 to i32
  %1069 = xor i32 %1068, %1054
  %1070 = lshr i32 %1069, 4
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1072, i8* %1073, align 1, !tbaa !2447
  %1074 = icmp eq i32 %1054, 0
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1075, i8* %1076, align 1, !tbaa !2448
  %1077 = lshr i32 %1054, 31
  %1078 = trunc i32 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1078, i8* %1079, align 1, !tbaa !2449
  %1080 = lshr i32 %1053, 31
  %1081 = lshr i32 %1049, 31
  %1082 = xor i32 %1077, %1080
  %1083 = xor i32 %1077, %1081
  %1084 = add nuw nsw i32 %1082, %1083
  %1085 = icmp eq i32 %1084, 2
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1086, i8* %1087, align 1, !tbaa !2450
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 56
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 3
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i32*
  %1093 = load i32, i32* %1092
  %1094 = zext i32 %1093 to i64
  store i64 %1094, i64* %RSI, align 8, !tbaa !2428
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 40
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 4
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i64*
  %1100 = load i64, i64* %1099
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RSI
  %1102 = load i64, i64* %RCX
  %1103 = add i64 %1102, 20
  %1104 = load i64, i64* %PC
  %1105 = add i64 %1104, 4
  store i64 %1105, i64* %PC
  %1106 = inttoptr i64 %1103 to i32*
  %1107 = load i32, i32* %1106
  %1108 = shl i64 %1101, 32
  %1109 = ashr exact i64 %1108, 32
  %1110 = sext i32 %1107 to i64
  %1111 = mul nsw i64 %1110, %1109
  %1112 = trunc i64 %1111 to i32
  %1113 = and i64 %1111, 4294967295
  store i64 %1113, i64* %RSI, align 8, !tbaa !2428
  %1114 = shl i64 %1111, 32
  %1115 = ashr exact i64 %1114, 32
  %1116 = icmp ne i64 %1115, %1111
  %1117 = zext i1 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1117, i8* %1118, align 1, !tbaa !2432
  %1119 = and i32 %1112, 255
  %1120 = call i32 @llvm.ctpop.i32(i32 %1119) #16
  %1121 = trunc i32 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = xor i8 %1122, 1
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1123, i8* %1124, align 1, !tbaa !2446
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1125, align 1, !tbaa !2447
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1126, align 1, !tbaa !2448
  %1127 = lshr i32 %1112, 31
  %1128 = trunc i32 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2449
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1117, i8* %1130, align 1, !tbaa !2450
  %1131 = load i64, i64* %RDX
  %1132 = load i32, i32* %ESI
  %1133 = zext i32 %1132 to i64
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 2
  store i64 %1135, i64* %PC
  %1136 = trunc i64 %1131 to i32
  %1137 = add i32 %1132, %1136
  %1138 = zext i32 %1137 to i64
  store i64 %1138, i64* %RDX, align 8, !tbaa !2428
  %1139 = icmp ult i32 %1137, %1136
  %1140 = icmp ult i32 %1137, %1132
  %1141 = or i1 %1139, %1140
  %1142 = zext i1 %1141 to i8
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1142, i8* %1143, align 1, !tbaa !2432
  %1144 = and i32 %1137, 255
  %1145 = call i32 @llvm.ctpop.i32(i32 %1144) #16
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  %1148 = xor i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1148, i8* %1149, align 1, !tbaa !2446
  %1150 = xor i64 %1133, %1131
  %1151 = trunc i64 %1150 to i32
  %1152 = xor i32 %1151, %1137
  %1153 = lshr i32 %1152, 4
  %1154 = trunc i32 %1153 to i8
  %1155 = and i8 %1154, 1
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1155, i8* %1156, align 1, !tbaa !2447
  %1157 = icmp eq i32 %1137, 0
  %1158 = zext i1 %1157 to i8
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1158, i8* %1159, align 1, !tbaa !2448
  %1160 = lshr i32 %1137, 31
  %1161 = trunc i32 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1161, i8* %1162, align 1, !tbaa !2449
  %1163 = lshr i32 %1136, 31
  %1164 = lshr i32 %1132, 31
  %1165 = xor i32 %1160, %1163
  %1166 = xor i32 %1160, %1164
  %1167 = add nuw nsw i32 %1165, %1166
  %1168 = icmp eq i32 %1167, 2
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1169, i8* %1170, align 1, !tbaa !2450
  %1171 = load i64, i64* %RDX
  %1172 = load i64, i64* %RBP
  %1173 = sub i64 %1172, 60
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 3
  store i64 %1175, i64* %PC
  %1176 = trunc i64 %1171 to i32
  %1177 = inttoptr i64 %1173 to i32*
  %1178 = load i32, i32* %1177
  %1179 = add i32 %1178, %1176
  %1180 = zext i32 %1179 to i64
  store i64 %1180, i64* %RDX, align 8, !tbaa !2428
  %1181 = icmp ult i32 %1179, %1176
  %1182 = icmp ult i32 %1179, %1178
  %1183 = or i1 %1181, %1182
  %1184 = zext i1 %1183 to i8
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1184, i8* %1185, align 1, !tbaa !2432
  %1186 = and i32 %1179, 255
  %1187 = call i32 @llvm.ctpop.i32(i32 %1186) #16
  %1188 = trunc i32 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = xor i8 %1189, 1
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1190, i8* %1191, align 1, !tbaa !2446
  %1192 = xor i32 %1178, %1176
  %1193 = xor i32 %1192, %1179
  %1194 = lshr i32 %1193, 4
  %1195 = trunc i32 %1194 to i8
  %1196 = and i8 %1195, 1
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1196, i8* %1197, align 1, !tbaa !2447
  %1198 = icmp eq i32 %1179, 0
  %1199 = zext i1 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1199, i8* %1200, align 1, !tbaa !2448
  %1201 = lshr i32 %1179, 31
  %1202 = trunc i32 %1201 to i8
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1202, i8* %1203, align 1, !tbaa !2449
  %1204 = lshr i32 %1176, 31
  %1205 = lshr i32 %1178, 31
  %1206 = xor i32 %1201, %1204
  %1207 = xor i32 %1201, %1205
  %1208 = add nuw nsw i32 %1206, %1207
  %1209 = icmp eq i32 %1208, 2
  %1210 = zext i1 %1209 to i8
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1210, i8* %1211, align 1, !tbaa !2450
  %1212 = load i32, i32* %EDX
  %1213 = zext i32 %1212 to i64
  %1214 = load i64, i64* %PC
  %1215 = add i64 %1214, 3
  store i64 %1215, i64* %PC
  %1216 = shl i64 %1213, 32
  %1217 = ashr exact i64 %1216, 32
  store i64 %1217, i64* %RCX, align 8, !tbaa !2428
  %1218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1220 = load i64, i64* %RAX
  %1221 = load i64, i64* %RCX
  %1222 = mul i64 %1221, 4
  %1223 = add i64 %1222, %1220
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 5
  store i64 %1225, i64* %PC
  %1226 = bitcast i8* %1219 to <2 x float>*
  %1227 = load <2 x float>, <2 x float>* %1226, align 1
  %1228 = getelementptr inbounds i8, i8* %1219, i64 8
  %1229 = bitcast i8* %1228 to <2 x i32>*
  %1230 = load <2 x i32>, <2 x i32>* %1229, align 1
  %1231 = inttoptr i64 %1223 to float*
  %1232 = load float, float* %1231
  %1233 = extractelement <2 x float> %1227, i32 0
  %1234 = fmul float %1233, %1232
  %1235 = bitcast i8* %1218 to float*
  store float %1234, float* %1235, align 1, !tbaa !2452
  %1236 = bitcast <2 x float> %1227 to <2 x i32>
  %1237 = extractelement <2 x i32> %1236, i32 1
  %1238 = getelementptr inbounds i8, i8* %1218, i64 4
  %1239 = bitcast i8* %1238 to i32*
  store i32 %1237, i32* %1239, align 1, !tbaa !2452
  %1240 = extractelement <2 x i32> %1230, i32 0
  %1241 = getelementptr inbounds i8, i8* %1218, i64 8
  %1242 = bitcast i8* %1241 to i32*
  store i32 %1240, i32* %1242, align 1, !tbaa !2452
  %1243 = extractelement <2 x i32> %1230, i32 1
  %1244 = getelementptr inbounds i8, i8* %1218, i64 12
  %1245 = bitcast i8* %1244 to i32*
  store i32 %1243, i32* %1245, align 1, !tbaa !2452
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 16
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i64*
  %1251 = load i64, i64* %1250
  store i64 %1251, i64* %RAX, align 8, !tbaa !2428
  %1252 = load i64, i64* %RAX
  %1253 = load i64, i64* %PC
  %1254 = add i64 %1253, 3
  store i64 %1254, i64* %PC
  %1255 = inttoptr i64 %1252 to i64*
  %1256 = load i64, i64* %1255
  store i64 %1256, i64* %RAX, align 8, !tbaa !2428
  %1257 = load i64, i64* %RBP
  %1258 = sub i64 %1257, 16
  %1259 = load i64, i64* %PC
  %1260 = add i64 %1259, 4
  store i64 %1260, i64* %PC
  %1261 = inttoptr i64 %1258 to i64*
  %1262 = load i64, i64* %1261
  store i64 %1262, i64* %RCX, align 8, !tbaa !2428
  %1263 = load i64, i64* %RCX
  %1264 = add i64 %1263, 12
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 3
  store i64 %1266, i64* %PC
  %1267 = inttoptr i64 %1264 to i32*
  %1268 = load i32, i32* %1267
  %1269 = zext i32 %1268 to i64
  store i64 %1269, i64* %RDX, align 8, !tbaa !2428
  %1270 = load i64, i64* %RDX
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 3
  store i64 %1272, i64* %PC
  %1273 = load i64, i64* %RBP
  %1274 = sub i64 %1273, 16
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 4
  store i64 %1276, i64* %PC
  %1277 = inttoptr i64 %1274 to i64*
  %1278 = load i64, i64* %1277
  store i64 %1278, i64* %RCX, align 8, !tbaa !2428
  %1279 = load i64, i64* %RDX
  %1280 = load i64, i64* %RCX
  %1281 = add i64 %1280, 16
  %1282 = load i64, i64* %PC
  %1283 = add i64 %1282, 4
  store i64 %1283, i64* %PC
  %1284 = inttoptr i64 %1281 to i32*
  %1285 = load i32, i32* %1284
  %1286 = shl i64 %1279, 32
  %1287 = ashr exact i64 %1286, 32
  %1288 = sext i32 %1285 to i64
  %1289 = mul nsw i64 %1288, %1287
  %1290 = trunc i64 %1289 to i32
  %1291 = and i64 %1289, 4294967295
  store i64 %1291, i64* %RDX, align 8, !tbaa !2428
  %1292 = shl i64 %1289, 32
  %1293 = ashr exact i64 %1292, 32
  %1294 = icmp ne i64 %1293, %1289
  %1295 = zext i1 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1295, i8* %1296, align 1, !tbaa !2432
  %1297 = and i32 %1290, 255
  %1298 = call i32 @llvm.ctpop.i32(i32 %1297) #16
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = xor i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1301, i8* %1302, align 1, !tbaa !2446
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1303, align 1, !tbaa !2447
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1304, align 1, !tbaa !2448
  %1305 = lshr i32 %1290, 31
  %1306 = trunc i32 %1305 to i8
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1306, i8* %1307, align 1, !tbaa !2449
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1295, i8* %1308, align 1, !tbaa !2450
  %1309 = load i64, i64* %RBP
  %1310 = sub i64 %1309, 16
  %1311 = load i64, i64* %PC
  %1312 = add i64 %1311, 4
  store i64 %1312, i64* %PC
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313
  store i64 %1314, i64* %RCX, align 8, !tbaa !2428
  %1315 = load i64, i64* %RDX
  %1316 = load i64, i64* %RCX
  %1317 = add i64 %1316, 20
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 4
  store i64 %1319, i64* %PC
  %1320 = inttoptr i64 %1317 to i32*
  %1321 = load i32, i32* %1320
  %1322 = shl i64 %1315, 32
  %1323 = ashr exact i64 %1322, 32
  %1324 = sext i32 %1321 to i64
  %1325 = mul nsw i64 %1324, %1323
  %1326 = trunc i64 %1325 to i32
  %1327 = and i64 %1325, 4294967295
  store i64 %1327, i64* %RDX, align 8, !tbaa !2428
  %1328 = shl i64 %1325, 32
  %1329 = ashr exact i64 %1328, 32
  %1330 = icmp ne i64 %1329, %1325
  %1331 = zext i1 %1330 to i8
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1331, i8* %1332, align 1, !tbaa !2432
  %1333 = and i32 %1326, 255
  %1334 = call i32 @llvm.ctpop.i32(i32 %1333) #16
  %1335 = trunc i32 %1334 to i8
  %1336 = and i8 %1335, 1
  %1337 = xor i8 %1336, 1
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1337, i8* %1338, align 1, !tbaa !2446
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1339, align 1, !tbaa !2447
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1340, align 1, !tbaa !2448
  %1341 = lshr i32 %1326, 31
  %1342 = trunc i32 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1342, i8* %1343, align 1, !tbaa !2449
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1331, i8* %1344, align 1, !tbaa !2450
  %1345 = load i64, i64* %RBP
  %1346 = sub i64 %1345, 52
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 3
  store i64 %1348, i64* %PC
  %1349 = inttoptr i64 %1346 to i32*
  %1350 = load i32, i32* %1349
  %1351 = zext i32 %1350 to i64
  store i64 %1351, i64* %RSI, align 8, !tbaa !2428
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 16
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 4
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i64*
  %1357 = load i64, i64* %1356
  store i64 %1357, i64* %RCX, align 8, !tbaa !2428
  %1358 = load i64, i64* %RSI
  %1359 = load i64, i64* %RCX
  %1360 = add i64 %1359, 16
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 4
  store i64 %1362, i64* %PC
  %1363 = inttoptr i64 %1360 to i32*
  %1364 = load i32, i32* %1363
  %1365 = shl i64 %1358, 32
  %1366 = ashr exact i64 %1365, 32
  %1367 = sext i32 %1364 to i64
  %1368 = mul nsw i64 %1367, %1366
  %1369 = trunc i64 %1368 to i32
  %1370 = and i64 %1368, 4294967295
  store i64 %1370, i64* %RSI, align 8, !tbaa !2428
  %1371 = shl i64 %1368, 32
  %1372 = ashr exact i64 %1371, 32
  %1373 = icmp ne i64 %1372, %1368
  %1374 = zext i1 %1373 to i8
  %1375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1374, i8* %1375, align 1, !tbaa !2432
  %1376 = and i32 %1369, 255
  %1377 = call i32 @llvm.ctpop.i32(i32 %1376) #16
  %1378 = trunc i32 %1377 to i8
  %1379 = and i8 %1378, 1
  %1380 = xor i8 %1379, 1
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1380, i8* %1381, align 1, !tbaa !2446
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1382, align 1, !tbaa !2447
  %1383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1383, align 1, !tbaa !2448
  %1384 = lshr i32 %1369, 31
  %1385 = trunc i32 %1384 to i8
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1385, i8* %1386, align 1, !tbaa !2449
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1374, i8* %1387, align 1, !tbaa !2450
  %1388 = load i64, i64* %RBP
  %1389 = sub i64 %1388, 16
  %1390 = load i64, i64* %PC
  %1391 = add i64 %1390, 4
  store i64 %1391, i64* %PC
  %1392 = inttoptr i64 %1389 to i64*
  %1393 = load i64, i64* %1392
  store i64 %1393, i64* %RCX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RSI
  %1395 = load i64, i64* %RCX
  %1396 = add i64 %1395, 20
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 4
  store i64 %1398, i64* %PC
  %1399 = inttoptr i64 %1396 to i32*
  %1400 = load i32, i32* %1399
  %1401 = shl i64 %1394, 32
  %1402 = ashr exact i64 %1401, 32
  %1403 = sext i32 %1400 to i64
  %1404 = mul nsw i64 %1403, %1402
  %1405 = trunc i64 %1404 to i32
  %1406 = and i64 %1404, 4294967295
  store i64 %1406, i64* %RSI, align 8, !tbaa !2428
  %1407 = shl i64 %1404, 32
  %1408 = ashr exact i64 %1407, 32
  %1409 = icmp ne i64 %1408, %1404
  %1410 = zext i1 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1410, i8* %1411, align 1, !tbaa !2432
  %1412 = and i32 %1405, 255
  %1413 = call i32 @llvm.ctpop.i32(i32 %1412) #16
  %1414 = trunc i32 %1413 to i8
  %1415 = and i8 %1414, 1
  %1416 = xor i8 %1415, 1
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1416, i8* %1417, align 1, !tbaa !2446
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1418, align 1, !tbaa !2447
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1419, align 1, !tbaa !2448
  %1420 = lshr i32 %1405, 31
  %1421 = trunc i32 %1420 to i8
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1421, i8* %1422, align 1, !tbaa !2449
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1410, i8* %1423, align 1, !tbaa !2450
  %1424 = load i64, i64* %RDX
  %1425 = load i32, i32* %ESI
  %1426 = zext i32 %1425 to i64
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 2
  store i64 %1428, i64* %PC
  %1429 = trunc i64 %1424 to i32
  %1430 = add i32 %1425, %1429
  %1431 = zext i32 %1430 to i64
  store i64 %1431, i64* %RDX, align 8, !tbaa !2428
  %1432 = icmp ult i32 %1430, %1429
  %1433 = icmp ult i32 %1430, %1425
  %1434 = or i1 %1432, %1433
  %1435 = zext i1 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1435, i8* %1436, align 1, !tbaa !2432
  %1437 = and i32 %1430, 255
  %1438 = call i32 @llvm.ctpop.i32(i32 %1437) #16
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1441, i8* %1442, align 1, !tbaa !2446
  %1443 = xor i64 %1426, %1424
  %1444 = trunc i64 %1443 to i32
  %1445 = xor i32 %1444, %1430
  %1446 = lshr i32 %1445, 4
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1448, i8* %1449, align 1, !tbaa !2447
  %1450 = icmp eq i32 %1430, 0
  %1451 = zext i1 %1450 to i8
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1451, i8* %1452, align 1, !tbaa !2448
  %1453 = lshr i32 %1430, 31
  %1454 = trunc i32 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1454, i8* %1455, align 1, !tbaa !2449
  %1456 = lshr i32 %1429, 31
  %1457 = lshr i32 %1425, 31
  %1458 = xor i32 %1453, %1456
  %1459 = xor i32 %1453, %1457
  %1460 = add nuw nsw i32 %1458, %1459
  %1461 = icmp eq i32 %1460, 2
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1462, i8* %1463, align 1, !tbaa !2450
  %1464 = load i64, i64* %RBP
  %1465 = sub i64 %1464, 56
  %1466 = load i64, i64* %PC
  %1467 = add i64 %1466, 3
  store i64 %1467, i64* %PC
  %1468 = inttoptr i64 %1465 to i32*
  %1469 = load i32, i32* %1468
  %1470 = zext i32 %1469 to i64
  store i64 %1470, i64* %RSI, align 8, !tbaa !2428
  %1471 = load i64, i64* %RBP
  %1472 = sub i64 %1471, 16
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 4
  store i64 %1474, i64* %PC
  %1475 = inttoptr i64 %1472 to i64*
  %1476 = load i64, i64* %1475
  store i64 %1476, i64* %RCX, align 8, !tbaa !2428
  %1477 = load i64, i64* %RSI
  %1478 = load i64, i64* %RCX
  %1479 = add i64 %1478, 20
  %1480 = load i64, i64* %PC
  %1481 = add i64 %1480, 4
  store i64 %1481, i64* %PC
  %1482 = inttoptr i64 %1479 to i32*
  %1483 = load i32, i32* %1482
  %1484 = shl i64 %1477, 32
  %1485 = ashr exact i64 %1484, 32
  %1486 = sext i32 %1483 to i64
  %1487 = mul nsw i64 %1486, %1485
  %1488 = trunc i64 %1487 to i32
  %1489 = and i64 %1487, 4294967295
  store i64 %1489, i64* %RSI, align 8, !tbaa !2428
  %1490 = shl i64 %1487, 32
  %1491 = ashr exact i64 %1490, 32
  %1492 = icmp ne i64 %1491, %1487
  %1493 = zext i1 %1492 to i8
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1493, i8* %1494, align 1, !tbaa !2432
  %1495 = and i32 %1488, 255
  %1496 = call i32 @llvm.ctpop.i32(i32 %1495) #16
  %1497 = trunc i32 %1496 to i8
  %1498 = and i8 %1497, 1
  %1499 = xor i8 %1498, 1
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1499, i8* %1500, align 1, !tbaa !2446
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1501, align 1, !tbaa !2447
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1502, align 1, !tbaa !2448
  %1503 = lshr i32 %1488, 31
  %1504 = trunc i32 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1504, i8* %1505, align 1, !tbaa !2449
  %1506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1493, i8* %1506, align 1, !tbaa !2450
  %1507 = load i64, i64* %RDX
  %1508 = load i32, i32* %ESI
  %1509 = zext i32 %1508 to i64
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 2
  store i64 %1511, i64* %PC
  %1512 = trunc i64 %1507 to i32
  %1513 = add i32 %1508, %1512
  %1514 = zext i32 %1513 to i64
  store i64 %1514, i64* %RDX, align 8, !tbaa !2428
  %1515 = icmp ult i32 %1513, %1512
  %1516 = icmp ult i32 %1513, %1508
  %1517 = or i1 %1515, %1516
  %1518 = zext i1 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1518, i8* %1519, align 1, !tbaa !2432
  %1520 = and i32 %1513, 255
  %1521 = call i32 @llvm.ctpop.i32(i32 %1520) #16
  %1522 = trunc i32 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = xor i8 %1523, 1
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1524, i8* %1525, align 1, !tbaa !2446
  %1526 = xor i64 %1509, %1507
  %1527 = trunc i64 %1526 to i32
  %1528 = xor i32 %1527, %1513
  %1529 = lshr i32 %1528, 4
  %1530 = trunc i32 %1529 to i8
  %1531 = and i8 %1530, 1
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1531, i8* %1532, align 1, !tbaa !2447
  %1533 = icmp eq i32 %1513, 0
  %1534 = zext i1 %1533 to i8
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1534, i8* %1535, align 1, !tbaa !2448
  %1536 = lshr i32 %1513, 31
  %1537 = trunc i32 %1536 to i8
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1537, i8* %1538, align 1, !tbaa !2449
  %1539 = lshr i32 %1512, 31
  %1540 = lshr i32 %1508, 31
  %1541 = xor i32 %1536, %1539
  %1542 = xor i32 %1536, %1540
  %1543 = add nuw nsw i32 %1541, %1542
  %1544 = icmp eq i32 %1543, 2
  %1545 = zext i1 %1544 to i8
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1545, i8* %1546, align 1, !tbaa !2450
  %1547 = load i64, i64* %RDX
  %1548 = load i64, i64* %RBP
  %1549 = sub i64 %1548, 60
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 3
  store i64 %1551, i64* %PC
  %1552 = trunc i64 %1547 to i32
  %1553 = inttoptr i64 %1549 to i32*
  %1554 = load i32, i32* %1553
  %1555 = add i32 %1554, %1552
  %1556 = zext i32 %1555 to i64
  store i64 %1556, i64* %RDX, align 8, !tbaa !2428
  %1557 = icmp ult i32 %1555, %1552
  %1558 = icmp ult i32 %1555, %1554
  %1559 = or i1 %1557, %1558
  %1560 = zext i1 %1559 to i8
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1560, i8* %1561, align 1, !tbaa !2432
  %1562 = and i32 %1555, 255
  %1563 = call i32 @llvm.ctpop.i32(i32 %1562) #16
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  %1566 = xor i8 %1565, 1
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1566, i8* %1567, align 1, !tbaa !2446
  %1568 = xor i32 %1554, %1552
  %1569 = xor i32 %1568, %1555
  %1570 = lshr i32 %1569, 4
  %1571 = trunc i32 %1570 to i8
  %1572 = and i8 %1571, 1
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1572, i8* %1573, align 1, !tbaa !2447
  %1574 = icmp eq i32 %1555, 0
  %1575 = zext i1 %1574 to i8
  %1576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1575, i8* %1576, align 1, !tbaa !2448
  %1577 = lshr i32 %1555, 31
  %1578 = trunc i32 %1577 to i8
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1578, i8* %1579, align 1, !tbaa !2449
  %1580 = lshr i32 %1552, 31
  %1581 = lshr i32 %1554, 31
  %1582 = xor i32 %1577, %1580
  %1583 = xor i32 %1577, %1581
  %1584 = add nuw nsw i32 %1582, %1583
  %1585 = icmp eq i32 %1584, 2
  %1586 = zext i1 %1585 to i8
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1586, i8* %1587, align 1, !tbaa !2450
  %1588 = load i32, i32* %EDX
  %1589 = zext i32 %1588 to i64
  %1590 = load i64, i64* %PC
  %1591 = add i64 %1590, 3
  store i64 %1591, i64* %PC
  %1592 = shl i64 %1589, 32
  %1593 = ashr exact i64 %1592, 32
  store i64 %1593, i64* %RCX, align 8, !tbaa !2428
  %1594 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1595 = load i64, i64* %RAX
  %1596 = load i64, i64* %RCX
  %1597 = mul i64 %1596, 4
  %1598 = add i64 %1597, %1595
  %1599 = load i64, i64* %PC
  %1600 = add i64 %1599, 5
  store i64 %1600, i64* %PC
  %1601 = inttoptr i64 %1598 to float*
  %1602 = load float, float* %1601
  %1603 = bitcast i8* %1594 to float*
  store float %1602, float* %1603, align 1, !tbaa !2452
  %1604 = getelementptr inbounds i8, i8* %1594, i64 4
  %1605 = bitcast i8* %1604 to float*
  store float 0.000000e+00, float* %1605, align 1, !tbaa !2452
  %1606 = getelementptr inbounds i8, i8* %1594, i64 8
  %1607 = bitcast i8* %1606 to float*
  store float 0.000000e+00, float* %1607, align 1, !tbaa !2452
  %1608 = getelementptr inbounds i8, i8* %1594, i64 12
  %1609 = bitcast i8* %1608 to float*
  store float 0.000000e+00, float* %1609, align 1, !tbaa !2452
  %1610 = load i64, i64* %RBP
  %1611 = sub i64 %1610, 40
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 4
  store i64 %1613, i64* %PC
  %1614 = inttoptr i64 %1611 to i64*
  %1615 = load i64, i64* %1614
  store i64 %1615, i64* %RAX, align 8, !tbaa !2428
  %1616 = load i64, i64* %RAX
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 3
  store i64 %1618, i64* %PC
  %1619 = inttoptr i64 %1616 to i64*
  %1620 = load i64, i64* %1619
  store i64 %1620, i64* %RAX, align 8, !tbaa !2428
  %1621 = load i64, i64* %RBP
  %1622 = sub i64 %1621, 40
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 4
  store i64 %1624, i64* %PC
  %1625 = inttoptr i64 %1622 to i64*
  %1626 = load i64, i64* %1625
  store i64 %1626, i64* %RCX, align 8, !tbaa !2428
  %1627 = load i64, i64* %RCX
  %1628 = add i64 %1627, 12
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 4
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to i32*
  %1632 = load i32, i32* %1631
  %1633 = sext i32 %1632 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1634, align 1, !tbaa !2432
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %1635, align 1, !tbaa !2446
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1636, align 1, !tbaa !2447
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1637, align 1, !tbaa !2448
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1638, align 1, !tbaa !2449
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1639, align 1, !tbaa !2450
  %1640 = load i64, i64* %RBP
  %1641 = sub i64 %1640, 40
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 4
  store i64 %1643, i64* %PC
  %1644 = inttoptr i64 %1641 to i64*
  %1645 = load i64, i64* %1644
  store i64 %1645, i64* %RCX, align 8, !tbaa !2428
  %1646 = load i64, i64* %RDX
  %1647 = load i64, i64* %RCX
  %1648 = add i64 %1647, 16
  %1649 = load i64, i64* %PC
  %1650 = add i64 %1649, 4
  store i64 %1650, i64* %PC
  %1651 = inttoptr i64 %1648 to i32*
  %1652 = load i32, i32* %1651
  %1653 = shl i64 %1646, 32
  %1654 = ashr exact i64 %1653, 32
  %1655 = sext i32 %1652 to i64
  %1656 = mul nsw i64 %1655, %1654
  %1657 = trunc i64 %1656 to i32
  %1658 = and i64 %1656, 4294967295
  store i64 %1658, i64* %RDX, align 8, !tbaa !2428
  %1659 = shl i64 %1656, 32
  %1660 = ashr exact i64 %1659, 32
  %1661 = icmp ne i64 %1660, %1656
  %1662 = zext i1 %1661 to i8
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1662, i8* %1663, align 1, !tbaa !2432
  %1664 = and i32 %1657, 255
  %1665 = call i32 @llvm.ctpop.i32(i32 %1664) #16
  %1666 = trunc i32 %1665 to i8
  %1667 = and i8 %1666, 1
  %1668 = xor i8 %1667, 1
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1668, i8* %1669, align 1, !tbaa !2446
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1670, align 1, !tbaa !2447
  %1671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1671, align 1, !tbaa !2448
  %1672 = lshr i32 %1657, 31
  %1673 = trunc i32 %1672 to i8
  %1674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1673, i8* %1674, align 1, !tbaa !2449
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1662, i8* %1675, align 1, !tbaa !2450
  %1676 = load i64, i64* %RBP
  %1677 = sub i64 %1676, 40
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 4
  store i64 %1679, i64* %PC
  %1680 = inttoptr i64 %1677 to i64*
  %1681 = load i64, i64* %1680
  store i64 %1681, i64* %RCX, align 8, !tbaa !2428
  %1682 = load i64, i64* %RDX
  %1683 = load i64, i64* %RCX
  %1684 = add i64 %1683, 20
  %1685 = load i64, i64* %PC
  %1686 = add i64 %1685, 4
  store i64 %1686, i64* %PC
  %1687 = inttoptr i64 %1684 to i32*
  %1688 = load i32, i32* %1687
  %1689 = shl i64 %1682, 32
  %1690 = ashr exact i64 %1689, 32
  %1691 = sext i32 %1688 to i64
  %1692 = mul nsw i64 %1691, %1690
  %1693 = trunc i64 %1692 to i32
  %1694 = and i64 %1692, 4294967295
  store i64 %1694, i64* %RDX, align 8, !tbaa !2428
  %1695 = shl i64 %1692, 32
  %1696 = ashr exact i64 %1695, 32
  %1697 = icmp ne i64 %1696, %1692
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1698, i8* %1699, align 1, !tbaa !2432
  %1700 = and i32 %1693, 255
  %1701 = call i32 @llvm.ctpop.i32(i32 %1700) #16
  %1702 = trunc i32 %1701 to i8
  %1703 = and i8 %1702, 1
  %1704 = xor i8 %1703, 1
  %1705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1704, i8* %1705, align 1, !tbaa !2446
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1706, align 1, !tbaa !2447
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1707, align 1, !tbaa !2448
  %1708 = lshr i32 %1693, 31
  %1709 = trunc i32 %1708 to i8
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1709, i8* %1710, align 1, !tbaa !2449
  %1711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1698, i8* %1711, align 1, !tbaa !2450
  %1712 = load i64, i64* %RBP
  %1713 = sub i64 %1712, 52
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 3
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1713 to i32*
  %1717 = load i32, i32* %1716
  %1718 = zext i32 %1717 to i64
  store i64 %1718, i64* %RSI, align 8, !tbaa !2428
  %1719 = load i64, i64* %RBP
  %1720 = sub i64 %1719, 40
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 4
  store i64 %1722, i64* %PC
  %1723 = inttoptr i64 %1720 to i64*
  %1724 = load i64, i64* %1723
  store i64 %1724, i64* %RCX, align 8, !tbaa !2428
  %1725 = load i64, i64* %RSI
  %1726 = load i64, i64* %RCX
  %1727 = add i64 %1726, 16
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 4
  store i64 %1729, i64* %PC
  %1730 = inttoptr i64 %1727 to i32*
  %1731 = load i32, i32* %1730
  %1732 = shl i64 %1725, 32
  %1733 = ashr exact i64 %1732, 32
  %1734 = sext i32 %1731 to i64
  %1735 = mul nsw i64 %1734, %1733
  %1736 = trunc i64 %1735 to i32
  %1737 = and i64 %1735, 4294967295
  store i64 %1737, i64* %RSI, align 8, !tbaa !2428
  %1738 = shl i64 %1735, 32
  %1739 = ashr exact i64 %1738, 32
  %1740 = icmp ne i64 %1739, %1735
  %1741 = zext i1 %1740 to i8
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1741, i8* %1742, align 1, !tbaa !2432
  %1743 = and i32 %1736, 255
  %1744 = call i32 @llvm.ctpop.i32(i32 %1743) #16
  %1745 = trunc i32 %1744 to i8
  %1746 = and i8 %1745, 1
  %1747 = xor i8 %1746, 1
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1747, i8* %1748, align 1, !tbaa !2446
  %1749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1749, align 1, !tbaa !2447
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1750, align 1, !tbaa !2448
  %1751 = lshr i32 %1736, 31
  %1752 = trunc i32 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1752, i8* %1753, align 1, !tbaa !2449
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1741, i8* %1754, align 1, !tbaa !2450
  %1755 = load i64, i64* %RBP
  %1756 = sub i64 %1755, 40
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 4
  store i64 %1758, i64* %PC
  %1759 = inttoptr i64 %1756 to i64*
  %1760 = load i64, i64* %1759
  store i64 %1760, i64* %RCX, align 8, !tbaa !2428
  %1761 = load i64, i64* %RSI
  %1762 = load i64, i64* %RCX
  %1763 = add i64 %1762, 20
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 4
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1763 to i32*
  %1767 = load i32, i32* %1766
  %1768 = shl i64 %1761, 32
  %1769 = ashr exact i64 %1768, 32
  %1770 = sext i32 %1767 to i64
  %1771 = mul nsw i64 %1770, %1769
  %1772 = trunc i64 %1771 to i32
  %1773 = and i64 %1771, 4294967295
  store i64 %1773, i64* %RSI, align 8, !tbaa !2428
  %1774 = shl i64 %1771, 32
  %1775 = ashr exact i64 %1774, 32
  %1776 = icmp ne i64 %1775, %1771
  %1777 = zext i1 %1776 to i8
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1777, i8* %1778, align 1, !tbaa !2432
  %1779 = and i32 %1772, 255
  %1780 = call i32 @llvm.ctpop.i32(i32 %1779) #16
  %1781 = trunc i32 %1780 to i8
  %1782 = and i8 %1781, 1
  %1783 = xor i8 %1782, 1
  %1784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1783, i8* %1784, align 1, !tbaa !2446
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1785, align 1, !tbaa !2447
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1786, align 1, !tbaa !2448
  %1787 = lshr i32 %1772, 31
  %1788 = trunc i32 %1787 to i8
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1788, i8* %1789, align 1, !tbaa !2449
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1777, i8* %1790, align 1, !tbaa !2450
  %1791 = load i64, i64* %RDX
  %1792 = load i32, i32* %ESI
  %1793 = zext i32 %1792 to i64
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 2
  store i64 %1795, i64* %PC
  %1796 = trunc i64 %1791 to i32
  %1797 = add i32 %1792, %1796
  %1798 = zext i32 %1797 to i64
  store i64 %1798, i64* %RDX, align 8, !tbaa !2428
  %1799 = icmp ult i32 %1797, %1796
  %1800 = icmp ult i32 %1797, %1792
  %1801 = or i1 %1799, %1800
  %1802 = zext i1 %1801 to i8
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1802, i8* %1803, align 1, !tbaa !2432
  %1804 = and i32 %1797, 255
  %1805 = call i32 @llvm.ctpop.i32(i32 %1804) #16
  %1806 = trunc i32 %1805 to i8
  %1807 = and i8 %1806, 1
  %1808 = xor i8 %1807, 1
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1808, i8* %1809, align 1, !tbaa !2446
  %1810 = xor i64 %1793, %1791
  %1811 = trunc i64 %1810 to i32
  %1812 = xor i32 %1811, %1797
  %1813 = lshr i32 %1812, 4
  %1814 = trunc i32 %1813 to i8
  %1815 = and i8 %1814, 1
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1815, i8* %1816, align 1, !tbaa !2447
  %1817 = icmp eq i32 %1797, 0
  %1818 = zext i1 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1818, i8* %1819, align 1, !tbaa !2448
  %1820 = lshr i32 %1797, 31
  %1821 = trunc i32 %1820 to i8
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1821, i8* %1822, align 1, !tbaa !2449
  %1823 = lshr i32 %1796, 31
  %1824 = lshr i32 %1792, 31
  %1825 = xor i32 %1820, %1823
  %1826 = xor i32 %1820, %1824
  %1827 = add nuw nsw i32 %1825, %1826
  %1828 = icmp eq i32 %1827, 2
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1829, i8* %1830, align 1, !tbaa !2450
  %1831 = load i64, i64* %RBP
  %1832 = sub i64 %1831, 56
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 3
  store i64 %1834, i64* %PC
  %1835 = inttoptr i64 %1832 to i32*
  %1836 = load i32, i32* %1835
  %1837 = zext i32 %1836 to i64
  store i64 %1837, i64* %RSI, align 8, !tbaa !2428
  %1838 = load i64, i64* %RSI
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 3
  store i64 %1840, i64* %PC
  %1841 = trunc i64 %1838 to i32
  %1842 = add i32 1, %1841
  %1843 = zext i32 %1842 to i64
  store i64 %1843, i64* %RSI, align 8, !tbaa !2428
  %1844 = icmp ult i32 %1842, %1841
  %1845 = icmp ult i32 %1842, 1
  %1846 = or i1 %1844, %1845
  %1847 = zext i1 %1846 to i8
  %1848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1847, i8* %1848, align 1, !tbaa !2432
  %1849 = and i32 %1842, 255
  %1850 = call i32 @llvm.ctpop.i32(i32 %1849) #16
  %1851 = trunc i32 %1850 to i8
  %1852 = and i8 %1851, 1
  %1853 = xor i8 %1852, 1
  %1854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1853, i8* %1854, align 1, !tbaa !2446
  %1855 = xor i64 1, %1838
  %1856 = trunc i64 %1855 to i32
  %1857 = xor i32 %1856, %1842
  %1858 = lshr i32 %1857, 4
  %1859 = trunc i32 %1858 to i8
  %1860 = and i8 %1859, 1
  %1861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1860, i8* %1861, align 1, !tbaa !2447
  %1862 = icmp eq i32 %1842, 0
  %1863 = zext i1 %1862 to i8
  %1864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1863, i8* %1864, align 1, !tbaa !2448
  %1865 = lshr i32 %1842, 31
  %1866 = trunc i32 %1865 to i8
  %1867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1866, i8* %1867, align 1, !tbaa !2449
  %1868 = lshr i32 %1841, 31
  %1869 = xor i32 %1865, %1868
  %1870 = add nuw nsw i32 %1869, %1865
  %1871 = icmp eq i32 %1870, 2
  %1872 = zext i1 %1871 to i8
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1872, i8* %1873, align 1, !tbaa !2450
  %1874 = load i64, i64* %RBP
  %1875 = sub i64 %1874, 40
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 4
  store i64 %1877, i64* %PC
  %1878 = inttoptr i64 %1875 to i64*
  %1879 = load i64, i64* %1878
  store i64 %1879, i64* %RCX, align 8, !tbaa !2428
  %1880 = load i64, i64* %RSI
  %1881 = load i64, i64* %RCX
  %1882 = add i64 %1881, 20
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 4
  store i64 %1884, i64* %PC
  %1885 = inttoptr i64 %1882 to i32*
  %1886 = load i32, i32* %1885
  %1887 = shl i64 %1880, 32
  %1888 = ashr exact i64 %1887, 32
  %1889 = sext i32 %1886 to i64
  %1890 = mul nsw i64 %1889, %1888
  %1891 = trunc i64 %1890 to i32
  %1892 = and i64 %1890, 4294967295
  store i64 %1892, i64* %RSI, align 8, !tbaa !2428
  %1893 = shl i64 %1890, 32
  %1894 = ashr exact i64 %1893, 32
  %1895 = icmp ne i64 %1894, %1890
  %1896 = zext i1 %1895 to i8
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1896, i8* %1897, align 1, !tbaa !2432
  %1898 = and i32 %1891, 255
  %1899 = call i32 @llvm.ctpop.i32(i32 %1898) #16
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1902, i8* %1903, align 1, !tbaa !2446
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1904, align 1, !tbaa !2447
  %1905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1905, align 1, !tbaa !2448
  %1906 = lshr i32 %1891, 31
  %1907 = trunc i32 %1906 to i8
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1907, i8* %1908, align 1, !tbaa !2449
  %1909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1896, i8* %1909, align 1, !tbaa !2450
  %1910 = load i64, i64* %RDX
  %1911 = load i32, i32* %ESI
  %1912 = zext i32 %1911 to i64
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 2
  store i64 %1914, i64* %PC
  %1915 = trunc i64 %1910 to i32
  %1916 = add i32 %1911, %1915
  %1917 = zext i32 %1916 to i64
  store i64 %1917, i64* %RDX, align 8, !tbaa !2428
  %1918 = icmp ult i32 %1916, %1915
  %1919 = icmp ult i32 %1916, %1911
  %1920 = or i1 %1918, %1919
  %1921 = zext i1 %1920 to i8
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1921, i8* %1922, align 1, !tbaa !2432
  %1923 = and i32 %1916, 255
  %1924 = call i32 @llvm.ctpop.i32(i32 %1923) #16
  %1925 = trunc i32 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = xor i8 %1926, 1
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1927, i8* %1928, align 1, !tbaa !2446
  %1929 = xor i64 %1912, %1910
  %1930 = trunc i64 %1929 to i32
  %1931 = xor i32 %1930, %1916
  %1932 = lshr i32 %1931, 4
  %1933 = trunc i32 %1932 to i8
  %1934 = and i8 %1933, 1
  %1935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1934, i8* %1935, align 1, !tbaa !2447
  %1936 = icmp eq i32 %1916, 0
  %1937 = zext i1 %1936 to i8
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1937, i8* %1938, align 1, !tbaa !2448
  %1939 = lshr i32 %1916, 31
  %1940 = trunc i32 %1939 to i8
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1940, i8* %1941, align 1, !tbaa !2449
  %1942 = lshr i32 %1915, 31
  %1943 = lshr i32 %1911, 31
  %1944 = xor i32 %1939, %1942
  %1945 = xor i32 %1939, %1943
  %1946 = add nuw nsw i32 %1944, %1945
  %1947 = icmp eq i32 %1946, 2
  %1948 = zext i1 %1947 to i8
  %1949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1948, i8* %1949, align 1, !tbaa !2450
  %1950 = load i64, i64* %RDX
  %1951 = load i64, i64* %RBP
  %1952 = sub i64 %1951, 60
  %1953 = load i64, i64* %PC
  %1954 = add i64 %1953, 3
  store i64 %1954, i64* %PC
  %1955 = trunc i64 %1950 to i32
  %1956 = inttoptr i64 %1952 to i32*
  %1957 = load i32, i32* %1956
  %1958 = add i32 %1957, %1955
  %1959 = zext i32 %1958 to i64
  store i64 %1959, i64* %RDX, align 8, !tbaa !2428
  %1960 = icmp ult i32 %1958, %1955
  %1961 = icmp ult i32 %1958, %1957
  %1962 = or i1 %1960, %1961
  %1963 = zext i1 %1962 to i8
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1963, i8* %1964, align 1, !tbaa !2432
  %1965 = and i32 %1958, 255
  %1966 = call i32 @llvm.ctpop.i32(i32 %1965) #16
  %1967 = trunc i32 %1966 to i8
  %1968 = and i8 %1967, 1
  %1969 = xor i8 %1968, 1
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1969, i8* %1970, align 1, !tbaa !2446
  %1971 = xor i32 %1957, %1955
  %1972 = xor i32 %1971, %1958
  %1973 = lshr i32 %1972, 4
  %1974 = trunc i32 %1973 to i8
  %1975 = and i8 %1974, 1
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1975, i8* %1976, align 1, !tbaa !2447
  %1977 = icmp eq i32 %1958, 0
  %1978 = zext i1 %1977 to i8
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1978, i8* %1979, align 1, !tbaa !2448
  %1980 = lshr i32 %1958, 31
  %1981 = trunc i32 %1980 to i8
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1981, i8* %1982, align 1, !tbaa !2449
  %1983 = lshr i32 %1955, 31
  %1984 = lshr i32 %1957, 31
  %1985 = xor i32 %1980, %1983
  %1986 = xor i32 %1980, %1984
  %1987 = add nuw nsw i32 %1985, %1986
  %1988 = icmp eq i32 %1987, 2
  %1989 = zext i1 %1988 to i8
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1989, i8* %1990, align 1, !tbaa !2450
  %1991 = load i32, i32* %EDX
  %1992 = zext i32 %1991 to i64
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 3
  store i64 %1994, i64* %PC
  %1995 = shl i64 %1992, 32
  %1996 = ashr exact i64 %1995, 32
  store i64 %1996, i64* %RCX, align 8, !tbaa !2428
  %1997 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1998 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1999 = load i64, i64* %RAX
  %2000 = load i64, i64* %RCX
  %2001 = mul i64 %2000, 4
  %2002 = add i64 %2001, %1999
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 5
  store i64 %2004, i64* %PC
  %2005 = bitcast i8* %1998 to <2 x float>*
  %2006 = load <2 x float>, <2 x float>* %2005, align 1
  %2007 = getelementptr inbounds i8, i8* %1998, i64 8
  %2008 = bitcast i8* %2007 to <2 x i32>*
  %2009 = load <2 x i32>, <2 x i32>* %2008, align 1
  %2010 = inttoptr i64 %2002 to float*
  %2011 = load float, float* %2010
  %2012 = extractelement <2 x float> %2006, i32 0
  %2013 = fmul float %2012, %2011
  %2014 = bitcast i8* %1997 to float*
  store float %2013, float* %2014, align 1, !tbaa !2452
  %2015 = bitcast <2 x float> %2006 to <2 x i32>
  %2016 = extractelement <2 x i32> %2015, i32 1
  %2017 = getelementptr inbounds i8, i8* %1997, i64 4
  %2018 = bitcast i8* %2017 to i32*
  store i32 %2016, i32* %2018, align 1, !tbaa !2452
  %2019 = extractelement <2 x i32> %2009, i32 0
  %2020 = getelementptr inbounds i8, i8* %1997, i64 8
  %2021 = bitcast i8* %2020 to i32*
  store i32 %2019, i32* %2021, align 1, !tbaa !2452
  %2022 = extractelement <2 x i32> %2009, i32 1
  %2023 = getelementptr inbounds i8, i8* %1997, i64 12
  %2024 = bitcast i8* %2023 to i32*
  store i32 %2022, i32* %2024, align 1, !tbaa !2452
  %2025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2027 = bitcast %union.vec128_t* %XMM1 to i8*
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 4
  store i64 %2029, i64* %PC
  %2030 = bitcast i8* %2026 to <2 x float>*
  %2031 = load <2 x float>, <2 x float>* %2030, align 1
  %2032 = getelementptr inbounds i8, i8* %2026, i64 8
  %2033 = bitcast i8* %2032 to <2 x i32>*
  %2034 = load <2 x i32>, <2 x i32>* %2033, align 1
  %2035 = bitcast i8* %2027 to <2 x float>*
  %2036 = load <2 x float>, <2 x float>* %2035, align 1
  %2037 = extractelement <2 x float> %2031, i32 0
  %2038 = extractelement <2 x float> %2036, i32 0
  %2039 = fadd float %2037, %2038
  %2040 = bitcast i8* %2025 to float*
  store float %2039, float* %2040, align 1, !tbaa !2452
  %2041 = bitcast <2 x float> %2031 to <2 x i32>
  %2042 = extractelement <2 x i32> %2041, i32 1
  %2043 = getelementptr inbounds i8, i8* %2025, i64 4
  %2044 = bitcast i8* %2043 to i32*
  store i32 %2042, i32* %2044, align 1, !tbaa !2452
  %2045 = extractelement <2 x i32> %2034, i32 0
  %2046 = getelementptr inbounds i8, i8* %2025, i64 8
  %2047 = bitcast i8* %2046 to i32*
  store i32 %2045, i32* %2047, align 1, !tbaa !2452
  %2048 = extractelement <2 x i32> %2034, i32 1
  %2049 = getelementptr inbounds i8, i8* %2025, i64 12
  %2050 = bitcast i8* %2049 to i32*
  store i32 %2048, i32* %2050, align 1, !tbaa !2452
  %2051 = load i64, i64* %RBP
  %2052 = sub i64 %2051, 16
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2052 to i64*
  %2056 = load i64, i64* %2055
  store i64 %2056, i64* %RAX, align 8, !tbaa !2428
  %2057 = load i64, i64* %RAX
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 3
  store i64 %2059, i64* %PC
  %2060 = inttoptr i64 %2057 to i64*
  %2061 = load i64, i64* %2060
  store i64 %2061, i64* %RAX, align 8, !tbaa !2428
  %2062 = load i64, i64* %RBP
  %2063 = sub i64 %2062, 16
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 4
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2063 to i64*
  %2067 = load i64, i64* %2066
  store i64 %2067, i64* %RCX, align 8, !tbaa !2428
  %2068 = load i64, i64* %RCX
  %2069 = add i64 %2068, 12
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 3
  store i64 %2071, i64* %PC
  %2072 = inttoptr i64 %2069 to i32*
  %2073 = load i32, i32* %2072
  %2074 = zext i32 %2073 to i64
  store i64 %2074, i64* %RDX, align 8, !tbaa !2428
  %2075 = load i64, i64* %RDX
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 3
  store i64 %2077, i64* %PC
  %2078 = trunc i64 %2075 to i32
  %2079 = shl i32 %2078, 1
  %2080 = icmp slt i32 %2078, 0
  %2081 = icmp slt i32 %2079, 0
  %2082 = xor i1 %2080, %2081
  %2083 = zext i32 %2079 to i64
  store i64 %2083, i64* %RDX, align 8, !tbaa !2428
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2085 = zext i1 %2080 to i8
  store i8 %2085, i8* %2084, align 1, !tbaa !2451
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2087 = and i32 %2079, 254
  %2088 = call i32 @llvm.ctpop.i32(i32 %2087) #16
  %2089 = trunc i32 %2088 to i8
  %2090 = and i8 %2089, 1
  %2091 = xor i8 %2090, 1
  store i8 %2091, i8* %2086, align 1, !tbaa !2451
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2092, align 1, !tbaa !2451
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2094 = icmp eq i32 %2079, 0
  %2095 = zext i1 %2094 to i8
  store i8 %2095, i8* %2093, align 1, !tbaa !2451
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2097 = lshr i32 %2079, 31
  %2098 = trunc i32 %2097 to i8
  store i8 %2098, i8* %2096, align 1, !tbaa !2451
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2100 = zext i1 %2082 to i8
  store i8 %2100, i8* %2099, align 1, !tbaa !2451
  %2101 = load i64, i64* %RBP
  %2102 = sub i64 %2101, 16
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC
  %2105 = inttoptr i64 %2102 to i64*
  %2106 = load i64, i64* %2105
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2107 = load i64, i64* %RDX
  %2108 = load i64, i64* %RCX
  %2109 = add i64 %2108, 16
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 4
  store i64 %2111, i64* %PC
  %2112 = inttoptr i64 %2109 to i32*
  %2113 = load i32, i32* %2112
  %2114 = shl i64 %2107, 32
  %2115 = ashr exact i64 %2114, 32
  %2116 = sext i32 %2113 to i64
  %2117 = mul nsw i64 %2116, %2115
  %2118 = trunc i64 %2117 to i32
  %2119 = and i64 %2117, 4294967295
  store i64 %2119, i64* %RDX, align 8, !tbaa !2428
  %2120 = shl i64 %2117, 32
  %2121 = ashr exact i64 %2120, 32
  %2122 = icmp ne i64 %2121, %2117
  %2123 = zext i1 %2122 to i8
  %2124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2123, i8* %2124, align 1, !tbaa !2432
  %2125 = and i32 %2118, 255
  %2126 = call i32 @llvm.ctpop.i32(i32 %2125) #16
  %2127 = trunc i32 %2126 to i8
  %2128 = and i8 %2127, 1
  %2129 = xor i8 %2128, 1
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2129, i8* %2130, align 1, !tbaa !2446
  %2131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2131, align 1, !tbaa !2447
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2132, align 1, !tbaa !2448
  %2133 = lshr i32 %2118, 31
  %2134 = trunc i32 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2134, i8* %2135, align 1, !tbaa !2449
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2123, i8* %2136, align 1, !tbaa !2450
  %2137 = load i64, i64* %RBP
  %2138 = sub i64 %2137, 16
  %2139 = load i64, i64* %PC
  %2140 = add i64 %2139, 4
  store i64 %2140, i64* %PC
  %2141 = inttoptr i64 %2138 to i64*
  %2142 = load i64, i64* %2141
  store i64 %2142, i64* %RCX, align 8, !tbaa !2428
  %2143 = load i64, i64* %RDX
  %2144 = load i64, i64* %RCX
  %2145 = add i64 %2144, 20
  %2146 = load i64, i64* %PC
  %2147 = add i64 %2146, 4
  store i64 %2147, i64* %PC
  %2148 = inttoptr i64 %2145 to i32*
  %2149 = load i32, i32* %2148
  %2150 = shl i64 %2143, 32
  %2151 = ashr exact i64 %2150, 32
  %2152 = sext i32 %2149 to i64
  %2153 = mul nsw i64 %2152, %2151
  %2154 = trunc i64 %2153 to i32
  %2155 = and i64 %2153, 4294967295
  store i64 %2155, i64* %RDX, align 8, !tbaa !2428
  %2156 = shl i64 %2153, 32
  %2157 = ashr exact i64 %2156, 32
  %2158 = icmp ne i64 %2157, %2153
  %2159 = zext i1 %2158 to i8
  %2160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2159, i8* %2160, align 1, !tbaa !2432
  %2161 = and i32 %2154, 255
  %2162 = call i32 @llvm.ctpop.i32(i32 %2161) #16
  %2163 = trunc i32 %2162 to i8
  %2164 = and i8 %2163, 1
  %2165 = xor i8 %2164, 1
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2165, i8* %2166, align 1, !tbaa !2446
  %2167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2167, align 1, !tbaa !2447
  %2168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2168, align 1, !tbaa !2448
  %2169 = lshr i32 %2154, 31
  %2170 = trunc i32 %2169 to i8
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2170, i8* %2171, align 1, !tbaa !2449
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2159, i8* %2172, align 1, !tbaa !2450
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 52
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 3
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  %2178 = load i32, i32* %2177
  %2179 = zext i32 %2178 to i64
  store i64 %2179, i64* %RSI, align 8, !tbaa !2428
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 16
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 4
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i64*
  %2185 = load i64, i64* %2184
  store i64 %2185, i64* %RCX, align 8, !tbaa !2428
  %2186 = load i64, i64* %RSI
  %2187 = load i64, i64* %RCX
  %2188 = add i64 %2187, 16
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 4
  store i64 %2190, i64* %PC
  %2191 = inttoptr i64 %2188 to i32*
  %2192 = load i32, i32* %2191
  %2193 = shl i64 %2186, 32
  %2194 = ashr exact i64 %2193, 32
  %2195 = sext i32 %2192 to i64
  %2196 = mul nsw i64 %2195, %2194
  %2197 = trunc i64 %2196 to i32
  %2198 = and i64 %2196, 4294967295
  store i64 %2198, i64* %RSI, align 8, !tbaa !2428
  %2199 = shl i64 %2196, 32
  %2200 = ashr exact i64 %2199, 32
  %2201 = icmp ne i64 %2200, %2196
  %2202 = zext i1 %2201 to i8
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2202, i8* %2203, align 1, !tbaa !2432
  %2204 = and i32 %2197, 255
  %2205 = call i32 @llvm.ctpop.i32(i32 %2204) #16
  %2206 = trunc i32 %2205 to i8
  %2207 = and i8 %2206, 1
  %2208 = xor i8 %2207, 1
  %2209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2208, i8* %2209, align 1, !tbaa !2446
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2210, align 1, !tbaa !2447
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2211, align 1, !tbaa !2448
  %2212 = lshr i32 %2197, 31
  %2213 = trunc i32 %2212 to i8
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2213, i8* %2214, align 1, !tbaa !2449
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2202, i8* %2215, align 1, !tbaa !2450
  %2216 = load i64, i64* %RBP
  %2217 = sub i64 %2216, 16
  %2218 = load i64, i64* %PC
  %2219 = add i64 %2218, 4
  store i64 %2219, i64* %PC
  %2220 = inttoptr i64 %2217 to i64*
  %2221 = load i64, i64* %2220
  store i64 %2221, i64* %RCX, align 8, !tbaa !2428
  %2222 = load i64, i64* %RSI
  %2223 = load i64, i64* %RCX
  %2224 = add i64 %2223, 20
  %2225 = load i64, i64* %PC
  %2226 = add i64 %2225, 4
  store i64 %2226, i64* %PC
  %2227 = inttoptr i64 %2224 to i32*
  %2228 = load i32, i32* %2227
  %2229 = shl i64 %2222, 32
  %2230 = ashr exact i64 %2229, 32
  %2231 = sext i32 %2228 to i64
  %2232 = mul nsw i64 %2231, %2230
  %2233 = trunc i64 %2232 to i32
  %2234 = and i64 %2232, 4294967295
  store i64 %2234, i64* %RSI, align 8, !tbaa !2428
  %2235 = shl i64 %2232, 32
  %2236 = ashr exact i64 %2235, 32
  %2237 = icmp ne i64 %2236, %2232
  %2238 = zext i1 %2237 to i8
  %2239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2238, i8* %2239, align 1, !tbaa !2432
  %2240 = and i32 %2233, 255
  %2241 = call i32 @llvm.ctpop.i32(i32 %2240) #16
  %2242 = trunc i32 %2241 to i8
  %2243 = and i8 %2242, 1
  %2244 = xor i8 %2243, 1
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2244, i8* %2245, align 1, !tbaa !2446
  %2246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2246, align 1, !tbaa !2447
  %2247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2247, align 1, !tbaa !2448
  %2248 = lshr i32 %2233, 31
  %2249 = trunc i32 %2248 to i8
  %2250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2249, i8* %2250, align 1, !tbaa !2449
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2238, i8* %2251, align 1, !tbaa !2450
  %2252 = load i64, i64* %RDX
  %2253 = load i32, i32* %ESI
  %2254 = zext i32 %2253 to i64
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 2
  store i64 %2256, i64* %PC
  %2257 = trunc i64 %2252 to i32
  %2258 = add i32 %2253, %2257
  %2259 = zext i32 %2258 to i64
  store i64 %2259, i64* %RDX, align 8, !tbaa !2428
  %2260 = icmp ult i32 %2258, %2257
  %2261 = icmp ult i32 %2258, %2253
  %2262 = or i1 %2260, %2261
  %2263 = zext i1 %2262 to i8
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2263, i8* %2264, align 1, !tbaa !2432
  %2265 = and i32 %2258, 255
  %2266 = call i32 @llvm.ctpop.i32(i32 %2265) #16
  %2267 = trunc i32 %2266 to i8
  %2268 = and i8 %2267, 1
  %2269 = xor i8 %2268, 1
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2269, i8* %2270, align 1, !tbaa !2446
  %2271 = xor i64 %2254, %2252
  %2272 = trunc i64 %2271 to i32
  %2273 = xor i32 %2272, %2258
  %2274 = lshr i32 %2273, 4
  %2275 = trunc i32 %2274 to i8
  %2276 = and i8 %2275, 1
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2276, i8* %2277, align 1, !tbaa !2447
  %2278 = icmp eq i32 %2258, 0
  %2279 = zext i1 %2278 to i8
  %2280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2279, i8* %2280, align 1, !tbaa !2448
  %2281 = lshr i32 %2258, 31
  %2282 = trunc i32 %2281 to i8
  %2283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2282, i8* %2283, align 1, !tbaa !2449
  %2284 = lshr i32 %2257, 31
  %2285 = lshr i32 %2253, 31
  %2286 = xor i32 %2281, %2284
  %2287 = xor i32 %2281, %2285
  %2288 = add nuw nsw i32 %2286, %2287
  %2289 = icmp eq i32 %2288, 2
  %2290 = zext i1 %2289 to i8
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2290, i8* %2291, align 1, !tbaa !2450
  %2292 = load i64, i64* %RBP
  %2293 = sub i64 %2292, 56
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 3
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i32*
  %2297 = load i32, i32* %2296
  %2298 = zext i32 %2297 to i64
  store i64 %2298, i64* %RSI, align 8, !tbaa !2428
  %2299 = load i64, i64* %RBP
  %2300 = sub i64 %2299, 16
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 4
  store i64 %2302, i64* %PC
  %2303 = inttoptr i64 %2300 to i64*
  %2304 = load i64, i64* %2303
  store i64 %2304, i64* %RCX, align 8, !tbaa !2428
  %2305 = load i64, i64* %RSI
  %2306 = load i64, i64* %RCX
  %2307 = add i64 %2306, 20
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 4
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i32*
  %2311 = load i32, i32* %2310
  %2312 = shl i64 %2305, 32
  %2313 = ashr exact i64 %2312, 32
  %2314 = sext i32 %2311 to i64
  %2315 = mul nsw i64 %2314, %2313
  %2316 = trunc i64 %2315 to i32
  %2317 = and i64 %2315, 4294967295
  store i64 %2317, i64* %RSI, align 8, !tbaa !2428
  %2318 = shl i64 %2315, 32
  %2319 = ashr exact i64 %2318, 32
  %2320 = icmp ne i64 %2319, %2315
  %2321 = zext i1 %2320 to i8
  %2322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2321, i8* %2322, align 1, !tbaa !2432
  %2323 = and i32 %2316, 255
  %2324 = call i32 @llvm.ctpop.i32(i32 %2323) #16
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2327, i8* %2328, align 1, !tbaa !2446
  %2329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2329, align 1, !tbaa !2447
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2330, align 1, !tbaa !2448
  %2331 = lshr i32 %2316, 31
  %2332 = trunc i32 %2331 to i8
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2332, i8* %2333, align 1, !tbaa !2449
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2321, i8* %2334, align 1, !tbaa !2450
  %2335 = load i64, i64* %RDX
  %2336 = load i32, i32* %ESI
  %2337 = zext i32 %2336 to i64
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 2
  store i64 %2339, i64* %PC
  %2340 = trunc i64 %2335 to i32
  %2341 = add i32 %2336, %2340
  %2342 = zext i32 %2341 to i64
  store i64 %2342, i64* %RDX, align 8, !tbaa !2428
  %2343 = icmp ult i32 %2341, %2340
  %2344 = icmp ult i32 %2341, %2336
  %2345 = or i1 %2343, %2344
  %2346 = zext i1 %2345 to i8
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2346, i8* %2347, align 1, !tbaa !2432
  %2348 = and i32 %2341, 255
  %2349 = call i32 @llvm.ctpop.i32(i32 %2348) #16
  %2350 = trunc i32 %2349 to i8
  %2351 = and i8 %2350, 1
  %2352 = xor i8 %2351, 1
  %2353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2352, i8* %2353, align 1, !tbaa !2446
  %2354 = xor i64 %2337, %2335
  %2355 = trunc i64 %2354 to i32
  %2356 = xor i32 %2355, %2341
  %2357 = lshr i32 %2356, 4
  %2358 = trunc i32 %2357 to i8
  %2359 = and i8 %2358, 1
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2359, i8* %2360, align 1, !tbaa !2447
  %2361 = icmp eq i32 %2341, 0
  %2362 = zext i1 %2361 to i8
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2362, i8* %2363, align 1, !tbaa !2448
  %2364 = lshr i32 %2341, 31
  %2365 = trunc i32 %2364 to i8
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2365, i8* %2366, align 1, !tbaa !2449
  %2367 = lshr i32 %2340, 31
  %2368 = lshr i32 %2336, 31
  %2369 = xor i32 %2364, %2367
  %2370 = xor i32 %2364, %2368
  %2371 = add nuw nsw i32 %2369, %2370
  %2372 = icmp eq i32 %2371, 2
  %2373 = zext i1 %2372 to i8
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2373, i8* %2374, align 1, !tbaa !2450
  %2375 = load i64, i64* %RDX
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 60
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 3
  store i64 %2379, i64* %PC
  %2380 = trunc i64 %2375 to i32
  %2381 = inttoptr i64 %2377 to i32*
  %2382 = load i32, i32* %2381
  %2383 = add i32 %2382, %2380
  %2384 = zext i32 %2383 to i64
  store i64 %2384, i64* %RDX, align 8, !tbaa !2428
  %2385 = icmp ult i32 %2383, %2380
  %2386 = icmp ult i32 %2383, %2382
  %2387 = or i1 %2385, %2386
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2388, i8* %2389, align 1, !tbaa !2432
  %2390 = and i32 %2383, 255
  %2391 = call i32 @llvm.ctpop.i32(i32 %2390) #16
  %2392 = trunc i32 %2391 to i8
  %2393 = and i8 %2392, 1
  %2394 = xor i8 %2393, 1
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2394, i8* %2395, align 1, !tbaa !2446
  %2396 = xor i32 %2382, %2380
  %2397 = xor i32 %2396, %2383
  %2398 = lshr i32 %2397, 4
  %2399 = trunc i32 %2398 to i8
  %2400 = and i8 %2399, 1
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2400, i8* %2401, align 1, !tbaa !2447
  %2402 = icmp eq i32 %2383, 0
  %2403 = zext i1 %2402 to i8
  %2404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2403, i8* %2404, align 1, !tbaa !2448
  %2405 = lshr i32 %2383, 31
  %2406 = trunc i32 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2406, i8* %2407, align 1, !tbaa !2449
  %2408 = lshr i32 %2380, 31
  %2409 = lshr i32 %2382, 31
  %2410 = xor i32 %2405, %2408
  %2411 = xor i32 %2405, %2409
  %2412 = add nuw nsw i32 %2410, %2411
  %2413 = icmp eq i32 %2412, 2
  %2414 = zext i1 %2413 to i8
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2414, i8* %2415, align 1, !tbaa !2450
  %2416 = load i32, i32* %EDX
  %2417 = zext i32 %2416 to i64
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 3
  store i64 %2419, i64* %PC
  %2420 = shl i64 %2417, 32
  %2421 = ashr exact i64 %2420, 32
  store i64 %2421, i64* %RCX, align 8, !tbaa !2428
  %2422 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2423 = load i64, i64* %RAX
  %2424 = load i64, i64* %RCX
  %2425 = mul i64 %2424, 4
  %2426 = add i64 %2425, %2423
  %2427 = load i64, i64* %PC
  %2428 = add i64 %2427, 5
  store i64 %2428, i64* %PC
  %2429 = inttoptr i64 %2426 to float*
  %2430 = load float, float* %2429
  %2431 = bitcast i8* %2422 to float*
  store float %2430, float* %2431, align 1, !tbaa !2452
  %2432 = getelementptr inbounds i8, i8* %2422, i64 4
  %2433 = bitcast i8* %2432 to float*
  store float 0.000000e+00, float* %2433, align 1, !tbaa !2452
  %2434 = getelementptr inbounds i8, i8* %2422, i64 8
  %2435 = bitcast i8* %2434 to float*
  store float 0.000000e+00, float* %2435, align 1, !tbaa !2452
  %2436 = getelementptr inbounds i8, i8* %2422, i64 12
  %2437 = bitcast i8* %2436 to float*
  store float 0.000000e+00, float* %2437, align 1, !tbaa !2452
  %2438 = load i64, i64* %RBP
  %2439 = sub i64 %2438, 40
  %2440 = load i64, i64* %PC
  %2441 = add i64 %2440, 4
  store i64 %2441, i64* %PC
  %2442 = inttoptr i64 %2439 to i64*
  %2443 = load i64, i64* %2442
  store i64 %2443, i64* %RAX, align 8, !tbaa !2428
  %2444 = load i64, i64* %RAX
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 3
  store i64 %2446, i64* %PC
  %2447 = inttoptr i64 %2444 to i64*
  %2448 = load i64, i64* %2447
  store i64 %2448, i64* %RAX, align 8, !tbaa !2428
  %2449 = load i64, i64* %RBP
  %2450 = sub i64 %2449, 40
  %2451 = load i64, i64* %PC
  %2452 = add i64 %2451, 4
  store i64 %2452, i64* %PC
  %2453 = inttoptr i64 %2450 to i64*
  %2454 = load i64, i64* %2453
  store i64 %2454, i64* %RCX, align 8, !tbaa !2428
  %2455 = load i64, i64* %RCX
  %2456 = add i64 %2455, 12
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 4
  store i64 %2458, i64* %PC
  %2459 = inttoptr i64 %2456 to i32*
  %2460 = load i32, i32* %2459
  %2461 = sext i32 %2460 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2462, align 1, !tbaa !2432
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2463, align 1, !tbaa !2446
  %2464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2464, align 1, !tbaa !2447
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2465, align 1, !tbaa !2448
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2466, align 1, !tbaa !2449
  %2467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2467, align 1, !tbaa !2450
  %2468 = load i64, i64* %RBP
  %2469 = sub i64 %2468, 40
  %2470 = load i64, i64* %PC
  %2471 = add i64 %2470, 4
  store i64 %2471, i64* %PC
  %2472 = inttoptr i64 %2469 to i64*
  %2473 = load i64, i64* %2472
  store i64 %2473, i64* %RCX, align 8, !tbaa !2428
  %2474 = load i64, i64* %RDX
  %2475 = load i64, i64* %RCX
  %2476 = add i64 %2475, 16
  %2477 = load i64, i64* %PC
  %2478 = add i64 %2477, 4
  store i64 %2478, i64* %PC
  %2479 = inttoptr i64 %2476 to i32*
  %2480 = load i32, i32* %2479
  %2481 = shl i64 %2474, 32
  %2482 = ashr exact i64 %2481, 32
  %2483 = sext i32 %2480 to i64
  %2484 = mul nsw i64 %2483, %2482
  %2485 = trunc i64 %2484 to i32
  %2486 = and i64 %2484, 4294967295
  store i64 %2486, i64* %RDX, align 8, !tbaa !2428
  %2487 = shl i64 %2484, 32
  %2488 = ashr exact i64 %2487, 32
  %2489 = icmp ne i64 %2488, %2484
  %2490 = zext i1 %2489 to i8
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2490, i8* %2491, align 1, !tbaa !2432
  %2492 = and i32 %2485, 255
  %2493 = call i32 @llvm.ctpop.i32(i32 %2492) #16
  %2494 = trunc i32 %2493 to i8
  %2495 = and i8 %2494, 1
  %2496 = xor i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2496, i8* %2497, align 1, !tbaa !2446
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2498, align 1, !tbaa !2447
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2499, align 1, !tbaa !2448
  %2500 = lshr i32 %2485, 31
  %2501 = trunc i32 %2500 to i8
  %2502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2501, i8* %2502, align 1, !tbaa !2449
  %2503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2490, i8* %2503, align 1, !tbaa !2450
  %2504 = load i64, i64* %RBP
  %2505 = sub i64 %2504, 40
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 4
  store i64 %2507, i64* %PC
  %2508 = inttoptr i64 %2505 to i64*
  %2509 = load i64, i64* %2508
  store i64 %2509, i64* %RCX, align 8, !tbaa !2428
  %2510 = load i64, i64* %RDX
  %2511 = load i64, i64* %RCX
  %2512 = add i64 %2511, 20
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 4
  store i64 %2514, i64* %PC
  %2515 = inttoptr i64 %2512 to i32*
  %2516 = load i32, i32* %2515
  %2517 = shl i64 %2510, 32
  %2518 = ashr exact i64 %2517, 32
  %2519 = sext i32 %2516 to i64
  %2520 = mul nsw i64 %2519, %2518
  %2521 = trunc i64 %2520 to i32
  %2522 = and i64 %2520, 4294967295
  store i64 %2522, i64* %RDX, align 8, !tbaa !2428
  %2523 = shl i64 %2520, 32
  %2524 = ashr exact i64 %2523, 32
  %2525 = icmp ne i64 %2524, %2520
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2526, i8* %2527, align 1, !tbaa !2432
  %2528 = and i32 %2521, 255
  %2529 = call i32 @llvm.ctpop.i32(i32 %2528) #16
  %2530 = trunc i32 %2529 to i8
  %2531 = and i8 %2530, 1
  %2532 = xor i8 %2531, 1
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2532, i8* %2533, align 1, !tbaa !2446
  %2534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2534, align 1, !tbaa !2447
  %2535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2535, align 1, !tbaa !2448
  %2536 = lshr i32 %2521, 31
  %2537 = trunc i32 %2536 to i8
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2537, i8* %2538, align 1, !tbaa !2449
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2539, align 1, !tbaa !2450
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 52
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 3
  store i64 %2543, i64* %PC
  %2544 = inttoptr i64 %2541 to i32*
  %2545 = load i32, i32* %2544
  %2546 = zext i32 %2545 to i64
  store i64 %2546, i64* %RSI, align 8, !tbaa !2428
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 40
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 4
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i64*
  %2552 = load i64, i64* %2551
  store i64 %2552, i64* %RCX, align 8, !tbaa !2428
  %2553 = load i64, i64* %RSI
  %2554 = load i64, i64* %RCX
  %2555 = add i64 %2554, 16
  %2556 = load i64, i64* %PC
  %2557 = add i64 %2556, 4
  store i64 %2557, i64* %PC
  %2558 = inttoptr i64 %2555 to i32*
  %2559 = load i32, i32* %2558
  %2560 = shl i64 %2553, 32
  %2561 = ashr exact i64 %2560, 32
  %2562 = sext i32 %2559 to i64
  %2563 = mul nsw i64 %2562, %2561
  %2564 = trunc i64 %2563 to i32
  %2565 = and i64 %2563, 4294967295
  store i64 %2565, i64* %RSI, align 8, !tbaa !2428
  %2566 = shl i64 %2563, 32
  %2567 = ashr exact i64 %2566, 32
  %2568 = icmp ne i64 %2567, %2563
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2569, i8* %2570, align 1, !tbaa !2432
  %2571 = and i32 %2564, 255
  %2572 = call i32 @llvm.ctpop.i32(i32 %2571) #16
  %2573 = trunc i32 %2572 to i8
  %2574 = and i8 %2573, 1
  %2575 = xor i8 %2574, 1
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2575, i8* %2576, align 1, !tbaa !2446
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2577, align 1, !tbaa !2447
  %2578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2578, align 1, !tbaa !2448
  %2579 = lshr i32 %2564, 31
  %2580 = trunc i32 %2579 to i8
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2580, i8* %2581, align 1, !tbaa !2449
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2569, i8* %2582, align 1, !tbaa !2450
  %2583 = load i64, i64* %RBP
  %2584 = sub i64 %2583, 40
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 4
  store i64 %2586, i64* %PC
  %2587 = inttoptr i64 %2584 to i64*
  %2588 = load i64, i64* %2587
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = load i64, i64* %RSI
  %2590 = load i64, i64* %RCX
  %2591 = add i64 %2590, 20
  %2592 = load i64, i64* %PC
  %2593 = add i64 %2592, 4
  store i64 %2593, i64* %PC
  %2594 = inttoptr i64 %2591 to i32*
  %2595 = load i32, i32* %2594
  %2596 = shl i64 %2589, 32
  %2597 = ashr exact i64 %2596, 32
  %2598 = sext i32 %2595 to i64
  %2599 = mul nsw i64 %2598, %2597
  %2600 = trunc i64 %2599 to i32
  %2601 = and i64 %2599, 4294967295
  store i64 %2601, i64* %RSI, align 8, !tbaa !2428
  %2602 = shl i64 %2599, 32
  %2603 = ashr exact i64 %2602, 32
  %2604 = icmp ne i64 %2603, %2599
  %2605 = zext i1 %2604 to i8
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2605, i8* %2606, align 1, !tbaa !2432
  %2607 = and i32 %2600, 255
  %2608 = call i32 @llvm.ctpop.i32(i32 %2607) #16
  %2609 = trunc i32 %2608 to i8
  %2610 = and i8 %2609, 1
  %2611 = xor i8 %2610, 1
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2611, i8* %2612, align 1, !tbaa !2446
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2613, align 1, !tbaa !2447
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2614, align 1, !tbaa !2448
  %2615 = lshr i32 %2600, 31
  %2616 = trunc i32 %2615 to i8
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2616, i8* %2617, align 1, !tbaa !2449
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2605, i8* %2618, align 1, !tbaa !2450
  %2619 = load i64, i64* %RDX
  %2620 = load i32, i32* %ESI
  %2621 = zext i32 %2620 to i64
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 2
  store i64 %2623, i64* %PC
  %2624 = trunc i64 %2619 to i32
  %2625 = add i32 %2620, %2624
  %2626 = zext i32 %2625 to i64
  store i64 %2626, i64* %RDX, align 8, !tbaa !2428
  %2627 = icmp ult i32 %2625, %2624
  %2628 = icmp ult i32 %2625, %2620
  %2629 = or i1 %2627, %2628
  %2630 = zext i1 %2629 to i8
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2630, i8* %2631, align 1, !tbaa !2432
  %2632 = and i32 %2625, 255
  %2633 = call i32 @llvm.ctpop.i32(i32 %2632) #16
  %2634 = trunc i32 %2633 to i8
  %2635 = and i8 %2634, 1
  %2636 = xor i8 %2635, 1
  %2637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2636, i8* %2637, align 1, !tbaa !2446
  %2638 = xor i64 %2621, %2619
  %2639 = trunc i64 %2638 to i32
  %2640 = xor i32 %2639, %2625
  %2641 = lshr i32 %2640, 4
  %2642 = trunc i32 %2641 to i8
  %2643 = and i8 %2642, 1
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2643, i8* %2644, align 1, !tbaa !2447
  %2645 = icmp eq i32 %2625, 0
  %2646 = zext i1 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2646, i8* %2647, align 1, !tbaa !2448
  %2648 = lshr i32 %2625, 31
  %2649 = trunc i32 %2648 to i8
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2649, i8* %2650, align 1, !tbaa !2449
  %2651 = lshr i32 %2624, 31
  %2652 = lshr i32 %2620, 31
  %2653 = xor i32 %2648, %2651
  %2654 = xor i32 %2648, %2652
  %2655 = add nuw nsw i32 %2653, %2654
  %2656 = icmp eq i32 %2655, 2
  %2657 = zext i1 %2656 to i8
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2657, i8* %2658, align 1, !tbaa !2450
  %2659 = load i64, i64* %RBP
  %2660 = sub i64 %2659, 56
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 3
  store i64 %2662, i64* %PC
  %2663 = inttoptr i64 %2660 to i32*
  %2664 = load i32, i32* %2663
  %2665 = zext i32 %2664 to i64
  store i64 %2665, i64* %RSI, align 8, !tbaa !2428
  %2666 = load i64, i64* %RBP
  %2667 = sub i64 %2666, 40
  %2668 = load i64, i64* %PC
  %2669 = add i64 %2668, 4
  store i64 %2669, i64* %PC
  %2670 = inttoptr i64 %2667 to i64*
  %2671 = load i64, i64* %2670
  store i64 %2671, i64* %RCX, align 8, !tbaa !2428
  %2672 = load i64, i64* %RSI
  %2673 = load i64, i64* %RCX
  %2674 = add i64 %2673, 20
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 4
  store i64 %2676, i64* %PC
  %2677 = inttoptr i64 %2674 to i32*
  %2678 = load i32, i32* %2677
  %2679 = shl i64 %2672, 32
  %2680 = ashr exact i64 %2679, 32
  %2681 = sext i32 %2678 to i64
  %2682 = mul nsw i64 %2681, %2680
  %2683 = trunc i64 %2682 to i32
  %2684 = and i64 %2682, 4294967295
  store i64 %2684, i64* %RSI, align 8, !tbaa !2428
  %2685 = shl i64 %2682, 32
  %2686 = ashr exact i64 %2685, 32
  %2687 = icmp ne i64 %2686, %2682
  %2688 = zext i1 %2687 to i8
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2688, i8* %2689, align 1, !tbaa !2432
  %2690 = and i32 %2683, 255
  %2691 = call i32 @llvm.ctpop.i32(i32 %2690) #16
  %2692 = trunc i32 %2691 to i8
  %2693 = and i8 %2692, 1
  %2694 = xor i8 %2693, 1
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2694, i8* %2695, align 1, !tbaa !2446
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2696, align 1, !tbaa !2447
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2697, align 1, !tbaa !2448
  %2698 = lshr i32 %2683, 31
  %2699 = trunc i32 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2699, i8* %2700, align 1, !tbaa !2449
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2688, i8* %2701, align 1, !tbaa !2450
  %2702 = load i64, i64* %RDX
  %2703 = load i32, i32* %ESI
  %2704 = zext i32 %2703 to i64
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 2
  store i64 %2706, i64* %PC
  %2707 = trunc i64 %2702 to i32
  %2708 = add i32 %2703, %2707
  %2709 = zext i32 %2708 to i64
  store i64 %2709, i64* %RDX, align 8, !tbaa !2428
  %2710 = icmp ult i32 %2708, %2707
  %2711 = icmp ult i32 %2708, %2703
  %2712 = or i1 %2710, %2711
  %2713 = zext i1 %2712 to i8
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2713, i8* %2714, align 1, !tbaa !2432
  %2715 = and i32 %2708, 255
  %2716 = call i32 @llvm.ctpop.i32(i32 %2715) #16
  %2717 = trunc i32 %2716 to i8
  %2718 = and i8 %2717, 1
  %2719 = xor i8 %2718, 1
  %2720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2719, i8* %2720, align 1, !tbaa !2446
  %2721 = xor i64 %2704, %2702
  %2722 = trunc i64 %2721 to i32
  %2723 = xor i32 %2722, %2708
  %2724 = lshr i32 %2723, 4
  %2725 = trunc i32 %2724 to i8
  %2726 = and i8 %2725, 1
  %2727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2726, i8* %2727, align 1, !tbaa !2447
  %2728 = icmp eq i32 %2708, 0
  %2729 = zext i1 %2728 to i8
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2729, i8* %2730, align 1, !tbaa !2448
  %2731 = lshr i32 %2708, 31
  %2732 = trunc i32 %2731 to i8
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2732, i8* %2733, align 1, !tbaa !2449
  %2734 = lshr i32 %2707, 31
  %2735 = lshr i32 %2703, 31
  %2736 = xor i32 %2731, %2734
  %2737 = xor i32 %2731, %2735
  %2738 = add nuw nsw i32 %2736, %2737
  %2739 = icmp eq i32 %2738, 2
  %2740 = zext i1 %2739 to i8
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2740, i8* %2741, align 1, !tbaa !2450
  %2742 = load i64, i64* %RBP
  %2743 = sub i64 %2742, 60
  %2744 = load i64, i64* %PC
  %2745 = add i64 %2744, 3
  store i64 %2745, i64* %PC
  %2746 = inttoptr i64 %2743 to i32*
  %2747 = load i32, i32* %2746
  %2748 = zext i32 %2747 to i64
  store i64 %2748, i64* %RSI, align 8, !tbaa !2428
  %2749 = load i64, i64* %RSI
  %2750 = load i64, i64* %PC
  %2751 = add i64 %2750, 3
  store i64 %2751, i64* %PC
  %2752 = trunc i64 %2749 to i32
  %2753 = add i32 1, %2752
  %2754 = zext i32 %2753 to i64
  store i64 %2754, i64* %RSI, align 8, !tbaa !2428
  %2755 = icmp ult i32 %2753, %2752
  %2756 = icmp ult i32 %2753, 1
  %2757 = or i1 %2755, %2756
  %2758 = zext i1 %2757 to i8
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2758, i8* %2759, align 1, !tbaa !2432
  %2760 = and i32 %2753, 255
  %2761 = call i32 @llvm.ctpop.i32(i32 %2760) #16
  %2762 = trunc i32 %2761 to i8
  %2763 = and i8 %2762, 1
  %2764 = xor i8 %2763, 1
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2764, i8* %2765, align 1, !tbaa !2446
  %2766 = xor i64 1, %2749
  %2767 = trunc i64 %2766 to i32
  %2768 = xor i32 %2767, %2753
  %2769 = lshr i32 %2768, 4
  %2770 = trunc i32 %2769 to i8
  %2771 = and i8 %2770, 1
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2771, i8* %2772, align 1, !tbaa !2447
  %2773 = icmp eq i32 %2753, 0
  %2774 = zext i1 %2773 to i8
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2774, i8* %2775, align 1, !tbaa !2448
  %2776 = lshr i32 %2753, 31
  %2777 = trunc i32 %2776 to i8
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2777, i8* %2778, align 1, !tbaa !2449
  %2779 = lshr i32 %2752, 31
  %2780 = xor i32 %2776, %2779
  %2781 = add nuw nsw i32 %2780, %2776
  %2782 = icmp eq i32 %2781, 2
  %2783 = zext i1 %2782 to i8
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2783, i8* %2784, align 1, !tbaa !2450
  %2785 = load i64, i64* %RDX
  %2786 = load i32, i32* %ESI
  %2787 = zext i32 %2786 to i64
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 2
  store i64 %2789, i64* %PC
  %2790 = trunc i64 %2785 to i32
  %2791 = add i32 %2786, %2790
  %2792 = zext i32 %2791 to i64
  store i64 %2792, i64* %RDX, align 8, !tbaa !2428
  %2793 = icmp ult i32 %2791, %2790
  %2794 = icmp ult i32 %2791, %2786
  %2795 = or i1 %2793, %2794
  %2796 = zext i1 %2795 to i8
  %2797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2796, i8* %2797, align 1, !tbaa !2432
  %2798 = and i32 %2791, 255
  %2799 = call i32 @llvm.ctpop.i32(i32 %2798) #16
  %2800 = trunc i32 %2799 to i8
  %2801 = and i8 %2800, 1
  %2802 = xor i8 %2801, 1
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2802, i8* %2803, align 1, !tbaa !2446
  %2804 = xor i64 %2787, %2785
  %2805 = trunc i64 %2804 to i32
  %2806 = xor i32 %2805, %2791
  %2807 = lshr i32 %2806, 4
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2809, i8* %2810, align 1, !tbaa !2447
  %2811 = icmp eq i32 %2791, 0
  %2812 = zext i1 %2811 to i8
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2812, i8* %2813, align 1, !tbaa !2448
  %2814 = lshr i32 %2791, 31
  %2815 = trunc i32 %2814 to i8
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2815, i8* %2816, align 1, !tbaa !2449
  %2817 = lshr i32 %2790, 31
  %2818 = lshr i32 %2786, 31
  %2819 = xor i32 %2814, %2817
  %2820 = xor i32 %2814, %2818
  %2821 = add nuw nsw i32 %2819, %2820
  %2822 = icmp eq i32 %2821, 2
  %2823 = zext i1 %2822 to i8
  %2824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2823, i8* %2824, align 1, !tbaa !2450
  %2825 = load i32, i32* %EDX
  %2826 = zext i32 %2825 to i64
  %2827 = load i64, i64* %PC
  %2828 = add i64 %2827, 3
  store i64 %2828, i64* %PC
  %2829 = shl i64 %2826, 32
  %2830 = ashr exact i64 %2829, 32
  store i64 %2830, i64* %RCX, align 8, !tbaa !2428
  %2831 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2832 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2833 = load i64, i64* %RAX
  %2834 = load i64, i64* %RCX
  %2835 = mul i64 %2834, 4
  %2836 = add i64 %2835, %2833
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 5
  store i64 %2838, i64* %PC
  %2839 = bitcast i8* %2832 to <2 x float>*
  %2840 = load <2 x float>, <2 x float>* %2839, align 1
  %2841 = getelementptr inbounds i8, i8* %2832, i64 8
  %2842 = bitcast i8* %2841 to <2 x i32>*
  %2843 = load <2 x i32>, <2 x i32>* %2842, align 1
  %2844 = inttoptr i64 %2836 to float*
  %2845 = load float, float* %2844
  %2846 = extractelement <2 x float> %2840, i32 0
  %2847 = fmul float %2846, %2845
  %2848 = bitcast i8* %2831 to float*
  store float %2847, float* %2848, align 1, !tbaa !2452
  %2849 = bitcast <2 x float> %2840 to <2 x i32>
  %2850 = extractelement <2 x i32> %2849, i32 1
  %2851 = getelementptr inbounds i8, i8* %2831, i64 4
  %2852 = bitcast i8* %2851 to i32*
  store i32 %2850, i32* %2852, align 1, !tbaa !2452
  %2853 = extractelement <2 x i32> %2843, i32 0
  %2854 = getelementptr inbounds i8, i8* %2831, i64 8
  %2855 = bitcast i8* %2854 to i32*
  store i32 %2853, i32* %2855, align 1, !tbaa !2452
  %2856 = extractelement <2 x i32> %2843, i32 1
  %2857 = getelementptr inbounds i8, i8* %2831, i64 12
  %2858 = bitcast i8* %2857 to i32*
  store i32 %2856, i32* %2858, align 1, !tbaa !2452
  %2859 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2860 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2861 = bitcast %union.vec128_t* %XMM1 to i8*
  %2862 = load i64, i64* %PC
  %2863 = add i64 %2862, 4
  store i64 %2863, i64* %PC
  %2864 = bitcast i8* %2860 to <2 x float>*
  %2865 = load <2 x float>, <2 x float>* %2864, align 1
  %2866 = getelementptr inbounds i8, i8* %2860, i64 8
  %2867 = bitcast i8* %2866 to <2 x i32>*
  %2868 = load <2 x i32>, <2 x i32>* %2867, align 1
  %2869 = bitcast i8* %2861 to <2 x float>*
  %2870 = load <2 x float>, <2 x float>* %2869, align 1
  %2871 = extractelement <2 x float> %2865, i32 0
  %2872 = extractelement <2 x float> %2870, i32 0
  %2873 = fadd float %2871, %2872
  %2874 = bitcast i8* %2859 to float*
  store float %2873, float* %2874, align 1, !tbaa !2452
  %2875 = bitcast <2 x float> %2865 to <2 x i32>
  %2876 = extractelement <2 x i32> %2875, i32 1
  %2877 = getelementptr inbounds i8, i8* %2859, i64 4
  %2878 = bitcast i8* %2877 to i32*
  store i32 %2876, i32* %2878, align 1, !tbaa !2452
  %2879 = extractelement <2 x i32> %2868, i32 0
  %2880 = getelementptr inbounds i8, i8* %2859, i64 8
  %2881 = bitcast i8* %2880 to i32*
  store i32 %2879, i32* %2881, align 1, !tbaa !2452
  %2882 = extractelement <2 x i32> %2868, i32 1
  %2883 = getelementptr inbounds i8, i8* %2859, i64 12
  %2884 = bitcast i8* %2883 to i32*
  store i32 %2882, i32* %2884, align 1, !tbaa !2452
  %2885 = load i64, i64* %RBP
  %2886 = sub i64 %2885, 24
  %2887 = load i64, i64* %PC
  %2888 = add i64 %2887, 4
  store i64 %2888, i64* %PC
  %2889 = inttoptr i64 %2886 to i64*
  %2890 = load i64, i64* %2889
  store i64 %2890, i64* %RAX, align 8, !tbaa !2428
  %2891 = load i64, i64* %RAX
  %2892 = load i64, i64* %PC
  %2893 = add i64 %2892, 3
  store i64 %2893, i64* %PC
  %2894 = inttoptr i64 %2891 to i64*
  %2895 = load i64, i64* %2894
  store i64 %2895, i64* %RAX, align 8, !tbaa !2428
  %2896 = load i64, i64* %RBP
  %2897 = sub i64 %2896, 24
  %2898 = load i64, i64* %PC
  %2899 = add i64 %2898, 4
  store i64 %2899, i64* %PC
  %2900 = inttoptr i64 %2897 to i64*
  %2901 = load i64, i64* %2900
  store i64 %2901, i64* %RCX, align 8, !tbaa !2428
  %2902 = load i64, i64* %RCX
  %2903 = add i64 %2902, 12
  %2904 = load i64, i64* %PC
  %2905 = add i64 %2904, 4
  store i64 %2905, i64* %PC
  %2906 = inttoptr i64 %2903 to i32*
  %2907 = load i32, i32* %2906
  %2908 = sext i32 %2907 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2909, align 1, !tbaa !2432
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2910, align 1, !tbaa !2446
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2911, align 1, !tbaa !2447
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2912, align 1, !tbaa !2448
  %2913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2913, align 1, !tbaa !2449
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2914, align 1, !tbaa !2450
  %2915 = load i64, i64* %RBP
  %2916 = sub i64 %2915, 24
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 4
  store i64 %2918, i64* %PC
  %2919 = inttoptr i64 %2916 to i64*
  %2920 = load i64, i64* %2919
  store i64 %2920, i64* %RCX, align 8, !tbaa !2428
  %2921 = load i64, i64* %RDX
  %2922 = load i64, i64* %RCX
  %2923 = add i64 %2922, 16
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 4
  store i64 %2925, i64* %PC
  %2926 = inttoptr i64 %2923 to i32*
  %2927 = load i32, i32* %2926
  %2928 = shl i64 %2921, 32
  %2929 = ashr exact i64 %2928, 32
  %2930 = sext i32 %2927 to i64
  %2931 = mul nsw i64 %2930, %2929
  %2932 = trunc i64 %2931 to i32
  %2933 = and i64 %2931, 4294967295
  store i64 %2933, i64* %RDX, align 8, !tbaa !2428
  %2934 = shl i64 %2931, 32
  %2935 = ashr exact i64 %2934, 32
  %2936 = icmp ne i64 %2935, %2931
  %2937 = zext i1 %2936 to i8
  %2938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2937, i8* %2938, align 1, !tbaa !2432
  %2939 = and i32 %2932, 255
  %2940 = call i32 @llvm.ctpop.i32(i32 %2939) #16
  %2941 = trunc i32 %2940 to i8
  %2942 = and i8 %2941, 1
  %2943 = xor i8 %2942, 1
  %2944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2943, i8* %2944, align 1, !tbaa !2446
  %2945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2945, align 1, !tbaa !2447
  %2946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2946, align 1, !tbaa !2448
  %2947 = lshr i32 %2932, 31
  %2948 = trunc i32 %2947 to i8
  %2949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2948, i8* %2949, align 1, !tbaa !2449
  %2950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2937, i8* %2950, align 1, !tbaa !2450
  %2951 = load i64, i64* %RBP
  %2952 = sub i64 %2951, 24
  %2953 = load i64, i64* %PC
  %2954 = add i64 %2953, 4
  store i64 %2954, i64* %PC
  %2955 = inttoptr i64 %2952 to i64*
  %2956 = load i64, i64* %2955
  store i64 %2956, i64* %RCX, align 8, !tbaa !2428
  %2957 = load i64, i64* %RDX
  %2958 = load i64, i64* %RCX
  %2959 = add i64 %2958, 20
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 4
  store i64 %2961, i64* %PC
  %2962 = inttoptr i64 %2959 to i32*
  %2963 = load i32, i32* %2962
  %2964 = shl i64 %2957, 32
  %2965 = ashr exact i64 %2964, 32
  %2966 = sext i32 %2963 to i64
  %2967 = mul nsw i64 %2966, %2965
  %2968 = trunc i64 %2967 to i32
  %2969 = and i64 %2967, 4294967295
  store i64 %2969, i64* %RDX, align 8, !tbaa !2428
  %2970 = shl i64 %2967, 32
  %2971 = ashr exact i64 %2970, 32
  %2972 = icmp ne i64 %2971, %2967
  %2973 = zext i1 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2973, i8* %2974, align 1, !tbaa !2432
  %2975 = and i32 %2968, 255
  %2976 = call i32 @llvm.ctpop.i32(i32 %2975) #16
  %2977 = trunc i32 %2976 to i8
  %2978 = and i8 %2977, 1
  %2979 = xor i8 %2978, 1
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2979, i8* %2980, align 1, !tbaa !2446
  %2981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2981, align 1, !tbaa !2447
  %2982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2982, align 1, !tbaa !2448
  %2983 = lshr i32 %2968, 31
  %2984 = trunc i32 %2983 to i8
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2984, i8* %2985, align 1, !tbaa !2449
  %2986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2973, i8* %2986, align 1, !tbaa !2450
  %2987 = load i64, i64* %RBP
  %2988 = sub i64 %2987, 52
  %2989 = load i64, i64* %PC
  %2990 = add i64 %2989, 3
  store i64 %2990, i64* %PC
  %2991 = inttoptr i64 %2988 to i32*
  %2992 = load i32, i32* %2991
  %2993 = zext i32 %2992 to i64
  store i64 %2993, i64* %RSI, align 8, !tbaa !2428
  %2994 = load i64, i64* %RBP
  %2995 = sub i64 %2994, 24
  %2996 = load i64, i64* %PC
  %2997 = add i64 %2996, 4
  store i64 %2997, i64* %PC
  %2998 = inttoptr i64 %2995 to i64*
  %2999 = load i64, i64* %2998
  store i64 %2999, i64* %RCX, align 8, !tbaa !2428
  %3000 = load i64, i64* %RSI
  %3001 = load i64, i64* %RCX
  %3002 = add i64 %3001, 16
  %3003 = load i64, i64* %PC
  %3004 = add i64 %3003, 4
  store i64 %3004, i64* %PC
  %3005 = inttoptr i64 %3002 to i32*
  %3006 = load i32, i32* %3005
  %3007 = shl i64 %3000, 32
  %3008 = ashr exact i64 %3007, 32
  %3009 = sext i32 %3006 to i64
  %3010 = mul nsw i64 %3009, %3008
  %3011 = trunc i64 %3010 to i32
  %3012 = and i64 %3010, 4294967295
  store i64 %3012, i64* %RSI, align 8, !tbaa !2428
  %3013 = shl i64 %3010, 32
  %3014 = ashr exact i64 %3013, 32
  %3015 = icmp ne i64 %3014, %3010
  %3016 = zext i1 %3015 to i8
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3016, i8* %3017, align 1, !tbaa !2432
  %3018 = and i32 %3011, 255
  %3019 = call i32 @llvm.ctpop.i32(i32 %3018) #16
  %3020 = trunc i32 %3019 to i8
  %3021 = and i8 %3020, 1
  %3022 = xor i8 %3021, 1
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3022, i8* %3023, align 1, !tbaa !2446
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3024, align 1, !tbaa !2447
  %3025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3025, align 1, !tbaa !2448
  %3026 = lshr i32 %3011, 31
  %3027 = trunc i32 %3026 to i8
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3027, i8* %3028, align 1, !tbaa !2449
  %3029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3016, i8* %3029, align 1, !tbaa !2450
  %3030 = load i64, i64* %RBP
  %3031 = sub i64 %3030, 24
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 4
  store i64 %3033, i64* %PC
  %3034 = inttoptr i64 %3031 to i64*
  %3035 = load i64, i64* %3034
  store i64 %3035, i64* %RCX, align 8, !tbaa !2428
  %3036 = load i64, i64* %RSI
  %3037 = load i64, i64* %RCX
  %3038 = add i64 %3037, 20
  %3039 = load i64, i64* %PC
  %3040 = add i64 %3039, 4
  store i64 %3040, i64* %PC
  %3041 = inttoptr i64 %3038 to i32*
  %3042 = load i32, i32* %3041
  %3043 = shl i64 %3036, 32
  %3044 = ashr exact i64 %3043, 32
  %3045 = sext i32 %3042 to i64
  %3046 = mul nsw i64 %3045, %3044
  %3047 = trunc i64 %3046 to i32
  %3048 = and i64 %3046, 4294967295
  store i64 %3048, i64* %RSI, align 8, !tbaa !2428
  %3049 = shl i64 %3046, 32
  %3050 = ashr exact i64 %3049, 32
  %3051 = icmp ne i64 %3050, %3046
  %3052 = zext i1 %3051 to i8
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3052, i8* %3053, align 1, !tbaa !2432
  %3054 = and i32 %3047, 255
  %3055 = call i32 @llvm.ctpop.i32(i32 %3054) #16
  %3056 = trunc i32 %3055 to i8
  %3057 = and i8 %3056, 1
  %3058 = xor i8 %3057, 1
  %3059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3058, i8* %3059, align 1, !tbaa !2446
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3060, align 1, !tbaa !2447
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3061, align 1, !tbaa !2448
  %3062 = lshr i32 %3047, 31
  %3063 = trunc i32 %3062 to i8
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3063, i8* %3064, align 1, !tbaa !2449
  %3065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3052, i8* %3065, align 1, !tbaa !2450
  %3066 = load i64, i64* %RDX
  %3067 = load i32, i32* %ESI
  %3068 = zext i32 %3067 to i64
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 2
  store i64 %3070, i64* %PC
  %3071 = trunc i64 %3066 to i32
  %3072 = add i32 %3067, %3071
  %3073 = zext i32 %3072 to i64
  store i64 %3073, i64* %RDX, align 8, !tbaa !2428
  %3074 = icmp ult i32 %3072, %3071
  %3075 = icmp ult i32 %3072, %3067
  %3076 = or i1 %3074, %3075
  %3077 = zext i1 %3076 to i8
  %3078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3077, i8* %3078, align 1, !tbaa !2432
  %3079 = and i32 %3072, 255
  %3080 = call i32 @llvm.ctpop.i32(i32 %3079) #16
  %3081 = trunc i32 %3080 to i8
  %3082 = and i8 %3081, 1
  %3083 = xor i8 %3082, 1
  %3084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3083, i8* %3084, align 1, !tbaa !2446
  %3085 = xor i64 %3068, %3066
  %3086 = trunc i64 %3085 to i32
  %3087 = xor i32 %3086, %3072
  %3088 = lshr i32 %3087, 4
  %3089 = trunc i32 %3088 to i8
  %3090 = and i8 %3089, 1
  %3091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3090, i8* %3091, align 1, !tbaa !2447
  %3092 = icmp eq i32 %3072, 0
  %3093 = zext i1 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3093, i8* %3094, align 1, !tbaa !2448
  %3095 = lshr i32 %3072, 31
  %3096 = trunc i32 %3095 to i8
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3096, i8* %3097, align 1, !tbaa !2449
  %3098 = lshr i32 %3071, 31
  %3099 = lshr i32 %3067, 31
  %3100 = xor i32 %3095, %3098
  %3101 = xor i32 %3095, %3099
  %3102 = add nuw nsw i32 %3100, %3101
  %3103 = icmp eq i32 %3102, 2
  %3104 = zext i1 %3103 to i8
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3104, i8* %3105, align 1, !tbaa !2450
  %3106 = load i64, i64* %RBP
  %3107 = sub i64 %3106, 56
  %3108 = load i64, i64* %PC
  %3109 = add i64 %3108, 3
  store i64 %3109, i64* %PC
  %3110 = inttoptr i64 %3107 to i32*
  %3111 = load i32, i32* %3110
  %3112 = zext i32 %3111 to i64
  store i64 %3112, i64* %RSI, align 8, !tbaa !2428
  %3113 = load i64, i64* %RBP
  %3114 = sub i64 %3113, 24
  %3115 = load i64, i64* %PC
  %3116 = add i64 %3115, 4
  store i64 %3116, i64* %PC
  %3117 = inttoptr i64 %3114 to i64*
  %3118 = load i64, i64* %3117
  store i64 %3118, i64* %RCX, align 8, !tbaa !2428
  %3119 = load i64, i64* %RSI
  %3120 = load i64, i64* %RCX
  %3121 = add i64 %3120, 20
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 4
  store i64 %3123, i64* %PC
  %3124 = inttoptr i64 %3121 to i32*
  %3125 = load i32, i32* %3124
  %3126 = shl i64 %3119, 32
  %3127 = ashr exact i64 %3126, 32
  %3128 = sext i32 %3125 to i64
  %3129 = mul nsw i64 %3128, %3127
  %3130 = trunc i64 %3129 to i32
  %3131 = and i64 %3129, 4294967295
  store i64 %3131, i64* %RSI, align 8, !tbaa !2428
  %3132 = shl i64 %3129, 32
  %3133 = ashr exact i64 %3132, 32
  %3134 = icmp ne i64 %3133, %3129
  %3135 = zext i1 %3134 to i8
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3135, i8* %3136, align 1, !tbaa !2432
  %3137 = and i32 %3130, 255
  %3138 = call i32 @llvm.ctpop.i32(i32 %3137) #16
  %3139 = trunc i32 %3138 to i8
  %3140 = and i8 %3139, 1
  %3141 = xor i8 %3140, 1
  %3142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3141, i8* %3142, align 1, !tbaa !2446
  %3143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3143, align 1, !tbaa !2447
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3144, align 1, !tbaa !2448
  %3145 = lshr i32 %3130, 31
  %3146 = trunc i32 %3145 to i8
  %3147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3146, i8* %3147, align 1, !tbaa !2449
  %3148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3135, i8* %3148, align 1, !tbaa !2450
  %3149 = load i64, i64* %RDX
  %3150 = load i32, i32* %ESI
  %3151 = zext i32 %3150 to i64
  %3152 = load i64, i64* %PC
  %3153 = add i64 %3152, 2
  store i64 %3153, i64* %PC
  %3154 = trunc i64 %3149 to i32
  %3155 = add i32 %3150, %3154
  %3156 = zext i32 %3155 to i64
  store i64 %3156, i64* %RDX, align 8, !tbaa !2428
  %3157 = icmp ult i32 %3155, %3154
  %3158 = icmp ult i32 %3155, %3150
  %3159 = or i1 %3157, %3158
  %3160 = zext i1 %3159 to i8
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3160, i8* %3161, align 1, !tbaa !2432
  %3162 = and i32 %3155, 255
  %3163 = call i32 @llvm.ctpop.i32(i32 %3162) #16
  %3164 = trunc i32 %3163 to i8
  %3165 = and i8 %3164, 1
  %3166 = xor i8 %3165, 1
  %3167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3166, i8* %3167, align 1, !tbaa !2446
  %3168 = xor i64 %3151, %3149
  %3169 = trunc i64 %3168 to i32
  %3170 = xor i32 %3169, %3155
  %3171 = lshr i32 %3170, 4
  %3172 = trunc i32 %3171 to i8
  %3173 = and i8 %3172, 1
  %3174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3173, i8* %3174, align 1, !tbaa !2447
  %3175 = icmp eq i32 %3155, 0
  %3176 = zext i1 %3175 to i8
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3176, i8* %3177, align 1, !tbaa !2448
  %3178 = lshr i32 %3155, 31
  %3179 = trunc i32 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3179, i8* %3180, align 1, !tbaa !2449
  %3181 = lshr i32 %3154, 31
  %3182 = lshr i32 %3150, 31
  %3183 = xor i32 %3178, %3181
  %3184 = xor i32 %3178, %3182
  %3185 = add nuw nsw i32 %3183, %3184
  %3186 = icmp eq i32 %3185, 2
  %3187 = zext i1 %3186 to i8
  %3188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3187, i8* %3188, align 1, !tbaa !2450
  %3189 = load i64, i64* %RDX
  %3190 = load i64, i64* %RBP
  %3191 = sub i64 %3190, 60
  %3192 = load i64, i64* %PC
  %3193 = add i64 %3192, 3
  store i64 %3193, i64* %PC
  %3194 = trunc i64 %3189 to i32
  %3195 = inttoptr i64 %3191 to i32*
  %3196 = load i32, i32* %3195
  %3197 = add i32 %3196, %3194
  %3198 = zext i32 %3197 to i64
  store i64 %3198, i64* %RDX, align 8, !tbaa !2428
  %3199 = icmp ult i32 %3197, %3194
  %3200 = icmp ult i32 %3197, %3196
  %3201 = or i1 %3199, %3200
  %3202 = zext i1 %3201 to i8
  %3203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3202, i8* %3203, align 1, !tbaa !2432
  %3204 = and i32 %3197, 255
  %3205 = call i32 @llvm.ctpop.i32(i32 %3204) #16
  %3206 = trunc i32 %3205 to i8
  %3207 = and i8 %3206, 1
  %3208 = xor i8 %3207, 1
  %3209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3208, i8* %3209, align 1, !tbaa !2446
  %3210 = xor i32 %3196, %3194
  %3211 = xor i32 %3210, %3197
  %3212 = lshr i32 %3211, 4
  %3213 = trunc i32 %3212 to i8
  %3214 = and i8 %3213, 1
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3214, i8* %3215, align 1, !tbaa !2447
  %3216 = icmp eq i32 %3197, 0
  %3217 = zext i1 %3216 to i8
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3217, i8* %3218, align 1, !tbaa !2448
  %3219 = lshr i32 %3197, 31
  %3220 = trunc i32 %3219 to i8
  %3221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3220, i8* %3221, align 1, !tbaa !2449
  %3222 = lshr i32 %3194, 31
  %3223 = lshr i32 %3196, 31
  %3224 = xor i32 %3219, %3222
  %3225 = xor i32 %3219, %3223
  %3226 = add nuw nsw i32 %3224, %3225
  %3227 = icmp eq i32 %3226, 2
  %3228 = zext i1 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3228, i8* %3229, align 1, !tbaa !2450
  %3230 = load i32, i32* %EDX
  %3231 = zext i32 %3230 to i64
  %3232 = load i64, i64* %PC
  %3233 = add i64 %3232, 3
  store i64 %3233, i64* %PC
  %3234 = shl i64 %3231, 32
  %3235 = ashr exact i64 %3234, 32
  store i64 %3235, i64* %RCX, align 8, !tbaa !2428
  %3236 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3237 = load i64, i64* %RAX
  %3238 = load i64, i64* %RCX
  %3239 = mul i64 %3238, 4
  %3240 = add i64 %3239, %3237
  %3241 = load i64, i64* %PC
  %3242 = add i64 %3241, 5
  store i64 %3242, i64* %PC
  %3243 = inttoptr i64 %3240 to float*
  %3244 = load float, float* %3243
  %3245 = bitcast i8* %3236 to float*
  store float %3244, float* %3245, align 1, !tbaa !2452
  %3246 = getelementptr inbounds i8, i8* %3236, i64 4
  %3247 = bitcast i8* %3246 to float*
  store float 0.000000e+00, float* %3247, align 1, !tbaa !2452
  %3248 = getelementptr inbounds i8, i8* %3236, i64 8
  %3249 = bitcast i8* %3248 to float*
  store float 0.000000e+00, float* %3249, align 1, !tbaa !2452
  %3250 = getelementptr inbounds i8, i8* %3236, i64 12
  %3251 = bitcast i8* %3250 to float*
  store float 0.000000e+00, float* %3251, align 1, !tbaa !2452
  %3252 = load i64, i64* %RBP
  %3253 = sub i64 %3252, 40
  %3254 = load i64, i64* %PC
  %3255 = add i64 %3254, 4
  store i64 %3255, i64* %PC
  %3256 = inttoptr i64 %3253 to i64*
  %3257 = load i64, i64* %3256
  store i64 %3257, i64* %RAX, align 8, !tbaa !2428
  %3258 = load i64, i64* %RAX
  %3259 = load i64, i64* %PC
  %3260 = add i64 %3259, 3
  store i64 %3260, i64* %PC
  %3261 = inttoptr i64 %3258 to i64*
  %3262 = load i64, i64* %3261
  store i64 %3262, i64* %RAX, align 8, !tbaa !2428
  %3263 = load i64, i64* %RBP
  %3264 = sub i64 %3263, 40
  %3265 = load i64, i64* %PC
  %3266 = add i64 %3265, 4
  store i64 %3266, i64* %PC
  %3267 = inttoptr i64 %3264 to i64*
  %3268 = load i64, i64* %3267
  store i64 %3268, i64* %RCX, align 8, !tbaa !2428
  %3269 = load i64, i64* %RCX
  %3270 = add i64 %3269, 12
  %3271 = load i64, i64* %PC
  %3272 = add i64 %3271, 4
  store i64 %3272, i64* %PC
  %3273 = inttoptr i64 %3270 to i32*
  %3274 = load i32, i32* %3273
  %3275 = sext i32 %3274 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3276, align 1, !tbaa !2432
  %3277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %3277, align 1, !tbaa !2446
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3278, align 1, !tbaa !2447
  %3279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3279, align 1, !tbaa !2448
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3280, align 1, !tbaa !2449
  %3281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3281, align 1, !tbaa !2450
  %3282 = load i64, i64* %RBP
  %3283 = sub i64 %3282, 40
  %3284 = load i64, i64* %PC
  %3285 = add i64 %3284, 4
  store i64 %3285, i64* %PC
  %3286 = inttoptr i64 %3283 to i64*
  %3287 = load i64, i64* %3286
  store i64 %3287, i64* %RCX, align 8, !tbaa !2428
  %3288 = load i64, i64* %RDX
  %3289 = load i64, i64* %RCX
  %3290 = add i64 %3289, 16
  %3291 = load i64, i64* %PC
  %3292 = add i64 %3291, 4
  store i64 %3292, i64* %PC
  %3293 = inttoptr i64 %3290 to i32*
  %3294 = load i32, i32* %3293
  %3295 = shl i64 %3288, 32
  %3296 = ashr exact i64 %3295, 32
  %3297 = sext i32 %3294 to i64
  %3298 = mul nsw i64 %3297, %3296
  %3299 = trunc i64 %3298 to i32
  %3300 = and i64 %3298, 4294967295
  store i64 %3300, i64* %RDX, align 8, !tbaa !2428
  %3301 = shl i64 %3298, 32
  %3302 = ashr exact i64 %3301, 32
  %3303 = icmp ne i64 %3302, %3298
  %3304 = zext i1 %3303 to i8
  %3305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3304, i8* %3305, align 1, !tbaa !2432
  %3306 = and i32 %3299, 255
  %3307 = call i32 @llvm.ctpop.i32(i32 %3306) #16
  %3308 = trunc i32 %3307 to i8
  %3309 = and i8 %3308, 1
  %3310 = xor i8 %3309, 1
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3310, i8* %3311, align 1, !tbaa !2446
  %3312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3312, align 1, !tbaa !2447
  %3313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3313, align 1, !tbaa !2448
  %3314 = lshr i32 %3299, 31
  %3315 = trunc i32 %3314 to i8
  %3316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3315, i8* %3316, align 1, !tbaa !2449
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3304, i8* %3317, align 1, !tbaa !2450
  %3318 = load i64, i64* %RBP
  %3319 = sub i64 %3318, 40
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 4
  store i64 %3321, i64* %PC
  %3322 = inttoptr i64 %3319 to i64*
  %3323 = load i64, i64* %3322
  store i64 %3323, i64* %RCX, align 8, !tbaa !2428
  %3324 = load i64, i64* %RDX
  %3325 = load i64, i64* %RCX
  %3326 = add i64 %3325, 20
  %3327 = load i64, i64* %PC
  %3328 = add i64 %3327, 4
  store i64 %3328, i64* %PC
  %3329 = inttoptr i64 %3326 to i32*
  %3330 = load i32, i32* %3329
  %3331 = shl i64 %3324, 32
  %3332 = ashr exact i64 %3331, 32
  %3333 = sext i32 %3330 to i64
  %3334 = mul nsw i64 %3333, %3332
  %3335 = trunc i64 %3334 to i32
  %3336 = and i64 %3334, 4294967295
  store i64 %3336, i64* %RDX, align 8, !tbaa !2428
  %3337 = shl i64 %3334, 32
  %3338 = ashr exact i64 %3337, 32
  %3339 = icmp ne i64 %3338, %3334
  %3340 = zext i1 %3339 to i8
  %3341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3340, i8* %3341, align 1, !tbaa !2432
  %3342 = and i32 %3335, 255
  %3343 = call i32 @llvm.ctpop.i32(i32 %3342) #16
  %3344 = trunc i32 %3343 to i8
  %3345 = and i8 %3344, 1
  %3346 = xor i8 %3345, 1
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3346, i8* %3347, align 1, !tbaa !2446
  %3348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3348, align 1, !tbaa !2447
  %3349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3349, align 1, !tbaa !2448
  %3350 = lshr i32 %3335, 31
  %3351 = trunc i32 %3350 to i8
  %3352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3351, i8* %3352, align 1, !tbaa !2449
  %3353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3340, i8* %3353, align 1, !tbaa !2450
  %3354 = load i64, i64* %RBP
  %3355 = sub i64 %3354, 52
  %3356 = load i64, i64* %PC
  %3357 = add i64 %3356, 3
  store i64 %3357, i64* %PC
  %3358 = inttoptr i64 %3355 to i32*
  %3359 = load i32, i32* %3358
  %3360 = zext i32 %3359 to i64
  store i64 %3360, i64* %RSI, align 8, !tbaa !2428
  %3361 = load i64, i64* %RSI
  %3362 = load i64, i64* %PC
  %3363 = add i64 %3362, 3
  store i64 %3363, i64* %PC
  %3364 = trunc i64 %3361 to i32
  %3365 = add i32 1, %3364
  %3366 = zext i32 %3365 to i64
  store i64 %3366, i64* %RSI, align 8, !tbaa !2428
  %3367 = icmp ult i32 %3365, %3364
  %3368 = icmp ult i32 %3365, 1
  %3369 = or i1 %3367, %3368
  %3370 = zext i1 %3369 to i8
  %3371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3370, i8* %3371, align 1, !tbaa !2432
  %3372 = and i32 %3365, 255
  %3373 = call i32 @llvm.ctpop.i32(i32 %3372) #16
  %3374 = trunc i32 %3373 to i8
  %3375 = and i8 %3374, 1
  %3376 = xor i8 %3375, 1
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3376, i8* %3377, align 1, !tbaa !2446
  %3378 = xor i64 1, %3361
  %3379 = trunc i64 %3378 to i32
  %3380 = xor i32 %3379, %3365
  %3381 = lshr i32 %3380, 4
  %3382 = trunc i32 %3381 to i8
  %3383 = and i8 %3382, 1
  %3384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3383, i8* %3384, align 1, !tbaa !2447
  %3385 = icmp eq i32 %3365, 0
  %3386 = zext i1 %3385 to i8
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3386, i8* %3387, align 1, !tbaa !2448
  %3388 = lshr i32 %3365, 31
  %3389 = trunc i32 %3388 to i8
  %3390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3389, i8* %3390, align 1, !tbaa !2449
  %3391 = lshr i32 %3364, 31
  %3392 = xor i32 %3388, %3391
  %3393 = add nuw nsw i32 %3392, %3388
  %3394 = icmp eq i32 %3393, 2
  %3395 = zext i1 %3394 to i8
  %3396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3395, i8* %3396, align 1, !tbaa !2450
  %3397 = load i64, i64* %RBP
  %3398 = sub i64 %3397, 40
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 4
  store i64 %3400, i64* %PC
  %3401 = inttoptr i64 %3398 to i64*
  %3402 = load i64, i64* %3401
  store i64 %3402, i64* %RCX, align 8, !tbaa !2428
  %3403 = load i64, i64* %RSI
  %3404 = load i64, i64* %RCX
  %3405 = add i64 %3404, 16
  %3406 = load i64, i64* %PC
  %3407 = add i64 %3406, 4
  store i64 %3407, i64* %PC
  %3408 = inttoptr i64 %3405 to i32*
  %3409 = load i32, i32* %3408
  %3410 = shl i64 %3403, 32
  %3411 = ashr exact i64 %3410, 32
  %3412 = sext i32 %3409 to i64
  %3413 = mul nsw i64 %3412, %3411
  %3414 = trunc i64 %3413 to i32
  %3415 = and i64 %3413, 4294967295
  store i64 %3415, i64* %RSI, align 8, !tbaa !2428
  %3416 = shl i64 %3413, 32
  %3417 = ashr exact i64 %3416, 32
  %3418 = icmp ne i64 %3417, %3413
  %3419 = zext i1 %3418 to i8
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3419, i8* %3420, align 1, !tbaa !2432
  %3421 = and i32 %3414, 255
  %3422 = call i32 @llvm.ctpop.i32(i32 %3421) #16
  %3423 = trunc i32 %3422 to i8
  %3424 = and i8 %3423, 1
  %3425 = xor i8 %3424, 1
  %3426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3425, i8* %3426, align 1, !tbaa !2446
  %3427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3427, align 1, !tbaa !2447
  %3428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3428, align 1, !tbaa !2448
  %3429 = lshr i32 %3414, 31
  %3430 = trunc i32 %3429 to i8
  %3431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3430, i8* %3431, align 1, !tbaa !2449
  %3432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3419, i8* %3432, align 1, !tbaa !2450
  %3433 = load i64, i64* %RBP
  %3434 = sub i64 %3433, 40
  %3435 = load i64, i64* %PC
  %3436 = add i64 %3435, 4
  store i64 %3436, i64* %PC
  %3437 = inttoptr i64 %3434 to i64*
  %3438 = load i64, i64* %3437
  store i64 %3438, i64* %RCX, align 8, !tbaa !2428
  %3439 = load i64, i64* %RSI
  %3440 = load i64, i64* %RCX
  %3441 = add i64 %3440, 20
  %3442 = load i64, i64* %PC
  %3443 = add i64 %3442, 4
  store i64 %3443, i64* %PC
  %3444 = inttoptr i64 %3441 to i32*
  %3445 = load i32, i32* %3444
  %3446 = shl i64 %3439, 32
  %3447 = ashr exact i64 %3446, 32
  %3448 = sext i32 %3445 to i64
  %3449 = mul nsw i64 %3448, %3447
  %3450 = trunc i64 %3449 to i32
  %3451 = and i64 %3449, 4294967295
  store i64 %3451, i64* %RSI, align 8, !tbaa !2428
  %3452 = shl i64 %3449, 32
  %3453 = ashr exact i64 %3452, 32
  %3454 = icmp ne i64 %3453, %3449
  %3455 = zext i1 %3454 to i8
  %3456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3455, i8* %3456, align 1, !tbaa !2432
  %3457 = and i32 %3450, 255
  %3458 = call i32 @llvm.ctpop.i32(i32 %3457) #16
  %3459 = trunc i32 %3458 to i8
  %3460 = and i8 %3459, 1
  %3461 = xor i8 %3460, 1
  %3462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3461, i8* %3462, align 1, !tbaa !2446
  %3463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3463, align 1, !tbaa !2447
  %3464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3464, align 1, !tbaa !2448
  %3465 = lshr i32 %3450, 31
  %3466 = trunc i32 %3465 to i8
  %3467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3466, i8* %3467, align 1, !tbaa !2449
  %3468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3455, i8* %3468, align 1, !tbaa !2450
  %3469 = load i64, i64* %RDX
  %3470 = load i32, i32* %ESI
  %3471 = zext i32 %3470 to i64
  %3472 = load i64, i64* %PC
  %3473 = add i64 %3472, 2
  store i64 %3473, i64* %PC
  %3474 = trunc i64 %3469 to i32
  %3475 = add i32 %3470, %3474
  %3476 = zext i32 %3475 to i64
  store i64 %3476, i64* %RDX, align 8, !tbaa !2428
  %3477 = icmp ult i32 %3475, %3474
  %3478 = icmp ult i32 %3475, %3470
  %3479 = or i1 %3477, %3478
  %3480 = zext i1 %3479 to i8
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3480, i8* %3481, align 1, !tbaa !2432
  %3482 = and i32 %3475, 255
  %3483 = call i32 @llvm.ctpop.i32(i32 %3482) #16
  %3484 = trunc i32 %3483 to i8
  %3485 = and i8 %3484, 1
  %3486 = xor i8 %3485, 1
  %3487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3486, i8* %3487, align 1, !tbaa !2446
  %3488 = xor i64 %3471, %3469
  %3489 = trunc i64 %3488 to i32
  %3490 = xor i32 %3489, %3475
  %3491 = lshr i32 %3490, 4
  %3492 = trunc i32 %3491 to i8
  %3493 = and i8 %3492, 1
  %3494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3493, i8* %3494, align 1, !tbaa !2447
  %3495 = icmp eq i32 %3475, 0
  %3496 = zext i1 %3495 to i8
  %3497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3496, i8* %3497, align 1, !tbaa !2448
  %3498 = lshr i32 %3475, 31
  %3499 = trunc i32 %3498 to i8
  %3500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3499, i8* %3500, align 1, !tbaa !2449
  %3501 = lshr i32 %3474, 31
  %3502 = lshr i32 %3470, 31
  %3503 = xor i32 %3498, %3501
  %3504 = xor i32 %3498, %3502
  %3505 = add nuw nsw i32 %3503, %3504
  %3506 = icmp eq i32 %3505, 2
  %3507 = zext i1 %3506 to i8
  %3508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3507, i8* %3508, align 1, !tbaa !2450
  %3509 = load i64, i64* %RBP
  %3510 = sub i64 %3509, 56
  %3511 = load i64, i64* %PC
  %3512 = add i64 %3511, 3
  store i64 %3512, i64* %PC
  %3513 = inttoptr i64 %3510 to i32*
  %3514 = load i32, i32* %3513
  %3515 = zext i32 %3514 to i64
  store i64 %3515, i64* %RSI, align 8, !tbaa !2428
  %3516 = load i64, i64* %RSI
  %3517 = load i64, i64* %PC
  %3518 = add i64 %3517, 3
  store i64 %3518, i64* %PC
  %3519 = trunc i64 %3516 to i32
  %3520 = add i32 1, %3519
  %3521 = zext i32 %3520 to i64
  store i64 %3521, i64* %RSI, align 8, !tbaa !2428
  %3522 = icmp ult i32 %3520, %3519
  %3523 = icmp ult i32 %3520, 1
  %3524 = or i1 %3522, %3523
  %3525 = zext i1 %3524 to i8
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3525, i8* %3526, align 1, !tbaa !2432
  %3527 = and i32 %3520, 255
  %3528 = call i32 @llvm.ctpop.i32(i32 %3527) #16
  %3529 = trunc i32 %3528 to i8
  %3530 = and i8 %3529, 1
  %3531 = xor i8 %3530, 1
  %3532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3531, i8* %3532, align 1, !tbaa !2446
  %3533 = xor i64 1, %3516
  %3534 = trunc i64 %3533 to i32
  %3535 = xor i32 %3534, %3520
  %3536 = lshr i32 %3535, 4
  %3537 = trunc i32 %3536 to i8
  %3538 = and i8 %3537, 1
  %3539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3538, i8* %3539, align 1, !tbaa !2447
  %3540 = icmp eq i32 %3520, 0
  %3541 = zext i1 %3540 to i8
  %3542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3541, i8* %3542, align 1, !tbaa !2448
  %3543 = lshr i32 %3520, 31
  %3544 = trunc i32 %3543 to i8
  %3545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3544, i8* %3545, align 1, !tbaa !2449
  %3546 = lshr i32 %3519, 31
  %3547 = xor i32 %3543, %3546
  %3548 = add nuw nsw i32 %3547, %3543
  %3549 = icmp eq i32 %3548, 2
  %3550 = zext i1 %3549 to i8
  %3551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3550, i8* %3551, align 1, !tbaa !2450
  %3552 = load i64, i64* %RBP
  %3553 = sub i64 %3552, 40
  %3554 = load i64, i64* %PC
  %3555 = add i64 %3554, 4
  store i64 %3555, i64* %PC
  %3556 = inttoptr i64 %3553 to i64*
  %3557 = load i64, i64* %3556
  store i64 %3557, i64* %RCX, align 8, !tbaa !2428
  %3558 = load i64, i64* %RSI
  %3559 = load i64, i64* %RCX
  %3560 = add i64 %3559, 20
  %3561 = load i64, i64* %PC
  %3562 = add i64 %3561, 4
  store i64 %3562, i64* %PC
  %3563 = inttoptr i64 %3560 to i32*
  %3564 = load i32, i32* %3563
  %3565 = shl i64 %3558, 32
  %3566 = ashr exact i64 %3565, 32
  %3567 = sext i32 %3564 to i64
  %3568 = mul nsw i64 %3567, %3566
  %3569 = trunc i64 %3568 to i32
  %3570 = and i64 %3568, 4294967295
  store i64 %3570, i64* %RSI, align 8, !tbaa !2428
  %3571 = shl i64 %3568, 32
  %3572 = ashr exact i64 %3571, 32
  %3573 = icmp ne i64 %3572, %3568
  %3574 = zext i1 %3573 to i8
  %3575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3574, i8* %3575, align 1, !tbaa !2432
  %3576 = and i32 %3569, 255
  %3577 = call i32 @llvm.ctpop.i32(i32 %3576) #16
  %3578 = trunc i32 %3577 to i8
  %3579 = and i8 %3578, 1
  %3580 = xor i8 %3579, 1
  %3581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3580, i8* %3581, align 1, !tbaa !2446
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3582, align 1, !tbaa !2447
  %3583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3583, align 1, !tbaa !2448
  %3584 = lshr i32 %3569, 31
  %3585 = trunc i32 %3584 to i8
  %3586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3585, i8* %3586, align 1, !tbaa !2449
  %3587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3574, i8* %3587, align 1, !tbaa !2450
  %3588 = load i64, i64* %RDX
  %3589 = load i32, i32* %ESI
  %3590 = zext i32 %3589 to i64
  %3591 = load i64, i64* %PC
  %3592 = add i64 %3591, 2
  store i64 %3592, i64* %PC
  %3593 = trunc i64 %3588 to i32
  %3594 = add i32 %3589, %3593
  %3595 = zext i32 %3594 to i64
  store i64 %3595, i64* %RDX, align 8, !tbaa !2428
  %3596 = icmp ult i32 %3594, %3593
  %3597 = icmp ult i32 %3594, %3589
  %3598 = or i1 %3596, %3597
  %3599 = zext i1 %3598 to i8
  %3600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3599, i8* %3600, align 1, !tbaa !2432
  %3601 = and i32 %3594, 255
  %3602 = call i32 @llvm.ctpop.i32(i32 %3601) #16
  %3603 = trunc i32 %3602 to i8
  %3604 = and i8 %3603, 1
  %3605 = xor i8 %3604, 1
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3605, i8* %3606, align 1, !tbaa !2446
  %3607 = xor i64 %3590, %3588
  %3608 = trunc i64 %3607 to i32
  %3609 = xor i32 %3608, %3594
  %3610 = lshr i32 %3609, 4
  %3611 = trunc i32 %3610 to i8
  %3612 = and i8 %3611, 1
  %3613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3612, i8* %3613, align 1, !tbaa !2447
  %3614 = icmp eq i32 %3594, 0
  %3615 = zext i1 %3614 to i8
  %3616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3615, i8* %3616, align 1, !tbaa !2448
  %3617 = lshr i32 %3594, 31
  %3618 = trunc i32 %3617 to i8
  %3619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3618, i8* %3619, align 1, !tbaa !2449
  %3620 = lshr i32 %3593, 31
  %3621 = lshr i32 %3589, 31
  %3622 = xor i32 %3617, %3620
  %3623 = xor i32 %3617, %3621
  %3624 = add nuw nsw i32 %3622, %3623
  %3625 = icmp eq i32 %3624, 2
  %3626 = zext i1 %3625 to i8
  %3627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3626, i8* %3627, align 1, !tbaa !2450
  %3628 = load i64, i64* %RDX
  %3629 = load i64, i64* %RBP
  %3630 = sub i64 %3629, 60
  %3631 = load i64, i64* %PC
  %3632 = add i64 %3631, 3
  store i64 %3632, i64* %PC
  %3633 = trunc i64 %3628 to i32
  %3634 = inttoptr i64 %3630 to i32*
  %3635 = load i32, i32* %3634
  %3636 = add i32 %3635, %3633
  %3637 = zext i32 %3636 to i64
  store i64 %3637, i64* %RDX, align 8, !tbaa !2428
  %3638 = icmp ult i32 %3636, %3633
  %3639 = icmp ult i32 %3636, %3635
  %3640 = or i1 %3638, %3639
  %3641 = zext i1 %3640 to i8
  %3642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3641, i8* %3642, align 1, !tbaa !2432
  %3643 = and i32 %3636, 255
  %3644 = call i32 @llvm.ctpop.i32(i32 %3643) #16
  %3645 = trunc i32 %3644 to i8
  %3646 = and i8 %3645, 1
  %3647 = xor i8 %3646, 1
  %3648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3647, i8* %3648, align 1, !tbaa !2446
  %3649 = xor i32 %3635, %3633
  %3650 = xor i32 %3649, %3636
  %3651 = lshr i32 %3650, 4
  %3652 = trunc i32 %3651 to i8
  %3653 = and i8 %3652, 1
  %3654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3653, i8* %3654, align 1, !tbaa !2447
  %3655 = icmp eq i32 %3636, 0
  %3656 = zext i1 %3655 to i8
  %3657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3656, i8* %3657, align 1, !tbaa !2448
  %3658 = lshr i32 %3636, 31
  %3659 = trunc i32 %3658 to i8
  %3660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3659, i8* %3660, align 1, !tbaa !2449
  %3661 = lshr i32 %3633, 31
  %3662 = lshr i32 %3635, 31
  %3663 = xor i32 %3658, %3661
  %3664 = xor i32 %3658, %3662
  %3665 = add nuw nsw i32 %3663, %3664
  %3666 = icmp eq i32 %3665, 2
  %3667 = zext i1 %3666 to i8
  %3668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3667, i8* %3668, align 1, !tbaa !2450
  %3669 = load i32, i32* %EDX
  %3670 = zext i32 %3669 to i64
  %3671 = load i64, i64* %PC
  %3672 = add i64 %3671, 3
  store i64 %3672, i64* %PC
  %3673 = shl i64 %3670, 32
  %3674 = ashr exact i64 %3673, 32
  store i64 %3674, i64* %RCX, align 8, !tbaa !2428
  %3675 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3676 = load i64, i64* %RAX
  %3677 = load i64, i64* %RCX
  %3678 = mul i64 %3677, 4
  %3679 = add i64 %3678, %3676
  %3680 = load i64, i64* %PC
  %3681 = add i64 %3680, 5
  store i64 %3681, i64* %PC
  %3682 = inttoptr i64 %3679 to float*
  %3683 = load float, float* %3682
  %3684 = bitcast i8* %3675 to float*
  store float %3683, float* %3684, align 1, !tbaa !2452
  %3685 = getelementptr inbounds i8, i8* %3675, i64 4
  %3686 = bitcast i8* %3685 to float*
  store float 0.000000e+00, float* %3686, align 1, !tbaa !2452
  %3687 = getelementptr inbounds i8, i8* %3675, i64 8
  %3688 = bitcast i8* %3687 to float*
  store float 0.000000e+00, float* %3688, align 1, !tbaa !2452
  %3689 = getelementptr inbounds i8, i8* %3675, i64 12
  %3690 = bitcast i8* %3689 to float*
  store float 0.000000e+00, float* %3690, align 1, !tbaa !2452
  %3691 = load i64, i64* %RBP
  %3692 = sub i64 %3691, 40
  %3693 = load i64, i64* %PC
  %3694 = add i64 %3693, 4
  store i64 %3694, i64* %PC
  %3695 = inttoptr i64 %3692 to i64*
  %3696 = load i64, i64* %3695
  store i64 %3696, i64* %RAX, align 8, !tbaa !2428
  %3697 = load i64, i64* %RAX
  %3698 = load i64, i64* %PC
  %3699 = add i64 %3698, 3
  store i64 %3699, i64* %PC
  %3700 = inttoptr i64 %3697 to i64*
  %3701 = load i64, i64* %3700
  store i64 %3701, i64* %RAX, align 8, !tbaa !2428
  %3702 = load i64, i64* %RBP
  %3703 = sub i64 %3702, 40
  %3704 = load i64, i64* %PC
  %3705 = add i64 %3704, 4
  store i64 %3705, i64* %PC
  %3706 = inttoptr i64 %3703 to i64*
  %3707 = load i64, i64* %3706
  store i64 %3707, i64* %RCX, align 8, !tbaa !2428
  %3708 = load i64, i64* %RCX
  %3709 = add i64 %3708, 12
  %3710 = load i64, i64* %PC
  %3711 = add i64 %3710, 4
  store i64 %3711, i64* %PC
  %3712 = inttoptr i64 %3709 to i32*
  %3713 = load i32, i32* %3712
  %3714 = sext i32 %3713 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %3715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3715, align 1, !tbaa !2432
  %3716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %3716, align 1, !tbaa !2446
  %3717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3717, align 1, !tbaa !2447
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3718, align 1, !tbaa !2448
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3719, align 1, !tbaa !2449
  %3720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3720, align 1, !tbaa !2450
  %3721 = load i64, i64* %RBP
  %3722 = sub i64 %3721, 40
  %3723 = load i64, i64* %PC
  %3724 = add i64 %3723, 4
  store i64 %3724, i64* %PC
  %3725 = inttoptr i64 %3722 to i64*
  %3726 = load i64, i64* %3725
  store i64 %3726, i64* %RCX, align 8, !tbaa !2428
  %3727 = load i64, i64* %RDX
  %3728 = load i64, i64* %RCX
  %3729 = add i64 %3728, 16
  %3730 = load i64, i64* %PC
  %3731 = add i64 %3730, 4
  store i64 %3731, i64* %PC
  %3732 = inttoptr i64 %3729 to i32*
  %3733 = load i32, i32* %3732
  %3734 = shl i64 %3727, 32
  %3735 = ashr exact i64 %3734, 32
  %3736 = sext i32 %3733 to i64
  %3737 = mul nsw i64 %3736, %3735
  %3738 = trunc i64 %3737 to i32
  %3739 = and i64 %3737, 4294967295
  store i64 %3739, i64* %RDX, align 8, !tbaa !2428
  %3740 = shl i64 %3737, 32
  %3741 = ashr exact i64 %3740, 32
  %3742 = icmp ne i64 %3741, %3737
  %3743 = zext i1 %3742 to i8
  %3744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3743, i8* %3744, align 1, !tbaa !2432
  %3745 = and i32 %3738, 255
  %3746 = call i32 @llvm.ctpop.i32(i32 %3745) #16
  %3747 = trunc i32 %3746 to i8
  %3748 = and i8 %3747, 1
  %3749 = xor i8 %3748, 1
  %3750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3749, i8* %3750, align 1, !tbaa !2446
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3751, align 1, !tbaa !2447
  %3752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3752, align 1, !tbaa !2448
  %3753 = lshr i32 %3738, 31
  %3754 = trunc i32 %3753 to i8
  %3755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3754, i8* %3755, align 1, !tbaa !2449
  %3756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3743, i8* %3756, align 1, !tbaa !2450
  %3757 = load i64, i64* %RBP
  %3758 = sub i64 %3757, 40
  %3759 = load i64, i64* %PC
  %3760 = add i64 %3759, 4
  store i64 %3760, i64* %PC
  %3761 = inttoptr i64 %3758 to i64*
  %3762 = load i64, i64* %3761
  store i64 %3762, i64* %RCX, align 8, !tbaa !2428
  %3763 = load i64, i64* %RDX
  %3764 = load i64, i64* %RCX
  %3765 = add i64 %3764, 20
  %3766 = load i64, i64* %PC
  %3767 = add i64 %3766, 4
  store i64 %3767, i64* %PC
  %3768 = inttoptr i64 %3765 to i32*
  %3769 = load i32, i32* %3768
  %3770 = shl i64 %3763, 32
  %3771 = ashr exact i64 %3770, 32
  %3772 = sext i32 %3769 to i64
  %3773 = mul nsw i64 %3772, %3771
  %3774 = trunc i64 %3773 to i32
  %3775 = and i64 %3773, 4294967295
  store i64 %3775, i64* %RDX, align 8, !tbaa !2428
  %3776 = shl i64 %3773, 32
  %3777 = ashr exact i64 %3776, 32
  %3778 = icmp ne i64 %3777, %3773
  %3779 = zext i1 %3778 to i8
  %3780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3779, i8* %3780, align 1, !tbaa !2432
  %3781 = and i32 %3774, 255
  %3782 = call i32 @llvm.ctpop.i32(i32 %3781) #16
  %3783 = trunc i32 %3782 to i8
  %3784 = and i8 %3783, 1
  %3785 = xor i8 %3784, 1
  %3786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3785, i8* %3786, align 1, !tbaa !2446
  %3787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3787, align 1, !tbaa !2447
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3788, align 1, !tbaa !2448
  %3789 = lshr i32 %3774, 31
  %3790 = trunc i32 %3789 to i8
  %3791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3790, i8* %3791, align 1, !tbaa !2449
  %3792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3779, i8* %3792, align 1, !tbaa !2450
  %3793 = load i64, i64* %RBP
  %3794 = sub i64 %3793, 52
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = inttoptr i64 %3794 to i32*
  %3798 = load i32, i32* %3797
  %3799 = zext i32 %3798 to i64
  store i64 %3799, i64* %RSI, align 8, !tbaa !2428
  %3800 = load i64, i64* %RSI
  %3801 = load i64, i64* %PC
  %3802 = add i64 %3801, 3
  store i64 %3802, i64* %PC
  %3803 = trunc i64 %3800 to i32
  %3804 = add i32 1, %3803
  %3805 = zext i32 %3804 to i64
  store i64 %3805, i64* %RSI, align 8, !tbaa !2428
  %3806 = icmp ult i32 %3804, %3803
  %3807 = icmp ult i32 %3804, 1
  %3808 = or i1 %3806, %3807
  %3809 = zext i1 %3808 to i8
  %3810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3809, i8* %3810, align 1, !tbaa !2432
  %3811 = and i32 %3804, 255
  %3812 = call i32 @llvm.ctpop.i32(i32 %3811) #16
  %3813 = trunc i32 %3812 to i8
  %3814 = and i8 %3813, 1
  %3815 = xor i8 %3814, 1
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3815, i8* %3816, align 1, !tbaa !2446
  %3817 = xor i64 1, %3800
  %3818 = trunc i64 %3817 to i32
  %3819 = xor i32 %3818, %3804
  %3820 = lshr i32 %3819, 4
  %3821 = trunc i32 %3820 to i8
  %3822 = and i8 %3821, 1
  %3823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3822, i8* %3823, align 1, !tbaa !2447
  %3824 = icmp eq i32 %3804, 0
  %3825 = zext i1 %3824 to i8
  %3826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3825, i8* %3826, align 1, !tbaa !2448
  %3827 = lshr i32 %3804, 31
  %3828 = trunc i32 %3827 to i8
  %3829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3828, i8* %3829, align 1, !tbaa !2449
  %3830 = lshr i32 %3803, 31
  %3831 = xor i32 %3827, %3830
  %3832 = add nuw nsw i32 %3831, %3827
  %3833 = icmp eq i32 %3832, 2
  %3834 = zext i1 %3833 to i8
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3834, i8* %3835, align 1, !tbaa !2450
  %3836 = load i64, i64* %RBP
  %3837 = sub i64 %3836, 40
  %3838 = load i64, i64* %PC
  %3839 = add i64 %3838, 4
  store i64 %3839, i64* %PC
  %3840 = inttoptr i64 %3837 to i64*
  %3841 = load i64, i64* %3840
  store i64 %3841, i64* %RCX, align 8, !tbaa !2428
  %3842 = load i64, i64* %RSI
  %3843 = load i64, i64* %RCX
  %3844 = add i64 %3843, 16
  %3845 = load i64, i64* %PC
  %3846 = add i64 %3845, 4
  store i64 %3846, i64* %PC
  %3847 = inttoptr i64 %3844 to i32*
  %3848 = load i32, i32* %3847
  %3849 = shl i64 %3842, 32
  %3850 = ashr exact i64 %3849, 32
  %3851 = sext i32 %3848 to i64
  %3852 = mul nsw i64 %3851, %3850
  %3853 = trunc i64 %3852 to i32
  %3854 = and i64 %3852, 4294967295
  store i64 %3854, i64* %RSI, align 8, !tbaa !2428
  %3855 = shl i64 %3852, 32
  %3856 = ashr exact i64 %3855, 32
  %3857 = icmp ne i64 %3856, %3852
  %3858 = zext i1 %3857 to i8
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3858, i8* %3859, align 1, !tbaa !2432
  %3860 = and i32 %3853, 255
  %3861 = call i32 @llvm.ctpop.i32(i32 %3860) #16
  %3862 = trunc i32 %3861 to i8
  %3863 = and i8 %3862, 1
  %3864 = xor i8 %3863, 1
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3864, i8* %3865, align 1, !tbaa !2446
  %3866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3866, align 1, !tbaa !2447
  %3867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3867, align 1, !tbaa !2448
  %3868 = lshr i32 %3853, 31
  %3869 = trunc i32 %3868 to i8
  %3870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3869, i8* %3870, align 1, !tbaa !2449
  %3871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3858, i8* %3871, align 1, !tbaa !2450
  %3872 = load i64, i64* %RBP
  %3873 = sub i64 %3872, 40
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 4
  store i64 %3875, i64* %PC
  %3876 = inttoptr i64 %3873 to i64*
  %3877 = load i64, i64* %3876
  store i64 %3877, i64* %RCX, align 8, !tbaa !2428
  %3878 = load i64, i64* %RSI
  %3879 = load i64, i64* %RCX
  %3880 = add i64 %3879, 20
  %3881 = load i64, i64* %PC
  %3882 = add i64 %3881, 4
  store i64 %3882, i64* %PC
  %3883 = inttoptr i64 %3880 to i32*
  %3884 = load i32, i32* %3883
  %3885 = shl i64 %3878, 32
  %3886 = ashr exact i64 %3885, 32
  %3887 = sext i32 %3884 to i64
  %3888 = mul nsw i64 %3887, %3886
  %3889 = trunc i64 %3888 to i32
  %3890 = and i64 %3888, 4294967295
  store i64 %3890, i64* %RSI, align 8, !tbaa !2428
  %3891 = shl i64 %3888, 32
  %3892 = ashr exact i64 %3891, 32
  %3893 = icmp ne i64 %3892, %3888
  %3894 = zext i1 %3893 to i8
  %3895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3894, i8* %3895, align 1, !tbaa !2432
  %3896 = and i32 %3889, 255
  %3897 = call i32 @llvm.ctpop.i32(i32 %3896) #16
  %3898 = trunc i32 %3897 to i8
  %3899 = and i8 %3898, 1
  %3900 = xor i8 %3899, 1
  %3901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3900, i8* %3901, align 1, !tbaa !2446
  %3902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3902, align 1, !tbaa !2447
  %3903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3903, align 1, !tbaa !2448
  %3904 = lshr i32 %3889, 31
  %3905 = trunc i32 %3904 to i8
  %3906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3905, i8* %3906, align 1, !tbaa !2449
  %3907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3894, i8* %3907, align 1, !tbaa !2450
  %3908 = load i64, i64* %RDX
  %3909 = load i32, i32* %ESI
  %3910 = zext i32 %3909 to i64
  %3911 = load i64, i64* %PC
  %3912 = add i64 %3911, 2
  store i64 %3912, i64* %PC
  %3913 = trunc i64 %3908 to i32
  %3914 = add i32 %3909, %3913
  %3915 = zext i32 %3914 to i64
  store i64 %3915, i64* %RDX, align 8, !tbaa !2428
  %3916 = icmp ult i32 %3914, %3913
  %3917 = icmp ult i32 %3914, %3909
  %3918 = or i1 %3916, %3917
  %3919 = zext i1 %3918 to i8
  %3920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3919, i8* %3920, align 1, !tbaa !2432
  %3921 = and i32 %3914, 255
  %3922 = call i32 @llvm.ctpop.i32(i32 %3921) #16
  %3923 = trunc i32 %3922 to i8
  %3924 = and i8 %3923, 1
  %3925 = xor i8 %3924, 1
  %3926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3925, i8* %3926, align 1, !tbaa !2446
  %3927 = xor i64 %3910, %3908
  %3928 = trunc i64 %3927 to i32
  %3929 = xor i32 %3928, %3914
  %3930 = lshr i32 %3929, 4
  %3931 = trunc i32 %3930 to i8
  %3932 = and i8 %3931, 1
  %3933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3932, i8* %3933, align 1, !tbaa !2447
  %3934 = icmp eq i32 %3914, 0
  %3935 = zext i1 %3934 to i8
  %3936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3935, i8* %3936, align 1, !tbaa !2448
  %3937 = lshr i32 %3914, 31
  %3938 = trunc i32 %3937 to i8
  %3939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3938, i8* %3939, align 1, !tbaa !2449
  %3940 = lshr i32 %3913, 31
  %3941 = lshr i32 %3909, 31
  %3942 = xor i32 %3937, %3940
  %3943 = xor i32 %3937, %3941
  %3944 = add nuw nsw i32 %3942, %3943
  %3945 = icmp eq i32 %3944, 2
  %3946 = zext i1 %3945 to i8
  %3947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3946, i8* %3947, align 1, !tbaa !2450
  %3948 = load i64, i64* %RBP
  %3949 = sub i64 %3948, 56
  %3950 = load i64, i64* %PC
  %3951 = add i64 %3950, 3
  store i64 %3951, i64* %PC
  %3952 = inttoptr i64 %3949 to i32*
  %3953 = load i32, i32* %3952
  %3954 = zext i32 %3953 to i64
  store i64 %3954, i64* %RSI, align 8, !tbaa !2428
  %3955 = load i64, i64* %RSI
  %3956 = load i64, i64* %PC
  %3957 = add i64 %3956, 3
  store i64 %3957, i64* %PC
  %3958 = trunc i64 %3955 to i32
  %3959 = sub i32 %3958, 1
  %3960 = zext i32 %3959 to i64
  store i64 %3960, i64* %RSI, align 8, !tbaa !2428
  %3961 = icmp ult i32 %3958, 1
  %3962 = zext i1 %3961 to i8
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3962, i8* %3963, align 1, !tbaa !2432
  %3964 = and i32 %3959, 255
  %3965 = call i32 @llvm.ctpop.i32(i32 %3964) #16
  %3966 = trunc i32 %3965 to i8
  %3967 = and i8 %3966, 1
  %3968 = xor i8 %3967, 1
  %3969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3968, i8* %3969, align 1, !tbaa !2446
  %3970 = xor i64 1, %3955
  %3971 = trunc i64 %3970 to i32
  %3972 = xor i32 %3971, %3959
  %3973 = lshr i32 %3972, 4
  %3974 = trunc i32 %3973 to i8
  %3975 = and i8 %3974, 1
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3975, i8* %3976, align 1, !tbaa !2447
  %3977 = icmp eq i32 %3959, 0
  %3978 = zext i1 %3977 to i8
  %3979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3978, i8* %3979, align 1, !tbaa !2448
  %3980 = lshr i32 %3959, 31
  %3981 = trunc i32 %3980 to i8
  %3982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3981, i8* %3982, align 1, !tbaa !2449
  %3983 = lshr i32 %3958, 31
  %3984 = xor i32 %3980, %3983
  %3985 = add nuw nsw i32 %3984, %3983
  %3986 = icmp eq i32 %3985, 2
  %3987 = zext i1 %3986 to i8
  %3988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3987, i8* %3988, align 1, !tbaa !2450
  %3989 = load i64, i64* %RBP
  %3990 = sub i64 %3989, 40
  %3991 = load i64, i64* %PC
  %3992 = add i64 %3991, 4
  store i64 %3992, i64* %PC
  %3993 = inttoptr i64 %3990 to i64*
  %3994 = load i64, i64* %3993
  store i64 %3994, i64* %RCX, align 8, !tbaa !2428
  %3995 = load i64, i64* %RSI
  %3996 = load i64, i64* %RCX
  %3997 = add i64 %3996, 20
  %3998 = load i64, i64* %PC
  %3999 = add i64 %3998, 4
  store i64 %3999, i64* %PC
  %4000 = inttoptr i64 %3997 to i32*
  %4001 = load i32, i32* %4000
  %4002 = shl i64 %3995, 32
  %4003 = ashr exact i64 %4002, 32
  %4004 = sext i32 %4001 to i64
  %4005 = mul nsw i64 %4004, %4003
  %4006 = trunc i64 %4005 to i32
  %4007 = and i64 %4005, 4294967295
  store i64 %4007, i64* %RSI, align 8, !tbaa !2428
  %4008 = shl i64 %4005, 32
  %4009 = ashr exact i64 %4008, 32
  %4010 = icmp ne i64 %4009, %4005
  %4011 = zext i1 %4010 to i8
  %4012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4011, i8* %4012, align 1, !tbaa !2432
  %4013 = and i32 %4006, 255
  %4014 = call i32 @llvm.ctpop.i32(i32 %4013) #16
  %4015 = trunc i32 %4014 to i8
  %4016 = and i8 %4015, 1
  %4017 = xor i8 %4016, 1
  %4018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4017, i8* %4018, align 1, !tbaa !2446
  %4019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4019, align 1, !tbaa !2447
  %4020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4020, align 1, !tbaa !2448
  %4021 = lshr i32 %4006, 31
  %4022 = trunc i32 %4021 to i8
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4022, i8* %4023, align 1, !tbaa !2449
  %4024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4011, i8* %4024, align 1, !tbaa !2450
  %4025 = load i64, i64* %RDX
  %4026 = load i32, i32* %ESI
  %4027 = zext i32 %4026 to i64
  %4028 = load i64, i64* %PC
  %4029 = add i64 %4028, 2
  store i64 %4029, i64* %PC
  %4030 = trunc i64 %4025 to i32
  %4031 = add i32 %4026, %4030
  %4032 = zext i32 %4031 to i64
  store i64 %4032, i64* %RDX, align 8, !tbaa !2428
  %4033 = icmp ult i32 %4031, %4030
  %4034 = icmp ult i32 %4031, %4026
  %4035 = or i1 %4033, %4034
  %4036 = zext i1 %4035 to i8
  %4037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4036, i8* %4037, align 1, !tbaa !2432
  %4038 = and i32 %4031, 255
  %4039 = call i32 @llvm.ctpop.i32(i32 %4038) #16
  %4040 = trunc i32 %4039 to i8
  %4041 = and i8 %4040, 1
  %4042 = xor i8 %4041, 1
  %4043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4042, i8* %4043, align 1, !tbaa !2446
  %4044 = xor i64 %4027, %4025
  %4045 = trunc i64 %4044 to i32
  %4046 = xor i32 %4045, %4031
  %4047 = lshr i32 %4046, 4
  %4048 = trunc i32 %4047 to i8
  %4049 = and i8 %4048, 1
  %4050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4049, i8* %4050, align 1, !tbaa !2447
  %4051 = icmp eq i32 %4031, 0
  %4052 = zext i1 %4051 to i8
  %4053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4052, i8* %4053, align 1, !tbaa !2448
  %4054 = lshr i32 %4031, 31
  %4055 = trunc i32 %4054 to i8
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4055, i8* %4056, align 1, !tbaa !2449
  %4057 = lshr i32 %4030, 31
  %4058 = lshr i32 %4026, 31
  %4059 = xor i32 %4054, %4057
  %4060 = xor i32 %4054, %4058
  %4061 = add nuw nsw i32 %4059, %4060
  %4062 = icmp eq i32 %4061, 2
  %4063 = zext i1 %4062 to i8
  %4064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4063, i8* %4064, align 1, !tbaa !2450
  %4065 = load i64, i64* %RDX
  %4066 = load i64, i64* %RBP
  %4067 = sub i64 %4066, 60
  %4068 = load i64, i64* %PC
  %4069 = add i64 %4068, 3
  store i64 %4069, i64* %PC
  %4070 = trunc i64 %4065 to i32
  %4071 = inttoptr i64 %4067 to i32*
  %4072 = load i32, i32* %4071
  %4073 = add i32 %4072, %4070
  %4074 = zext i32 %4073 to i64
  store i64 %4074, i64* %RDX, align 8, !tbaa !2428
  %4075 = icmp ult i32 %4073, %4070
  %4076 = icmp ult i32 %4073, %4072
  %4077 = or i1 %4075, %4076
  %4078 = zext i1 %4077 to i8
  %4079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4078, i8* %4079, align 1, !tbaa !2432
  %4080 = and i32 %4073, 255
  %4081 = call i32 @llvm.ctpop.i32(i32 %4080) #16
  %4082 = trunc i32 %4081 to i8
  %4083 = and i8 %4082, 1
  %4084 = xor i8 %4083, 1
  %4085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4084, i8* %4085, align 1, !tbaa !2446
  %4086 = xor i32 %4072, %4070
  %4087 = xor i32 %4086, %4073
  %4088 = lshr i32 %4087, 4
  %4089 = trunc i32 %4088 to i8
  %4090 = and i8 %4089, 1
  %4091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4090, i8* %4091, align 1, !tbaa !2447
  %4092 = icmp eq i32 %4073, 0
  %4093 = zext i1 %4092 to i8
  %4094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4093, i8* %4094, align 1, !tbaa !2448
  %4095 = lshr i32 %4073, 31
  %4096 = trunc i32 %4095 to i8
  %4097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4096, i8* %4097, align 1, !tbaa !2449
  %4098 = lshr i32 %4070, 31
  %4099 = lshr i32 %4072, 31
  %4100 = xor i32 %4095, %4098
  %4101 = xor i32 %4095, %4099
  %4102 = add nuw nsw i32 %4100, %4101
  %4103 = icmp eq i32 %4102, 2
  %4104 = zext i1 %4103 to i8
  %4105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4104, i8* %4105, align 1, !tbaa !2450
  %4106 = load i32, i32* %EDX
  %4107 = zext i32 %4106 to i64
  %4108 = load i64, i64* %PC
  %4109 = add i64 %4108, 3
  store i64 %4109, i64* %PC
  %4110 = shl i64 %4107, 32
  %4111 = ashr exact i64 %4110, 32
  store i64 %4111, i64* %RCX, align 8, !tbaa !2428
  %4112 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4113 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4114 = load i64, i64* %RAX
  %4115 = load i64, i64* %RCX
  %4116 = mul i64 %4115, 4
  %4117 = add i64 %4116, %4114
  %4118 = load i64, i64* %PC
  %4119 = add i64 %4118, 5
  store i64 %4119, i64* %PC
  %4120 = bitcast i8* %4113 to <2 x float>*
  %4121 = load <2 x float>, <2 x float>* %4120, align 1
  %4122 = getelementptr inbounds i8, i8* %4113, i64 8
  %4123 = bitcast i8* %4122 to <2 x i32>*
  %4124 = load <2 x i32>, <2 x i32>* %4123, align 1
  %4125 = inttoptr i64 %4117 to float*
  %4126 = load float, float* %4125
  %4127 = extractelement <2 x float> %4121, i32 0
  %4128 = fsub float %4127, %4126
  %4129 = bitcast i8* %4112 to float*
  store float %4128, float* %4129, align 1, !tbaa !2452
  %4130 = bitcast <2 x float> %4121 to <2 x i32>
  %4131 = extractelement <2 x i32> %4130, i32 1
  %4132 = getelementptr inbounds i8, i8* %4112, i64 4
  %4133 = bitcast i8* %4132 to i32*
  store i32 %4131, i32* %4133, align 1, !tbaa !2452
  %4134 = extractelement <2 x i32> %4124, i32 0
  %4135 = getelementptr inbounds i8, i8* %4112, i64 8
  %4136 = bitcast i8* %4135 to i32*
  store i32 %4134, i32* %4136, align 1, !tbaa !2452
  %4137 = extractelement <2 x i32> %4124, i32 1
  %4138 = getelementptr inbounds i8, i8* %4112, i64 12
  %4139 = bitcast i8* %4138 to i32*
  store i32 %4137, i32* %4139, align 1, !tbaa !2452
  %4140 = load i64, i64* %RBP
  %4141 = sub i64 %4140, 40
  %4142 = load i64, i64* %PC
  %4143 = add i64 %4142, 4
  store i64 %4143, i64* %PC
  %4144 = inttoptr i64 %4141 to i64*
  %4145 = load i64, i64* %4144
  store i64 %4145, i64* %RAX, align 8, !tbaa !2428
  %4146 = load i64, i64* %RAX
  %4147 = load i64, i64* %PC
  %4148 = add i64 %4147, 3
  store i64 %4148, i64* %PC
  %4149 = inttoptr i64 %4146 to i64*
  %4150 = load i64, i64* %4149
  store i64 %4150, i64* %RAX, align 8, !tbaa !2428
  %4151 = load i64, i64* %RBP
  %4152 = sub i64 %4151, 40
  %4153 = load i64, i64* %PC
  %4154 = add i64 %4153, 4
  store i64 %4154, i64* %PC
  %4155 = inttoptr i64 %4152 to i64*
  %4156 = load i64, i64* %4155
  store i64 %4156, i64* %RCX, align 8, !tbaa !2428
  %4157 = load i64, i64* %RCX
  %4158 = add i64 %4157, 12
  %4159 = load i64, i64* %PC
  %4160 = add i64 %4159, 4
  store i64 %4160, i64* %PC
  %4161 = inttoptr i64 %4158 to i32*
  %4162 = load i32, i32* %4161
  %4163 = sext i32 %4162 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4164, align 1, !tbaa !2432
  %4165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4165, align 1, !tbaa !2446
  %4166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4166, align 1, !tbaa !2447
  %4167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4167, align 1, !tbaa !2448
  %4168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4168, align 1, !tbaa !2449
  %4169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4169, align 1, !tbaa !2450
  %4170 = load i64, i64* %RBP
  %4171 = sub i64 %4170, 40
  %4172 = load i64, i64* %PC
  %4173 = add i64 %4172, 4
  store i64 %4173, i64* %PC
  %4174 = inttoptr i64 %4171 to i64*
  %4175 = load i64, i64* %4174
  store i64 %4175, i64* %RCX, align 8, !tbaa !2428
  %4176 = load i64, i64* %RDX
  %4177 = load i64, i64* %RCX
  %4178 = add i64 %4177, 16
  %4179 = load i64, i64* %PC
  %4180 = add i64 %4179, 4
  store i64 %4180, i64* %PC
  %4181 = inttoptr i64 %4178 to i32*
  %4182 = load i32, i32* %4181
  %4183 = shl i64 %4176, 32
  %4184 = ashr exact i64 %4183, 32
  %4185 = sext i32 %4182 to i64
  %4186 = mul nsw i64 %4185, %4184
  %4187 = trunc i64 %4186 to i32
  %4188 = and i64 %4186, 4294967295
  store i64 %4188, i64* %RDX, align 8, !tbaa !2428
  %4189 = shl i64 %4186, 32
  %4190 = ashr exact i64 %4189, 32
  %4191 = icmp ne i64 %4190, %4186
  %4192 = zext i1 %4191 to i8
  %4193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4192, i8* %4193, align 1, !tbaa !2432
  %4194 = and i32 %4187, 255
  %4195 = call i32 @llvm.ctpop.i32(i32 %4194) #16
  %4196 = trunc i32 %4195 to i8
  %4197 = and i8 %4196, 1
  %4198 = xor i8 %4197, 1
  %4199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4198, i8* %4199, align 1, !tbaa !2446
  %4200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4200, align 1, !tbaa !2447
  %4201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4201, align 1, !tbaa !2448
  %4202 = lshr i32 %4187, 31
  %4203 = trunc i32 %4202 to i8
  %4204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4203, i8* %4204, align 1, !tbaa !2449
  %4205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4192, i8* %4205, align 1, !tbaa !2450
  %4206 = load i64, i64* %RBP
  %4207 = sub i64 %4206, 40
  %4208 = load i64, i64* %PC
  %4209 = add i64 %4208, 4
  store i64 %4209, i64* %PC
  %4210 = inttoptr i64 %4207 to i64*
  %4211 = load i64, i64* %4210
  store i64 %4211, i64* %RCX, align 8, !tbaa !2428
  %4212 = load i64, i64* %RDX
  %4213 = load i64, i64* %RCX
  %4214 = add i64 %4213, 20
  %4215 = load i64, i64* %PC
  %4216 = add i64 %4215, 4
  store i64 %4216, i64* %PC
  %4217 = inttoptr i64 %4214 to i32*
  %4218 = load i32, i32* %4217
  %4219 = shl i64 %4212, 32
  %4220 = ashr exact i64 %4219, 32
  %4221 = sext i32 %4218 to i64
  %4222 = mul nsw i64 %4221, %4220
  %4223 = trunc i64 %4222 to i32
  %4224 = and i64 %4222, 4294967295
  store i64 %4224, i64* %RDX, align 8, !tbaa !2428
  %4225 = shl i64 %4222, 32
  %4226 = ashr exact i64 %4225, 32
  %4227 = icmp ne i64 %4226, %4222
  %4228 = zext i1 %4227 to i8
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4228, i8* %4229, align 1, !tbaa !2432
  %4230 = and i32 %4223, 255
  %4231 = call i32 @llvm.ctpop.i32(i32 %4230) #16
  %4232 = trunc i32 %4231 to i8
  %4233 = and i8 %4232, 1
  %4234 = xor i8 %4233, 1
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4234, i8* %4235, align 1, !tbaa !2446
  %4236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4236, align 1, !tbaa !2447
  %4237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4237, align 1, !tbaa !2448
  %4238 = lshr i32 %4223, 31
  %4239 = trunc i32 %4238 to i8
  %4240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4239, i8* %4240, align 1, !tbaa !2449
  %4241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4228, i8* %4241, align 1, !tbaa !2450
  %4242 = load i64, i64* %RBP
  %4243 = sub i64 %4242, 52
  %4244 = load i64, i64* %PC
  %4245 = add i64 %4244, 3
  store i64 %4245, i64* %PC
  %4246 = inttoptr i64 %4243 to i32*
  %4247 = load i32, i32* %4246
  %4248 = zext i32 %4247 to i64
  store i64 %4248, i64* %RSI, align 8, !tbaa !2428
  %4249 = load i64, i64* %RSI
  %4250 = load i64, i64* %PC
  %4251 = add i64 %4250, 3
  store i64 %4251, i64* %PC
  %4252 = trunc i64 %4249 to i32
  %4253 = sub i32 %4252, 1
  %4254 = zext i32 %4253 to i64
  store i64 %4254, i64* %RSI, align 8, !tbaa !2428
  %4255 = icmp ult i32 %4252, 1
  %4256 = zext i1 %4255 to i8
  %4257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4256, i8* %4257, align 1, !tbaa !2432
  %4258 = and i32 %4253, 255
  %4259 = call i32 @llvm.ctpop.i32(i32 %4258) #16
  %4260 = trunc i32 %4259 to i8
  %4261 = and i8 %4260, 1
  %4262 = xor i8 %4261, 1
  %4263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4262, i8* %4263, align 1, !tbaa !2446
  %4264 = xor i64 1, %4249
  %4265 = trunc i64 %4264 to i32
  %4266 = xor i32 %4265, %4253
  %4267 = lshr i32 %4266, 4
  %4268 = trunc i32 %4267 to i8
  %4269 = and i8 %4268, 1
  %4270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4269, i8* %4270, align 1, !tbaa !2447
  %4271 = icmp eq i32 %4253, 0
  %4272 = zext i1 %4271 to i8
  %4273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4272, i8* %4273, align 1, !tbaa !2448
  %4274 = lshr i32 %4253, 31
  %4275 = trunc i32 %4274 to i8
  %4276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4275, i8* %4276, align 1, !tbaa !2449
  %4277 = lshr i32 %4252, 31
  %4278 = xor i32 %4274, %4277
  %4279 = add nuw nsw i32 %4278, %4277
  %4280 = icmp eq i32 %4279, 2
  %4281 = zext i1 %4280 to i8
  %4282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4281, i8* %4282, align 1, !tbaa !2450
  %4283 = load i64, i64* %RBP
  %4284 = sub i64 %4283, 40
  %4285 = load i64, i64* %PC
  %4286 = add i64 %4285, 4
  store i64 %4286, i64* %PC
  %4287 = inttoptr i64 %4284 to i64*
  %4288 = load i64, i64* %4287
  store i64 %4288, i64* %RCX, align 8, !tbaa !2428
  %4289 = load i64, i64* %RSI
  %4290 = load i64, i64* %RCX
  %4291 = add i64 %4290, 16
  %4292 = load i64, i64* %PC
  %4293 = add i64 %4292, 4
  store i64 %4293, i64* %PC
  %4294 = inttoptr i64 %4291 to i32*
  %4295 = load i32, i32* %4294
  %4296 = shl i64 %4289, 32
  %4297 = ashr exact i64 %4296, 32
  %4298 = sext i32 %4295 to i64
  %4299 = mul nsw i64 %4298, %4297
  %4300 = trunc i64 %4299 to i32
  %4301 = and i64 %4299, 4294967295
  store i64 %4301, i64* %RSI, align 8, !tbaa !2428
  %4302 = shl i64 %4299, 32
  %4303 = ashr exact i64 %4302, 32
  %4304 = icmp ne i64 %4303, %4299
  %4305 = zext i1 %4304 to i8
  %4306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4305, i8* %4306, align 1, !tbaa !2432
  %4307 = and i32 %4300, 255
  %4308 = call i32 @llvm.ctpop.i32(i32 %4307) #16
  %4309 = trunc i32 %4308 to i8
  %4310 = and i8 %4309, 1
  %4311 = xor i8 %4310, 1
  %4312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4311, i8* %4312, align 1, !tbaa !2446
  %4313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4313, align 1, !tbaa !2447
  %4314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4314, align 1, !tbaa !2448
  %4315 = lshr i32 %4300, 31
  %4316 = trunc i32 %4315 to i8
  %4317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4316, i8* %4317, align 1, !tbaa !2449
  %4318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4305, i8* %4318, align 1, !tbaa !2450
  %4319 = load i64, i64* %RBP
  %4320 = sub i64 %4319, 40
  %4321 = load i64, i64* %PC
  %4322 = add i64 %4321, 4
  store i64 %4322, i64* %PC
  %4323 = inttoptr i64 %4320 to i64*
  %4324 = load i64, i64* %4323
  store i64 %4324, i64* %RCX, align 8, !tbaa !2428
  %4325 = load i64, i64* %RSI
  %4326 = load i64, i64* %RCX
  %4327 = add i64 %4326, 20
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 4
  store i64 %4329, i64* %PC
  %4330 = inttoptr i64 %4327 to i32*
  %4331 = load i32, i32* %4330
  %4332 = shl i64 %4325, 32
  %4333 = ashr exact i64 %4332, 32
  %4334 = sext i32 %4331 to i64
  %4335 = mul nsw i64 %4334, %4333
  %4336 = trunc i64 %4335 to i32
  %4337 = and i64 %4335, 4294967295
  store i64 %4337, i64* %RSI, align 8, !tbaa !2428
  %4338 = shl i64 %4335, 32
  %4339 = ashr exact i64 %4338, 32
  %4340 = icmp ne i64 %4339, %4335
  %4341 = zext i1 %4340 to i8
  %4342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4341, i8* %4342, align 1, !tbaa !2432
  %4343 = and i32 %4336, 255
  %4344 = call i32 @llvm.ctpop.i32(i32 %4343) #16
  %4345 = trunc i32 %4344 to i8
  %4346 = and i8 %4345, 1
  %4347 = xor i8 %4346, 1
  %4348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4347, i8* %4348, align 1, !tbaa !2446
  %4349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4349, align 1, !tbaa !2447
  %4350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4350, align 1, !tbaa !2448
  %4351 = lshr i32 %4336, 31
  %4352 = trunc i32 %4351 to i8
  %4353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4352, i8* %4353, align 1, !tbaa !2449
  %4354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4341, i8* %4354, align 1, !tbaa !2450
  %4355 = load i64, i64* %RDX
  %4356 = load i32, i32* %ESI
  %4357 = zext i32 %4356 to i64
  %4358 = load i64, i64* %PC
  %4359 = add i64 %4358, 2
  store i64 %4359, i64* %PC
  %4360 = trunc i64 %4355 to i32
  %4361 = add i32 %4356, %4360
  %4362 = zext i32 %4361 to i64
  store i64 %4362, i64* %RDX, align 8, !tbaa !2428
  %4363 = icmp ult i32 %4361, %4360
  %4364 = icmp ult i32 %4361, %4356
  %4365 = or i1 %4363, %4364
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4366, i8* %4367, align 1, !tbaa !2432
  %4368 = and i32 %4361, 255
  %4369 = call i32 @llvm.ctpop.i32(i32 %4368) #16
  %4370 = trunc i32 %4369 to i8
  %4371 = and i8 %4370, 1
  %4372 = xor i8 %4371, 1
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4372, i8* %4373, align 1, !tbaa !2446
  %4374 = xor i64 %4357, %4355
  %4375 = trunc i64 %4374 to i32
  %4376 = xor i32 %4375, %4361
  %4377 = lshr i32 %4376, 4
  %4378 = trunc i32 %4377 to i8
  %4379 = and i8 %4378, 1
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4379, i8* %4380, align 1, !tbaa !2447
  %4381 = icmp eq i32 %4361, 0
  %4382 = zext i1 %4381 to i8
  %4383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4382, i8* %4383, align 1, !tbaa !2448
  %4384 = lshr i32 %4361, 31
  %4385 = trunc i32 %4384 to i8
  %4386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4385, i8* %4386, align 1, !tbaa !2449
  %4387 = lshr i32 %4360, 31
  %4388 = lshr i32 %4356, 31
  %4389 = xor i32 %4384, %4387
  %4390 = xor i32 %4384, %4388
  %4391 = add nuw nsw i32 %4389, %4390
  %4392 = icmp eq i32 %4391, 2
  %4393 = zext i1 %4392 to i8
  %4394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4393, i8* %4394, align 1, !tbaa !2450
  %4395 = load i64, i64* %RBP
  %4396 = sub i64 %4395, 56
  %4397 = load i64, i64* %PC
  %4398 = add i64 %4397, 3
  store i64 %4398, i64* %PC
  %4399 = inttoptr i64 %4396 to i32*
  %4400 = load i32, i32* %4399
  %4401 = zext i32 %4400 to i64
  store i64 %4401, i64* %RSI, align 8, !tbaa !2428
  %4402 = load i64, i64* %RSI
  %4403 = load i64, i64* %PC
  %4404 = add i64 %4403, 3
  store i64 %4404, i64* %PC
  %4405 = trunc i64 %4402 to i32
  %4406 = add i32 1, %4405
  %4407 = zext i32 %4406 to i64
  store i64 %4407, i64* %RSI, align 8, !tbaa !2428
  %4408 = icmp ult i32 %4406, %4405
  %4409 = icmp ult i32 %4406, 1
  %4410 = or i1 %4408, %4409
  %4411 = zext i1 %4410 to i8
  %4412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4411, i8* %4412, align 1, !tbaa !2432
  %4413 = and i32 %4406, 255
  %4414 = call i32 @llvm.ctpop.i32(i32 %4413) #16
  %4415 = trunc i32 %4414 to i8
  %4416 = and i8 %4415, 1
  %4417 = xor i8 %4416, 1
  %4418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4417, i8* %4418, align 1, !tbaa !2446
  %4419 = xor i64 1, %4402
  %4420 = trunc i64 %4419 to i32
  %4421 = xor i32 %4420, %4406
  %4422 = lshr i32 %4421, 4
  %4423 = trunc i32 %4422 to i8
  %4424 = and i8 %4423, 1
  %4425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4424, i8* %4425, align 1, !tbaa !2447
  %4426 = icmp eq i32 %4406, 0
  %4427 = zext i1 %4426 to i8
  %4428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4427, i8* %4428, align 1, !tbaa !2448
  %4429 = lshr i32 %4406, 31
  %4430 = trunc i32 %4429 to i8
  %4431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4430, i8* %4431, align 1, !tbaa !2449
  %4432 = lshr i32 %4405, 31
  %4433 = xor i32 %4429, %4432
  %4434 = add nuw nsw i32 %4433, %4429
  %4435 = icmp eq i32 %4434, 2
  %4436 = zext i1 %4435 to i8
  %4437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4436, i8* %4437, align 1, !tbaa !2450
  %4438 = load i64, i64* %RBP
  %4439 = sub i64 %4438, 40
  %4440 = load i64, i64* %PC
  %4441 = add i64 %4440, 4
  store i64 %4441, i64* %PC
  %4442 = inttoptr i64 %4439 to i64*
  %4443 = load i64, i64* %4442
  store i64 %4443, i64* %RCX, align 8, !tbaa !2428
  %4444 = load i64, i64* %RSI
  %4445 = load i64, i64* %RCX
  %4446 = add i64 %4445, 20
  %4447 = load i64, i64* %PC
  %4448 = add i64 %4447, 4
  store i64 %4448, i64* %PC
  %4449 = inttoptr i64 %4446 to i32*
  %4450 = load i32, i32* %4449
  %4451 = shl i64 %4444, 32
  %4452 = ashr exact i64 %4451, 32
  %4453 = sext i32 %4450 to i64
  %4454 = mul nsw i64 %4453, %4452
  %4455 = trunc i64 %4454 to i32
  %4456 = and i64 %4454, 4294967295
  store i64 %4456, i64* %RSI, align 8, !tbaa !2428
  %4457 = shl i64 %4454, 32
  %4458 = ashr exact i64 %4457, 32
  %4459 = icmp ne i64 %4458, %4454
  %4460 = zext i1 %4459 to i8
  %4461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4460, i8* %4461, align 1, !tbaa !2432
  %4462 = and i32 %4455, 255
  %4463 = call i32 @llvm.ctpop.i32(i32 %4462) #16
  %4464 = trunc i32 %4463 to i8
  %4465 = and i8 %4464, 1
  %4466 = xor i8 %4465, 1
  %4467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4466, i8* %4467, align 1, !tbaa !2446
  %4468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4468, align 1, !tbaa !2447
  %4469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4469, align 1, !tbaa !2448
  %4470 = lshr i32 %4455, 31
  %4471 = trunc i32 %4470 to i8
  %4472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4471, i8* %4472, align 1, !tbaa !2449
  %4473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4460, i8* %4473, align 1, !tbaa !2450
  %4474 = load i64, i64* %RDX
  %4475 = load i32, i32* %ESI
  %4476 = zext i32 %4475 to i64
  %4477 = load i64, i64* %PC
  %4478 = add i64 %4477, 2
  store i64 %4478, i64* %PC
  %4479 = trunc i64 %4474 to i32
  %4480 = add i32 %4475, %4479
  %4481 = zext i32 %4480 to i64
  store i64 %4481, i64* %RDX, align 8, !tbaa !2428
  %4482 = icmp ult i32 %4480, %4479
  %4483 = icmp ult i32 %4480, %4475
  %4484 = or i1 %4482, %4483
  %4485 = zext i1 %4484 to i8
  %4486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4485, i8* %4486, align 1, !tbaa !2432
  %4487 = and i32 %4480, 255
  %4488 = call i32 @llvm.ctpop.i32(i32 %4487) #16
  %4489 = trunc i32 %4488 to i8
  %4490 = and i8 %4489, 1
  %4491 = xor i8 %4490, 1
  %4492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4491, i8* %4492, align 1, !tbaa !2446
  %4493 = xor i64 %4476, %4474
  %4494 = trunc i64 %4493 to i32
  %4495 = xor i32 %4494, %4480
  %4496 = lshr i32 %4495, 4
  %4497 = trunc i32 %4496 to i8
  %4498 = and i8 %4497, 1
  %4499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4498, i8* %4499, align 1, !tbaa !2447
  %4500 = icmp eq i32 %4480, 0
  %4501 = zext i1 %4500 to i8
  %4502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4501, i8* %4502, align 1, !tbaa !2448
  %4503 = lshr i32 %4480, 31
  %4504 = trunc i32 %4503 to i8
  %4505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4504, i8* %4505, align 1, !tbaa !2449
  %4506 = lshr i32 %4479, 31
  %4507 = lshr i32 %4475, 31
  %4508 = xor i32 %4503, %4506
  %4509 = xor i32 %4503, %4507
  %4510 = add nuw nsw i32 %4508, %4509
  %4511 = icmp eq i32 %4510, 2
  %4512 = zext i1 %4511 to i8
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4512, i8* %4513, align 1, !tbaa !2450
  %4514 = load i64, i64* %RDX
  %4515 = load i64, i64* %RBP
  %4516 = sub i64 %4515, 60
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 3
  store i64 %4518, i64* %PC
  %4519 = trunc i64 %4514 to i32
  %4520 = inttoptr i64 %4516 to i32*
  %4521 = load i32, i32* %4520
  %4522 = add i32 %4521, %4519
  %4523 = zext i32 %4522 to i64
  store i64 %4523, i64* %RDX, align 8, !tbaa !2428
  %4524 = icmp ult i32 %4522, %4519
  %4525 = icmp ult i32 %4522, %4521
  %4526 = or i1 %4524, %4525
  %4527 = zext i1 %4526 to i8
  %4528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4527, i8* %4528, align 1, !tbaa !2432
  %4529 = and i32 %4522, 255
  %4530 = call i32 @llvm.ctpop.i32(i32 %4529) #16
  %4531 = trunc i32 %4530 to i8
  %4532 = and i8 %4531, 1
  %4533 = xor i8 %4532, 1
  %4534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4533, i8* %4534, align 1, !tbaa !2446
  %4535 = xor i32 %4521, %4519
  %4536 = xor i32 %4535, %4522
  %4537 = lshr i32 %4536, 4
  %4538 = trunc i32 %4537 to i8
  %4539 = and i8 %4538, 1
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4539, i8* %4540, align 1, !tbaa !2447
  %4541 = icmp eq i32 %4522, 0
  %4542 = zext i1 %4541 to i8
  %4543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4542, i8* %4543, align 1, !tbaa !2448
  %4544 = lshr i32 %4522, 31
  %4545 = trunc i32 %4544 to i8
  %4546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4545, i8* %4546, align 1, !tbaa !2449
  %4547 = lshr i32 %4519, 31
  %4548 = lshr i32 %4521, 31
  %4549 = xor i32 %4544, %4547
  %4550 = xor i32 %4544, %4548
  %4551 = add nuw nsw i32 %4549, %4550
  %4552 = icmp eq i32 %4551, 2
  %4553 = zext i1 %4552 to i8
  %4554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4553, i8* %4554, align 1, !tbaa !2450
  %4555 = load i32, i32* %EDX
  %4556 = zext i32 %4555 to i64
  %4557 = load i64, i64* %PC
  %4558 = add i64 %4557, 3
  store i64 %4558, i64* %PC
  %4559 = shl i64 %4556, 32
  %4560 = ashr exact i64 %4559, 32
  store i64 %4560, i64* %RCX, align 8, !tbaa !2428
  %4561 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4562 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4563 = load i64, i64* %RAX
  %4564 = load i64, i64* %RCX
  %4565 = mul i64 %4564, 4
  %4566 = add i64 %4565, %4563
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 5
  store i64 %4568, i64* %PC
  %4569 = bitcast i8* %4562 to <2 x float>*
  %4570 = load <2 x float>, <2 x float>* %4569, align 1
  %4571 = getelementptr inbounds i8, i8* %4562, i64 8
  %4572 = bitcast i8* %4571 to <2 x i32>*
  %4573 = load <2 x i32>, <2 x i32>* %4572, align 1
  %4574 = inttoptr i64 %4566 to float*
  %4575 = load float, float* %4574
  %4576 = extractelement <2 x float> %4570, i32 0
  %4577 = fsub float %4576, %4575
  %4578 = bitcast i8* %4561 to float*
  store float %4577, float* %4578, align 1, !tbaa !2452
  %4579 = bitcast <2 x float> %4570 to <2 x i32>
  %4580 = extractelement <2 x i32> %4579, i32 1
  %4581 = getelementptr inbounds i8, i8* %4561, i64 4
  %4582 = bitcast i8* %4581 to i32*
  store i32 %4580, i32* %4582, align 1, !tbaa !2452
  %4583 = extractelement <2 x i32> %4573, i32 0
  %4584 = getelementptr inbounds i8, i8* %4561, i64 8
  %4585 = bitcast i8* %4584 to i32*
  store i32 %4583, i32* %4585, align 1, !tbaa !2452
  %4586 = extractelement <2 x i32> %4573, i32 1
  %4587 = getelementptr inbounds i8, i8* %4561, i64 12
  %4588 = bitcast i8* %4587 to i32*
  store i32 %4586, i32* %4588, align 1, !tbaa !2452
  %4589 = load i64, i64* %RBP
  %4590 = sub i64 %4589, 40
  %4591 = load i64, i64* %PC
  %4592 = add i64 %4591, 4
  store i64 %4592, i64* %PC
  %4593 = inttoptr i64 %4590 to i64*
  %4594 = load i64, i64* %4593
  store i64 %4594, i64* %RAX, align 8, !tbaa !2428
  %4595 = load i64, i64* %RAX
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 3
  store i64 %4597, i64* %PC
  %4598 = inttoptr i64 %4595 to i64*
  %4599 = load i64, i64* %4598
  store i64 %4599, i64* %RAX, align 8, !tbaa !2428
  %4600 = load i64, i64* %RBP
  %4601 = sub i64 %4600, 40
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 4
  store i64 %4603, i64* %PC
  %4604 = inttoptr i64 %4601 to i64*
  %4605 = load i64, i64* %4604
  store i64 %4605, i64* %RCX, align 8, !tbaa !2428
  %4606 = load i64, i64* %RCX
  %4607 = add i64 %4606, 12
  %4608 = load i64, i64* %PC
  %4609 = add i64 %4608, 4
  store i64 %4609, i64* %PC
  %4610 = inttoptr i64 %4607 to i32*
  %4611 = load i32, i32* %4610
  %4612 = sext i32 %4611 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4613, align 1, !tbaa !2432
  %4614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4614, align 1, !tbaa !2446
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4615, align 1, !tbaa !2447
  %4616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4616, align 1, !tbaa !2448
  %4617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4617, align 1, !tbaa !2449
  %4618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4618, align 1, !tbaa !2450
  %4619 = load i64, i64* %RBP
  %4620 = sub i64 %4619, 40
  %4621 = load i64, i64* %PC
  %4622 = add i64 %4621, 4
  store i64 %4622, i64* %PC
  %4623 = inttoptr i64 %4620 to i64*
  %4624 = load i64, i64* %4623
  store i64 %4624, i64* %RCX, align 8, !tbaa !2428
  %4625 = load i64, i64* %RDX
  %4626 = load i64, i64* %RCX
  %4627 = add i64 %4626, 16
  %4628 = load i64, i64* %PC
  %4629 = add i64 %4628, 4
  store i64 %4629, i64* %PC
  %4630 = inttoptr i64 %4627 to i32*
  %4631 = load i32, i32* %4630
  %4632 = shl i64 %4625, 32
  %4633 = ashr exact i64 %4632, 32
  %4634 = sext i32 %4631 to i64
  %4635 = mul nsw i64 %4634, %4633
  %4636 = trunc i64 %4635 to i32
  %4637 = and i64 %4635, 4294967295
  store i64 %4637, i64* %RDX, align 8, !tbaa !2428
  %4638 = shl i64 %4635, 32
  %4639 = ashr exact i64 %4638, 32
  %4640 = icmp ne i64 %4639, %4635
  %4641 = zext i1 %4640 to i8
  %4642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4641, i8* %4642, align 1, !tbaa !2432
  %4643 = and i32 %4636, 255
  %4644 = call i32 @llvm.ctpop.i32(i32 %4643) #16
  %4645 = trunc i32 %4644 to i8
  %4646 = and i8 %4645, 1
  %4647 = xor i8 %4646, 1
  %4648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4647, i8* %4648, align 1, !tbaa !2446
  %4649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4649, align 1, !tbaa !2447
  %4650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4650, align 1, !tbaa !2448
  %4651 = lshr i32 %4636, 31
  %4652 = trunc i32 %4651 to i8
  %4653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4652, i8* %4653, align 1, !tbaa !2449
  %4654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4641, i8* %4654, align 1, !tbaa !2450
  %4655 = load i64, i64* %RBP
  %4656 = sub i64 %4655, 40
  %4657 = load i64, i64* %PC
  %4658 = add i64 %4657, 4
  store i64 %4658, i64* %PC
  %4659 = inttoptr i64 %4656 to i64*
  %4660 = load i64, i64* %4659
  store i64 %4660, i64* %RCX, align 8, !tbaa !2428
  %4661 = load i64, i64* %RDX
  %4662 = load i64, i64* %RCX
  %4663 = add i64 %4662, 20
  %4664 = load i64, i64* %PC
  %4665 = add i64 %4664, 4
  store i64 %4665, i64* %PC
  %4666 = inttoptr i64 %4663 to i32*
  %4667 = load i32, i32* %4666
  %4668 = shl i64 %4661, 32
  %4669 = ashr exact i64 %4668, 32
  %4670 = sext i32 %4667 to i64
  %4671 = mul nsw i64 %4670, %4669
  %4672 = trunc i64 %4671 to i32
  %4673 = and i64 %4671, 4294967295
  store i64 %4673, i64* %RDX, align 8, !tbaa !2428
  %4674 = shl i64 %4671, 32
  %4675 = ashr exact i64 %4674, 32
  %4676 = icmp ne i64 %4675, %4671
  %4677 = zext i1 %4676 to i8
  %4678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4677, i8* %4678, align 1, !tbaa !2432
  %4679 = and i32 %4672, 255
  %4680 = call i32 @llvm.ctpop.i32(i32 %4679) #16
  %4681 = trunc i32 %4680 to i8
  %4682 = and i8 %4681, 1
  %4683 = xor i8 %4682, 1
  %4684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4683, i8* %4684, align 1, !tbaa !2446
  %4685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4685, align 1, !tbaa !2447
  %4686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4686, align 1, !tbaa !2448
  %4687 = lshr i32 %4672, 31
  %4688 = trunc i32 %4687 to i8
  %4689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4688, i8* %4689, align 1, !tbaa !2449
  %4690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4677, i8* %4690, align 1, !tbaa !2450
  %4691 = load i64, i64* %RBP
  %4692 = sub i64 %4691, 52
  %4693 = load i64, i64* %PC
  %4694 = add i64 %4693, 3
  store i64 %4694, i64* %PC
  %4695 = inttoptr i64 %4692 to i32*
  %4696 = load i32, i32* %4695
  %4697 = zext i32 %4696 to i64
  store i64 %4697, i64* %RSI, align 8, !tbaa !2428
  %4698 = load i64, i64* %RSI
  %4699 = load i64, i64* %PC
  %4700 = add i64 %4699, 3
  store i64 %4700, i64* %PC
  %4701 = trunc i64 %4698 to i32
  %4702 = sub i32 %4701, 1
  %4703 = zext i32 %4702 to i64
  store i64 %4703, i64* %RSI, align 8, !tbaa !2428
  %4704 = icmp ult i32 %4701, 1
  %4705 = zext i1 %4704 to i8
  %4706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4705, i8* %4706, align 1, !tbaa !2432
  %4707 = and i32 %4702, 255
  %4708 = call i32 @llvm.ctpop.i32(i32 %4707) #16
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  %4711 = xor i8 %4710, 1
  %4712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4711, i8* %4712, align 1, !tbaa !2446
  %4713 = xor i64 1, %4698
  %4714 = trunc i64 %4713 to i32
  %4715 = xor i32 %4714, %4702
  %4716 = lshr i32 %4715, 4
  %4717 = trunc i32 %4716 to i8
  %4718 = and i8 %4717, 1
  %4719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4718, i8* %4719, align 1, !tbaa !2447
  %4720 = icmp eq i32 %4702, 0
  %4721 = zext i1 %4720 to i8
  %4722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4721, i8* %4722, align 1, !tbaa !2448
  %4723 = lshr i32 %4702, 31
  %4724 = trunc i32 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4724, i8* %4725, align 1, !tbaa !2449
  %4726 = lshr i32 %4701, 31
  %4727 = xor i32 %4723, %4726
  %4728 = add nuw nsw i32 %4727, %4726
  %4729 = icmp eq i32 %4728, 2
  %4730 = zext i1 %4729 to i8
  %4731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4730, i8* %4731, align 1, !tbaa !2450
  %4732 = load i64, i64* %RBP
  %4733 = sub i64 %4732, 40
  %4734 = load i64, i64* %PC
  %4735 = add i64 %4734, 4
  store i64 %4735, i64* %PC
  %4736 = inttoptr i64 %4733 to i64*
  %4737 = load i64, i64* %4736
  store i64 %4737, i64* %RCX, align 8, !tbaa !2428
  %4738 = load i64, i64* %RSI
  %4739 = load i64, i64* %RCX
  %4740 = add i64 %4739, 16
  %4741 = load i64, i64* %PC
  %4742 = add i64 %4741, 4
  store i64 %4742, i64* %PC
  %4743 = inttoptr i64 %4740 to i32*
  %4744 = load i32, i32* %4743
  %4745 = shl i64 %4738, 32
  %4746 = ashr exact i64 %4745, 32
  %4747 = sext i32 %4744 to i64
  %4748 = mul nsw i64 %4747, %4746
  %4749 = trunc i64 %4748 to i32
  %4750 = and i64 %4748, 4294967295
  store i64 %4750, i64* %RSI, align 8, !tbaa !2428
  %4751 = shl i64 %4748, 32
  %4752 = ashr exact i64 %4751, 32
  %4753 = icmp ne i64 %4752, %4748
  %4754 = zext i1 %4753 to i8
  %4755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4754, i8* %4755, align 1, !tbaa !2432
  %4756 = and i32 %4749, 255
  %4757 = call i32 @llvm.ctpop.i32(i32 %4756) #16
  %4758 = trunc i32 %4757 to i8
  %4759 = and i8 %4758, 1
  %4760 = xor i8 %4759, 1
  %4761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4760, i8* %4761, align 1, !tbaa !2446
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4762, align 1, !tbaa !2447
  %4763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4763, align 1, !tbaa !2448
  %4764 = lshr i32 %4749, 31
  %4765 = trunc i32 %4764 to i8
  %4766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4765, i8* %4766, align 1, !tbaa !2449
  %4767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4754, i8* %4767, align 1, !tbaa !2450
  %4768 = load i64, i64* %RBP
  %4769 = sub i64 %4768, 40
  %4770 = load i64, i64* %PC
  %4771 = add i64 %4770, 4
  store i64 %4771, i64* %PC
  %4772 = inttoptr i64 %4769 to i64*
  %4773 = load i64, i64* %4772
  store i64 %4773, i64* %RCX, align 8, !tbaa !2428
  %4774 = load i64, i64* %RSI
  %4775 = load i64, i64* %RCX
  %4776 = add i64 %4775, 20
  %4777 = load i64, i64* %PC
  %4778 = add i64 %4777, 4
  store i64 %4778, i64* %PC
  %4779 = inttoptr i64 %4776 to i32*
  %4780 = load i32, i32* %4779
  %4781 = shl i64 %4774, 32
  %4782 = ashr exact i64 %4781, 32
  %4783 = sext i32 %4780 to i64
  %4784 = mul nsw i64 %4783, %4782
  %4785 = trunc i64 %4784 to i32
  %4786 = and i64 %4784, 4294967295
  store i64 %4786, i64* %RSI, align 8, !tbaa !2428
  %4787 = shl i64 %4784, 32
  %4788 = ashr exact i64 %4787, 32
  %4789 = icmp ne i64 %4788, %4784
  %4790 = zext i1 %4789 to i8
  %4791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4790, i8* %4791, align 1, !tbaa !2432
  %4792 = and i32 %4785, 255
  %4793 = call i32 @llvm.ctpop.i32(i32 %4792) #16
  %4794 = trunc i32 %4793 to i8
  %4795 = and i8 %4794, 1
  %4796 = xor i8 %4795, 1
  %4797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4796, i8* %4797, align 1, !tbaa !2446
  %4798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4798, align 1, !tbaa !2447
  %4799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4799, align 1, !tbaa !2448
  %4800 = lshr i32 %4785, 31
  %4801 = trunc i32 %4800 to i8
  %4802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4801, i8* %4802, align 1, !tbaa !2449
  %4803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4790, i8* %4803, align 1, !tbaa !2450
  %4804 = load i64, i64* %RDX
  %4805 = load i32, i32* %ESI
  %4806 = zext i32 %4805 to i64
  %4807 = load i64, i64* %PC
  %4808 = add i64 %4807, 2
  store i64 %4808, i64* %PC
  %4809 = trunc i64 %4804 to i32
  %4810 = add i32 %4805, %4809
  %4811 = zext i32 %4810 to i64
  store i64 %4811, i64* %RDX, align 8, !tbaa !2428
  %4812 = icmp ult i32 %4810, %4809
  %4813 = icmp ult i32 %4810, %4805
  %4814 = or i1 %4812, %4813
  %4815 = zext i1 %4814 to i8
  %4816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4815, i8* %4816, align 1, !tbaa !2432
  %4817 = and i32 %4810, 255
  %4818 = call i32 @llvm.ctpop.i32(i32 %4817) #16
  %4819 = trunc i32 %4818 to i8
  %4820 = and i8 %4819, 1
  %4821 = xor i8 %4820, 1
  %4822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4821, i8* %4822, align 1, !tbaa !2446
  %4823 = xor i64 %4806, %4804
  %4824 = trunc i64 %4823 to i32
  %4825 = xor i32 %4824, %4810
  %4826 = lshr i32 %4825, 4
  %4827 = trunc i32 %4826 to i8
  %4828 = and i8 %4827, 1
  %4829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4828, i8* %4829, align 1, !tbaa !2447
  %4830 = icmp eq i32 %4810, 0
  %4831 = zext i1 %4830 to i8
  %4832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4831, i8* %4832, align 1, !tbaa !2448
  %4833 = lshr i32 %4810, 31
  %4834 = trunc i32 %4833 to i8
  %4835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4834, i8* %4835, align 1, !tbaa !2449
  %4836 = lshr i32 %4809, 31
  %4837 = lshr i32 %4805, 31
  %4838 = xor i32 %4833, %4836
  %4839 = xor i32 %4833, %4837
  %4840 = add nuw nsw i32 %4838, %4839
  %4841 = icmp eq i32 %4840, 2
  %4842 = zext i1 %4841 to i8
  %4843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4842, i8* %4843, align 1, !tbaa !2450
  %4844 = load i64, i64* %RBP
  %4845 = sub i64 %4844, 56
  %4846 = load i64, i64* %PC
  %4847 = add i64 %4846, 3
  store i64 %4847, i64* %PC
  %4848 = inttoptr i64 %4845 to i32*
  %4849 = load i32, i32* %4848
  %4850 = zext i32 %4849 to i64
  store i64 %4850, i64* %RSI, align 8, !tbaa !2428
  %4851 = load i64, i64* %RSI
  %4852 = load i64, i64* %PC
  %4853 = add i64 %4852, 3
  store i64 %4853, i64* %PC
  %4854 = trunc i64 %4851 to i32
  %4855 = sub i32 %4854, 1
  %4856 = zext i32 %4855 to i64
  store i64 %4856, i64* %RSI, align 8, !tbaa !2428
  %4857 = icmp ult i32 %4854, 1
  %4858 = zext i1 %4857 to i8
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4858, i8* %4859, align 1, !tbaa !2432
  %4860 = and i32 %4855, 255
  %4861 = call i32 @llvm.ctpop.i32(i32 %4860) #16
  %4862 = trunc i32 %4861 to i8
  %4863 = and i8 %4862, 1
  %4864 = xor i8 %4863, 1
  %4865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4864, i8* %4865, align 1, !tbaa !2446
  %4866 = xor i64 1, %4851
  %4867 = trunc i64 %4866 to i32
  %4868 = xor i32 %4867, %4855
  %4869 = lshr i32 %4868, 4
  %4870 = trunc i32 %4869 to i8
  %4871 = and i8 %4870, 1
  %4872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4871, i8* %4872, align 1, !tbaa !2447
  %4873 = icmp eq i32 %4855, 0
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4874, i8* %4875, align 1, !tbaa !2448
  %4876 = lshr i32 %4855, 31
  %4877 = trunc i32 %4876 to i8
  %4878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4877, i8* %4878, align 1, !tbaa !2449
  %4879 = lshr i32 %4854, 31
  %4880 = xor i32 %4876, %4879
  %4881 = add nuw nsw i32 %4880, %4879
  %4882 = icmp eq i32 %4881, 2
  %4883 = zext i1 %4882 to i8
  %4884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4883, i8* %4884, align 1, !tbaa !2450
  %4885 = load i64, i64* %RBP
  %4886 = sub i64 %4885, 40
  %4887 = load i64, i64* %PC
  %4888 = add i64 %4887, 4
  store i64 %4888, i64* %PC
  %4889 = inttoptr i64 %4886 to i64*
  %4890 = load i64, i64* %4889
  store i64 %4890, i64* %RCX, align 8, !tbaa !2428
  %4891 = load i64, i64* %RSI
  %4892 = load i64, i64* %RCX
  %4893 = add i64 %4892, 20
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 4
  store i64 %4895, i64* %PC
  %4896 = inttoptr i64 %4893 to i32*
  %4897 = load i32, i32* %4896
  %4898 = shl i64 %4891, 32
  %4899 = ashr exact i64 %4898, 32
  %4900 = sext i32 %4897 to i64
  %4901 = mul nsw i64 %4900, %4899
  %4902 = trunc i64 %4901 to i32
  %4903 = and i64 %4901, 4294967295
  store i64 %4903, i64* %RSI, align 8, !tbaa !2428
  %4904 = shl i64 %4901, 32
  %4905 = ashr exact i64 %4904, 32
  %4906 = icmp ne i64 %4905, %4901
  %4907 = zext i1 %4906 to i8
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4907, i8* %4908, align 1, !tbaa !2432
  %4909 = and i32 %4902, 255
  %4910 = call i32 @llvm.ctpop.i32(i32 %4909) #16
  %4911 = trunc i32 %4910 to i8
  %4912 = and i8 %4911, 1
  %4913 = xor i8 %4912, 1
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4913, i8* %4914, align 1, !tbaa !2446
  %4915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4915, align 1, !tbaa !2447
  %4916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4916, align 1, !tbaa !2448
  %4917 = lshr i32 %4902, 31
  %4918 = trunc i32 %4917 to i8
  %4919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4918, i8* %4919, align 1, !tbaa !2449
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4907, i8* %4920, align 1, !tbaa !2450
  %4921 = load i64, i64* %RDX
  %4922 = load i32, i32* %ESI
  %4923 = zext i32 %4922 to i64
  %4924 = load i64, i64* %PC
  %4925 = add i64 %4924, 2
  store i64 %4925, i64* %PC
  %4926 = trunc i64 %4921 to i32
  %4927 = add i32 %4922, %4926
  %4928 = zext i32 %4927 to i64
  store i64 %4928, i64* %RDX, align 8, !tbaa !2428
  %4929 = icmp ult i32 %4927, %4926
  %4930 = icmp ult i32 %4927, %4922
  %4931 = or i1 %4929, %4930
  %4932 = zext i1 %4931 to i8
  %4933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4932, i8* %4933, align 1, !tbaa !2432
  %4934 = and i32 %4927, 255
  %4935 = call i32 @llvm.ctpop.i32(i32 %4934) #16
  %4936 = trunc i32 %4935 to i8
  %4937 = and i8 %4936, 1
  %4938 = xor i8 %4937, 1
  %4939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4938, i8* %4939, align 1, !tbaa !2446
  %4940 = xor i64 %4923, %4921
  %4941 = trunc i64 %4940 to i32
  %4942 = xor i32 %4941, %4927
  %4943 = lshr i32 %4942, 4
  %4944 = trunc i32 %4943 to i8
  %4945 = and i8 %4944, 1
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4945, i8* %4946, align 1, !tbaa !2447
  %4947 = icmp eq i32 %4927, 0
  %4948 = zext i1 %4947 to i8
  %4949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4948, i8* %4949, align 1, !tbaa !2448
  %4950 = lshr i32 %4927, 31
  %4951 = trunc i32 %4950 to i8
  %4952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4951, i8* %4952, align 1, !tbaa !2449
  %4953 = lshr i32 %4926, 31
  %4954 = lshr i32 %4922, 31
  %4955 = xor i32 %4950, %4953
  %4956 = xor i32 %4950, %4954
  %4957 = add nuw nsw i32 %4955, %4956
  %4958 = icmp eq i32 %4957, 2
  %4959 = zext i1 %4958 to i8
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4959, i8* %4960, align 1, !tbaa !2450
  %4961 = load i64, i64* %RDX
  %4962 = load i64, i64* %RBP
  %4963 = sub i64 %4962, 60
  %4964 = load i64, i64* %PC
  %4965 = add i64 %4964, 3
  store i64 %4965, i64* %PC
  %4966 = trunc i64 %4961 to i32
  %4967 = inttoptr i64 %4963 to i32*
  %4968 = load i32, i32* %4967
  %4969 = add i32 %4968, %4966
  %4970 = zext i32 %4969 to i64
  store i64 %4970, i64* %RDX, align 8, !tbaa !2428
  %4971 = icmp ult i32 %4969, %4966
  %4972 = icmp ult i32 %4969, %4968
  %4973 = or i1 %4971, %4972
  %4974 = zext i1 %4973 to i8
  %4975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4974, i8* %4975, align 1, !tbaa !2432
  %4976 = and i32 %4969, 255
  %4977 = call i32 @llvm.ctpop.i32(i32 %4976) #16
  %4978 = trunc i32 %4977 to i8
  %4979 = and i8 %4978, 1
  %4980 = xor i8 %4979, 1
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4980, i8* %4981, align 1, !tbaa !2446
  %4982 = xor i32 %4968, %4966
  %4983 = xor i32 %4982, %4969
  %4984 = lshr i32 %4983, 4
  %4985 = trunc i32 %4984 to i8
  %4986 = and i8 %4985, 1
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4986, i8* %4987, align 1, !tbaa !2447
  %4988 = icmp eq i32 %4969, 0
  %4989 = zext i1 %4988 to i8
  %4990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4989, i8* %4990, align 1, !tbaa !2448
  %4991 = lshr i32 %4969, 31
  %4992 = trunc i32 %4991 to i8
  %4993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4992, i8* %4993, align 1, !tbaa !2449
  %4994 = lshr i32 %4966, 31
  %4995 = lshr i32 %4968, 31
  %4996 = xor i32 %4991, %4994
  %4997 = xor i32 %4991, %4995
  %4998 = add nuw nsw i32 %4996, %4997
  %4999 = icmp eq i32 %4998, 2
  %5000 = zext i1 %4999 to i8
  %5001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5000, i8* %5001, align 1, !tbaa !2450
  %5002 = load i32, i32* %EDX
  %5003 = zext i32 %5002 to i64
  %5004 = load i64, i64* %PC
  %5005 = add i64 %5004, 3
  store i64 %5005, i64* %PC
  %5006 = shl i64 %5003, 32
  %5007 = ashr exact i64 %5006, 32
  store i64 %5007, i64* %RCX, align 8, !tbaa !2428
  %5008 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5009 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5010 = load i64, i64* %RAX
  %5011 = load i64, i64* %RCX
  %5012 = mul i64 %5011, 4
  %5013 = add i64 %5012, %5010
  %5014 = load i64, i64* %PC
  %5015 = add i64 %5014, 5
  store i64 %5015, i64* %PC
  %5016 = bitcast i8* %5009 to <2 x float>*
  %5017 = load <2 x float>, <2 x float>* %5016, align 1
  %5018 = getelementptr inbounds i8, i8* %5009, i64 8
  %5019 = bitcast i8* %5018 to <2 x i32>*
  %5020 = load <2 x i32>, <2 x i32>* %5019, align 1
  %5021 = inttoptr i64 %5013 to float*
  %5022 = load float, float* %5021
  %5023 = extractelement <2 x float> %5017, i32 0
  %5024 = fadd float %5023, %5022
  %5025 = bitcast i8* %5008 to float*
  store float %5024, float* %5025, align 1, !tbaa !2452
  %5026 = bitcast <2 x float> %5017 to <2 x i32>
  %5027 = extractelement <2 x i32> %5026, i32 1
  %5028 = getelementptr inbounds i8, i8* %5008, i64 4
  %5029 = bitcast i8* %5028 to i32*
  store i32 %5027, i32* %5029, align 1, !tbaa !2452
  %5030 = extractelement <2 x i32> %5020, i32 0
  %5031 = getelementptr inbounds i8, i8* %5008, i64 8
  %5032 = bitcast i8* %5031 to i32*
  store i32 %5030, i32* %5032, align 1, !tbaa !2452
  %5033 = extractelement <2 x i32> %5020, i32 1
  %5034 = getelementptr inbounds i8, i8* %5008, i64 12
  %5035 = bitcast i8* %5034 to i32*
  store i32 %5033, i32* %5035, align 1, !tbaa !2452
  %5036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5037 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5038 = bitcast %union.vec128_t* %XMM2 to i8*
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 4
  store i64 %5040, i64* %PC
  %5041 = bitcast i8* %5037 to <2 x float>*
  %5042 = load <2 x float>, <2 x float>* %5041, align 1
  %5043 = getelementptr inbounds i8, i8* %5037, i64 8
  %5044 = bitcast i8* %5043 to <2 x i32>*
  %5045 = load <2 x i32>, <2 x i32>* %5044, align 1
  %5046 = bitcast i8* %5038 to <2 x float>*
  %5047 = load <2 x float>, <2 x float>* %5046, align 1
  %5048 = extractelement <2 x float> %5042, i32 0
  %5049 = extractelement <2 x float> %5047, i32 0
  %5050 = fmul float %5048, %5049
  %5051 = bitcast i8* %5036 to float*
  store float %5050, float* %5051, align 1, !tbaa !2452
  %5052 = bitcast <2 x float> %5042 to <2 x i32>
  %5053 = extractelement <2 x i32> %5052, i32 1
  %5054 = getelementptr inbounds i8, i8* %5036, i64 4
  %5055 = bitcast i8* %5054 to i32*
  store i32 %5053, i32* %5055, align 1, !tbaa !2452
  %5056 = extractelement <2 x i32> %5045, i32 0
  %5057 = getelementptr inbounds i8, i8* %5036, i64 8
  %5058 = bitcast i8* %5057 to i32*
  store i32 %5056, i32* %5058, align 1, !tbaa !2452
  %5059 = extractelement <2 x i32> %5045, i32 1
  %5060 = getelementptr inbounds i8, i8* %5036, i64 12
  %5061 = bitcast i8* %5060 to i32*
  store i32 %5059, i32* %5061, align 1, !tbaa !2452
  %5062 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5063 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5064 = bitcast %union.vec128_t* %XMM1 to i8*
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 4
  store i64 %5066, i64* %PC
  %5067 = bitcast i8* %5063 to <2 x float>*
  %5068 = load <2 x float>, <2 x float>* %5067, align 1
  %5069 = getelementptr inbounds i8, i8* %5063, i64 8
  %5070 = bitcast i8* %5069 to <2 x i32>*
  %5071 = load <2 x i32>, <2 x i32>* %5070, align 1
  %5072 = bitcast i8* %5064 to <2 x float>*
  %5073 = load <2 x float>, <2 x float>* %5072, align 1
  %5074 = extractelement <2 x float> %5068, i32 0
  %5075 = extractelement <2 x float> %5073, i32 0
  %5076 = fadd float %5074, %5075
  %5077 = bitcast i8* %5062 to float*
  store float %5076, float* %5077, align 1, !tbaa !2452
  %5078 = bitcast <2 x float> %5068 to <2 x i32>
  %5079 = extractelement <2 x i32> %5078, i32 1
  %5080 = getelementptr inbounds i8, i8* %5062, i64 4
  %5081 = bitcast i8* %5080 to i32*
  store i32 %5079, i32* %5081, align 1, !tbaa !2452
  %5082 = extractelement <2 x i32> %5071, i32 0
  %5083 = getelementptr inbounds i8, i8* %5062, i64 8
  %5084 = bitcast i8* %5083 to i32*
  store i32 %5082, i32* %5084, align 1, !tbaa !2452
  %5085 = extractelement <2 x i32> %5071, i32 1
  %5086 = getelementptr inbounds i8, i8* %5062, i64 12
  %5087 = bitcast i8* %5086 to i32*
  store i32 %5085, i32* %5087, align 1, !tbaa !2452
  %5088 = load i64, i64* %RBP
  %5089 = sub i64 %5088, 24
  %5090 = load i64, i64* %PC
  %5091 = add i64 %5090, 4
  store i64 %5091, i64* %PC
  %5092 = inttoptr i64 %5089 to i64*
  %5093 = load i64, i64* %5092
  store i64 %5093, i64* %RAX, align 8, !tbaa !2428
  %5094 = load i64, i64* %RAX
  %5095 = load i64, i64* %PC
  %5096 = add i64 %5095, 3
  store i64 %5096, i64* %PC
  %5097 = inttoptr i64 %5094 to i64*
  %5098 = load i64, i64* %5097
  store i64 %5098, i64* %RAX, align 8, !tbaa !2428
  %5099 = load i64, i64* %RBP
  %5100 = sub i64 %5099, 24
  %5101 = load i64, i64* %PC
  %5102 = add i64 %5101, 4
  store i64 %5102, i64* %PC
  %5103 = inttoptr i64 %5100 to i64*
  %5104 = load i64, i64* %5103
  store i64 %5104, i64* %RCX, align 8, !tbaa !2428
  %5105 = load i64, i64* %RCX
  %5106 = add i64 %5105, 12
  %5107 = load i64, i64* %PC
  %5108 = add i64 %5107, 3
  store i64 %5108, i64* %PC
  %5109 = inttoptr i64 %5106 to i32*
  %5110 = load i32, i32* %5109
  %5111 = zext i32 %5110 to i64
  store i64 %5111, i64* %RDX, align 8, !tbaa !2428
  %5112 = load i64, i64* %RDX
  %5113 = load i64, i64* %PC
  %5114 = add i64 %5113, 3
  store i64 %5114, i64* %PC
  %5115 = load i64, i64* %RBP
  %5116 = sub i64 %5115, 24
  %5117 = load i64, i64* %PC
  %5118 = add i64 %5117, 4
  store i64 %5118, i64* %PC
  %5119 = inttoptr i64 %5116 to i64*
  %5120 = load i64, i64* %5119
  store i64 %5120, i64* %RCX, align 8, !tbaa !2428
  %5121 = load i64, i64* %RDX
  %5122 = load i64, i64* %RCX
  %5123 = add i64 %5122, 16
  %5124 = load i64, i64* %PC
  %5125 = add i64 %5124, 4
  store i64 %5125, i64* %PC
  %5126 = inttoptr i64 %5123 to i32*
  %5127 = load i32, i32* %5126
  %5128 = shl i64 %5121, 32
  %5129 = ashr exact i64 %5128, 32
  %5130 = sext i32 %5127 to i64
  %5131 = mul nsw i64 %5130, %5129
  %5132 = trunc i64 %5131 to i32
  %5133 = and i64 %5131, 4294967295
  store i64 %5133, i64* %RDX, align 8, !tbaa !2428
  %5134 = shl i64 %5131, 32
  %5135 = ashr exact i64 %5134, 32
  %5136 = icmp ne i64 %5135, %5131
  %5137 = zext i1 %5136 to i8
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5137, i8* %5138, align 1, !tbaa !2432
  %5139 = and i32 %5132, 255
  %5140 = call i32 @llvm.ctpop.i32(i32 %5139) #16
  %5141 = trunc i32 %5140 to i8
  %5142 = and i8 %5141, 1
  %5143 = xor i8 %5142, 1
  %5144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5143, i8* %5144, align 1, !tbaa !2446
  %5145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5145, align 1, !tbaa !2447
  %5146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5146, align 1, !tbaa !2448
  %5147 = lshr i32 %5132, 31
  %5148 = trunc i32 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5148, i8* %5149, align 1, !tbaa !2449
  %5150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5137, i8* %5150, align 1, !tbaa !2450
  %5151 = load i64, i64* %RBP
  %5152 = sub i64 %5151, 24
  %5153 = load i64, i64* %PC
  %5154 = add i64 %5153, 4
  store i64 %5154, i64* %PC
  %5155 = inttoptr i64 %5152 to i64*
  %5156 = load i64, i64* %5155
  store i64 %5156, i64* %RCX, align 8, !tbaa !2428
  %5157 = load i64, i64* %RDX
  %5158 = load i64, i64* %RCX
  %5159 = add i64 %5158, 20
  %5160 = load i64, i64* %PC
  %5161 = add i64 %5160, 4
  store i64 %5161, i64* %PC
  %5162 = inttoptr i64 %5159 to i32*
  %5163 = load i32, i32* %5162
  %5164 = shl i64 %5157, 32
  %5165 = ashr exact i64 %5164, 32
  %5166 = sext i32 %5163 to i64
  %5167 = mul nsw i64 %5166, %5165
  %5168 = trunc i64 %5167 to i32
  %5169 = and i64 %5167, 4294967295
  store i64 %5169, i64* %RDX, align 8, !tbaa !2428
  %5170 = shl i64 %5167, 32
  %5171 = ashr exact i64 %5170, 32
  %5172 = icmp ne i64 %5171, %5167
  %5173 = zext i1 %5172 to i8
  %5174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5173, i8* %5174, align 1, !tbaa !2432
  %5175 = and i32 %5168, 255
  %5176 = call i32 @llvm.ctpop.i32(i32 %5175) #16
  %5177 = trunc i32 %5176 to i8
  %5178 = and i8 %5177, 1
  %5179 = xor i8 %5178, 1
  %5180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5179, i8* %5180, align 1, !tbaa !2446
  %5181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5181, align 1, !tbaa !2447
  %5182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5182, align 1, !tbaa !2448
  %5183 = lshr i32 %5168, 31
  %5184 = trunc i32 %5183 to i8
  %5185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5184, i8* %5185, align 1, !tbaa !2449
  %5186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5173, i8* %5186, align 1, !tbaa !2450
  %5187 = load i64, i64* %RBP
  %5188 = sub i64 %5187, 52
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 3
  store i64 %5190, i64* %PC
  %5191 = inttoptr i64 %5188 to i32*
  %5192 = load i32, i32* %5191
  %5193 = zext i32 %5192 to i64
  store i64 %5193, i64* %RSI, align 8, !tbaa !2428
  %5194 = load i64, i64* %RBP
  %5195 = sub i64 %5194, 24
  %5196 = load i64, i64* %PC
  %5197 = add i64 %5196, 4
  store i64 %5197, i64* %PC
  %5198 = inttoptr i64 %5195 to i64*
  %5199 = load i64, i64* %5198
  store i64 %5199, i64* %RCX, align 8, !tbaa !2428
  %5200 = load i64, i64* %RSI
  %5201 = load i64, i64* %RCX
  %5202 = add i64 %5201, 16
  %5203 = load i64, i64* %PC
  %5204 = add i64 %5203, 4
  store i64 %5204, i64* %PC
  %5205 = inttoptr i64 %5202 to i32*
  %5206 = load i32, i32* %5205
  %5207 = shl i64 %5200, 32
  %5208 = ashr exact i64 %5207, 32
  %5209 = sext i32 %5206 to i64
  %5210 = mul nsw i64 %5209, %5208
  %5211 = trunc i64 %5210 to i32
  %5212 = and i64 %5210, 4294967295
  store i64 %5212, i64* %RSI, align 8, !tbaa !2428
  %5213 = shl i64 %5210, 32
  %5214 = ashr exact i64 %5213, 32
  %5215 = icmp ne i64 %5214, %5210
  %5216 = zext i1 %5215 to i8
  %5217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5216, i8* %5217, align 1, !tbaa !2432
  %5218 = and i32 %5211, 255
  %5219 = call i32 @llvm.ctpop.i32(i32 %5218) #16
  %5220 = trunc i32 %5219 to i8
  %5221 = and i8 %5220, 1
  %5222 = xor i8 %5221, 1
  %5223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5222, i8* %5223, align 1, !tbaa !2446
  %5224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5224, align 1, !tbaa !2447
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5225, align 1, !tbaa !2448
  %5226 = lshr i32 %5211, 31
  %5227 = trunc i32 %5226 to i8
  %5228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5227, i8* %5228, align 1, !tbaa !2449
  %5229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5216, i8* %5229, align 1, !tbaa !2450
  %5230 = load i64, i64* %RBP
  %5231 = sub i64 %5230, 24
  %5232 = load i64, i64* %PC
  %5233 = add i64 %5232, 4
  store i64 %5233, i64* %PC
  %5234 = inttoptr i64 %5231 to i64*
  %5235 = load i64, i64* %5234
  store i64 %5235, i64* %RCX, align 8, !tbaa !2428
  %5236 = load i64, i64* %RSI
  %5237 = load i64, i64* %RCX
  %5238 = add i64 %5237, 20
  %5239 = load i64, i64* %PC
  %5240 = add i64 %5239, 4
  store i64 %5240, i64* %PC
  %5241 = inttoptr i64 %5238 to i32*
  %5242 = load i32, i32* %5241
  %5243 = shl i64 %5236, 32
  %5244 = ashr exact i64 %5243, 32
  %5245 = sext i32 %5242 to i64
  %5246 = mul nsw i64 %5245, %5244
  %5247 = trunc i64 %5246 to i32
  %5248 = and i64 %5246, 4294967295
  store i64 %5248, i64* %RSI, align 8, !tbaa !2428
  %5249 = shl i64 %5246, 32
  %5250 = ashr exact i64 %5249, 32
  %5251 = icmp ne i64 %5250, %5246
  %5252 = zext i1 %5251 to i8
  %5253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5252, i8* %5253, align 1, !tbaa !2432
  %5254 = and i32 %5247, 255
  %5255 = call i32 @llvm.ctpop.i32(i32 %5254) #16
  %5256 = trunc i32 %5255 to i8
  %5257 = and i8 %5256, 1
  %5258 = xor i8 %5257, 1
  %5259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5258, i8* %5259, align 1, !tbaa !2446
  %5260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5260, align 1, !tbaa !2447
  %5261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5261, align 1, !tbaa !2448
  %5262 = lshr i32 %5247, 31
  %5263 = trunc i32 %5262 to i8
  %5264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5263, i8* %5264, align 1, !tbaa !2449
  %5265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5252, i8* %5265, align 1, !tbaa !2450
  %5266 = load i64, i64* %RDX
  %5267 = load i32, i32* %ESI
  %5268 = zext i32 %5267 to i64
  %5269 = load i64, i64* %PC
  %5270 = add i64 %5269, 2
  store i64 %5270, i64* %PC
  %5271 = trunc i64 %5266 to i32
  %5272 = add i32 %5267, %5271
  %5273 = zext i32 %5272 to i64
  store i64 %5273, i64* %RDX, align 8, !tbaa !2428
  %5274 = icmp ult i32 %5272, %5271
  %5275 = icmp ult i32 %5272, %5267
  %5276 = or i1 %5274, %5275
  %5277 = zext i1 %5276 to i8
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5277, i8* %5278, align 1, !tbaa !2432
  %5279 = and i32 %5272, 255
  %5280 = call i32 @llvm.ctpop.i32(i32 %5279) #16
  %5281 = trunc i32 %5280 to i8
  %5282 = and i8 %5281, 1
  %5283 = xor i8 %5282, 1
  %5284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5283, i8* %5284, align 1, !tbaa !2446
  %5285 = xor i64 %5268, %5266
  %5286 = trunc i64 %5285 to i32
  %5287 = xor i32 %5286, %5272
  %5288 = lshr i32 %5287, 4
  %5289 = trunc i32 %5288 to i8
  %5290 = and i8 %5289, 1
  %5291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5290, i8* %5291, align 1, !tbaa !2447
  %5292 = icmp eq i32 %5272, 0
  %5293 = zext i1 %5292 to i8
  %5294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5293, i8* %5294, align 1, !tbaa !2448
  %5295 = lshr i32 %5272, 31
  %5296 = trunc i32 %5295 to i8
  %5297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5296, i8* %5297, align 1, !tbaa !2449
  %5298 = lshr i32 %5271, 31
  %5299 = lshr i32 %5267, 31
  %5300 = xor i32 %5295, %5298
  %5301 = xor i32 %5295, %5299
  %5302 = add nuw nsw i32 %5300, %5301
  %5303 = icmp eq i32 %5302, 2
  %5304 = zext i1 %5303 to i8
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5304, i8* %5305, align 1, !tbaa !2450
  %5306 = load i64, i64* %RBP
  %5307 = sub i64 %5306, 56
  %5308 = load i64, i64* %PC
  %5309 = add i64 %5308, 3
  store i64 %5309, i64* %PC
  %5310 = inttoptr i64 %5307 to i32*
  %5311 = load i32, i32* %5310
  %5312 = zext i32 %5311 to i64
  store i64 %5312, i64* %RSI, align 8, !tbaa !2428
  %5313 = load i64, i64* %RBP
  %5314 = sub i64 %5313, 24
  %5315 = load i64, i64* %PC
  %5316 = add i64 %5315, 4
  store i64 %5316, i64* %PC
  %5317 = inttoptr i64 %5314 to i64*
  %5318 = load i64, i64* %5317
  store i64 %5318, i64* %RCX, align 8, !tbaa !2428
  %5319 = load i64, i64* %RSI
  %5320 = load i64, i64* %RCX
  %5321 = add i64 %5320, 20
  %5322 = load i64, i64* %PC
  %5323 = add i64 %5322, 4
  store i64 %5323, i64* %PC
  %5324 = inttoptr i64 %5321 to i32*
  %5325 = load i32, i32* %5324
  %5326 = shl i64 %5319, 32
  %5327 = ashr exact i64 %5326, 32
  %5328 = sext i32 %5325 to i64
  %5329 = mul nsw i64 %5328, %5327
  %5330 = trunc i64 %5329 to i32
  %5331 = and i64 %5329, 4294967295
  store i64 %5331, i64* %RSI, align 8, !tbaa !2428
  %5332 = shl i64 %5329, 32
  %5333 = ashr exact i64 %5332, 32
  %5334 = icmp ne i64 %5333, %5329
  %5335 = zext i1 %5334 to i8
  %5336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5335, i8* %5336, align 1, !tbaa !2432
  %5337 = and i32 %5330, 255
  %5338 = call i32 @llvm.ctpop.i32(i32 %5337) #16
  %5339 = trunc i32 %5338 to i8
  %5340 = and i8 %5339, 1
  %5341 = xor i8 %5340, 1
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5341, i8* %5342, align 1, !tbaa !2446
  %5343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5343, align 1, !tbaa !2447
  %5344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5344, align 1, !tbaa !2448
  %5345 = lshr i32 %5330, 31
  %5346 = trunc i32 %5345 to i8
  %5347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5346, i8* %5347, align 1, !tbaa !2449
  %5348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5335, i8* %5348, align 1, !tbaa !2450
  %5349 = load i64, i64* %RDX
  %5350 = load i32, i32* %ESI
  %5351 = zext i32 %5350 to i64
  %5352 = load i64, i64* %PC
  %5353 = add i64 %5352, 2
  store i64 %5353, i64* %PC
  %5354 = trunc i64 %5349 to i32
  %5355 = add i32 %5350, %5354
  %5356 = zext i32 %5355 to i64
  store i64 %5356, i64* %RDX, align 8, !tbaa !2428
  %5357 = icmp ult i32 %5355, %5354
  %5358 = icmp ult i32 %5355, %5350
  %5359 = or i1 %5357, %5358
  %5360 = zext i1 %5359 to i8
  %5361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5360, i8* %5361, align 1, !tbaa !2432
  %5362 = and i32 %5355, 255
  %5363 = call i32 @llvm.ctpop.i32(i32 %5362) #16
  %5364 = trunc i32 %5363 to i8
  %5365 = and i8 %5364, 1
  %5366 = xor i8 %5365, 1
  %5367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5366, i8* %5367, align 1, !tbaa !2446
  %5368 = xor i64 %5351, %5349
  %5369 = trunc i64 %5368 to i32
  %5370 = xor i32 %5369, %5355
  %5371 = lshr i32 %5370, 4
  %5372 = trunc i32 %5371 to i8
  %5373 = and i8 %5372, 1
  %5374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5373, i8* %5374, align 1, !tbaa !2447
  %5375 = icmp eq i32 %5355, 0
  %5376 = zext i1 %5375 to i8
  %5377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5376, i8* %5377, align 1, !tbaa !2448
  %5378 = lshr i32 %5355, 31
  %5379 = trunc i32 %5378 to i8
  %5380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5379, i8* %5380, align 1, !tbaa !2449
  %5381 = lshr i32 %5354, 31
  %5382 = lshr i32 %5350, 31
  %5383 = xor i32 %5378, %5381
  %5384 = xor i32 %5378, %5382
  %5385 = add nuw nsw i32 %5383, %5384
  %5386 = icmp eq i32 %5385, 2
  %5387 = zext i1 %5386 to i8
  %5388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5387, i8* %5388, align 1, !tbaa !2450
  %5389 = load i64, i64* %RDX
  %5390 = load i64, i64* %RBP
  %5391 = sub i64 %5390, 60
  %5392 = load i64, i64* %PC
  %5393 = add i64 %5392, 3
  store i64 %5393, i64* %PC
  %5394 = trunc i64 %5389 to i32
  %5395 = inttoptr i64 %5391 to i32*
  %5396 = load i32, i32* %5395
  %5397 = add i32 %5396, %5394
  %5398 = zext i32 %5397 to i64
  store i64 %5398, i64* %RDX, align 8, !tbaa !2428
  %5399 = icmp ult i32 %5397, %5394
  %5400 = icmp ult i32 %5397, %5396
  %5401 = or i1 %5399, %5400
  %5402 = zext i1 %5401 to i8
  %5403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5402, i8* %5403, align 1, !tbaa !2432
  %5404 = and i32 %5397, 255
  %5405 = call i32 @llvm.ctpop.i32(i32 %5404) #16
  %5406 = trunc i32 %5405 to i8
  %5407 = and i8 %5406, 1
  %5408 = xor i8 %5407, 1
  %5409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5408, i8* %5409, align 1, !tbaa !2446
  %5410 = xor i32 %5396, %5394
  %5411 = xor i32 %5410, %5397
  %5412 = lshr i32 %5411, 4
  %5413 = trunc i32 %5412 to i8
  %5414 = and i8 %5413, 1
  %5415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5414, i8* %5415, align 1, !tbaa !2447
  %5416 = icmp eq i32 %5397, 0
  %5417 = zext i1 %5416 to i8
  %5418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5417, i8* %5418, align 1, !tbaa !2448
  %5419 = lshr i32 %5397, 31
  %5420 = trunc i32 %5419 to i8
  %5421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5420, i8* %5421, align 1, !tbaa !2449
  %5422 = lshr i32 %5394, 31
  %5423 = lshr i32 %5396, 31
  %5424 = xor i32 %5419, %5422
  %5425 = xor i32 %5419, %5423
  %5426 = add nuw nsw i32 %5424, %5425
  %5427 = icmp eq i32 %5426, 2
  %5428 = zext i1 %5427 to i8
  %5429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5428, i8* %5429, align 1, !tbaa !2450
  %5430 = load i32, i32* %EDX
  %5431 = zext i32 %5430 to i64
  %5432 = load i64, i64* %PC
  %5433 = add i64 %5432, 3
  store i64 %5433, i64* %PC
  %5434 = shl i64 %5431, 32
  %5435 = ashr exact i64 %5434, 32
  store i64 %5435, i64* %RCX, align 8, !tbaa !2428
  %5436 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5437 = load i64, i64* %RAX
  %5438 = load i64, i64* %RCX
  %5439 = mul i64 %5438, 4
  %5440 = add i64 %5439, %5437
  %5441 = load i64, i64* %PC
  %5442 = add i64 %5441, 5
  store i64 %5442, i64* %PC
  %5443 = inttoptr i64 %5440 to float*
  %5444 = load float, float* %5443
  %5445 = bitcast i8* %5436 to float*
  store float %5444, float* %5445, align 1, !tbaa !2452
  %5446 = getelementptr inbounds i8, i8* %5436, i64 4
  %5447 = bitcast i8* %5446 to float*
  store float 0.000000e+00, float* %5447, align 1, !tbaa !2452
  %5448 = getelementptr inbounds i8, i8* %5436, i64 8
  %5449 = bitcast i8* %5448 to float*
  store float 0.000000e+00, float* %5449, align 1, !tbaa !2452
  %5450 = getelementptr inbounds i8, i8* %5436, i64 12
  %5451 = bitcast i8* %5450 to float*
  store float 0.000000e+00, float* %5451, align 1, !tbaa !2452
  %5452 = load i64, i64* %RBP
  %5453 = sub i64 %5452, 40
  %5454 = load i64, i64* %PC
  %5455 = add i64 %5454, 4
  store i64 %5455, i64* %PC
  %5456 = inttoptr i64 %5453 to i64*
  %5457 = load i64, i64* %5456
  store i64 %5457, i64* %RAX, align 8, !tbaa !2428
  %5458 = load i64, i64* %RAX
  %5459 = load i64, i64* %PC
  %5460 = add i64 %5459, 3
  store i64 %5460, i64* %PC
  %5461 = inttoptr i64 %5458 to i64*
  %5462 = load i64, i64* %5461
  store i64 %5462, i64* %RAX, align 8, !tbaa !2428
  %5463 = load i64, i64* %RBP
  %5464 = sub i64 %5463, 40
  %5465 = load i64, i64* %PC
  %5466 = add i64 %5465, 4
  store i64 %5466, i64* %PC
  %5467 = inttoptr i64 %5464 to i64*
  %5468 = load i64, i64* %5467
  store i64 %5468, i64* %RCX, align 8, !tbaa !2428
  %5469 = load i64, i64* %RCX
  %5470 = add i64 %5469, 12
  %5471 = load i64, i64* %PC
  %5472 = add i64 %5471, 4
  store i64 %5472, i64* %PC
  %5473 = inttoptr i64 %5470 to i32*
  %5474 = load i32, i32* %5473
  %5475 = sext i32 %5474 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5476, align 1, !tbaa !2432
  %5477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5477, align 1, !tbaa !2446
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5478, align 1, !tbaa !2447
  %5479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5479, align 1, !tbaa !2448
  %5480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5480, align 1, !tbaa !2449
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5481, align 1, !tbaa !2450
  %5482 = load i64, i64* %RBP
  %5483 = sub i64 %5482, 40
  %5484 = load i64, i64* %PC
  %5485 = add i64 %5484, 4
  store i64 %5485, i64* %PC
  %5486 = inttoptr i64 %5483 to i64*
  %5487 = load i64, i64* %5486
  store i64 %5487, i64* %RCX, align 8, !tbaa !2428
  %5488 = load i64, i64* %RDX
  %5489 = load i64, i64* %RCX
  %5490 = add i64 %5489, 16
  %5491 = load i64, i64* %PC
  %5492 = add i64 %5491, 4
  store i64 %5492, i64* %PC
  %5493 = inttoptr i64 %5490 to i32*
  %5494 = load i32, i32* %5493
  %5495 = shl i64 %5488, 32
  %5496 = ashr exact i64 %5495, 32
  %5497 = sext i32 %5494 to i64
  %5498 = mul nsw i64 %5497, %5496
  %5499 = trunc i64 %5498 to i32
  %5500 = and i64 %5498, 4294967295
  store i64 %5500, i64* %RDX, align 8, !tbaa !2428
  %5501 = shl i64 %5498, 32
  %5502 = ashr exact i64 %5501, 32
  %5503 = icmp ne i64 %5502, %5498
  %5504 = zext i1 %5503 to i8
  %5505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5504, i8* %5505, align 1, !tbaa !2432
  %5506 = and i32 %5499, 255
  %5507 = call i32 @llvm.ctpop.i32(i32 %5506) #16
  %5508 = trunc i32 %5507 to i8
  %5509 = and i8 %5508, 1
  %5510 = xor i8 %5509, 1
  %5511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5510, i8* %5511, align 1, !tbaa !2446
  %5512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5512, align 1, !tbaa !2447
  %5513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5513, align 1, !tbaa !2448
  %5514 = lshr i32 %5499, 31
  %5515 = trunc i32 %5514 to i8
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5515, i8* %5516, align 1, !tbaa !2449
  %5517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5504, i8* %5517, align 1, !tbaa !2450
  %5518 = load i64, i64* %RBP
  %5519 = sub i64 %5518, 40
  %5520 = load i64, i64* %PC
  %5521 = add i64 %5520, 4
  store i64 %5521, i64* %PC
  %5522 = inttoptr i64 %5519 to i64*
  %5523 = load i64, i64* %5522
  store i64 %5523, i64* %RCX, align 8, !tbaa !2428
  %5524 = load i64, i64* %RDX
  %5525 = load i64, i64* %RCX
  %5526 = add i64 %5525, 20
  %5527 = load i64, i64* %PC
  %5528 = add i64 %5527, 4
  store i64 %5528, i64* %PC
  %5529 = inttoptr i64 %5526 to i32*
  %5530 = load i32, i32* %5529
  %5531 = shl i64 %5524, 32
  %5532 = ashr exact i64 %5531, 32
  %5533 = sext i32 %5530 to i64
  %5534 = mul nsw i64 %5533, %5532
  %5535 = trunc i64 %5534 to i32
  %5536 = and i64 %5534, 4294967295
  store i64 %5536, i64* %RDX, align 8, !tbaa !2428
  %5537 = shl i64 %5534, 32
  %5538 = ashr exact i64 %5537, 32
  %5539 = icmp ne i64 %5538, %5534
  %5540 = zext i1 %5539 to i8
  %5541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5540, i8* %5541, align 1, !tbaa !2432
  %5542 = and i32 %5535, 255
  %5543 = call i32 @llvm.ctpop.i32(i32 %5542) #16
  %5544 = trunc i32 %5543 to i8
  %5545 = and i8 %5544, 1
  %5546 = xor i8 %5545, 1
  %5547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5546, i8* %5547, align 1, !tbaa !2446
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5548, align 1, !tbaa !2447
  %5549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5549, align 1, !tbaa !2448
  %5550 = lshr i32 %5535, 31
  %5551 = trunc i32 %5550 to i8
  %5552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5551, i8* %5552, align 1, !tbaa !2449
  %5553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5540, i8* %5553, align 1, !tbaa !2450
  %5554 = load i64, i64* %RBP
  %5555 = sub i64 %5554, 52
  %5556 = load i64, i64* %PC
  %5557 = add i64 %5556, 3
  store i64 %5557, i64* %PC
  %5558 = inttoptr i64 %5555 to i32*
  %5559 = load i32, i32* %5558
  %5560 = zext i32 %5559 to i64
  store i64 %5560, i64* %RSI, align 8, !tbaa !2428
  %5561 = load i64, i64* %RBP
  %5562 = sub i64 %5561, 40
  %5563 = load i64, i64* %PC
  %5564 = add i64 %5563, 4
  store i64 %5564, i64* %PC
  %5565 = inttoptr i64 %5562 to i64*
  %5566 = load i64, i64* %5565
  store i64 %5566, i64* %RCX, align 8, !tbaa !2428
  %5567 = load i64, i64* %RSI
  %5568 = load i64, i64* %RCX
  %5569 = add i64 %5568, 16
  %5570 = load i64, i64* %PC
  %5571 = add i64 %5570, 4
  store i64 %5571, i64* %PC
  %5572 = inttoptr i64 %5569 to i32*
  %5573 = load i32, i32* %5572
  %5574 = shl i64 %5567, 32
  %5575 = ashr exact i64 %5574, 32
  %5576 = sext i32 %5573 to i64
  %5577 = mul nsw i64 %5576, %5575
  %5578 = trunc i64 %5577 to i32
  %5579 = and i64 %5577, 4294967295
  store i64 %5579, i64* %RSI, align 8, !tbaa !2428
  %5580 = shl i64 %5577, 32
  %5581 = ashr exact i64 %5580, 32
  %5582 = icmp ne i64 %5581, %5577
  %5583 = zext i1 %5582 to i8
  %5584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5583, i8* %5584, align 1, !tbaa !2432
  %5585 = and i32 %5578, 255
  %5586 = call i32 @llvm.ctpop.i32(i32 %5585) #16
  %5587 = trunc i32 %5586 to i8
  %5588 = and i8 %5587, 1
  %5589 = xor i8 %5588, 1
  %5590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5589, i8* %5590, align 1, !tbaa !2446
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5591, align 1, !tbaa !2447
  %5592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5592, align 1, !tbaa !2448
  %5593 = lshr i32 %5578, 31
  %5594 = trunc i32 %5593 to i8
  %5595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5594, i8* %5595, align 1, !tbaa !2449
  %5596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5583, i8* %5596, align 1, !tbaa !2450
  %5597 = load i64, i64* %RBP
  %5598 = sub i64 %5597, 40
  %5599 = load i64, i64* %PC
  %5600 = add i64 %5599, 4
  store i64 %5600, i64* %PC
  %5601 = inttoptr i64 %5598 to i64*
  %5602 = load i64, i64* %5601
  store i64 %5602, i64* %RCX, align 8, !tbaa !2428
  %5603 = load i64, i64* %RSI
  %5604 = load i64, i64* %RCX
  %5605 = add i64 %5604, 20
  %5606 = load i64, i64* %PC
  %5607 = add i64 %5606, 4
  store i64 %5607, i64* %PC
  %5608 = inttoptr i64 %5605 to i32*
  %5609 = load i32, i32* %5608
  %5610 = shl i64 %5603, 32
  %5611 = ashr exact i64 %5610, 32
  %5612 = sext i32 %5609 to i64
  %5613 = mul nsw i64 %5612, %5611
  %5614 = trunc i64 %5613 to i32
  %5615 = and i64 %5613, 4294967295
  store i64 %5615, i64* %RSI, align 8, !tbaa !2428
  %5616 = shl i64 %5613, 32
  %5617 = ashr exact i64 %5616, 32
  %5618 = icmp ne i64 %5617, %5613
  %5619 = zext i1 %5618 to i8
  %5620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5619, i8* %5620, align 1, !tbaa !2432
  %5621 = and i32 %5614, 255
  %5622 = call i32 @llvm.ctpop.i32(i32 %5621) #16
  %5623 = trunc i32 %5622 to i8
  %5624 = and i8 %5623, 1
  %5625 = xor i8 %5624, 1
  %5626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5625, i8* %5626, align 1, !tbaa !2446
  %5627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5627, align 1, !tbaa !2447
  %5628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5628, align 1, !tbaa !2448
  %5629 = lshr i32 %5614, 31
  %5630 = trunc i32 %5629 to i8
  %5631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5630, i8* %5631, align 1, !tbaa !2449
  %5632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5619, i8* %5632, align 1, !tbaa !2450
  %5633 = load i64, i64* %RDX
  %5634 = load i32, i32* %ESI
  %5635 = zext i32 %5634 to i64
  %5636 = load i64, i64* %PC
  %5637 = add i64 %5636, 2
  store i64 %5637, i64* %PC
  %5638 = trunc i64 %5633 to i32
  %5639 = add i32 %5634, %5638
  %5640 = zext i32 %5639 to i64
  store i64 %5640, i64* %RDX, align 8, !tbaa !2428
  %5641 = icmp ult i32 %5639, %5638
  %5642 = icmp ult i32 %5639, %5634
  %5643 = or i1 %5641, %5642
  %5644 = zext i1 %5643 to i8
  %5645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5644, i8* %5645, align 1, !tbaa !2432
  %5646 = and i32 %5639, 255
  %5647 = call i32 @llvm.ctpop.i32(i32 %5646) #16
  %5648 = trunc i32 %5647 to i8
  %5649 = and i8 %5648, 1
  %5650 = xor i8 %5649, 1
  %5651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5650, i8* %5651, align 1, !tbaa !2446
  %5652 = xor i64 %5635, %5633
  %5653 = trunc i64 %5652 to i32
  %5654 = xor i32 %5653, %5639
  %5655 = lshr i32 %5654, 4
  %5656 = trunc i32 %5655 to i8
  %5657 = and i8 %5656, 1
  %5658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5657, i8* %5658, align 1, !tbaa !2447
  %5659 = icmp eq i32 %5639, 0
  %5660 = zext i1 %5659 to i8
  %5661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5660, i8* %5661, align 1, !tbaa !2448
  %5662 = lshr i32 %5639, 31
  %5663 = trunc i32 %5662 to i8
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5663, i8* %5664, align 1, !tbaa !2449
  %5665 = lshr i32 %5638, 31
  %5666 = lshr i32 %5634, 31
  %5667 = xor i32 %5662, %5665
  %5668 = xor i32 %5662, %5666
  %5669 = add nuw nsw i32 %5667, %5668
  %5670 = icmp eq i32 %5669, 2
  %5671 = zext i1 %5670 to i8
  %5672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5671, i8* %5672, align 1, !tbaa !2450
  %5673 = load i64, i64* %RBP
  %5674 = sub i64 %5673, 56
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 3
  store i64 %5676, i64* %PC
  %5677 = inttoptr i64 %5674 to i32*
  %5678 = load i32, i32* %5677
  %5679 = zext i32 %5678 to i64
  store i64 %5679, i64* %RSI, align 8, !tbaa !2428
  %5680 = load i64, i64* %RSI
  %5681 = load i64, i64* %PC
  %5682 = add i64 %5681, 3
  store i64 %5682, i64* %PC
  %5683 = trunc i64 %5680 to i32
  %5684 = add i32 1, %5683
  %5685 = zext i32 %5684 to i64
  store i64 %5685, i64* %RSI, align 8, !tbaa !2428
  %5686 = icmp ult i32 %5684, %5683
  %5687 = icmp ult i32 %5684, 1
  %5688 = or i1 %5686, %5687
  %5689 = zext i1 %5688 to i8
  %5690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5689, i8* %5690, align 1, !tbaa !2432
  %5691 = and i32 %5684, 255
  %5692 = call i32 @llvm.ctpop.i32(i32 %5691) #16
  %5693 = trunc i32 %5692 to i8
  %5694 = and i8 %5693, 1
  %5695 = xor i8 %5694, 1
  %5696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5695, i8* %5696, align 1, !tbaa !2446
  %5697 = xor i64 1, %5680
  %5698 = trunc i64 %5697 to i32
  %5699 = xor i32 %5698, %5684
  %5700 = lshr i32 %5699, 4
  %5701 = trunc i32 %5700 to i8
  %5702 = and i8 %5701, 1
  %5703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5702, i8* %5703, align 1, !tbaa !2447
  %5704 = icmp eq i32 %5684, 0
  %5705 = zext i1 %5704 to i8
  %5706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5705, i8* %5706, align 1, !tbaa !2448
  %5707 = lshr i32 %5684, 31
  %5708 = trunc i32 %5707 to i8
  %5709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5708, i8* %5709, align 1, !tbaa !2449
  %5710 = lshr i32 %5683, 31
  %5711 = xor i32 %5707, %5710
  %5712 = add nuw nsw i32 %5711, %5707
  %5713 = icmp eq i32 %5712, 2
  %5714 = zext i1 %5713 to i8
  %5715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5714, i8* %5715, align 1, !tbaa !2450
  %5716 = load i64, i64* %RBP
  %5717 = sub i64 %5716, 40
  %5718 = load i64, i64* %PC
  %5719 = add i64 %5718, 4
  store i64 %5719, i64* %PC
  %5720 = inttoptr i64 %5717 to i64*
  %5721 = load i64, i64* %5720
  store i64 %5721, i64* %RCX, align 8, !tbaa !2428
  %5722 = load i64, i64* %RSI
  %5723 = load i64, i64* %RCX
  %5724 = add i64 %5723, 20
  %5725 = load i64, i64* %PC
  %5726 = add i64 %5725, 4
  store i64 %5726, i64* %PC
  %5727 = inttoptr i64 %5724 to i32*
  %5728 = load i32, i32* %5727
  %5729 = shl i64 %5722, 32
  %5730 = ashr exact i64 %5729, 32
  %5731 = sext i32 %5728 to i64
  %5732 = mul nsw i64 %5731, %5730
  %5733 = trunc i64 %5732 to i32
  %5734 = and i64 %5732, 4294967295
  store i64 %5734, i64* %RSI, align 8, !tbaa !2428
  %5735 = shl i64 %5732, 32
  %5736 = ashr exact i64 %5735, 32
  %5737 = icmp ne i64 %5736, %5732
  %5738 = zext i1 %5737 to i8
  %5739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5738, i8* %5739, align 1, !tbaa !2432
  %5740 = and i32 %5733, 255
  %5741 = call i32 @llvm.ctpop.i32(i32 %5740) #16
  %5742 = trunc i32 %5741 to i8
  %5743 = and i8 %5742, 1
  %5744 = xor i8 %5743, 1
  %5745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5744, i8* %5745, align 1, !tbaa !2446
  %5746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5746, align 1, !tbaa !2447
  %5747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5747, align 1, !tbaa !2448
  %5748 = lshr i32 %5733, 31
  %5749 = trunc i32 %5748 to i8
  %5750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5749, i8* %5750, align 1, !tbaa !2449
  %5751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5738, i8* %5751, align 1, !tbaa !2450
  %5752 = load i64, i64* %RDX
  %5753 = load i32, i32* %ESI
  %5754 = zext i32 %5753 to i64
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 2
  store i64 %5756, i64* %PC
  %5757 = trunc i64 %5752 to i32
  %5758 = add i32 %5753, %5757
  %5759 = zext i32 %5758 to i64
  store i64 %5759, i64* %RDX, align 8, !tbaa !2428
  %5760 = icmp ult i32 %5758, %5757
  %5761 = icmp ult i32 %5758, %5753
  %5762 = or i1 %5760, %5761
  %5763 = zext i1 %5762 to i8
  %5764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5763, i8* %5764, align 1, !tbaa !2432
  %5765 = and i32 %5758, 255
  %5766 = call i32 @llvm.ctpop.i32(i32 %5765) #16
  %5767 = trunc i32 %5766 to i8
  %5768 = and i8 %5767, 1
  %5769 = xor i8 %5768, 1
  %5770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5769, i8* %5770, align 1, !tbaa !2446
  %5771 = xor i64 %5754, %5752
  %5772 = trunc i64 %5771 to i32
  %5773 = xor i32 %5772, %5758
  %5774 = lshr i32 %5773, 4
  %5775 = trunc i32 %5774 to i8
  %5776 = and i8 %5775, 1
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5776, i8* %5777, align 1, !tbaa !2447
  %5778 = icmp eq i32 %5758, 0
  %5779 = zext i1 %5778 to i8
  %5780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5779, i8* %5780, align 1, !tbaa !2448
  %5781 = lshr i32 %5758, 31
  %5782 = trunc i32 %5781 to i8
  %5783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5782, i8* %5783, align 1, !tbaa !2449
  %5784 = lshr i32 %5757, 31
  %5785 = lshr i32 %5753, 31
  %5786 = xor i32 %5781, %5784
  %5787 = xor i32 %5781, %5785
  %5788 = add nuw nsw i32 %5786, %5787
  %5789 = icmp eq i32 %5788, 2
  %5790 = zext i1 %5789 to i8
  %5791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5790, i8* %5791, align 1, !tbaa !2450
  %5792 = load i64, i64* %RBP
  %5793 = sub i64 %5792, 60
  %5794 = load i64, i64* %PC
  %5795 = add i64 %5794, 3
  store i64 %5795, i64* %PC
  %5796 = inttoptr i64 %5793 to i32*
  %5797 = load i32, i32* %5796
  %5798 = zext i32 %5797 to i64
  store i64 %5798, i64* %RSI, align 8, !tbaa !2428
  %5799 = load i64, i64* %RSI
  %5800 = load i64, i64* %PC
  %5801 = add i64 %5800, 3
  store i64 %5801, i64* %PC
  %5802 = trunc i64 %5799 to i32
  %5803 = add i32 1, %5802
  %5804 = zext i32 %5803 to i64
  store i64 %5804, i64* %RSI, align 8, !tbaa !2428
  %5805 = icmp ult i32 %5803, %5802
  %5806 = icmp ult i32 %5803, 1
  %5807 = or i1 %5805, %5806
  %5808 = zext i1 %5807 to i8
  %5809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5808, i8* %5809, align 1, !tbaa !2432
  %5810 = and i32 %5803, 255
  %5811 = call i32 @llvm.ctpop.i32(i32 %5810) #16
  %5812 = trunc i32 %5811 to i8
  %5813 = and i8 %5812, 1
  %5814 = xor i8 %5813, 1
  %5815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5814, i8* %5815, align 1, !tbaa !2446
  %5816 = xor i64 1, %5799
  %5817 = trunc i64 %5816 to i32
  %5818 = xor i32 %5817, %5803
  %5819 = lshr i32 %5818, 4
  %5820 = trunc i32 %5819 to i8
  %5821 = and i8 %5820, 1
  %5822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5821, i8* %5822, align 1, !tbaa !2447
  %5823 = icmp eq i32 %5803, 0
  %5824 = zext i1 %5823 to i8
  %5825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5824, i8* %5825, align 1, !tbaa !2448
  %5826 = lshr i32 %5803, 31
  %5827 = trunc i32 %5826 to i8
  %5828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5827, i8* %5828, align 1, !tbaa !2449
  %5829 = lshr i32 %5802, 31
  %5830 = xor i32 %5826, %5829
  %5831 = add nuw nsw i32 %5830, %5826
  %5832 = icmp eq i32 %5831, 2
  %5833 = zext i1 %5832 to i8
  %5834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5833, i8* %5834, align 1, !tbaa !2450
  %5835 = load i64, i64* %RDX
  %5836 = load i32, i32* %ESI
  %5837 = zext i32 %5836 to i64
  %5838 = load i64, i64* %PC
  %5839 = add i64 %5838, 2
  store i64 %5839, i64* %PC
  %5840 = trunc i64 %5835 to i32
  %5841 = add i32 %5836, %5840
  %5842 = zext i32 %5841 to i64
  store i64 %5842, i64* %RDX, align 8, !tbaa !2428
  %5843 = icmp ult i32 %5841, %5840
  %5844 = icmp ult i32 %5841, %5836
  %5845 = or i1 %5843, %5844
  %5846 = zext i1 %5845 to i8
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5846, i8* %5847, align 1, !tbaa !2432
  %5848 = and i32 %5841, 255
  %5849 = call i32 @llvm.ctpop.i32(i32 %5848) #16
  %5850 = trunc i32 %5849 to i8
  %5851 = and i8 %5850, 1
  %5852 = xor i8 %5851, 1
  %5853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5852, i8* %5853, align 1, !tbaa !2446
  %5854 = xor i64 %5837, %5835
  %5855 = trunc i64 %5854 to i32
  %5856 = xor i32 %5855, %5841
  %5857 = lshr i32 %5856, 4
  %5858 = trunc i32 %5857 to i8
  %5859 = and i8 %5858, 1
  %5860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5859, i8* %5860, align 1, !tbaa !2447
  %5861 = icmp eq i32 %5841, 0
  %5862 = zext i1 %5861 to i8
  %5863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5862, i8* %5863, align 1, !tbaa !2448
  %5864 = lshr i32 %5841, 31
  %5865 = trunc i32 %5864 to i8
  %5866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5865, i8* %5866, align 1, !tbaa !2449
  %5867 = lshr i32 %5840, 31
  %5868 = lshr i32 %5836, 31
  %5869 = xor i32 %5864, %5867
  %5870 = xor i32 %5864, %5868
  %5871 = add nuw nsw i32 %5869, %5870
  %5872 = icmp eq i32 %5871, 2
  %5873 = zext i1 %5872 to i8
  %5874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5873, i8* %5874, align 1, !tbaa !2450
  %5875 = load i32, i32* %EDX
  %5876 = zext i32 %5875 to i64
  %5877 = load i64, i64* %PC
  %5878 = add i64 %5877, 3
  store i64 %5878, i64* %PC
  %5879 = shl i64 %5876, 32
  %5880 = ashr exact i64 %5879, 32
  store i64 %5880, i64* %RCX, align 8, !tbaa !2428
  %5881 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5882 = load i64, i64* %RAX
  %5883 = load i64, i64* %RCX
  %5884 = mul i64 %5883, 4
  %5885 = add i64 %5884, %5882
  %5886 = load i64, i64* %PC
  %5887 = add i64 %5886, 5
  store i64 %5887, i64* %PC
  %5888 = inttoptr i64 %5885 to float*
  %5889 = load float, float* %5888
  %5890 = bitcast i8* %5881 to float*
  store float %5889, float* %5890, align 1, !tbaa !2452
  %5891 = getelementptr inbounds i8, i8* %5881, i64 4
  %5892 = bitcast i8* %5891 to float*
  store float 0.000000e+00, float* %5892, align 1, !tbaa !2452
  %5893 = getelementptr inbounds i8, i8* %5881, i64 8
  %5894 = bitcast i8* %5893 to float*
  store float 0.000000e+00, float* %5894, align 1, !tbaa !2452
  %5895 = getelementptr inbounds i8, i8* %5881, i64 12
  %5896 = bitcast i8* %5895 to float*
  store float 0.000000e+00, float* %5896, align 1, !tbaa !2452
  %5897 = load i64, i64* %RBP
  %5898 = sub i64 %5897, 40
  %5899 = load i64, i64* %PC
  %5900 = add i64 %5899, 4
  store i64 %5900, i64* %PC
  %5901 = inttoptr i64 %5898 to i64*
  %5902 = load i64, i64* %5901
  store i64 %5902, i64* %RAX, align 8, !tbaa !2428
  %5903 = load i64, i64* %RAX
  %5904 = load i64, i64* %PC
  %5905 = add i64 %5904, 3
  store i64 %5905, i64* %PC
  %5906 = inttoptr i64 %5903 to i64*
  %5907 = load i64, i64* %5906
  store i64 %5907, i64* %RAX, align 8, !tbaa !2428
  %5908 = load i64, i64* %RBP
  %5909 = sub i64 %5908, 40
  %5910 = load i64, i64* %PC
  %5911 = add i64 %5910, 4
  store i64 %5911, i64* %PC
  %5912 = inttoptr i64 %5909 to i64*
  %5913 = load i64, i64* %5912
  store i64 %5913, i64* %RCX, align 8, !tbaa !2428
  %5914 = load i64, i64* %RCX
  %5915 = add i64 %5914, 12
  %5916 = load i64, i64* %PC
  %5917 = add i64 %5916, 4
  store i64 %5917, i64* %PC
  %5918 = inttoptr i64 %5915 to i32*
  %5919 = load i32, i32* %5918
  %5920 = sext i32 %5919 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5921, align 1, !tbaa !2432
  %5922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5922, align 1, !tbaa !2446
  %5923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5923, align 1, !tbaa !2447
  %5924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5924, align 1, !tbaa !2448
  %5925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5925, align 1, !tbaa !2449
  %5926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5926, align 1, !tbaa !2450
  %5927 = load i64, i64* %RBP
  %5928 = sub i64 %5927, 40
  %5929 = load i64, i64* %PC
  %5930 = add i64 %5929, 4
  store i64 %5930, i64* %PC
  %5931 = inttoptr i64 %5928 to i64*
  %5932 = load i64, i64* %5931
  store i64 %5932, i64* %RCX, align 8, !tbaa !2428
  %5933 = load i64, i64* %RDX
  %5934 = load i64, i64* %RCX
  %5935 = add i64 %5934, 16
  %5936 = load i64, i64* %PC
  %5937 = add i64 %5936, 4
  store i64 %5937, i64* %PC
  %5938 = inttoptr i64 %5935 to i32*
  %5939 = load i32, i32* %5938
  %5940 = shl i64 %5933, 32
  %5941 = ashr exact i64 %5940, 32
  %5942 = sext i32 %5939 to i64
  %5943 = mul nsw i64 %5942, %5941
  %5944 = trunc i64 %5943 to i32
  %5945 = and i64 %5943, 4294967295
  store i64 %5945, i64* %RDX, align 8, !tbaa !2428
  %5946 = shl i64 %5943, 32
  %5947 = ashr exact i64 %5946, 32
  %5948 = icmp ne i64 %5947, %5943
  %5949 = zext i1 %5948 to i8
  %5950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5949, i8* %5950, align 1, !tbaa !2432
  %5951 = and i32 %5944, 255
  %5952 = call i32 @llvm.ctpop.i32(i32 %5951) #16
  %5953 = trunc i32 %5952 to i8
  %5954 = and i8 %5953, 1
  %5955 = xor i8 %5954, 1
  %5956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5955, i8* %5956, align 1, !tbaa !2446
  %5957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5957, align 1, !tbaa !2447
  %5958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5958, align 1, !tbaa !2448
  %5959 = lshr i32 %5944, 31
  %5960 = trunc i32 %5959 to i8
  %5961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5960, i8* %5961, align 1, !tbaa !2449
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5949, i8* %5962, align 1, !tbaa !2450
  %5963 = load i64, i64* %RBP
  %5964 = sub i64 %5963, 40
  %5965 = load i64, i64* %PC
  %5966 = add i64 %5965, 4
  store i64 %5966, i64* %PC
  %5967 = inttoptr i64 %5964 to i64*
  %5968 = load i64, i64* %5967
  store i64 %5968, i64* %RCX, align 8, !tbaa !2428
  %5969 = load i64, i64* %RDX
  %5970 = load i64, i64* %RCX
  %5971 = add i64 %5970, 20
  %5972 = load i64, i64* %PC
  %5973 = add i64 %5972, 4
  store i64 %5973, i64* %PC
  %5974 = inttoptr i64 %5971 to i32*
  %5975 = load i32, i32* %5974
  %5976 = shl i64 %5969, 32
  %5977 = ashr exact i64 %5976, 32
  %5978 = sext i32 %5975 to i64
  %5979 = mul nsw i64 %5978, %5977
  %5980 = trunc i64 %5979 to i32
  %5981 = and i64 %5979, 4294967295
  store i64 %5981, i64* %RDX, align 8, !tbaa !2428
  %5982 = shl i64 %5979, 32
  %5983 = ashr exact i64 %5982, 32
  %5984 = icmp ne i64 %5983, %5979
  %5985 = zext i1 %5984 to i8
  %5986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5985, i8* %5986, align 1, !tbaa !2432
  %5987 = and i32 %5980, 255
  %5988 = call i32 @llvm.ctpop.i32(i32 %5987) #16
  %5989 = trunc i32 %5988 to i8
  %5990 = and i8 %5989, 1
  %5991 = xor i8 %5990, 1
  %5992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5991, i8* %5992, align 1, !tbaa !2446
  %5993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5993, align 1, !tbaa !2447
  %5994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5994, align 1, !tbaa !2448
  %5995 = lshr i32 %5980, 31
  %5996 = trunc i32 %5995 to i8
  %5997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5996, i8* %5997, align 1, !tbaa !2449
  %5998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5985, i8* %5998, align 1, !tbaa !2450
  %5999 = load i64, i64* %RBP
  %6000 = sub i64 %5999, 52
  %6001 = load i64, i64* %PC
  %6002 = add i64 %6001, 3
  store i64 %6002, i64* %PC
  %6003 = inttoptr i64 %6000 to i32*
  %6004 = load i32, i32* %6003
  %6005 = zext i32 %6004 to i64
  store i64 %6005, i64* %RSI, align 8, !tbaa !2428
  %6006 = load i64, i64* %RBP
  %6007 = sub i64 %6006, 40
  %6008 = load i64, i64* %PC
  %6009 = add i64 %6008, 4
  store i64 %6009, i64* %PC
  %6010 = inttoptr i64 %6007 to i64*
  %6011 = load i64, i64* %6010
  store i64 %6011, i64* %RCX, align 8, !tbaa !2428
  %6012 = load i64, i64* %RSI
  %6013 = load i64, i64* %RCX
  %6014 = add i64 %6013, 16
  %6015 = load i64, i64* %PC
  %6016 = add i64 %6015, 4
  store i64 %6016, i64* %PC
  %6017 = inttoptr i64 %6014 to i32*
  %6018 = load i32, i32* %6017
  %6019 = shl i64 %6012, 32
  %6020 = ashr exact i64 %6019, 32
  %6021 = sext i32 %6018 to i64
  %6022 = mul nsw i64 %6021, %6020
  %6023 = trunc i64 %6022 to i32
  %6024 = and i64 %6022, 4294967295
  store i64 %6024, i64* %RSI, align 8, !tbaa !2428
  %6025 = shl i64 %6022, 32
  %6026 = ashr exact i64 %6025, 32
  %6027 = icmp ne i64 %6026, %6022
  %6028 = zext i1 %6027 to i8
  %6029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6028, i8* %6029, align 1, !tbaa !2432
  %6030 = and i32 %6023, 255
  %6031 = call i32 @llvm.ctpop.i32(i32 %6030) #16
  %6032 = trunc i32 %6031 to i8
  %6033 = and i8 %6032, 1
  %6034 = xor i8 %6033, 1
  %6035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6034, i8* %6035, align 1, !tbaa !2446
  %6036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6036, align 1, !tbaa !2447
  %6037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6037, align 1, !tbaa !2448
  %6038 = lshr i32 %6023, 31
  %6039 = trunc i32 %6038 to i8
  %6040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6039, i8* %6040, align 1, !tbaa !2449
  %6041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6028, i8* %6041, align 1, !tbaa !2450
  %6042 = load i64, i64* %RBP
  %6043 = sub i64 %6042, 40
  %6044 = load i64, i64* %PC
  %6045 = add i64 %6044, 4
  store i64 %6045, i64* %PC
  %6046 = inttoptr i64 %6043 to i64*
  %6047 = load i64, i64* %6046
  store i64 %6047, i64* %RCX, align 8, !tbaa !2428
  %6048 = load i64, i64* %RSI
  %6049 = load i64, i64* %RCX
  %6050 = add i64 %6049, 20
  %6051 = load i64, i64* %PC
  %6052 = add i64 %6051, 4
  store i64 %6052, i64* %PC
  %6053 = inttoptr i64 %6050 to i32*
  %6054 = load i32, i32* %6053
  %6055 = shl i64 %6048, 32
  %6056 = ashr exact i64 %6055, 32
  %6057 = sext i32 %6054 to i64
  %6058 = mul nsw i64 %6057, %6056
  %6059 = trunc i64 %6058 to i32
  %6060 = and i64 %6058, 4294967295
  store i64 %6060, i64* %RSI, align 8, !tbaa !2428
  %6061 = shl i64 %6058, 32
  %6062 = ashr exact i64 %6061, 32
  %6063 = icmp ne i64 %6062, %6058
  %6064 = zext i1 %6063 to i8
  %6065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6064, i8* %6065, align 1, !tbaa !2432
  %6066 = and i32 %6059, 255
  %6067 = call i32 @llvm.ctpop.i32(i32 %6066) #16
  %6068 = trunc i32 %6067 to i8
  %6069 = and i8 %6068, 1
  %6070 = xor i8 %6069, 1
  %6071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6070, i8* %6071, align 1, !tbaa !2446
  %6072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6072, align 1, !tbaa !2447
  %6073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6073, align 1, !tbaa !2448
  %6074 = lshr i32 %6059, 31
  %6075 = trunc i32 %6074 to i8
  %6076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6075, i8* %6076, align 1, !tbaa !2449
  %6077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6064, i8* %6077, align 1, !tbaa !2450
  %6078 = load i64, i64* %RDX
  %6079 = load i32, i32* %ESI
  %6080 = zext i32 %6079 to i64
  %6081 = load i64, i64* %PC
  %6082 = add i64 %6081, 2
  store i64 %6082, i64* %PC
  %6083 = trunc i64 %6078 to i32
  %6084 = add i32 %6079, %6083
  %6085 = zext i32 %6084 to i64
  store i64 %6085, i64* %RDX, align 8, !tbaa !2428
  %6086 = icmp ult i32 %6084, %6083
  %6087 = icmp ult i32 %6084, %6079
  %6088 = or i1 %6086, %6087
  %6089 = zext i1 %6088 to i8
  %6090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6089, i8* %6090, align 1, !tbaa !2432
  %6091 = and i32 %6084, 255
  %6092 = call i32 @llvm.ctpop.i32(i32 %6091) #16
  %6093 = trunc i32 %6092 to i8
  %6094 = and i8 %6093, 1
  %6095 = xor i8 %6094, 1
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6095, i8* %6096, align 1, !tbaa !2446
  %6097 = xor i64 %6080, %6078
  %6098 = trunc i64 %6097 to i32
  %6099 = xor i32 %6098, %6084
  %6100 = lshr i32 %6099, 4
  %6101 = trunc i32 %6100 to i8
  %6102 = and i8 %6101, 1
  %6103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6102, i8* %6103, align 1, !tbaa !2447
  %6104 = icmp eq i32 %6084, 0
  %6105 = zext i1 %6104 to i8
  %6106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6105, i8* %6106, align 1, !tbaa !2448
  %6107 = lshr i32 %6084, 31
  %6108 = trunc i32 %6107 to i8
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6108, i8* %6109, align 1, !tbaa !2449
  %6110 = lshr i32 %6083, 31
  %6111 = lshr i32 %6079, 31
  %6112 = xor i32 %6107, %6110
  %6113 = xor i32 %6107, %6111
  %6114 = add nuw nsw i32 %6112, %6113
  %6115 = icmp eq i32 %6114, 2
  %6116 = zext i1 %6115 to i8
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6116, i8* %6117, align 1, !tbaa !2450
  %6118 = load i64, i64* %RBP
  %6119 = sub i64 %6118, 56
  %6120 = load i64, i64* %PC
  %6121 = add i64 %6120, 3
  store i64 %6121, i64* %PC
  %6122 = inttoptr i64 %6119 to i32*
  %6123 = load i32, i32* %6122
  %6124 = zext i32 %6123 to i64
  store i64 %6124, i64* %RSI, align 8, !tbaa !2428
  %6125 = load i64, i64* %RSI
  %6126 = load i64, i64* %PC
  %6127 = add i64 %6126, 3
  store i64 %6127, i64* %PC
  %6128 = trunc i64 %6125 to i32
  %6129 = sub i32 %6128, 1
  %6130 = zext i32 %6129 to i64
  store i64 %6130, i64* %RSI, align 8, !tbaa !2428
  %6131 = icmp ult i32 %6128, 1
  %6132 = zext i1 %6131 to i8
  %6133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6132, i8* %6133, align 1, !tbaa !2432
  %6134 = and i32 %6129, 255
  %6135 = call i32 @llvm.ctpop.i32(i32 %6134) #16
  %6136 = trunc i32 %6135 to i8
  %6137 = and i8 %6136, 1
  %6138 = xor i8 %6137, 1
  %6139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6138, i8* %6139, align 1, !tbaa !2446
  %6140 = xor i64 1, %6125
  %6141 = trunc i64 %6140 to i32
  %6142 = xor i32 %6141, %6129
  %6143 = lshr i32 %6142, 4
  %6144 = trunc i32 %6143 to i8
  %6145 = and i8 %6144, 1
  %6146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6145, i8* %6146, align 1, !tbaa !2447
  %6147 = icmp eq i32 %6129, 0
  %6148 = zext i1 %6147 to i8
  %6149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6148, i8* %6149, align 1, !tbaa !2448
  %6150 = lshr i32 %6129, 31
  %6151 = trunc i32 %6150 to i8
  %6152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6151, i8* %6152, align 1, !tbaa !2449
  %6153 = lshr i32 %6128, 31
  %6154 = xor i32 %6150, %6153
  %6155 = add nuw nsw i32 %6154, %6153
  %6156 = icmp eq i32 %6155, 2
  %6157 = zext i1 %6156 to i8
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6157, i8* %6158, align 1, !tbaa !2450
  %6159 = load i64, i64* %RBP
  %6160 = sub i64 %6159, 40
  %6161 = load i64, i64* %PC
  %6162 = add i64 %6161, 4
  store i64 %6162, i64* %PC
  %6163 = inttoptr i64 %6160 to i64*
  %6164 = load i64, i64* %6163
  store i64 %6164, i64* %RCX, align 8, !tbaa !2428
  %6165 = load i64, i64* %RSI
  %6166 = load i64, i64* %RCX
  %6167 = add i64 %6166, 20
  %6168 = load i64, i64* %PC
  %6169 = add i64 %6168, 4
  store i64 %6169, i64* %PC
  %6170 = inttoptr i64 %6167 to i32*
  %6171 = load i32, i32* %6170
  %6172 = shl i64 %6165, 32
  %6173 = ashr exact i64 %6172, 32
  %6174 = sext i32 %6171 to i64
  %6175 = mul nsw i64 %6174, %6173
  %6176 = trunc i64 %6175 to i32
  %6177 = and i64 %6175, 4294967295
  store i64 %6177, i64* %RSI, align 8, !tbaa !2428
  %6178 = shl i64 %6175, 32
  %6179 = ashr exact i64 %6178, 32
  %6180 = icmp ne i64 %6179, %6175
  %6181 = zext i1 %6180 to i8
  %6182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6181, i8* %6182, align 1, !tbaa !2432
  %6183 = and i32 %6176, 255
  %6184 = call i32 @llvm.ctpop.i32(i32 %6183) #16
  %6185 = trunc i32 %6184 to i8
  %6186 = and i8 %6185, 1
  %6187 = xor i8 %6186, 1
  %6188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6187, i8* %6188, align 1, !tbaa !2446
  %6189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6189, align 1, !tbaa !2447
  %6190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6190, align 1, !tbaa !2448
  %6191 = lshr i32 %6176, 31
  %6192 = trunc i32 %6191 to i8
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6192, i8* %6193, align 1, !tbaa !2449
  %6194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6181, i8* %6194, align 1, !tbaa !2450
  %6195 = load i64, i64* %RDX
  %6196 = load i32, i32* %ESI
  %6197 = zext i32 %6196 to i64
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 2
  store i64 %6199, i64* %PC
  %6200 = trunc i64 %6195 to i32
  %6201 = add i32 %6196, %6200
  %6202 = zext i32 %6201 to i64
  store i64 %6202, i64* %RDX, align 8, !tbaa !2428
  %6203 = icmp ult i32 %6201, %6200
  %6204 = icmp ult i32 %6201, %6196
  %6205 = or i1 %6203, %6204
  %6206 = zext i1 %6205 to i8
  %6207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6206, i8* %6207, align 1, !tbaa !2432
  %6208 = and i32 %6201, 255
  %6209 = call i32 @llvm.ctpop.i32(i32 %6208) #16
  %6210 = trunc i32 %6209 to i8
  %6211 = and i8 %6210, 1
  %6212 = xor i8 %6211, 1
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6212, i8* %6213, align 1, !tbaa !2446
  %6214 = xor i64 %6197, %6195
  %6215 = trunc i64 %6214 to i32
  %6216 = xor i32 %6215, %6201
  %6217 = lshr i32 %6216, 4
  %6218 = trunc i32 %6217 to i8
  %6219 = and i8 %6218, 1
  %6220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6219, i8* %6220, align 1, !tbaa !2447
  %6221 = icmp eq i32 %6201, 0
  %6222 = zext i1 %6221 to i8
  %6223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6222, i8* %6223, align 1, !tbaa !2448
  %6224 = lshr i32 %6201, 31
  %6225 = trunc i32 %6224 to i8
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6225, i8* %6226, align 1, !tbaa !2449
  %6227 = lshr i32 %6200, 31
  %6228 = lshr i32 %6196, 31
  %6229 = xor i32 %6224, %6227
  %6230 = xor i32 %6224, %6228
  %6231 = add nuw nsw i32 %6229, %6230
  %6232 = icmp eq i32 %6231, 2
  %6233 = zext i1 %6232 to i8
  %6234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6233, i8* %6234, align 1, !tbaa !2450
  %6235 = load i64, i64* %RBP
  %6236 = sub i64 %6235, 60
  %6237 = load i64, i64* %PC
  %6238 = add i64 %6237, 3
  store i64 %6238, i64* %PC
  %6239 = inttoptr i64 %6236 to i32*
  %6240 = load i32, i32* %6239
  %6241 = zext i32 %6240 to i64
  store i64 %6241, i64* %RSI, align 8, !tbaa !2428
  %6242 = load i64, i64* %RSI
  %6243 = load i64, i64* %PC
  %6244 = add i64 %6243, 3
  store i64 %6244, i64* %PC
  %6245 = trunc i64 %6242 to i32
  %6246 = add i32 1, %6245
  %6247 = zext i32 %6246 to i64
  store i64 %6247, i64* %RSI, align 8, !tbaa !2428
  %6248 = icmp ult i32 %6246, %6245
  %6249 = icmp ult i32 %6246, 1
  %6250 = or i1 %6248, %6249
  %6251 = zext i1 %6250 to i8
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6251, i8* %6252, align 1, !tbaa !2432
  %6253 = and i32 %6246, 255
  %6254 = call i32 @llvm.ctpop.i32(i32 %6253) #16
  %6255 = trunc i32 %6254 to i8
  %6256 = and i8 %6255, 1
  %6257 = xor i8 %6256, 1
  %6258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6257, i8* %6258, align 1, !tbaa !2446
  %6259 = xor i64 1, %6242
  %6260 = trunc i64 %6259 to i32
  %6261 = xor i32 %6260, %6246
  %6262 = lshr i32 %6261, 4
  %6263 = trunc i32 %6262 to i8
  %6264 = and i8 %6263, 1
  %6265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6264, i8* %6265, align 1, !tbaa !2447
  %6266 = icmp eq i32 %6246, 0
  %6267 = zext i1 %6266 to i8
  %6268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6267, i8* %6268, align 1, !tbaa !2448
  %6269 = lshr i32 %6246, 31
  %6270 = trunc i32 %6269 to i8
  %6271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6270, i8* %6271, align 1, !tbaa !2449
  %6272 = lshr i32 %6245, 31
  %6273 = xor i32 %6269, %6272
  %6274 = add nuw nsw i32 %6273, %6269
  %6275 = icmp eq i32 %6274, 2
  %6276 = zext i1 %6275 to i8
  %6277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6276, i8* %6277, align 1, !tbaa !2450
  %6278 = load i64, i64* %RDX
  %6279 = load i32, i32* %ESI
  %6280 = zext i32 %6279 to i64
  %6281 = load i64, i64* %PC
  %6282 = add i64 %6281, 2
  store i64 %6282, i64* %PC
  %6283 = trunc i64 %6278 to i32
  %6284 = add i32 %6279, %6283
  %6285 = zext i32 %6284 to i64
  store i64 %6285, i64* %RDX, align 8, !tbaa !2428
  %6286 = icmp ult i32 %6284, %6283
  %6287 = icmp ult i32 %6284, %6279
  %6288 = or i1 %6286, %6287
  %6289 = zext i1 %6288 to i8
  %6290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6289, i8* %6290, align 1, !tbaa !2432
  %6291 = and i32 %6284, 255
  %6292 = call i32 @llvm.ctpop.i32(i32 %6291) #16
  %6293 = trunc i32 %6292 to i8
  %6294 = and i8 %6293, 1
  %6295 = xor i8 %6294, 1
  %6296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6295, i8* %6296, align 1, !tbaa !2446
  %6297 = xor i64 %6280, %6278
  %6298 = trunc i64 %6297 to i32
  %6299 = xor i32 %6298, %6284
  %6300 = lshr i32 %6299, 4
  %6301 = trunc i32 %6300 to i8
  %6302 = and i8 %6301, 1
  %6303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6302, i8* %6303, align 1, !tbaa !2447
  %6304 = icmp eq i32 %6284, 0
  %6305 = zext i1 %6304 to i8
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6305, i8* %6306, align 1, !tbaa !2448
  %6307 = lshr i32 %6284, 31
  %6308 = trunc i32 %6307 to i8
  %6309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6308, i8* %6309, align 1, !tbaa !2449
  %6310 = lshr i32 %6283, 31
  %6311 = lshr i32 %6279, 31
  %6312 = xor i32 %6307, %6310
  %6313 = xor i32 %6307, %6311
  %6314 = add nuw nsw i32 %6312, %6313
  %6315 = icmp eq i32 %6314, 2
  %6316 = zext i1 %6315 to i8
  %6317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6316, i8* %6317, align 1, !tbaa !2450
  %6318 = load i32, i32* %EDX
  %6319 = zext i32 %6318 to i64
  %6320 = load i64, i64* %PC
  %6321 = add i64 %6320, 3
  store i64 %6321, i64* %PC
  %6322 = shl i64 %6319, 32
  %6323 = ashr exact i64 %6322, 32
  store i64 %6323, i64* %RCX, align 8, !tbaa !2428
  %6324 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6325 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6326 = load i64, i64* %RAX
  %6327 = load i64, i64* %RCX
  %6328 = mul i64 %6327, 4
  %6329 = add i64 %6328, %6326
  %6330 = load i64, i64* %PC
  %6331 = add i64 %6330, 5
  store i64 %6331, i64* %PC
  %6332 = bitcast i8* %6325 to <2 x float>*
  %6333 = load <2 x float>, <2 x float>* %6332, align 1
  %6334 = getelementptr inbounds i8, i8* %6325, i64 8
  %6335 = bitcast i8* %6334 to <2 x i32>*
  %6336 = load <2 x i32>, <2 x i32>* %6335, align 1
  %6337 = inttoptr i64 %6329 to float*
  %6338 = load float, float* %6337
  %6339 = extractelement <2 x float> %6333, i32 0
  %6340 = fsub float %6339, %6338
  %6341 = bitcast i8* %6324 to float*
  store float %6340, float* %6341, align 1, !tbaa !2452
  %6342 = bitcast <2 x float> %6333 to <2 x i32>
  %6343 = extractelement <2 x i32> %6342, i32 1
  %6344 = getelementptr inbounds i8, i8* %6324, i64 4
  %6345 = bitcast i8* %6344 to i32*
  store i32 %6343, i32* %6345, align 1, !tbaa !2452
  %6346 = extractelement <2 x i32> %6336, i32 0
  %6347 = getelementptr inbounds i8, i8* %6324, i64 8
  %6348 = bitcast i8* %6347 to i32*
  store i32 %6346, i32* %6348, align 1, !tbaa !2452
  %6349 = extractelement <2 x i32> %6336, i32 1
  %6350 = getelementptr inbounds i8, i8* %6324, i64 12
  %6351 = bitcast i8* %6350 to i32*
  store i32 %6349, i32* %6351, align 1, !tbaa !2452
  %6352 = load i64, i64* %RBP
  %6353 = sub i64 %6352, 40
  %6354 = load i64, i64* %PC
  %6355 = add i64 %6354, 4
  store i64 %6355, i64* %PC
  %6356 = inttoptr i64 %6353 to i64*
  %6357 = load i64, i64* %6356
  store i64 %6357, i64* %RAX, align 8, !tbaa !2428
  %6358 = load i64, i64* %RAX
  %6359 = load i64, i64* %PC
  %6360 = add i64 %6359, 3
  store i64 %6360, i64* %PC
  %6361 = inttoptr i64 %6358 to i64*
  %6362 = load i64, i64* %6361
  store i64 %6362, i64* %RAX, align 8, !tbaa !2428
  %6363 = load i64, i64* %RBP
  %6364 = sub i64 %6363, 40
  %6365 = load i64, i64* %PC
  %6366 = add i64 %6365, 4
  store i64 %6366, i64* %PC
  %6367 = inttoptr i64 %6364 to i64*
  %6368 = load i64, i64* %6367
  store i64 %6368, i64* %RCX, align 8, !tbaa !2428
  %6369 = load i64, i64* %RCX
  %6370 = add i64 %6369, 12
  %6371 = load i64, i64* %PC
  %6372 = add i64 %6371, 4
  store i64 %6372, i64* %PC
  %6373 = inttoptr i64 %6370 to i32*
  %6374 = load i32, i32* %6373
  %6375 = sext i32 %6374 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %6376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6376, align 1, !tbaa !2432
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6377, align 1, !tbaa !2446
  %6378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6378, align 1, !tbaa !2447
  %6379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6379, align 1, !tbaa !2448
  %6380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6380, align 1, !tbaa !2449
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6381, align 1, !tbaa !2450
  %6382 = load i64, i64* %RBP
  %6383 = sub i64 %6382, 40
  %6384 = load i64, i64* %PC
  %6385 = add i64 %6384, 4
  store i64 %6385, i64* %PC
  %6386 = inttoptr i64 %6383 to i64*
  %6387 = load i64, i64* %6386
  store i64 %6387, i64* %RCX, align 8, !tbaa !2428
  %6388 = load i64, i64* %RDX
  %6389 = load i64, i64* %RCX
  %6390 = add i64 %6389, 16
  %6391 = load i64, i64* %PC
  %6392 = add i64 %6391, 4
  store i64 %6392, i64* %PC
  %6393 = inttoptr i64 %6390 to i32*
  %6394 = load i32, i32* %6393
  %6395 = shl i64 %6388, 32
  %6396 = ashr exact i64 %6395, 32
  %6397 = sext i32 %6394 to i64
  %6398 = mul nsw i64 %6397, %6396
  %6399 = trunc i64 %6398 to i32
  %6400 = and i64 %6398, 4294967295
  store i64 %6400, i64* %RDX, align 8, !tbaa !2428
  %6401 = shl i64 %6398, 32
  %6402 = ashr exact i64 %6401, 32
  %6403 = icmp ne i64 %6402, %6398
  %6404 = zext i1 %6403 to i8
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6404, i8* %6405, align 1, !tbaa !2432
  %6406 = and i32 %6399, 255
  %6407 = call i32 @llvm.ctpop.i32(i32 %6406) #16
  %6408 = trunc i32 %6407 to i8
  %6409 = and i8 %6408, 1
  %6410 = xor i8 %6409, 1
  %6411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6410, i8* %6411, align 1, !tbaa !2446
  %6412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6412, align 1, !tbaa !2447
  %6413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6413, align 1, !tbaa !2448
  %6414 = lshr i32 %6399, 31
  %6415 = trunc i32 %6414 to i8
  %6416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6415, i8* %6416, align 1, !tbaa !2449
  %6417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6404, i8* %6417, align 1, !tbaa !2450
  %6418 = load i64, i64* %RBP
  %6419 = sub i64 %6418, 40
  %6420 = load i64, i64* %PC
  %6421 = add i64 %6420, 4
  store i64 %6421, i64* %PC
  %6422 = inttoptr i64 %6419 to i64*
  %6423 = load i64, i64* %6422
  store i64 %6423, i64* %RCX, align 8, !tbaa !2428
  %6424 = load i64, i64* %RDX
  %6425 = load i64, i64* %RCX
  %6426 = add i64 %6425, 20
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 4
  store i64 %6428, i64* %PC
  %6429 = inttoptr i64 %6426 to i32*
  %6430 = load i32, i32* %6429
  %6431 = shl i64 %6424, 32
  %6432 = ashr exact i64 %6431, 32
  %6433 = sext i32 %6430 to i64
  %6434 = mul nsw i64 %6433, %6432
  %6435 = trunc i64 %6434 to i32
  %6436 = and i64 %6434, 4294967295
  store i64 %6436, i64* %RDX, align 8, !tbaa !2428
  %6437 = shl i64 %6434, 32
  %6438 = ashr exact i64 %6437, 32
  %6439 = icmp ne i64 %6438, %6434
  %6440 = zext i1 %6439 to i8
  %6441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6440, i8* %6441, align 1, !tbaa !2432
  %6442 = and i32 %6435, 255
  %6443 = call i32 @llvm.ctpop.i32(i32 %6442) #16
  %6444 = trunc i32 %6443 to i8
  %6445 = and i8 %6444, 1
  %6446 = xor i8 %6445, 1
  %6447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6446, i8* %6447, align 1, !tbaa !2446
  %6448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6448, align 1, !tbaa !2447
  %6449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6449, align 1, !tbaa !2448
  %6450 = lshr i32 %6435, 31
  %6451 = trunc i32 %6450 to i8
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6451, i8* %6452, align 1, !tbaa !2449
  %6453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6440, i8* %6453, align 1, !tbaa !2450
  %6454 = load i64, i64* %RBP
  %6455 = sub i64 %6454, 52
  %6456 = load i64, i64* %PC
  %6457 = add i64 %6456, 3
  store i64 %6457, i64* %PC
  %6458 = inttoptr i64 %6455 to i32*
  %6459 = load i32, i32* %6458
  %6460 = zext i32 %6459 to i64
  store i64 %6460, i64* %RSI, align 8, !tbaa !2428
  %6461 = load i64, i64* %RBP
  %6462 = sub i64 %6461, 40
  %6463 = load i64, i64* %PC
  %6464 = add i64 %6463, 4
  store i64 %6464, i64* %PC
  %6465 = inttoptr i64 %6462 to i64*
  %6466 = load i64, i64* %6465
  store i64 %6466, i64* %RCX, align 8, !tbaa !2428
  %6467 = load i64, i64* %RSI
  %6468 = load i64, i64* %RCX
  %6469 = add i64 %6468, 16
  %6470 = load i64, i64* %PC
  %6471 = add i64 %6470, 4
  store i64 %6471, i64* %PC
  %6472 = inttoptr i64 %6469 to i32*
  %6473 = load i32, i32* %6472
  %6474 = shl i64 %6467, 32
  %6475 = ashr exact i64 %6474, 32
  %6476 = sext i32 %6473 to i64
  %6477 = mul nsw i64 %6476, %6475
  %6478 = trunc i64 %6477 to i32
  %6479 = and i64 %6477, 4294967295
  store i64 %6479, i64* %RSI, align 8, !tbaa !2428
  %6480 = shl i64 %6477, 32
  %6481 = ashr exact i64 %6480, 32
  %6482 = icmp ne i64 %6481, %6477
  %6483 = zext i1 %6482 to i8
  %6484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6483, i8* %6484, align 1, !tbaa !2432
  %6485 = and i32 %6478, 255
  %6486 = call i32 @llvm.ctpop.i32(i32 %6485) #16
  %6487 = trunc i32 %6486 to i8
  %6488 = and i8 %6487, 1
  %6489 = xor i8 %6488, 1
  %6490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6489, i8* %6490, align 1, !tbaa !2446
  %6491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6491, align 1, !tbaa !2447
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6492, align 1, !tbaa !2448
  %6493 = lshr i32 %6478, 31
  %6494 = trunc i32 %6493 to i8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6494, i8* %6495, align 1, !tbaa !2449
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6483, i8* %6496, align 1, !tbaa !2450
  %6497 = load i64, i64* %RBP
  %6498 = sub i64 %6497, 40
  %6499 = load i64, i64* %PC
  %6500 = add i64 %6499, 4
  store i64 %6500, i64* %PC
  %6501 = inttoptr i64 %6498 to i64*
  %6502 = load i64, i64* %6501
  store i64 %6502, i64* %RCX, align 8, !tbaa !2428
  %6503 = load i64, i64* %RSI
  %6504 = load i64, i64* %RCX
  %6505 = add i64 %6504, 20
  %6506 = load i64, i64* %PC
  %6507 = add i64 %6506, 4
  store i64 %6507, i64* %PC
  %6508 = inttoptr i64 %6505 to i32*
  %6509 = load i32, i32* %6508
  %6510 = shl i64 %6503, 32
  %6511 = ashr exact i64 %6510, 32
  %6512 = sext i32 %6509 to i64
  %6513 = mul nsw i64 %6512, %6511
  %6514 = trunc i64 %6513 to i32
  %6515 = and i64 %6513, 4294967295
  store i64 %6515, i64* %RSI, align 8, !tbaa !2428
  %6516 = shl i64 %6513, 32
  %6517 = ashr exact i64 %6516, 32
  %6518 = icmp ne i64 %6517, %6513
  %6519 = zext i1 %6518 to i8
  %6520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6519, i8* %6520, align 1, !tbaa !2432
  %6521 = and i32 %6514, 255
  %6522 = call i32 @llvm.ctpop.i32(i32 %6521) #16
  %6523 = trunc i32 %6522 to i8
  %6524 = and i8 %6523, 1
  %6525 = xor i8 %6524, 1
  %6526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6525, i8* %6526, align 1, !tbaa !2446
  %6527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6527, align 1, !tbaa !2447
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6528, align 1, !tbaa !2448
  %6529 = lshr i32 %6514, 31
  %6530 = trunc i32 %6529 to i8
  %6531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6530, i8* %6531, align 1, !tbaa !2449
  %6532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6519, i8* %6532, align 1, !tbaa !2450
  %6533 = load i64, i64* %RDX
  %6534 = load i32, i32* %ESI
  %6535 = zext i32 %6534 to i64
  %6536 = load i64, i64* %PC
  %6537 = add i64 %6536, 2
  store i64 %6537, i64* %PC
  %6538 = trunc i64 %6533 to i32
  %6539 = add i32 %6534, %6538
  %6540 = zext i32 %6539 to i64
  store i64 %6540, i64* %RDX, align 8, !tbaa !2428
  %6541 = icmp ult i32 %6539, %6538
  %6542 = icmp ult i32 %6539, %6534
  %6543 = or i1 %6541, %6542
  %6544 = zext i1 %6543 to i8
  %6545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6544, i8* %6545, align 1, !tbaa !2432
  %6546 = and i32 %6539, 255
  %6547 = call i32 @llvm.ctpop.i32(i32 %6546) #16
  %6548 = trunc i32 %6547 to i8
  %6549 = and i8 %6548, 1
  %6550 = xor i8 %6549, 1
  %6551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6550, i8* %6551, align 1, !tbaa !2446
  %6552 = xor i64 %6535, %6533
  %6553 = trunc i64 %6552 to i32
  %6554 = xor i32 %6553, %6539
  %6555 = lshr i32 %6554, 4
  %6556 = trunc i32 %6555 to i8
  %6557 = and i8 %6556, 1
  %6558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6557, i8* %6558, align 1, !tbaa !2447
  %6559 = icmp eq i32 %6539, 0
  %6560 = zext i1 %6559 to i8
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6560, i8* %6561, align 1, !tbaa !2448
  %6562 = lshr i32 %6539, 31
  %6563 = trunc i32 %6562 to i8
  %6564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6563, i8* %6564, align 1, !tbaa !2449
  %6565 = lshr i32 %6538, 31
  %6566 = lshr i32 %6534, 31
  %6567 = xor i32 %6562, %6565
  %6568 = xor i32 %6562, %6566
  %6569 = add nuw nsw i32 %6567, %6568
  %6570 = icmp eq i32 %6569, 2
  %6571 = zext i1 %6570 to i8
  %6572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6571, i8* %6572, align 1, !tbaa !2450
  %6573 = load i64, i64* %RBP
  %6574 = sub i64 %6573, 56
  %6575 = load i64, i64* %PC
  %6576 = add i64 %6575, 3
  store i64 %6576, i64* %PC
  %6577 = inttoptr i64 %6574 to i32*
  %6578 = load i32, i32* %6577
  %6579 = zext i32 %6578 to i64
  store i64 %6579, i64* %RSI, align 8, !tbaa !2428
  %6580 = load i64, i64* %RSI
  %6581 = load i64, i64* %PC
  %6582 = add i64 %6581, 3
  store i64 %6582, i64* %PC
  %6583 = trunc i64 %6580 to i32
  %6584 = add i32 1, %6583
  %6585 = zext i32 %6584 to i64
  store i64 %6585, i64* %RSI, align 8, !tbaa !2428
  %6586 = icmp ult i32 %6584, %6583
  %6587 = icmp ult i32 %6584, 1
  %6588 = or i1 %6586, %6587
  %6589 = zext i1 %6588 to i8
  %6590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6589, i8* %6590, align 1, !tbaa !2432
  %6591 = and i32 %6584, 255
  %6592 = call i32 @llvm.ctpop.i32(i32 %6591) #16
  %6593 = trunc i32 %6592 to i8
  %6594 = and i8 %6593, 1
  %6595 = xor i8 %6594, 1
  %6596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6595, i8* %6596, align 1, !tbaa !2446
  %6597 = xor i64 1, %6580
  %6598 = trunc i64 %6597 to i32
  %6599 = xor i32 %6598, %6584
  %6600 = lshr i32 %6599, 4
  %6601 = trunc i32 %6600 to i8
  %6602 = and i8 %6601, 1
  %6603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6602, i8* %6603, align 1, !tbaa !2447
  %6604 = icmp eq i32 %6584, 0
  %6605 = zext i1 %6604 to i8
  %6606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6605, i8* %6606, align 1, !tbaa !2448
  %6607 = lshr i32 %6584, 31
  %6608 = trunc i32 %6607 to i8
  %6609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6608, i8* %6609, align 1, !tbaa !2449
  %6610 = lshr i32 %6583, 31
  %6611 = xor i32 %6607, %6610
  %6612 = add nuw nsw i32 %6611, %6607
  %6613 = icmp eq i32 %6612, 2
  %6614 = zext i1 %6613 to i8
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6614, i8* %6615, align 1, !tbaa !2450
  %6616 = load i64, i64* %RBP
  %6617 = sub i64 %6616, 40
  %6618 = load i64, i64* %PC
  %6619 = add i64 %6618, 4
  store i64 %6619, i64* %PC
  %6620 = inttoptr i64 %6617 to i64*
  %6621 = load i64, i64* %6620
  store i64 %6621, i64* %RCX, align 8, !tbaa !2428
  %6622 = load i64, i64* %RSI
  %6623 = load i64, i64* %RCX
  %6624 = add i64 %6623, 20
  %6625 = load i64, i64* %PC
  %6626 = add i64 %6625, 4
  store i64 %6626, i64* %PC
  %6627 = inttoptr i64 %6624 to i32*
  %6628 = load i32, i32* %6627
  %6629 = shl i64 %6622, 32
  %6630 = ashr exact i64 %6629, 32
  %6631 = sext i32 %6628 to i64
  %6632 = mul nsw i64 %6631, %6630
  %6633 = trunc i64 %6632 to i32
  %6634 = and i64 %6632, 4294967295
  store i64 %6634, i64* %RSI, align 8, !tbaa !2428
  %6635 = shl i64 %6632, 32
  %6636 = ashr exact i64 %6635, 32
  %6637 = icmp ne i64 %6636, %6632
  %6638 = zext i1 %6637 to i8
  %6639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6638, i8* %6639, align 1, !tbaa !2432
  %6640 = and i32 %6633, 255
  %6641 = call i32 @llvm.ctpop.i32(i32 %6640) #16
  %6642 = trunc i32 %6641 to i8
  %6643 = and i8 %6642, 1
  %6644 = xor i8 %6643, 1
  %6645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6644, i8* %6645, align 1, !tbaa !2446
  %6646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6646, align 1, !tbaa !2447
  %6647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6647, align 1, !tbaa !2448
  %6648 = lshr i32 %6633, 31
  %6649 = trunc i32 %6648 to i8
  %6650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6649, i8* %6650, align 1, !tbaa !2449
  %6651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6638, i8* %6651, align 1, !tbaa !2450
  %6652 = load i64, i64* %RDX
  %6653 = load i32, i32* %ESI
  %6654 = zext i32 %6653 to i64
  %6655 = load i64, i64* %PC
  %6656 = add i64 %6655, 2
  store i64 %6656, i64* %PC
  %6657 = trunc i64 %6652 to i32
  %6658 = add i32 %6653, %6657
  %6659 = zext i32 %6658 to i64
  store i64 %6659, i64* %RDX, align 8, !tbaa !2428
  %6660 = icmp ult i32 %6658, %6657
  %6661 = icmp ult i32 %6658, %6653
  %6662 = or i1 %6660, %6661
  %6663 = zext i1 %6662 to i8
  %6664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6663, i8* %6664, align 1, !tbaa !2432
  %6665 = and i32 %6658, 255
  %6666 = call i32 @llvm.ctpop.i32(i32 %6665) #16
  %6667 = trunc i32 %6666 to i8
  %6668 = and i8 %6667, 1
  %6669 = xor i8 %6668, 1
  %6670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6669, i8* %6670, align 1, !tbaa !2446
  %6671 = xor i64 %6654, %6652
  %6672 = trunc i64 %6671 to i32
  %6673 = xor i32 %6672, %6658
  %6674 = lshr i32 %6673, 4
  %6675 = trunc i32 %6674 to i8
  %6676 = and i8 %6675, 1
  %6677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6676, i8* %6677, align 1, !tbaa !2447
  %6678 = icmp eq i32 %6658, 0
  %6679 = zext i1 %6678 to i8
  %6680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6679, i8* %6680, align 1, !tbaa !2448
  %6681 = lshr i32 %6658, 31
  %6682 = trunc i32 %6681 to i8
  %6683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6682, i8* %6683, align 1, !tbaa !2449
  %6684 = lshr i32 %6657, 31
  %6685 = lshr i32 %6653, 31
  %6686 = xor i32 %6681, %6684
  %6687 = xor i32 %6681, %6685
  %6688 = add nuw nsw i32 %6686, %6687
  %6689 = icmp eq i32 %6688, 2
  %6690 = zext i1 %6689 to i8
  %6691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6690, i8* %6691, align 1, !tbaa !2450
  %6692 = load i64, i64* %RBP
  %6693 = sub i64 %6692, 60
  %6694 = load i64, i64* %PC
  %6695 = add i64 %6694, 3
  store i64 %6695, i64* %PC
  %6696 = inttoptr i64 %6693 to i32*
  %6697 = load i32, i32* %6696
  %6698 = zext i32 %6697 to i64
  store i64 %6698, i64* %RSI, align 8, !tbaa !2428
  %6699 = load i64, i64* %RSI
  %6700 = load i64, i64* %PC
  %6701 = add i64 %6700, 3
  store i64 %6701, i64* %PC
  %6702 = trunc i64 %6699 to i32
  %6703 = sub i32 %6702, 1
  %6704 = zext i32 %6703 to i64
  store i64 %6704, i64* %RSI, align 8, !tbaa !2428
  %6705 = icmp ult i32 %6702, 1
  %6706 = zext i1 %6705 to i8
  %6707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6706, i8* %6707, align 1, !tbaa !2432
  %6708 = and i32 %6703, 255
  %6709 = call i32 @llvm.ctpop.i32(i32 %6708) #16
  %6710 = trunc i32 %6709 to i8
  %6711 = and i8 %6710, 1
  %6712 = xor i8 %6711, 1
  %6713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6712, i8* %6713, align 1, !tbaa !2446
  %6714 = xor i64 1, %6699
  %6715 = trunc i64 %6714 to i32
  %6716 = xor i32 %6715, %6703
  %6717 = lshr i32 %6716, 4
  %6718 = trunc i32 %6717 to i8
  %6719 = and i8 %6718, 1
  %6720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6719, i8* %6720, align 1, !tbaa !2447
  %6721 = icmp eq i32 %6703, 0
  %6722 = zext i1 %6721 to i8
  %6723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6722, i8* %6723, align 1, !tbaa !2448
  %6724 = lshr i32 %6703, 31
  %6725 = trunc i32 %6724 to i8
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6725, i8* %6726, align 1, !tbaa !2449
  %6727 = lshr i32 %6702, 31
  %6728 = xor i32 %6724, %6727
  %6729 = add nuw nsw i32 %6728, %6727
  %6730 = icmp eq i32 %6729, 2
  %6731 = zext i1 %6730 to i8
  %6732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6731, i8* %6732, align 1, !tbaa !2450
  %6733 = load i64, i64* %RDX
  %6734 = load i32, i32* %ESI
  %6735 = zext i32 %6734 to i64
  %6736 = load i64, i64* %PC
  %6737 = add i64 %6736, 2
  store i64 %6737, i64* %PC
  %6738 = trunc i64 %6733 to i32
  %6739 = add i32 %6734, %6738
  %6740 = zext i32 %6739 to i64
  store i64 %6740, i64* %RDX, align 8, !tbaa !2428
  %6741 = icmp ult i32 %6739, %6738
  %6742 = icmp ult i32 %6739, %6734
  %6743 = or i1 %6741, %6742
  %6744 = zext i1 %6743 to i8
  %6745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6744, i8* %6745, align 1, !tbaa !2432
  %6746 = and i32 %6739, 255
  %6747 = call i32 @llvm.ctpop.i32(i32 %6746) #16
  %6748 = trunc i32 %6747 to i8
  %6749 = and i8 %6748, 1
  %6750 = xor i8 %6749, 1
  %6751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6750, i8* %6751, align 1, !tbaa !2446
  %6752 = xor i64 %6735, %6733
  %6753 = trunc i64 %6752 to i32
  %6754 = xor i32 %6753, %6739
  %6755 = lshr i32 %6754, 4
  %6756 = trunc i32 %6755 to i8
  %6757 = and i8 %6756, 1
  %6758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6757, i8* %6758, align 1, !tbaa !2447
  %6759 = icmp eq i32 %6739, 0
  %6760 = zext i1 %6759 to i8
  %6761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6760, i8* %6761, align 1, !tbaa !2448
  %6762 = lshr i32 %6739, 31
  %6763 = trunc i32 %6762 to i8
  %6764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6763, i8* %6764, align 1, !tbaa !2449
  %6765 = lshr i32 %6738, 31
  %6766 = lshr i32 %6734, 31
  %6767 = xor i32 %6762, %6765
  %6768 = xor i32 %6762, %6766
  %6769 = add nuw nsw i32 %6767, %6768
  %6770 = icmp eq i32 %6769, 2
  %6771 = zext i1 %6770 to i8
  %6772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6771, i8* %6772, align 1, !tbaa !2450
  %6773 = load i32, i32* %EDX
  %6774 = zext i32 %6773 to i64
  %6775 = load i64, i64* %PC
  %6776 = add i64 %6775, 3
  store i64 %6776, i64* %PC
  %6777 = shl i64 %6774, 32
  %6778 = ashr exact i64 %6777, 32
  store i64 %6778, i64* %RCX, align 8, !tbaa !2428
  %6779 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6780 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6781 = load i64, i64* %RAX
  %6782 = load i64, i64* %RCX
  %6783 = mul i64 %6782, 4
  %6784 = add i64 %6783, %6781
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 5
  store i64 %6786, i64* %PC
  %6787 = bitcast i8* %6780 to <2 x float>*
  %6788 = load <2 x float>, <2 x float>* %6787, align 1
  %6789 = getelementptr inbounds i8, i8* %6780, i64 8
  %6790 = bitcast i8* %6789 to <2 x i32>*
  %6791 = load <2 x i32>, <2 x i32>* %6790, align 1
  %6792 = inttoptr i64 %6784 to float*
  %6793 = load float, float* %6792
  %6794 = extractelement <2 x float> %6788, i32 0
  %6795 = fsub float %6794, %6793
  %6796 = bitcast i8* %6779 to float*
  store float %6795, float* %6796, align 1, !tbaa !2452
  %6797 = bitcast <2 x float> %6788 to <2 x i32>
  %6798 = extractelement <2 x i32> %6797, i32 1
  %6799 = getelementptr inbounds i8, i8* %6779, i64 4
  %6800 = bitcast i8* %6799 to i32*
  store i32 %6798, i32* %6800, align 1, !tbaa !2452
  %6801 = extractelement <2 x i32> %6791, i32 0
  %6802 = getelementptr inbounds i8, i8* %6779, i64 8
  %6803 = bitcast i8* %6802 to i32*
  store i32 %6801, i32* %6803, align 1, !tbaa !2452
  %6804 = extractelement <2 x i32> %6791, i32 1
  %6805 = getelementptr inbounds i8, i8* %6779, i64 12
  %6806 = bitcast i8* %6805 to i32*
  store i32 %6804, i32* %6806, align 1, !tbaa !2452
  %6807 = load i64, i64* %RBP
  %6808 = sub i64 %6807, 40
  %6809 = load i64, i64* %PC
  %6810 = add i64 %6809, 4
  store i64 %6810, i64* %PC
  %6811 = inttoptr i64 %6808 to i64*
  %6812 = load i64, i64* %6811
  store i64 %6812, i64* %RAX, align 8, !tbaa !2428
  %6813 = load i64, i64* %RAX
  %6814 = load i64, i64* %PC
  %6815 = add i64 %6814, 3
  store i64 %6815, i64* %PC
  %6816 = inttoptr i64 %6813 to i64*
  %6817 = load i64, i64* %6816
  store i64 %6817, i64* %RAX, align 8, !tbaa !2428
  %6818 = load i64, i64* %RBP
  %6819 = sub i64 %6818, 40
  %6820 = load i64, i64* %PC
  %6821 = add i64 %6820, 4
  store i64 %6821, i64* %PC
  %6822 = inttoptr i64 %6819 to i64*
  %6823 = load i64, i64* %6822
  store i64 %6823, i64* %RCX, align 8, !tbaa !2428
  %6824 = load i64, i64* %RCX
  %6825 = add i64 %6824, 12
  %6826 = load i64, i64* %PC
  %6827 = add i64 %6826, 4
  store i64 %6827, i64* %PC
  %6828 = inttoptr i64 %6825 to i32*
  %6829 = load i32, i32* %6828
  %6830 = sext i32 %6829 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %6831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6831, align 1, !tbaa !2432
  %6832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6832, align 1, !tbaa !2446
  %6833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6833, align 1, !tbaa !2447
  %6834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6834, align 1, !tbaa !2448
  %6835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6835, align 1, !tbaa !2449
  %6836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6836, align 1, !tbaa !2450
  %6837 = load i64, i64* %RBP
  %6838 = sub i64 %6837, 40
  %6839 = load i64, i64* %PC
  %6840 = add i64 %6839, 4
  store i64 %6840, i64* %PC
  %6841 = inttoptr i64 %6838 to i64*
  %6842 = load i64, i64* %6841
  store i64 %6842, i64* %RCX, align 8, !tbaa !2428
  %6843 = load i64, i64* %RDX
  %6844 = load i64, i64* %RCX
  %6845 = add i64 %6844, 16
  %6846 = load i64, i64* %PC
  %6847 = add i64 %6846, 4
  store i64 %6847, i64* %PC
  %6848 = inttoptr i64 %6845 to i32*
  %6849 = load i32, i32* %6848
  %6850 = shl i64 %6843, 32
  %6851 = ashr exact i64 %6850, 32
  %6852 = sext i32 %6849 to i64
  %6853 = mul nsw i64 %6852, %6851
  %6854 = trunc i64 %6853 to i32
  %6855 = and i64 %6853, 4294967295
  store i64 %6855, i64* %RDX, align 8, !tbaa !2428
  %6856 = shl i64 %6853, 32
  %6857 = ashr exact i64 %6856, 32
  %6858 = icmp ne i64 %6857, %6853
  %6859 = zext i1 %6858 to i8
  %6860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6859, i8* %6860, align 1, !tbaa !2432
  %6861 = and i32 %6854, 255
  %6862 = call i32 @llvm.ctpop.i32(i32 %6861) #16
  %6863 = trunc i32 %6862 to i8
  %6864 = and i8 %6863, 1
  %6865 = xor i8 %6864, 1
  %6866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6865, i8* %6866, align 1, !tbaa !2446
  %6867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6867, align 1, !tbaa !2447
  %6868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6868, align 1, !tbaa !2448
  %6869 = lshr i32 %6854, 31
  %6870 = trunc i32 %6869 to i8
  %6871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6870, i8* %6871, align 1, !tbaa !2449
  %6872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6859, i8* %6872, align 1, !tbaa !2450
  %6873 = load i64, i64* %RBP
  %6874 = sub i64 %6873, 40
  %6875 = load i64, i64* %PC
  %6876 = add i64 %6875, 4
  store i64 %6876, i64* %PC
  %6877 = inttoptr i64 %6874 to i64*
  %6878 = load i64, i64* %6877
  store i64 %6878, i64* %RCX, align 8, !tbaa !2428
  %6879 = load i64, i64* %RDX
  %6880 = load i64, i64* %RCX
  %6881 = add i64 %6880, 20
  %6882 = load i64, i64* %PC
  %6883 = add i64 %6882, 4
  store i64 %6883, i64* %PC
  %6884 = inttoptr i64 %6881 to i32*
  %6885 = load i32, i32* %6884
  %6886 = shl i64 %6879, 32
  %6887 = ashr exact i64 %6886, 32
  %6888 = sext i32 %6885 to i64
  %6889 = mul nsw i64 %6888, %6887
  %6890 = trunc i64 %6889 to i32
  %6891 = and i64 %6889, 4294967295
  store i64 %6891, i64* %RDX, align 8, !tbaa !2428
  %6892 = shl i64 %6889, 32
  %6893 = ashr exact i64 %6892, 32
  %6894 = icmp ne i64 %6893, %6889
  %6895 = zext i1 %6894 to i8
  %6896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6895, i8* %6896, align 1, !tbaa !2432
  %6897 = and i32 %6890, 255
  %6898 = call i32 @llvm.ctpop.i32(i32 %6897) #16
  %6899 = trunc i32 %6898 to i8
  %6900 = and i8 %6899, 1
  %6901 = xor i8 %6900, 1
  %6902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6901, i8* %6902, align 1, !tbaa !2446
  %6903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6903, align 1, !tbaa !2447
  %6904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6904, align 1, !tbaa !2448
  %6905 = lshr i32 %6890, 31
  %6906 = trunc i32 %6905 to i8
  %6907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6906, i8* %6907, align 1, !tbaa !2449
  %6908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6895, i8* %6908, align 1, !tbaa !2450
  %6909 = load i64, i64* %RBP
  %6910 = sub i64 %6909, 52
  %6911 = load i64, i64* %PC
  %6912 = add i64 %6911, 3
  store i64 %6912, i64* %PC
  %6913 = inttoptr i64 %6910 to i32*
  %6914 = load i32, i32* %6913
  %6915 = zext i32 %6914 to i64
  store i64 %6915, i64* %RSI, align 8, !tbaa !2428
  %6916 = load i64, i64* %RBP
  %6917 = sub i64 %6916, 40
  %6918 = load i64, i64* %PC
  %6919 = add i64 %6918, 4
  store i64 %6919, i64* %PC
  %6920 = inttoptr i64 %6917 to i64*
  %6921 = load i64, i64* %6920
  store i64 %6921, i64* %RCX, align 8, !tbaa !2428
  %6922 = load i64, i64* %RSI
  %6923 = load i64, i64* %RCX
  %6924 = add i64 %6923, 16
  %6925 = load i64, i64* %PC
  %6926 = add i64 %6925, 4
  store i64 %6926, i64* %PC
  %6927 = inttoptr i64 %6924 to i32*
  %6928 = load i32, i32* %6927
  %6929 = shl i64 %6922, 32
  %6930 = ashr exact i64 %6929, 32
  %6931 = sext i32 %6928 to i64
  %6932 = mul nsw i64 %6931, %6930
  %6933 = trunc i64 %6932 to i32
  %6934 = and i64 %6932, 4294967295
  store i64 %6934, i64* %RSI, align 8, !tbaa !2428
  %6935 = shl i64 %6932, 32
  %6936 = ashr exact i64 %6935, 32
  %6937 = icmp ne i64 %6936, %6932
  %6938 = zext i1 %6937 to i8
  %6939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6938, i8* %6939, align 1, !tbaa !2432
  %6940 = and i32 %6933, 255
  %6941 = call i32 @llvm.ctpop.i32(i32 %6940) #16
  %6942 = trunc i32 %6941 to i8
  %6943 = and i8 %6942, 1
  %6944 = xor i8 %6943, 1
  %6945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6944, i8* %6945, align 1, !tbaa !2446
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6946, align 1, !tbaa !2447
  %6947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6947, align 1, !tbaa !2448
  %6948 = lshr i32 %6933, 31
  %6949 = trunc i32 %6948 to i8
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6949, i8* %6950, align 1, !tbaa !2449
  %6951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6938, i8* %6951, align 1, !tbaa !2450
  %6952 = load i64, i64* %RBP
  %6953 = sub i64 %6952, 40
  %6954 = load i64, i64* %PC
  %6955 = add i64 %6954, 4
  store i64 %6955, i64* %PC
  %6956 = inttoptr i64 %6953 to i64*
  %6957 = load i64, i64* %6956
  store i64 %6957, i64* %RCX, align 8, !tbaa !2428
  %6958 = load i64, i64* %RSI
  %6959 = load i64, i64* %RCX
  %6960 = add i64 %6959, 20
  %6961 = load i64, i64* %PC
  %6962 = add i64 %6961, 4
  store i64 %6962, i64* %PC
  %6963 = inttoptr i64 %6960 to i32*
  %6964 = load i32, i32* %6963
  %6965 = shl i64 %6958, 32
  %6966 = ashr exact i64 %6965, 32
  %6967 = sext i32 %6964 to i64
  %6968 = mul nsw i64 %6967, %6966
  %6969 = trunc i64 %6968 to i32
  %6970 = and i64 %6968, 4294967295
  store i64 %6970, i64* %RSI, align 8, !tbaa !2428
  %6971 = shl i64 %6968, 32
  %6972 = ashr exact i64 %6971, 32
  %6973 = icmp ne i64 %6972, %6968
  %6974 = zext i1 %6973 to i8
  %6975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6974, i8* %6975, align 1, !tbaa !2432
  %6976 = and i32 %6969, 255
  %6977 = call i32 @llvm.ctpop.i32(i32 %6976) #16
  %6978 = trunc i32 %6977 to i8
  %6979 = and i8 %6978, 1
  %6980 = xor i8 %6979, 1
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6980, i8* %6981, align 1, !tbaa !2446
  %6982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6982, align 1, !tbaa !2447
  %6983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6983, align 1, !tbaa !2448
  %6984 = lshr i32 %6969, 31
  %6985 = trunc i32 %6984 to i8
  %6986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6985, i8* %6986, align 1, !tbaa !2449
  %6987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6974, i8* %6987, align 1, !tbaa !2450
  %6988 = load i64, i64* %RDX
  %6989 = load i32, i32* %ESI
  %6990 = zext i32 %6989 to i64
  %6991 = load i64, i64* %PC
  %6992 = add i64 %6991, 2
  store i64 %6992, i64* %PC
  %6993 = trunc i64 %6988 to i32
  %6994 = add i32 %6989, %6993
  %6995 = zext i32 %6994 to i64
  store i64 %6995, i64* %RDX, align 8, !tbaa !2428
  %6996 = icmp ult i32 %6994, %6993
  %6997 = icmp ult i32 %6994, %6989
  %6998 = or i1 %6996, %6997
  %6999 = zext i1 %6998 to i8
  %7000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6999, i8* %7000, align 1, !tbaa !2432
  %7001 = and i32 %6994, 255
  %7002 = call i32 @llvm.ctpop.i32(i32 %7001) #16
  %7003 = trunc i32 %7002 to i8
  %7004 = and i8 %7003, 1
  %7005 = xor i8 %7004, 1
  %7006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7005, i8* %7006, align 1, !tbaa !2446
  %7007 = xor i64 %6990, %6988
  %7008 = trunc i64 %7007 to i32
  %7009 = xor i32 %7008, %6994
  %7010 = lshr i32 %7009, 4
  %7011 = trunc i32 %7010 to i8
  %7012 = and i8 %7011, 1
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7012, i8* %7013, align 1, !tbaa !2447
  %7014 = icmp eq i32 %6994, 0
  %7015 = zext i1 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7015, i8* %7016, align 1, !tbaa !2448
  %7017 = lshr i32 %6994, 31
  %7018 = trunc i32 %7017 to i8
  %7019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7018, i8* %7019, align 1, !tbaa !2449
  %7020 = lshr i32 %6993, 31
  %7021 = lshr i32 %6989, 31
  %7022 = xor i32 %7017, %7020
  %7023 = xor i32 %7017, %7021
  %7024 = add nuw nsw i32 %7022, %7023
  %7025 = icmp eq i32 %7024, 2
  %7026 = zext i1 %7025 to i8
  %7027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7026, i8* %7027, align 1, !tbaa !2450
  %7028 = load i64, i64* %RBP
  %7029 = sub i64 %7028, 56
  %7030 = load i64, i64* %PC
  %7031 = add i64 %7030, 3
  store i64 %7031, i64* %PC
  %7032 = inttoptr i64 %7029 to i32*
  %7033 = load i32, i32* %7032
  %7034 = zext i32 %7033 to i64
  store i64 %7034, i64* %RSI, align 8, !tbaa !2428
  %7035 = load i64, i64* %RSI
  %7036 = load i64, i64* %PC
  %7037 = add i64 %7036, 3
  store i64 %7037, i64* %PC
  %7038 = trunc i64 %7035 to i32
  %7039 = sub i32 %7038, 1
  %7040 = zext i32 %7039 to i64
  store i64 %7040, i64* %RSI, align 8, !tbaa !2428
  %7041 = icmp ult i32 %7038, 1
  %7042 = zext i1 %7041 to i8
  %7043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7042, i8* %7043, align 1, !tbaa !2432
  %7044 = and i32 %7039, 255
  %7045 = call i32 @llvm.ctpop.i32(i32 %7044) #16
  %7046 = trunc i32 %7045 to i8
  %7047 = and i8 %7046, 1
  %7048 = xor i8 %7047, 1
  %7049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7048, i8* %7049, align 1, !tbaa !2446
  %7050 = xor i64 1, %7035
  %7051 = trunc i64 %7050 to i32
  %7052 = xor i32 %7051, %7039
  %7053 = lshr i32 %7052, 4
  %7054 = trunc i32 %7053 to i8
  %7055 = and i8 %7054, 1
  %7056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7055, i8* %7056, align 1, !tbaa !2447
  %7057 = icmp eq i32 %7039, 0
  %7058 = zext i1 %7057 to i8
  %7059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7058, i8* %7059, align 1, !tbaa !2448
  %7060 = lshr i32 %7039, 31
  %7061 = trunc i32 %7060 to i8
  %7062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7061, i8* %7062, align 1, !tbaa !2449
  %7063 = lshr i32 %7038, 31
  %7064 = xor i32 %7060, %7063
  %7065 = add nuw nsw i32 %7064, %7063
  %7066 = icmp eq i32 %7065, 2
  %7067 = zext i1 %7066 to i8
  %7068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7067, i8* %7068, align 1, !tbaa !2450
  %7069 = load i64, i64* %RBP
  %7070 = sub i64 %7069, 40
  %7071 = load i64, i64* %PC
  %7072 = add i64 %7071, 4
  store i64 %7072, i64* %PC
  %7073 = inttoptr i64 %7070 to i64*
  %7074 = load i64, i64* %7073
  store i64 %7074, i64* %RCX, align 8, !tbaa !2428
  %7075 = load i64, i64* %RSI
  %7076 = load i64, i64* %RCX
  %7077 = add i64 %7076, 20
  %7078 = load i64, i64* %PC
  %7079 = add i64 %7078, 4
  store i64 %7079, i64* %PC
  %7080 = inttoptr i64 %7077 to i32*
  %7081 = load i32, i32* %7080
  %7082 = shl i64 %7075, 32
  %7083 = ashr exact i64 %7082, 32
  %7084 = sext i32 %7081 to i64
  %7085 = mul nsw i64 %7084, %7083
  %7086 = trunc i64 %7085 to i32
  %7087 = and i64 %7085, 4294967295
  store i64 %7087, i64* %RSI, align 8, !tbaa !2428
  %7088 = shl i64 %7085, 32
  %7089 = ashr exact i64 %7088, 32
  %7090 = icmp ne i64 %7089, %7085
  %7091 = zext i1 %7090 to i8
  %7092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7091, i8* %7092, align 1, !tbaa !2432
  %7093 = and i32 %7086, 255
  %7094 = call i32 @llvm.ctpop.i32(i32 %7093) #16
  %7095 = trunc i32 %7094 to i8
  %7096 = and i8 %7095, 1
  %7097 = xor i8 %7096, 1
  %7098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7097, i8* %7098, align 1, !tbaa !2446
  %7099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7099, align 1, !tbaa !2447
  %7100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7100, align 1, !tbaa !2448
  %7101 = lshr i32 %7086, 31
  %7102 = trunc i32 %7101 to i8
  %7103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7102, i8* %7103, align 1, !tbaa !2449
  %7104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7091, i8* %7104, align 1, !tbaa !2450
  %7105 = load i64, i64* %RDX
  %7106 = load i32, i32* %ESI
  %7107 = zext i32 %7106 to i64
  %7108 = load i64, i64* %PC
  %7109 = add i64 %7108, 2
  store i64 %7109, i64* %PC
  %7110 = trunc i64 %7105 to i32
  %7111 = add i32 %7106, %7110
  %7112 = zext i32 %7111 to i64
  store i64 %7112, i64* %RDX, align 8, !tbaa !2428
  %7113 = icmp ult i32 %7111, %7110
  %7114 = icmp ult i32 %7111, %7106
  %7115 = or i1 %7113, %7114
  %7116 = zext i1 %7115 to i8
  %7117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7116, i8* %7117, align 1, !tbaa !2432
  %7118 = and i32 %7111, 255
  %7119 = call i32 @llvm.ctpop.i32(i32 %7118) #16
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  %7122 = xor i8 %7121, 1
  %7123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7122, i8* %7123, align 1, !tbaa !2446
  %7124 = xor i64 %7107, %7105
  %7125 = trunc i64 %7124 to i32
  %7126 = xor i32 %7125, %7111
  %7127 = lshr i32 %7126, 4
  %7128 = trunc i32 %7127 to i8
  %7129 = and i8 %7128, 1
  %7130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7129, i8* %7130, align 1, !tbaa !2447
  %7131 = icmp eq i32 %7111, 0
  %7132 = zext i1 %7131 to i8
  %7133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7132, i8* %7133, align 1, !tbaa !2448
  %7134 = lshr i32 %7111, 31
  %7135 = trunc i32 %7134 to i8
  %7136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7135, i8* %7136, align 1, !tbaa !2449
  %7137 = lshr i32 %7110, 31
  %7138 = lshr i32 %7106, 31
  %7139 = xor i32 %7134, %7137
  %7140 = xor i32 %7134, %7138
  %7141 = add nuw nsw i32 %7139, %7140
  %7142 = icmp eq i32 %7141, 2
  %7143 = zext i1 %7142 to i8
  %7144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7143, i8* %7144, align 1, !tbaa !2450
  %7145 = load i64, i64* %RBP
  %7146 = sub i64 %7145, 60
  %7147 = load i64, i64* %PC
  %7148 = add i64 %7147, 3
  store i64 %7148, i64* %PC
  %7149 = inttoptr i64 %7146 to i32*
  %7150 = load i32, i32* %7149
  %7151 = zext i32 %7150 to i64
  store i64 %7151, i64* %RSI, align 8, !tbaa !2428
  %7152 = load i64, i64* %RSI
  %7153 = load i64, i64* %PC
  %7154 = add i64 %7153, 3
  store i64 %7154, i64* %PC
  %7155 = trunc i64 %7152 to i32
  %7156 = sub i32 %7155, 1
  %7157 = zext i32 %7156 to i64
  store i64 %7157, i64* %RSI, align 8, !tbaa !2428
  %7158 = icmp ult i32 %7155, 1
  %7159 = zext i1 %7158 to i8
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7159, i8* %7160, align 1, !tbaa !2432
  %7161 = and i32 %7156, 255
  %7162 = call i32 @llvm.ctpop.i32(i32 %7161) #16
  %7163 = trunc i32 %7162 to i8
  %7164 = and i8 %7163, 1
  %7165 = xor i8 %7164, 1
  %7166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7165, i8* %7166, align 1, !tbaa !2446
  %7167 = xor i64 1, %7152
  %7168 = trunc i64 %7167 to i32
  %7169 = xor i32 %7168, %7156
  %7170 = lshr i32 %7169, 4
  %7171 = trunc i32 %7170 to i8
  %7172 = and i8 %7171, 1
  %7173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7172, i8* %7173, align 1, !tbaa !2447
  %7174 = icmp eq i32 %7156, 0
  %7175 = zext i1 %7174 to i8
  %7176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7175, i8* %7176, align 1, !tbaa !2448
  %7177 = lshr i32 %7156, 31
  %7178 = trunc i32 %7177 to i8
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7178, i8* %7179, align 1, !tbaa !2449
  %7180 = lshr i32 %7155, 31
  %7181 = xor i32 %7177, %7180
  %7182 = add nuw nsw i32 %7181, %7180
  %7183 = icmp eq i32 %7182, 2
  %7184 = zext i1 %7183 to i8
  %7185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7184, i8* %7185, align 1, !tbaa !2450
  %7186 = load i64, i64* %RDX
  %7187 = load i32, i32* %ESI
  %7188 = zext i32 %7187 to i64
  %7189 = load i64, i64* %PC
  %7190 = add i64 %7189, 2
  store i64 %7190, i64* %PC
  %7191 = trunc i64 %7186 to i32
  %7192 = add i32 %7187, %7191
  %7193 = zext i32 %7192 to i64
  store i64 %7193, i64* %RDX, align 8, !tbaa !2428
  %7194 = icmp ult i32 %7192, %7191
  %7195 = icmp ult i32 %7192, %7187
  %7196 = or i1 %7194, %7195
  %7197 = zext i1 %7196 to i8
  %7198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7197, i8* %7198, align 1, !tbaa !2432
  %7199 = and i32 %7192, 255
  %7200 = call i32 @llvm.ctpop.i32(i32 %7199) #16
  %7201 = trunc i32 %7200 to i8
  %7202 = and i8 %7201, 1
  %7203 = xor i8 %7202, 1
  %7204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7203, i8* %7204, align 1, !tbaa !2446
  %7205 = xor i64 %7188, %7186
  %7206 = trunc i64 %7205 to i32
  %7207 = xor i32 %7206, %7192
  %7208 = lshr i32 %7207, 4
  %7209 = trunc i32 %7208 to i8
  %7210 = and i8 %7209, 1
  %7211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7210, i8* %7211, align 1, !tbaa !2447
  %7212 = icmp eq i32 %7192, 0
  %7213 = zext i1 %7212 to i8
  %7214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7213, i8* %7214, align 1, !tbaa !2448
  %7215 = lshr i32 %7192, 31
  %7216 = trunc i32 %7215 to i8
  %7217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7216, i8* %7217, align 1, !tbaa !2449
  %7218 = lshr i32 %7191, 31
  %7219 = lshr i32 %7187, 31
  %7220 = xor i32 %7215, %7218
  %7221 = xor i32 %7215, %7219
  %7222 = add nuw nsw i32 %7220, %7221
  %7223 = icmp eq i32 %7222, 2
  %7224 = zext i1 %7223 to i8
  %7225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7224, i8* %7225, align 1, !tbaa !2450
  %7226 = load i32, i32* %EDX
  %7227 = zext i32 %7226 to i64
  %7228 = load i64, i64* %PC
  %7229 = add i64 %7228, 3
  store i64 %7229, i64* %PC
  %7230 = shl i64 %7227, 32
  %7231 = ashr exact i64 %7230, 32
  store i64 %7231, i64* %RCX, align 8, !tbaa !2428
  %7232 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7233 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7234 = load i64, i64* %RAX
  %7235 = load i64, i64* %RCX
  %7236 = mul i64 %7235, 4
  %7237 = add i64 %7236, %7234
  %7238 = load i64, i64* %PC
  %7239 = add i64 %7238, 5
  store i64 %7239, i64* %PC
  %7240 = bitcast i8* %7233 to <2 x float>*
  %7241 = load <2 x float>, <2 x float>* %7240, align 1
  %7242 = getelementptr inbounds i8, i8* %7233, i64 8
  %7243 = bitcast i8* %7242 to <2 x i32>*
  %7244 = load <2 x i32>, <2 x i32>* %7243, align 1
  %7245 = inttoptr i64 %7237 to float*
  %7246 = load float, float* %7245
  %7247 = extractelement <2 x float> %7241, i32 0
  %7248 = fadd float %7247, %7246
  %7249 = bitcast i8* %7232 to float*
  store float %7248, float* %7249, align 1, !tbaa !2452
  %7250 = bitcast <2 x float> %7241 to <2 x i32>
  %7251 = extractelement <2 x i32> %7250, i32 1
  %7252 = getelementptr inbounds i8, i8* %7232, i64 4
  %7253 = bitcast i8* %7252 to i32*
  store i32 %7251, i32* %7253, align 1, !tbaa !2452
  %7254 = extractelement <2 x i32> %7244, i32 0
  %7255 = getelementptr inbounds i8, i8* %7232, i64 8
  %7256 = bitcast i8* %7255 to i32*
  store i32 %7254, i32* %7256, align 1, !tbaa !2452
  %7257 = extractelement <2 x i32> %7244, i32 1
  %7258 = getelementptr inbounds i8, i8* %7232, i64 12
  %7259 = bitcast i8* %7258 to i32*
  store i32 %7257, i32* %7259, align 1, !tbaa !2452
  %7260 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7261 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7262 = bitcast %union.vec128_t* %XMM2 to i8*
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 4
  store i64 %7264, i64* %PC
  %7265 = bitcast i8* %7261 to <2 x float>*
  %7266 = load <2 x float>, <2 x float>* %7265, align 1
  %7267 = getelementptr inbounds i8, i8* %7261, i64 8
  %7268 = bitcast i8* %7267 to <2 x i32>*
  %7269 = load <2 x i32>, <2 x i32>* %7268, align 1
  %7270 = bitcast i8* %7262 to <2 x float>*
  %7271 = load <2 x float>, <2 x float>* %7270, align 1
  %7272 = extractelement <2 x float> %7266, i32 0
  %7273 = extractelement <2 x float> %7271, i32 0
  %7274 = fmul float %7272, %7273
  %7275 = bitcast i8* %7260 to float*
  store float %7274, float* %7275, align 1, !tbaa !2452
  %7276 = bitcast <2 x float> %7266 to <2 x i32>
  %7277 = extractelement <2 x i32> %7276, i32 1
  %7278 = getelementptr inbounds i8, i8* %7260, i64 4
  %7279 = bitcast i8* %7278 to i32*
  store i32 %7277, i32* %7279, align 1, !tbaa !2452
  %7280 = extractelement <2 x i32> %7269, i32 0
  %7281 = getelementptr inbounds i8, i8* %7260, i64 8
  %7282 = bitcast i8* %7281 to i32*
  store i32 %7280, i32* %7282, align 1, !tbaa !2452
  %7283 = extractelement <2 x i32> %7269, i32 1
  %7284 = getelementptr inbounds i8, i8* %7260, i64 12
  %7285 = bitcast i8* %7284 to i32*
  store i32 %7283, i32* %7285, align 1, !tbaa !2452
  %7286 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7287 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7288 = bitcast %union.vec128_t* %XMM1 to i8*
  %7289 = load i64, i64* %PC
  %7290 = add i64 %7289, 4
  store i64 %7290, i64* %PC
  %7291 = bitcast i8* %7287 to <2 x float>*
  %7292 = load <2 x float>, <2 x float>* %7291, align 1
  %7293 = getelementptr inbounds i8, i8* %7287, i64 8
  %7294 = bitcast i8* %7293 to <2 x i32>*
  %7295 = load <2 x i32>, <2 x i32>* %7294, align 1
  %7296 = bitcast i8* %7288 to <2 x float>*
  %7297 = load <2 x float>, <2 x float>* %7296, align 1
  %7298 = extractelement <2 x float> %7292, i32 0
  %7299 = extractelement <2 x float> %7297, i32 0
  %7300 = fadd float %7298, %7299
  %7301 = bitcast i8* %7286 to float*
  store float %7300, float* %7301, align 1, !tbaa !2452
  %7302 = bitcast <2 x float> %7292 to <2 x i32>
  %7303 = extractelement <2 x i32> %7302, i32 1
  %7304 = getelementptr inbounds i8, i8* %7286, i64 4
  %7305 = bitcast i8* %7304 to i32*
  store i32 %7303, i32* %7305, align 1, !tbaa !2452
  %7306 = extractelement <2 x i32> %7295, i32 0
  %7307 = getelementptr inbounds i8, i8* %7286, i64 8
  %7308 = bitcast i8* %7307 to i32*
  store i32 %7306, i32* %7308, align 1, !tbaa !2452
  %7309 = extractelement <2 x i32> %7295, i32 1
  %7310 = getelementptr inbounds i8, i8* %7286, i64 12
  %7311 = bitcast i8* %7310 to i32*
  store i32 %7309, i32* %7311, align 1, !tbaa !2452
  %7312 = load i64, i64* %RBP
  %7313 = sub i64 %7312, 24
  %7314 = load i64, i64* %PC
  %7315 = add i64 %7314, 4
  store i64 %7315, i64* %PC
  %7316 = inttoptr i64 %7313 to i64*
  %7317 = load i64, i64* %7316
  store i64 %7317, i64* %RAX, align 8, !tbaa !2428
  %7318 = load i64, i64* %RAX
  %7319 = load i64, i64* %PC
  %7320 = add i64 %7319, 3
  store i64 %7320, i64* %PC
  %7321 = inttoptr i64 %7318 to i64*
  %7322 = load i64, i64* %7321
  store i64 %7322, i64* %RAX, align 8, !tbaa !2428
  %7323 = load i64, i64* %RBP
  %7324 = sub i64 %7323, 24
  %7325 = load i64, i64* %PC
  %7326 = add i64 %7325, 4
  store i64 %7326, i64* %PC
  %7327 = inttoptr i64 %7324 to i64*
  %7328 = load i64, i64* %7327
  store i64 %7328, i64* %RCX, align 8, !tbaa !2428
  %7329 = load i64, i64* %RCX
  %7330 = add i64 %7329, 12
  %7331 = load i64, i64* %PC
  %7332 = add i64 %7331, 3
  store i64 %7332, i64* %PC
  %7333 = inttoptr i64 %7330 to i32*
  %7334 = load i32, i32* %7333
  %7335 = zext i32 %7334 to i64
  store i64 %7335, i64* %RDX, align 8, !tbaa !2428
  %7336 = load i64, i64* %RDX
  %7337 = load i64, i64* %PC
  %7338 = add i64 %7337, 3
  store i64 %7338, i64* %PC
  %7339 = trunc i64 %7336 to i32
  %7340 = shl i32 %7339, 1
  %7341 = icmp slt i32 %7339, 0
  %7342 = icmp slt i32 %7340, 0
  %7343 = xor i1 %7341, %7342
  %7344 = zext i32 %7340 to i64
  store i64 %7344, i64* %RDX, align 8, !tbaa !2428
  %7345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7346 = zext i1 %7341 to i8
  store i8 %7346, i8* %7345, align 1, !tbaa !2451
  %7347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7348 = and i32 %7340, 254
  %7349 = call i32 @llvm.ctpop.i32(i32 %7348) #16
  %7350 = trunc i32 %7349 to i8
  %7351 = and i8 %7350, 1
  %7352 = xor i8 %7351, 1
  store i8 %7352, i8* %7347, align 1, !tbaa !2451
  %7353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7353, align 1, !tbaa !2451
  %7354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7355 = icmp eq i32 %7340, 0
  %7356 = zext i1 %7355 to i8
  store i8 %7356, i8* %7354, align 1, !tbaa !2451
  %7357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7358 = lshr i32 %7340, 31
  %7359 = trunc i32 %7358 to i8
  store i8 %7359, i8* %7357, align 1, !tbaa !2451
  %7360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7361 = zext i1 %7343 to i8
  store i8 %7361, i8* %7360, align 1, !tbaa !2451
  %7362 = load i64, i64* %RBP
  %7363 = sub i64 %7362, 24
  %7364 = load i64, i64* %PC
  %7365 = add i64 %7364, 4
  store i64 %7365, i64* %PC
  %7366 = inttoptr i64 %7363 to i64*
  %7367 = load i64, i64* %7366
  store i64 %7367, i64* %RCX, align 8, !tbaa !2428
  %7368 = load i64, i64* %RDX
  %7369 = load i64, i64* %RCX
  %7370 = add i64 %7369, 16
  %7371 = load i64, i64* %PC
  %7372 = add i64 %7371, 4
  store i64 %7372, i64* %PC
  %7373 = inttoptr i64 %7370 to i32*
  %7374 = load i32, i32* %7373
  %7375 = shl i64 %7368, 32
  %7376 = ashr exact i64 %7375, 32
  %7377 = sext i32 %7374 to i64
  %7378 = mul nsw i64 %7377, %7376
  %7379 = trunc i64 %7378 to i32
  %7380 = and i64 %7378, 4294967295
  store i64 %7380, i64* %RDX, align 8, !tbaa !2428
  %7381 = shl i64 %7378, 32
  %7382 = ashr exact i64 %7381, 32
  %7383 = icmp ne i64 %7382, %7378
  %7384 = zext i1 %7383 to i8
  %7385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7384, i8* %7385, align 1, !tbaa !2432
  %7386 = and i32 %7379, 255
  %7387 = call i32 @llvm.ctpop.i32(i32 %7386) #16
  %7388 = trunc i32 %7387 to i8
  %7389 = and i8 %7388, 1
  %7390 = xor i8 %7389, 1
  %7391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7390, i8* %7391, align 1, !tbaa !2446
  %7392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7392, align 1, !tbaa !2447
  %7393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7393, align 1, !tbaa !2448
  %7394 = lshr i32 %7379, 31
  %7395 = trunc i32 %7394 to i8
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7395, i8* %7396, align 1, !tbaa !2449
  %7397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7384, i8* %7397, align 1, !tbaa !2450
  %7398 = load i64, i64* %RBP
  %7399 = sub i64 %7398, 24
  %7400 = load i64, i64* %PC
  %7401 = add i64 %7400, 4
  store i64 %7401, i64* %PC
  %7402 = inttoptr i64 %7399 to i64*
  %7403 = load i64, i64* %7402
  store i64 %7403, i64* %RCX, align 8, !tbaa !2428
  %7404 = load i64, i64* %RDX
  %7405 = load i64, i64* %RCX
  %7406 = add i64 %7405, 20
  %7407 = load i64, i64* %PC
  %7408 = add i64 %7407, 4
  store i64 %7408, i64* %PC
  %7409 = inttoptr i64 %7406 to i32*
  %7410 = load i32, i32* %7409
  %7411 = shl i64 %7404, 32
  %7412 = ashr exact i64 %7411, 32
  %7413 = sext i32 %7410 to i64
  %7414 = mul nsw i64 %7413, %7412
  %7415 = trunc i64 %7414 to i32
  %7416 = and i64 %7414, 4294967295
  store i64 %7416, i64* %RDX, align 8, !tbaa !2428
  %7417 = shl i64 %7414, 32
  %7418 = ashr exact i64 %7417, 32
  %7419 = icmp ne i64 %7418, %7414
  %7420 = zext i1 %7419 to i8
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7420, i8* %7421, align 1, !tbaa !2432
  %7422 = and i32 %7415, 255
  %7423 = call i32 @llvm.ctpop.i32(i32 %7422) #16
  %7424 = trunc i32 %7423 to i8
  %7425 = and i8 %7424, 1
  %7426 = xor i8 %7425, 1
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7426, i8* %7427, align 1, !tbaa !2446
  %7428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7428, align 1, !tbaa !2447
  %7429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7429, align 1, !tbaa !2448
  %7430 = lshr i32 %7415, 31
  %7431 = trunc i32 %7430 to i8
  %7432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7431, i8* %7432, align 1, !tbaa !2449
  %7433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7420, i8* %7433, align 1, !tbaa !2450
  %7434 = load i64, i64* %RBP
  %7435 = sub i64 %7434, 52
  %7436 = load i64, i64* %PC
  %7437 = add i64 %7436, 3
  store i64 %7437, i64* %PC
  %7438 = inttoptr i64 %7435 to i32*
  %7439 = load i32, i32* %7438
  %7440 = zext i32 %7439 to i64
  store i64 %7440, i64* %RSI, align 8, !tbaa !2428
  %7441 = load i64, i64* %RBP
  %7442 = sub i64 %7441, 24
  %7443 = load i64, i64* %PC
  %7444 = add i64 %7443, 4
  store i64 %7444, i64* %PC
  %7445 = inttoptr i64 %7442 to i64*
  %7446 = load i64, i64* %7445
  store i64 %7446, i64* %RCX, align 8, !tbaa !2428
  %7447 = load i64, i64* %RSI
  %7448 = load i64, i64* %RCX
  %7449 = add i64 %7448, 16
  %7450 = load i64, i64* %PC
  %7451 = add i64 %7450, 4
  store i64 %7451, i64* %PC
  %7452 = inttoptr i64 %7449 to i32*
  %7453 = load i32, i32* %7452
  %7454 = shl i64 %7447, 32
  %7455 = ashr exact i64 %7454, 32
  %7456 = sext i32 %7453 to i64
  %7457 = mul nsw i64 %7456, %7455
  %7458 = trunc i64 %7457 to i32
  %7459 = and i64 %7457, 4294967295
  store i64 %7459, i64* %RSI, align 8, !tbaa !2428
  %7460 = shl i64 %7457, 32
  %7461 = ashr exact i64 %7460, 32
  %7462 = icmp ne i64 %7461, %7457
  %7463 = zext i1 %7462 to i8
  %7464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7463, i8* %7464, align 1, !tbaa !2432
  %7465 = and i32 %7458, 255
  %7466 = call i32 @llvm.ctpop.i32(i32 %7465) #16
  %7467 = trunc i32 %7466 to i8
  %7468 = and i8 %7467, 1
  %7469 = xor i8 %7468, 1
  %7470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7469, i8* %7470, align 1, !tbaa !2446
  %7471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7471, align 1, !tbaa !2447
  %7472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7472, align 1, !tbaa !2448
  %7473 = lshr i32 %7458, 31
  %7474 = trunc i32 %7473 to i8
  %7475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7474, i8* %7475, align 1, !tbaa !2449
  %7476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7463, i8* %7476, align 1, !tbaa !2450
  %7477 = load i64, i64* %RBP
  %7478 = sub i64 %7477, 24
  %7479 = load i64, i64* %PC
  %7480 = add i64 %7479, 4
  store i64 %7480, i64* %PC
  %7481 = inttoptr i64 %7478 to i64*
  %7482 = load i64, i64* %7481
  store i64 %7482, i64* %RCX, align 8, !tbaa !2428
  %7483 = load i64, i64* %RSI
  %7484 = load i64, i64* %RCX
  %7485 = add i64 %7484, 20
  %7486 = load i64, i64* %PC
  %7487 = add i64 %7486, 4
  store i64 %7487, i64* %PC
  %7488 = inttoptr i64 %7485 to i32*
  %7489 = load i32, i32* %7488
  %7490 = shl i64 %7483, 32
  %7491 = ashr exact i64 %7490, 32
  %7492 = sext i32 %7489 to i64
  %7493 = mul nsw i64 %7492, %7491
  %7494 = trunc i64 %7493 to i32
  %7495 = and i64 %7493, 4294967295
  store i64 %7495, i64* %RSI, align 8, !tbaa !2428
  %7496 = shl i64 %7493, 32
  %7497 = ashr exact i64 %7496, 32
  %7498 = icmp ne i64 %7497, %7493
  %7499 = zext i1 %7498 to i8
  %7500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7499, i8* %7500, align 1, !tbaa !2432
  %7501 = and i32 %7494, 255
  %7502 = call i32 @llvm.ctpop.i32(i32 %7501) #16
  %7503 = trunc i32 %7502 to i8
  %7504 = and i8 %7503, 1
  %7505 = xor i8 %7504, 1
  %7506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7505, i8* %7506, align 1, !tbaa !2446
  %7507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7507, align 1, !tbaa !2447
  %7508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7508, align 1, !tbaa !2448
  %7509 = lshr i32 %7494, 31
  %7510 = trunc i32 %7509 to i8
  %7511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7510, i8* %7511, align 1, !tbaa !2449
  %7512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7499, i8* %7512, align 1, !tbaa !2450
  %7513 = load i64, i64* %RDX
  %7514 = load i32, i32* %ESI
  %7515 = zext i32 %7514 to i64
  %7516 = load i64, i64* %PC
  %7517 = add i64 %7516, 2
  store i64 %7517, i64* %PC
  %7518 = trunc i64 %7513 to i32
  %7519 = add i32 %7514, %7518
  %7520 = zext i32 %7519 to i64
  store i64 %7520, i64* %RDX, align 8, !tbaa !2428
  %7521 = icmp ult i32 %7519, %7518
  %7522 = icmp ult i32 %7519, %7514
  %7523 = or i1 %7521, %7522
  %7524 = zext i1 %7523 to i8
  %7525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7524, i8* %7525, align 1, !tbaa !2432
  %7526 = and i32 %7519, 255
  %7527 = call i32 @llvm.ctpop.i32(i32 %7526) #16
  %7528 = trunc i32 %7527 to i8
  %7529 = and i8 %7528, 1
  %7530 = xor i8 %7529, 1
  %7531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7530, i8* %7531, align 1, !tbaa !2446
  %7532 = xor i64 %7515, %7513
  %7533 = trunc i64 %7532 to i32
  %7534 = xor i32 %7533, %7519
  %7535 = lshr i32 %7534, 4
  %7536 = trunc i32 %7535 to i8
  %7537 = and i8 %7536, 1
  %7538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7537, i8* %7538, align 1, !tbaa !2447
  %7539 = icmp eq i32 %7519, 0
  %7540 = zext i1 %7539 to i8
  %7541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7540, i8* %7541, align 1, !tbaa !2448
  %7542 = lshr i32 %7519, 31
  %7543 = trunc i32 %7542 to i8
  %7544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7543, i8* %7544, align 1, !tbaa !2449
  %7545 = lshr i32 %7518, 31
  %7546 = lshr i32 %7514, 31
  %7547 = xor i32 %7542, %7545
  %7548 = xor i32 %7542, %7546
  %7549 = add nuw nsw i32 %7547, %7548
  %7550 = icmp eq i32 %7549, 2
  %7551 = zext i1 %7550 to i8
  %7552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7551, i8* %7552, align 1, !tbaa !2450
  %7553 = load i64, i64* %RBP
  %7554 = sub i64 %7553, 56
  %7555 = load i64, i64* %PC
  %7556 = add i64 %7555, 3
  store i64 %7556, i64* %PC
  %7557 = inttoptr i64 %7554 to i32*
  %7558 = load i32, i32* %7557
  %7559 = zext i32 %7558 to i64
  store i64 %7559, i64* %RSI, align 8, !tbaa !2428
  %7560 = load i64, i64* %RBP
  %7561 = sub i64 %7560, 24
  %7562 = load i64, i64* %PC
  %7563 = add i64 %7562, 4
  store i64 %7563, i64* %PC
  %7564 = inttoptr i64 %7561 to i64*
  %7565 = load i64, i64* %7564
  store i64 %7565, i64* %RCX, align 8, !tbaa !2428
  %7566 = load i64, i64* %RSI
  %7567 = load i64, i64* %RCX
  %7568 = add i64 %7567, 20
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 4
  store i64 %7570, i64* %PC
  %7571 = inttoptr i64 %7568 to i32*
  %7572 = load i32, i32* %7571
  %7573 = shl i64 %7566, 32
  %7574 = ashr exact i64 %7573, 32
  %7575 = sext i32 %7572 to i64
  %7576 = mul nsw i64 %7575, %7574
  %7577 = trunc i64 %7576 to i32
  %7578 = and i64 %7576, 4294967295
  store i64 %7578, i64* %RSI, align 8, !tbaa !2428
  %7579 = shl i64 %7576, 32
  %7580 = ashr exact i64 %7579, 32
  %7581 = icmp ne i64 %7580, %7576
  %7582 = zext i1 %7581 to i8
  %7583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7582, i8* %7583, align 1, !tbaa !2432
  %7584 = and i32 %7577, 255
  %7585 = call i32 @llvm.ctpop.i32(i32 %7584) #16
  %7586 = trunc i32 %7585 to i8
  %7587 = and i8 %7586, 1
  %7588 = xor i8 %7587, 1
  %7589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7588, i8* %7589, align 1, !tbaa !2446
  %7590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7590, align 1, !tbaa !2447
  %7591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7591, align 1, !tbaa !2448
  %7592 = lshr i32 %7577, 31
  %7593 = trunc i32 %7592 to i8
  %7594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7593, i8* %7594, align 1, !tbaa !2449
  %7595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7582, i8* %7595, align 1, !tbaa !2450
  %7596 = load i64, i64* %RDX
  %7597 = load i32, i32* %ESI
  %7598 = zext i32 %7597 to i64
  %7599 = load i64, i64* %PC
  %7600 = add i64 %7599, 2
  store i64 %7600, i64* %PC
  %7601 = trunc i64 %7596 to i32
  %7602 = add i32 %7597, %7601
  %7603 = zext i32 %7602 to i64
  store i64 %7603, i64* %RDX, align 8, !tbaa !2428
  %7604 = icmp ult i32 %7602, %7601
  %7605 = icmp ult i32 %7602, %7597
  %7606 = or i1 %7604, %7605
  %7607 = zext i1 %7606 to i8
  %7608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7607, i8* %7608, align 1, !tbaa !2432
  %7609 = and i32 %7602, 255
  %7610 = call i32 @llvm.ctpop.i32(i32 %7609) #16
  %7611 = trunc i32 %7610 to i8
  %7612 = and i8 %7611, 1
  %7613 = xor i8 %7612, 1
  %7614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7613, i8* %7614, align 1, !tbaa !2446
  %7615 = xor i64 %7598, %7596
  %7616 = trunc i64 %7615 to i32
  %7617 = xor i32 %7616, %7602
  %7618 = lshr i32 %7617, 4
  %7619 = trunc i32 %7618 to i8
  %7620 = and i8 %7619, 1
  %7621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7620, i8* %7621, align 1, !tbaa !2447
  %7622 = icmp eq i32 %7602, 0
  %7623 = zext i1 %7622 to i8
  %7624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7623, i8* %7624, align 1, !tbaa !2448
  %7625 = lshr i32 %7602, 31
  %7626 = trunc i32 %7625 to i8
  %7627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7626, i8* %7627, align 1, !tbaa !2449
  %7628 = lshr i32 %7601, 31
  %7629 = lshr i32 %7597, 31
  %7630 = xor i32 %7625, %7628
  %7631 = xor i32 %7625, %7629
  %7632 = add nuw nsw i32 %7630, %7631
  %7633 = icmp eq i32 %7632, 2
  %7634 = zext i1 %7633 to i8
  %7635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7634, i8* %7635, align 1, !tbaa !2450
  %7636 = load i64, i64* %RDX
  %7637 = load i64, i64* %RBP
  %7638 = sub i64 %7637, 60
  %7639 = load i64, i64* %PC
  %7640 = add i64 %7639, 3
  store i64 %7640, i64* %PC
  %7641 = trunc i64 %7636 to i32
  %7642 = inttoptr i64 %7638 to i32*
  %7643 = load i32, i32* %7642
  %7644 = add i32 %7643, %7641
  %7645 = zext i32 %7644 to i64
  store i64 %7645, i64* %RDX, align 8, !tbaa !2428
  %7646 = icmp ult i32 %7644, %7641
  %7647 = icmp ult i32 %7644, %7643
  %7648 = or i1 %7646, %7647
  %7649 = zext i1 %7648 to i8
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7649, i8* %7650, align 1, !tbaa !2432
  %7651 = and i32 %7644, 255
  %7652 = call i32 @llvm.ctpop.i32(i32 %7651) #16
  %7653 = trunc i32 %7652 to i8
  %7654 = and i8 %7653, 1
  %7655 = xor i8 %7654, 1
  %7656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7655, i8* %7656, align 1, !tbaa !2446
  %7657 = xor i32 %7643, %7641
  %7658 = xor i32 %7657, %7644
  %7659 = lshr i32 %7658, 4
  %7660 = trunc i32 %7659 to i8
  %7661 = and i8 %7660, 1
  %7662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7661, i8* %7662, align 1, !tbaa !2447
  %7663 = icmp eq i32 %7644, 0
  %7664 = zext i1 %7663 to i8
  %7665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7664, i8* %7665, align 1, !tbaa !2448
  %7666 = lshr i32 %7644, 31
  %7667 = trunc i32 %7666 to i8
  %7668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7667, i8* %7668, align 1, !tbaa !2449
  %7669 = lshr i32 %7641, 31
  %7670 = lshr i32 %7643, 31
  %7671 = xor i32 %7666, %7669
  %7672 = xor i32 %7666, %7670
  %7673 = add nuw nsw i32 %7671, %7672
  %7674 = icmp eq i32 %7673, 2
  %7675 = zext i1 %7674 to i8
  %7676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7675, i8* %7676, align 1, !tbaa !2450
  %7677 = load i32, i32* %EDX
  %7678 = zext i32 %7677 to i64
  %7679 = load i64, i64* %PC
  %7680 = add i64 %7679, 3
  store i64 %7680, i64* %PC
  %7681 = shl i64 %7678, 32
  %7682 = ashr exact i64 %7681, 32
  store i64 %7682, i64* %RCX, align 8, !tbaa !2428
  %7683 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7684 = load i64, i64* %RAX
  %7685 = load i64, i64* %RCX
  %7686 = mul i64 %7685, 4
  %7687 = add i64 %7686, %7684
  %7688 = load i64, i64* %PC
  %7689 = add i64 %7688, 5
  store i64 %7689, i64* %PC
  %7690 = inttoptr i64 %7687 to float*
  %7691 = load float, float* %7690
  %7692 = bitcast i8* %7683 to float*
  store float %7691, float* %7692, align 1, !tbaa !2452
  %7693 = getelementptr inbounds i8, i8* %7683, i64 4
  %7694 = bitcast i8* %7693 to float*
  store float 0.000000e+00, float* %7694, align 1, !tbaa !2452
  %7695 = getelementptr inbounds i8, i8* %7683, i64 8
  %7696 = bitcast i8* %7695 to float*
  store float 0.000000e+00, float* %7696, align 1, !tbaa !2452
  %7697 = getelementptr inbounds i8, i8* %7683, i64 12
  %7698 = bitcast i8* %7697 to float*
  store float 0.000000e+00, float* %7698, align 1, !tbaa !2452
  %7699 = load i64, i64* %RBP
  %7700 = sub i64 %7699, 40
  %7701 = load i64, i64* %PC
  %7702 = add i64 %7701, 4
  store i64 %7702, i64* %PC
  %7703 = inttoptr i64 %7700 to i64*
  %7704 = load i64, i64* %7703
  store i64 %7704, i64* %RAX, align 8, !tbaa !2428
  %7705 = load i64, i64* %RAX
  %7706 = load i64, i64* %PC
  %7707 = add i64 %7706, 3
  store i64 %7707, i64* %PC
  %7708 = inttoptr i64 %7705 to i64*
  %7709 = load i64, i64* %7708
  store i64 %7709, i64* %RAX, align 8, !tbaa !2428
  %7710 = load i64, i64* %RBP
  %7711 = sub i64 %7710, 40
  %7712 = load i64, i64* %PC
  %7713 = add i64 %7712, 4
  store i64 %7713, i64* %PC
  %7714 = inttoptr i64 %7711 to i64*
  %7715 = load i64, i64* %7714
  store i64 %7715, i64* %RCX, align 8, !tbaa !2428
  %7716 = load i64, i64* %RCX
  %7717 = add i64 %7716, 12
  %7718 = load i64, i64* %PC
  %7719 = add i64 %7718, 4
  store i64 %7719, i64* %PC
  %7720 = inttoptr i64 %7717 to i32*
  %7721 = load i32, i32* %7720
  %7722 = sext i32 %7721 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %7723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7723, align 1, !tbaa !2432
  %7724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7724, align 1, !tbaa !2446
  %7725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7725, align 1, !tbaa !2447
  %7726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7726, align 1, !tbaa !2448
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7727, align 1, !tbaa !2449
  %7728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7728, align 1, !tbaa !2450
  %7729 = load i64, i64* %RBP
  %7730 = sub i64 %7729, 40
  %7731 = load i64, i64* %PC
  %7732 = add i64 %7731, 4
  store i64 %7732, i64* %PC
  %7733 = inttoptr i64 %7730 to i64*
  %7734 = load i64, i64* %7733
  store i64 %7734, i64* %RCX, align 8, !tbaa !2428
  %7735 = load i64, i64* %RDX
  %7736 = load i64, i64* %RCX
  %7737 = add i64 %7736, 16
  %7738 = load i64, i64* %PC
  %7739 = add i64 %7738, 4
  store i64 %7739, i64* %PC
  %7740 = inttoptr i64 %7737 to i32*
  %7741 = load i32, i32* %7740
  %7742 = shl i64 %7735, 32
  %7743 = ashr exact i64 %7742, 32
  %7744 = sext i32 %7741 to i64
  %7745 = mul nsw i64 %7744, %7743
  %7746 = trunc i64 %7745 to i32
  %7747 = and i64 %7745, 4294967295
  store i64 %7747, i64* %RDX, align 8, !tbaa !2428
  %7748 = shl i64 %7745, 32
  %7749 = ashr exact i64 %7748, 32
  %7750 = icmp ne i64 %7749, %7745
  %7751 = zext i1 %7750 to i8
  %7752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7751, i8* %7752, align 1, !tbaa !2432
  %7753 = and i32 %7746, 255
  %7754 = call i32 @llvm.ctpop.i32(i32 %7753) #16
  %7755 = trunc i32 %7754 to i8
  %7756 = and i8 %7755, 1
  %7757 = xor i8 %7756, 1
  %7758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7757, i8* %7758, align 1, !tbaa !2446
  %7759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7759, align 1, !tbaa !2447
  %7760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7760, align 1, !tbaa !2448
  %7761 = lshr i32 %7746, 31
  %7762 = trunc i32 %7761 to i8
  %7763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7762, i8* %7763, align 1, !tbaa !2449
  %7764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7751, i8* %7764, align 1, !tbaa !2450
  %7765 = load i64, i64* %RBP
  %7766 = sub i64 %7765, 40
  %7767 = load i64, i64* %PC
  %7768 = add i64 %7767, 4
  store i64 %7768, i64* %PC
  %7769 = inttoptr i64 %7766 to i64*
  %7770 = load i64, i64* %7769
  store i64 %7770, i64* %RCX, align 8, !tbaa !2428
  %7771 = load i64, i64* %RDX
  %7772 = load i64, i64* %RCX
  %7773 = add i64 %7772, 20
  %7774 = load i64, i64* %PC
  %7775 = add i64 %7774, 4
  store i64 %7775, i64* %PC
  %7776 = inttoptr i64 %7773 to i32*
  %7777 = load i32, i32* %7776
  %7778 = shl i64 %7771, 32
  %7779 = ashr exact i64 %7778, 32
  %7780 = sext i32 %7777 to i64
  %7781 = mul nsw i64 %7780, %7779
  %7782 = trunc i64 %7781 to i32
  %7783 = and i64 %7781, 4294967295
  store i64 %7783, i64* %RDX, align 8, !tbaa !2428
  %7784 = shl i64 %7781, 32
  %7785 = ashr exact i64 %7784, 32
  %7786 = icmp ne i64 %7785, %7781
  %7787 = zext i1 %7786 to i8
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7787, i8* %7788, align 1, !tbaa !2432
  %7789 = and i32 %7782, 255
  %7790 = call i32 @llvm.ctpop.i32(i32 %7789) #16
  %7791 = trunc i32 %7790 to i8
  %7792 = and i8 %7791, 1
  %7793 = xor i8 %7792, 1
  %7794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7793, i8* %7794, align 1, !tbaa !2446
  %7795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7795, align 1, !tbaa !2447
  %7796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7796, align 1, !tbaa !2448
  %7797 = lshr i32 %7782, 31
  %7798 = trunc i32 %7797 to i8
  %7799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7798, i8* %7799, align 1, !tbaa !2449
  %7800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7787, i8* %7800, align 1, !tbaa !2450
  %7801 = load i64, i64* %RBP
  %7802 = sub i64 %7801, 52
  %7803 = load i64, i64* %PC
  %7804 = add i64 %7803, 3
  store i64 %7804, i64* %PC
  %7805 = inttoptr i64 %7802 to i32*
  %7806 = load i32, i32* %7805
  %7807 = zext i32 %7806 to i64
  store i64 %7807, i64* %RSI, align 8, !tbaa !2428
  %7808 = load i64, i64* %RSI
  %7809 = load i64, i64* %PC
  %7810 = add i64 %7809, 3
  store i64 %7810, i64* %PC
  %7811 = trunc i64 %7808 to i32
  %7812 = add i32 1, %7811
  %7813 = zext i32 %7812 to i64
  store i64 %7813, i64* %RSI, align 8, !tbaa !2428
  %7814 = icmp ult i32 %7812, %7811
  %7815 = icmp ult i32 %7812, 1
  %7816 = or i1 %7814, %7815
  %7817 = zext i1 %7816 to i8
  %7818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7817, i8* %7818, align 1, !tbaa !2432
  %7819 = and i32 %7812, 255
  %7820 = call i32 @llvm.ctpop.i32(i32 %7819) #16
  %7821 = trunc i32 %7820 to i8
  %7822 = and i8 %7821, 1
  %7823 = xor i8 %7822, 1
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7823, i8* %7824, align 1, !tbaa !2446
  %7825 = xor i64 1, %7808
  %7826 = trunc i64 %7825 to i32
  %7827 = xor i32 %7826, %7812
  %7828 = lshr i32 %7827, 4
  %7829 = trunc i32 %7828 to i8
  %7830 = and i8 %7829, 1
  %7831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7830, i8* %7831, align 1, !tbaa !2447
  %7832 = icmp eq i32 %7812, 0
  %7833 = zext i1 %7832 to i8
  %7834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7833, i8* %7834, align 1, !tbaa !2448
  %7835 = lshr i32 %7812, 31
  %7836 = trunc i32 %7835 to i8
  %7837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7836, i8* %7837, align 1, !tbaa !2449
  %7838 = lshr i32 %7811, 31
  %7839 = xor i32 %7835, %7838
  %7840 = add nuw nsw i32 %7839, %7835
  %7841 = icmp eq i32 %7840, 2
  %7842 = zext i1 %7841 to i8
  %7843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7842, i8* %7843, align 1, !tbaa !2450
  %7844 = load i64, i64* %RBP
  %7845 = sub i64 %7844, 40
  %7846 = load i64, i64* %PC
  %7847 = add i64 %7846, 4
  store i64 %7847, i64* %PC
  %7848 = inttoptr i64 %7845 to i64*
  %7849 = load i64, i64* %7848
  store i64 %7849, i64* %RCX, align 8, !tbaa !2428
  %7850 = load i64, i64* %RSI
  %7851 = load i64, i64* %RCX
  %7852 = add i64 %7851, 16
  %7853 = load i64, i64* %PC
  %7854 = add i64 %7853, 4
  store i64 %7854, i64* %PC
  %7855 = inttoptr i64 %7852 to i32*
  %7856 = load i32, i32* %7855
  %7857 = shl i64 %7850, 32
  %7858 = ashr exact i64 %7857, 32
  %7859 = sext i32 %7856 to i64
  %7860 = mul nsw i64 %7859, %7858
  %7861 = trunc i64 %7860 to i32
  %7862 = and i64 %7860, 4294967295
  store i64 %7862, i64* %RSI, align 8, !tbaa !2428
  %7863 = shl i64 %7860, 32
  %7864 = ashr exact i64 %7863, 32
  %7865 = icmp ne i64 %7864, %7860
  %7866 = zext i1 %7865 to i8
  %7867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7866, i8* %7867, align 1, !tbaa !2432
  %7868 = and i32 %7861, 255
  %7869 = call i32 @llvm.ctpop.i32(i32 %7868) #16
  %7870 = trunc i32 %7869 to i8
  %7871 = and i8 %7870, 1
  %7872 = xor i8 %7871, 1
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7872, i8* %7873, align 1, !tbaa !2446
  %7874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7874, align 1, !tbaa !2447
  %7875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7875, align 1, !tbaa !2448
  %7876 = lshr i32 %7861, 31
  %7877 = trunc i32 %7876 to i8
  %7878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7877, i8* %7878, align 1, !tbaa !2449
  %7879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7866, i8* %7879, align 1, !tbaa !2450
  %7880 = load i64, i64* %RBP
  %7881 = sub i64 %7880, 40
  %7882 = load i64, i64* %PC
  %7883 = add i64 %7882, 4
  store i64 %7883, i64* %PC
  %7884 = inttoptr i64 %7881 to i64*
  %7885 = load i64, i64* %7884
  store i64 %7885, i64* %RCX, align 8, !tbaa !2428
  %7886 = load i64, i64* %RSI
  %7887 = load i64, i64* %RCX
  %7888 = add i64 %7887, 20
  %7889 = load i64, i64* %PC
  %7890 = add i64 %7889, 4
  store i64 %7890, i64* %PC
  %7891 = inttoptr i64 %7888 to i32*
  %7892 = load i32, i32* %7891
  %7893 = shl i64 %7886, 32
  %7894 = ashr exact i64 %7893, 32
  %7895 = sext i32 %7892 to i64
  %7896 = mul nsw i64 %7895, %7894
  %7897 = trunc i64 %7896 to i32
  %7898 = and i64 %7896, 4294967295
  store i64 %7898, i64* %RSI, align 8, !tbaa !2428
  %7899 = shl i64 %7896, 32
  %7900 = ashr exact i64 %7899, 32
  %7901 = icmp ne i64 %7900, %7896
  %7902 = zext i1 %7901 to i8
  %7903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7902, i8* %7903, align 1, !tbaa !2432
  %7904 = and i32 %7897, 255
  %7905 = call i32 @llvm.ctpop.i32(i32 %7904) #16
  %7906 = trunc i32 %7905 to i8
  %7907 = and i8 %7906, 1
  %7908 = xor i8 %7907, 1
  %7909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7908, i8* %7909, align 1, !tbaa !2446
  %7910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7910, align 1, !tbaa !2447
  %7911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7911, align 1, !tbaa !2448
  %7912 = lshr i32 %7897, 31
  %7913 = trunc i32 %7912 to i8
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7913, i8* %7914, align 1, !tbaa !2449
  %7915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7902, i8* %7915, align 1, !tbaa !2450
  %7916 = load i64, i64* %RDX
  %7917 = load i32, i32* %ESI
  %7918 = zext i32 %7917 to i64
  %7919 = load i64, i64* %PC
  %7920 = add i64 %7919, 2
  store i64 %7920, i64* %PC
  %7921 = trunc i64 %7916 to i32
  %7922 = add i32 %7917, %7921
  %7923 = zext i32 %7922 to i64
  store i64 %7923, i64* %RDX, align 8, !tbaa !2428
  %7924 = icmp ult i32 %7922, %7921
  %7925 = icmp ult i32 %7922, %7917
  %7926 = or i1 %7924, %7925
  %7927 = zext i1 %7926 to i8
  %7928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7927, i8* %7928, align 1, !tbaa !2432
  %7929 = and i32 %7922, 255
  %7930 = call i32 @llvm.ctpop.i32(i32 %7929) #16
  %7931 = trunc i32 %7930 to i8
  %7932 = and i8 %7931, 1
  %7933 = xor i8 %7932, 1
  %7934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7933, i8* %7934, align 1, !tbaa !2446
  %7935 = xor i64 %7918, %7916
  %7936 = trunc i64 %7935 to i32
  %7937 = xor i32 %7936, %7922
  %7938 = lshr i32 %7937, 4
  %7939 = trunc i32 %7938 to i8
  %7940 = and i8 %7939, 1
  %7941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7940, i8* %7941, align 1, !tbaa !2447
  %7942 = icmp eq i32 %7922, 0
  %7943 = zext i1 %7942 to i8
  %7944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7943, i8* %7944, align 1, !tbaa !2448
  %7945 = lshr i32 %7922, 31
  %7946 = trunc i32 %7945 to i8
  %7947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7946, i8* %7947, align 1, !tbaa !2449
  %7948 = lshr i32 %7921, 31
  %7949 = lshr i32 %7917, 31
  %7950 = xor i32 %7945, %7948
  %7951 = xor i32 %7945, %7949
  %7952 = add nuw nsw i32 %7950, %7951
  %7953 = icmp eq i32 %7952, 2
  %7954 = zext i1 %7953 to i8
  %7955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7954, i8* %7955, align 1, !tbaa !2450
  %7956 = load i64, i64* %RBP
  %7957 = sub i64 %7956, 56
  %7958 = load i64, i64* %PC
  %7959 = add i64 %7958, 3
  store i64 %7959, i64* %PC
  %7960 = inttoptr i64 %7957 to i32*
  %7961 = load i32, i32* %7960
  %7962 = zext i32 %7961 to i64
  store i64 %7962, i64* %RSI, align 8, !tbaa !2428
  %7963 = load i64, i64* %RBP
  %7964 = sub i64 %7963, 40
  %7965 = load i64, i64* %PC
  %7966 = add i64 %7965, 4
  store i64 %7966, i64* %PC
  %7967 = inttoptr i64 %7964 to i64*
  %7968 = load i64, i64* %7967
  store i64 %7968, i64* %RCX, align 8, !tbaa !2428
  %7969 = load i64, i64* %RSI
  %7970 = load i64, i64* %RCX
  %7971 = add i64 %7970, 20
  %7972 = load i64, i64* %PC
  %7973 = add i64 %7972, 4
  store i64 %7973, i64* %PC
  %7974 = inttoptr i64 %7971 to i32*
  %7975 = load i32, i32* %7974
  %7976 = shl i64 %7969, 32
  %7977 = ashr exact i64 %7976, 32
  %7978 = sext i32 %7975 to i64
  %7979 = mul nsw i64 %7978, %7977
  %7980 = trunc i64 %7979 to i32
  %7981 = and i64 %7979, 4294967295
  store i64 %7981, i64* %RSI, align 8, !tbaa !2428
  %7982 = shl i64 %7979, 32
  %7983 = ashr exact i64 %7982, 32
  %7984 = icmp ne i64 %7983, %7979
  %7985 = zext i1 %7984 to i8
  %7986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7985, i8* %7986, align 1, !tbaa !2432
  %7987 = and i32 %7980, 255
  %7988 = call i32 @llvm.ctpop.i32(i32 %7987) #16
  %7989 = trunc i32 %7988 to i8
  %7990 = and i8 %7989, 1
  %7991 = xor i8 %7990, 1
  %7992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7991, i8* %7992, align 1, !tbaa !2446
  %7993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7993, align 1, !tbaa !2447
  %7994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7994, align 1, !tbaa !2448
  %7995 = lshr i32 %7980, 31
  %7996 = trunc i32 %7995 to i8
  %7997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7996, i8* %7997, align 1, !tbaa !2449
  %7998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7985, i8* %7998, align 1, !tbaa !2450
  %7999 = load i64, i64* %RDX
  %8000 = load i32, i32* %ESI
  %8001 = zext i32 %8000 to i64
  %8002 = load i64, i64* %PC
  %8003 = add i64 %8002, 2
  store i64 %8003, i64* %PC
  %8004 = trunc i64 %7999 to i32
  %8005 = add i32 %8000, %8004
  %8006 = zext i32 %8005 to i64
  store i64 %8006, i64* %RDX, align 8, !tbaa !2428
  %8007 = icmp ult i32 %8005, %8004
  %8008 = icmp ult i32 %8005, %8000
  %8009 = or i1 %8007, %8008
  %8010 = zext i1 %8009 to i8
  %8011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8010, i8* %8011, align 1, !tbaa !2432
  %8012 = and i32 %8005, 255
  %8013 = call i32 @llvm.ctpop.i32(i32 %8012) #16
  %8014 = trunc i32 %8013 to i8
  %8015 = and i8 %8014, 1
  %8016 = xor i8 %8015, 1
  %8017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8016, i8* %8017, align 1, !tbaa !2446
  %8018 = xor i64 %8001, %7999
  %8019 = trunc i64 %8018 to i32
  %8020 = xor i32 %8019, %8005
  %8021 = lshr i32 %8020, 4
  %8022 = trunc i32 %8021 to i8
  %8023 = and i8 %8022, 1
  %8024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8023, i8* %8024, align 1, !tbaa !2447
  %8025 = icmp eq i32 %8005, 0
  %8026 = zext i1 %8025 to i8
  %8027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8026, i8* %8027, align 1, !tbaa !2448
  %8028 = lshr i32 %8005, 31
  %8029 = trunc i32 %8028 to i8
  %8030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8029, i8* %8030, align 1, !tbaa !2449
  %8031 = lshr i32 %8004, 31
  %8032 = lshr i32 %8000, 31
  %8033 = xor i32 %8028, %8031
  %8034 = xor i32 %8028, %8032
  %8035 = add nuw nsw i32 %8033, %8034
  %8036 = icmp eq i32 %8035, 2
  %8037 = zext i1 %8036 to i8
  %8038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8037, i8* %8038, align 1, !tbaa !2450
  %8039 = load i64, i64* %RBP
  %8040 = sub i64 %8039, 60
  %8041 = load i64, i64* %PC
  %8042 = add i64 %8041, 3
  store i64 %8042, i64* %PC
  %8043 = inttoptr i64 %8040 to i32*
  %8044 = load i32, i32* %8043
  %8045 = zext i32 %8044 to i64
  store i64 %8045, i64* %RSI, align 8, !tbaa !2428
  %8046 = load i64, i64* %RSI
  %8047 = load i64, i64* %PC
  %8048 = add i64 %8047, 3
  store i64 %8048, i64* %PC
  %8049 = trunc i64 %8046 to i32
  %8050 = add i32 1, %8049
  %8051 = zext i32 %8050 to i64
  store i64 %8051, i64* %RSI, align 8, !tbaa !2428
  %8052 = icmp ult i32 %8050, %8049
  %8053 = icmp ult i32 %8050, 1
  %8054 = or i1 %8052, %8053
  %8055 = zext i1 %8054 to i8
  %8056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8055, i8* %8056, align 1, !tbaa !2432
  %8057 = and i32 %8050, 255
  %8058 = call i32 @llvm.ctpop.i32(i32 %8057) #16
  %8059 = trunc i32 %8058 to i8
  %8060 = and i8 %8059, 1
  %8061 = xor i8 %8060, 1
  %8062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8061, i8* %8062, align 1, !tbaa !2446
  %8063 = xor i64 1, %8046
  %8064 = trunc i64 %8063 to i32
  %8065 = xor i32 %8064, %8050
  %8066 = lshr i32 %8065, 4
  %8067 = trunc i32 %8066 to i8
  %8068 = and i8 %8067, 1
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8068, i8* %8069, align 1, !tbaa !2447
  %8070 = icmp eq i32 %8050, 0
  %8071 = zext i1 %8070 to i8
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8071, i8* %8072, align 1, !tbaa !2448
  %8073 = lshr i32 %8050, 31
  %8074 = trunc i32 %8073 to i8
  %8075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8074, i8* %8075, align 1, !tbaa !2449
  %8076 = lshr i32 %8049, 31
  %8077 = xor i32 %8073, %8076
  %8078 = add nuw nsw i32 %8077, %8073
  %8079 = icmp eq i32 %8078, 2
  %8080 = zext i1 %8079 to i8
  %8081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8080, i8* %8081, align 1, !tbaa !2450
  %8082 = load i64, i64* %RDX
  %8083 = load i32, i32* %ESI
  %8084 = zext i32 %8083 to i64
  %8085 = load i64, i64* %PC
  %8086 = add i64 %8085, 2
  store i64 %8086, i64* %PC
  %8087 = trunc i64 %8082 to i32
  %8088 = add i32 %8083, %8087
  %8089 = zext i32 %8088 to i64
  store i64 %8089, i64* %RDX, align 8, !tbaa !2428
  %8090 = icmp ult i32 %8088, %8087
  %8091 = icmp ult i32 %8088, %8083
  %8092 = or i1 %8090, %8091
  %8093 = zext i1 %8092 to i8
  %8094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8093, i8* %8094, align 1, !tbaa !2432
  %8095 = and i32 %8088, 255
  %8096 = call i32 @llvm.ctpop.i32(i32 %8095) #16
  %8097 = trunc i32 %8096 to i8
  %8098 = and i8 %8097, 1
  %8099 = xor i8 %8098, 1
  %8100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8099, i8* %8100, align 1, !tbaa !2446
  %8101 = xor i64 %8084, %8082
  %8102 = trunc i64 %8101 to i32
  %8103 = xor i32 %8102, %8088
  %8104 = lshr i32 %8103, 4
  %8105 = trunc i32 %8104 to i8
  %8106 = and i8 %8105, 1
  %8107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8106, i8* %8107, align 1, !tbaa !2447
  %8108 = icmp eq i32 %8088, 0
  %8109 = zext i1 %8108 to i8
  %8110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8109, i8* %8110, align 1, !tbaa !2448
  %8111 = lshr i32 %8088, 31
  %8112 = trunc i32 %8111 to i8
  %8113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8112, i8* %8113, align 1, !tbaa !2449
  %8114 = lshr i32 %8087, 31
  %8115 = lshr i32 %8083, 31
  %8116 = xor i32 %8111, %8114
  %8117 = xor i32 %8111, %8115
  %8118 = add nuw nsw i32 %8116, %8117
  %8119 = icmp eq i32 %8118, 2
  %8120 = zext i1 %8119 to i8
  %8121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8120, i8* %8121, align 1, !tbaa !2450
  %8122 = load i32, i32* %EDX
  %8123 = zext i32 %8122 to i64
  %8124 = load i64, i64* %PC
  %8125 = add i64 %8124, 3
  store i64 %8125, i64* %PC
  %8126 = shl i64 %8123, 32
  %8127 = ashr exact i64 %8126, 32
  store i64 %8127, i64* %RCX, align 8, !tbaa !2428
  %8128 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8129 = load i64, i64* %RAX
  %8130 = load i64, i64* %RCX
  %8131 = mul i64 %8130, 4
  %8132 = add i64 %8131, %8129
  %8133 = load i64, i64* %PC
  %8134 = add i64 %8133, 5
  store i64 %8134, i64* %PC
  %8135 = inttoptr i64 %8132 to float*
  %8136 = load float, float* %8135
  %8137 = bitcast i8* %8128 to float*
  store float %8136, float* %8137, align 1, !tbaa !2452
  %8138 = getelementptr inbounds i8, i8* %8128, i64 4
  %8139 = bitcast i8* %8138 to float*
  store float 0.000000e+00, float* %8139, align 1, !tbaa !2452
  %8140 = getelementptr inbounds i8, i8* %8128, i64 8
  %8141 = bitcast i8* %8140 to float*
  store float 0.000000e+00, float* %8141, align 1, !tbaa !2452
  %8142 = getelementptr inbounds i8, i8* %8128, i64 12
  %8143 = bitcast i8* %8142 to float*
  store float 0.000000e+00, float* %8143, align 1, !tbaa !2452
  %8144 = load i64, i64* %RBP
  %8145 = sub i64 %8144, 40
  %8146 = load i64, i64* %PC
  %8147 = add i64 %8146, 4
  store i64 %8147, i64* %PC
  %8148 = inttoptr i64 %8145 to i64*
  %8149 = load i64, i64* %8148
  store i64 %8149, i64* %RAX, align 8, !tbaa !2428
  %8150 = load i64, i64* %RAX
  %8151 = load i64, i64* %PC
  %8152 = add i64 %8151, 3
  store i64 %8152, i64* %PC
  %8153 = inttoptr i64 %8150 to i64*
  %8154 = load i64, i64* %8153
  store i64 %8154, i64* %RAX, align 8, !tbaa !2428
  %8155 = load i64, i64* %RBP
  %8156 = sub i64 %8155, 40
  %8157 = load i64, i64* %PC
  %8158 = add i64 %8157, 4
  store i64 %8158, i64* %PC
  %8159 = inttoptr i64 %8156 to i64*
  %8160 = load i64, i64* %8159
  store i64 %8160, i64* %RCX, align 8, !tbaa !2428
  %8161 = load i64, i64* %RCX
  %8162 = add i64 %8161, 12
  %8163 = load i64, i64* %PC
  %8164 = add i64 %8163, 4
  store i64 %8164, i64* %PC
  %8165 = inttoptr i64 %8162 to i32*
  %8166 = load i32, i32* %8165
  %8167 = sext i32 %8166 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8168, align 1, !tbaa !2432
  %8169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8169, align 1, !tbaa !2446
  %8170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8170, align 1, !tbaa !2447
  %8171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8171, align 1, !tbaa !2448
  %8172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8172, align 1, !tbaa !2449
  %8173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8173, align 1, !tbaa !2450
  %8174 = load i64, i64* %RBP
  %8175 = sub i64 %8174, 40
  %8176 = load i64, i64* %PC
  %8177 = add i64 %8176, 4
  store i64 %8177, i64* %PC
  %8178 = inttoptr i64 %8175 to i64*
  %8179 = load i64, i64* %8178
  store i64 %8179, i64* %RCX, align 8, !tbaa !2428
  %8180 = load i64, i64* %RDX
  %8181 = load i64, i64* %RCX
  %8182 = add i64 %8181, 16
  %8183 = load i64, i64* %PC
  %8184 = add i64 %8183, 4
  store i64 %8184, i64* %PC
  %8185 = inttoptr i64 %8182 to i32*
  %8186 = load i32, i32* %8185
  %8187 = shl i64 %8180, 32
  %8188 = ashr exact i64 %8187, 32
  %8189 = sext i32 %8186 to i64
  %8190 = mul nsw i64 %8189, %8188
  %8191 = trunc i64 %8190 to i32
  %8192 = and i64 %8190, 4294967295
  store i64 %8192, i64* %RDX, align 8, !tbaa !2428
  %8193 = shl i64 %8190, 32
  %8194 = ashr exact i64 %8193, 32
  %8195 = icmp ne i64 %8194, %8190
  %8196 = zext i1 %8195 to i8
  %8197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8196, i8* %8197, align 1, !tbaa !2432
  %8198 = and i32 %8191, 255
  %8199 = call i32 @llvm.ctpop.i32(i32 %8198) #16
  %8200 = trunc i32 %8199 to i8
  %8201 = and i8 %8200, 1
  %8202 = xor i8 %8201, 1
  %8203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8202, i8* %8203, align 1, !tbaa !2446
  %8204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8204, align 1, !tbaa !2447
  %8205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8205, align 1, !tbaa !2448
  %8206 = lshr i32 %8191, 31
  %8207 = trunc i32 %8206 to i8
  %8208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8207, i8* %8208, align 1, !tbaa !2449
  %8209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8196, i8* %8209, align 1, !tbaa !2450
  %8210 = load i64, i64* %RBP
  %8211 = sub i64 %8210, 40
  %8212 = load i64, i64* %PC
  %8213 = add i64 %8212, 4
  store i64 %8213, i64* %PC
  %8214 = inttoptr i64 %8211 to i64*
  %8215 = load i64, i64* %8214
  store i64 %8215, i64* %RCX, align 8, !tbaa !2428
  %8216 = load i64, i64* %RDX
  %8217 = load i64, i64* %RCX
  %8218 = add i64 %8217, 20
  %8219 = load i64, i64* %PC
  %8220 = add i64 %8219, 4
  store i64 %8220, i64* %PC
  %8221 = inttoptr i64 %8218 to i32*
  %8222 = load i32, i32* %8221
  %8223 = shl i64 %8216, 32
  %8224 = ashr exact i64 %8223, 32
  %8225 = sext i32 %8222 to i64
  %8226 = mul nsw i64 %8225, %8224
  %8227 = trunc i64 %8226 to i32
  %8228 = and i64 %8226, 4294967295
  store i64 %8228, i64* %RDX, align 8, !tbaa !2428
  %8229 = shl i64 %8226, 32
  %8230 = ashr exact i64 %8229, 32
  %8231 = icmp ne i64 %8230, %8226
  %8232 = zext i1 %8231 to i8
  %8233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8232, i8* %8233, align 1, !tbaa !2432
  %8234 = and i32 %8227, 255
  %8235 = call i32 @llvm.ctpop.i32(i32 %8234) #16
  %8236 = trunc i32 %8235 to i8
  %8237 = and i8 %8236, 1
  %8238 = xor i8 %8237, 1
  %8239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8238, i8* %8239, align 1, !tbaa !2446
  %8240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8240, align 1, !tbaa !2447
  %8241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8241, align 1, !tbaa !2448
  %8242 = lshr i32 %8227, 31
  %8243 = trunc i32 %8242 to i8
  %8244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8243, i8* %8244, align 1, !tbaa !2449
  %8245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8232, i8* %8245, align 1, !tbaa !2450
  %8246 = load i64, i64* %RBP
  %8247 = sub i64 %8246, 52
  %8248 = load i64, i64* %PC
  %8249 = add i64 %8248, 3
  store i64 %8249, i64* %PC
  %8250 = inttoptr i64 %8247 to i32*
  %8251 = load i32, i32* %8250
  %8252 = zext i32 %8251 to i64
  store i64 %8252, i64* %RSI, align 8, !tbaa !2428
  %8253 = load i64, i64* %RSI
  %8254 = load i64, i64* %PC
  %8255 = add i64 %8254, 3
  store i64 %8255, i64* %PC
  %8256 = trunc i64 %8253 to i32
  %8257 = sub i32 %8256, 1
  %8258 = zext i32 %8257 to i64
  store i64 %8258, i64* %RSI, align 8, !tbaa !2428
  %8259 = icmp ult i32 %8256, 1
  %8260 = zext i1 %8259 to i8
  %8261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8260, i8* %8261, align 1, !tbaa !2432
  %8262 = and i32 %8257, 255
  %8263 = call i32 @llvm.ctpop.i32(i32 %8262) #16
  %8264 = trunc i32 %8263 to i8
  %8265 = and i8 %8264, 1
  %8266 = xor i8 %8265, 1
  %8267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8266, i8* %8267, align 1, !tbaa !2446
  %8268 = xor i64 1, %8253
  %8269 = trunc i64 %8268 to i32
  %8270 = xor i32 %8269, %8257
  %8271 = lshr i32 %8270, 4
  %8272 = trunc i32 %8271 to i8
  %8273 = and i8 %8272, 1
  %8274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8273, i8* %8274, align 1, !tbaa !2447
  %8275 = icmp eq i32 %8257, 0
  %8276 = zext i1 %8275 to i8
  %8277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8276, i8* %8277, align 1, !tbaa !2448
  %8278 = lshr i32 %8257, 31
  %8279 = trunc i32 %8278 to i8
  %8280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8279, i8* %8280, align 1, !tbaa !2449
  %8281 = lshr i32 %8256, 31
  %8282 = xor i32 %8278, %8281
  %8283 = add nuw nsw i32 %8282, %8281
  %8284 = icmp eq i32 %8283, 2
  %8285 = zext i1 %8284 to i8
  %8286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8285, i8* %8286, align 1, !tbaa !2450
  %8287 = load i64, i64* %RBP
  %8288 = sub i64 %8287, 40
  %8289 = load i64, i64* %PC
  %8290 = add i64 %8289, 4
  store i64 %8290, i64* %PC
  %8291 = inttoptr i64 %8288 to i64*
  %8292 = load i64, i64* %8291
  store i64 %8292, i64* %RCX, align 8, !tbaa !2428
  %8293 = load i64, i64* %RSI
  %8294 = load i64, i64* %RCX
  %8295 = add i64 %8294, 16
  %8296 = load i64, i64* %PC
  %8297 = add i64 %8296, 4
  store i64 %8297, i64* %PC
  %8298 = inttoptr i64 %8295 to i32*
  %8299 = load i32, i32* %8298
  %8300 = shl i64 %8293, 32
  %8301 = ashr exact i64 %8300, 32
  %8302 = sext i32 %8299 to i64
  %8303 = mul nsw i64 %8302, %8301
  %8304 = trunc i64 %8303 to i32
  %8305 = and i64 %8303, 4294967295
  store i64 %8305, i64* %RSI, align 8, !tbaa !2428
  %8306 = shl i64 %8303, 32
  %8307 = ashr exact i64 %8306, 32
  %8308 = icmp ne i64 %8307, %8303
  %8309 = zext i1 %8308 to i8
  %8310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8309, i8* %8310, align 1, !tbaa !2432
  %8311 = and i32 %8304, 255
  %8312 = call i32 @llvm.ctpop.i32(i32 %8311) #16
  %8313 = trunc i32 %8312 to i8
  %8314 = and i8 %8313, 1
  %8315 = xor i8 %8314, 1
  %8316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8315, i8* %8316, align 1, !tbaa !2446
  %8317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8317, align 1, !tbaa !2447
  %8318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8318, align 1, !tbaa !2448
  %8319 = lshr i32 %8304, 31
  %8320 = trunc i32 %8319 to i8
  %8321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8320, i8* %8321, align 1, !tbaa !2449
  %8322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8309, i8* %8322, align 1, !tbaa !2450
  %8323 = load i64, i64* %RBP
  %8324 = sub i64 %8323, 40
  %8325 = load i64, i64* %PC
  %8326 = add i64 %8325, 4
  store i64 %8326, i64* %PC
  %8327 = inttoptr i64 %8324 to i64*
  %8328 = load i64, i64* %8327
  store i64 %8328, i64* %RCX, align 8, !tbaa !2428
  %8329 = load i64, i64* %RSI
  %8330 = load i64, i64* %RCX
  %8331 = add i64 %8330, 20
  %8332 = load i64, i64* %PC
  %8333 = add i64 %8332, 4
  store i64 %8333, i64* %PC
  %8334 = inttoptr i64 %8331 to i32*
  %8335 = load i32, i32* %8334
  %8336 = shl i64 %8329, 32
  %8337 = ashr exact i64 %8336, 32
  %8338 = sext i32 %8335 to i64
  %8339 = mul nsw i64 %8338, %8337
  %8340 = trunc i64 %8339 to i32
  %8341 = and i64 %8339, 4294967295
  store i64 %8341, i64* %RSI, align 8, !tbaa !2428
  %8342 = shl i64 %8339, 32
  %8343 = ashr exact i64 %8342, 32
  %8344 = icmp ne i64 %8343, %8339
  %8345 = zext i1 %8344 to i8
  %8346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8345, i8* %8346, align 1, !tbaa !2432
  %8347 = and i32 %8340, 255
  %8348 = call i32 @llvm.ctpop.i32(i32 %8347) #16
  %8349 = trunc i32 %8348 to i8
  %8350 = and i8 %8349, 1
  %8351 = xor i8 %8350, 1
  %8352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8351, i8* %8352, align 1, !tbaa !2446
  %8353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8353, align 1, !tbaa !2447
  %8354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8354, align 1, !tbaa !2448
  %8355 = lshr i32 %8340, 31
  %8356 = trunc i32 %8355 to i8
  %8357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8356, i8* %8357, align 1, !tbaa !2449
  %8358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8345, i8* %8358, align 1, !tbaa !2450
  %8359 = load i64, i64* %RDX
  %8360 = load i32, i32* %ESI
  %8361 = zext i32 %8360 to i64
  %8362 = load i64, i64* %PC
  %8363 = add i64 %8362, 2
  store i64 %8363, i64* %PC
  %8364 = trunc i64 %8359 to i32
  %8365 = add i32 %8360, %8364
  %8366 = zext i32 %8365 to i64
  store i64 %8366, i64* %RDX, align 8, !tbaa !2428
  %8367 = icmp ult i32 %8365, %8364
  %8368 = icmp ult i32 %8365, %8360
  %8369 = or i1 %8367, %8368
  %8370 = zext i1 %8369 to i8
  %8371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8370, i8* %8371, align 1, !tbaa !2432
  %8372 = and i32 %8365, 255
  %8373 = call i32 @llvm.ctpop.i32(i32 %8372) #16
  %8374 = trunc i32 %8373 to i8
  %8375 = and i8 %8374, 1
  %8376 = xor i8 %8375, 1
  %8377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8376, i8* %8377, align 1, !tbaa !2446
  %8378 = xor i64 %8361, %8359
  %8379 = trunc i64 %8378 to i32
  %8380 = xor i32 %8379, %8365
  %8381 = lshr i32 %8380, 4
  %8382 = trunc i32 %8381 to i8
  %8383 = and i8 %8382, 1
  %8384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8383, i8* %8384, align 1, !tbaa !2447
  %8385 = icmp eq i32 %8365, 0
  %8386 = zext i1 %8385 to i8
  %8387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8386, i8* %8387, align 1, !tbaa !2448
  %8388 = lshr i32 %8365, 31
  %8389 = trunc i32 %8388 to i8
  %8390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8389, i8* %8390, align 1, !tbaa !2449
  %8391 = lshr i32 %8364, 31
  %8392 = lshr i32 %8360, 31
  %8393 = xor i32 %8388, %8391
  %8394 = xor i32 %8388, %8392
  %8395 = add nuw nsw i32 %8393, %8394
  %8396 = icmp eq i32 %8395, 2
  %8397 = zext i1 %8396 to i8
  %8398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8397, i8* %8398, align 1, !tbaa !2450
  %8399 = load i64, i64* %RBP
  %8400 = sub i64 %8399, 56
  %8401 = load i64, i64* %PC
  %8402 = add i64 %8401, 3
  store i64 %8402, i64* %PC
  %8403 = inttoptr i64 %8400 to i32*
  %8404 = load i32, i32* %8403
  %8405 = zext i32 %8404 to i64
  store i64 %8405, i64* %RSI, align 8, !tbaa !2428
  %8406 = load i64, i64* %RBP
  %8407 = sub i64 %8406, 40
  %8408 = load i64, i64* %PC
  %8409 = add i64 %8408, 4
  store i64 %8409, i64* %PC
  %8410 = inttoptr i64 %8407 to i64*
  %8411 = load i64, i64* %8410
  store i64 %8411, i64* %RCX, align 8, !tbaa !2428
  %8412 = load i64, i64* %RSI
  %8413 = load i64, i64* %RCX
  %8414 = add i64 %8413, 20
  %8415 = load i64, i64* %PC
  %8416 = add i64 %8415, 4
  store i64 %8416, i64* %PC
  %8417 = inttoptr i64 %8414 to i32*
  %8418 = load i32, i32* %8417
  %8419 = shl i64 %8412, 32
  %8420 = ashr exact i64 %8419, 32
  %8421 = sext i32 %8418 to i64
  %8422 = mul nsw i64 %8421, %8420
  %8423 = trunc i64 %8422 to i32
  %8424 = and i64 %8422, 4294967295
  store i64 %8424, i64* %RSI, align 8, !tbaa !2428
  %8425 = shl i64 %8422, 32
  %8426 = ashr exact i64 %8425, 32
  %8427 = icmp ne i64 %8426, %8422
  %8428 = zext i1 %8427 to i8
  %8429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8428, i8* %8429, align 1, !tbaa !2432
  %8430 = and i32 %8423, 255
  %8431 = call i32 @llvm.ctpop.i32(i32 %8430) #16
  %8432 = trunc i32 %8431 to i8
  %8433 = and i8 %8432, 1
  %8434 = xor i8 %8433, 1
  %8435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8434, i8* %8435, align 1, !tbaa !2446
  %8436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8436, align 1, !tbaa !2447
  %8437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8437, align 1, !tbaa !2448
  %8438 = lshr i32 %8423, 31
  %8439 = trunc i32 %8438 to i8
  %8440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8439, i8* %8440, align 1, !tbaa !2449
  %8441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8428, i8* %8441, align 1, !tbaa !2450
  %8442 = load i64, i64* %RDX
  %8443 = load i32, i32* %ESI
  %8444 = zext i32 %8443 to i64
  %8445 = load i64, i64* %PC
  %8446 = add i64 %8445, 2
  store i64 %8446, i64* %PC
  %8447 = trunc i64 %8442 to i32
  %8448 = add i32 %8443, %8447
  %8449 = zext i32 %8448 to i64
  store i64 %8449, i64* %RDX, align 8, !tbaa !2428
  %8450 = icmp ult i32 %8448, %8447
  %8451 = icmp ult i32 %8448, %8443
  %8452 = or i1 %8450, %8451
  %8453 = zext i1 %8452 to i8
  %8454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8453, i8* %8454, align 1, !tbaa !2432
  %8455 = and i32 %8448, 255
  %8456 = call i32 @llvm.ctpop.i32(i32 %8455) #16
  %8457 = trunc i32 %8456 to i8
  %8458 = and i8 %8457, 1
  %8459 = xor i8 %8458, 1
  %8460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8459, i8* %8460, align 1, !tbaa !2446
  %8461 = xor i64 %8444, %8442
  %8462 = trunc i64 %8461 to i32
  %8463 = xor i32 %8462, %8448
  %8464 = lshr i32 %8463, 4
  %8465 = trunc i32 %8464 to i8
  %8466 = and i8 %8465, 1
  %8467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8466, i8* %8467, align 1, !tbaa !2447
  %8468 = icmp eq i32 %8448, 0
  %8469 = zext i1 %8468 to i8
  %8470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8469, i8* %8470, align 1, !tbaa !2448
  %8471 = lshr i32 %8448, 31
  %8472 = trunc i32 %8471 to i8
  %8473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8472, i8* %8473, align 1, !tbaa !2449
  %8474 = lshr i32 %8447, 31
  %8475 = lshr i32 %8443, 31
  %8476 = xor i32 %8471, %8474
  %8477 = xor i32 %8471, %8475
  %8478 = add nuw nsw i32 %8476, %8477
  %8479 = icmp eq i32 %8478, 2
  %8480 = zext i1 %8479 to i8
  %8481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8480, i8* %8481, align 1, !tbaa !2450
  %8482 = load i64, i64* %RBP
  %8483 = sub i64 %8482, 60
  %8484 = load i64, i64* %PC
  %8485 = add i64 %8484, 3
  store i64 %8485, i64* %PC
  %8486 = inttoptr i64 %8483 to i32*
  %8487 = load i32, i32* %8486
  %8488 = zext i32 %8487 to i64
  store i64 %8488, i64* %RSI, align 8, !tbaa !2428
  %8489 = load i64, i64* %RSI
  %8490 = load i64, i64* %PC
  %8491 = add i64 %8490, 3
  store i64 %8491, i64* %PC
  %8492 = trunc i64 %8489 to i32
  %8493 = add i32 1, %8492
  %8494 = zext i32 %8493 to i64
  store i64 %8494, i64* %RSI, align 8, !tbaa !2428
  %8495 = icmp ult i32 %8493, %8492
  %8496 = icmp ult i32 %8493, 1
  %8497 = or i1 %8495, %8496
  %8498 = zext i1 %8497 to i8
  %8499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8498, i8* %8499, align 1, !tbaa !2432
  %8500 = and i32 %8493, 255
  %8501 = call i32 @llvm.ctpop.i32(i32 %8500) #16
  %8502 = trunc i32 %8501 to i8
  %8503 = and i8 %8502, 1
  %8504 = xor i8 %8503, 1
  %8505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8504, i8* %8505, align 1, !tbaa !2446
  %8506 = xor i64 1, %8489
  %8507 = trunc i64 %8506 to i32
  %8508 = xor i32 %8507, %8493
  %8509 = lshr i32 %8508, 4
  %8510 = trunc i32 %8509 to i8
  %8511 = and i8 %8510, 1
  %8512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8511, i8* %8512, align 1, !tbaa !2447
  %8513 = icmp eq i32 %8493, 0
  %8514 = zext i1 %8513 to i8
  %8515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8514, i8* %8515, align 1, !tbaa !2448
  %8516 = lshr i32 %8493, 31
  %8517 = trunc i32 %8516 to i8
  %8518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8517, i8* %8518, align 1, !tbaa !2449
  %8519 = lshr i32 %8492, 31
  %8520 = xor i32 %8516, %8519
  %8521 = add nuw nsw i32 %8520, %8516
  %8522 = icmp eq i32 %8521, 2
  %8523 = zext i1 %8522 to i8
  %8524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8523, i8* %8524, align 1, !tbaa !2450
  %8525 = load i64, i64* %RDX
  %8526 = load i32, i32* %ESI
  %8527 = zext i32 %8526 to i64
  %8528 = load i64, i64* %PC
  %8529 = add i64 %8528, 2
  store i64 %8529, i64* %PC
  %8530 = trunc i64 %8525 to i32
  %8531 = add i32 %8526, %8530
  %8532 = zext i32 %8531 to i64
  store i64 %8532, i64* %RDX, align 8, !tbaa !2428
  %8533 = icmp ult i32 %8531, %8530
  %8534 = icmp ult i32 %8531, %8526
  %8535 = or i1 %8533, %8534
  %8536 = zext i1 %8535 to i8
  %8537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8536, i8* %8537, align 1, !tbaa !2432
  %8538 = and i32 %8531, 255
  %8539 = call i32 @llvm.ctpop.i32(i32 %8538) #16
  %8540 = trunc i32 %8539 to i8
  %8541 = and i8 %8540, 1
  %8542 = xor i8 %8541, 1
  %8543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8542, i8* %8543, align 1, !tbaa !2446
  %8544 = xor i64 %8527, %8525
  %8545 = trunc i64 %8544 to i32
  %8546 = xor i32 %8545, %8531
  %8547 = lshr i32 %8546, 4
  %8548 = trunc i32 %8547 to i8
  %8549 = and i8 %8548, 1
  %8550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8549, i8* %8550, align 1, !tbaa !2447
  %8551 = icmp eq i32 %8531, 0
  %8552 = zext i1 %8551 to i8
  %8553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8552, i8* %8553, align 1, !tbaa !2448
  %8554 = lshr i32 %8531, 31
  %8555 = trunc i32 %8554 to i8
  %8556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8555, i8* %8556, align 1, !tbaa !2449
  %8557 = lshr i32 %8530, 31
  %8558 = lshr i32 %8526, 31
  %8559 = xor i32 %8554, %8557
  %8560 = xor i32 %8554, %8558
  %8561 = add nuw nsw i32 %8559, %8560
  %8562 = icmp eq i32 %8561, 2
  %8563 = zext i1 %8562 to i8
  %8564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8563, i8* %8564, align 1, !tbaa !2450
  %8565 = load i32, i32* %EDX
  %8566 = zext i32 %8565 to i64
  %8567 = load i64, i64* %PC
  %8568 = add i64 %8567, 3
  store i64 %8568, i64* %PC
  %8569 = shl i64 %8566, 32
  %8570 = ashr exact i64 %8569, 32
  store i64 %8570, i64* %RCX, align 8, !tbaa !2428
  %8571 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8572 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8573 = load i64, i64* %RAX
  %8574 = load i64, i64* %RCX
  %8575 = mul i64 %8574, 4
  %8576 = add i64 %8575, %8573
  %8577 = load i64, i64* %PC
  %8578 = add i64 %8577, 5
  store i64 %8578, i64* %PC
  %8579 = bitcast i8* %8572 to <2 x float>*
  %8580 = load <2 x float>, <2 x float>* %8579, align 1
  %8581 = getelementptr inbounds i8, i8* %8572, i64 8
  %8582 = bitcast i8* %8581 to <2 x i32>*
  %8583 = load <2 x i32>, <2 x i32>* %8582, align 1
  %8584 = inttoptr i64 %8576 to float*
  %8585 = load float, float* %8584
  %8586 = extractelement <2 x float> %8580, i32 0
  %8587 = fsub float %8586, %8585
  %8588 = bitcast i8* %8571 to float*
  store float %8587, float* %8588, align 1, !tbaa !2452
  %8589 = bitcast <2 x float> %8580 to <2 x i32>
  %8590 = extractelement <2 x i32> %8589, i32 1
  %8591 = getelementptr inbounds i8, i8* %8571, i64 4
  %8592 = bitcast i8* %8591 to i32*
  store i32 %8590, i32* %8592, align 1, !tbaa !2452
  %8593 = extractelement <2 x i32> %8583, i32 0
  %8594 = getelementptr inbounds i8, i8* %8571, i64 8
  %8595 = bitcast i8* %8594 to i32*
  store i32 %8593, i32* %8595, align 1, !tbaa !2452
  %8596 = extractelement <2 x i32> %8583, i32 1
  %8597 = getelementptr inbounds i8, i8* %8571, i64 12
  %8598 = bitcast i8* %8597 to i32*
  store i32 %8596, i32* %8598, align 1, !tbaa !2452
  %8599 = load i64, i64* %RBP
  %8600 = sub i64 %8599, 40
  %8601 = load i64, i64* %PC
  %8602 = add i64 %8601, 4
  store i64 %8602, i64* %PC
  %8603 = inttoptr i64 %8600 to i64*
  %8604 = load i64, i64* %8603
  store i64 %8604, i64* %RAX, align 8, !tbaa !2428
  %8605 = load i64, i64* %RAX
  %8606 = load i64, i64* %PC
  %8607 = add i64 %8606, 3
  store i64 %8607, i64* %PC
  %8608 = inttoptr i64 %8605 to i64*
  %8609 = load i64, i64* %8608
  store i64 %8609, i64* %RAX, align 8, !tbaa !2428
  %8610 = load i64, i64* %RBP
  %8611 = sub i64 %8610, 40
  %8612 = load i64, i64* %PC
  %8613 = add i64 %8612, 4
  store i64 %8613, i64* %PC
  %8614 = inttoptr i64 %8611 to i64*
  %8615 = load i64, i64* %8614
  store i64 %8615, i64* %RCX, align 8, !tbaa !2428
  %8616 = load i64, i64* %RCX
  %8617 = add i64 %8616, 12
  %8618 = load i64, i64* %PC
  %8619 = add i64 %8618, 4
  store i64 %8619, i64* %PC
  %8620 = inttoptr i64 %8617 to i32*
  %8621 = load i32, i32* %8620
  %8622 = sext i32 %8621 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8623, align 1, !tbaa !2432
  %8624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8624, align 1, !tbaa !2446
  %8625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8625, align 1, !tbaa !2447
  %8626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8626, align 1, !tbaa !2448
  %8627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8627, align 1, !tbaa !2449
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8628, align 1, !tbaa !2450
  %8629 = load i64, i64* %RBP
  %8630 = sub i64 %8629, 40
  %8631 = load i64, i64* %PC
  %8632 = add i64 %8631, 4
  store i64 %8632, i64* %PC
  %8633 = inttoptr i64 %8630 to i64*
  %8634 = load i64, i64* %8633
  store i64 %8634, i64* %RCX, align 8, !tbaa !2428
  %8635 = load i64, i64* %RDX
  %8636 = load i64, i64* %RCX
  %8637 = add i64 %8636, 16
  %8638 = load i64, i64* %PC
  %8639 = add i64 %8638, 4
  store i64 %8639, i64* %PC
  %8640 = inttoptr i64 %8637 to i32*
  %8641 = load i32, i32* %8640
  %8642 = shl i64 %8635, 32
  %8643 = ashr exact i64 %8642, 32
  %8644 = sext i32 %8641 to i64
  %8645 = mul nsw i64 %8644, %8643
  %8646 = trunc i64 %8645 to i32
  %8647 = and i64 %8645, 4294967295
  store i64 %8647, i64* %RDX, align 8, !tbaa !2428
  %8648 = shl i64 %8645, 32
  %8649 = ashr exact i64 %8648, 32
  %8650 = icmp ne i64 %8649, %8645
  %8651 = zext i1 %8650 to i8
  %8652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8651, i8* %8652, align 1, !tbaa !2432
  %8653 = and i32 %8646, 255
  %8654 = call i32 @llvm.ctpop.i32(i32 %8653) #16
  %8655 = trunc i32 %8654 to i8
  %8656 = and i8 %8655, 1
  %8657 = xor i8 %8656, 1
  %8658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8657, i8* %8658, align 1, !tbaa !2446
  %8659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8659, align 1, !tbaa !2447
  %8660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8660, align 1, !tbaa !2448
  %8661 = lshr i32 %8646, 31
  %8662 = trunc i32 %8661 to i8
  %8663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8662, i8* %8663, align 1, !tbaa !2449
  %8664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8651, i8* %8664, align 1, !tbaa !2450
  %8665 = load i64, i64* %RBP
  %8666 = sub i64 %8665, 40
  %8667 = load i64, i64* %PC
  %8668 = add i64 %8667, 4
  store i64 %8668, i64* %PC
  %8669 = inttoptr i64 %8666 to i64*
  %8670 = load i64, i64* %8669
  store i64 %8670, i64* %RCX, align 8, !tbaa !2428
  %8671 = load i64, i64* %RDX
  %8672 = load i64, i64* %RCX
  %8673 = add i64 %8672, 20
  %8674 = load i64, i64* %PC
  %8675 = add i64 %8674, 4
  store i64 %8675, i64* %PC
  %8676 = inttoptr i64 %8673 to i32*
  %8677 = load i32, i32* %8676
  %8678 = shl i64 %8671, 32
  %8679 = ashr exact i64 %8678, 32
  %8680 = sext i32 %8677 to i64
  %8681 = mul nsw i64 %8680, %8679
  %8682 = trunc i64 %8681 to i32
  %8683 = and i64 %8681, 4294967295
  store i64 %8683, i64* %RDX, align 8, !tbaa !2428
  %8684 = shl i64 %8681, 32
  %8685 = ashr exact i64 %8684, 32
  %8686 = icmp ne i64 %8685, %8681
  %8687 = zext i1 %8686 to i8
  %8688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8687, i8* %8688, align 1, !tbaa !2432
  %8689 = and i32 %8682, 255
  %8690 = call i32 @llvm.ctpop.i32(i32 %8689) #16
  %8691 = trunc i32 %8690 to i8
  %8692 = and i8 %8691, 1
  %8693 = xor i8 %8692, 1
  %8694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8693, i8* %8694, align 1, !tbaa !2446
  %8695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8695, align 1, !tbaa !2447
  %8696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8696, align 1, !tbaa !2448
  %8697 = lshr i32 %8682, 31
  %8698 = trunc i32 %8697 to i8
  %8699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8698, i8* %8699, align 1, !tbaa !2449
  %8700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8687, i8* %8700, align 1, !tbaa !2450
  %8701 = load i64, i64* %RBP
  %8702 = sub i64 %8701, 52
  %8703 = load i64, i64* %PC
  %8704 = add i64 %8703, 3
  store i64 %8704, i64* %PC
  %8705 = inttoptr i64 %8702 to i32*
  %8706 = load i32, i32* %8705
  %8707 = zext i32 %8706 to i64
  store i64 %8707, i64* %RSI, align 8, !tbaa !2428
  %8708 = load i64, i64* %RSI
  %8709 = load i64, i64* %PC
  %8710 = add i64 %8709, 3
  store i64 %8710, i64* %PC
  %8711 = trunc i64 %8708 to i32
  %8712 = add i32 1, %8711
  %8713 = zext i32 %8712 to i64
  store i64 %8713, i64* %RSI, align 8, !tbaa !2428
  %8714 = icmp ult i32 %8712, %8711
  %8715 = icmp ult i32 %8712, 1
  %8716 = or i1 %8714, %8715
  %8717 = zext i1 %8716 to i8
  %8718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8717, i8* %8718, align 1, !tbaa !2432
  %8719 = and i32 %8712, 255
  %8720 = call i32 @llvm.ctpop.i32(i32 %8719) #16
  %8721 = trunc i32 %8720 to i8
  %8722 = and i8 %8721, 1
  %8723 = xor i8 %8722, 1
  %8724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8723, i8* %8724, align 1, !tbaa !2446
  %8725 = xor i64 1, %8708
  %8726 = trunc i64 %8725 to i32
  %8727 = xor i32 %8726, %8712
  %8728 = lshr i32 %8727, 4
  %8729 = trunc i32 %8728 to i8
  %8730 = and i8 %8729, 1
  %8731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8730, i8* %8731, align 1, !tbaa !2447
  %8732 = icmp eq i32 %8712, 0
  %8733 = zext i1 %8732 to i8
  %8734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8733, i8* %8734, align 1, !tbaa !2448
  %8735 = lshr i32 %8712, 31
  %8736 = trunc i32 %8735 to i8
  %8737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8736, i8* %8737, align 1, !tbaa !2449
  %8738 = lshr i32 %8711, 31
  %8739 = xor i32 %8735, %8738
  %8740 = add nuw nsw i32 %8739, %8735
  %8741 = icmp eq i32 %8740, 2
  %8742 = zext i1 %8741 to i8
  %8743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8742, i8* %8743, align 1, !tbaa !2450
  %8744 = load i64, i64* %RBP
  %8745 = sub i64 %8744, 40
  %8746 = load i64, i64* %PC
  %8747 = add i64 %8746, 4
  store i64 %8747, i64* %PC
  %8748 = inttoptr i64 %8745 to i64*
  %8749 = load i64, i64* %8748
  store i64 %8749, i64* %RCX, align 8, !tbaa !2428
  %8750 = load i64, i64* %RSI
  %8751 = load i64, i64* %RCX
  %8752 = add i64 %8751, 16
  %8753 = load i64, i64* %PC
  %8754 = add i64 %8753, 4
  store i64 %8754, i64* %PC
  %8755 = inttoptr i64 %8752 to i32*
  %8756 = load i32, i32* %8755
  %8757 = shl i64 %8750, 32
  %8758 = ashr exact i64 %8757, 32
  %8759 = sext i32 %8756 to i64
  %8760 = mul nsw i64 %8759, %8758
  %8761 = trunc i64 %8760 to i32
  %8762 = and i64 %8760, 4294967295
  store i64 %8762, i64* %RSI, align 8, !tbaa !2428
  %8763 = shl i64 %8760, 32
  %8764 = ashr exact i64 %8763, 32
  %8765 = icmp ne i64 %8764, %8760
  %8766 = zext i1 %8765 to i8
  %8767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8766, i8* %8767, align 1, !tbaa !2432
  %8768 = and i32 %8761, 255
  %8769 = call i32 @llvm.ctpop.i32(i32 %8768) #16
  %8770 = trunc i32 %8769 to i8
  %8771 = and i8 %8770, 1
  %8772 = xor i8 %8771, 1
  %8773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8772, i8* %8773, align 1, !tbaa !2446
  %8774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8774, align 1, !tbaa !2447
  %8775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8775, align 1, !tbaa !2448
  %8776 = lshr i32 %8761, 31
  %8777 = trunc i32 %8776 to i8
  %8778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8777, i8* %8778, align 1, !tbaa !2449
  %8779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8766, i8* %8779, align 1, !tbaa !2450
  %8780 = load i64, i64* %RBP
  %8781 = sub i64 %8780, 40
  %8782 = load i64, i64* %PC
  %8783 = add i64 %8782, 4
  store i64 %8783, i64* %PC
  %8784 = inttoptr i64 %8781 to i64*
  %8785 = load i64, i64* %8784
  store i64 %8785, i64* %RCX, align 8, !tbaa !2428
  %8786 = load i64, i64* %RSI
  %8787 = load i64, i64* %RCX
  %8788 = add i64 %8787, 20
  %8789 = load i64, i64* %PC
  %8790 = add i64 %8789, 4
  store i64 %8790, i64* %PC
  %8791 = inttoptr i64 %8788 to i32*
  %8792 = load i32, i32* %8791
  %8793 = shl i64 %8786, 32
  %8794 = ashr exact i64 %8793, 32
  %8795 = sext i32 %8792 to i64
  %8796 = mul nsw i64 %8795, %8794
  %8797 = trunc i64 %8796 to i32
  %8798 = and i64 %8796, 4294967295
  store i64 %8798, i64* %RSI, align 8, !tbaa !2428
  %8799 = shl i64 %8796, 32
  %8800 = ashr exact i64 %8799, 32
  %8801 = icmp ne i64 %8800, %8796
  %8802 = zext i1 %8801 to i8
  %8803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8802, i8* %8803, align 1, !tbaa !2432
  %8804 = and i32 %8797, 255
  %8805 = call i32 @llvm.ctpop.i32(i32 %8804) #16
  %8806 = trunc i32 %8805 to i8
  %8807 = and i8 %8806, 1
  %8808 = xor i8 %8807, 1
  %8809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8808, i8* %8809, align 1, !tbaa !2446
  %8810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8810, align 1, !tbaa !2447
  %8811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8811, align 1, !tbaa !2448
  %8812 = lshr i32 %8797, 31
  %8813 = trunc i32 %8812 to i8
  %8814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8813, i8* %8814, align 1, !tbaa !2449
  %8815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8802, i8* %8815, align 1, !tbaa !2450
  %8816 = load i64, i64* %RDX
  %8817 = load i32, i32* %ESI
  %8818 = zext i32 %8817 to i64
  %8819 = load i64, i64* %PC
  %8820 = add i64 %8819, 2
  store i64 %8820, i64* %PC
  %8821 = trunc i64 %8816 to i32
  %8822 = add i32 %8817, %8821
  %8823 = zext i32 %8822 to i64
  store i64 %8823, i64* %RDX, align 8, !tbaa !2428
  %8824 = icmp ult i32 %8822, %8821
  %8825 = icmp ult i32 %8822, %8817
  %8826 = or i1 %8824, %8825
  %8827 = zext i1 %8826 to i8
  %8828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8827, i8* %8828, align 1, !tbaa !2432
  %8829 = and i32 %8822, 255
  %8830 = call i32 @llvm.ctpop.i32(i32 %8829) #16
  %8831 = trunc i32 %8830 to i8
  %8832 = and i8 %8831, 1
  %8833 = xor i8 %8832, 1
  %8834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8833, i8* %8834, align 1, !tbaa !2446
  %8835 = xor i64 %8818, %8816
  %8836 = trunc i64 %8835 to i32
  %8837 = xor i32 %8836, %8822
  %8838 = lshr i32 %8837, 4
  %8839 = trunc i32 %8838 to i8
  %8840 = and i8 %8839, 1
  %8841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8840, i8* %8841, align 1, !tbaa !2447
  %8842 = icmp eq i32 %8822, 0
  %8843 = zext i1 %8842 to i8
  %8844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8843, i8* %8844, align 1, !tbaa !2448
  %8845 = lshr i32 %8822, 31
  %8846 = trunc i32 %8845 to i8
  %8847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8846, i8* %8847, align 1, !tbaa !2449
  %8848 = lshr i32 %8821, 31
  %8849 = lshr i32 %8817, 31
  %8850 = xor i32 %8845, %8848
  %8851 = xor i32 %8845, %8849
  %8852 = add nuw nsw i32 %8850, %8851
  %8853 = icmp eq i32 %8852, 2
  %8854 = zext i1 %8853 to i8
  %8855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8854, i8* %8855, align 1, !tbaa !2450
  %8856 = load i64, i64* %RBP
  %8857 = sub i64 %8856, 56
  %8858 = load i64, i64* %PC
  %8859 = add i64 %8858, 3
  store i64 %8859, i64* %PC
  %8860 = inttoptr i64 %8857 to i32*
  %8861 = load i32, i32* %8860
  %8862 = zext i32 %8861 to i64
  store i64 %8862, i64* %RSI, align 8, !tbaa !2428
  %8863 = load i64, i64* %RBP
  %8864 = sub i64 %8863, 40
  %8865 = load i64, i64* %PC
  %8866 = add i64 %8865, 4
  store i64 %8866, i64* %PC
  %8867 = inttoptr i64 %8864 to i64*
  %8868 = load i64, i64* %8867
  store i64 %8868, i64* %RCX, align 8, !tbaa !2428
  %8869 = load i64, i64* %RSI
  %8870 = load i64, i64* %RCX
  %8871 = add i64 %8870, 20
  %8872 = load i64, i64* %PC
  %8873 = add i64 %8872, 4
  store i64 %8873, i64* %PC
  %8874 = inttoptr i64 %8871 to i32*
  %8875 = load i32, i32* %8874
  %8876 = shl i64 %8869, 32
  %8877 = ashr exact i64 %8876, 32
  %8878 = sext i32 %8875 to i64
  %8879 = mul nsw i64 %8878, %8877
  %8880 = trunc i64 %8879 to i32
  %8881 = and i64 %8879, 4294967295
  store i64 %8881, i64* %RSI, align 8, !tbaa !2428
  %8882 = shl i64 %8879, 32
  %8883 = ashr exact i64 %8882, 32
  %8884 = icmp ne i64 %8883, %8879
  %8885 = zext i1 %8884 to i8
  %8886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8885, i8* %8886, align 1, !tbaa !2432
  %8887 = and i32 %8880, 255
  %8888 = call i32 @llvm.ctpop.i32(i32 %8887) #16
  %8889 = trunc i32 %8888 to i8
  %8890 = and i8 %8889, 1
  %8891 = xor i8 %8890, 1
  %8892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8891, i8* %8892, align 1, !tbaa !2446
  %8893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8893, align 1, !tbaa !2447
  %8894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8894, align 1, !tbaa !2448
  %8895 = lshr i32 %8880, 31
  %8896 = trunc i32 %8895 to i8
  %8897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8896, i8* %8897, align 1, !tbaa !2449
  %8898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8885, i8* %8898, align 1, !tbaa !2450
  %8899 = load i64, i64* %RDX
  %8900 = load i32, i32* %ESI
  %8901 = zext i32 %8900 to i64
  %8902 = load i64, i64* %PC
  %8903 = add i64 %8902, 2
  store i64 %8903, i64* %PC
  %8904 = trunc i64 %8899 to i32
  %8905 = add i32 %8900, %8904
  %8906 = zext i32 %8905 to i64
  store i64 %8906, i64* %RDX, align 8, !tbaa !2428
  %8907 = icmp ult i32 %8905, %8904
  %8908 = icmp ult i32 %8905, %8900
  %8909 = or i1 %8907, %8908
  %8910 = zext i1 %8909 to i8
  %8911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8910, i8* %8911, align 1, !tbaa !2432
  %8912 = and i32 %8905, 255
  %8913 = call i32 @llvm.ctpop.i32(i32 %8912) #16
  %8914 = trunc i32 %8913 to i8
  %8915 = and i8 %8914, 1
  %8916 = xor i8 %8915, 1
  %8917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8916, i8* %8917, align 1, !tbaa !2446
  %8918 = xor i64 %8901, %8899
  %8919 = trunc i64 %8918 to i32
  %8920 = xor i32 %8919, %8905
  %8921 = lshr i32 %8920, 4
  %8922 = trunc i32 %8921 to i8
  %8923 = and i8 %8922, 1
  %8924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8923, i8* %8924, align 1, !tbaa !2447
  %8925 = icmp eq i32 %8905, 0
  %8926 = zext i1 %8925 to i8
  %8927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8926, i8* %8927, align 1, !tbaa !2448
  %8928 = lshr i32 %8905, 31
  %8929 = trunc i32 %8928 to i8
  %8930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8929, i8* %8930, align 1, !tbaa !2449
  %8931 = lshr i32 %8904, 31
  %8932 = lshr i32 %8900, 31
  %8933 = xor i32 %8928, %8931
  %8934 = xor i32 %8928, %8932
  %8935 = add nuw nsw i32 %8933, %8934
  %8936 = icmp eq i32 %8935, 2
  %8937 = zext i1 %8936 to i8
  %8938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8937, i8* %8938, align 1, !tbaa !2450
  %8939 = load i64, i64* %RBP
  %8940 = sub i64 %8939, 60
  %8941 = load i64, i64* %PC
  %8942 = add i64 %8941, 3
  store i64 %8942, i64* %PC
  %8943 = inttoptr i64 %8940 to i32*
  %8944 = load i32, i32* %8943
  %8945 = zext i32 %8944 to i64
  store i64 %8945, i64* %RSI, align 8, !tbaa !2428
  %8946 = load i64, i64* %RSI
  %8947 = load i64, i64* %PC
  %8948 = add i64 %8947, 3
  store i64 %8948, i64* %PC
  %8949 = trunc i64 %8946 to i32
  %8950 = sub i32 %8949, 1
  %8951 = zext i32 %8950 to i64
  store i64 %8951, i64* %RSI, align 8, !tbaa !2428
  %8952 = icmp ult i32 %8949, 1
  %8953 = zext i1 %8952 to i8
  %8954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8953, i8* %8954, align 1, !tbaa !2432
  %8955 = and i32 %8950, 255
  %8956 = call i32 @llvm.ctpop.i32(i32 %8955) #16
  %8957 = trunc i32 %8956 to i8
  %8958 = and i8 %8957, 1
  %8959 = xor i8 %8958, 1
  %8960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8959, i8* %8960, align 1, !tbaa !2446
  %8961 = xor i64 1, %8946
  %8962 = trunc i64 %8961 to i32
  %8963 = xor i32 %8962, %8950
  %8964 = lshr i32 %8963, 4
  %8965 = trunc i32 %8964 to i8
  %8966 = and i8 %8965, 1
  %8967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8966, i8* %8967, align 1, !tbaa !2447
  %8968 = icmp eq i32 %8950, 0
  %8969 = zext i1 %8968 to i8
  %8970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8969, i8* %8970, align 1, !tbaa !2448
  %8971 = lshr i32 %8950, 31
  %8972 = trunc i32 %8971 to i8
  %8973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8972, i8* %8973, align 1, !tbaa !2449
  %8974 = lshr i32 %8949, 31
  %8975 = xor i32 %8971, %8974
  %8976 = add nuw nsw i32 %8975, %8974
  %8977 = icmp eq i32 %8976, 2
  %8978 = zext i1 %8977 to i8
  %8979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8978, i8* %8979, align 1, !tbaa !2450
  %8980 = load i64, i64* %RDX
  %8981 = load i32, i32* %ESI
  %8982 = zext i32 %8981 to i64
  %8983 = load i64, i64* %PC
  %8984 = add i64 %8983, 2
  store i64 %8984, i64* %PC
  %8985 = trunc i64 %8980 to i32
  %8986 = add i32 %8981, %8985
  %8987 = zext i32 %8986 to i64
  store i64 %8987, i64* %RDX, align 8, !tbaa !2428
  %8988 = icmp ult i32 %8986, %8985
  %8989 = icmp ult i32 %8986, %8981
  %8990 = or i1 %8988, %8989
  %8991 = zext i1 %8990 to i8
  %8992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8991, i8* %8992, align 1, !tbaa !2432
  %8993 = and i32 %8986, 255
  %8994 = call i32 @llvm.ctpop.i32(i32 %8993) #16
  %8995 = trunc i32 %8994 to i8
  %8996 = and i8 %8995, 1
  %8997 = xor i8 %8996, 1
  %8998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8997, i8* %8998, align 1, !tbaa !2446
  %8999 = xor i64 %8982, %8980
  %9000 = trunc i64 %8999 to i32
  %9001 = xor i32 %9000, %8986
  %9002 = lshr i32 %9001, 4
  %9003 = trunc i32 %9002 to i8
  %9004 = and i8 %9003, 1
  %9005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9004, i8* %9005, align 1, !tbaa !2447
  %9006 = icmp eq i32 %8986, 0
  %9007 = zext i1 %9006 to i8
  %9008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9007, i8* %9008, align 1, !tbaa !2448
  %9009 = lshr i32 %8986, 31
  %9010 = trunc i32 %9009 to i8
  %9011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9010, i8* %9011, align 1, !tbaa !2449
  %9012 = lshr i32 %8985, 31
  %9013 = lshr i32 %8981, 31
  %9014 = xor i32 %9009, %9012
  %9015 = xor i32 %9009, %9013
  %9016 = add nuw nsw i32 %9014, %9015
  %9017 = icmp eq i32 %9016, 2
  %9018 = zext i1 %9017 to i8
  %9019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9018, i8* %9019, align 1, !tbaa !2450
  %9020 = load i32, i32* %EDX
  %9021 = zext i32 %9020 to i64
  %9022 = load i64, i64* %PC
  %9023 = add i64 %9022, 3
  store i64 %9023, i64* %PC
  %9024 = shl i64 %9021, 32
  %9025 = ashr exact i64 %9024, 32
  store i64 %9025, i64* %RCX, align 8, !tbaa !2428
  %9026 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9027 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9028 = load i64, i64* %RAX
  %9029 = load i64, i64* %RCX
  %9030 = mul i64 %9029, 4
  %9031 = add i64 %9030, %9028
  %9032 = load i64, i64* %PC
  %9033 = add i64 %9032, 5
  store i64 %9033, i64* %PC
  %9034 = bitcast i8* %9027 to <2 x float>*
  %9035 = load <2 x float>, <2 x float>* %9034, align 1
  %9036 = getelementptr inbounds i8, i8* %9027, i64 8
  %9037 = bitcast i8* %9036 to <2 x i32>*
  %9038 = load <2 x i32>, <2 x i32>* %9037, align 1
  %9039 = inttoptr i64 %9031 to float*
  %9040 = load float, float* %9039
  %9041 = extractelement <2 x float> %9035, i32 0
  %9042 = fsub float %9041, %9040
  %9043 = bitcast i8* %9026 to float*
  store float %9042, float* %9043, align 1, !tbaa !2452
  %9044 = bitcast <2 x float> %9035 to <2 x i32>
  %9045 = extractelement <2 x i32> %9044, i32 1
  %9046 = getelementptr inbounds i8, i8* %9026, i64 4
  %9047 = bitcast i8* %9046 to i32*
  store i32 %9045, i32* %9047, align 1, !tbaa !2452
  %9048 = extractelement <2 x i32> %9038, i32 0
  %9049 = getelementptr inbounds i8, i8* %9026, i64 8
  %9050 = bitcast i8* %9049 to i32*
  store i32 %9048, i32* %9050, align 1, !tbaa !2452
  %9051 = extractelement <2 x i32> %9038, i32 1
  %9052 = getelementptr inbounds i8, i8* %9026, i64 12
  %9053 = bitcast i8* %9052 to i32*
  store i32 %9051, i32* %9053, align 1, !tbaa !2452
  %9054 = load i64, i64* %RBP
  %9055 = sub i64 %9054, 40
  %9056 = load i64, i64* %PC
  %9057 = add i64 %9056, 4
  store i64 %9057, i64* %PC
  %9058 = inttoptr i64 %9055 to i64*
  %9059 = load i64, i64* %9058
  store i64 %9059, i64* %RAX, align 8, !tbaa !2428
  %9060 = load i64, i64* %RAX
  %9061 = load i64, i64* %PC
  %9062 = add i64 %9061, 3
  store i64 %9062, i64* %PC
  %9063 = inttoptr i64 %9060 to i64*
  %9064 = load i64, i64* %9063
  store i64 %9064, i64* %RAX, align 8, !tbaa !2428
  %9065 = load i64, i64* %RBP
  %9066 = sub i64 %9065, 40
  %9067 = load i64, i64* %PC
  %9068 = add i64 %9067, 4
  store i64 %9068, i64* %PC
  %9069 = inttoptr i64 %9066 to i64*
  %9070 = load i64, i64* %9069
  store i64 %9070, i64* %RCX, align 8, !tbaa !2428
  %9071 = load i64, i64* %RCX
  %9072 = add i64 %9071, 12
  %9073 = load i64, i64* %PC
  %9074 = add i64 %9073, 4
  store i64 %9074, i64* %PC
  %9075 = inttoptr i64 %9072 to i32*
  %9076 = load i32, i32* %9075
  %9077 = sext i32 %9076 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9078, align 1, !tbaa !2432
  %9079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9079, align 1, !tbaa !2446
  %9080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9080, align 1, !tbaa !2447
  %9081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9081, align 1, !tbaa !2448
  %9082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9082, align 1, !tbaa !2449
  %9083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9083, align 1, !tbaa !2450
  %9084 = load i64, i64* %RBP
  %9085 = sub i64 %9084, 40
  %9086 = load i64, i64* %PC
  %9087 = add i64 %9086, 4
  store i64 %9087, i64* %PC
  %9088 = inttoptr i64 %9085 to i64*
  %9089 = load i64, i64* %9088
  store i64 %9089, i64* %RCX, align 8, !tbaa !2428
  %9090 = load i64, i64* %RDX
  %9091 = load i64, i64* %RCX
  %9092 = add i64 %9091, 16
  %9093 = load i64, i64* %PC
  %9094 = add i64 %9093, 4
  store i64 %9094, i64* %PC
  %9095 = inttoptr i64 %9092 to i32*
  %9096 = load i32, i32* %9095
  %9097 = shl i64 %9090, 32
  %9098 = ashr exact i64 %9097, 32
  %9099 = sext i32 %9096 to i64
  %9100 = mul nsw i64 %9099, %9098
  %9101 = trunc i64 %9100 to i32
  %9102 = and i64 %9100, 4294967295
  store i64 %9102, i64* %RDX, align 8, !tbaa !2428
  %9103 = shl i64 %9100, 32
  %9104 = ashr exact i64 %9103, 32
  %9105 = icmp ne i64 %9104, %9100
  %9106 = zext i1 %9105 to i8
  %9107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9106, i8* %9107, align 1, !tbaa !2432
  %9108 = and i32 %9101, 255
  %9109 = call i32 @llvm.ctpop.i32(i32 %9108) #16
  %9110 = trunc i32 %9109 to i8
  %9111 = and i8 %9110, 1
  %9112 = xor i8 %9111, 1
  %9113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9112, i8* %9113, align 1, !tbaa !2446
  %9114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9114, align 1, !tbaa !2447
  %9115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9115, align 1, !tbaa !2448
  %9116 = lshr i32 %9101, 31
  %9117 = trunc i32 %9116 to i8
  %9118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9117, i8* %9118, align 1, !tbaa !2449
  %9119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9106, i8* %9119, align 1, !tbaa !2450
  %9120 = load i64, i64* %RBP
  %9121 = sub i64 %9120, 40
  %9122 = load i64, i64* %PC
  %9123 = add i64 %9122, 4
  store i64 %9123, i64* %PC
  %9124 = inttoptr i64 %9121 to i64*
  %9125 = load i64, i64* %9124
  store i64 %9125, i64* %RCX, align 8, !tbaa !2428
  %9126 = load i64, i64* %RDX
  %9127 = load i64, i64* %RCX
  %9128 = add i64 %9127, 20
  %9129 = load i64, i64* %PC
  %9130 = add i64 %9129, 4
  store i64 %9130, i64* %PC
  %9131 = inttoptr i64 %9128 to i32*
  %9132 = load i32, i32* %9131
  %9133 = shl i64 %9126, 32
  %9134 = ashr exact i64 %9133, 32
  %9135 = sext i32 %9132 to i64
  %9136 = mul nsw i64 %9135, %9134
  %9137 = trunc i64 %9136 to i32
  %9138 = and i64 %9136, 4294967295
  store i64 %9138, i64* %RDX, align 8, !tbaa !2428
  %9139 = shl i64 %9136, 32
  %9140 = ashr exact i64 %9139, 32
  %9141 = icmp ne i64 %9140, %9136
  %9142 = zext i1 %9141 to i8
  %9143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9142, i8* %9143, align 1, !tbaa !2432
  %9144 = and i32 %9137, 255
  %9145 = call i32 @llvm.ctpop.i32(i32 %9144) #16
  %9146 = trunc i32 %9145 to i8
  %9147 = and i8 %9146, 1
  %9148 = xor i8 %9147, 1
  %9149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9148, i8* %9149, align 1, !tbaa !2446
  %9150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9150, align 1, !tbaa !2447
  %9151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9151, align 1, !tbaa !2448
  %9152 = lshr i32 %9137, 31
  %9153 = trunc i32 %9152 to i8
  %9154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9153, i8* %9154, align 1, !tbaa !2449
  %9155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9142, i8* %9155, align 1, !tbaa !2450
  %9156 = load i64, i64* %RBP
  %9157 = sub i64 %9156, 52
  %9158 = load i64, i64* %PC
  %9159 = add i64 %9158, 3
  store i64 %9159, i64* %PC
  %9160 = inttoptr i64 %9157 to i32*
  %9161 = load i32, i32* %9160
  %9162 = zext i32 %9161 to i64
  store i64 %9162, i64* %RSI, align 8, !tbaa !2428
  %9163 = load i64, i64* %RSI
  %9164 = load i64, i64* %PC
  %9165 = add i64 %9164, 3
  store i64 %9165, i64* %PC
  %9166 = trunc i64 %9163 to i32
  %9167 = sub i32 %9166, 1
  %9168 = zext i32 %9167 to i64
  store i64 %9168, i64* %RSI, align 8, !tbaa !2428
  %9169 = icmp ult i32 %9166, 1
  %9170 = zext i1 %9169 to i8
  %9171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9170, i8* %9171, align 1, !tbaa !2432
  %9172 = and i32 %9167, 255
  %9173 = call i32 @llvm.ctpop.i32(i32 %9172) #16
  %9174 = trunc i32 %9173 to i8
  %9175 = and i8 %9174, 1
  %9176 = xor i8 %9175, 1
  %9177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9176, i8* %9177, align 1, !tbaa !2446
  %9178 = xor i64 1, %9163
  %9179 = trunc i64 %9178 to i32
  %9180 = xor i32 %9179, %9167
  %9181 = lshr i32 %9180, 4
  %9182 = trunc i32 %9181 to i8
  %9183 = and i8 %9182, 1
  %9184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9183, i8* %9184, align 1, !tbaa !2447
  %9185 = icmp eq i32 %9167, 0
  %9186 = zext i1 %9185 to i8
  %9187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9186, i8* %9187, align 1, !tbaa !2448
  %9188 = lshr i32 %9167, 31
  %9189 = trunc i32 %9188 to i8
  %9190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9189, i8* %9190, align 1, !tbaa !2449
  %9191 = lshr i32 %9166, 31
  %9192 = xor i32 %9188, %9191
  %9193 = add nuw nsw i32 %9192, %9191
  %9194 = icmp eq i32 %9193, 2
  %9195 = zext i1 %9194 to i8
  %9196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9195, i8* %9196, align 1, !tbaa !2450
  %9197 = load i64, i64* %RBP
  %9198 = sub i64 %9197, 40
  %9199 = load i64, i64* %PC
  %9200 = add i64 %9199, 4
  store i64 %9200, i64* %PC
  %9201 = inttoptr i64 %9198 to i64*
  %9202 = load i64, i64* %9201
  store i64 %9202, i64* %RCX, align 8, !tbaa !2428
  %9203 = load i64, i64* %RSI
  %9204 = load i64, i64* %RCX
  %9205 = add i64 %9204, 16
  %9206 = load i64, i64* %PC
  %9207 = add i64 %9206, 4
  store i64 %9207, i64* %PC
  %9208 = inttoptr i64 %9205 to i32*
  %9209 = load i32, i32* %9208
  %9210 = shl i64 %9203, 32
  %9211 = ashr exact i64 %9210, 32
  %9212 = sext i32 %9209 to i64
  %9213 = mul nsw i64 %9212, %9211
  %9214 = trunc i64 %9213 to i32
  %9215 = and i64 %9213, 4294967295
  store i64 %9215, i64* %RSI, align 8, !tbaa !2428
  %9216 = shl i64 %9213, 32
  %9217 = ashr exact i64 %9216, 32
  %9218 = icmp ne i64 %9217, %9213
  %9219 = zext i1 %9218 to i8
  %9220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9219, i8* %9220, align 1, !tbaa !2432
  %9221 = and i32 %9214, 255
  %9222 = call i32 @llvm.ctpop.i32(i32 %9221) #16
  %9223 = trunc i32 %9222 to i8
  %9224 = and i8 %9223, 1
  %9225 = xor i8 %9224, 1
  %9226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9225, i8* %9226, align 1, !tbaa !2446
  %9227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9227, align 1, !tbaa !2447
  %9228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9228, align 1, !tbaa !2448
  %9229 = lshr i32 %9214, 31
  %9230 = trunc i32 %9229 to i8
  %9231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9230, i8* %9231, align 1, !tbaa !2449
  %9232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9219, i8* %9232, align 1, !tbaa !2450
  %9233 = load i64, i64* %RBP
  %9234 = sub i64 %9233, 40
  %9235 = load i64, i64* %PC
  %9236 = add i64 %9235, 4
  store i64 %9236, i64* %PC
  %9237 = inttoptr i64 %9234 to i64*
  %9238 = load i64, i64* %9237
  store i64 %9238, i64* %RCX, align 8, !tbaa !2428
  %9239 = load i64, i64* %RSI
  %9240 = load i64, i64* %RCX
  %9241 = add i64 %9240, 20
  %9242 = load i64, i64* %PC
  %9243 = add i64 %9242, 4
  store i64 %9243, i64* %PC
  %9244 = inttoptr i64 %9241 to i32*
  %9245 = load i32, i32* %9244
  %9246 = shl i64 %9239, 32
  %9247 = ashr exact i64 %9246, 32
  %9248 = sext i32 %9245 to i64
  %9249 = mul nsw i64 %9248, %9247
  %9250 = trunc i64 %9249 to i32
  %9251 = and i64 %9249, 4294967295
  store i64 %9251, i64* %RSI, align 8, !tbaa !2428
  %9252 = shl i64 %9249, 32
  %9253 = ashr exact i64 %9252, 32
  %9254 = icmp ne i64 %9253, %9249
  %9255 = zext i1 %9254 to i8
  %9256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9255, i8* %9256, align 1, !tbaa !2432
  %9257 = and i32 %9250, 255
  %9258 = call i32 @llvm.ctpop.i32(i32 %9257) #16
  %9259 = trunc i32 %9258 to i8
  %9260 = and i8 %9259, 1
  %9261 = xor i8 %9260, 1
  %9262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9261, i8* %9262, align 1, !tbaa !2446
  %9263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9263, align 1, !tbaa !2447
  %9264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9264, align 1, !tbaa !2448
  %9265 = lshr i32 %9250, 31
  %9266 = trunc i32 %9265 to i8
  %9267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9266, i8* %9267, align 1, !tbaa !2449
  %9268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9255, i8* %9268, align 1, !tbaa !2450
  %9269 = load i64, i64* %RDX
  %9270 = load i32, i32* %ESI
  %9271 = zext i32 %9270 to i64
  %9272 = load i64, i64* %PC
  %9273 = add i64 %9272, 2
  store i64 %9273, i64* %PC
  %9274 = trunc i64 %9269 to i32
  %9275 = add i32 %9270, %9274
  %9276 = zext i32 %9275 to i64
  store i64 %9276, i64* %RDX, align 8, !tbaa !2428
  %9277 = icmp ult i32 %9275, %9274
  %9278 = icmp ult i32 %9275, %9270
  %9279 = or i1 %9277, %9278
  %9280 = zext i1 %9279 to i8
  %9281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9280, i8* %9281, align 1, !tbaa !2432
  %9282 = and i32 %9275, 255
  %9283 = call i32 @llvm.ctpop.i32(i32 %9282) #16
  %9284 = trunc i32 %9283 to i8
  %9285 = and i8 %9284, 1
  %9286 = xor i8 %9285, 1
  %9287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9286, i8* %9287, align 1, !tbaa !2446
  %9288 = xor i64 %9271, %9269
  %9289 = trunc i64 %9288 to i32
  %9290 = xor i32 %9289, %9275
  %9291 = lshr i32 %9290, 4
  %9292 = trunc i32 %9291 to i8
  %9293 = and i8 %9292, 1
  %9294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9293, i8* %9294, align 1, !tbaa !2447
  %9295 = icmp eq i32 %9275, 0
  %9296 = zext i1 %9295 to i8
  %9297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9296, i8* %9297, align 1, !tbaa !2448
  %9298 = lshr i32 %9275, 31
  %9299 = trunc i32 %9298 to i8
  %9300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9299, i8* %9300, align 1, !tbaa !2449
  %9301 = lshr i32 %9274, 31
  %9302 = lshr i32 %9270, 31
  %9303 = xor i32 %9298, %9301
  %9304 = xor i32 %9298, %9302
  %9305 = add nuw nsw i32 %9303, %9304
  %9306 = icmp eq i32 %9305, 2
  %9307 = zext i1 %9306 to i8
  %9308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9307, i8* %9308, align 1, !tbaa !2450
  %9309 = load i64, i64* %RBP
  %9310 = sub i64 %9309, 56
  %9311 = load i64, i64* %PC
  %9312 = add i64 %9311, 3
  store i64 %9312, i64* %PC
  %9313 = inttoptr i64 %9310 to i32*
  %9314 = load i32, i32* %9313
  %9315 = zext i32 %9314 to i64
  store i64 %9315, i64* %RSI, align 8, !tbaa !2428
  %9316 = load i64, i64* %RBP
  %9317 = sub i64 %9316, 40
  %9318 = load i64, i64* %PC
  %9319 = add i64 %9318, 4
  store i64 %9319, i64* %PC
  %9320 = inttoptr i64 %9317 to i64*
  %9321 = load i64, i64* %9320
  store i64 %9321, i64* %RCX, align 8, !tbaa !2428
  %9322 = load i64, i64* %RSI
  %9323 = load i64, i64* %RCX
  %9324 = add i64 %9323, 20
  %9325 = load i64, i64* %PC
  %9326 = add i64 %9325, 4
  store i64 %9326, i64* %PC
  %9327 = inttoptr i64 %9324 to i32*
  %9328 = load i32, i32* %9327
  %9329 = shl i64 %9322, 32
  %9330 = ashr exact i64 %9329, 32
  %9331 = sext i32 %9328 to i64
  %9332 = mul nsw i64 %9331, %9330
  %9333 = trunc i64 %9332 to i32
  %9334 = and i64 %9332, 4294967295
  store i64 %9334, i64* %RSI, align 8, !tbaa !2428
  %9335 = shl i64 %9332, 32
  %9336 = ashr exact i64 %9335, 32
  %9337 = icmp ne i64 %9336, %9332
  %9338 = zext i1 %9337 to i8
  %9339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9338, i8* %9339, align 1, !tbaa !2432
  %9340 = and i32 %9333, 255
  %9341 = call i32 @llvm.ctpop.i32(i32 %9340) #16
  %9342 = trunc i32 %9341 to i8
  %9343 = and i8 %9342, 1
  %9344 = xor i8 %9343, 1
  %9345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9344, i8* %9345, align 1, !tbaa !2446
  %9346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9346, align 1, !tbaa !2447
  %9347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9347, align 1, !tbaa !2448
  %9348 = lshr i32 %9333, 31
  %9349 = trunc i32 %9348 to i8
  %9350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9349, i8* %9350, align 1, !tbaa !2449
  %9351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9338, i8* %9351, align 1, !tbaa !2450
  %9352 = load i64, i64* %RDX
  %9353 = load i32, i32* %ESI
  %9354 = zext i32 %9353 to i64
  %9355 = load i64, i64* %PC
  %9356 = add i64 %9355, 2
  store i64 %9356, i64* %PC
  %9357 = trunc i64 %9352 to i32
  %9358 = add i32 %9353, %9357
  %9359 = zext i32 %9358 to i64
  store i64 %9359, i64* %RDX, align 8, !tbaa !2428
  %9360 = icmp ult i32 %9358, %9357
  %9361 = icmp ult i32 %9358, %9353
  %9362 = or i1 %9360, %9361
  %9363 = zext i1 %9362 to i8
  %9364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9363, i8* %9364, align 1, !tbaa !2432
  %9365 = and i32 %9358, 255
  %9366 = call i32 @llvm.ctpop.i32(i32 %9365) #16
  %9367 = trunc i32 %9366 to i8
  %9368 = and i8 %9367, 1
  %9369 = xor i8 %9368, 1
  %9370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9369, i8* %9370, align 1, !tbaa !2446
  %9371 = xor i64 %9354, %9352
  %9372 = trunc i64 %9371 to i32
  %9373 = xor i32 %9372, %9358
  %9374 = lshr i32 %9373, 4
  %9375 = trunc i32 %9374 to i8
  %9376 = and i8 %9375, 1
  %9377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9376, i8* %9377, align 1, !tbaa !2447
  %9378 = icmp eq i32 %9358, 0
  %9379 = zext i1 %9378 to i8
  %9380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9379, i8* %9380, align 1, !tbaa !2448
  %9381 = lshr i32 %9358, 31
  %9382 = trunc i32 %9381 to i8
  %9383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9382, i8* %9383, align 1, !tbaa !2449
  %9384 = lshr i32 %9357, 31
  %9385 = lshr i32 %9353, 31
  %9386 = xor i32 %9381, %9384
  %9387 = xor i32 %9381, %9385
  %9388 = add nuw nsw i32 %9386, %9387
  %9389 = icmp eq i32 %9388, 2
  %9390 = zext i1 %9389 to i8
  %9391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9390, i8* %9391, align 1, !tbaa !2450
  %9392 = load i64, i64* %RBP
  %9393 = sub i64 %9392, 60
  %9394 = load i64, i64* %PC
  %9395 = add i64 %9394, 3
  store i64 %9395, i64* %PC
  %9396 = inttoptr i64 %9393 to i32*
  %9397 = load i32, i32* %9396
  %9398 = zext i32 %9397 to i64
  store i64 %9398, i64* %RSI, align 8, !tbaa !2428
  %9399 = load i64, i64* %RSI
  %9400 = load i64, i64* %PC
  %9401 = add i64 %9400, 3
  store i64 %9401, i64* %PC
  %9402 = trunc i64 %9399 to i32
  %9403 = sub i32 %9402, 1
  %9404 = zext i32 %9403 to i64
  store i64 %9404, i64* %RSI, align 8, !tbaa !2428
  %9405 = icmp ult i32 %9402, 1
  %9406 = zext i1 %9405 to i8
  %9407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9406, i8* %9407, align 1, !tbaa !2432
  %9408 = and i32 %9403, 255
  %9409 = call i32 @llvm.ctpop.i32(i32 %9408) #16
  %9410 = trunc i32 %9409 to i8
  %9411 = and i8 %9410, 1
  %9412 = xor i8 %9411, 1
  %9413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9412, i8* %9413, align 1, !tbaa !2446
  %9414 = xor i64 1, %9399
  %9415 = trunc i64 %9414 to i32
  %9416 = xor i32 %9415, %9403
  %9417 = lshr i32 %9416, 4
  %9418 = trunc i32 %9417 to i8
  %9419 = and i8 %9418, 1
  %9420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9419, i8* %9420, align 1, !tbaa !2447
  %9421 = icmp eq i32 %9403, 0
  %9422 = zext i1 %9421 to i8
  %9423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9422, i8* %9423, align 1, !tbaa !2448
  %9424 = lshr i32 %9403, 31
  %9425 = trunc i32 %9424 to i8
  %9426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9425, i8* %9426, align 1, !tbaa !2449
  %9427 = lshr i32 %9402, 31
  %9428 = xor i32 %9424, %9427
  %9429 = add nuw nsw i32 %9428, %9427
  %9430 = icmp eq i32 %9429, 2
  %9431 = zext i1 %9430 to i8
  %9432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9431, i8* %9432, align 1, !tbaa !2450
  %9433 = load i64, i64* %RDX
  %9434 = load i32, i32* %ESI
  %9435 = zext i32 %9434 to i64
  %9436 = load i64, i64* %PC
  %9437 = add i64 %9436, 2
  store i64 %9437, i64* %PC
  %9438 = trunc i64 %9433 to i32
  %9439 = add i32 %9434, %9438
  %9440 = zext i32 %9439 to i64
  store i64 %9440, i64* %RDX, align 8, !tbaa !2428
  %9441 = icmp ult i32 %9439, %9438
  %9442 = icmp ult i32 %9439, %9434
  %9443 = or i1 %9441, %9442
  %9444 = zext i1 %9443 to i8
  %9445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9444, i8* %9445, align 1, !tbaa !2432
  %9446 = and i32 %9439, 255
  %9447 = call i32 @llvm.ctpop.i32(i32 %9446) #16
  %9448 = trunc i32 %9447 to i8
  %9449 = and i8 %9448, 1
  %9450 = xor i8 %9449, 1
  %9451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9450, i8* %9451, align 1, !tbaa !2446
  %9452 = xor i64 %9435, %9433
  %9453 = trunc i64 %9452 to i32
  %9454 = xor i32 %9453, %9439
  %9455 = lshr i32 %9454, 4
  %9456 = trunc i32 %9455 to i8
  %9457 = and i8 %9456, 1
  %9458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9457, i8* %9458, align 1, !tbaa !2447
  %9459 = icmp eq i32 %9439, 0
  %9460 = zext i1 %9459 to i8
  %9461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9460, i8* %9461, align 1, !tbaa !2448
  %9462 = lshr i32 %9439, 31
  %9463 = trunc i32 %9462 to i8
  %9464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9463, i8* %9464, align 1, !tbaa !2449
  %9465 = lshr i32 %9438, 31
  %9466 = lshr i32 %9434, 31
  %9467 = xor i32 %9462, %9465
  %9468 = xor i32 %9462, %9466
  %9469 = add nuw nsw i32 %9467, %9468
  %9470 = icmp eq i32 %9469, 2
  %9471 = zext i1 %9470 to i8
  %9472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9471, i8* %9472, align 1, !tbaa !2450
  %9473 = load i32, i32* %EDX
  %9474 = zext i32 %9473 to i64
  %9475 = load i64, i64* %PC
  %9476 = add i64 %9475, 3
  store i64 %9476, i64* %PC
  %9477 = shl i64 %9474, 32
  %9478 = ashr exact i64 %9477, 32
  store i64 %9478, i64* %RCX, align 8, !tbaa !2428
  %9479 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9480 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9481 = load i64, i64* %RAX
  %9482 = load i64, i64* %RCX
  %9483 = mul i64 %9482, 4
  %9484 = add i64 %9483, %9481
  %9485 = load i64, i64* %PC
  %9486 = add i64 %9485, 5
  store i64 %9486, i64* %PC
  %9487 = bitcast i8* %9480 to <2 x float>*
  %9488 = load <2 x float>, <2 x float>* %9487, align 1
  %9489 = getelementptr inbounds i8, i8* %9480, i64 8
  %9490 = bitcast i8* %9489 to <2 x i32>*
  %9491 = load <2 x i32>, <2 x i32>* %9490, align 1
  %9492 = inttoptr i64 %9484 to float*
  %9493 = load float, float* %9492
  %9494 = extractelement <2 x float> %9488, i32 0
  %9495 = fadd float %9494, %9493
  %9496 = bitcast i8* %9479 to float*
  store float %9495, float* %9496, align 1, !tbaa !2452
  %9497 = bitcast <2 x float> %9488 to <2 x i32>
  %9498 = extractelement <2 x i32> %9497, i32 1
  %9499 = getelementptr inbounds i8, i8* %9479, i64 4
  %9500 = bitcast i8* %9499 to i32*
  store i32 %9498, i32* %9500, align 1, !tbaa !2452
  %9501 = extractelement <2 x i32> %9491, i32 0
  %9502 = getelementptr inbounds i8, i8* %9479, i64 8
  %9503 = bitcast i8* %9502 to i32*
  store i32 %9501, i32* %9503, align 1, !tbaa !2452
  %9504 = extractelement <2 x i32> %9491, i32 1
  %9505 = getelementptr inbounds i8, i8* %9479, i64 12
  %9506 = bitcast i8* %9505 to i32*
  store i32 %9504, i32* %9506, align 1, !tbaa !2452
  %9507 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9508 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9509 = bitcast %union.vec128_t* %XMM2 to i8*
  %9510 = load i64, i64* %PC
  %9511 = add i64 %9510, 4
  store i64 %9511, i64* %PC
  %9512 = bitcast i8* %9508 to <2 x float>*
  %9513 = load <2 x float>, <2 x float>* %9512, align 1
  %9514 = getelementptr inbounds i8, i8* %9508, i64 8
  %9515 = bitcast i8* %9514 to <2 x i32>*
  %9516 = load <2 x i32>, <2 x i32>* %9515, align 1
  %9517 = bitcast i8* %9509 to <2 x float>*
  %9518 = load <2 x float>, <2 x float>* %9517, align 1
  %9519 = extractelement <2 x float> %9513, i32 0
  %9520 = extractelement <2 x float> %9518, i32 0
  %9521 = fmul float %9519, %9520
  %9522 = bitcast i8* %9507 to float*
  store float %9521, float* %9522, align 1, !tbaa !2452
  %9523 = bitcast <2 x float> %9513 to <2 x i32>
  %9524 = extractelement <2 x i32> %9523, i32 1
  %9525 = getelementptr inbounds i8, i8* %9507, i64 4
  %9526 = bitcast i8* %9525 to i32*
  store i32 %9524, i32* %9526, align 1, !tbaa !2452
  %9527 = extractelement <2 x i32> %9516, i32 0
  %9528 = getelementptr inbounds i8, i8* %9507, i64 8
  %9529 = bitcast i8* %9528 to i32*
  store i32 %9527, i32* %9529, align 1, !tbaa !2452
  %9530 = extractelement <2 x i32> %9516, i32 1
  %9531 = getelementptr inbounds i8, i8* %9507, i64 12
  %9532 = bitcast i8* %9531 to i32*
  store i32 %9530, i32* %9532, align 1, !tbaa !2452
  %9533 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9535 = bitcast %union.vec128_t* %XMM1 to i8*
  %9536 = load i64, i64* %PC
  %9537 = add i64 %9536, 4
  store i64 %9537, i64* %PC
  %9538 = bitcast i8* %9534 to <2 x float>*
  %9539 = load <2 x float>, <2 x float>* %9538, align 1
  %9540 = getelementptr inbounds i8, i8* %9534, i64 8
  %9541 = bitcast i8* %9540 to <2 x i32>*
  %9542 = load <2 x i32>, <2 x i32>* %9541, align 1
  %9543 = bitcast i8* %9535 to <2 x float>*
  %9544 = load <2 x float>, <2 x float>* %9543, align 1
  %9545 = extractelement <2 x float> %9539, i32 0
  %9546 = extractelement <2 x float> %9544, i32 0
  %9547 = fadd float %9545, %9546
  %9548 = bitcast i8* %9533 to float*
  store float %9547, float* %9548, align 1, !tbaa !2452
  %9549 = bitcast <2 x float> %9539 to <2 x i32>
  %9550 = extractelement <2 x i32> %9549, i32 1
  %9551 = getelementptr inbounds i8, i8* %9533, i64 4
  %9552 = bitcast i8* %9551 to i32*
  store i32 %9550, i32* %9552, align 1, !tbaa !2452
  %9553 = extractelement <2 x i32> %9542, i32 0
  %9554 = getelementptr inbounds i8, i8* %9533, i64 8
  %9555 = bitcast i8* %9554 to i32*
  store i32 %9553, i32* %9555, align 1, !tbaa !2452
  %9556 = extractelement <2 x i32> %9542, i32 1
  %9557 = getelementptr inbounds i8, i8* %9533, i64 12
  %9558 = bitcast i8* %9557 to i32*
  store i32 %9556, i32* %9558, align 1, !tbaa !2452
  %9559 = load i64, i64* %RBP
  %9560 = sub i64 %9559, 32
  %9561 = load i64, i64* %PC
  %9562 = add i64 %9561, 4
  store i64 %9562, i64* %PC
  %9563 = inttoptr i64 %9560 to i64*
  %9564 = load i64, i64* %9563
  store i64 %9564, i64* %RAX, align 8, !tbaa !2428
  %9565 = load i64, i64* %RAX
  %9566 = load i64, i64* %PC
  %9567 = add i64 %9566, 3
  store i64 %9567, i64* %PC
  %9568 = inttoptr i64 %9565 to i64*
  %9569 = load i64, i64* %9568
  store i64 %9569, i64* %RAX, align 8, !tbaa !2428
  %9570 = load i64, i64* %RBP
  %9571 = sub i64 %9570, 32
  %9572 = load i64, i64* %PC
  %9573 = add i64 %9572, 4
  store i64 %9573, i64* %PC
  %9574 = inttoptr i64 %9571 to i64*
  %9575 = load i64, i64* %9574
  store i64 %9575, i64* %RCX, align 8, !tbaa !2428
  %9576 = load i64, i64* %RCX
  %9577 = add i64 %9576, 12
  %9578 = load i64, i64* %PC
  %9579 = add i64 %9578, 4
  store i64 %9579, i64* %PC
  %9580 = inttoptr i64 %9577 to i32*
  %9581 = load i32, i32* %9580
  %9582 = sext i32 %9581 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9583, align 1, !tbaa !2432
  %9584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9584, align 1, !tbaa !2446
  %9585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9585, align 1, !tbaa !2447
  %9586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9586, align 1, !tbaa !2448
  %9587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9587, align 1, !tbaa !2449
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9588, align 1, !tbaa !2450
  %9589 = load i64, i64* %RBP
  %9590 = sub i64 %9589, 32
  %9591 = load i64, i64* %PC
  %9592 = add i64 %9591, 4
  store i64 %9592, i64* %PC
  %9593 = inttoptr i64 %9590 to i64*
  %9594 = load i64, i64* %9593
  store i64 %9594, i64* %RCX, align 8, !tbaa !2428
  %9595 = load i64, i64* %RDX
  %9596 = load i64, i64* %RCX
  %9597 = add i64 %9596, 16
  %9598 = load i64, i64* %PC
  %9599 = add i64 %9598, 4
  store i64 %9599, i64* %PC
  %9600 = inttoptr i64 %9597 to i32*
  %9601 = load i32, i32* %9600
  %9602 = shl i64 %9595, 32
  %9603 = ashr exact i64 %9602, 32
  %9604 = sext i32 %9601 to i64
  %9605 = mul nsw i64 %9604, %9603
  %9606 = trunc i64 %9605 to i32
  %9607 = and i64 %9605, 4294967295
  store i64 %9607, i64* %RDX, align 8, !tbaa !2428
  %9608 = shl i64 %9605, 32
  %9609 = ashr exact i64 %9608, 32
  %9610 = icmp ne i64 %9609, %9605
  %9611 = zext i1 %9610 to i8
  %9612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9611, i8* %9612, align 1, !tbaa !2432
  %9613 = and i32 %9606, 255
  %9614 = call i32 @llvm.ctpop.i32(i32 %9613) #16
  %9615 = trunc i32 %9614 to i8
  %9616 = and i8 %9615, 1
  %9617 = xor i8 %9616, 1
  %9618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9617, i8* %9618, align 1, !tbaa !2446
  %9619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9619, align 1, !tbaa !2447
  %9620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9620, align 1, !tbaa !2448
  %9621 = lshr i32 %9606, 31
  %9622 = trunc i32 %9621 to i8
  %9623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9622, i8* %9623, align 1, !tbaa !2449
  %9624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9611, i8* %9624, align 1, !tbaa !2450
  %9625 = load i64, i64* %RBP
  %9626 = sub i64 %9625, 32
  %9627 = load i64, i64* %PC
  %9628 = add i64 %9627, 4
  store i64 %9628, i64* %PC
  %9629 = inttoptr i64 %9626 to i64*
  %9630 = load i64, i64* %9629
  store i64 %9630, i64* %RCX, align 8, !tbaa !2428
  %9631 = load i64, i64* %RDX
  %9632 = load i64, i64* %RCX
  %9633 = add i64 %9632, 20
  %9634 = load i64, i64* %PC
  %9635 = add i64 %9634, 4
  store i64 %9635, i64* %PC
  %9636 = inttoptr i64 %9633 to i32*
  %9637 = load i32, i32* %9636
  %9638 = shl i64 %9631, 32
  %9639 = ashr exact i64 %9638, 32
  %9640 = sext i32 %9637 to i64
  %9641 = mul nsw i64 %9640, %9639
  %9642 = trunc i64 %9641 to i32
  %9643 = and i64 %9641, 4294967295
  store i64 %9643, i64* %RDX, align 8, !tbaa !2428
  %9644 = shl i64 %9641, 32
  %9645 = ashr exact i64 %9644, 32
  %9646 = icmp ne i64 %9645, %9641
  %9647 = zext i1 %9646 to i8
  %9648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9647, i8* %9648, align 1, !tbaa !2432
  %9649 = and i32 %9642, 255
  %9650 = call i32 @llvm.ctpop.i32(i32 %9649) #16
  %9651 = trunc i32 %9650 to i8
  %9652 = and i8 %9651, 1
  %9653 = xor i8 %9652, 1
  %9654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9653, i8* %9654, align 1, !tbaa !2446
  %9655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9655, align 1, !tbaa !2447
  %9656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9656, align 1, !tbaa !2448
  %9657 = lshr i32 %9642, 31
  %9658 = trunc i32 %9657 to i8
  %9659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9658, i8* %9659, align 1, !tbaa !2449
  %9660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9647, i8* %9660, align 1, !tbaa !2450
  %9661 = load i64, i64* %RBP
  %9662 = sub i64 %9661, 52
  %9663 = load i64, i64* %PC
  %9664 = add i64 %9663, 3
  store i64 %9664, i64* %PC
  %9665 = inttoptr i64 %9662 to i32*
  %9666 = load i32, i32* %9665
  %9667 = zext i32 %9666 to i64
  store i64 %9667, i64* %RSI, align 8, !tbaa !2428
  %9668 = load i64, i64* %RBP
  %9669 = sub i64 %9668, 32
  %9670 = load i64, i64* %PC
  %9671 = add i64 %9670, 4
  store i64 %9671, i64* %PC
  %9672 = inttoptr i64 %9669 to i64*
  %9673 = load i64, i64* %9672
  store i64 %9673, i64* %RCX, align 8, !tbaa !2428
  %9674 = load i64, i64* %RSI
  %9675 = load i64, i64* %RCX
  %9676 = add i64 %9675, 16
  %9677 = load i64, i64* %PC
  %9678 = add i64 %9677, 4
  store i64 %9678, i64* %PC
  %9679 = inttoptr i64 %9676 to i32*
  %9680 = load i32, i32* %9679
  %9681 = shl i64 %9674, 32
  %9682 = ashr exact i64 %9681, 32
  %9683 = sext i32 %9680 to i64
  %9684 = mul nsw i64 %9683, %9682
  %9685 = trunc i64 %9684 to i32
  %9686 = and i64 %9684, 4294967295
  store i64 %9686, i64* %RSI, align 8, !tbaa !2428
  %9687 = shl i64 %9684, 32
  %9688 = ashr exact i64 %9687, 32
  %9689 = icmp ne i64 %9688, %9684
  %9690 = zext i1 %9689 to i8
  %9691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9690, i8* %9691, align 1, !tbaa !2432
  %9692 = and i32 %9685, 255
  %9693 = call i32 @llvm.ctpop.i32(i32 %9692) #16
  %9694 = trunc i32 %9693 to i8
  %9695 = and i8 %9694, 1
  %9696 = xor i8 %9695, 1
  %9697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9696, i8* %9697, align 1, !tbaa !2446
  %9698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9698, align 1, !tbaa !2447
  %9699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9699, align 1, !tbaa !2448
  %9700 = lshr i32 %9685, 31
  %9701 = trunc i32 %9700 to i8
  %9702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9701, i8* %9702, align 1, !tbaa !2449
  %9703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9690, i8* %9703, align 1, !tbaa !2450
  %9704 = load i64, i64* %RBP
  %9705 = sub i64 %9704, 32
  %9706 = load i64, i64* %PC
  %9707 = add i64 %9706, 4
  store i64 %9707, i64* %PC
  %9708 = inttoptr i64 %9705 to i64*
  %9709 = load i64, i64* %9708
  store i64 %9709, i64* %RCX, align 8, !tbaa !2428
  %9710 = load i64, i64* %RSI
  %9711 = load i64, i64* %RCX
  %9712 = add i64 %9711, 20
  %9713 = load i64, i64* %PC
  %9714 = add i64 %9713, 4
  store i64 %9714, i64* %PC
  %9715 = inttoptr i64 %9712 to i32*
  %9716 = load i32, i32* %9715
  %9717 = shl i64 %9710, 32
  %9718 = ashr exact i64 %9717, 32
  %9719 = sext i32 %9716 to i64
  %9720 = mul nsw i64 %9719, %9718
  %9721 = trunc i64 %9720 to i32
  %9722 = and i64 %9720, 4294967295
  store i64 %9722, i64* %RSI, align 8, !tbaa !2428
  %9723 = shl i64 %9720, 32
  %9724 = ashr exact i64 %9723, 32
  %9725 = icmp ne i64 %9724, %9720
  %9726 = zext i1 %9725 to i8
  %9727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9726, i8* %9727, align 1, !tbaa !2432
  %9728 = and i32 %9721, 255
  %9729 = call i32 @llvm.ctpop.i32(i32 %9728) #16
  %9730 = trunc i32 %9729 to i8
  %9731 = and i8 %9730, 1
  %9732 = xor i8 %9731, 1
  %9733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9732, i8* %9733, align 1, !tbaa !2446
  %9734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9734, align 1, !tbaa !2447
  %9735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9735, align 1, !tbaa !2448
  %9736 = lshr i32 %9721, 31
  %9737 = trunc i32 %9736 to i8
  %9738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9737, i8* %9738, align 1, !tbaa !2449
  %9739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9726, i8* %9739, align 1, !tbaa !2450
  %9740 = load i64, i64* %RDX
  %9741 = load i32, i32* %ESI
  %9742 = zext i32 %9741 to i64
  %9743 = load i64, i64* %PC
  %9744 = add i64 %9743, 2
  store i64 %9744, i64* %PC
  %9745 = trunc i64 %9740 to i32
  %9746 = add i32 %9741, %9745
  %9747 = zext i32 %9746 to i64
  store i64 %9747, i64* %RDX, align 8, !tbaa !2428
  %9748 = icmp ult i32 %9746, %9745
  %9749 = icmp ult i32 %9746, %9741
  %9750 = or i1 %9748, %9749
  %9751 = zext i1 %9750 to i8
  %9752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9751, i8* %9752, align 1, !tbaa !2432
  %9753 = and i32 %9746, 255
  %9754 = call i32 @llvm.ctpop.i32(i32 %9753) #16
  %9755 = trunc i32 %9754 to i8
  %9756 = and i8 %9755, 1
  %9757 = xor i8 %9756, 1
  %9758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9757, i8* %9758, align 1, !tbaa !2446
  %9759 = xor i64 %9742, %9740
  %9760 = trunc i64 %9759 to i32
  %9761 = xor i32 %9760, %9746
  %9762 = lshr i32 %9761, 4
  %9763 = trunc i32 %9762 to i8
  %9764 = and i8 %9763, 1
  %9765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9764, i8* %9765, align 1, !tbaa !2447
  %9766 = icmp eq i32 %9746, 0
  %9767 = zext i1 %9766 to i8
  %9768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9767, i8* %9768, align 1, !tbaa !2448
  %9769 = lshr i32 %9746, 31
  %9770 = trunc i32 %9769 to i8
  %9771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9770, i8* %9771, align 1, !tbaa !2449
  %9772 = lshr i32 %9745, 31
  %9773 = lshr i32 %9741, 31
  %9774 = xor i32 %9769, %9772
  %9775 = xor i32 %9769, %9773
  %9776 = add nuw nsw i32 %9774, %9775
  %9777 = icmp eq i32 %9776, 2
  %9778 = zext i1 %9777 to i8
  %9779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9778, i8* %9779, align 1, !tbaa !2450
  %9780 = load i64, i64* %RBP
  %9781 = sub i64 %9780, 56
  %9782 = load i64, i64* %PC
  %9783 = add i64 %9782, 3
  store i64 %9783, i64* %PC
  %9784 = inttoptr i64 %9781 to i32*
  %9785 = load i32, i32* %9784
  %9786 = zext i32 %9785 to i64
  store i64 %9786, i64* %RSI, align 8, !tbaa !2428
  %9787 = load i64, i64* %RBP
  %9788 = sub i64 %9787, 32
  %9789 = load i64, i64* %PC
  %9790 = add i64 %9789, 4
  store i64 %9790, i64* %PC
  %9791 = inttoptr i64 %9788 to i64*
  %9792 = load i64, i64* %9791
  store i64 %9792, i64* %RCX, align 8, !tbaa !2428
  %9793 = load i64, i64* %RSI
  %9794 = load i64, i64* %RCX
  %9795 = add i64 %9794, 20
  %9796 = load i64, i64* %PC
  %9797 = add i64 %9796, 4
  store i64 %9797, i64* %PC
  %9798 = inttoptr i64 %9795 to i32*
  %9799 = load i32, i32* %9798
  %9800 = shl i64 %9793, 32
  %9801 = ashr exact i64 %9800, 32
  %9802 = sext i32 %9799 to i64
  %9803 = mul nsw i64 %9802, %9801
  %9804 = trunc i64 %9803 to i32
  %9805 = and i64 %9803, 4294967295
  store i64 %9805, i64* %RSI, align 8, !tbaa !2428
  %9806 = shl i64 %9803, 32
  %9807 = ashr exact i64 %9806, 32
  %9808 = icmp ne i64 %9807, %9803
  %9809 = zext i1 %9808 to i8
  %9810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9809, i8* %9810, align 1, !tbaa !2432
  %9811 = and i32 %9804, 255
  %9812 = call i32 @llvm.ctpop.i32(i32 %9811) #16
  %9813 = trunc i32 %9812 to i8
  %9814 = and i8 %9813, 1
  %9815 = xor i8 %9814, 1
  %9816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9815, i8* %9816, align 1, !tbaa !2446
  %9817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9817, align 1, !tbaa !2447
  %9818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9818, align 1, !tbaa !2448
  %9819 = lshr i32 %9804, 31
  %9820 = trunc i32 %9819 to i8
  %9821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9820, i8* %9821, align 1, !tbaa !2449
  %9822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9809, i8* %9822, align 1, !tbaa !2450
  %9823 = load i64, i64* %RDX
  %9824 = load i32, i32* %ESI
  %9825 = zext i32 %9824 to i64
  %9826 = load i64, i64* %PC
  %9827 = add i64 %9826, 2
  store i64 %9827, i64* %PC
  %9828 = trunc i64 %9823 to i32
  %9829 = add i32 %9824, %9828
  %9830 = zext i32 %9829 to i64
  store i64 %9830, i64* %RDX, align 8, !tbaa !2428
  %9831 = icmp ult i32 %9829, %9828
  %9832 = icmp ult i32 %9829, %9824
  %9833 = or i1 %9831, %9832
  %9834 = zext i1 %9833 to i8
  %9835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9834, i8* %9835, align 1, !tbaa !2432
  %9836 = and i32 %9829, 255
  %9837 = call i32 @llvm.ctpop.i32(i32 %9836) #16
  %9838 = trunc i32 %9837 to i8
  %9839 = and i8 %9838, 1
  %9840 = xor i8 %9839, 1
  %9841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9840, i8* %9841, align 1, !tbaa !2446
  %9842 = xor i64 %9825, %9823
  %9843 = trunc i64 %9842 to i32
  %9844 = xor i32 %9843, %9829
  %9845 = lshr i32 %9844, 4
  %9846 = trunc i32 %9845 to i8
  %9847 = and i8 %9846, 1
  %9848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9847, i8* %9848, align 1, !tbaa !2447
  %9849 = icmp eq i32 %9829, 0
  %9850 = zext i1 %9849 to i8
  %9851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9850, i8* %9851, align 1, !tbaa !2448
  %9852 = lshr i32 %9829, 31
  %9853 = trunc i32 %9852 to i8
  %9854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9853, i8* %9854, align 1, !tbaa !2449
  %9855 = lshr i32 %9828, 31
  %9856 = lshr i32 %9824, 31
  %9857 = xor i32 %9852, %9855
  %9858 = xor i32 %9852, %9856
  %9859 = add nuw nsw i32 %9857, %9858
  %9860 = icmp eq i32 %9859, 2
  %9861 = zext i1 %9860 to i8
  %9862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9861, i8* %9862, align 1, !tbaa !2450
  %9863 = load i64, i64* %RDX
  %9864 = load i64, i64* %RBP
  %9865 = sub i64 %9864, 60
  %9866 = load i64, i64* %PC
  %9867 = add i64 %9866, 3
  store i64 %9867, i64* %PC
  %9868 = trunc i64 %9863 to i32
  %9869 = inttoptr i64 %9865 to i32*
  %9870 = load i32, i32* %9869
  %9871 = add i32 %9870, %9868
  %9872 = zext i32 %9871 to i64
  store i64 %9872, i64* %RDX, align 8, !tbaa !2428
  %9873 = icmp ult i32 %9871, %9868
  %9874 = icmp ult i32 %9871, %9870
  %9875 = or i1 %9873, %9874
  %9876 = zext i1 %9875 to i8
  %9877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9876, i8* %9877, align 1, !tbaa !2432
  %9878 = and i32 %9871, 255
  %9879 = call i32 @llvm.ctpop.i32(i32 %9878) #16
  %9880 = trunc i32 %9879 to i8
  %9881 = and i8 %9880, 1
  %9882 = xor i8 %9881, 1
  %9883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9882, i8* %9883, align 1, !tbaa !2446
  %9884 = xor i32 %9870, %9868
  %9885 = xor i32 %9884, %9871
  %9886 = lshr i32 %9885, 4
  %9887 = trunc i32 %9886 to i8
  %9888 = and i8 %9887, 1
  %9889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9888, i8* %9889, align 1, !tbaa !2447
  %9890 = icmp eq i32 %9871, 0
  %9891 = zext i1 %9890 to i8
  %9892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9891, i8* %9892, align 1, !tbaa !2448
  %9893 = lshr i32 %9871, 31
  %9894 = trunc i32 %9893 to i8
  %9895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9894, i8* %9895, align 1, !tbaa !2449
  %9896 = lshr i32 %9868, 31
  %9897 = lshr i32 %9870, 31
  %9898 = xor i32 %9893, %9896
  %9899 = xor i32 %9893, %9897
  %9900 = add nuw nsw i32 %9898, %9899
  %9901 = icmp eq i32 %9900, 2
  %9902 = zext i1 %9901 to i8
  %9903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9902, i8* %9903, align 1, !tbaa !2450
  %9904 = load i32, i32* %EDX
  %9905 = zext i32 %9904 to i64
  %9906 = load i64, i64* %PC
  %9907 = add i64 %9906, 3
  store i64 %9907, i64* %PC
  %9908 = shl i64 %9905, 32
  %9909 = ashr exact i64 %9908, 32
  store i64 %9909, i64* %RCX, align 8, !tbaa !2428
  %9910 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9911 = load i64, i64* %RAX
  %9912 = load i64, i64* %RCX
  %9913 = mul i64 %9912, 4
  %9914 = add i64 %9913, %9911
  %9915 = load i64, i64* %PC
  %9916 = add i64 %9915, 5
  store i64 %9916, i64* %PC
  %9917 = inttoptr i64 %9914 to float*
  %9918 = load float, float* %9917
  %9919 = bitcast i8* %9910 to float*
  store float %9918, float* %9919, align 1, !tbaa !2452
  %9920 = getelementptr inbounds i8, i8* %9910, i64 4
  %9921 = bitcast i8* %9920 to float*
  store float 0.000000e+00, float* %9921, align 1, !tbaa !2452
  %9922 = getelementptr inbounds i8, i8* %9910, i64 8
  %9923 = bitcast i8* %9922 to float*
  store float 0.000000e+00, float* %9923, align 1, !tbaa !2452
  %9924 = getelementptr inbounds i8, i8* %9910, i64 12
  %9925 = bitcast i8* %9924 to float*
  store float 0.000000e+00, float* %9925, align 1, !tbaa !2452
  %9926 = load i64, i64* %RBP
  %9927 = sub i64 %9926, 40
  %9928 = load i64, i64* %PC
  %9929 = add i64 %9928, 4
  store i64 %9929, i64* %PC
  %9930 = inttoptr i64 %9927 to i64*
  %9931 = load i64, i64* %9930
  store i64 %9931, i64* %RAX, align 8, !tbaa !2428
  %9932 = load i64, i64* %RAX
  %9933 = load i64, i64* %PC
  %9934 = add i64 %9933, 3
  store i64 %9934, i64* %PC
  %9935 = inttoptr i64 %9932 to i64*
  %9936 = load i64, i64* %9935
  store i64 %9936, i64* %RAX, align 8, !tbaa !2428
  %9937 = load i64, i64* %RBP
  %9938 = sub i64 %9937, 40
  %9939 = load i64, i64* %PC
  %9940 = add i64 %9939, 4
  store i64 %9940, i64* %PC
  %9941 = inttoptr i64 %9938 to i64*
  %9942 = load i64, i64* %9941
  store i64 %9942, i64* %RCX, align 8, !tbaa !2428
  %9943 = load i64, i64* %RCX
  %9944 = add i64 %9943, 12
  %9945 = load i64, i64* %PC
  %9946 = add i64 %9945, 4
  store i64 %9946, i64* %PC
  %9947 = inttoptr i64 %9944 to i32*
  %9948 = load i32, i32* %9947
  %9949 = sext i32 %9948 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9950, align 1, !tbaa !2432
  %9951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9951, align 1, !tbaa !2446
  %9952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9952, align 1, !tbaa !2447
  %9953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9953, align 1, !tbaa !2448
  %9954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9954, align 1, !tbaa !2449
  %9955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9955, align 1, !tbaa !2450
  %9956 = load i64, i64* %RBP
  %9957 = sub i64 %9956, 40
  %9958 = load i64, i64* %PC
  %9959 = add i64 %9958, 4
  store i64 %9959, i64* %PC
  %9960 = inttoptr i64 %9957 to i64*
  %9961 = load i64, i64* %9960
  store i64 %9961, i64* %RCX, align 8, !tbaa !2428
  %9962 = load i64, i64* %RDX
  %9963 = load i64, i64* %RCX
  %9964 = add i64 %9963, 16
  %9965 = load i64, i64* %PC
  %9966 = add i64 %9965, 4
  store i64 %9966, i64* %PC
  %9967 = inttoptr i64 %9964 to i32*
  %9968 = load i32, i32* %9967
  %9969 = shl i64 %9962, 32
  %9970 = ashr exact i64 %9969, 32
  %9971 = sext i32 %9968 to i64
  %9972 = mul nsw i64 %9971, %9970
  %9973 = trunc i64 %9972 to i32
  %9974 = and i64 %9972, 4294967295
  store i64 %9974, i64* %RDX, align 8, !tbaa !2428
  %9975 = shl i64 %9972, 32
  %9976 = ashr exact i64 %9975, 32
  %9977 = icmp ne i64 %9976, %9972
  %9978 = zext i1 %9977 to i8
  %9979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9978, i8* %9979, align 1, !tbaa !2432
  %9980 = and i32 %9973, 255
  %9981 = call i32 @llvm.ctpop.i32(i32 %9980) #16
  %9982 = trunc i32 %9981 to i8
  %9983 = and i8 %9982, 1
  %9984 = xor i8 %9983, 1
  %9985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9984, i8* %9985, align 1, !tbaa !2446
  %9986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9986, align 1, !tbaa !2447
  %9987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9987, align 1, !tbaa !2448
  %9988 = lshr i32 %9973, 31
  %9989 = trunc i32 %9988 to i8
  %9990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9989, i8* %9990, align 1, !tbaa !2449
  %9991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9978, i8* %9991, align 1, !tbaa !2450
  %9992 = load i64, i64* %RBP
  %9993 = sub i64 %9992, 40
  %9994 = load i64, i64* %PC
  %9995 = add i64 %9994, 4
  store i64 %9995, i64* %PC
  %9996 = inttoptr i64 %9993 to i64*
  %9997 = load i64, i64* %9996
  store i64 %9997, i64* %RCX, align 8, !tbaa !2428
  %9998 = load i64, i64* %RDX
  %9999 = load i64, i64* %RCX
  %10000 = add i64 %9999, 20
  %10001 = load i64, i64* %PC
  %10002 = add i64 %10001, 4
  store i64 %10002, i64* %PC
  %10003 = inttoptr i64 %10000 to i32*
  %10004 = load i32, i32* %10003
  %10005 = shl i64 %9998, 32
  %10006 = ashr exact i64 %10005, 32
  %10007 = sext i32 %10004 to i64
  %10008 = mul nsw i64 %10007, %10006
  %10009 = trunc i64 %10008 to i32
  %10010 = and i64 %10008, 4294967295
  store i64 %10010, i64* %RDX, align 8, !tbaa !2428
  %10011 = shl i64 %10008, 32
  %10012 = ashr exact i64 %10011, 32
  %10013 = icmp ne i64 %10012, %10008
  %10014 = zext i1 %10013 to i8
  %10015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10014, i8* %10015, align 1, !tbaa !2432
  %10016 = and i32 %10009, 255
  %10017 = call i32 @llvm.ctpop.i32(i32 %10016) #16
  %10018 = trunc i32 %10017 to i8
  %10019 = and i8 %10018, 1
  %10020 = xor i8 %10019, 1
  %10021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10020, i8* %10021, align 1, !tbaa !2446
  %10022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10022, align 1, !tbaa !2447
  %10023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10023, align 1, !tbaa !2448
  %10024 = lshr i32 %10009, 31
  %10025 = trunc i32 %10024 to i8
  %10026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10025, i8* %10026, align 1, !tbaa !2449
  %10027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10014, i8* %10027, align 1, !tbaa !2450
  %10028 = load i64, i64* %RBP
  %10029 = sub i64 %10028, 52
  %10030 = load i64, i64* %PC
  %10031 = add i64 %10030, 3
  store i64 %10031, i64* %PC
  %10032 = inttoptr i64 %10029 to i32*
  %10033 = load i32, i32* %10032
  %10034 = zext i32 %10033 to i64
  store i64 %10034, i64* %RSI, align 8, !tbaa !2428
  %10035 = load i64, i64* %RSI
  %10036 = load i64, i64* %PC
  %10037 = add i64 %10036, 3
  store i64 %10037, i64* %PC
  %10038 = trunc i64 %10035 to i32
  %10039 = sub i32 %10038, 1
  %10040 = zext i32 %10039 to i64
  store i64 %10040, i64* %RSI, align 8, !tbaa !2428
  %10041 = icmp ult i32 %10038, 1
  %10042 = zext i1 %10041 to i8
  %10043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10042, i8* %10043, align 1, !tbaa !2432
  %10044 = and i32 %10039, 255
  %10045 = call i32 @llvm.ctpop.i32(i32 %10044) #16
  %10046 = trunc i32 %10045 to i8
  %10047 = and i8 %10046, 1
  %10048 = xor i8 %10047, 1
  %10049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10048, i8* %10049, align 1, !tbaa !2446
  %10050 = xor i64 1, %10035
  %10051 = trunc i64 %10050 to i32
  %10052 = xor i32 %10051, %10039
  %10053 = lshr i32 %10052, 4
  %10054 = trunc i32 %10053 to i8
  %10055 = and i8 %10054, 1
  %10056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10055, i8* %10056, align 1, !tbaa !2447
  %10057 = icmp eq i32 %10039, 0
  %10058 = zext i1 %10057 to i8
  %10059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10058, i8* %10059, align 1, !tbaa !2448
  %10060 = lshr i32 %10039, 31
  %10061 = trunc i32 %10060 to i8
  %10062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10061, i8* %10062, align 1, !tbaa !2449
  %10063 = lshr i32 %10038, 31
  %10064 = xor i32 %10060, %10063
  %10065 = add nuw nsw i32 %10064, %10063
  %10066 = icmp eq i32 %10065, 2
  %10067 = zext i1 %10066 to i8
  %10068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10067, i8* %10068, align 1, !tbaa !2450
  %10069 = load i64, i64* %RBP
  %10070 = sub i64 %10069, 40
  %10071 = load i64, i64* %PC
  %10072 = add i64 %10071, 4
  store i64 %10072, i64* %PC
  %10073 = inttoptr i64 %10070 to i64*
  %10074 = load i64, i64* %10073
  store i64 %10074, i64* %RCX, align 8, !tbaa !2428
  %10075 = load i64, i64* %RSI
  %10076 = load i64, i64* %RCX
  %10077 = add i64 %10076, 16
  %10078 = load i64, i64* %PC
  %10079 = add i64 %10078, 4
  store i64 %10079, i64* %PC
  %10080 = inttoptr i64 %10077 to i32*
  %10081 = load i32, i32* %10080
  %10082 = shl i64 %10075, 32
  %10083 = ashr exact i64 %10082, 32
  %10084 = sext i32 %10081 to i64
  %10085 = mul nsw i64 %10084, %10083
  %10086 = trunc i64 %10085 to i32
  %10087 = and i64 %10085, 4294967295
  store i64 %10087, i64* %RSI, align 8, !tbaa !2428
  %10088 = shl i64 %10085, 32
  %10089 = ashr exact i64 %10088, 32
  %10090 = icmp ne i64 %10089, %10085
  %10091 = zext i1 %10090 to i8
  %10092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10091, i8* %10092, align 1, !tbaa !2432
  %10093 = and i32 %10086, 255
  %10094 = call i32 @llvm.ctpop.i32(i32 %10093) #16
  %10095 = trunc i32 %10094 to i8
  %10096 = and i8 %10095, 1
  %10097 = xor i8 %10096, 1
  %10098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10097, i8* %10098, align 1, !tbaa !2446
  %10099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10099, align 1, !tbaa !2447
  %10100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10100, align 1, !tbaa !2448
  %10101 = lshr i32 %10086, 31
  %10102 = trunc i32 %10101 to i8
  %10103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10102, i8* %10103, align 1, !tbaa !2449
  %10104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10091, i8* %10104, align 1, !tbaa !2450
  %10105 = load i64, i64* %RBP
  %10106 = sub i64 %10105, 40
  %10107 = load i64, i64* %PC
  %10108 = add i64 %10107, 4
  store i64 %10108, i64* %PC
  %10109 = inttoptr i64 %10106 to i64*
  %10110 = load i64, i64* %10109
  store i64 %10110, i64* %RCX, align 8, !tbaa !2428
  %10111 = load i64, i64* %RSI
  %10112 = load i64, i64* %RCX
  %10113 = add i64 %10112, 20
  %10114 = load i64, i64* %PC
  %10115 = add i64 %10114, 4
  store i64 %10115, i64* %PC
  %10116 = inttoptr i64 %10113 to i32*
  %10117 = load i32, i32* %10116
  %10118 = shl i64 %10111, 32
  %10119 = ashr exact i64 %10118, 32
  %10120 = sext i32 %10117 to i64
  %10121 = mul nsw i64 %10120, %10119
  %10122 = trunc i64 %10121 to i32
  %10123 = and i64 %10121, 4294967295
  store i64 %10123, i64* %RSI, align 8, !tbaa !2428
  %10124 = shl i64 %10121, 32
  %10125 = ashr exact i64 %10124, 32
  %10126 = icmp ne i64 %10125, %10121
  %10127 = zext i1 %10126 to i8
  %10128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10127, i8* %10128, align 1, !tbaa !2432
  %10129 = and i32 %10122, 255
  %10130 = call i32 @llvm.ctpop.i32(i32 %10129) #16
  %10131 = trunc i32 %10130 to i8
  %10132 = and i8 %10131, 1
  %10133 = xor i8 %10132, 1
  %10134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10133, i8* %10134, align 1, !tbaa !2446
  %10135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10135, align 1, !tbaa !2447
  %10136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10136, align 1, !tbaa !2448
  %10137 = lshr i32 %10122, 31
  %10138 = trunc i32 %10137 to i8
  %10139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10138, i8* %10139, align 1, !tbaa !2449
  %10140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10127, i8* %10140, align 1, !tbaa !2450
  %10141 = load i64, i64* %RDX
  %10142 = load i32, i32* %ESI
  %10143 = zext i32 %10142 to i64
  %10144 = load i64, i64* %PC
  %10145 = add i64 %10144, 2
  store i64 %10145, i64* %PC
  %10146 = trunc i64 %10141 to i32
  %10147 = add i32 %10142, %10146
  %10148 = zext i32 %10147 to i64
  store i64 %10148, i64* %RDX, align 8, !tbaa !2428
  %10149 = icmp ult i32 %10147, %10146
  %10150 = icmp ult i32 %10147, %10142
  %10151 = or i1 %10149, %10150
  %10152 = zext i1 %10151 to i8
  %10153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10152, i8* %10153, align 1, !tbaa !2432
  %10154 = and i32 %10147, 255
  %10155 = call i32 @llvm.ctpop.i32(i32 %10154) #16
  %10156 = trunc i32 %10155 to i8
  %10157 = and i8 %10156, 1
  %10158 = xor i8 %10157, 1
  %10159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10158, i8* %10159, align 1, !tbaa !2446
  %10160 = xor i64 %10143, %10141
  %10161 = trunc i64 %10160 to i32
  %10162 = xor i32 %10161, %10147
  %10163 = lshr i32 %10162, 4
  %10164 = trunc i32 %10163 to i8
  %10165 = and i8 %10164, 1
  %10166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10165, i8* %10166, align 1, !tbaa !2447
  %10167 = icmp eq i32 %10147, 0
  %10168 = zext i1 %10167 to i8
  %10169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10168, i8* %10169, align 1, !tbaa !2448
  %10170 = lshr i32 %10147, 31
  %10171 = trunc i32 %10170 to i8
  %10172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10171, i8* %10172, align 1, !tbaa !2449
  %10173 = lshr i32 %10146, 31
  %10174 = lshr i32 %10142, 31
  %10175 = xor i32 %10170, %10173
  %10176 = xor i32 %10170, %10174
  %10177 = add nuw nsw i32 %10175, %10176
  %10178 = icmp eq i32 %10177, 2
  %10179 = zext i1 %10178 to i8
  %10180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10179, i8* %10180, align 1, !tbaa !2450
  %10181 = load i64, i64* %RBP
  %10182 = sub i64 %10181, 56
  %10183 = load i64, i64* %PC
  %10184 = add i64 %10183, 3
  store i64 %10184, i64* %PC
  %10185 = inttoptr i64 %10182 to i32*
  %10186 = load i32, i32* %10185
  %10187 = zext i32 %10186 to i64
  store i64 %10187, i64* %RSI, align 8, !tbaa !2428
  %10188 = load i64, i64* %RBP
  %10189 = sub i64 %10188, 40
  %10190 = load i64, i64* %PC
  %10191 = add i64 %10190, 4
  store i64 %10191, i64* %PC
  %10192 = inttoptr i64 %10189 to i64*
  %10193 = load i64, i64* %10192
  store i64 %10193, i64* %RCX, align 8, !tbaa !2428
  %10194 = load i64, i64* %RSI
  %10195 = load i64, i64* %RCX
  %10196 = add i64 %10195, 20
  %10197 = load i64, i64* %PC
  %10198 = add i64 %10197, 4
  store i64 %10198, i64* %PC
  %10199 = inttoptr i64 %10196 to i32*
  %10200 = load i32, i32* %10199
  %10201 = shl i64 %10194, 32
  %10202 = ashr exact i64 %10201, 32
  %10203 = sext i32 %10200 to i64
  %10204 = mul nsw i64 %10203, %10202
  %10205 = trunc i64 %10204 to i32
  %10206 = and i64 %10204, 4294967295
  store i64 %10206, i64* %RSI, align 8, !tbaa !2428
  %10207 = shl i64 %10204, 32
  %10208 = ashr exact i64 %10207, 32
  %10209 = icmp ne i64 %10208, %10204
  %10210 = zext i1 %10209 to i8
  %10211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10210, i8* %10211, align 1, !tbaa !2432
  %10212 = and i32 %10205, 255
  %10213 = call i32 @llvm.ctpop.i32(i32 %10212) #16
  %10214 = trunc i32 %10213 to i8
  %10215 = and i8 %10214, 1
  %10216 = xor i8 %10215, 1
  %10217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10216, i8* %10217, align 1, !tbaa !2446
  %10218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10218, align 1, !tbaa !2447
  %10219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10219, align 1, !tbaa !2448
  %10220 = lshr i32 %10205, 31
  %10221 = trunc i32 %10220 to i8
  %10222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10221, i8* %10222, align 1, !tbaa !2449
  %10223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10210, i8* %10223, align 1, !tbaa !2450
  %10224 = load i64, i64* %RDX
  %10225 = load i32, i32* %ESI
  %10226 = zext i32 %10225 to i64
  %10227 = load i64, i64* %PC
  %10228 = add i64 %10227, 2
  store i64 %10228, i64* %PC
  %10229 = trunc i64 %10224 to i32
  %10230 = add i32 %10225, %10229
  %10231 = zext i32 %10230 to i64
  store i64 %10231, i64* %RDX, align 8, !tbaa !2428
  %10232 = icmp ult i32 %10230, %10229
  %10233 = icmp ult i32 %10230, %10225
  %10234 = or i1 %10232, %10233
  %10235 = zext i1 %10234 to i8
  %10236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10235, i8* %10236, align 1, !tbaa !2432
  %10237 = and i32 %10230, 255
  %10238 = call i32 @llvm.ctpop.i32(i32 %10237) #16
  %10239 = trunc i32 %10238 to i8
  %10240 = and i8 %10239, 1
  %10241 = xor i8 %10240, 1
  %10242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10241, i8* %10242, align 1, !tbaa !2446
  %10243 = xor i64 %10226, %10224
  %10244 = trunc i64 %10243 to i32
  %10245 = xor i32 %10244, %10230
  %10246 = lshr i32 %10245, 4
  %10247 = trunc i32 %10246 to i8
  %10248 = and i8 %10247, 1
  %10249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10248, i8* %10249, align 1, !tbaa !2447
  %10250 = icmp eq i32 %10230, 0
  %10251 = zext i1 %10250 to i8
  %10252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10251, i8* %10252, align 1, !tbaa !2448
  %10253 = lshr i32 %10230, 31
  %10254 = trunc i32 %10253 to i8
  %10255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10254, i8* %10255, align 1, !tbaa !2449
  %10256 = lshr i32 %10229, 31
  %10257 = lshr i32 %10225, 31
  %10258 = xor i32 %10253, %10256
  %10259 = xor i32 %10253, %10257
  %10260 = add nuw nsw i32 %10258, %10259
  %10261 = icmp eq i32 %10260, 2
  %10262 = zext i1 %10261 to i8
  %10263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10262, i8* %10263, align 1, !tbaa !2450
  %10264 = load i64, i64* %RDX
  %10265 = load i64, i64* %RBP
  %10266 = sub i64 %10265, 60
  %10267 = load i64, i64* %PC
  %10268 = add i64 %10267, 3
  store i64 %10268, i64* %PC
  %10269 = trunc i64 %10264 to i32
  %10270 = inttoptr i64 %10266 to i32*
  %10271 = load i32, i32* %10270
  %10272 = add i32 %10271, %10269
  %10273 = zext i32 %10272 to i64
  store i64 %10273, i64* %RDX, align 8, !tbaa !2428
  %10274 = icmp ult i32 %10272, %10269
  %10275 = icmp ult i32 %10272, %10271
  %10276 = or i1 %10274, %10275
  %10277 = zext i1 %10276 to i8
  %10278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10277, i8* %10278, align 1, !tbaa !2432
  %10279 = and i32 %10272, 255
  %10280 = call i32 @llvm.ctpop.i32(i32 %10279) #16
  %10281 = trunc i32 %10280 to i8
  %10282 = and i8 %10281, 1
  %10283 = xor i8 %10282, 1
  %10284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10283, i8* %10284, align 1, !tbaa !2446
  %10285 = xor i32 %10271, %10269
  %10286 = xor i32 %10285, %10272
  %10287 = lshr i32 %10286, 4
  %10288 = trunc i32 %10287 to i8
  %10289 = and i8 %10288, 1
  %10290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10289, i8* %10290, align 1, !tbaa !2447
  %10291 = icmp eq i32 %10272, 0
  %10292 = zext i1 %10291 to i8
  %10293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10292, i8* %10293, align 1, !tbaa !2448
  %10294 = lshr i32 %10272, 31
  %10295 = trunc i32 %10294 to i8
  %10296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10295, i8* %10296, align 1, !tbaa !2449
  %10297 = lshr i32 %10269, 31
  %10298 = lshr i32 %10271, 31
  %10299 = xor i32 %10294, %10297
  %10300 = xor i32 %10294, %10298
  %10301 = add nuw nsw i32 %10299, %10300
  %10302 = icmp eq i32 %10301, 2
  %10303 = zext i1 %10302 to i8
  %10304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10303, i8* %10304, align 1, !tbaa !2450
  %10305 = load i32, i32* %EDX
  %10306 = zext i32 %10305 to i64
  %10307 = load i64, i64* %PC
  %10308 = add i64 %10307, 3
  store i64 %10308, i64* %PC
  %10309 = shl i64 %10306, 32
  %10310 = ashr exact i64 %10309, 32
  store i64 %10310, i64* %RCX, align 8, !tbaa !2428
  %10311 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10312 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10313 = load i64, i64* %RAX
  %10314 = load i64, i64* %RCX
  %10315 = mul i64 %10314, 4
  %10316 = add i64 %10315, %10313
  %10317 = load i64, i64* %PC
  %10318 = add i64 %10317, 5
  store i64 %10318, i64* %PC
  %10319 = bitcast i8* %10312 to <2 x float>*
  %10320 = load <2 x float>, <2 x float>* %10319, align 1
  %10321 = getelementptr inbounds i8, i8* %10312, i64 8
  %10322 = bitcast i8* %10321 to <2 x i32>*
  %10323 = load <2 x i32>, <2 x i32>* %10322, align 1
  %10324 = inttoptr i64 %10316 to float*
  %10325 = load float, float* %10324
  %10326 = extractelement <2 x float> %10320, i32 0
  %10327 = fmul float %10326, %10325
  %10328 = bitcast i8* %10311 to float*
  store float %10327, float* %10328, align 1, !tbaa !2452
  %10329 = bitcast <2 x float> %10320 to <2 x i32>
  %10330 = extractelement <2 x i32> %10329, i32 1
  %10331 = getelementptr inbounds i8, i8* %10311, i64 4
  %10332 = bitcast i8* %10331 to i32*
  store i32 %10330, i32* %10332, align 1, !tbaa !2452
  %10333 = extractelement <2 x i32> %10323, i32 0
  %10334 = getelementptr inbounds i8, i8* %10311, i64 8
  %10335 = bitcast i8* %10334 to i32*
  store i32 %10333, i32* %10335, align 1, !tbaa !2452
  %10336 = extractelement <2 x i32> %10323, i32 1
  %10337 = getelementptr inbounds i8, i8* %10311, i64 12
  %10338 = bitcast i8* %10337 to i32*
  store i32 %10336, i32* %10338, align 1, !tbaa !2452
  %10339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10340 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10341 = bitcast %union.vec128_t* %XMM1 to i8*
  %10342 = load i64, i64* %PC
  %10343 = add i64 %10342, 4
  store i64 %10343, i64* %PC
  %10344 = bitcast i8* %10340 to <2 x float>*
  %10345 = load <2 x float>, <2 x float>* %10344, align 1
  %10346 = getelementptr inbounds i8, i8* %10340, i64 8
  %10347 = bitcast i8* %10346 to <2 x i32>*
  %10348 = load <2 x i32>, <2 x i32>* %10347, align 1
  %10349 = bitcast i8* %10341 to <2 x float>*
  %10350 = load <2 x float>, <2 x float>* %10349, align 1
  %10351 = extractelement <2 x float> %10345, i32 0
  %10352 = extractelement <2 x float> %10350, i32 0
  %10353 = fadd float %10351, %10352
  %10354 = bitcast i8* %10339 to float*
  store float %10353, float* %10354, align 1, !tbaa !2452
  %10355 = bitcast <2 x float> %10345 to <2 x i32>
  %10356 = extractelement <2 x i32> %10355, i32 1
  %10357 = getelementptr inbounds i8, i8* %10339, i64 4
  %10358 = bitcast i8* %10357 to i32*
  store i32 %10356, i32* %10358, align 1, !tbaa !2452
  %10359 = extractelement <2 x i32> %10348, i32 0
  %10360 = getelementptr inbounds i8, i8* %10339, i64 8
  %10361 = bitcast i8* %10360 to i32*
  store i32 %10359, i32* %10361, align 1, !tbaa !2452
  %10362 = extractelement <2 x i32> %10348, i32 1
  %10363 = getelementptr inbounds i8, i8* %10339, i64 12
  %10364 = bitcast i8* %10363 to i32*
  store i32 %10362, i32* %10364, align 1, !tbaa !2452
  %10365 = load i64, i64* %RBP
  %10366 = sub i64 %10365, 32
  %10367 = load i64, i64* %PC
  %10368 = add i64 %10367, 4
  store i64 %10368, i64* %PC
  %10369 = inttoptr i64 %10366 to i64*
  %10370 = load i64, i64* %10369
  store i64 %10370, i64* %RAX, align 8, !tbaa !2428
  %10371 = load i64, i64* %RAX
  %10372 = load i64, i64* %PC
  %10373 = add i64 %10372, 3
  store i64 %10373, i64* %PC
  %10374 = inttoptr i64 %10371 to i64*
  %10375 = load i64, i64* %10374
  store i64 %10375, i64* %RAX, align 8, !tbaa !2428
  %10376 = load i64, i64* %RBP
  %10377 = sub i64 %10376, 32
  %10378 = load i64, i64* %PC
  %10379 = add i64 %10378, 4
  store i64 %10379, i64* %PC
  %10380 = inttoptr i64 %10377 to i64*
  %10381 = load i64, i64* %10380
  store i64 %10381, i64* %RCX, align 8, !tbaa !2428
  %10382 = load i64, i64* %RCX
  %10383 = add i64 %10382, 12
  %10384 = load i64, i64* %PC
  %10385 = add i64 %10384, 3
  store i64 %10385, i64* %PC
  %10386 = inttoptr i64 %10383 to i32*
  %10387 = load i32, i32* %10386
  %10388 = zext i32 %10387 to i64
  store i64 %10388, i64* %RDX, align 8, !tbaa !2428
  %10389 = load i64, i64* %RDX
  %10390 = load i64, i64* %PC
  %10391 = add i64 %10390, 3
  store i64 %10391, i64* %PC
  %10392 = load i64, i64* %RBP
  %10393 = sub i64 %10392, 32
  %10394 = load i64, i64* %PC
  %10395 = add i64 %10394, 4
  store i64 %10395, i64* %PC
  %10396 = inttoptr i64 %10393 to i64*
  %10397 = load i64, i64* %10396
  store i64 %10397, i64* %RCX, align 8, !tbaa !2428
  %10398 = load i64, i64* %RDX
  %10399 = load i64, i64* %RCX
  %10400 = add i64 %10399, 16
  %10401 = load i64, i64* %PC
  %10402 = add i64 %10401, 4
  store i64 %10402, i64* %PC
  %10403 = inttoptr i64 %10400 to i32*
  %10404 = load i32, i32* %10403
  %10405 = shl i64 %10398, 32
  %10406 = ashr exact i64 %10405, 32
  %10407 = sext i32 %10404 to i64
  %10408 = mul nsw i64 %10407, %10406
  %10409 = trunc i64 %10408 to i32
  %10410 = and i64 %10408, 4294967295
  store i64 %10410, i64* %RDX, align 8, !tbaa !2428
  %10411 = shl i64 %10408, 32
  %10412 = ashr exact i64 %10411, 32
  %10413 = icmp ne i64 %10412, %10408
  %10414 = zext i1 %10413 to i8
  %10415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10414, i8* %10415, align 1, !tbaa !2432
  %10416 = and i32 %10409, 255
  %10417 = call i32 @llvm.ctpop.i32(i32 %10416) #16
  %10418 = trunc i32 %10417 to i8
  %10419 = and i8 %10418, 1
  %10420 = xor i8 %10419, 1
  %10421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10420, i8* %10421, align 1, !tbaa !2446
  %10422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10422, align 1, !tbaa !2447
  %10423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10423, align 1, !tbaa !2448
  %10424 = lshr i32 %10409, 31
  %10425 = trunc i32 %10424 to i8
  %10426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10425, i8* %10426, align 1, !tbaa !2449
  %10427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10414, i8* %10427, align 1, !tbaa !2450
  %10428 = load i64, i64* %RBP
  %10429 = sub i64 %10428, 32
  %10430 = load i64, i64* %PC
  %10431 = add i64 %10430, 4
  store i64 %10431, i64* %PC
  %10432 = inttoptr i64 %10429 to i64*
  %10433 = load i64, i64* %10432
  store i64 %10433, i64* %RCX, align 8, !tbaa !2428
  %10434 = load i64, i64* %RDX
  %10435 = load i64, i64* %RCX
  %10436 = add i64 %10435, 20
  %10437 = load i64, i64* %PC
  %10438 = add i64 %10437, 4
  store i64 %10438, i64* %PC
  %10439 = inttoptr i64 %10436 to i32*
  %10440 = load i32, i32* %10439
  %10441 = shl i64 %10434, 32
  %10442 = ashr exact i64 %10441, 32
  %10443 = sext i32 %10440 to i64
  %10444 = mul nsw i64 %10443, %10442
  %10445 = trunc i64 %10444 to i32
  %10446 = and i64 %10444, 4294967295
  store i64 %10446, i64* %RDX, align 8, !tbaa !2428
  %10447 = shl i64 %10444, 32
  %10448 = ashr exact i64 %10447, 32
  %10449 = icmp ne i64 %10448, %10444
  %10450 = zext i1 %10449 to i8
  %10451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10450, i8* %10451, align 1, !tbaa !2432
  %10452 = and i32 %10445, 255
  %10453 = call i32 @llvm.ctpop.i32(i32 %10452) #16
  %10454 = trunc i32 %10453 to i8
  %10455 = and i8 %10454, 1
  %10456 = xor i8 %10455, 1
  %10457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10456, i8* %10457, align 1, !tbaa !2446
  %10458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10458, align 1, !tbaa !2447
  %10459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10459, align 1, !tbaa !2448
  %10460 = lshr i32 %10445, 31
  %10461 = trunc i32 %10460 to i8
  %10462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10461, i8* %10462, align 1, !tbaa !2449
  %10463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10450, i8* %10463, align 1, !tbaa !2450
  %10464 = load i64, i64* %RBP
  %10465 = sub i64 %10464, 52
  %10466 = load i64, i64* %PC
  %10467 = add i64 %10466, 3
  store i64 %10467, i64* %PC
  %10468 = inttoptr i64 %10465 to i32*
  %10469 = load i32, i32* %10468
  %10470 = zext i32 %10469 to i64
  store i64 %10470, i64* %RSI, align 8, !tbaa !2428
  %10471 = load i64, i64* %RBP
  %10472 = sub i64 %10471, 32
  %10473 = load i64, i64* %PC
  %10474 = add i64 %10473, 4
  store i64 %10474, i64* %PC
  %10475 = inttoptr i64 %10472 to i64*
  %10476 = load i64, i64* %10475
  store i64 %10476, i64* %RCX, align 8, !tbaa !2428
  %10477 = load i64, i64* %RSI
  %10478 = load i64, i64* %RCX
  %10479 = add i64 %10478, 16
  %10480 = load i64, i64* %PC
  %10481 = add i64 %10480, 4
  store i64 %10481, i64* %PC
  %10482 = inttoptr i64 %10479 to i32*
  %10483 = load i32, i32* %10482
  %10484 = shl i64 %10477, 32
  %10485 = ashr exact i64 %10484, 32
  %10486 = sext i32 %10483 to i64
  %10487 = mul nsw i64 %10486, %10485
  %10488 = trunc i64 %10487 to i32
  %10489 = and i64 %10487, 4294967295
  store i64 %10489, i64* %RSI, align 8, !tbaa !2428
  %10490 = shl i64 %10487, 32
  %10491 = ashr exact i64 %10490, 32
  %10492 = icmp ne i64 %10491, %10487
  %10493 = zext i1 %10492 to i8
  %10494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10493, i8* %10494, align 1, !tbaa !2432
  %10495 = and i32 %10488, 255
  %10496 = call i32 @llvm.ctpop.i32(i32 %10495) #16
  %10497 = trunc i32 %10496 to i8
  %10498 = and i8 %10497, 1
  %10499 = xor i8 %10498, 1
  %10500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10499, i8* %10500, align 1, !tbaa !2446
  %10501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10501, align 1, !tbaa !2447
  %10502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10502, align 1, !tbaa !2448
  %10503 = lshr i32 %10488, 31
  %10504 = trunc i32 %10503 to i8
  %10505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10504, i8* %10505, align 1, !tbaa !2449
  %10506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10493, i8* %10506, align 1, !tbaa !2450
  %10507 = load i64, i64* %RBP
  %10508 = sub i64 %10507, 32
  %10509 = load i64, i64* %PC
  %10510 = add i64 %10509, 4
  store i64 %10510, i64* %PC
  %10511 = inttoptr i64 %10508 to i64*
  %10512 = load i64, i64* %10511
  store i64 %10512, i64* %RCX, align 8, !tbaa !2428
  %10513 = load i64, i64* %RSI
  %10514 = load i64, i64* %RCX
  %10515 = add i64 %10514, 20
  %10516 = load i64, i64* %PC
  %10517 = add i64 %10516, 4
  store i64 %10517, i64* %PC
  %10518 = inttoptr i64 %10515 to i32*
  %10519 = load i32, i32* %10518
  %10520 = shl i64 %10513, 32
  %10521 = ashr exact i64 %10520, 32
  %10522 = sext i32 %10519 to i64
  %10523 = mul nsw i64 %10522, %10521
  %10524 = trunc i64 %10523 to i32
  %10525 = and i64 %10523, 4294967295
  store i64 %10525, i64* %RSI, align 8, !tbaa !2428
  %10526 = shl i64 %10523, 32
  %10527 = ashr exact i64 %10526, 32
  %10528 = icmp ne i64 %10527, %10523
  %10529 = zext i1 %10528 to i8
  %10530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10529, i8* %10530, align 1, !tbaa !2432
  %10531 = and i32 %10524, 255
  %10532 = call i32 @llvm.ctpop.i32(i32 %10531) #16
  %10533 = trunc i32 %10532 to i8
  %10534 = and i8 %10533, 1
  %10535 = xor i8 %10534, 1
  %10536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10535, i8* %10536, align 1, !tbaa !2446
  %10537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10537, align 1, !tbaa !2447
  %10538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10538, align 1, !tbaa !2448
  %10539 = lshr i32 %10524, 31
  %10540 = trunc i32 %10539 to i8
  %10541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10540, i8* %10541, align 1, !tbaa !2449
  %10542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10529, i8* %10542, align 1, !tbaa !2450
  %10543 = load i64, i64* %RDX
  %10544 = load i32, i32* %ESI
  %10545 = zext i32 %10544 to i64
  %10546 = load i64, i64* %PC
  %10547 = add i64 %10546, 2
  store i64 %10547, i64* %PC
  %10548 = trunc i64 %10543 to i32
  %10549 = add i32 %10544, %10548
  %10550 = zext i32 %10549 to i64
  store i64 %10550, i64* %RDX, align 8, !tbaa !2428
  %10551 = icmp ult i32 %10549, %10548
  %10552 = icmp ult i32 %10549, %10544
  %10553 = or i1 %10551, %10552
  %10554 = zext i1 %10553 to i8
  %10555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10554, i8* %10555, align 1, !tbaa !2432
  %10556 = and i32 %10549, 255
  %10557 = call i32 @llvm.ctpop.i32(i32 %10556) #16
  %10558 = trunc i32 %10557 to i8
  %10559 = and i8 %10558, 1
  %10560 = xor i8 %10559, 1
  %10561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10560, i8* %10561, align 1, !tbaa !2446
  %10562 = xor i64 %10545, %10543
  %10563 = trunc i64 %10562 to i32
  %10564 = xor i32 %10563, %10549
  %10565 = lshr i32 %10564, 4
  %10566 = trunc i32 %10565 to i8
  %10567 = and i8 %10566, 1
  %10568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10567, i8* %10568, align 1, !tbaa !2447
  %10569 = icmp eq i32 %10549, 0
  %10570 = zext i1 %10569 to i8
  %10571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10570, i8* %10571, align 1, !tbaa !2448
  %10572 = lshr i32 %10549, 31
  %10573 = trunc i32 %10572 to i8
  %10574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10573, i8* %10574, align 1, !tbaa !2449
  %10575 = lshr i32 %10548, 31
  %10576 = lshr i32 %10544, 31
  %10577 = xor i32 %10572, %10575
  %10578 = xor i32 %10572, %10576
  %10579 = add nuw nsw i32 %10577, %10578
  %10580 = icmp eq i32 %10579, 2
  %10581 = zext i1 %10580 to i8
  %10582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10581, i8* %10582, align 1, !tbaa !2450
  %10583 = load i64, i64* %RBP
  %10584 = sub i64 %10583, 56
  %10585 = load i64, i64* %PC
  %10586 = add i64 %10585, 3
  store i64 %10586, i64* %PC
  %10587 = inttoptr i64 %10584 to i32*
  %10588 = load i32, i32* %10587
  %10589 = zext i32 %10588 to i64
  store i64 %10589, i64* %RSI, align 8, !tbaa !2428
  %10590 = load i64, i64* %RBP
  %10591 = sub i64 %10590, 32
  %10592 = load i64, i64* %PC
  %10593 = add i64 %10592, 4
  store i64 %10593, i64* %PC
  %10594 = inttoptr i64 %10591 to i64*
  %10595 = load i64, i64* %10594
  store i64 %10595, i64* %RCX, align 8, !tbaa !2428
  %10596 = load i64, i64* %RSI
  %10597 = load i64, i64* %RCX
  %10598 = add i64 %10597, 20
  %10599 = load i64, i64* %PC
  %10600 = add i64 %10599, 4
  store i64 %10600, i64* %PC
  %10601 = inttoptr i64 %10598 to i32*
  %10602 = load i32, i32* %10601
  %10603 = shl i64 %10596, 32
  %10604 = ashr exact i64 %10603, 32
  %10605 = sext i32 %10602 to i64
  %10606 = mul nsw i64 %10605, %10604
  %10607 = trunc i64 %10606 to i32
  %10608 = and i64 %10606, 4294967295
  store i64 %10608, i64* %RSI, align 8, !tbaa !2428
  %10609 = shl i64 %10606, 32
  %10610 = ashr exact i64 %10609, 32
  %10611 = icmp ne i64 %10610, %10606
  %10612 = zext i1 %10611 to i8
  %10613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10612, i8* %10613, align 1, !tbaa !2432
  %10614 = and i32 %10607, 255
  %10615 = call i32 @llvm.ctpop.i32(i32 %10614) #16
  %10616 = trunc i32 %10615 to i8
  %10617 = and i8 %10616, 1
  %10618 = xor i8 %10617, 1
  %10619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10618, i8* %10619, align 1, !tbaa !2446
  %10620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10620, align 1, !tbaa !2447
  %10621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10621, align 1, !tbaa !2448
  %10622 = lshr i32 %10607, 31
  %10623 = trunc i32 %10622 to i8
  %10624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10623, i8* %10624, align 1, !tbaa !2449
  %10625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10612, i8* %10625, align 1, !tbaa !2450
  %10626 = load i64, i64* %RDX
  %10627 = load i32, i32* %ESI
  %10628 = zext i32 %10627 to i64
  %10629 = load i64, i64* %PC
  %10630 = add i64 %10629, 2
  store i64 %10630, i64* %PC
  %10631 = trunc i64 %10626 to i32
  %10632 = add i32 %10627, %10631
  %10633 = zext i32 %10632 to i64
  store i64 %10633, i64* %RDX, align 8, !tbaa !2428
  %10634 = icmp ult i32 %10632, %10631
  %10635 = icmp ult i32 %10632, %10627
  %10636 = or i1 %10634, %10635
  %10637 = zext i1 %10636 to i8
  %10638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10637, i8* %10638, align 1, !tbaa !2432
  %10639 = and i32 %10632, 255
  %10640 = call i32 @llvm.ctpop.i32(i32 %10639) #16
  %10641 = trunc i32 %10640 to i8
  %10642 = and i8 %10641, 1
  %10643 = xor i8 %10642, 1
  %10644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10643, i8* %10644, align 1, !tbaa !2446
  %10645 = xor i64 %10628, %10626
  %10646 = trunc i64 %10645 to i32
  %10647 = xor i32 %10646, %10632
  %10648 = lshr i32 %10647, 4
  %10649 = trunc i32 %10648 to i8
  %10650 = and i8 %10649, 1
  %10651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10650, i8* %10651, align 1, !tbaa !2447
  %10652 = icmp eq i32 %10632, 0
  %10653 = zext i1 %10652 to i8
  %10654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10653, i8* %10654, align 1, !tbaa !2448
  %10655 = lshr i32 %10632, 31
  %10656 = trunc i32 %10655 to i8
  %10657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10656, i8* %10657, align 1, !tbaa !2449
  %10658 = lshr i32 %10631, 31
  %10659 = lshr i32 %10627, 31
  %10660 = xor i32 %10655, %10658
  %10661 = xor i32 %10655, %10659
  %10662 = add nuw nsw i32 %10660, %10661
  %10663 = icmp eq i32 %10662, 2
  %10664 = zext i1 %10663 to i8
  %10665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10664, i8* %10665, align 1, !tbaa !2450
  %10666 = load i64, i64* %RDX
  %10667 = load i64, i64* %RBP
  %10668 = sub i64 %10667, 60
  %10669 = load i64, i64* %PC
  %10670 = add i64 %10669, 3
  store i64 %10670, i64* %PC
  %10671 = trunc i64 %10666 to i32
  %10672 = inttoptr i64 %10668 to i32*
  %10673 = load i32, i32* %10672
  %10674 = add i32 %10673, %10671
  %10675 = zext i32 %10674 to i64
  store i64 %10675, i64* %RDX, align 8, !tbaa !2428
  %10676 = icmp ult i32 %10674, %10671
  %10677 = icmp ult i32 %10674, %10673
  %10678 = or i1 %10676, %10677
  %10679 = zext i1 %10678 to i8
  %10680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10679, i8* %10680, align 1, !tbaa !2432
  %10681 = and i32 %10674, 255
  %10682 = call i32 @llvm.ctpop.i32(i32 %10681) #16
  %10683 = trunc i32 %10682 to i8
  %10684 = and i8 %10683, 1
  %10685 = xor i8 %10684, 1
  %10686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10685, i8* %10686, align 1, !tbaa !2446
  %10687 = xor i32 %10673, %10671
  %10688 = xor i32 %10687, %10674
  %10689 = lshr i32 %10688, 4
  %10690 = trunc i32 %10689 to i8
  %10691 = and i8 %10690, 1
  %10692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10691, i8* %10692, align 1, !tbaa !2447
  %10693 = icmp eq i32 %10674, 0
  %10694 = zext i1 %10693 to i8
  %10695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10694, i8* %10695, align 1, !tbaa !2448
  %10696 = lshr i32 %10674, 31
  %10697 = trunc i32 %10696 to i8
  %10698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10697, i8* %10698, align 1, !tbaa !2449
  %10699 = lshr i32 %10671, 31
  %10700 = lshr i32 %10673, 31
  %10701 = xor i32 %10696, %10699
  %10702 = xor i32 %10696, %10700
  %10703 = add nuw nsw i32 %10701, %10702
  %10704 = icmp eq i32 %10703, 2
  %10705 = zext i1 %10704 to i8
  %10706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10705, i8* %10706, align 1, !tbaa !2450
  %10707 = load i32, i32* %EDX
  %10708 = zext i32 %10707 to i64
  %10709 = load i64, i64* %PC
  %10710 = add i64 %10709, 3
  store i64 %10710, i64* %PC
  %10711 = shl i64 %10708, 32
  %10712 = ashr exact i64 %10711, 32
  store i64 %10712, i64* %RCX, align 8, !tbaa !2428
  %10713 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10714 = load i64, i64* %RAX
  %10715 = load i64, i64* %RCX
  %10716 = mul i64 %10715, 4
  %10717 = add i64 %10716, %10714
  %10718 = load i64, i64* %PC
  %10719 = add i64 %10718, 5
  store i64 %10719, i64* %PC
  %10720 = inttoptr i64 %10717 to float*
  %10721 = load float, float* %10720
  %10722 = bitcast i8* %10713 to float*
  store float %10721, float* %10722, align 1, !tbaa !2452
  %10723 = getelementptr inbounds i8, i8* %10713, i64 4
  %10724 = bitcast i8* %10723 to float*
  store float 0.000000e+00, float* %10724, align 1, !tbaa !2452
  %10725 = getelementptr inbounds i8, i8* %10713, i64 8
  %10726 = bitcast i8* %10725 to float*
  store float 0.000000e+00, float* %10726, align 1, !tbaa !2452
  %10727 = getelementptr inbounds i8, i8* %10713, i64 12
  %10728 = bitcast i8* %10727 to float*
  store float 0.000000e+00, float* %10728, align 1, !tbaa !2452
  %10729 = load i64, i64* %RBP
  %10730 = sub i64 %10729, 40
  %10731 = load i64, i64* %PC
  %10732 = add i64 %10731, 4
  store i64 %10732, i64* %PC
  %10733 = inttoptr i64 %10730 to i64*
  %10734 = load i64, i64* %10733
  store i64 %10734, i64* %RAX, align 8, !tbaa !2428
  %10735 = load i64, i64* %RAX
  %10736 = load i64, i64* %PC
  %10737 = add i64 %10736, 3
  store i64 %10737, i64* %PC
  %10738 = inttoptr i64 %10735 to i64*
  %10739 = load i64, i64* %10738
  store i64 %10739, i64* %RAX, align 8, !tbaa !2428
  %10740 = load i64, i64* %RBP
  %10741 = sub i64 %10740, 40
  %10742 = load i64, i64* %PC
  %10743 = add i64 %10742, 4
  store i64 %10743, i64* %PC
  %10744 = inttoptr i64 %10741 to i64*
  %10745 = load i64, i64* %10744
  store i64 %10745, i64* %RCX, align 8, !tbaa !2428
  %10746 = load i64, i64* %RCX
  %10747 = add i64 %10746, 12
  %10748 = load i64, i64* %PC
  %10749 = add i64 %10748, 4
  store i64 %10749, i64* %PC
  %10750 = inttoptr i64 %10747 to i32*
  %10751 = load i32, i32* %10750
  %10752 = sext i32 %10751 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %10753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10753, align 1, !tbaa !2432
  %10754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10754, align 1, !tbaa !2446
  %10755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10755, align 1, !tbaa !2447
  %10756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10756, align 1, !tbaa !2448
  %10757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10757, align 1, !tbaa !2449
  %10758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10758, align 1, !tbaa !2450
  %10759 = load i64, i64* %RBP
  %10760 = sub i64 %10759, 40
  %10761 = load i64, i64* %PC
  %10762 = add i64 %10761, 4
  store i64 %10762, i64* %PC
  %10763 = inttoptr i64 %10760 to i64*
  %10764 = load i64, i64* %10763
  store i64 %10764, i64* %RCX, align 8, !tbaa !2428
  %10765 = load i64, i64* %RDX
  %10766 = load i64, i64* %RCX
  %10767 = add i64 %10766, 16
  %10768 = load i64, i64* %PC
  %10769 = add i64 %10768, 4
  store i64 %10769, i64* %PC
  %10770 = inttoptr i64 %10767 to i32*
  %10771 = load i32, i32* %10770
  %10772 = shl i64 %10765, 32
  %10773 = ashr exact i64 %10772, 32
  %10774 = sext i32 %10771 to i64
  %10775 = mul nsw i64 %10774, %10773
  %10776 = trunc i64 %10775 to i32
  %10777 = and i64 %10775, 4294967295
  store i64 %10777, i64* %RDX, align 8, !tbaa !2428
  %10778 = shl i64 %10775, 32
  %10779 = ashr exact i64 %10778, 32
  %10780 = icmp ne i64 %10779, %10775
  %10781 = zext i1 %10780 to i8
  %10782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10781, i8* %10782, align 1, !tbaa !2432
  %10783 = and i32 %10776, 255
  %10784 = call i32 @llvm.ctpop.i32(i32 %10783) #16
  %10785 = trunc i32 %10784 to i8
  %10786 = and i8 %10785, 1
  %10787 = xor i8 %10786, 1
  %10788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10787, i8* %10788, align 1, !tbaa !2446
  %10789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10789, align 1, !tbaa !2447
  %10790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10790, align 1, !tbaa !2448
  %10791 = lshr i32 %10776, 31
  %10792 = trunc i32 %10791 to i8
  %10793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10792, i8* %10793, align 1, !tbaa !2449
  %10794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10781, i8* %10794, align 1, !tbaa !2450
  %10795 = load i64, i64* %RBP
  %10796 = sub i64 %10795, 40
  %10797 = load i64, i64* %PC
  %10798 = add i64 %10797, 4
  store i64 %10798, i64* %PC
  %10799 = inttoptr i64 %10796 to i64*
  %10800 = load i64, i64* %10799
  store i64 %10800, i64* %RCX, align 8, !tbaa !2428
  %10801 = load i64, i64* %RDX
  %10802 = load i64, i64* %RCX
  %10803 = add i64 %10802, 20
  %10804 = load i64, i64* %PC
  %10805 = add i64 %10804, 4
  store i64 %10805, i64* %PC
  %10806 = inttoptr i64 %10803 to i32*
  %10807 = load i32, i32* %10806
  %10808 = shl i64 %10801, 32
  %10809 = ashr exact i64 %10808, 32
  %10810 = sext i32 %10807 to i64
  %10811 = mul nsw i64 %10810, %10809
  %10812 = trunc i64 %10811 to i32
  %10813 = and i64 %10811, 4294967295
  store i64 %10813, i64* %RDX, align 8, !tbaa !2428
  %10814 = shl i64 %10811, 32
  %10815 = ashr exact i64 %10814, 32
  %10816 = icmp ne i64 %10815, %10811
  %10817 = zext i1 %10816 to i8
  %10818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10817, i8* %10818, align 1, !tbaa !2432
  %10819 = and i32 %10812, 255
  %10820 = call i32 @llvm.ctpop.i32(i32 %10819) #16
  %10821 = trunc i32 %10820 to i8
  %10822 = and i8 %10821, 1
  %10823 = xor i8 %10822, 1
  %10824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10823, i8* %10824, align 1, !tbaa !2446
  %10825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10825, align 1, !tbaa !2447
  %10826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10826, align 1, !tbaa !2448
  %10827 = lshr i32 %10812, 31
  %10828 = trunc i32 %10827 to i8
  %10829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10828, i8* %10829, align 1, !tbaa !2449
  %10830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10817, i8* %10830, align 1, !tbaa !2450
  %10831 = load i64, i64* %RBP
  %10832 = sub i64 %10831, 52
  %10833 = load i64, i64* %PC
  %10834 = add i64 %10833, 3
  store i64 %10834, i64* %PC
  %10835 = inttoptr i64 %10832 to i32*
  %10836 = load i32, i32* %10835
  %10837 = zext i32 %10836 to i64
  store i64 %10837, i64* %RSI, align 8, !tbaa !2428
  %10838 = load i64, i64* %RBP
  %10839 = sub i64 %10838, 40
  %10840 = load i64, i64* %PC
  %10841 = add i64 %10840, 4
  store i64 %10841, i64* %PC
  %10842 = inttoptr i64 %10839 to i64*
  %10843 = load i64, i64* %10842
  store i64 %10843, i64* %RCX, align 8, !tbaa !2428
  %10844 = load i64, i64* %RSI
  %10845 = load i64, i64* %RCX
  %10846 = add i64 %10845, 16
  %10847 = load i64, i64* %PC
  %10848 = add i64 %10847, 4
  store i64 %10848, i64* %PC
  %10849 = inttoptr i64 %10846 to i32*
  %10850 = load i32, i32* %10849
  %10851 = shl i64 %10844, 32
  %10852 = ashr exact i64 %10851, 32
  %10853 = sext i32 %10850 to i64
  %10854 = mul nsw i64 %10853, %10852
  %10855 = trunc i64 %10854 to i32
  %10856 = and i64 %10854, 4294967295
  store i64 %10856, i64* %RSI, align 8, !tbaa !2428
  %10857 = shl i64 %10854, 32
  %10858 = ashr exact i64 %10857, 32
  %10859 = icmp ne i64 %10858, %10854
  %10860 = zext i1 %10859 to i8
  %10861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10860, i8* %10861, align 1, !tbaa !2432
  %10862 = and i32 %10855, 255
  %10863 = call i32 @llvm.ctpop.i32(i32 %10862) #16
  %10864 = trunc i32 %10863 to i8
  %10865 = and i8 %10864, 1
  %10866 = xor i8 %10865, 1
  %10867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10866, i8* %10867, align 1, !tbaa !2446
  %10868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10868, align 1, !tbaa !2447
  %10869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10869, align 1, !tbaa !2448
  %10870 = lshr i32 %10855, 31
  %10871 = trunc i32 %10870 to i8
  %10872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10871, i8* %10872, align 1, !tbaa !2449
  %10873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10860, i8* %10873, align 1, !tbaa !2450
  %10874 = load i64, i64* %RBP
  %10875 = sub i64 %10874, 40
  %10876 = load i64, i64* %PC
  %10877 = add i64 %10876, 4
  store i64 %10877, i64* %PC
  %10878 = inttoptr i64 %10875 to i64*
  %10879 = load i64, i64* %10878
  store i64 %10879, i64* %RCX, align 8, !tbaa !2428
  %10880 = load i64, i64* %RSI
  %10881 = load i64, i64* %RCX
  %10882 = add i64 %10881, 20
  %10883 = load i64, i64* %PC
  %10884 = add i64 %10883, 4
  store i64 %10884, i64* %PC
  %10885 = inttoptr i64 %10882 to i32*
  %10886 = load i32, i32* %10885
  %10887 = shl i64 %10880, 32
  %10888 = ashr exact i64 %10887, 32
  %10889 = sext i32 %10886 to i64
  %10890 = mul nsw i64 %10889, %10888
  %10891 = trunc i64 %10890 to i32
  %10892 = and i64 %10890, 4294967295
  store i64 %10892, i64* %RSI, align 8, !tbaa !2428
  %10893 = shl i64 %10890, 32
  %10894 = ashr exact i64 %10893, 32
  %10895 = icmp ne i64 %10894, %10890
  %10896 = zext i1 %10895 to i8
  %10897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10896, i8* %10897, align 1, !tbaa !2432
  %10898 = and i32 %10891, 255
  %10899 = call i32 @llvm.ctpop.i32(i32 %10898) #16
  %10900 = trunc i32 %10899 to i8
  %10901 = and i8 %10900, 1
  %10902 = xor i8 %10901, 1
  %10903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10902, i8* %10903, align 1, !tbaa !2446
  %10904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10904, align 1, !tbaa !2447
  %10905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10905, align 1, !tbaa !2448
  %10906 = lshr i32 %10891, 31
  %10907 = trunc i32 %10906 to i8
  %10908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10907, i8* %10908, align 1, !tbaa !2449
  %10909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10896, i8* %10909, align 1, !tbaa !2450
  %10910 = load i64, i64* %RDX
  %10911 = load i32, i32* %ESI
  %10912 = zext i32 %10911 to i64
  %10913 = load i64, i64* %PC
  %10914 = add i64 %10913, 2
  store i64 %10914, i64* %PC
  %10915 = trunc i64 %10910 to i32
  %10916 = add i32 %10911, %10915
  %10917 = zext i32 %10916 to i64
  store i64 %10917, i64* %RDX, align 8, !tbaa !2428
  %10918 = icmp ult i32 %10916, %10915
  %10919 = icmp ult i32 %10916, %10911
  %10920 = or i1 %10918, %10919
  %10921 = zext i1 %10920 to i8
  %10922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10921, i8* %10922, align 1, !tbaa !2432
  %10923 = and i32 %10916, 255
  %10924 = call i32 @llvm.ctpop.i32(i32 %10923) #16
  %10925 = trunc i32 %10924 to i8
  %10926 = and i8 %10925, 1
  %10927 = xor i8 %10926, 1
  %10928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10927, i8* %10928, align 1, !tbaa !2446
  %10929 = xor i64 %10912, %10910
  %10930 = trunc i64 %10929 to i32
  %10931 = xor i32 %10930, %10916
  %10932 = lshr i32 %10931, 4
  %10933 = trunc i32 %10932 to i8
  %10934 = and i8 %10933, 1
  %10935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10934, i8* %10935, align 1, !tbaa !2447
  %10936 = icmp eq i32 %10916, 0
  %10937 = zext i1 %10936 to i8
  %10938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10937, i8* %10938, align 1, !tbaa !2448
  %10939 = lshr i32 %10916, 31
  %10940 = trunc i32 %10939 to i8
  %10941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10940, i8* %10941, align 1, !tbaa !2449
  %10942 = lshr i32 %10915, 31
  %10943 = lshr i32 %10911, 31
  %10944 = xor i32 %10939, %10942
  %10945 = xor i32 %10939, %10943
  %10946 = add nuw nsw i32 %10944, %10945
  %10947 = icmp eq i32 %10946, 2
  %10948 = zext i1 %10947 to i8
  %10949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10948, i8* %10949, align 1, !tbaa !2450
  %10950 = load i64, i64* %RBP
  %10951 = sub i64 %10950, 56
  %10952 = load i64, i64* %PC
  %10953 = add i64 %10952, 3
  store i64 %10953, i64* %PC
  %10954 = inttoptr i64 %10951 to i32*
  %10955 = load i32, i32* %10954
  %10956 = zext i32 %10955 to i64
  store i64 %10956, i64* %RSI, align 8, !tbaa !2428
  %10957 = load i64, i64* %RSI
  %10958 = load i64, i64* %PC
  %10959 = add i64 %10958, 3
  store i64 %10959, i64* %PC
  %10960 = trunc i64 %10957 to i32
  %10961 = sub i32 %10960, 1
  %10962 = zext i32 %10961 to i64
  store i64 %10962, i64* %RSI, align 8, !tbaa !2428
  %10963 = icmp ult i32 %10960, 1
  %10964 = zext i1 %10963 to i8
  %10965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10964, i8* %10965, align 1, !tbaa !2432
  %10966 = and i32 %10961, 255
  %10967 = call i32 @llvm.ctpop.i32(i32 %10966) #16
  %10968 = trunc i32 %10967 to i8
  %10969 = and i8 %10968, 1
  %10970 = xor i8 %10969, 1
  %10971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10970, i8* %10971, align 1, !tbaa !2446
  %10972 = xor i64 1, %10957
  %10973 = trunc i64 %10972 to i32
  %10974 = xor i32 %10973, %10961
  %10975 = lshr i32 %10974, 4
  %10976 = trunc i32 %10975 to i8
  %10977 = and i8 %10976, 1
  %10978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10977, i8* %10978, align 1, !tbaa !2447
  %10979 = icmp eq i32 %10961, 0
  %10980 = zext i1 %10979 to i8
  %10981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10980, i8* %10981, align 1, !tbaa !2448
  %10982 = lshr i32 %10961, 31
  %10983 = trunc i32 %10982 to i8
  %10984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10983, i8* %10984, align 1, !tbaa !2449
  %10985 = lshr i32 %10960, 31
  %10986 = xor i32 %10982, %10985
  %10987 = add nuw nsw i32 %10986, %10985
  %10988 = icmp eq i32 %10987, 2
  %10989 = zext i1 %10988 to i8
  %10990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10989, i8* %10990, align 1, !tbaa !2450
  %10991 = load i64, i64* %RBP
  %10992 = sub i64 %10991, 40
  %10993 = load i64, i64* %PC
  %10994 = add i64 %10993, 4
  store i64 %10994, i64* %PC
  %10995 = inttoptr i64 %10992 to i64*
  %10996 = load i64, i64* %10995
  store i64 %10996, i64* %RCX, align 8, !tbaa !2428
  %10997 = load i64, i64* %RSI
  %10998 = load i64, i64* %RCX
  %10999 = add i64 %10998, 20
  %11000 = load i64, i64* %PC
  %11001 = add i64 %11000, 4
  store i64 %11001, i64* %PC
  %11002 = inttoptr i64 %10999 to i32*
  %11003 = load i32, i32* %11002
  %11004 = shl i64 %10997, 32
  %11005 = ashr exact i64 %11004, 32
  %11006 = sext i32 %11003 to i64
  %11007 = mul nsw i64 %11006, %11005
  %11008 = trunc i64 %11007 to i32
  %11009 = and i64 %11007, 4294967295
  store i64 %11009, i64* %RSI, align 8, !tbaa !2428
  %11010 = shl i64 %11007, 32
  %11011 = ashr exact i64 %11010, 32
  %11012 = icmp ne i64 %11011, %11007
  %11013 = zext i1 %11012 to i8
  %11014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11013, i8* %11014, align 1, !tbaa !2432
  %11015 = and i32 %11008, 255
  %11016 = call i32 @llvm.ctpop.i32(i32 %11015) #16
  %11017 = trunc i32 %11016 to i8
  %11018 = and i8 %11017, 1
  %11019 = xor i8 %11018, 1
  %11020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11019, i8* %11020, align 1, !tbaa !2446
  %11021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11021, align 1, !tbaa !2447
  %11022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11022, align 1, !tbaa !2448
  %11023 = lshr i32 %11008, 31
  %11024 = trunc i32 %11023 to i8
  %11025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11024, i8* %11025, align 1, !tbaa !2449
  %11026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11013, i8* %11026, align 1, !tbaa !2450
  %11027 = load i64, i64* %RDX
  %11028 = load i32, i32* %ESI
  %11029 = zext i32 %11028 to i64
  %11030 = load i64, i64* %PC
  %11031 = add i64 %11030, 2
  store i64 %11031, i64* %PC
  %11032 = trunc i64 %11027 to i32
  %11033 = add i32 %11028, %11032
  %11034 = zext i32 %11033 to i64
  store i64 %11034, i64* %RDX, align 8, !tbaa !2428
  %11035 = icmp ult i32 %11033, %11032
  %11036 = icmp ult i32 %11033, %11028
  %11037 = or i1 %11035, %11036
  %11038 = zext i1 %11037 to i8
  %11039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11038, i8* %11039, align 1, !tbaa !2432
  %11040 = and i32 %11033, 255
  %11041 = call i32 @llvm.ctpop.i32(i32 %11040) #16
  %11042 = trunc i32 %11041 to i8
  %11043 = and i8 %11042, 1
  %11044 = xor i8 %11043, 1
  %11045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11044, i8* %11045, align 1, !tbaa !2446
  %11046 = xor i64 %11029, %11027
  %11047 = trunc i64 %11046 to i32
  %11048 = xor i32 %11047, %11033
  %11049 = lshr i32 %11048, 4
  %11050 = trunc i32 %11049 to i8
  %11051 = and i8 %11050, 1
  %11052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11051, i8* %11052, align 1, !tbaa !2447
  %11053 = icmp eq i32 %11033, 0
  %11054 = zext i1 %11053 to i8
  %11055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11054, i8* %11055, align 1, !tbaa !2448
  %11056 = lshr i32 %11033, 31
  %11057 = trunc i32 %11056 to i8
  %11058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11057, i8* %11058, align 1, !tbaa !2449
  %11059 = lshr i32 %11032, 31
  %11060 = lshr i32 %11028, 31
  %11061 = xor i32 %11056, %11059
  %11062 = xor i32 %11056, %11060
  %11063 = add nuw nsw i32 %11061, %11062
  %11064 = icmp eq i32 %11063, 2
  %11065 = zext i1 %11064 to i8
  %11066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11065, i8* %11066, align 1, !tbaa !2450
  %11067 = load i64, i64* %RDX
  %11068 = load i64, i64* %RBP
  %11069 = sub i64 %11068, 60
  %11070 = load i64, i64* %PC
  %11071 = add i64 %11070, 3
  store i64 %11071, i64* %PC
  %11072 = trunc i64 %11067 to i32
  %11073 = inttoptr i64 %11069 to i32*
  %11074 = load i32, i32* %11073
  %11075 = add i32 %11074, %11072
  %11076 = zext i32 %11075 to i64
  store i64 %11076, i64* %RDX, align 8, !tbaa !2428
  %11077 = icmp ult i32 %11075, %11072
  %11078 = icmp ult i32 %11075, %11074
  %11079 = or i1 %11077, %11078
  %11080 = zext i1 %11079 to i8
  %11081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11080, i8* %11081, align 1, !tbaa !2432
  %11082 = and i32 %11075, 255
  %11083 = call i32 @llvm.ctpop.i32(i32 %11082) #16
  %11084 = trunc i32 %11083 to i8
  %11085 = and i8 %11084, 1
  %11086 = xor i8 %11085, 1
  %11087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11086, i8* %11087, align 1, !tbaa !2446
  %11088 = xor i32 %11074, %11072
  %11089 = xor i32 %11088, %11075
  %11090 = lshr i32 %11089, 4
  %11091 = trunc i32 %11090 to i8
  %11092 = and i8 %11091, 1
  %11093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11092, i8* %11093, align 1, !tbaa !2447
  %11094 = icmp eq i32 %11075, 0
  %11095 = zext i1 %11094 to i8
  %11096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11095, i8* %11096, align 1, !tbaa !2448
  %11097 = lshr i32 %11075, 31
  %11098 = trunc i32 %11097 to i8
  %11099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11098, i8* %11099, align 1, !tbaa !2449
  %11100 = lshr i32 %11072, 31
  %11101 = lshr i32 %11074, 31
  %11102 = xor i32 %11097, %11100
  %11103 = xor i32 %11097, %11101
  %11104 = add nuw nsw i32 %11102, %11103
  %11105 = icmp eq i32 %11104, 2
  %11106 = zext i1 %11105 to i8
  %11107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11106, i8* %11107, align 1, !tbaa !2450
  %11108 = load i32, i32* %EDX
  %11109 = zext i32 %11108 to i64
  %11110 = load i64, i64* %PC
  %11111 = add i64 %11110, 3
  store i64 %11111, i64* %PC
  %11112 = shl i64 %11109, 32
  %11113 = ashr exact i64 %11112, 32
  store i64 %11113, i64* %RCX, align 8, !tbaa !2428
  %11114 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11115 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11116 = load i64, i64* %RAX
  %11117 = load i64, i64* %RCX
  %11118 = mul i64 %11117, 4
  %11119 = add i64 %11118, %11116
  %11120 = load i64, i64* %PC
  %11121 = add i64 %11120, 5
  store i64 %11121, i64* %PC
  %11122 = bitcast i8* %11115 to <2 x float>*
  %11123 = load <2 x float>, <2 x float>* %11122, align 1
  %11124 = getelementptr inbounds i8, i8* %11115, i64 8
  %11125 = bitcast i8* %11124 to <2 x i32>*
  %11126 = load <2 x i32>, <2 x i32>* %11125, align 1
  %11127 = inttoptr i64 %11119 to float*
  %11128 = load float, float* %11127
  %11129 = extractelement <2 x float> %11123, i32 0
  %11130 = fmul float %11129, %11128
  %11131 = bitcast i8* %11114 to float*
  store float %11130, float* %11131, align 1, !tbaa !2452
  %11132 = bitcast <2 x float> %11123 to <2 x i32>
  %11133 = extractelement <2 x i32> %11132, i32 1
  %11134 = getelementptr inbounds i8, i8* %11114, i64 4
  %11135 = bitcast i8* %11134 to i32*
  store i32 %11133, i32* %11135, align 1, !tbaa !2452
  %11136 = extractelement <2 x i32> %11126, i32 0
  %11137 = getelementptr inbounds i8, i8* %11114, i64 8
  %11138 = bitcast i8* %11137 to i32*
  store i32 %11136, i32* %11138, align 1, !tbaa !2452
  %11139 = extractelement <2 x i32> %11126, i32 1
  %11140 = getelementptr inbounds i8, i8* %11114, i64 12
  %11141 = bitcast i8* %11140 to i32*
  store i32 %11139, i32* %11141, align 1, !tbaa !2452
  %11142 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11143 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11144 = bitcast %union.vec128_t* %XMM1 to i8*
  %11145 = load i64, i64* %PC
  %11146 = add i64 %11145, 4
  store i64 %11146, i64* %PC
  %11147 = bitcast i8* %11143 to <2 x float>*
  %11148 = load <2 x float>, <2 x float>* %11147, align 1
  %11149 = getelementptr inbounds i8, i8* %11143, i64 8
  %11150 = bitcast i8* %11149 to <2 x i32>*
  %11151 = load <2 x i32>, <2 x i32>* %11150, align 1
  %11152 = bitcast i8* %11144 to <2 x float>*
  %11153 = load <2 x float>, <2 x float>* %11152, align 1
  %11154 = extractelement <2 x float> %11148, i32 0
  %11155 = extractelement <2 x float> %11153, i32 0
  %11156 = fadd float %11154, %11155
  %11157 = bitcast i8* %11142 to float*
  store float %11156, float* %11157, align 1, !tbaa !2452
  %11158 = bitcast <2 x float> %11148 to <2 x i32>
  %11159 = extractelement <2 x i32> %11158, i32 1
  %11160 = getelementptr inbounds i8, i8* %11142, i64 4
  %11161 = bitcast i8* %11160 to i32*
  store i32 %11159, i32* %11161, align 1, !tbaa !2452
  %11162 = extractelement <2 x i32> %11151, i32 0
  %11163 = getelementptr inbounds i8, i8* %11142, i64 8
  %11164 = bitcast i8* %11163 to i32*
  store i32 %11162, i32* %11164, align 1, !tbaa !2452
  %11165 = extractelement <2 x i32> %11151, i32 1
  %11166 = getelementptr inbounds i8, i8* %11142, i64 12
  %11167 = bitcast i8* %11166 to i32*
  store i32 %11165, i32* %11167, align 1, !tbaa !2452
  %11168 = load i64, i64* %RBP
  %11169 = sub i64 %11168, 32
  %11170 = load i64, i64* %PC
  %11171 = add i64 %11170, 4
  store i64 %11171, i64* %PC
  %11172 = inttoptr i64 %11169 to i64*
  %11173 = load i64, i64* %11172
  store i64 %11173, i64* %RAX, align 8, !tbaa !2428
  %11174 = load i64, i64* %RAX
  %11175 = load i64, i64* %PC
  %11176 = add i64 %11175, 3
  store i64 %11176, i64* %PC
  %11177 = inttoptr i64 %11174 to i64*
  %11178 = load i64, i64* %11177
  store i64 %11178, i64* %RAX, align 8, !tbaa !2428
  %11179 = load i64, i64* %RBP
  %11180 = sub i64 %11179, 32
  %11181 = load i64, i64* %PC
  %11182 = add i64 %11181, 4
  store i64 %11182, i64* %PC
  %11183 = inttoptr i64 %11180 to i64*
  %11184 = load i64, i64* %11183
  store i64 %11184, i64* %RCX, align 8, !tbaa !2428
  %11185 = load i64, i64* %RCX
  %11186 = add i64 %11185, 12
  %11187 = load i64, i64* %PC
  %11188 = add i64 %11187, 3
  store i64 %11188, i64* %PC
  %11189 = inttoptr i64 %11186 to i32*
  %11190 = load i32, i32* %11189
  %11191 = zext i32 %11190 to i64
  store i64 %11191, i64* %RDX, align 8, !tbaa !2428
  %11192 = load i64, i64* %RDX
  %11193 = load i64, i64* %PC
  %11194 = add i64 %11193, 3
  store i64 %11194, i64* %PC
  %11195 = trunc i64 %11192 to i32
  %11196 = shl i32 %11195, 1
  %11197 = icmp slt i32 %11195, 0
  %11198 = icmp slt i32 %11196, 0
  %11199 = xor i1 %11197, %11198
  %11200 = zext i32 %11196 to i64
  store i64 %11200, i64* %RDX, align 8, !tbaa !2428
  %11201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %11202 = zext i1 %11197 to i8
  store i8 %11202, i8* %11201, align 1, !tbaa !2451
  %11203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %11204 = and i32 %11196, 254
  %11205 = call i32 @llvm.ctpop.i32(i32 %11204) #16
  %11206 = trunc i32 %11205 to i8
  %11207 = and i8 %11206, 1
  %11208 = xor i8 %11207, 1
  store i8 %11208, i8* %11203, align 1, !tbaa !2451
  %11209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11209, align 1, !tbaa !2451
  %11210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11211 = icmp eq i32 %11196, 0
  %11212 = zext i1 %11211 to i8
  store i8 %11212, i8* %11210, align 1, !tbaa !2451
  %11213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11214 = lshr i32 %11196, 31
  %11215 = trunc i32 %11214 to i8
  store i8 %11215, i8* %11213, align 1, !tbaa !2451
  %11216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11217 = zext i1 %11199 to i8
  store i8 %11217, i8* %11216, align 1, !tbaa !2451
  %11218 = load i64, i64* %RBP
  %11219 = sub i64 %11218, 32
  %11220 = load i64, i64* %PC
  %11221 = add i64 %11220, 4
  store i64 %11221, i64* %PC
  %11222 = inttoptr i64 %11219 to i64*
  %11223 = load i64, i64* %11222
  store i64 %11223, i64* %RCX, align 8, !tbaa !2428
  %11224 = load i64, i64* %RDX
  %11225 = load i64, i64* %RCX
  %11226 = add i64 %11225, 16
  %11227 = load i64, i64* %PC
  %11228 = add i64 %11227, 4
  store i64 %11228, i64* %PC
  %11229 = inttoptr i64 %11226 to i32*
  %11230 = load i32, i32* %11229
  %11231 = shl i64 %11224, 32
  %11232 = ashr exact i64 %11231, 32
  %11233 = sext i32 %11230 to i64
  %11234 = mul nsw i64 %11233, %11232
  %11235 = trunc i64 %11234 to i32
  %11236 = and i64 %11234, 4294967295
  store i64 %11236, i64* %RDX, align 8, !tbaa !2428
  %11237 = shl i64 %11234, 32
  %11238 = ashr exact i64 %11237, 32
  %11239 = icmp ne i64 %11238, %11234
  %11240 = zext i1 %11239 to i8
  %11241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11240, i8* %11241, align 1, !tbaa !2432
  %11242 = and i32 %11235, 255
  %11243 = call i32 @llvm.ctpop.i32(i32 %11242) #16
  %11244 = trunc i32 %11243 to i8
  %11245 = and i8 %11244, 1
  %11246 = xor i8 %11245, 1
  %11247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11246, i8* %11247, align 1, !tbaa !2446
  %11248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11248, align 1, !tbaa !2447
  %11249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11249, align 1, !tbaa !2448
  %11250 = lshr i32 %11235, 31
  %11251 = trunc i32 %11250 to i8
  %11252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11251, i8* %11252, align 1, !tbaa !2449
  %11253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11240, i8* %11253, align 1, !tbaa !2450
  %11254 = load i64, i64* %RBP
  %11255 = sub i64 %11254, 32
  %11256 = load i64, i64* %PC
  %11257 = add i64 %11256, 4
  store i64 %11257, i64* %PC
  %11258 = inttoptr i64 %11255 to i64*
  %11259 = load i64, i64* %11258
  store i64 %11259, i64* %RCX, align 8, !tbaa !2428
  %11260 = load i64, i64* %RDX
  %11261 = load i64, i64* %RCX
  %11262 = add i64 %11261, 20
  %11263 = load i64, i64* %PC
  %11264 = add i64 %11263, 4
  store i64 %11264, i64* %PC
  %11265 = inttoptr i64 %11262 to i32*
  %11266 = load i32, i32* %11265
  %11267 = shl i64 %11260, 32
  %11268 = ashr exact i64 %11267, 32
  %11269 = sext i32 %11266 to i64
  %11270 = mul nsw i64 %11269, %11268
  %11271 = trunc i64 %11270 to i32
  %11272 = and i64 %11270, 4294967295
  store i64 %11272, i64* %RDX, align 8, !tbaa !2428
  %11273 = shl i64 %11270, 32
  %11274 = ashr exact i64 %11273, 32
  %11275 = icmp ne i64 %11274, %11270
  %11276 = zext i1 %11275 to i8
  %11277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11276, i8* %11277, align 1, !tbaa !2432
  %11278 = and i32 %11271, 255
  %11279 = call i32 @llvm.ctpop.i32(i32 %11278) #16
  %11280 = trunc i32 %11279 to i8
  %11281 = and i8 %11280, 1
  %11282 = xor i8 %11281, 1
  %11283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11282, i8* %11283, align 1, !tbaa !2446
  %11284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11284, align 1, !tbaa !2447
  %11285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11285, align 1, !tbaa !2448
  %11286 = lshr i32 %11271, 31
  %11287 = trunc i32 %11286 to i8
  %11288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11287, i8* %11288, align 1, !tbaa !2449
  %11289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11276, i8* %11289, align 1, !tbaa !2450
  %11290 = load i64, i64* %RBP
  %11291 = sub i64 %11290, 52
  %11292 = load i64, i64* %PC
  %11293 = add i64 %11292, 3
  store i64 %11293, i64* %PC
  %11294 = inttoptr i64 %11291 to i32*
  %11295 = load i32, i32* %11294
  %11296 = zext i32 %11295 to i64
  store i64 %11296, i64* %RSI, align 8, !tbaa !2428
  %11297 = load i64, i64* %RBP
  %11298 = sub i64 %11297, 32
  %11299 = load i64, i64* %PC
  %11300 = add i64 %11299, 4
  store i64 %11300, i64* %PC
  %11301 = inttoptr i64 %11298 to i64*
  %11302 = load i64, i64* %11301
  store i64 %11302, i64* %RCX, align 8, !tbaa !2428
  %11303 = load i64, i64* %RSI
  %11304 = load i64, i64* %RCX
  %11305 = add i64 %11304, 16
  %11306 = load i64, i64* %PC
  %11307 = add i64 %11306, 4
  store i64 %11307, i64* %PC
  %11308 = inttoptr i64 %11305 to i32*
  %11309 = load i32, i32* %11308
  %11310 = shl i64 %11303, 32
  %11311 = ashr exact i64 %11310, 32
  %11312 = sext i32 %11309 to i64
  %11313 = mul nsw i64 %11312, %11311
  %11314 = trunc i64 %11313 to i32
  %11315 = and i64 %11313, 4294967295
  store i64 %11315, i64* %RSI, align 8, !tbaa !2428
  %11316 = shl i64 %11313, 32
  %11317 = ashr exact i64 %11316, 32
  %11318 = icmp ne i64 %11317, %11313
  %11319 = zext i1 %11318 to i8
  %11320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11319, i8* %11320, align 1, !tbaa !2432
  %11321 = and i32 %11314, 255
  %11322 = call i32 @llvm.ctpop.i32(i32 %11321) #16
  %11323 = trunc i32 %11322 to i8
  %11324 = and i8 %11323, 1
  %11325 = xor i8 %11324, 1
  %11326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11325, i8* %11326, align 1, !tbaa !2446
  %11327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11327, align 1, !tbaa !2447
  %11328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11328, align 1, !tbaa !2448
  %11329 = lshr i32 %11314, 31
  %11330 = trunc i32 %11329 to i8
  %11331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11330, i8* %11331, align 1, !tbaa !2449
  %11332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11319, i8* %11332, align 1, !tbaa !2450
  %11333 = load i64, i64* %RBP
  %11334 = sub i64 %11333, 32
  %11335 = load i64, i64* %PC
  %11336 = add i64 %11335, 4
  store i64 %11336, i64* %PC
  %11337 = inttoptr i64 %11334 to i64*
  %11338 = load i64, i64* %11337
  store i64 %11338, i64* %RCX, align 8, !tbaa !2428
  %11339 = load i64, i64* %RSI
  %11340 = load i64, i64* %RCX
  %11341 = add i64 %11340, 20
  %11342 = load i64, i64* %PC
  %11343 = add i64 %11342, 4
  store i64 %11343, i64* %PC
  %11344 = inttoptr i64 %11341 to i32*
  %11345 = load i32, i32* %11344
  %11346 = shl i64 %11339, 32
  %11347 = ashr exact i64 %11346, 32
  %11348 = sext i32 %11345 to i64
  %11349 = mul nsw i64 %11348, %11347
  %11350 = trunc i64 %11349 to i32
  %11351 = and i64 %11349, 4294967295
  store i64 %11351, i64* %RSI, align 8, !tbaa !2428
  %11352 = shl i64 %11349, 32
  %11353 = ashr exact i64 %11352, 32
  %11354 = icmp ne i64 %11353, %11349
  %11355 = zext i1 %11354 to i8
  %11356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11355, i8* %11356, align 1, !tbaa !2432
  %11357 = and i32 %11350, 255
  %11358 = call i32 @llvm.ctpop.i32(i32 %11357) #16
  %11359 = trunc i32 %11358 to i8
  %11360 = and i8 %11359, 1
  %11361 = xor i8 %11360, 1
  %11362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11361, i8* %11362, align 1, !tbaa !2446
  %11363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11363, align 1, !tbaa !2447
  %11364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11364, align 1, !tbaa !2448
  %11365 = lshr i32 %11350, 31
  %11366 = trunc i32 %11365 to i8
  %11367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11366, i8* %11367, align 1, !tbaa !2449
  %11368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11355, i8* %11368, align 1, !tbaa !2450
  %11369 = load i64, i64* %RDX
  %11370 = load i32, i32* %ESI
  %11371 = zext i32 %11370 to i64
  %11372 = load i64, i64* %PC
  %11373 = add i64 %11372, 2
  store i64 %11373, i64* %PC
  %11374 = trunc i64 %11369 to i32
  %11375 = add i32 %11370, %11374
  %11376 = zext i32 %11375 to i64
  store i64 %11376, i64* %RDX, align 8, !tbaa !2428
  %11377 = icmp ult i32 %11375, %11374
  %11378 = icmp ult i32 %11375, %11370
  %11379 = or i1 %11377, %11378
  %11380 = zext i1 %11379 to i8
  %11381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11380, i8* %11381, align 1, !tbaa !2432
  %11382 = and i32 %11375, 255
  %11383 = call i32 @llvm.ctpop.i32(i32 %11382) #16
  %11384 = trunc i32 %11383 to i8
  %11385 = and i8 %11384, 1
  %11386 = xor i8 %11385, 1
  %11387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11386, i8* %11387, align 1, !tbaa !2446
  %11388 = xor i64 %11371, %11369
  %11389 = trunc i64 %11388 to i32
  %11390 = xor i32 %11389, %11375
  %11391 = lshr i32 %11390, 4
  %11392 = trunc i32 %11391 to i8
  %11393 = and i8 %11392, 1
  %11394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11393, i8* %11394, align 1, !tbaa !2447
  %11395 = icmp eq i32 %11375, 0
  %11396 = zext i1 %11395 to i8
  %11397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11396, i8* %11397, align 1, !tbaa !2448
  %11398 = lshr i32 %11375, 31
  %11399 = trunc i32 %11398 to i8
  %11400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11399, i8* %11400, align 1, !tbaa !2449
  %11401 = lshr i32 %11374, 31
  %11402 = lshr i32 %11370, 31
  %11403 = xor i32 %11398, %11401
  %11404 = xor i32 %11398, %11402
  %11405 = add nuw nsw i32 %11403, %11404
  %11406 = icmp eq i32 %11405, 2
  %11407 = zext i1 %11406 to i8
  %11408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11407, i8* %11408, align 1, !tbaa !2450
  %11409 = load i64, i64* %RBP
  %11410 = sub i64 %11409, 56
  %11411 = load i64, i64* %PC
  %11412 = add i64 %11411, 3
  store i64 %11412, i64* %PC
  %11413 = inttoptr i64 %11410 to i32*
  %11414 = load i32, i32* %11413
  %11415 = zext i32 %11414 to i64
  store i64 %11415, i64* %RSI, align 8, !tbaa !2428
  %11416 = load i64, i64* %RBP
  %11417 = sub i64 %11416, 32
  %11418 = load i64, i64* %PC
  %11419 = add i64 %11418, 4
  store i64 %11419, i64* %PC
  %11420 = inttoptr i64 %11417 to i64*
  %11421 = load i64, i64* %11420
  store i64 %11421, i64* %RCX, align 8, !tbaa !2428
  %11422 = load i64, i64* %RSI
  %11423 = load i64, i64* %RCX
  %11424 = add i64 %11423, 20
  %11425 = load i64, i64* %PC
  %11426 = add i64 %11425, 4
  store i64 %11426, i64* %PC
  %11427 = inttoptr i64 %11424 to i32*
  %11428 = load i32, i32* %11427
  %11429 = shl i64 %11422, 32
  %11430 = ashr exact i64 %11429, 32
  %11431 = sext i32 %11428 to i64
  %11432 = mul nsw i64 %11431, %11430
  %11433 = trunc i64 %11432 to i32
  %11434 = and i64 %11432, 4294967295
  store i64 %11434, i64* %RSI, align 8, !tbaa !2428
  %11435 = shl i64 %11432, 32
  %11436 = ashr exact i64 %11435, 32
  %11437 = icmp ne i64 %11436, %11432
  %11438 = zext i1 %11437 to i8
  %11439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11438, i8* %11439, align 1, !tbaa !2432
  %11440 = and i32 %11433, 255
  %11441 = call i32 @llvm.ctpop.i32(i32 %11440) #16
  %11442 = trunc i32 %11441 to i8
  %11443 = and i8 %11442, 1
  %11444 = xor i8 %11443, 1
  %11445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11444, i8* %11445, align 1, !tbaa !2446
  %11446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11446, align 1, !tbaa !2447
  %11447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11447, align 1, !tbaa !2448
  %11448 = lshr i32 %11433, 31
  %11449 = trunc i32 %11448 to i8
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11449, i8* %11450, align 1, !tbaa !2449
  %11451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11438, i8* %11451, align 1, !tbaa !2450
  %11452 = load i64, i64* %RDX
  %11453 = load i32, i32* %ESI
  %11454 = zext i32 %11453 to i64
  %11455 = load i64, i64* %PC
  %11456 = add i64 %11455, 2
  store i64 %11456, i64* %PC
  %11457 = trunc i64 %11452 to i32
  %11458 = add i32 %11453, %11457
  %11459 = zext i32 %11458 to i64
  store i64 %11459, i64* %RDX, align 8, !tbaa !2428
  %11460 = icmp ult i32 %11458, %11457
  %11461 = icmp ult i32 %11458, %11453
  %11462 = or i1 %11460, %11461
  %11463 = zext i1 %11462 to i8
  %11464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11463, i8* %11464, align 1, !tbaa !2432
  %11465 = and i32 %11458, 255
  %11466 = call i32 @llvm.ctpop.i32(i32 %11465) #16
  %11467 = trunc i32 %11466 to i8
  %11468 = and i8 %11467, 1
  %11469 = xor i8 %11468, 1
  %11470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11469, i8* %11470, align 1, !tbaa !2446
  %11471 = xor i64 %11454, %11452
  %11472 = trunc i64 %11471 to i32
  %11473 = xor i32 %11472, %11458
  %11474 = lshr i32 %11473, 4
  %11475 = trunc i32 %11474 to i8
  %11476 = and i8 %11475, 1
  %11477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11476, i8* %11477, align 1, !tbaa !2447
  %11478 = icmp eq i32 %11458, 0
  %11479 = zext i1 %11478 to i8
  %11480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11479, i8* %11480, align 1, !tbaa !2448
  %11481 = lshr i32 %11458, 31
  %11482 = trunc i32 %11481 to i8
  %11483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11482, i8* %11483, align 1, !tbaa !2449
  %11484 = lshr i32 %11457, 31
  %11485 = lshr i32 %11453, 31
  %11486 = xor i32 %11481, %11484
  %11487 = xor i32 %11481, %11485
  %11488 = add nuw nsw i32 %11486, %11487
  %11489 = icmp eq i32 %11488, 2
  %11490 = zext i1 %11489 to i8
  %11491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11490, i8* %11491, align 1, !tbaa !2450
  %11492 = load i64, i64* %RDX
  %11493 = load i64, i64* %RBP
  %11494 = sub i64 %11493, 60
  %11495 = load i64, i64* %PC
  %11496 = add i64 %11495, 3
  store i64 %11496, i64* %PC
  %11497 = trunc i64 %11492 to i32
  %11498 = inttoptr i64 %11494 to i32*
  %11499 = load i32, i32* %11498
  %11500 = add i32 %11499, %11497
  %11501 = zext i32 %11500 to i64
  store i64 %11501, i64* %RDX, align 8, !tbaa !2428
  %11502 = icmp ult i32 %11500, %11497
  %11503 = icmp ult i32 %11500, %11499
  %11504 = or i1 %11502, %11503
  %11505 = zext i1 %11504 to i8
  %11506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11505, i8* %11506, align 1, !tbaa !2432
  %11507 = and i32 %11500, 255
  %11508 = call i32 @llvm.ctpop.i32(i32 %11507) #16
  %11509 = trunc i32 %11508 to i8
  %11510 = and i8 %11509, 1
  %11511 = xor i8 %11510, 1
  %11512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11511, i8* %11512, align 1, !tbaa !2446
  %11513 = xor i32 %11499, %11497
  %11514 = xor i32 %11513, %11500
  %11515 = lshr i32 %11514, 4
  %11516 = trunc i32 %11515 to i8
  %11517 = and i8 %11516, 1
  %11518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11517, i8* %11518, align 1, !tbaa !2447
  %11519 = icmp eq i32 %11500, 0
  %11520 = zext i1 %11519 to i8
  %11521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11520, i8* %11521, align 1, !tbaa !2448
  %11522 = lshr i32 %11500, 31
  %11523 = trunc i32 %11522 to i8
  %11524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11523, i8* %11524, align 1, !tbaa !2449
  %11525 = lshr i32 %11497, 31
  %11526 = lshr i32 %11499, 31
  %11527 = xor i32 %11522, %11525
  %11528 = xor i32 %11522, %11526
  %11529 = add nuw nsw i32 %11527, %11528
  %11530 = icmp eq i32 %11529, 2
  %11531 = zext i1 %11530 to i8
  %11532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11531, i8* %11532, align 1, !tbaa !2450
  %11533 = load i32, i32* %EDX
  %11534 = zext i32 %11533 to i64
  %11535 = load i64, i64* %PC
  %11536 = add i64 %11535, 3
  store i64 %11536, i64* %PC
  %11537 = shl i64 %11534, 32
  %11538 = ashr exact i64 %11537, 32
  store i64 %11538, i64* %RCX, align 8, !tbaa !2428
  %11539 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11540 = load i64, i64* %RAX
  %11541 = load i64, i64* %RCX
  %11542 = mul i64 %11541, 4
  %11543 = add i64 %11542, %11540
  %11544 = load i64, i64* %PC
  %11545 = add i64 %11544, 5
  store i64 %11545, i64* %PC
  %11546 = inttoptr i64 %11543 to float*
  %11547 = load float, float* %11546
  %11548 = bitcast i8* %11539 to float*
  store float %11547, float* %11548, align 1, !tbaa !2452
  %11549 = getelementptr inbounds i8, i8* %11539, i64 4
  %11550 = bitcast i8* %11549 to float*
  store float 0.000000e+00, float* %11550, align 1, !tbaa !2452
  %11551 = getelementptr inbounds i8, i8* %11539, i64 8
  %11552 = bitcast i8* %11551 to float*
  store float 0.000000e+00, float* %11552, align 1, !tbaa !2452
  %11553 = getelementptr inbounds i8, i8* %11539, i64 12
  %11554 = bitcast i8* %11553 to float*
  store float 0.000000e+00, float* %11554, align 1, !tbaa !2452
  %11555 = load i64, i64* %RBP
  %11556 = sub i64 %11555, 40
  %11557 = load i64, i64* %PC
  %11558 = add i64 %11557, 4
  store i64 %11558, i64* %PC
  %11559 = inttoptr i64 %11556 to i64*
  %11560 = load i64, i64* %11559
  store i64 %11560, i64* %RAX, align 8, !tbaa !2428
  %11561 = load i64, i64* %RAX
  %11562 = load i64, i64* %PC
  %11563 = add i64 %11562, 3
  store i64 %11563, i64* %PC
  %11564 = inttoptr i64 %11561 to i64*
  %11565 = load i64, i64* %11564
  store i64 %11565, i64* %RAX, align 8, !tbaa !2428
  %11566 = load i64, i64* %RBP
  %11567 = sub i64 %11566, 40
  %11568 = load i64, i64* %PC
  %11569 = add i64 %11568, 4
  store i64 %11569, i64* %PC
  %11570 = inttoptr i64 %11567 to i64*
  %11571 = load i64, i64* %11570
  store i64 %11571, i64* %RCX, align 8, !tbaa !2428
  %11572 = load i64, i64* %RCX
  %11573 = add i64 %11572, 12
  %11574 = load i64, i64* %PC
  %11575 = add i64 %11574, 4
  store i64 %11575, i64* %PC
  %11576 = inttoptr i64 %11573 to i32*
  %11577 = load i32, i32* %11576
  %11578 = sext i32 %11577 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %11579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11579, align 1, !tbaa !2432
  %11580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11580, align 1, !tbaa !2446
  %11581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11581, align 1, !tbaa !2447
  %11582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11582, align 1, !tbaa !2448
  %11583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %11583, align 1, !tbaa !2449
  %11584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11584, align 1, !tbaa !2450
  %11585 = load i64, i64* %RBP
  %11586 = sub i64 %11585, 40
  %11587 = load i64, i64* %PC
  %11588 = add i64 %11587, 4
  store i64 %11588, i64* %PC
  %11589 = inttoptr i64 %11586 to i64*
  %11590 = load i64, i64* %11589
  store i64 %11590, i64* %RCX, align 8, !tbaa !2428
  %11591 = load i64, i64* %RDX
  %11592 = load i64, i64* %RCX
  %11593 = add i64 %11592, 16
  %11594 = load i64, i64* %PC
  %11595 = add i64 %11594, 4
  store i64 %11595, i64* %PC
  %11596 = inttoptr i64 %11593 to i32*
  %11597 = load i32, i32* %11596
  %11598 = shl i64 %11591, 32
  %11599 = ashr exact i64 %11598, 32
  %11600 = sext i32 %11597 to i64
  %11601 = mul nsw i64 %11600, %11599
  %11602 = trunc i64 %11601 to i32
  %11603 = and i64 %11601, 4294967295
  store i64 %11603, i64* %RDX, align 8, !tbaa !2428
  %11604 = shl i64 %11601, 32
  %11605 = ashr exact i64 %11604, 32
  %11606 = icmp ne i64 %11605, %11601
  %11607 = zext i1 %11606 to i8
  %11608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11607, i8* %11608, align 1, !tbaa !2432
  %11609 = and i32 %11602, 255
  %11610 = call i32 @llvm.ctpop.i32(i32 %11609) #16
  %11611 = trunc i32 %11610 to i8
  %11612 = and i8 %11611, 1
  %11613 = xor i8 %11612, 1
  %11614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11613, i8* %11614, align 1, !tbaa !2446
  %11615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11615, align 1, !tbaa !2447
  %11616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11616, align 1, !tbaa !2448
  %11617 = lshr i32 %11602, 31
  %11618 = trunc i32 %11617 to i8
  %11619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11618, i8* %11619, align 1, !tbaa !2449
  %11620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11607, i8* %11620, align 1, !tbaa !2450
  %11621 = load i64, i64* %RBP
  %11622 = sub i64 %11621, 40
  %11623 = load i64, i64* %PC
  %11624 = add i64 %11623, 4
  store i64 %11624, i64* %PC
  %11625 = inttoptr i64 %11622 to i64*
  %11626 = load i64, i64* %11625
  store i64 %11626, i64* %RCX, align 8, !tbaa !2428
  %11627 = load i64, i64* %RDX
  %11628 = load i64, i64* %RCX
  %11629 = add i64 %11628, 20
  %11630 = load i64, i64* %PC
  %11631 = add i64 %11630, 4
  store i64 %11631, i64* %PC
  %11632 = inttoptr i64 %11629 to i32*
  %11633 = load i32, i32* %11632
  %11634 = shl i64 %11627, 32
  %11635 = ashr exact i64 %11634, 32
  %11636 = sext i32 %11633 to i64
  %11637 = mul nsw i64 %11636, %11635
  %11638 = trunc i64 %11637 to i32
  %11639 = and i64 %11637, 4294967295
  store i64 %11639, i64* %RDX, align 8, !tbaa !2428
  %11640 = shl i64 %11637, 32
  %11641 = ashr exact i64 %11640, 32
  %11642 = icmp ne i64 %11641, %11637
  %11643 = zext i1 %11642 to i8
  %11644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11643, i8* %11644, align 1, !tbaa !2432
  %11645 = and i32 %11638, 255
  %11646 = call i32 @llvm.ctpop.i32(i32 %11645) #16
  %11647 = trunc i32 %11646 to i8
  %11648 = and i8 %11647, 1
  %11649 = xor i8 %11648, 1
  %11650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11649, i8* %11650, align 1, !tbaa !2446
  %11651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11651, align 1, !tbaa !2447
  %11652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11652, align 1, !tbaa !2448
  %11653 = lshr i32 %11638, 31
  %11654 = trunc i32 %11653 to i8
  %11655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11654, i8* %11655, align 1, !tbaa !2449
  %11656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11643, i8* %11656, align 1, !tbaa !2450
  %11657 = load i64, i64* %RBP
  %11658 = sub i64 %11657, 52
  %11659 = load i64, i64* %PC
  %11660 = add i64 %11659, 3
  store i64 %11660, i64* %PC
  %11661 = inttoptr i64 %11658 to i32*
  %11662 = load i32, i32* %11661
  %11663 = zext i32 %11662 to i64
  store i64 %11663, i64* %RSI, align 8, !tbaa !2428
  %11664 = load i64, i64* %RBP
  %11665 = sub i64 %11664, 40
  %11666 = load i64, i64* %PC
  %11667 = add i64 %11666, 4
  store i64 %11667, i64* %PC
  %11668 = inttoptr i64 %11665 to i64*
  %11669 = load i64, i64* %11668
  store i64 %11669, i64* %RCX, align 8, !tbaa !2428
  %11670 = load i64, i64* %RSI
  %11671 = load i64, i64* %RCX
  %11672 = add i64 %11671, 16
  %11673 = load i64, i64* %PC
  %11674 = add i64 %11673, 4
  store i64 %11674, i64* %PC
  %11675 = inttoptr i64 %11672 to i32*
  %11676 = load i32, i32* %11675
  %11677 = shl i64 %11670, 32
  %11678 = ashr exact i64 %11677, 32
  %11679 = sext i32 %11676 to i64
  %11680 = mul nsw i64 %11679, %11678
  %11681 = trunc i64 %11680 to i32
  %11682 = and i64 %11680, 4294967295
  store i64 %11682, i64* %RSI, align 8, !tbaa !2428
  %11683 = shl i64 %11680, 32
  %11684 = ashr exact i64 %11683, 32
  %11685 = icmp ne i64 %11684, %11680
  %11686 = zext i1 %11685 to i8
  %11687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11686, i8* %11687, align 1, !tbaa !2432
  %11688 = and i32 %11681, 255
  %11689 = call i32 @llvm.ctpop.i32(i32 %11688) #16
  %11690 = trunc i32 %11689 to i8
  %11691 = and i8 %11690, 1
  %11692 = xor i8 %11691, 1
  %11693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11692, i8* %11693, align 1, !tbaa !2446
  %11694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11694, align 1, !tbaa !2447
  %11695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11695, align 1, !tbaa !2448
  %11696 = lshr i32 %11681, 31
  %11697 = trunc i32 %11696 to i8
  %11698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11697, i8* %11698, align 1, !tbaa !2449
  %11699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11686, i8* %11699, align 1, !tbaa !2450
  %11700 = load i64, i64* %RBP
  %11701 = sub i64 %11700, 40
  %11702 = load i64, i64* %PC
  %11703 = add i64 %11702, 4
  store i64 %11703, i64* %PC
  %11704 = inttoptr i64 %11701 to i64*
  %11705 = load i64, i64* %11704
  store i64 %11705, i64* %RCX, align 8, !tbaa !2428
  %11706 = load i64, i64* %RSI
  %11707 = load i64, i64* %RCX
  %11708 = add i64 %11707, 20
  %11709 = load i64, i64* %PC
  %11710 = add i64 %11709, 4
  store i64 %11710, i64* %PC
  %11711 = inttoptr i64 %11708 to i32*
  %11712 = load i32, i32* %11711
  %11713 = shl i64 %11706, 32
  %11714 = ashr exact i64 %11713, 32
  %11715 = sext i32 %11712 to i64
  %11716 = mul nsw i64 %11715, %11714
  %11717 = trunc i64 %11716 to i32
  %11718 = and i64 %11716, 4294967295
  store i64 %11718, i64* %RSI, align 8, !tbaa !2428
  %11719 = shl i64 %11716, 32
  %11720 = ashr exact i64 %11719, 32
  %11721 = icmp ne i64 %11720, %11716
  %11722 = zext i1 %11721 to i8
  %11723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11722, i8* %11723, align 1, !tbaa !2432
  %11724 = and i32 %11717, 255
  %11725 = call i32 @llvm.ctpop.i32(i32 %11724) #16
  %11726 = trunc i32 %11725 to i8
  %11727 = and i8 %11726, 1
  %11728 = xor i8 %11727, 1
  %11729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11728, i8* %11729, align 1, !tbaa !2446
  %11730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11730, align 1, !tbaa !2447
  %11731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11731, align 1, !tbaa !2448
  %11732 = lshr i32 %11717, 31
  %11733 = trunc i32 %11732 to i8
  %11734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11733, i8* %11734, align 1, !tbaa !2449
  %11735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11722, i8* %11735, align 1, !tbaa !2450
  %11736 = load i64, i64* %RDX
  %11737 = load i32, i32* %ESI
  %11738 = zext i32 %11737 to i64
  %11739 = load i64, i64* %PC
  %11740 = add i64 %11739, 2
  store i64 %11740, i64* %PC
  %11741 = trunc i64 %11736 to i32
  %11742 = add i32 %11737, %11741
  %11743 = zext i32 %11742 to i64
  store i64 %11743, i64* %RDX, align 8, !tbaa !2428
  %11744 = icmp ult i32 %11742, %11741
  %11745 = icmp ult i32 %11742, %11737
  %11746 = or i1 %11744, %11745
  %11747 = zext i1 %11746 to i8
  %11748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11747, i8* %11748, align 1, !tbaa !2432
  %11749 = and i32 %11742, 255
  %11750 = call i32 @llvm.ctpop.i32(i32 %11749) #16
  %11751 = trunc i32 %11750 to i8
  %11752 = and i8 %11751, 1
  %11753 = xor i8 %11752, 1
  %11754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11753, i8* %11754, align 1, !tbaa !2446
  %11755 = xor i64 %11738, %11736
  %11756 = trunc i64 %11755 to i32
  %11757 = xor i32 %11756, %11742
  %11758 = lshr i32 %11757, 4
  %11759 = trunc i32 %11758 to i8
  %11760 = and i8 %11759, 1
  %11761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11760, i8* %11761, align 1, !tbaa !2447
  %11762 = icmp eq i32 %11742, 0
  %11763 = zext i1 %11762 to i8
  %11764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11763, i8* %11764, align 1, !tbaa !2448
  %11765 = lshr i32 %11742, 31
  %11766 = trunc i32 %11765 to i8
  %11767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11766, i8* %11767, align 1, !tbaa !2449
  %11768 = lshr i32 %11741, 31
  %11769 = lshr i32 %11737, 31
  %11770 = xor i32 %11765, %11768
  %11771 = xor i32 %11765, %11769
  %11772 = add nuw nsw i32 %11770, %11771
  %11773 = icmp eq i32 %11772, 2
  %11774 = zext i1 %11773 to i8
  %11775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11774, i8* %11775, align 1, !tbaa !2450
  %11776 = load i64, i64* %RBP
  %11777 = sub i64 %11776, 56
  %11778 = load i64, i64* %PC
  %11779 = add i64 %11778, 3
  store i64 %11779, i64* %PC
  %11780 = inttoptr i64 %11777 to i32*
  %11781 = load i32, i32* %11780
  %11782 = zext i32 %11781 to i64
  store i64 %11782, i64* %RSI, align 8, !tbaa !2428
  %11783 = load i64, i64* %RBP
  %11784 = sub i64 %11783, 40
  %11785 = load i64, i64* %PC
  %11786 = add i64 %11785, 4
  store i64 %11786, i64* %PC
  %11787 = inttoptr i64 %11784 to i64*
  %11788 = load i64, i64* %11787
  store i64 %11788, i64* %RCX, align 8, !tbaa !2428
  %11789 = load i64, i64* %RSI
  %11790 = load i64, i64* %RCX
  %11791 = add i64 %11790, 20
  %11792 = load i64, i64* %PC
  %11793 = add i64 %11792, 4
  store i64 %11793, i64* %PC
  %11794 = inttoptr i64 %11791 to i32*
  %11795 = load i32, i32* %11794
  %11796 = shl i64 %11789, 32
  %11797 = ashr exact i64 %11796, 32
  %11798 = sext i32 %11795 to i64
  %11799 = mul nsw i64 %11798, %11797
  %11800 = trunc i64 %11799 to i32
  %11801 = and i64 %11799, 4294967295
  store i64 %11801, i64* %RSI, align 8, !tbaa !2428
  %11802 = shl i64 %11799, 32
  %11803 = ashr exact i64 %11802, 32
  %11804 = icmp ne i64 %11803, %11799
  %11805 = zext i1 %11804 to i8
  %11806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11805, i8* %11806, align 1, !tbaa !2432
  %11807 = and i32 %11800, 255
  %11808 = call i32 @llvm.ctpop.i32(i32 %11807) #16
  %11809 = trunc i32 %11808 to i8
  %11810 = and i8 %11809, 1
  %11811 = xor i8 %11810, 1
  %11812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11811, i8* %11812, align 1, !tbaa !2446
  %11813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11813, align 1, !tbaa !2447
  %11814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11814, align 1, !tbaa !2448
  %11815 = lshr i32 %11800, 31
  %11816 = trunc i32 %11815 to i8
  %11817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11816, i8* %11817, align 1, !tbaa !2449
  %11818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11805, i8* %11818, align 1, !tbaa !2450
  %11819 = load i64, i64* %RDX
  %11820 = load i32, i32* %ESI
  %11821 = zext i32 %11820 to i64
  %11822 = load i64, i64* %PC
  %11823 = add i64 %11822, 2
  store i64 %11823, i64* %PC
  %11824 = trunc i64 %11819 to i32
  %11825 = add i32 %11820, %11824
  %11826 = zext i32 %11825 to i64
  store i64 %11826, i64* %RDX, align 8, !tbaa !2428
  %11827 = icmp ult i32 %11825, %11824
  %11828 = icmp ult i32 %11825, %11820
  %11829 = or i1 %11827, %11828
  %11830 = zext i1 %11829 to i8
  %11831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11830, i8* %11831, align 1, !tbaa !2432
  %11832 = and i32 %11825, 255
  %11833 = call i32 @llvm.ctpop.i32(i32 %11832) #16
  %11834 = trunc i32 %11833 to i8
  %11835 = and i8 %11834, 1
  %11836 = xor i8 %11835, 1
  %11837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11836, i8* %11837, align 1, !tbaa !2446
  %11838 = xor i64 %11821, %11819
  %11839 = trunc i64 %11838 to i32
  %11840 = xor i32 %11839, %11825
  %11841 = lshr i32 %11840, 4
  %11842 = trunc i32 %11841 to i8
  %11843 = and i8 %11842, 1
  %11844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11843, i8* %11844, align 1, !tbaa !2447
  %11845 = icmp eq i32 %11825, 0
  %11846 = zext i1 %11845 to i8
  %11847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11846, i8* %11847, align 1, !tbaa !2448
  %11848 = lshr i32 %11825, 31
  %11849 = trunc i32 %11848 to i8
  %11850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11849, i8* %11850, align 1, !tbaa !2449
  %11851 = lshr i32 %11824, 31
  %11852 = lshr i32 %11820, 31
  %11853 = xor i32 %11848, %11851
  %11854 = xor i32 %11848, %11852
  %11855 = add nuw nsw i32 %11853, %11854
  %11856 = icmp eq i32 %11855, 2
  %11857 = zext i1 %11856 to i8
  %11858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11857, i8* %11858, align 1, !tbaa !2450
  %11859 = load i64, i64* %RBP
  %11860 = sub i64 %11859, 60
  %11861 = load i64, i64* %PC
  %11862 = add i64 %11861, 3
  store i64 %11862, i64* %PC
  %11863 = inttoptr i64 %11860 to i32*
  %11864 = load i32, i32* %11863
  %11865 = zext i32 %11864 to i64
  store i64 %11865, i64* %RSI, align 8, !tbaa !2428
  %11866 = load i64, i64* %RSI
  %11867 = load i64, i64* %PC
  %11868 = add i64 %11867, 3
  store i64 %11868, i64* %PC
  %11869 = trunc i64 %11866 to i32
  %11870 = sub i32 %11869, 1
  %11871 = zext i32 %11870 to i64
  store i64 %11871, i64* %RSI, align 8, !tbaa !2428
  %11872 = icmp ult i32 %11869, 1
  %11873 = zext i1 %11872 to i8
  %11874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11873, i8* %11874, align 1, !tbaa !2432
  %11875 = and i32 %11870, 255
  %11876 = call i32 @llvm.ctpop.i32(i32 %11875) #16
  %11877 = trunc i32 %11876 to i8
  %11878 = and i8 %11877, 1
  %11879 = xor i8 %11878, 1
  %11880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11879, i8* %11880, align 1, !tbaa !2446
  %11881 = xor i64 1, %11866
  %11882 = trunc i64 %11881 to i32
  %11883 = xor i32 %11882, %11870
  %11884 = lshr i32 %11883, 4
  %11885 = trunc i32 %11884 to i8
  %11886 = and i8 %11885, 1
  %11887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11886, i8* %11887, align 1, !tbaa !2447
  %11888 = icmp eq i32 %11870, 0
  %11889 = zext i1 %11888 to i8
  %11890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11889, i8* %11890, align 1, !tbaa !2448
  %11891 = lshr i32 %11870, 31
  %11892 = trunc i32 %11891 to i8
  %11893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11892, i8* %11893, align 1, !tbaa !2449
  %11894 = lshr i32 %11869, 31
  %11895 = xor i32 %11891, %11894
  %11896 = add nuw nsw i32 %11895, %11894
  %11897 = icmp eq i32 %11896, 2
  %11898 = zext i1 %11897 to i8
  %11899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11898, i8* %11899, align 1, !tbaa !2450
  %11900 = load i64, i64* %RDX
  %11901 = load i32, i32* %ESI
  %11902 = zext i32 %11901 to i64
  %11903 = load i64, i64* %PC
  %11904 = add i64 %11903, 2
  store i64 %11904, i64* %PC
  %11905 = trunc i64 %11900 to i32
  %11906 = add i32 %11901, %11905
  %11907 = zext i32 %11906 to i64
  store i64 %11907, i64* %RDX, align 8, !tbaa !2428
  %11908 = icmp ult i32 %11906, %11905
  %11909 = icmp ult i32 %11906, %11901
  %11910 = or i1 %11908, %11909
  %11911 = zext i1 %11910 to i8
  %11912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11911, i8* %11912, align 1, !tbaa !2432
  %11913 = and i32 %11906, 255
  %11914 = call i32 @llvm.ctpop.i32(i32 %11913) #16
  %11915 = trunc i32 %11914 to i8
  %11916 = and i8 %11915, 1
  %11917 = xor i8 %11916, 1
  %11918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11917, i8* %11918, align 1, !tbaa !2446
  %11919 = xor i64 %11902, %11900
  %11920 = trunc i64 %11919 to i32
  %11921 = xor i32 %11920, %11906
  %11922 = lshr i32 %11921, 4
  %11923 = trunc i32 %11922 to i8
  %11924 = and i8 %11923, 1
  %11925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11924, i8* %11925, align 1, !tbaa !2447
  %11926 = icmp eq i32 %11906, 0
  %11927 = zext i1 %11926 to i8
  %11928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11927, i8* %11928, align 1, !tbaa !2448
  %11929 = lshr i32 %11906, 31
  %11930 = trunc i32 %11929 to i8
  %11931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11930, i8* %11931, align 1, !tbaa !2449
  %11932 = lshr i32 %11905, 31
  %11933 = lshr i32 %11901, 31
  %11934 = xor i32 %11929, %11932
  %11935 = xor i32 %11929, %11933
  %11936 = add nuw nsw i32 %11934, %11935
  %11937 = icmp eq i32 %11936, 2
  %11938 = zext i1 %11937 to i8
  %11939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11938, i8* %11939, align 1, !tbaa !2450
  %11940 = load i32, i32* %EDX
  %11941 = zext i32 %11940 to i64
  %11942 = load i64, i64* %PC
  %11943 = add i64 %11942, 3
  store i64 %11943, i64* %PC
  %11944 = shl i64 %11941, 32
  %11945 = ashr exact i64 %11944, 32
  store i64 %11945, i64* %RCX, align 8, !tbaa !2428
  %11946 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11947 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11948 = load i64, i64* %RAX
  %11949 = load i64, i64* %RCX
  %11950 = mul i64 %11949, 4
  %11951 = add i64 %11950, %11948
  %11952 = load i64, i64* %PC
  %11953 = add i64 %11952, 5
  store i64 %11953, i64* %PC
  %11954 = bitcast i8* %11947 to <2 x float>*
  %11955 = load <2 x float>, <2 x float>* %11954, align 1
  %11956 = getelementptr inbounds i8, i8* %11947, i64 8
  %11957 = bitcast i8* %11956 to <2 x i32>*
  %11958 = load <2 x i32>, <2 x i32>* %11957, align 1
  %11959 = inttoptr i64 %11951 to float*
  %11960 = load float, float* %11959
  %11961 = extractelement <2 x float> %11955, i32 0
  %11962 = fmul float %11961, %11960
  %11963 = bitcast i8* %11946 to float*
  store float %11962, float* %11963, align 1, !tbaa !2452
  %11964 = bitcast <2 x float> %11955 to <2 x i32>
  %11965 = extractelement <2 x i32> %11964, i32 1
  %11966 = getelementptr inbounds i8, i8* %11946, i64 4
  %11967 = bitcast i8* %11966 to i32*
  store i32 %11965, i32* %11967, align 1, !tbaa !2452
  %11968 = extractelement <2 x i32> %11958, i32 0
  %11969 = getelementptr inbounds i8, i8* %11946, i64 8
  %11970 = bitcast i8* %11969 to i32*
  store i32 %11968, i32* %11970, align 1, !tbaa !2452
  %11971 = extractelement <2 x i32> %11958, i32 1
  %11972 = getelementptr inbounds i8, i8* %11946, i64 12
  %11973 = bitcast i8* %11972 to i32*
  store i32 %11971, i32* %11973, align 1, !tbaa !2452
  %11974 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11975 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11976 = bitcast %union.vec128_t* %XMM1 to i8*
  %11977 = load i64, i64* %PC
  %11978 = add i64 %11977, 4
  store i64 %11978, i64* %PC
  %11979 = bitcast i8* %11975 to <2 x float>*
  %11980 = load <2 x float>, <2 x float>* %11979, align 1
  %11981 = getelementptr inbounds i8, i8* %11975, i64 8
  %11982 = bitcast i8* %11981 to <2 x i32>*
  %11983 = load <2 x i32>, <2 x i32>* %11982, align 1
  %11984 = bitcast i8* %11976 to <2 x float>*
  %11985 = load <2 x float>, <2 x float>* %11984, align 1
  %11986 = extractelement <2 x float> %11980, i32 0
  %11987 = extractelement <2 x float> %11985, i32 0
  %11988 = fadd float %11986, %11987
  %11989 = bitcast i8* %11974 to float*
  store float %11988, float* %11989, align 1, !tbaa !2452
  %11990 = bitcast <2 x float> %11980 to <2 x i32>
  %11991 = extractelement <2 x i32> %11990, i32 1
  %11992 = getelementptr inbounds i8, i8* %11974, i64 4
  %11993 = bitcast i8* %11992 to i32*
  store i32 %11991, i32* %11993, align 1, !tbaa !2452
  %11994 = extractelement <2 x i32> %11983, i32 0
  %11995 = getelementptr inbounds i8, i8* %11974, i64 8
  %11996 = bitcast i8* %11995 to i32*
  store i32 %11994, i32* %11996, align 1, !tbaa !2452
  %11997 = extractelement <2 x i32> %11983, i32 1
  %11998 = getelementptr inbounds i8, i8* %11974, i64 12
  %11999 = bitcast i8* %11998 to i32*
  store i32 %11997, i32* %11999, align 1, !tbaa !2452
  %12000 = load i64, i64* %RBP
  %12001 = add i64 %12000, 16
  %12002 = load i64, i64* %PC
  %12003 = add i64 %12002, 4
  store i64 %12003, i64* %PC
  %12004 = inttoptr i64 %12001 to i64*
  %12005 = load i64, i64* %12004
  store i64 %12005, i64* %RAX, align 8, !tbaa !2428
  %12006 = load i64, i64* %RAX
  %12007 = load i64, i64* %PC
  %12008 = add i64 %12007, 3
  store i64 %12008, i64* %PC
  %12009 = inttoptr i64 %12006 to i64*
  %12010 = load i64, i64* %12009
  store i64 %12010, i64* %RAX, align 8, !tbaa !2428
  %12011 = load i64, i64* %RBP
  %12012 = add i64 %12011, 16
  %12013 = load i64, i64* %PC
  %12014 = add i64 %12013, 4
  store i64 %12014, i64* %PC
  %12015 = inttoptr i64 %12012 to i64*
  %12016 = load i64, i64* %12015
  store i64 %12016, i64* %RCX, align 8, !tbaa !2428
  %12017 = load i64, i64* %RCX
  %12018 = add i64 %12017, 12
  %12019 = load i64, i64* %PC
  %12020 = add i64 %12019, 4
  store i64 %12020, i64* %PC
  %12021 = inttoptr i64 %12018 to i32*
  %12022 = load i32, i32* %12021
  %12023 = sext i32 %12022 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %12024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12024, align 1, !tbaa !2432
  %12025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12025, align 1, !tbaa !2446
  %12026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12026, align 1, !tbaa !2447
  %12027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12027, align 1, !tbaa !2448
  %12028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12028, align 1, !tbaa !2449
  %12029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12029, align 1, !tbaa !2450
  %12030 = load i64, i64* %RBP
  %12031 = add i64 %12030, 16
  %12032 = load i64, i64* %PC
  %12033 = add i64 %12032, 4
  store i64 %12033, i64* %PC
  %12034 = inttoptr i64 %12031 to i64*
  %12035 = load i64, i64* %12034
  store i64 %12035, i64* %RCX, align 8, !tbaa !2428
  %12036 = load i64, i64* %RDX
  %12037 = load i64, i64* %RCX
  %12038 = add i64 %12037, 16
  %12039 = load i64, i64* %PC
  %12040 = add i64 %12039, 4
  store i64 %12040, i64* %PC
  %12041 = inttoptr i64 %12038 to i32*
  %12042 = load i32, i32* %12041
  %12043 = shl i64 %12036, 32
  %12044 = ashr exact i64 %12043, 32
  %12045 = sext i32 %12042 to i64
  %12046 = mul nsw i64 %12045, %12044
  %12047 = trunc i64 %12046 to i32
  %12048 = and i64 %12046, 4294967295
  store i64 %12048, i64* %RDX, align 8, !tbaa !2428
  %12049 = shl i64 %12046, 32
  %12050 = ashr exact i64 %12049, 32
  %12051 = icmp ne i64 %12050, %12046
  %12052 = zext i1 %12051 to i8
  %12053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12052, i8* %12053, align 1, !tbaa !2432
  %12054 = and i32 %12047, 255
  %12055 = call i32 @llvm.ctpop.i32(i32 %12054) #16
  %12056 = trunc i32 %12055 to i8
  %12057 = and i8 %12056, 1
  %12058 = xor i8 %12057, 1
  %12059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12058, i8* %12059, align 1, !tbaa !2446
  %12060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12060, align 1, !tbaa !2447
  %12061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12061, align 1, !tbaa !2448
  %12062 = lshr i32 %12047, 31
  %12063 = trunc i32 %12062 to i8
  %12064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12063, i8* %12064, align 1, !tbaa !2449
  %12065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12052, i8* %12065, align 1, !tbaa !2450
  %12066 = load i64, i64* %RBP
  %12067 = add i64 %12066, 16
  %12068 = load i64, i64* %PC
  %12069 = add i64 %12068, 4
  store i64 %12069, i64* %PC
  %12070 = inttoptr i64 %12067 to i64*
  %12071 = load i64, i64* %12070
  store i64 %12071, i64* %RCX, align 8, !tbaa !2428
  %12072 = load i64, i64* %RDX
  %12073 = load i64, i64* %RCX
  %12074 = add i64 %12073, 20
  %12075 = load i64, i64* %PC
  %12076 = add i64 %12075, 4
  store i64 %12076, i64* %PC
  %12077 = inttoptr i64 %12074 to i32*
  %12078 = load i32, i32* %12077
  %12079 = shl i64 %12072, 32
  %12080 = ashr exact i64 %12079, 32
  %12081 = sext i32 %12078 to i64
  %12082 = mul nsw i64 %12081, %12080
  %12083 = trunc i64 %12082 to i32
  %12084 = and i64 %12082, 4294967295
  store i64 %12084, i64* %RDX, align 8, !tbaa !2428
  %12085 = shl i64 %12082, 32
  %12086 = ashr exact i64 %12085, 32
  %12087 = icmp ne i64 %12086, %12082
  %12088 = zext i1 %12087 to i8
  %12089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12088, i8* %12089, align 1, !tbaa !2432
  %12090 = and i32 %12083, 255
  %12091 = call i32 @llvm.ctpop.i32(i32 %12090) #16
  %12092 = trunc i32 %12091 to i8
  %12093 = and i8 %12092, 1
  %12094 = xor i8 %12093, 1
  %12095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12094, i8* %12095, align 1, !tbaa !2446
  %12096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12096, align 1, !tbaa !2447
  %12097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12097, align 1, !tbaa !2448
  %12098 = lshr i32 %12083, 31
  %12099 = trunc i32 %12098 to i8
  %12100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12099, i8* %12100, align 1, !tbaa !2449
  %12101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12088, i8* %12101, align 1, !tbaa !2450
  %12102 = load i64, i64* %RBP
  %12103 = sub i64 %12102, 52
  %12104 = load i64, i64* %PC
  %12105 = add i64 %12104, 3
  store i64 %12105, i64* %PC
  %12106 = inttoptr i64 %12103 to i32*
  %12107 = load i32, i32* %12106
  %12108 = zext i32 %12107 to i64
  store i64 %12108, i64* %RSI, align 8, !tbaa !2428
  %12109 = load i64, i64* %RBP
  %12110 = add i64 %12109, 16
  %12111 = load i64, i64* %PC
  %12112 = add i64 %12111, 4
  store i64 %12112, i64* %PC
  %12113 = inttoptr i64 %12110 to i64*
  %12114 = load i64, i64* %12113
  store i64 %12114, i64* %RCX, align 8, !tbaa !2428
  %12115 = load i64, i64* %RSI
  %12116 = load i64, i64* %RCX
  %12117 = add i64 %12116, 16
  %12118 = load i64, i64* %PC
  %12119 = add i64 %12118, 4
  store i64 %12119, i64* %PC
  %12120 = inttoptr i64 %12117 to i32*
  %12121 = load i32, i32* %12120
  %12122 = shl i64 %12115, 32
  %12123 = ashr exact i64 %12122, 32
  %12124 = sext i32 %12121 to i64
  %12125 = mul nsw i64 %12124, %12123
  %12126 = trunc i64 %12125 to i32
  %12127 = and i64 %12125, 4294967295
  store i64 %12127, i64* %RSI, align 8, !tbaa !2428
  %12128 = shl i64 %12125, 32
  %12129 = ashr exact i64 %12128, 32
  %12130 = icmp ne i64 %12129, %12125
  %12131 = zext i1 %12130 to i8
  %12132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12131, i8* %12132, align 1, !tbaa !2432
  %12133 = and i32 %12126, 255
  %12134 = call i32 @llvm.ctpop.i32(i32 %12133) #16
  %12135 = trunc i32 %12134 to i8
  %12136 = and i8 %12135, 1
  %12137 = xor i8 %12136, 1
  %12138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12137, i8* %12138, align 1, !tbaa !2446
  %12139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12139, align 1, !tbaa !2447
  %12140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12140, align 1, !tbaa !2448
  %12141 = lshr i32 %12126, 31
  %12142 = trunc i32 %12141 to i8
  %12143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12142, i8* %12143, align 1, !tbaa !2449
  %12144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12131, i8* %12144, align 1, !tbaa !2450
  %12145 = load i64, i64* %RBP
  %12146 = add i64 %12145, 16
  %12147 = load i64, i64* %PC
  %12148 = add i64 %12147, 4
  store i64 %12148, i64* %PC
  %12149 = inttoptr i64 %12146 to i64*
  %12150 = load i64, i64* %12149
  store i64 %12150, i64* %RCX, align 8, !tbaa !2428
  %12151 = load i64, i64* %RSI
  %12152 = load i64, i64* %RCX
  %12153 = add i64 %12152, 20
  %12154 = load i64, i64* %PC
  %12155 = add i64 %12154, 4
  store i64 %12155, i64* %PC
  %12156 = inttoptr i64 %12153 to i32*
  %12157 = load i32, i32* %12156
  %12158 = shl i64 %12151, 32
  %12159 = ashr exact i64 %12158, 32
  %12160 = sext i32 %12157 to i64
  %12161 = mul nsw i64 %12160, %12159
  %12162 = trunc i64 %12161 to i32
  %12163 = and i64 %12161, 4294967295
  store i64 %12163, i64* %RSI, align 8, !tbaa !2428
  %12164 = shl i64 %12161, 32
  %12165 = ashr exact i64 %12164, 32
  %12166 = icmp ne i64 %12165, %12161
  %12167 = zext i1 %12166 to i8
  %12168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12167, i8* %12168, align 1, !tbaa !2432
  %12169 = and i32 %12162, 255
  %12170 = call i32 @llvm.ctpop.i32(i32 %12169) #16
  %12171 = trunc i32 %12170 to i8
  %12172 = and i8 %12171, 1
  %12173 = xor i8 %12172, 1
  %12174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12173, i8* %12174, align 1, !tbaa !2446
  %12175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12175, align 1, !tbaa !2447
  %12176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12176, align 1, !tbaa !2448
  %12177 = lshr i32 %12162, 31
  %12178 = trunc i32 %12177 to i8
  %12179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12178, i8* %12179, align 1, !tbaa !2449
  %12180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12167, i8* %12180, align 1, !tbaa !2450
  %12181 = load i64, i64* %RDX
  %12182 = load i32, i32* %ESI
  %12183 = zext i32 %12182 to i64
  %12184 = load i64, i64* %PC
  %12185 = add i64 %12184, 2
  store i64 %12185, i64* %PC
  %12186 = trunc i64 %12181 to i32
  %12187 = add i32 %12182, %12186
  %12188 = zext i32 %12187 to i64
  store i64 %12188, i64* %RDX, align 8, !tbaa !2428
  %12189 = icmp ult i32 %12187, %12186
  %12190 = icmp ult i32 %12187, %12182
  %12191 = or i1 %12189, %12190
  %12192 = zext i1 %12191 to i8
  %12193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12192, i8* %12193, align 1, !tbaa !2432
  %12194 = and i32 %12187, 255
  %12195 = call i32 @llvm.ctpop.i32(i32 %12194) #16
  %12196 = trunc i32 %12195 to i8
  %12197 = and i8 %12196, 1
  %12198 = xor i8 %12197, 1
  %12199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12198, i8* %12199, align 1, !tbaa !2446
  %12200 = xor i64 %12183, %12181
  %12201 = trunc i64 %12200 to i32
  %12202 = xor i32 %12201, %12187
  %12203 = lshr i32 %12202, 4
  %12204 = trunc i32 %12203 to i8
  %12205 = and i8 %12204, 1
  %12206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12205, i8* %12206, align 1, !tbaa !2447
  %12207 = icmp eq i32 %12187, 0
  %12208 = zext i1 %12207 to i8
  %12209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12208, i8* %12209, align 1, !tbaa !2448
  %12210 = lshr i32 %12187, 31
  %12211 = trunc i32 %12210 to i8
  %12212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12211, i8* %12212, align 1, !tbaa !2449
  %12213 = lshr i32 %12186, 31
  %12214 = lshr i32 %12182, 31
  %12215 = xor i32 %12210, %12213
  %12216 = xor i32 %12210, %12214
  %12217 = add nuw nsw i32 %12215, %12216
  %12218 = icmp eq i32 %12217, 2
  %12219 = zext i1 %12218 to i8
  %12220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12219, i8* %12220, align 1, !tbaa !2450
  %12221 = load i64, i64* %RBP
  %12222 = sub i64 %12221, 56
  %12223 = load i64, i64* %PC
  %12224 = add i64 %12223, 3
  store i64 %12224, i64* %PC
  %12225 = inttoptr i64 %12222 to i32*
  %12226 = load i32, i32* %12225
  %12227 = zext i32 %12226 to i64
  store i64 %12227, i64* %RSI, align 8, !tbaa !2428
  %12228 = load i64, i64* %RBP
  %12229 = add i64 %12228, 16
  %12230 = load i64, i64* %PC
  %12231 = add i64 %12230, 4
  store i64 %12231, i64* %PC
  %12232 = inttoptr i64 %12229 to i64*
  %12233 = load i64, i64* %12232
  store i64 %12233, i64* %RCX, align 8, !tbaa !2428
  %12234 = load i64, i64* %RSI
  %12235 = load i64, i64* %RCX
  %12236 = add i64 %12235, 20
  %12237 = load i64, i64* %PC
  %12238 = add i64 %12237, 4
  store i64 %12238, i64* %PC
  %12239 = inttoptr i64 %12236 to i32*
  %12240 = load i32, i32* %12239
  %12241 = shl i64 %12234, 32
  %12242 = ashr exact i64 %12241, 32
  %12243 = sext i32 %12240 to i64
  %12244 = mul nsw i64 %12243, %12242
  %12245 = trunc i64 %12244 to i32
  %12246 = and i64 %12244, 4294967295
  store i64 %12246, i64* %RSI, align 8, !tbaa !2428
  %12247 = shl i64 %12244, 32
  %12248 = ashr exact i64 %12247, 32
  %12249 = icmp ne i64 %12248, %12244
  %12250 = zext i1 %12249 to i8
  %12251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12250, i8* %12251, align 1, !tbaa !2432
  %12252 = and i32 %12245, 255
  %12253 = call i32 @llvm.ctpop.i32(i32 %12252) #16
  %12254 = trunc i32 %12253 to i8
  %12255 = and i8 %12254, 1
  %12256 = xor i8 %12255, 1
  %12257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12256, i8* %12257, align 1, !tbaa !2446
  %12258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12258, align 1, !tbaa !2447
  %12259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12259, align 1, !tbaa !2448
  %12260 = lshr i32 %12245, 31
  %12261 = trunc i32 %12260 to i8
  %12262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12261, i8* %12262, align 1, !tbaa !2449
  %12263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12250, i8* %12263, align 1, !tbaa !2450
  %12264 = load i64, i64* %RDX
  %12265 = load i32, i32* %ESI
  %12266 = zext i32 %12265 to i64
  %12267 = load i64, i64* %PC
  %12268 = add i64 %12267, 2
  store i64 %12268, i64* %PC
  %12269 = trunc i64 %12264 to i32
  %12270 = add i32 %12265, %12269
  %12271 = zext i32 %12270 to i64
  store i64 %12271, i64* %RDX, align 8, !tbaa !2428
  %12272 = icmp ult i32 %12270, %12269
  %12273 = icmp ult i32 %12270, %12265
  %12274 = or i1 %12272, %12273
  %12275 = zext i1 %12274 to i8
  %12276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12275, i8* %12276, align 1, !tbaa !2432
  %12277 = and i32 %12270, 255
  %12278 = call i32 @llvm.ctpop.i32(i32 %12277) #16
  %12279 = trunc i32 %12278 to i8
  %12280 = and i8 %12279, 1
  %12281 = xor i8 %12280, 1
  %12282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12281, i8* %12282, align 1, !tbaa !2446
  %12283 = xor i64 %12266, %12264
  %12284 = trunc i64 %12283 to i32
  %12285 = xor i32 %12284, %12270
  %12286 = lshr i32 %12285, 4
  %12287 = trunc i32 %12286 to i8
  %12288 = and i8 %12287, 1
  %12289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12288, i8* %12289, align 1, !tbaa !2447
  %12290 = icmp eq i32 %12270, 0
  %12291 = zext i1 %12290 to i8
  %12292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12291, i8* %12292, align 1, !tbaa !2448
  %12293 = lshr i32 %12270, 31
  %12294 = trunc i32 %12293 to i8
  %12295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12294, i8* %12295, align 1, !tbaa !2449
  %12296 = lshr i32 %12269, 31
  %12297 = lshr i32 %12265, 31
  %12298 = xor i32 %12293, %12296
  %12299 = xor i32 %12293, %12297
  %12300 = add nuw nsw i32 %12298, %12299
  %12301 = icmp eq i32 %12300, 2
  %12302 = zext i1 %12301 to i8
  %12303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12302, i8* %12303, align 1, !tbaa !2450
  %12304 = load i64, i64* %RDX
  %12305 = load i64, i64* %RBP
  %12306 = sub i64 %12305, 60
  %12307 = load i64, i64* %PC
  %12308 = add i64 %12307, 3
  store i64 %12308, i64* %PC
  %12309 = trunc i64 %12304 to i32
  %12310 = inttoptr i64 %12306 to i32*
  %12311 = load i32, i32* %12310
  %12312 = add i32 %12311, %12309
  %12313 = zext i32 %12312 to i64
  store i64 %12313, i64* %RDX, align 8, !tbaa !2428
  %12314 = icmp ult i32 %12312, %12309
  %12315 = icmp ult i32 %12312, %12311
  %12316 = or i1 %12314, %12315
  %12317 = zext i1 %12316 to i8
  %12318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12317, i8* %12318, align 1, !tbaa !2432
  %12319 = and i32 %12312, 255
  %12320 = call i32 @llvm.ctpop.i32(i32 %12319) #16
  %12321 = trunc i32 %12320 to i8
  %12322 = and i8 %12321, 1
  %12323 = xor i8 %12322, 1
  %12324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12323, i8* %12324, align 1, !tbaa !2446
  %12325 = xor i32 %12311, %12309
  %12326 = xor i32 %12325, %12312
  %12327 = lshr i32 %12326, 4
  %12328 = trunc i32 %12327 to i8
  %12329 = and i8 %12328, 1
  %12330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12329, i8* %12330, align 1, !tbaa !2447
  %12331 = icmp eq i32 %12312, 0
  %12332 = zext i1 %12331 to i8
  %12333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12332, i8* %12333, align 1, !tbaa !2448
  %12334 = lshr i32 %12312, 31
  %12335 = trunc i32 %12334 to i8
  %12336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12335, i8* %12336, align 1, !tbaa !2449
  %12337 = lshr i32 %12309, 31
  %12338 = lshr i32 %12311, 31
  %12339 = xor i32 %12334, %12337
  %12340 = xor i32 %12334, %12338
  %12341 = add nuw nsw i32 %12339, %12340
  %12342 = icmp eq i32 %12341, 2
  %12343 = zext i1 %12342 to i8
  %12344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12343, i8* %12344, align 1, !tbaa !2450
  %12345 = load i32, i32* %EDX
  %12346 = zext i32 %12345 to i64
  %12347 = load i64, i64* %PC
  %12348 = add i64 %12347, 3
  store i64 %12348, i64* %PC
  %12349 = shl i64 %12346, 32
  %12350 = ashr exact i64 %12349, 32
  store i64 %12350, i64* %RCX, align 8, !tbaa !2428
  %12351 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12352 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12353 = load i64, i64* %RAX
  %12354 = load i64, i64* %RCX
  %12355 = mul i64 %12354, 4
  %12356 = add i64 %12355, %12353
  %12357 = load i64, i64* %PC
  %12358 = add i64 %12357, 5
  store i64 %12358, i64* %PC
  %12359 = bitcast i8* %12352 to <2 x float>*
  %12360 = load <2 x float>, <2 x float>* %12359, align 1
  %12361 = getelementptr inbounds i8, i8* %12352, i64 8
  %12362 = bitcast i8* %12361 to <2 x i32>*
  %12363 = load <2 x i32>, <2 x i32>* %12362, align 1
  %12364 = inttoptr i64 %12356 to float*
  %12365 = load float, float* %12364
  %12366 = extractelement <2 x float> %12360, i32 0
  %12367 = fadd float %12366, %12365
  %12368 = bitcast i8* %12351 to float*
  store float %12367, float* %12368, align 1, !tbaa !2452
  %12369 = bitcast <2 x float> %12360 to <2 x i32>
  %12370 = extractelement <2 x i32> %12369, i32 1
  %12371 = getelementptr inbounds i8, i8* %12351, i64 4
  %12372 = bitcast i8* %12371 to i32*
  store i32 %12370, i32* %12372, align 1, !tbaa !2452
  %12373 = extractelement <2 x i32> %12363, i32 0
  %12374 = getelementptr inbounds i8, i8* %12351, i64 8
  %12375 = bitcast i8* %12374 to i32*
  store i32 %12373, i32* %12375, align 1, !tbaa !2452
  %12376 = extractelement <2 x i32> %12363, i32 1
  %12377 = getelementptr inbounds i8, i8* %12351, i64 12
  %12378 = bitcast i8* %12377 to i32*
  store i32 %12376, i32* %12378, align 1, !tbaa !2452
  %12379 = load i64, i64* %RBP
  %12380 = sub i64 %12379, 84
  %12381 = bitcast %union.vec128_t* %XMM0 to i8*
  %12382 = load i64, i64* %PC
  %12383 = add i64 %12382, 5
  store i64 %12383, i64* %PC
  %12384 = bitcast i8* %12381 to <2 x float>*
  %12385 = load <2 x float>, <2 x float>* %12384, align 1
  %12386 = extractelement <2 x float> %12385, i32 0
  %12387 = inttoptr i64 %12380 to float*
  store float %12386, float* %12387
  %12388 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12389 = load i64, i64* %RBP
  %12390 = sub i64 %12389, 84
  %12391 = load i64, i64* %PC
  %12392 = add i64 %12391, 5
  store i64 %12392, i64* %PC
  %12393 = inttoptr i64 %12390 to float*
  %12394 = load float, float* %12393
  %12395 = bitcast i8* %12388 to float*
  store float %12394, float* %12395, align 1, !tbaa !2452
  %12396 = getelementptr inbounds i8, i8* %12388, i64 4
  %12397 = bitcast i8* %12396 to float*
  store float 0.000000e+00, float* %12397, align 1, !tbaa !2452
  %12398 = getelementptr inbounds i8, i8* %12388, i64 8
  %12399 = bitcast i8* %12398 to float*
  store float 0.000000e+00, float* %12399, align 1, !tbaa !2452
  %12400 = getelementptr inbounds i8, i8* %12388, i64 12
  %12401 = bitcast i8* %12400 to float*
  store float 0.000000e+00, float* %12401, align 1, !tbaa !2452
  %12402 = load i64, i64* %RBP
  %12403 = sub i64 %12402, 16
  %12404 = load i64, i64* %PC
  %12405 = add i64 %12404, 4
  store i64 %12405, i64* %PC
  %12406 = inttoptr i64 %12403 to i64*
  %12407 = load i64, i64* %12406
  store i64 %12407, i64* %RAX, align 8, !tbaa !2428
  %12408 = load i64, i64* %RAX
  %12409 = load i64, i64* %PC
  %12410 = add i64 %12409, 3
  store i64 %12410, i64* %PC
  %12411 = inttoptr i64 %12408 to i64*
  %12412 = load i64, i64* %12411
  store i64 %12412, i64* %RAX, align 8, !tbaa !2428
  %12413 = load i64, i64* %RBP
  %12414 = sub i64 %12413, 16
  %12415 = load i64, i64* %PC
  %12416 = add i64 %12415, 4
  store i64 %12416, i64* %PC
  %12417 = inttoptr i64 %12414 to i64*
  %12418 = load i64, i64* %12417
  store i64 %12418, i64* %RCX, align 8, !tbaa !2428
  %12419 = load i64, i64* %RCX
  %12420 = add i64 %12419, 12
  %12421 = load i64, i64* %PC
  %12422 = add i64 %12421, 4
  store i64 %12422, i64* %PC
  %12423 = inttoptr i64 %12420 to i32*
  %12424 = load i32, i32* %12423
  %12425 = sext i32 %12424 to i64
  %12426 = mul nsw i64 %12425, 3
  %12427 = trunc i64 %12426 to i32
  %12428 = and i64 %12426, 4294967295
  store i64 %12428, i64* %RDX, align 8, !tbaa !2428
  %12429 = shl i64 %12426, 32
  %12430 = ashr exact i64 %12429, 32
  %12431 = icmp ne i64 %12430, %12426
  %12432 = zext i1 %12431 to i8
  %12433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12432, i8* %12433, align 1, !tbaa !2432
  %12434 = and i32 %12427, 255
  %12435 = call i32 @llvm.ctpop.i32(i32 %12434) #16
  %12436 = trunc i32 %12435 to i8
  %12437 = and i8 %12436, 1
  %12438 = xor i8 %12437, 1
  %12439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12438, i8* %12439, align 1, !tbaa !2446
  %12440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12440, align 1, !tbaa !2447
  %12441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12441, align 1, !tbaa !2448
  %12442 = lshr i32 %12427, 31
  %12443 = trunc i32 %12442 to i8
  %12444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12443, i8* %12444, align 1, !tbaa !2449
  %12445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12432, i8* %12445, align 1, !tbaa !2450
  %12446 = load i64, i64* %RBP
  %12447 = sub i64 %12446, 16
  %12448 = load i64, i64* %PC
  %12449 = add i64 %12448, 4
  store i64 %12449, i64* %PC
  %12450 = inttoptr i64 %12447 to i64*
  %12451 = load i64, i64* %12450
  store i64 %12451, i64* %RCX, align 8, !tbaa !2428
  %12452 = load i64, i64* %RDX
  %12453 = load i64, i64* %RCX
  %12454 = add i64 %12453, 16
  %12455 = load i64, i64* %PC
  %12456 = add i64 %12455, 4
  store i64 %12456, i64* %PC
  %12457 = inttoptr i64 %12454 to i32*
  %12458 = load i32, i32* %12457
  %12459 = shl i64 %12452, 32
  %12460 = ashr exact i64 %12459, 32
  %12461 = sext i32 %12458 to i64
  %12462 = mul nsw i64 %12461, %12460
  %12463 = trunc i64 %12462 to i32
  %12464 = and i64 %12462, 4294967295
  store i64 %12464, i64* %RDX, align 8, !tbaa !2428
  %12465 = shl i64 %12462, 32
  %12466 = ashr exact i64 %12465, 32
  %12467 = icmp ne i64 %12466, %12462
  %12468 = zext i1 %12467 to i8
  %12469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12468, i8* %12469, align 1, !tbaa !2432
  %12470 = and i32 %12463, 255
  %12471 = call i32 @llvm.ctpop.i32(i32 %12470) #16
  %12472 = trunc i32 %12471 to i8
  %12473 = and i8 %12472, 1
  %12474 = xor i8 %12473, 1
  %12475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12474, i8* %12475, align 1, !tbaa !2446
  %12476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12476, align 1, !tbaa !2447
  %12477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12477, align 1, !tbaa !2448
  %12478 = lshr i32 %12463, 31
  %12479 = trunc i32 %12478 to i8
  %12480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12479, i8* %12480, align 1, !tbaa !2449
  %12481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12468, i8* %12481, align 1, !tbaa !2450
  %12482 = load i64, i64* %RBP
  %12483 = sub i64 %12482, 16
  %12484 = load i64, i64* %PC
  %12485 = add i64 %12484, 4
  store i64 %12485, i64* %PC
  %12486 = inttoptr i64 %12483 to i64*
  %12487 = load i64, i64* %12486
  store i64 %12487, i64* %RCX, align 8, !tbaa !2428
  %12488 = load i64, i64* %RDX
  %12489 = load i64, i64* %RCX
  %12490 = add i64 %12489, 20
  %12491 = load i64, i64* %PC
  %12492 = add i64 %12491, 4
  store i64 %12492, i64* %PC
  %12493 = inttoptr i64 %12490 to i32*
  %12494 = load i32, i32* %12493
  %12495 = shl i64 %12488, 32
  %12496 = ashr exact i64 %12495, 32
  %12497 = sext i32 %12494 to i64
  %12498 = mul nsw i64 %12497, %12496
  %12499 = trunc i64 %12498 to i32
  %12500 = and i64 %12498, 4294967295
  store i64 %12500, i64* %RDX, align 8, !tbaa !2428
  %12501 = shl i64 %12498, 32
  %12502 = ashr exact i64 %12501, 32
  %12503 = icmp ne i64 %12502, %12498
  %12504 = zext i1 %12503 to i8
  %12505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12504, i8* %12505, align 1, !tbaa !2432
  %12506 = and i32 %12499, 255
  %12507 = call i32 @llvm.ctpop.i32(i32 %12506) #16
  %12508 = trunc i32 %12507 to i8
  %12509 = and i8 %12508, 1
  %12510 = xor i8 %12509, 1
  %12511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12510, i8* %12511, align 1, !tbaa !2446
  %12512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12512, align 1, !tbaa !2447
  %12513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12513, align 1, !tbaa !2448
  %12514 = lshr i32 %12499, 31
  %12515 = trunc i32 %12514 to i8
  %12516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12515, i8* %12516, align 1, !tbaa !2449
  %12517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12504, i8* %12517, align 1, !tbaa !2450
  %12518 = load i64, i64* %RBP
  %12519 = sub i64 %12518, 52
  %12520 = load i64, i64* %PC
  %12521 = add i64 %12520, 3
  store i64 %12521, i64* %PC
  %12522 = inttoptr i64 %12519 to i32*
  %12523 = load i32, i32* %12522
  %12524 = zext i32 %12523 to i64
  store i64 %12524, i64* %RSI, align 8, !tbaa !2428
  %12525 = load i64, i64* %RBP
  %12526 = sub i64 %12525, 16
  %12527 = load i64, i64* %PC
  %12528 = add i64 %12527, 4
  store i64 %12528, i64* %PC
  %12529 = inttoptr i64 %12526 to i64*
  %12530 = load i64, i64* %12529
  store i64 %12530, i64* %RCX, align 8, !tbaa !2428
  %12531 = load i64, i64* %RSI
  %12532 = load i64, i64* %RCX
  %12533 = add i64 %12532, 16
  %12534 = load i64, i64* %PC
  %12535 = add i64 %12534, 4
  store i64 %12535, i64* %PC
  %12536 = inttoptr i64 %12533 to i32*
  %12537 = load i32, i32* %12536
  %12538 = shl i64 %12531, 32
  %12539 = ashr exact i64 %12538, 32
  %12540 = sext i32 %12537 to i64
  %12541 = mul nsw i64 %12540, %12539
  %12542 = trunc i64 %12541 to i32
  %12543 = and i64 %12541, 4294967295
  store i64 %12543, i64* %RSI, align 8, !tbaa !2428
  %12544 = shl i64 %12541, 32
  %12545 = ashr exact i64 %12544, 32
  %12546 = icmp ne i64 %12545, %12541
  %12547 = zext i1 %12546 to i8
  %12548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12547, i8* %12548, align 1, !tbaa !2432
  %12549 = and i32 %12542, 255
  %12550 = call i32 @llvm.ctpop.i32(i32 %12549) #16
  %12551 = trunc i32 %12550 to i8
  %12552 = and i8 %12551, 1
  %12553 = xor i8 %12552, 1
  %12554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12553, i8* %12554, align 1, !tbaa !2446
  %12555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12555, align 1, !tbaa !2447
  %12556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12556, align 1, !tbaa !2448
  %12557 = lshr i32 %12542, 31
  %12558 = trunc i32 %12557 to i8
  %12559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12558, i8* %12559, align 1, !tbaa !2449
  %12560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12547, i8* %12560, align 1, !tbaa !2450
  %12561 = load i64, i64* %RBP
  %12562 = sub i64 %12561, 16
  %12563 = load i64, i64* %PC
  %12564 = add i64 %12563, 4
  store i64 %12564, i64* %PC
  %12565 = inttoptr i64 %12562 to i64*
  %12566 = load i64, i64* %12565
  store i64 %12566, i64* %RCX, align 8, !tbaa !2428
  %12567 = load i64, i64* %RSI
  %12568 = load i64, i64* %RCX
  %12569 = add i64 %12568, 20
  %12570 = load i64, i64* %PC
  %12571 = add i64 %12570, 4
  store i64 %12571, i64* %PC
  %12572 = inttoptr i64 %12569 to i32*
  %12573 = load i32, i32* %12572
  %12574 = shl i64 %12567, 32
  %12575 = ashr exact i64 %12574, 32
  %12576 = sext i32 %12573 to i64
  %12577 = mul nsw i64 %12576, %12575
  %12578 = trunc i64 %12577 to i32
  %12579 = and i64 %12577, 4294967295
  store i64 %12579, i64* %RSI, align 8, !tbaa !2428
  %12580 = shl i64 %12577, 32
  %12581 = ashr exact i64 %12580, 32
  %12582 = icmp ne i64 %12581, %12577
  %12583 = zext i1 %12582 to i8
  %12584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12583, i8* %12584, align 1, !tbaa !2432
  %12585 = and i32 %12578, 255
  %12586 = call i32 @llvm.ctpop.i32(i32 %12585) #16
  %12587 = trunc i32 %12586 to i8
  %12588 = and i8 %12587, 1
  %12589 = xor i8 %12588, 1
  %12590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12589, i8* %12590, align 1, !tbaa !2446
  %12591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12591, align 1, !tbaa !2447
  %12592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12592, align 1, !tbaa !2448
  %12593 = lshr i32 %12578, 31
  %12594 = trunc i32 %12593 to i8
  %12595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12594, i8* %12595, align 1, !tbaa !2449
  %12596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12583, i8* %12596, align 1, !tbaa !2450
  %12597 = load i64, i64* %RDX
  %12598 = load i32, i32* %ESI
  %12599 = zext i32 %12598 to i64
  %12600 = load i64, i64* %PC
  %12601 = add i64 %12600, 2
  store i64 %12601, i64* %PC
  %12602 = trunc i64 %12597 to i32
  %12603 = add i32 %12598, %12602
  %12604 = zext i32 %12603 to i64
  store i64 %12604, i64* %RDX, align 8, !tbaa !2428
  %12605 = icmp ult i32 %12603, %12602
  %12606 = icmp ult i32 %12603, %12598
  %12607 = or i1 %12605, %12606
  %12608 = zext i1 %12607 to i8
  %12609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12608, i8* %12609, align 1, !tbaa !2432
  %12610 = and i32 %12603, 255
  %12611 = call i32 @llvm.ctpop.i32(i32 %12610) #16
  %12612 = trunc i32 %12611 to i8
  %12613 = and i8 %12612, 1
  %12614 = xor i8 %12613, 1
  %12615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12614, i8* %12615, align 1, !tbaa !2446
  %12616 = xor i64 %12599, %12597
  %12617 = trunc i64 %12616 to i32
  %12618 = xor i32 %12617, %12603
  %12619 = lshr i32 %12618, 4
  %12620 = trunc i32 %12619 to i8
  %12621 = and i8 %12620, 1
  %12622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12621, i8* %12622, align 1, !tbaa !2447
  %12623 = icmp eq i32 %12603, 0
  %12624 = zext i1 %12623 to i8
  %12625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12624, i8* %12625, align 1, !tbaa !2448
  %12626 = lshr i32 %12603, 31
  %12627 = trunc i32 %12626 to i8
  %12628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12627, i8* %12628, align 1, !tbaa !2449
  %12629 = lshr i32 %12602, 31
  %12630 = lshr i32 %12598, 31
  %12631 = xor i32 %12626, %12629
  %12632 = xor i32 %12626, %12630
  %12633 = add nuw nsw i32 %12631, %12632
  %12634 = icmp eq i32 %12633, 2
  %12635 = zext i1 %12634 to i8
  %12636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12635, i8* %12636, align 1, !tbaa !2450
  %12637 = load i64, i64* %RBP
  %12638 = sub i64 %12637, 56
  %12639 = load i64, i64* %PC
  %12640 = add i64 %12639, 3
  store i64 %12640, i64* %PC
  %12641 = inttoptr i64 %12638 to i32*
  %12642 = load i32, i32* %12641
  %12643 = zext i32 %12642 to i64
  store i64 %12643, i64* %RSI, align 8, !tbaa !2428
  %12644 = load i64, i64* %RBP
  %12645 = sub i64 %12644, 16
  %12646 = load i64, i64* %PC
  %12647 = add i64 %12646, 4
  store i64 %12647, i64* %PC
  %12648 = inttoptr i64 %12645 to i64*
  %12649 = load i64, i64* %12648
  store i64 %12649, i64* %RCX, align 8, !tbaa !2428
  %12650 = load i64, i64* %RSI
  %12651 = load i64, i64* %RCX
  %12652 = add i64 %12651, 20
  %12653 = load i64, i64* %PC
  %12654 = add i64 %12653, 4
  store i64 %12654, i64* %PC
  %12655 = inttoptr i64 %12652 to i32*
  %12656 = load i32, i32* %12655
  %12657 = shl i64 %12650, 32
  %12658 = ashr exact i64 %12657, 32
  %12659 = sext i32 %12656 to i64
  %12660 = mul nsw i64 %12659, %12658
  %12661 = trunc i64 %12660 to i32
  %12662 = and i64 %12660, 4294967295
  store i64 %12662, i64* %RSI, align 8, !tbaa !2428
  %12663 = shl i64 %12660, 32
  %12664 = ashr exact i64 %12663, 32
  %12665 = icmp ne i64 %12664, %12660
  %12666 = zext i1 %12665 to i8
  %12667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12666, i8* %12667, align 1, !tbaa !2432
  %12668 = and i32 %12661, 255
  %12669 = call i32 @llvm.ctpop.i32(i32 %12668) #16
  %12670 = trunc i32 %12669 to i8
  %12671 = and i8 %12670, 1
  %12672 = xor i8 %12671, 1
  %12673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12672, i8* %12673, align 1, !tbaa !2446
  %12674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12674, align 1, !tbaa !2447
  %12675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12675, align 1, !tbaa !2448
  %12676 = lshr i32 %12661, 31
  %12677 = trunc i32 %12676 to i8
  %12678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12677, i8* %12678, align 1, !tbaa !2449
  %12679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12666, i8* %12679, align 1, !tbaa !2450
  %12680 = load i64, i64* %RDX
  %12681 = load i32, i32* %ESI
  %12682 = zext i32 %12681 to i64
  %12683 = load i64, i64* %PC
  %12684 = add i64 %12683, 2
  store i64 %12684, i64* %PC
  %12685 = trunc i64 %12680 to i32
  %12686 = add i32 %12681, %12685
  %12687 = zext i32 %12686 to i64
  store i64 %12687, i64* %RDX, align 8, !tbaa !2428
  %12688 = icmp ult i32 %12686, %12685
  %12689 = icmp ult i32 %12686, %12681
  %12690 = or i1 %12688, %12689
  %12691 = zext i1 %12690 to i8
  %12692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12691, i8* %12692, align 1, !tbaa !2432
  %12693 = and i32 %12686, 255
  %12694 = call i32 @llvm.ctpop.i32(i32 %12693) #16
  %12695 = trunc i32 %12694 to i8
  %12696 = and i8 %12695, 1
  %12697 = xor i8 %12696, 1
  %12698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12697, i8* %12698, align 1, !tbaa !2446
  %12699 = xor i64 %12682, %12680
  %12700 = trunc i64 %12699 to i32
  %12701 = xor i32 %12700, %12686
  %12702 = lshr i32 %12701, 4
  %12703 = trunc i32 %12702 to i8
  %12704 = and i8 %12703, 1
  %12705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12704, i8* %12705, align 1, !tbaa !2447
  %12706 = icmp eq i32 %12686, 0
  %12707 = zext i1 %12706 to i8
  %12708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12707, i8* %12708, align 1, !tbaa !2448
  %12709 = lshr i32 %12686, 31
  %12710 = trunc i32 %12709 to i8
  %12711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12710, i8* %12711, align 1, !tbaa !2449
  %12712 = lshr i32 %12685, 31
  %12713 = lshr i32 %12681, 31
  %12714 = xor i32 %12709, %12712
  %12715 = xor i32 %12709, %12713
  %12716 = add nuw nsw i32 %12714, %12715
  %12717 = icmp eq i32 %12716, 2
  %12718 = zext i1 %12717 to i8
  %12719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12718, i8* %12719, align 1, !tbaa !2450
  %12720 = load i64, i64* %RDX
  %12721 = load i64, i64* %RBP
  %12722 = sub i64 %12721, 60
  %12723 = load i64, i64* %PC
  %12724 = add i64 %12723, 3
  store i64 %12724, i64* %PC
  %12725 = trunc i64 %12720 to i32
  %12726 = inttoptr i64 %12722 to i32*
  %12727 = load i32, i32* %12726
  %12728 = add i32 %12727, %12725
  %12729 = zext i32 %12728 to i64
  store i64 %12729, i64* %RDX, align 8, !tbaa !2428
  %12730 = icmp ult i32 %12728, %12725
  %12731 = icmp ult i32 %12728, %12727
  %12732 = or i1 %12730, %12731
  %12733 = zext i1 %12732 to i8
  %12734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12733, i8* %12734, align 1, !tbaa !2432
  %12735 = and i32 %12728, 255
  %12736 = call i32 @llvm.ctpop.i32(i32 %12735) #16
  %12737 = trunc i32 %12736 to i8
  %12738 = and i8 %12737, 1
  %12739 = xor i8 %12738, 1
  %12740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12739, i8* %12740, align 1, !tbaa !2446
  %12741 = xor i32 %12727, %12725
  %12742 = xor i32 %12741, %12728
  %12743 = lshr i32 %12742, 4
  %12744 = trunc i32 %12743 to i8
  %12745 = and i8 %12744, 1
  %12746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12745, i8* %12746, align 1, !tbaa !2447
  %12747 = icmp eq i32 %12728, 0
  %12748 = zext i1 %12747 to i8
  %12749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12748, i8* %12749, align 1, !tbaa !2448
  %12750 = lshr i32 %12728, 31
  %12751 = trunc i32 %12750 to i8
  %12752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12751, i8* %12752, align 1, !tbaa !2449
  %12753 = lshr i32 %12725, 31
  %12754 = lshr i32 %12727, 31
  %12755 = xor i32 %12750, %12753
  %12756 = xor i32 %12750, %12754
  %12757 = add nuw nsw i32 %12755, %12756
  %12758 = icmp eq i32 %12757, 2
  %12759 = zext i1 %12758 to i8
  %12760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12759, i8* %12760, align 1, !tbaa !2450
  %12761 = load i32, i32* %EDX
  %12762 = zext i32 %12761 to i64
  %12763 = load i64, i64* %PC
  %12764 = add i64 %12763, 3
  store i64 %12764, i64* %PC
  %12765 = shl i64 %12762, 32
  %12766 = ashr exact i64 %12765, 32
  store i64 %12766, i64* %RCX, align 8, !tbaa !2428
  %12767 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12768 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12769 = load i64, i64* %RAX
  %12770 = load i64, i64* %RCX
  %12771 = mul i64 %12770, 4
  %12772 = add i64 %12771, %12769
  %12773 = load i64, i64* %PC
  %12774 = add i64 %12773, 5
  store i64 %12774, i64* %PC
  %12775 = bitcast i8* %12768 to <2 x float>*
  %12776 = load <2 x float>, <2 x float>* %12775, align 1
  %12777 = getelementptr inbounds i8, i8* %12768, i64 8
  %12778 = bitcast i8* %12777 to <2 x i32>*
  %12779 = load <2 x i32>, <2 x i32>* %12778, align 1
  %12780 = inttoptr i64 %12772 to float*
  %12781 = load float, float* %12780
  %12782 = extractelement <2 x float> %12776, i32 0
  %12783 = fmul float %12782, %12781
  %12784 = bitcast i8* %12767 to float*
  store float %12783, float* %12784, align 1, !tbaa !2452
  %12785 = bitcast <2 x float> %12776 to <2 x i32>
  %12786 = extractelement <2 x i32> %12785, i32 1
  %12787 = getelementptr inbounds i8, i8* %12767, i64 4
  %12788 = bitcast i8* %12787 to i32*
  store i32 %12786, i32* %12788, align 1, !tbaa !2452
  %12789 = extractelement <2 x i32> %12779, i32 0
  %12790 = getelementptr inbounds i8, i8* %12767, i64 8
  %12791 = bitcast i8* %12790 to i32*
  store i32 %12789, i32* %12791, align 1, !tbaa !2452
  %12792 = extractelement <2 x i32> %12779, i32 1
  %12793 = getelementptr inbounds i8, i8* %12767, i64 12
  %12794 = bitcast i8* %12793 to i32*
  store i32 %12792, i32* %12794, align 1, !tbaa !2452
  %12795 = load i64, i64* %RBP
  %12796 = sub i64 %12795, 40
  %12797 = load i64, i64* %PC
  %12798 = add i64 %12797, 4
  store i64 %12798, i64* %PC
  %12799 = inttoptr i64 %12796 to i64*
  %12800 = load i64, i64* %12799
  store i64 %12800, i64* %RAX, align 8, !tbaa !2428
  %12801 = load i64, i64* %RAX
  %12802 = load i64, i64* %PC
  %12803 = add i64 %12802, 3
  store i64 %12803, i64* %PC
  %12804 = inttoptr i64 %12801 to i64*
  %12805 = load i64, i64* %12804
  store i64 %12805, i64* %RAX, align 8, !tbaa !2428
  %12806 = load i64, i64* %RBP
  %12807 = sub i64 %12806, 40
  %12808 = load i64, i64* %PC
  %12809 = add i64 %12808, 4
  store i64 %12809, i64* %PC
  %12810 = inttoptr i64 %12807 to i64*
  %12811 = load i64, i64* %12810
  store i64 %12811, i64* %RCX, align 8, !tbaa !2428
  %12812 = load i64, i64* %RCX
  %12813 = add i64 %12812, 12
  %12814 = load i64, i64* %PC
  %12815 = add i64 %12814, 4
  store i64 %12815, i64* %PC
  %12816 = inttoptr i64 %12813 to i32*
  %12817 = load i32, i32* %12816
  %12818 = sext i32 %12817 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %12819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12819, align 1, !tbaa !2432
  %12820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12820, align 1, !tbaa !2446
  %12821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12821, align 1, !tbaa !2447
  %12822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12822, align 1, !tbaa !2448
  %12823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12823, align 1, !tbaa !2449
  %12824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12824, align 1, !tbaa !2450
  %12825 = load i64, i64* %RBP
  %12826 = sub i64 %12825, 40
  %12827 = load i64, i64* %PC
  %12828 = add i64 %12827, 4
  store i64 %12828, i64* %PC
  %12829 = inttoptr i64 %12826 to i64*
  %12830 = load i64, i64* %12829
  store i64 %12830, i64* %RCX, align 8, !tbaa !2428
  %12831 = load i64, i64* %RDX
  %12832 = load i64, i64* %RCX
  %12833 = add i64 %12832, 16
  %12834 = load i64, i64* %PC
  %12835 = add i64 %12834, 4
  store i64 %12835, i64* %PC
  %12836 = inttoptr i64 %12833 to i32*
  %12837 = load i32, i32* %12836
  %12838 = shl i64 %12831, 32
  %12839 = ashr exact i64 %12838, 32
  %12840 = sext i32 %12837 to i64
  %12841 = mul nsw i64 %12840, %12839
  %12842 = trunc i64 %12841 to i32
  %12843 = and i64 %12841, 4294967295
  store i64 %12843, i64* %RDX, align 8, !tbaa !2428
  %12844 = shl i64 %12841, 32
  %12845 = ashr exact i64 %12844, 32
  %12846 = icmp ne i64 %12845, %12841
  %12847 = zext i1 %12846 to i8
  %12848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12847, i8* %12848, align 1, !tbaa !2432
  %12849 = and i32 %12842, 255
  %12850 = call i32 @llvm.ctpop.i32(i32 %12849) #16
  %12851 = trunc i32 %12850 to i8
  %12852 = and i8 %12851, 1
  %12853 = xor i8 %12852, 1
  %12854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12853, i8* %12854, align 1, !tbaa !2446
  %12855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12855, align 1, !tbaa !2447
  %12856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12856, align 1, !tbaa !2448
  %12857 = lshr i32 %12842, 31
  %12858 = trunc i32 %12857 to i8
  %12859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12858, i8* %12859, align 1, !tbaa !2449
  %12860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12847, i8* %12860, align 1, !tbaa !2450
  %12861 = load i64, i64* %RBP
  %12862 = sub i64 %12861, 40
  %12863 = load i64, i64* %PC
  %12864 = add i64 %12863, 4
  store i64 %12864, i64* %PC
  %12865 = inttoptr i64 %12862 to i64*
  %12866 = load i64, i64* %12865
  store i64 %12866, i64* %RCX, align 8, !tbaa !2428
  %12867 = load i64, i64* %RDX
  %12868 = load i64, i64* %RCX
  %12869 = add i64 %12868, 20
  %12870 = load i64, i64* %PC
  %12871 = add i64 %12870, 4
  store i64 %12871, i64* %PC
  %12872 = inttoptr i64 %12869 to i32*
  %12873 = load i32, i32* %12872
  %12874 = shl i64 %12867, 32
  %12875 = ashr exact i64 %12874, 32
  %12876 = sext i32 %12873 to i64
  %12877 = mul nsw i64 %12876, %12875
  %12878 = trunc i64 %12877 to i32
  %12879 = and i64 %12877, 4294967295
  store i64 %12879, i64* %RDX, align 8, !tbaa !2428
  %12880 = shl i64 %12877, 32
  %12881 = ashr exact i64 %12880, 32
  %12882 = icmp ne i64 %12881, %12877
  %12883 = zext i1 %12882 to i8
  %12884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12883, i8* %12884, align 1, !tbaa !2432
  %12885 = and i32 %12878, 255
  %12886 = call i32 @llvm.ctpop.i32(i32 %12885) #16
  %12887 = trunc i32 %12886 to i8
  %12888 = and i8 %12887, 1
  %12889 = xor i8 %12888, 1
  %12890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12889, i8* %12890, align 1, !tbaa !2446
  %12891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12891, align 1, !tbaa !2447
  %12892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12892, align 1, !tbaa !2448
  %12893 = lshr i32 %12878, 31
  %12894 = trunc i32 %12893 to i8
  %12895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12894, i8* %12895, align 1, !tbaa !2449
  %12896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12883, i8* %12896, align 1, !tbaa !2450
  %12897 = load i64, i64* %RBP
  %12898 = sub i64 %12897, 52
  %12899 = load i64, i64* %PC
  %12900 = add i64 %12899, 3
  store i64 %12900, i64* %PC
  %12901 = inttoptr i64 %12898 to i32*
  %12902 = load i32, i32* %12901
  %12903 = zext i32 %12902 to i64
  store i64 %12903, i64* %RSI, align 8, !tbaa !2428
  %12904 = load i64, i64* %RBP
  %12905 = sub i64 %12904, 40
  %12906 = load i64, i64* %PC
  %12907 = add i64 %12906, 4
  store i64 %12907, i64* %PC
  %12908 = inttoptr i64 %12905 to i64*
  %12909 = load i64, i64* %12908
  store i64 %12909, i64* %RCX, align 8, !tbaa !2428
  %12910 = load i64, i64* %RSI
  %12911 = load i64, i64* %RCX
  %12912 = add i64 %12911, 16
  %12913 = load i64, i64* %PC
  %12914 = add i64 %12913, 4
  store i64 %12914, i64* %PC
  %12915 = inttoptr i64 %12912 to i32*
  %12916 = load i32, i32* %12915
  %12917 = shl i64 %12910, 32
  %12918 = ashr exact i64 %12917, 32
  %12919 = sext i32 %12916 to i64
  %12920 = mul nsw i64 %12919, %12918
  %12921 = trunc i64 %12920 to i32
  %12922 = and i64 %12920, 4294967295
  store i64 %12922, i64* %RSI, align 8, !tbaa !2428
  %12923 = shl i64 %12920, 32
  %12924 = ashr exact i64 %12923, 32
  %12925 = icmp ne i64 %12924, %12920
  %12926 = zext i1 %12925 to i8
  %12927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12926, i8* %12927, align 1, !tbaa !2432
  %12928 = and i32 %12921, 255
  %12929 = call i32 @llvm.ctpop.i32(i32 %12928) #16
  %12930 = trunc i32 %12929 to i8
  %12931 = and i8 %12930, 1
  %12932 = xor i8 %12931, 1
  %12933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12932, i8* %12933, align 1, !tbaa !2446
  %12934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12934, align 1, !tbaa !2447
  %12935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12935, align 1, !tbaa !2448
  %12936 = lshr i32 %12921, 31
  %12937 = trunc i32 %12936 to i8
  %12938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12937, i8* %12938, align 1, !tbaa !2449
  %12939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12926, i8* %12939, align 1, !tbaa !2450
  %12940 = load i64, i64* %RBP
  %12941 = sub i64 %12940, 40
  %12942 = load i64, i64* %PC
  %12943 = add i64 %12942, 4
  store i64 %12943, i64* %PC
  %12944 = inttoptr i64 %12941 to i64*
  %12945 = load i64, i64* %12944
  store i64 %12945, i64* %RCX, align 8, !tbaa !2428
  %12946 = load i64, i64* %RSI
  %12947 = load i64, i64* %RCX
  %12948 = add i64 %12947, 20
  %12949 = load i64, i64* %PC
  %12950 = add i64 %12949, 4
  store i64 %12950, i64* %PC
  %12951 = inttoptr i64 %12948 to i32*
  %12952 = load i32, i32* %12951
  %12953 = shl i64 %12946, 32
  %12954 = ashr exact i64 %12953, 32
  %12955 = sext i32 %12952 to i64
  %12956 = mul nsw i64 %12955, %12954
  %12957 = trunc i64 %12956 to i32
  %12958 = and i64 %12956, 4294967295
  store i64 %12958, i64* %RSI, align 8, !tbaa !2428
  %12959 = shl i64 %12956, 32
  %12960 = ashr exact i64 %12959, 32
  %12961 = icmp ne i64 %12960, %12956
  %12962 = zext i1 %12961 to i8
  %12963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12962, i8* %12963, align 1, !tbaa !2432
  %12964 = and i32 %12957, 255
  %12965 = call i32 @llvm.ctpop.i32(i32 %12964) #16
  %12966 = trunc i32 %12965 to i8
  %12967 = and i8 %12966, 1
  %12968 = xor i8 %12967, 1
  %12969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12968, i8* %12969, align 1, !tbaa !2446
  %12970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12970, align 1, !tbaa !2447
  %12971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12971, align 1, !tbaa !2448
  %12972 = lshr i32 %12957, 31
  %12973 = trunc i32 %12972 to i8
  %12974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12973, i8* %12974, align 1, !tbaa !2449
  %12975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12962, i8* %12975, align 1, !tbaa !2450
  %12976 = load i64, i64* %RDX
  %12977 = load i32, i32* %ESI
  %12978 = zext i32 %12977 to i64
  %12979 = load i64, i64* %PC
  %12980 = add i64 %12979, 2
  store i64 %12980, i64* %PC
  %12981 = trunc i64 %12976 to i32
  %12982 = add i32 %12977, %12981
  %12983 = zext i32 %12982 to i64
  store i64 %12983, i64* %RDX, align 8, !tbaa !2428
  %12984 = icmp ult i32 %12982, %12981
  %12985 = icmp ult i32 %12982, %12977
  %12986 = or i1 %12984, %12985
  %12987 = zext i1 %12986 to i8
  %12988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12987, i8* %12988, align 1, !tbaa !2432
  %12989 = and i32 %12982, 255
  %12990 = call i32 @llvm.ctpop.i32(i32 %12989) #16
  %12991 = trunc i32 %12990 to i8
  %12992 = and i8 %12991, 1
  %12993 = xor i8 %12992, 1
  %12994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12993, i8* %12994, align 1, !tbaa !2446
  %12995 = xor i64 %12978, %12976
  %12996 = trunc i64 %12995 to i32
  %12997 = xor i32 %12996, %12982
  %12998 = lshr i32 %12997, 4
  %12999 = trunc i32 %12998 to i8
  %13000 = and i8 %12999, 1
  %13001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13000, i8* %13001, align 1, !tbaa !2447
  %13002 = icmp eq i32 %12982, 0
  %13003 = zext i1 %13002 to i8
  %13004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13003, i8* %13004, align 1, !tbaa !2448
  %13005 = lshr i32 %12982, 31
  %13006 = trunc i32 %13005 to i8
  %13007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13006, i8* %13007, align 1, !tbaa !2449
  %13008 = lshr i32 %12981, 31
  %13009 = lshr i32 %12977, 31
  %13010 = xor i32 %13005, %13008
  %13011 = xor i32 %13005, %13009
  %13012 = add nuw nsw i32 %13010, %13011
  %13013 = icmp eq i32 %13012, 2
  %13014 = zext i1 %13013 to i8
  %13015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13014, i8* %13015, align 1, !tbaa !2450
  %13016 = load i64, i64* %RBP
  %13017 = sub i64 %13016, 56
  %13018 = load i64, i64* %PC
  %13019 = add i64 %13018, 3
  store i64 %13019, i64* %PC
  %13020 = inttoptr i64 %13017 to i32*
  %13021 = load i32, i32* %13020
  %13022 = zext i32 %13021 to i64
  store i64 %13022, i64* %RSI, align 8, !tbaa !2428
  %13023 = load i64, i64* %RBP
  %13024 = sub i64 %13023, 40
  %13025 = load i64, i64* %PC
  %13026 = add i64 %13025, 4
  store i64 %13026, i64* %PC
  %13027 = inttoptr i64 %13024 to i64*
  %13028 = load i64, i64* %13027
  store i64 %13028, i64* %RCX, align 8, !tbaa !2428
  %13029 = load i64, i64* %RSI
  %13030 = load i64, i64* %RCX
  %13031 = add i64 %13030, 20
  %13032 = load i64, i64* %PC
  %13033 = add i64 %13032, 4
  store i64 %13033, i64* %PC
  %13034 = inttoptr i64 %13031 to i32*
  %13035 = load i32, i32* %13034
  %13036 = shl i64 %13029, 32
  %13037 = ashr exact i64 %13036, 32
  %13038 = sext i32 %13035 to i64
  %13039 = mul nsw i64 %13038, %13037
  %13040 = trunc i64 %13039 to i32
  %13041 = and i64 %13039, 4294967295
  store i64 %13041, i64* %RSI, align 8, !tbaa !2428
  %13042 = shl i64 %13039, 32
  %13043 = ashr exact i64 %13042, 32
  %13044 = icmp ne i64 %13043, %13039
  %13045 = zext i1 %13044 to i8
  %13046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13045, i8* %13046, align 1, !tbaa !2432
  %13047 = and i32 %13040, 255
  %13048 = call i32 @llvm.ctpop.i32(i32 %13047) #16
  %13049 = trunc i32 %13048 to i8
  %13050 = and i8 %13049, 1
  %13051 = xor i8 %13050, 1
  %13052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13051, i8* %13052, align 1, !tbaa !2446
  %13053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13053, align 1, !tbaa !2447
  %13054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13054, align 1, !tbaa !2448
  %13055 = lshr i32 %13040, 31
  %13056 = trunc i32 %13055 to i8
  %13057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13056, i8* %13057, align 1, !tbaa !2449
  %13058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13045, i8* %13058, align 1, !tbaa !2450
  %13059 = load i64, i64* %RDX
  %13060 = load i32, i32* %ESI
  %13061 = zext i32 %13060 to i64
  %13062 = load i64, i64* %PC
  %13063 = add i64 %13062, 2
  store i64 %13063, i64* %PC
  %13064 = trunc i64 %13059 to i32
  %13065 = add i32 %13060, %13064
  %13066 = zext i32 %13065 to i64
  store i64 %13066, i64* %RDX, align 8, !tbaa !2428
  %13067 = icmp ult i32 %13065, %13064
  %13068 = icmp ult i32 %13065, %13060
  %13069 = or i1 %13067, %13068
  %13070 = zext i1 %13069 to i8
  %13071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13070, i8* %13071, align 1, !tbaa !2432
  %13072 = and i32 %13065, 255
  %13073 = call i32 @llvm.ctpop.i32(i32 %13072) #16
  %13074 = trunc i32 %13073 to i8
  %13075 = and i8 %13074, 1
  %13076 = xor i8 %13075, 1
  %13077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13076, i8* %13077, align 1, !tbaa !2446
  %13078 = xor i64 %13061, %13059
  %13079 = trunc i64 %13078 to i32
  %13080 = xor i32 %13079, %13065
  %13081 = lshr i32 %13080, 4
  %13082 = trunc i32 %13081 to i8
  %13083 = and i8 %13082, 1
  %13084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13083, i8* %13084, align 1, !tbaa !2447
  %13085 = icmp eq i32 %13065, 0
  %13086 = zext i1 %13085 to i8
  %13087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13086, i8* %13087, align 1, !tbaa !2448
  %13088 = lshr i32 %13065, 31
  %13089 = trunc i32 %13088 to i8
  %13090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13089, i8* %13090, align 1, !tbaa !2449
  %13091 = lshr i32 %13064, 31
  %13092 = lshr i32 %13060, 31
  %13093 = xor i32 %13088, %13091
  %13094 = xor i32 %13088, %13092
  %13095 = add nuw nsw i32 %13093, %13094
  %13096 = icmp eq i32 %13095, 2
  %13097 = zext i1 %13096 to i8
  %13098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13097, i8* %13098, align 1, !tbaa !2450
  %13099 = load i64, i64* %RDX
  %13100 = load i64, i64* %RBP
  %13101 = sub i64 %13100, 60
  %13102 = load i64, i64* %PC
  %13103 = add i64 %13102, 3
  store i64 %13103, i64* %PC
  %13104 = trunc i64 %13099 to i32
  %13105 = inttoptr i64 %13101 to i32*
  %13106 = load i32, i32* %13105
  %13107 = add i32 %13106, %13104
  %13108 = zext i32 %13107 to i64
  store i64 %13108, i64* %RDX, align 8, !tbaa !2428
  %13109 = icmp ult i32 %13107, %13104
  %13110 = icmp ult i32 %13107, %13106
  %13111 = or i1 %13109, %13110
  %13112 = zext i1 %13111 to i8
  %13113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13112, i8* %13113, align 1, !tbaa !2432
  %13114 = and i32 %13107, 255
  %13115 = call i32 @llvm.ctpop.i32(i32 %13114) #16
  %13116 = trunc i32 %13115 to i8
  %13117 = and i8 %13116, 1
  %13118 = xor i8 %13117, 1
  %13119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13118, i8* %13119, align 1, !tbaa !2446
  %13120 = xor i32 %13106, %13104
  %13121 = xor i32 %13120, %13107
  %13122 = lshr i32 %13121, 4
  %13123 = trunc i32 %13122 to i8
  %13124 = and i8 %13123, 1
  %13125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13124, i8* %13125, align 1, !tbaa !2447
  %13126 = icmp eq i32 %13107, 0
  %13127 = zext i1 %13126 to i8
  %13128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13127, i8* %13128, align 1, !tbaa !2448
  %13129 = lshr i32 %13107, 31
  %13130 = trunc i32 %13129 to i8
  %13131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13130, i8* %13131, align 1, !tbaa !2449
  %13132 = lshr i32 %13104, 31
  %13133 = lshr i32 %13106, 31
  %13134 = xor i32 %13129, %13132
  %13135 = xor i32 %13129, %13133
  %13136 = add nuw nsw i32 %13134, %13135
  %13137 = icmp eq i32 %13136, 2
  %13138 = zext i1 %13137 to i8
  %13139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13138, i8* %13139, align 1, !tbaa !2450
  %13140 = load i32, i32* %EDX
  %13141 = zext i32 %13140 to i64
  %13142 = load i64, i64* %PC
  %13143 = add i64 %13142, 3
  store i64 %13143, i64* %PC
  %13144 = shl i64 %13141, 32
  %13145 = ashr exact i64 %13144, 32
  store i64 %13145, i64* %RCX, align 8, !tbaa !2428
  %13146 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13147 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13148 = load i64, i64* %RAX
  %13149 = load i64, i64* %RCX
  %13150 = mul i64 %13149, 4
  %13151 = add i64 %13150, %13148
  %13152 = load i64, i64* %PC
  %13153 = add i64 %13152, 5
  store i64 %13153, i64* %PC
  %13154 = bitcast i8* %13147 to <2 x float>*
  %13155 = load <2 x float>, <2 x float>* %13154, align 1
  %13156 = getelementptr inbounds i8, i8* %13147, i64 8
  %13157 = bitcast i8* %13156 to <2 x i32>*
  %13158 = load <2 x i32>, <2 x i32>* %13157, align 1
  %13159 = inttoptr i64 %13151 to float*
  %13160 = load float, float* %13159
  %13161 = extractelement <2 x float> %13155, i32 0
  %13162 = fsub float %13161, %13160
  %13163 = bitcast i8* %13146 to float*
  store float %13162, float* %13163, align 1, !tbaa !2452
  %13164 = bitcast <2 x float> %13155 to <2 x i32>
  %13165 = extractelement <2 x i32> %13164, i32 1
  %13166 = getelementptr inbounds i8, i8* %13146, i64 4
  %13167 = bitcast i8* %13166 to i32*
  store i32 %13165, i32* %13167, align 1, !tbaa !2452
  %13168 = extractelement <2 x i32> %13158, i32 0
  %13169 = getelementptr inbounds i8, i8* %13146, i64 8
  %13170 = bitcast i8* %13169 to i32*
  store i32 %13168, i32* %13170, align 1, !tbaa !2452
  %13171 = extractelement <2 x i32> %13158, i32 1
  %13172 = getelementptr inbounds i8, i8* %13146, i64 12
  %13173 = bitcast i8* %13172 to i32*
  store i32 %13171, i32* %13173, align 1, !tbaa !2452
  %13174 = load i64, i64* %RBP
  %13175 = sub i64 %13174, 48
  %13176 = load i64, i64* %PC
  %13177 = add i64 %13176, 4
  store i64 %13177, i64* %PC
  %13178 = inttoptr i64 %13175 to i64*
  %13179 = load i64, i64* %13178
  store i64 %13179, i64* %RAX, align 8, !tbaa !2428
  %13180 = load i64, i64* %RAX
  %13181 = load i64, i64* %PC
  %13182 = add i64 %13181, 3
  store i64 %13182, i64* %PC
  %13183 = inttoptr i64 %13180 to i64*
  %13184 = load i64, i64* %13183
  store i64 %13184, i64* %RAX, align 8, !tbaa !2428
  %13185 = load i64, i64* %RBP
  %13186 = sub i64 %13185, 48
  %13187 = load i64, i64* %PC
  %13188 = add i64 %13187, 4
  store i64 %13188, i64* %PC
  %13189 = inttoptr i64 %13186 to i64*
  %13190 = load i64, i64* %13189
  store i64 %13190, i64* %RCX, align 8, !tbaa !2428
  %13191 = load i64, i64* %RCX
  %13192 = add i64 %13191, 12
  %13193 = load i64, i64* %PC
  %13194 = add i64 %13193, 4
  store i64 %13194, i64* %PC
  %13195 = inttoptr i64 %13192 to i32*
  %13196 = load i32, i32* %13195
  %13197 = sext i32 %13196 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %13198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %13198, align 1, !tbaa !2432
  %13199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %13199, align 1, !tbaa !2446
  %13200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13200, align 1, !tbaa !2447
  %13201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13201, align 1, !tbaa !2448
  %13202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13202, align 1, !tbaa !2449
  %13203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13203, align 1, !tbaa !2450
  %13204 = load i64, i64* %RBP
  %13205 = sub i64 %13204, 48
  %13206 = load i64, i64* %PC
  %13207 = add i64 %13206, 4
  store i64 %13207, i64* %PC
  %13208 = inttoptr i64 %13205 to i64*
  %13209 = load i64, i64* %13208
  store i64 %13209, i64* %RCX, align 8, !tbaa !2428
  %13210 = load i64, i64* %RDX
  %13211 = load i64, i64* %RCX
  %13212 = add i64 %13211, 16
  %13213 = load i64, i64* %PC
  %13214 = add i64 %13213, 4
  store i64 %13214, i64* %PC
  %13215 = inttoptr i64 %13212 to i32*
  %13216 = load i32, i32* %13215
  %13217 = shl i64 %13210, 32
  %13218 = ashr exact i64 %13217, 32
  %13219 = sext i32 %13216 to i64
  %13220 = mul nsw i64 %13219, %13218
  %13221 = trunc i64 %13220 to i32
  %13222 = and i64 %13220, 4294967295
  store i64 %13222, i64* %RDX, align 8, !tbaa !2428
  %13223 = shl i64 %13220, 32
  %13224 = ashr exact i64 %13223, 32
  %13225 = icmp ne i64 %13224, %13220
  %13226 = zext i1 %13225 to i8
  %13227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13226, i8* %13227, align 1, !tbaa !2432
  %13228 = and i32 %13221, 255
  %13229 = call i32 @llvm.ctpop.i32(i32 %13228) #16
  %13230 = trunc i32 %13229 to i8
  %13231 = and i8 %13230, 1
  %13232 = xor i8 %13231, 1
  %13233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13232, i8* %13233, align 1, !tbaa !2446
  %13234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13234, align 1, !tbaa !2447
  %13235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13235, align 1, !tbaa !2448
  %13236 = lshr i32 %13221, 31
  %13237 = trunc i32 %13236 to i8
  %13238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13237, i8* %13238, align 1, !tbaa !2449
  %13239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13226, i8* %13239, align 1, !tbaa !2450
  %13240 = load i64, i64* %RBP
  %13241 = sub i64 %13240, 48
  %13242 = load i64, i64* %PC
  %13243 = add i64 %13242, 4
  store i64 %13243, i64* %PC
  %13244 = inttoptr i64 %13241 to i64*
  %13245 = load i64, i64* %13244
  store i64 %13245, i64* %RCX, align 8, !tbaa !2428
  %13246 = load i64, i64* %RDX
  %13247 = load i64, i64* %RCX
  %13248 = add i64 %13247, 20
  %13249 = load i64, i64* %PC
  %13250 = add i64 %13249, 4
  store i64 %13250, i64* %PC
  %13251 = inttoptr i64 %13248 to i32*
  %13252 = load i32, i32* %13251
  %13253 = shl i64 %13246, 32
  %13254 = ashr exact i64 %13253, 32
  %13255 = sext i32 %13252 to i64
  %13256 = mul nsw i64 %13255, %13254
  %13257 = trunc i64 %13256 to i32
  %13258 = and i64 %13256, 4294967295
  store i64 %13258, i64* %RDX, align 8, !tbaa !2428
  %13259 = shl i64 %13256, 32
  %13260 = ashr exact i64 %13259, 32
  %13261 = icmp ne i64 %13260, %13256
  %13262 = zext i1 %13261 to i8
  %13263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13262, i8* %13263, align 1, !tbaa !2432
  %13264 = and i32 %13257, 255
  %13265 = call i32 @llvm.ctpop.i32(i32 %13264) #16
  %13266 = trunc i32 %13265 to i8
  %13267 = and i8 %13266, 1
  %13268 = xor i8 %13267, 1
  %13269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13268, i8* %13269, align 1, !tbaa !2446
  %13270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13270, align 1, !tbaa !2447
  %13271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13271, align 1, !tbaa !2448
  %13272 = lshr i32 %13257, 31
  %13273 = trunc i32 %13272 to i8
  %13274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13273, i8* %13274, align 1, !tbaa !2449
  %13275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13262, i8* %13275, align 1, !tbaa !2450
  %13276 = load i64, i64* %RBP
  %13277 = sub i64 %13276, 52
  %13278 = load i64, i64* %PC
  %13279 = add i64 %13278, 3
  store i64 %13279, i64* %PC
  %13280 = inttoptr i64 %13277 to i32*
  %13281 = load i32, i32* %13280
  %13282 = zext i32 %13281 to i64
  store i64 %13282, i64* %RSI, align 8, !tbaa !2428
  %13283 = load i64, i64* %RBP
  %13284 = sub i64 %13283, 48
  %13285 = load i64, i64* %PC
  %13286 = add i64 %13285, 4
  store i64 %13286, i64* %PC
  %13287 = inttoptr i64 %13284 to i64*
  %13288 = load i64, i64* %13287
  store i64 %13288, i64* %RCX, align 8, !tbaa !2428
  %13289 = load i64, i64* %RSI
  %13290 = load i64, i64* %RCX
  %13291 = add i64 %13290, 16
  %13292 = load i64, i64* %PC
  %13293 = add i64 %13292, 4
  store i64 %13293, i64* %PC
  %13294 = inttoptr i64 %13291 to i32*
  %13295 = load i32, i32* %13294
  %13296 = shl i64 %13289, 32
  %13297 = ashr exact i64 %13296, 32
  %13298 = sext i32 %13295 to i64
  %13299 = mul nsw i64 %13298, %13297
  %13300 = trunc i64 %13299 to i32
  %13301 = and i64 %13299, 4294967295
  store i64 %13301, i64* %RSI, align 8, !tbaa !2428
  %13302 = shl i64 %13299, 32
  %13303 = ashr exact i64 %13302, 32
  %13304 = icmp ne i64 %13303, %13299
  %13305 = zext i1 %13304 to i8
  %13306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13305, i8* %13306, align 1, !tbaa !2432
  %13307 = and i32 %13300, 255
  %13308 = call i32 @llvm.ctpop.i32(i32 %13307) #16
  %13309 = trunc i32 %13308 to i8
  %13310 = and i8 %13309, 1
  %13311 = xor i8 %13310, 1
  %13312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13311, i8* %13312, align 1, !tbaa !2446
  %13313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13313, align 1, !tbaa !2447
  %13314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13314, align 1, !tbaa !2448
  %13315 = lshr i32 %13300, 31
  %13316 = trunc i32 %13315 to i8
  %13317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13316, i8* %13317, align 1, !tbaa !2449
  %13318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13305, i8* %13318, align 1, !tbaa !2450
  %13319 = load i64, i64* %RBP
  %13320 = sub i64 %13319, 48
  %13321 = load i64, i64* %PC
  %13322 = add i64 %13321, 4
  store i64 %13322, i64* %PC
  %13323 = inttoptr i64 %13320 to i64*
  %13324 = load i64, i64* %13323
  store i64 %13324, i64* %RCX, align 8, !tbaa !2428
  %13325 = load i64, i64* %RSI
  %13326 = load i64, i64* %RCX
  %13327 = add i64 %13326, 20
  %13328 = load i64, i64* %PC
  %13329 = add i64 %13328, 4
  store i64 %13329, i64* %PC
  %13330 = inttoptr i64 %13327 to i32*
  %13331 = load i32, i32* %13330
  %13332 = shl i64 %13325, 32
  %13333 = ashr exact i64 %13332, 32
  %13334 = sext i32 %13331 to i64
  %13335 = mul nsw i64 %13334, %13333
  %13336 = trunc i64 %13335 to i32
  %13337 = and i64 %13335, 4294967295
  store i64 %13337, i64* %RSI, align 8, !tbaa !2428
  %13338 = shl i64 %13335, 32
  %13339 = ashr exact i64 %13338, 32
  %13340 = icmp ne i64 %13339, %13335
  %13341 = zext i1 %13340 to i8
  %13342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13341, i8* %13342, align 1, !tbaa !2432
  %13343 = and i32 %13336, 255
  %13344 = call i32 @llvm.ctpop.i32(i32 %13343) #16
  %13345 = trunc i32 %13344 to i8
  %13346 = and i8 %13345, 1
  %13347 = xor i8 %13346, 1
  %13348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13347, i8* %13348, align 1, !tbaa !2446
  %13349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13349, align 1, !tbaa !2447
  %13350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13350, align 1, !tbaa !2448
  %13351 = lshr i32 %13336, 31
  %13352 = trunc i32 %13351 to i8
  %13353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13352, i8* %13353, align 1, !tbaa !2449
  %13354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13341, i8* %13354, align 1, !tbaa !2450
  %13355 = load i64, i64* %RDX
  %13356 = load i32, i32* %ESI
  %13357 = zext i32 %13356 to i64
  %13358 = load i64, i64* %PC
  %13359 = add i64 %13358, 2
  store i64 %13359, i64* %PC
  %13360 = trunc i64 %13355 to i32
  %13361 = add i32 %13356, %13360
  %13362 = zext i32 %13361 to i64
  store i64 %13362, i64* %RDX, align 8, !tbaa !2428
  %13363 = icmp ult i32 %13361, %13360
  %13364 = icmp ult i32 %13361, %13356
  %13365 = or i1 %13363, %13364
  %13366 = zext i1 %13365 to i8
  %13367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13366, i8* %13367, align 1, !tbaa !2432
  %13368 = and i32 %13361, 255
  %13369 = call i32 @llvm.ctpop.i32(i32 %13368) #16
  %13370 = trunc i32 %13369 to i8
  %13371 = and i8 %13370, 1
  %13372 = xor i8 %13371, 1
  %13373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13372, i8* %13373, align 1, !tbaa !2446
  %13374 = xor i64 %13357, %13355
  %13375 = trunc i64 %13374 to i32
  %13376 = xor i32 %13375, %13361
  %13377 = lshr i32 %13376, 4
  %13378 = trunc i32 %13377 to i8
  %13379 = and i8 %13378, 1
  %13380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13379, i8* %13380, align 1, !tbaa !2447
  %13381 = icmp eq i32 %13361, 0
  %13382 = zext i1 %13381 to i8
  %13383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13382, i8* %13383, align 1, !tbaa !2448
  %13384 = lshr i32 %13361, 31
  %13385 = trunc i32 %13384 to i8
  %13386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13385, i8* %13386, align 1, !tbaa !2449
  %13387 = lshr i32 %13360, 31
  %13388 = lshr i32 %13356, 31
  %13389 = xor i32 %13384, %13387
  %13390 = xor i32 %13384, %13388
  %13391 = add nuw nsw i32 %13389, %13390
  %13392 = icmp eq i32 %13391, 2
  %13393 = zext i1 %13392 to i8
  %13394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13393, i8* %13394, align 1, !tbaa !2450
  %13395 = load i64, i64* %RBP
  %13396 = sub i64 %13395, 56
  %13397 = load i64, i64* %PC
  %13398 = add i64 %13397, 3
  store i64 %13398, i64* %PC
  %13399 = inttoptr i64 %13396 to i32*
  %13400 = load i32, i32* %13399
  %13401 = zext i32 %13400 to i64
  store i64 %13401, i64* %RSI, align 8, !tbaa !2428
  %13402 = load i64, i64* %RBP
  %13403 = sub i64 %13402, 48
  %13404 = load i64, i64* %PC
  %13405 = add i64 %13404, 4
  store i64 %13405, i64* %PC
  %13406 = inttoptr i64 %13403 to i64*
  %13407 = load i64, i64* %13406
  store i64 %13407, i64* %RCX, align 8, !tbaa !2428
  %13408 = load i64, i64* %RSI
  %13409 = load i64, i64* %RCX
  %13410 = add i64 %13409, 20
  %13411 = load i64, i64* %PC
  %13412 = add i64 %13411, 4
  store i64 %13412, i64* %PC
  %13413 = inttoptr i64 %13410 to i32*
  %13414 = load i32, i32* %13413
  %13415 = shl i64 %13408, 32
  %13416 = ashr exact i64 %13415, 32
  %13417 = sext i32 %13414 to i64
  %13418 = mul nsw i64 %13417, %13416
  %13419 = trunc i64 %13418 to i32
  %13420 = and i64 %13418, 4294967295
  store i64 %13420, i64* %RSI, align 8, !tbaa !2428
  %13421 = shl i64 %13418, 32
  %13422 = ashr exact i64 %13421, 32
  %13423 = icmp ne i64 %13422, %13418
  %13424 = zext i1 %13423 to i8
  %13425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13424, i8* %13425, align 1, !tbaa !2432
  %13426 = and i32 %13419, 255
  %13427 = call i32 @llvm.ctpop.i32(i32 %13426) #16
  %13428 = trunc i32 %13427 to i8
  %13429 = and i8 %13428, 1
  %13430 = xor i8 %13429, 1
  %13431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13430, i8* %13431, align 1, !tbaa !2446
  %13432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13432, align 1, !tbaa !2447
  %13433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13433, align 1, !tbaa !2448
  %13434 = lshr i32 %13419, 31
  %13435 = trunc i32 %13434 to i8
  %13436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13435, i8* %13436, align 1, !tbaa !2449
  %13437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13424, i8* %13437, align 1, !tbaa !2450
  %13438 = load i64, i64* %RDX
  %13439 = load i32, i32* %ESI
  %13440 = zext i32 %13439 to i64
  %13441 = load i64, i64* %PC
  %13442 = add i64 %13441, 2
  store i64 %13442, i64* %PC
  %13443 = trunc i64 %13438 to i32
  %13444 = add i32 %13439, %13443
  %13445 = zext i32 %13444 to i64
  store i64 %13445, i64* %RDX, align 8, !tbaa !2428
  %13446 = icmp ult i32 %13444, %13443
  %13447 = icmp ult i32 %13444, %13439
  %13448 = or i1 %13446, %13447
  %13449 = zext i1 %13448 to i8
  %13450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13449, i8* %13450, align 1, !tbaa !2432
  %13451 = and i32 %13444, 255
  %13452 = call i32 @llvm.ctpop.i32(i32 %13451) #16
  %13453 = trunc i32 %13452 to i8
  %13454 = and i8 %13453, 1
  %13455 = xor i8 %13454, 1
  %13456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13455, i8* %13456, align 1, !tbaa !2446
  %13457 = xor i64 %13440, %13438
  %13458 = trunc i64 %13457 to i32
  %13459 = xor i32 %13458, %13444
  %13460 = lshr i32 %13459, 4
  %13461 = trunc i32 %13460 to i8
  %13462 = and i8 %13461, 1
  %13463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13462, i8* %13463, align 1, !tbaa !2447
  %13464 = icmp eq i32 %13444, 0
  %13465 = zext i1 %13464 to i8
  %13466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13465, i8* %13466, align 1, !tbaa !2448
  %13467 = lshr i32 %13444, 31
  %13468 = trunc i32 %13467 to i8
  %13469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13468, i8* %13469, align 1, !tbaa !2449
  %13470 = lshr i32 %13443, 31
  %13471 = lshr i32 %13439, 31
  %13472 = xor i32 %13467, %13470
  %13473 = xor i32 %13467, %13471
  %13474 = add nuw nsw i32 %13472, %13473
  %13475 = icmp eq i32 %13474, 2
  %13476 = zext i1 %13475 to i8
  %13477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13476, i8* %13477, align 1, !tbaa !2450
  %13478 = load i64, i64* %RDX
  %13479 = load i64, i64* %RBP
  %13480 = sub i64 %13479, 60
  %13481 = load i64, i64* %PC
  %13482 = add i64 %13481, 3
  store i64 %13482, i64* %PC
  %13483 = trunc i64 %13478 to i32
  %13484 = inttoptr i64 %13480 to i32*
  %13485 = load i32, i32* %13484
  %13486 = add i32 %13485, %13483
  %13487 = zext i32 %13486 to i64
  store i64 %13487, i64* %RDX, align 8, !tbaa !2428
  %13488 = icmp ult i32 %13486, %13483
  %13489 = icmp ult i32 %13486, %13485
  %13490 = or i1 %13488, %13489
  %13491 = zext i1 %13490 to i8
  %13492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13491, i8* %13492, align 1, !tbaa !2432
  %13493 = and i32 %13486, 255
  %13494 = call i32 @llvm.ctpop.i32(i32 %13493) #16
  %13495 = trunc i32 %13494 to i8
  %13496 = and i8 %13495, 1
  %13497 = xor i8 %13496, 1
  %13498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13497, i8* %13498, align 1, !tbaa !2446
  %13499 = xor i32 %13485, %13483
  %13500 = xor i32 %13499, %13486
  %13501 = lshr i32 %13500, 4
  %13502 = trunc i32 %13501 to i8
  %13503 = and i8 %13502, 1
  %13504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13503, i8* %13504, align 1, !tbaa !2447
  %13505 = icmp eq i32 %13486, 0
  %13506 = zext i1 %13505 to i8
  %13507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13506, i8* %13507, align 1, !tbaa !2448
  %13508 = lshr i32 %13486, 31
  %13509 = trunc i32 %13508 to i8
  %13510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13509, i8* %13510, align 1, !tbaa !2449
  %13511 = lshr i32 %13483, 31
  %13512 = lshr i32 %13485, 31
  %13513 = xor i32 %13508, %13511
  %13514 = xor i32 %13508, %13512
  %13515 = add nuw nsw i32 %13513, %13514
  %13516 = icmp eq i32 %13515, 2
  %13517 = zext i1 %13516 to i8
  %13518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13517, i8* %13518, align 1, !tbaa !2450
  %13519 = load i32, i32* %EDX
  %13520 = zext i32 %13519 to i64
  %13521 = load i64, i64* %PC
  %13522 = add i64 %13521, 3
  store i64 %13522, i64* %PC
  %13523 = shl i64 %13520, 32
  %13524 = ashr exact i64 %13523, 32
  store i64 %13524, i64* %RCX, align 8, !tbaa !2428
  %13525 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13526 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13527 = load i64, i64* %RAX
  %13528 = load i64, i64* %RCX
  %13529 = mul i64 %13528, 4
  %13530 = add i64 %13529, %13527
  %13531 = load i64, i64* %PC
  %13532 = add i64 %13531, 5
  store i64 %13532, i64* %PC
  %13533 = bitcast i8* %13526 to <2 x float>*
  %13534 = load <2 x float>, <2 x float>* %13533, align 1
  %13535 = getelementptr inbounds i8, i8* %13526, i64 8
  %13536 = bitcast i8* %13535 to <2 x i32>*
  %13537 = load <2 x i32>, <2 x i32>* %13536, align 1
  %13538 = inttoptr i64 %13530 to float*
  %13539 = load float, float* %13538
  %13540 = extractelement <2 x float> %13534, i32 0
  %13541 = fmul float %13540, %13539
  %13542 = bitcast i8* %13525 to float*
  store float %13541, float* %13542, align 1, !tbaa !2452
  %13543 = bitcast <2 x float> %13534 to <2 x i32>
  %13544 = extractelement <2 x i32> %13543, i32 1
  %13545 = getelementptr inbounds i8, i8* %13525, i64 4
  %13546 = bitcast i8* %13545 to i32*
  store i32 %13544, i32* %13546, align 1, !tbaa !2452
  %13547 = extractelement <2 x i32> %13537, i32 0
  %13548 = getelementptr inbounds i8, i8* %13525, i64 8
  %13549 = bitcast i8* %13548 to i32*
  store i32 %13547, i32* %13549, align 1, !tbaa !2452
  %13550 = extractelement <2 x i32> %13537, i32 1
  %13551 = getelementptr inbounds i8, i8* %13525, i64 12
  %13552 = bitcast i8* %13551 to i32*
  store i32 %13550, i32* %13552, align 1, !tbaa !2452
  %13553 = load i64, i64* %RBP
  %13554 = sub i64 %13553, 88
  %13555 = bitcast %union.vec128_t* %XMM0 to i8*
  %13556 = load i64, i64* %PC
  %13557 = add i64 %13556, 5
  store i64 %13557, i64* %PC
  %13558 = bitcast i8* %13555 to <2 x float>*
  %13559 = load <2 x float>, <2 x float>* %13558, align 1
  %13560 = extractelement <2 x float> %13559, i32 0
  %13561 = inttoptr i64 %13554 to float*
  store float %13560, float* %13561
  %13562 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13563 = load i64, i64* %RBP
  %13564 = sub i64 %13563, 88
  %13565 = load i64, i64* %PC
  %13566 = add i64 %13565, 5
  store i64 %13566, i64* %PC
  %13567 = inttoptr i64 %13564 to float*
  %13568 = load float, float* %13567
  %13569 = bitcast i8* %13562 to float*
  store float %13568, float* %13569, align 1, !tbaa !2452
  %13570 = getelementptr inbounds i8, i8* %13562, i64 4
  %13571 = bitcast i8* %13570 to float*
  store float 0.000000e+00, float* %13571, align 1, !tbaa !2452
  %13572 = getelementptr inbounds i8, i8* %13562, i64 8
  %13573 = bitcast i8* %13572 to float*
  store float 0.000000e+00, float* %13573, align 1, !tbaa !2452
  %13574 = getelementptr inbounds i8, i8* %13562, i64 12
  %13575 = bitcast i8* %13574 to float*
  store float 0.000000e+00, float* %13575, align 1, !tbaa !2452
  %13576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13577 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13578 = load i64, i64* %RBP
  %13579 = sub i64 %13578, 88
  %13580 = load i64, i64* %PC
  %13581 = add i64 %13580, 5
  store i64 %13581, i64* %PC
  %13582 = bitcast i8* %13577 to <2 x float>*
  %13583 = load <2 x float>, <2 x float>* %13582, align 1
  %13584 = getelementptr inbounds i8, i8* %13577, i64 8
  %13585 = bitcast i8* %13584 to <2 x i32>*
  %13586 = load <2 x i32>, <2 x i32>* %13585, align 1
  %13587 = inttoptr i64 %13579 to float*
  %13588 = load float, float* %13587
  %13589 = extractelement <2 x float> %13583, i32 0
  %13590 = fmul float %13589, %13588
  %13591 = bitcast i8* %13576 to float*
  store float %13590, float* %13591, align 1, !tbaa !2452
  %13592 = bitcast <2 x float> %13583 to <2 x i32>
  %13593 = extractelement <2 x i32> %13592, i32 1
  %13594 = getelementptr inbounds i8, i8* %13576, i64 4
  %13595 = bitcast i8* %13594 to i32*
  store i32 %13593, i32* %13595, align 1, !tbaa !2452
  %13596 = extractelement <2 x i32> %13586, i32 0
  %13597 = getelementptr inbounds i8, i8* %13576, i64 8
  %13598 = bitcast i8* %13597 to i32*
  store i32 %13596, i32* %13598, align 1, !tbaa !2452
  %13599 = extractelement <2 x i32> %13586, i32 1
  %13600 = getelementptr inbounds i8, i8* %13576, i64 12
  %13601 = bitcast i8* %13600 to i32*
  store i32 %13599, i32* %13601, align 1, !tbaa !2452
  %13602 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13603 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13604 = load i64, i64* %RBP
  %13605 = sub i64 %13604, 80
  %13606 = load i64, i64* %PC
  %13607 = add i64 %13606, 5
  store i64 %13607, i64* %PC
  %13608 = bitcast i8* %13603 to <2 x float>*
  %13609 = load <2 x float>, <2 x float>* %13608, align 1
  %13610 = getelementptr inbounds i8, i8* %13603, i64 8
  %13611 = bitcast i8* %13610 to <2 x i32>*
  %13612 = load <2 x i32>, <2 x i32>* %13611, align 1
  %13613 = inttoptr i64 %13605 to float*
  %13614 = load float, float* %13613
  %13615 = extractelement <2 x float> %13609, i32 0
  %13616 = fadd float %13615, %13614
  %13617 = bitcast i8* %13602 to float*
  store float %13616, float* %13617, align 1, !tbaa !2452
  %13618 = bitcast <2 x float> %13609 to <2 x i32>
  %13619 = extractelement <2 x i32> %13618, i32 1
  %13620 = getelementptr inbounds i8, i8* %13602, i64 4
  %13621 = bitcast i8* %13620 to i32*
  store i32 %13619, i32* %13621, align 1, !tbaa !2452
  %13622 = extractelement <2 x i32> %13612, i32 0
  %13623 = getelementptr inbounds i8, i8* %13602, i64 8
  %13624 = bitcast i8* %13623 to i32*
  store i32 %13622, i32* %13624, align 1, !tbaa !2452
  %13625 = extractelement <2 x i32> %13612, i32 1
  %13626 = getelementptr inbounds i8, i8* %13602, i64 12
  %13627 = bitcast i8* %13626 to i32*
  store i32 %13625, i32* %13627, align 1, !tbaa !2452
  %13628 = load i64, i64* %RBP
  %13629 = sub i64 %13628, 80
  %13630 = bitcast %union.vec128_t* %XMM0 to i8*
  %13631 = load i64, i64* %PC
  %13632 = add i64 %13631, 5
  store i64 %13632, i64* %PC
  %13633 = bitcast i8* %13630 to <2 x float>*
  %13634 = load <2 x float>, <2 x float>* %13633, align 1
  %13635 = extractelement <2 x float> %13634, i32 0
  %13636 = inttoptr i64 %13629 to float*
  store float %13635, float* %13636
  %13637 = load i64, i64* %RBP
  %13638 = sub i64 %13637, 40
  %13639 = load i64, i64* %PC
  %13640 = add i64 %13639, 4
  store i64 %13640, i64* %PC
  %13641 = inttoptr i64 %13638 to i64*
  %13642 = load i64, i64* %13641
  store i64 %13642, i64* %RAX, align 8, !tbaa !2428
  %13643 = load i64, i64* %RAX
  %13644 = load i64, i64* %PC
  %13645 = add i64 %13644, 3
  store i64 %13645, i64* %PC
  %13646 = inttoptr i64 %13643 to i64*
  %13647 = load i64, i64* %13646
  store i64 %13647, i64* %RAX, align 8, !tbaa !2428
  %13648 = load i64, i64* %RBP
  %13649 = sub i64 %13648, 40
  %13650 = load i64, i64* %PC
  %13651 = add i64 %13650, 4
  store i64 %13651, i64* %PC
  %13652 = inttoptr i64 %13649 to i64*
  %13653 = load i64, i64* %13652
  store i64 %13653, i64* %RCX, align 8, !tbaa !2428
  %13654 = load i64, i64* %RCX
  %13655 = add i64 %13654, 12
  %13656 = load i64, i64* %PC
  %13657 = add i64 %13656, 4
  store i64 %13657, i64* %PC
  %13658 = inttoptr i64 %13655 to i32*
  %13659 = load i32, i32* %13658
  %13660 = sext i32 %13659 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %13661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %13661, align 1, !tbaa !2432
  %13662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %13662, align 1, !tbaa !2446
  %13663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13663, align 1, !tbaa !2447
  %13664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13664, align 1, !tbaa !2448
  %13665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13665, align 1, !tbaa !2449
  %13666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13666, align 1, !tbaa !2450
  %13667 = load i64, i64* %RBP
  %13668 = sub i64 %13667, 40
  %13669 = load i64, i64* %PC
  %13670 = add i64 %13669, 4
  store i64 %13670, i64* %PC
  %13671 = inttoptr i64 %13668 to i64*
  %13672 = load i64, i64* %13671
  store i64 %13672, i64* %RCX, align 8, !tbaa !2428
  %13673 = load i64, i64* %RDX
  %13674 = load i64, i64* %RCX
  %13675 = add i64 %13674, 16
  %13676 = load i64, i64* %PC
  %13677 = add i64 %13676, 4
  store i64 %13677, i64* %PC
  %13678 = inttoptr i64 %13675 to i32*
  %13679 = load i32, i32* %13678
  %13680 = shl i64 %13673, 32
  %13681 = ashr exact i64 %13680, 32
  %13682 = sext i32 %13679 to i64
  %13683 = mul nsw i64 %13682, %13681
  %13684 = trunc i64 %13683 to i32
  %13685 = and i64 %13683, 4294967295
  store i64 %13685, i64* %RDX, align 8, !tbaa !2428
  %13686 = shl i64 %13683, 32
  %13687 = ashr exact i64 %13686, 32
  %13688 = icmp ne i64 %13687, %13683
  %13689 = zext i1 %13688 to i8
  %13690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13689, i8* %13690, align 1, !tbaa !2432
  %13691 = and i32 %13684, 255
  %13692 = call i32 @llvm.ctpop.i32(i32 %13691) #16
  %13693 = trunc i32 %13692 to i8
  %13694 = and i8 %13693, 1
  %13695 = xor i8 %13694, 1
  %13696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13695, i8* %13696, align 1, !tbaa !2446
  %13697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13697, align 1, !tbaa !2447
  %13698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13698, align 1, !tbaa !2448
  %13699 = lshr i32 %13684, 31
  %13700 = trunc i32 %13699 to i8
  %13701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13700, i8* %13701, align 1, !tbaa !2449
  %13702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13689, i8* %13702, align 1, !tbaa !2450
  %13703 = load i64, i64* %RBP
  %13704 = sub i64 %13703, 40
  %13705 = load i64, i64* %PC
  %13706 = add i64 %13705, 4
  store i64 %13706, i64* %PC
  %13707 = inttoptr i64 %13704 to i64*
  %13708 = load i64, i64* %13707
  store i64 %13708, i64* %RCX, align 8, !tbaa !2428
  %13709 = load i64, i64* %RDX
  %13710 = load i64, i64* %RCX
  %13711 = add i64 %13710, 20
  %13712 = load i64, i64* %PC
  %13713 = add i64 %13712, 4
  store i64 %13713, i64* %PC
  %13714 = inttoptr i64 %13711 to i32*
  %13715 = load i32, i32* %13714
  %13716 = shl i64 %13709, 32
  %13717 = ashr exact i64 %13716, 32
  %13718 = sext i32 %13715 to i64
  %13719 = mul nsw i64 %13718, %13717
  %13720 = trunc i64 %13719 to i32
  %13721 = and i64 %13719, 4294967295
  store i64 %13721, i64* %RDX, align 8, !tbaa !2428
  %13722 = shl i64 %13719, 32
  %13723 = ashr exact i64 %13722, 32
  %13724 = icmp ne i64 %13723, %13719
  %13725 = zext i1 %13724 to i8
  %13726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13725, i8* %13726, align 1, !tbaa !2432
  %13727 = and i32 %13720, 255
  %13728 = call i32 @llvm.ctpop.i32(i32 %13727) #16
  %13729 = trunc i32 %13728 to i8
  %13730 = and i8 %13729, 1
  %13731 = xor i8 %13730, 1
  %13732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13731, i8* %13732, align 1, !tbaa !2446
  %13733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13733, align 1, !tbaa !2447
  %13734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13734, align 1, !tbaa !2448
  %13735 = lshr i32 %13720, 31
  %13736 = trunc i32 %13735 to i8
  %13737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13736, i8* %13737, align 1, !tbaa !2449
  %13738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13725, i8* %13738, align 1, !tbaa !2450
  %13739 = load i64, i64* %RBP
  %13740 = sub i64 %13739, 52
  %13741 = load i64, i64* %PC
  %13742 = add i64 %13741, 3
  store i64 %13742, i64* %PC
  %13743 = inttoptr i64 %13740 to i32*
  %13744 = load i32, i32* %13743
  %13745 = zext i32 %13744 to i64
  store i64 %13745, i64* %RSI, align 8, !tbaa !2428
  %13746 = load i64, i64* %RBP
  %13747 = sub i64 %13746, 40
  %13748 = load i64, i64* %PC
  %13749 = add i64 %13748, 4
  store i64 %13749, i64* %PC
  %13750 = inttoptr i64 %13747 to i64*
  %13751 = load i64, i64* %13750
  store i64 %13751, i64* %RCX, align 8, !tbaa !2428
  %13752 = load i64, i64* %RSI
  %13753 = load i64, i64* %RCX
  %13754 = add i64 %13753, 16
  %13755 = load i64, i64* %PC
  %13756 = add i64 %13755, 4
  store i64 %13756, i64* %PC
  %13757 = inttoptr i64 %13754 to i32*
  %13758 = load i32, i32* %13757
  %13759 = shl i64 %13752, 32
  %13760 = ashr exact i64 %13759, 32
  %13761 = sext i32 %13758 to i64
  %13762 = mul nsw i64 %13761, %13760
  %13763 = trunc i64 %13762 to i32
  %13764 = and i64 %13762, 4294967295
  store i64 %13764, i64* %RSI, align 8, !tbaa !2428
  %13765 = shl i64 %13762, 32
  %13766 = ashr exact i64 %13765, 32
  %13767 = icmp ne i64 %13766, %13762
  %13768 = zext i1 %13767 to i8
  %13769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13768, i8* %13769, align 1, !tbaa !2432
  %13770 = and i32 %13763, 255
  %13771 = call i32 @llvm.ctpop.i32(i32 %13770) #16
  %13772 = trunc i32 %13771 to i8
  %13773 = and i8 %13772, 1
  %13774 = xor i8 %13773, 1
  %13775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13774, i8* %13775, align 1, !tbaa !2446
  %13776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13776, align 1, !tbaa !2447
  %13777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13777, align 1, !tbaa !2448
  %13778 = lshr i32 %13763, 31
  %13779 = trunc i32 %13778 to i8
  %13780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13779, i8* %13780, align 1, !tbaa !2449
  %13781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13768, i8* %13781, align 1, !tbaa !2450
  %13782 = load i64, i64* %RBP
  %13783 = sub i64 %13782, 40
  %13784 = load i64, i64* %PC
  %13785 = add i64 %13784, 4
  store i64 %13785, i64* %PC
  %13786 = inttoptr i64 %13783 to i64*
  %13787 = load i64, i64* %13786
  store i64 %13787, i64* %RCX, align 8, !tbaa !2428
  %13788 = load i64, i64* %RSI
  %13789 = load i64, i64* %RCX
  %13790 = add i64 %13789, 20
  %13791 = load i64, i64* %PC
  %13792 = add i64 %13791, 4
  store i64 %13792, i64* %PC
  %13793 = inttoptr i64 %13790 to i32*
  %13794 = load i32, i32* %13793
  %13795 = shl i64 %13788, 32
  %13796 = ashr exact i64 %13795, 32
  %13797 = sext i32 %13794 to i64
  %13798 = mul nsw i64 %13797, %13796
  %13799 = trunc i64 %13798 to i32
  %13800 = and i64 %13798, 4294967295
  store i64 %13800, i64* %RSI, align 8, !tbaa !2428
  %13801 = shl i64 %13798, 32
  %13802 = ashr exact i64 %13801, 32
  %13803 = icmp ne i64 %13802, %13798
  %13804 = zext i1 %13803 to i8
  %13805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13804, i8* %13805, align 1, !tbaa !2432
  %13806 = and i32 %13799, 255
  %13807 = call i32 @llvm.ctpop.i32(i32 %13806) #16
  %13808 = trunc i32 %13807 to i8
  %13809 = and i8 %13808, 1
  %13810 = xor i8 %13809, 1
  %13811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13810, i8* %13811, align 1, !tbaa !2446
  %13812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13812, align 1, !tbaa !2447
  %13813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13813, align 1, !tbaa !2448
  %13814 = lshr i32 %13799, 31
  %13815 = trunc i32 %13814 to i8
  %13816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13815, i8* %13816, align 1, !tbaa !2449
  %13817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13804, i8* %13817, align 1, !tbaa !2450
  %13818 = load i64, i64* %RDX
  %13819 = load i32, i32* %ESI
  %13820 = zext i32 %13819 to i64
  %13821 = load i64, i64* %PC
  %13822 = add i64 %13821, 2
  store i64 %13822, i64* %PC
  %13823 = trunc i64 %13818 to i32
  %13824 = add i32 %13819, %13823
  %13825 = zext i32 %13824 to i64
  store i64 %13825, i64* %RDX, align 8, !tbaa !2428
  %13826 = icmp ult i32 %13824, %13823
  %13827 = icmp ult i32 %13824, %13819
  %13828 = or i1 %13826, %13827
  %13829 = zext i1 %13828 to i8
  %13830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13829, i8* %13830, align 1, !tbaa !2432
  %13831 = and i32 %13824, 255
  %13832 = call i32 @llvm.ctpop.i32(i32 %13831) #16
  %13833 = trunc i32 %13832 to i8
  %13834 = and i8 %13833, 1
  %13835 = xor i8 %13834, 1
  %13836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13835, i8* %13836, align 1, !tbaa !2446
  %13837 = xor i64 %13820, %13818
  %13838 = trunc i64 %13837 to i32
  %13839 = xor i32 %13838, %13824
  %13840 = lshr i32 %13839, 4
  %13841 = trunc i32 %13840 to i8
  %13842 = and i8 %13841, 1
  %13843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13842, i8* %13843, align 1, !tbaa !2447
  %13844 = icmp eq i32 %13824, 0
  %13845 = zext i1 %13844 to i8
  %13846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13845, i8* %13846, align 1, !tbaa !2448
  %13847 = lshr i32 %13824, 31
  %13848 = trunc i32 %13847 to i8
  %13849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13848, i8* %13849, align 1, !tbaa !2449
  %13850 = lshr i32 %13823, 31
  %13851 = lshr i32 %13819, 31
  %13852 = xor i32 %13847, %13850
  %13853 = xor i32 %13847, %13851
  %13854 = add nuw nsw i32 %13852, %13853
  %13855 = icmp eq i32 %13854, 2
  %13856 = zext i1 %13855 to i8
  %13857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13856, i8* %13857, align 1, !tbaa !2450
  %13858 = load i64, i64* %RBP
  %13859 = sub i64 %13858, 56
  %13860 = load i64, i64* %PC
  %13861 = add i64 %13860, 3
  store i64 %13861, i64* %PC
  %13862 = inttoptr i64 %13859 to i32*
  %13863 = load i32, i32* %13862
  %13864 = zext i32 %13863 to i64
  store i64 %13864, i64* %RSI, align 8, !tbaa !2428
  %13865 = load i64, i64* %RBP
  %13866 = sub i64 %13865, 40
  %13867 = load i64, i64* %PC
  %13868 = add i64 %13867, 4
  store i64 %13868, i64* %PC
  %13869 = inttoptr i64 %13866 to i64*
  %13870 = load i64, i64* %13869
  store i64 %13870, i64* %RCX, align 8, !tbaa !2428
  %13871 = load i64, i64* %RSI
  %13872 = load i64, i64* %RCX
  %13873 = add i64 %13872, 20
  %13874 = load i64, i64* %PC
  %13875 = add i64 %13874, 4
  store i64 %13875, i64* %PC
  %13876 = inttoptr i64 %13873 to i32*
  %13877 = load i32, i32* %13876
  %13878 = shl i64 %13871, 32
  %13879 = ashr exact i64 %13878, 32
  %13880 = sext i32 %13877 to i64
  %13881 = mul nsw i64 %13880, %13879
  %13882 = trunc i64 %13881 to i32
  %13883 = and i64 %13881, 4294967295
  store i64 %13883, i64* %RSI, align 8, !tbaa !2428
  %13884 = shl i64 %13881, 32
  %13885 = ashr exact i64 %13884, 32
  %13886 = icmp ne i64 %13885, %13881
  %13887 = zext i1 %13886 to i8
  %13888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13887, i8* %13888, align 1, !tbaa !2432
  %13889 = and i32 %13882, 255
  %13890 = call i32 @llvm.ctpop.i32(i32 %13889) #16
  %13891 = trunc i32 %13890 to i8
  %13892 = and i8 %13891, 1
  %13893 = xor i8 %13892, 1
  %13894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13893, i8* %13894, align 1, !tbaa !2446
  %13895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13895, align 1, !tbaa !2447
  %13896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13896, align 1, !tbaa !2448
  %13897 = lshr i32 %13882, 31
  %13898 = trunc i32 %13897 to i8
  %13899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13898, i8* %13899, align 1, !tbaa !2449
  %13900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13887, i8* %13900, align 1, !tbaa !2450
  %13901 = load i64, i64* %RDX
  %13902 = load i32, i32* %ESI
  %13903 = zext i32 %13902 to i64
  %13904 = load i64, i64* %PC
  %13905 = add i64 %13904, 2
  store i64 %13905, i64* %PC
  %13906 = trunc i64 %13901 to i32
  %13907 = add i32 %13902, %13906
  %13908 = zext i32 %13907 to i64
  store i64 %13908, i64* %RDX, align 8, !tbaa !2428
  %13909 = icmp ult i32 %13907, %13906
  %13910 = icmp ult i32 %13907, %13902
  %13911 = or i1 %13909, %13910
  %13912 = zext i1 %13911 to i8
  %13913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13912, i8* %13913, align 1, !tbaa !2432
  %13914 = and i32 %13907, 255
  %13915 = call i32 @llvm.ctpop.i32(i32 %13914) #16
  %13916 = trunc i32 %13915 to i8
  %13917 = and i8 %13916, 1
  %13918 = xor i8 %13917, 1
  %13919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13918, i8* %13919, align 1, !tbaa !2446
  %13920 = xor i64 %13903, %13901
  %13921 = trunc i64 %13920 to i32
  %13922 = xor i32 %13921, %13907
  %13923 = lshr i32 %13922, 4
  %13924 = trunc i32 %13923 to i8
  %13925 = and i8 %13924, 1
  %13926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13925, i8* %13926, align 1, !tbaa !2447
  %13927 = icmp eq i32 %13907, 0
  %13928 = zext i1 %13927 to i8
  %13929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13928, i8* %13929, align 1, !tbaa !2448
  %13930 = lshr i32 %13907, 31
  %13931 = trunc i32 %13930 to i8
  %13932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13931, i8* %13932, align 1, !tbaa !2449
  %13933 = lshr i32 %13906, 31
  %13934 = lshr i32 %13902, 31
  %13935 = xor i32 %13930, %13933
  %13936 = xor i32 %13930, %13934
  %13937 = add nuw nsw i32 %13935, %13936
  %13938 = icmp eq i32 %13937, 2
  %13939 = zext i1 %13938 to i8
  %13940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13939, i8* %13940, align 1, !tbaa !2450
  %13941 = load i64, i64* %RDX
  %13942 = load i64, i64* %RBP
  %13943 = sub i64 %13942, 60
  %13944 = load i64, i64* %PC
  %13945 = add i64 %13944, 3
  store i64 %13945, i64* %PC
  %13946 = trunc i64 %13941 to i32
  %13947 = inttoptr i64 %13943 to i32*
  %13948 = load i32, i32* %13947
  %13949 = add i32 %13948, %13946
  %13950 = zext i32 %13949 to i64
  store i64 %13950, i64* %RDX, align 8, !tbaa !2428
  %13951 = icmp ult i32 %13949, %13946
  %13952 = icmp ult i32 %13949, %13948
  %13953 = or i1 %13951, %13952
  %13954 = zext i1 %13953 to i8
  %13955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13954, i8* %13955, align 1, !tbaa !2432
  %13956 = and i32 %13949, 255
  %13957 = call i32 @llvm.ctpop.i32(i32 %13956) #16
  %13958 = trunc i32 %13957 to i8
  %13959 = and i8 %13958, 1
  %13960 = xor i8 %13959, 1
  %13961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13960, i8* %13961, align 1, !tbaa !2446
  %13962 = xor i32 %13948, %13946
  %13963 = xor i32 %13962, %13949
  %13964 = lshr i32 %13963, 4
  %13965 = trunc i32 %13964 to i8
  %13966 = and i8 %13965, 1
  %13967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13966, i8* %13967, align 1, !tbaa !2447
  %13968 = icmp eq i32 %13949, 0
  %13969 = zext i1 %13968 to i8
  %13970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13969, i8* %13970, align 1, !tbaa !2448
  %13971 = lshr i32 %13949, 31
  %13972 = trunc i32 %13971 to i8
  %13973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13972, i8* %13973, align 1, !tbaa !2449
  %13974 = lshr i32 %13946, 31
  %13975 = lshr i32 %13948, 31
  %13976 = xor i32 %13971, %13974
  %13977 = xor i32 %13971, %13975
  %13978 = add nuw nsw i32 %13976, %13977
  %13979 = icmp eq i32 %13978, 2
  %13980 = zext i1 %13979 to i8
  %13981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13980, i8* %13981, align 1, !tbaa !2450
  %13982 = load i32, i32* %EDX
  %13983 = zext i32 %13982 to i64
  %13984 = load i64, i64* %PC
  %13985 = add i64 %13984, 3
  store i64 %13985, i64* %PC
  %13986 = shl i64 %13983, 32
  %13987 = ashr exact i64 %13986, 32
  store i64 %13987, i64* %RCX, align 8, !tbaa !2428
  %13988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13989 = load i64, i64* %RAX
  %13990 = load i64, i64* %RCX
  %13991 = mul i64 %13990, 4
  %13992 = add i64 %13991, %13989
  %13993 = load i64, i64* %PC
  %13994 = add i64 %13993, 5
  store i64 %13994, i64* %PC
  %13995 = inttoptr i64 %13992 to float*
  %13996 = load float, float* %13995
  %13997 = bitcast i8* %13988 to float*
  store float %13996, float* %13997, align 1, !tbaa !2452
  %13998 = getelementptr inbounds i8, i8* %13988, i64 4
  %13999 = bitcast i8* %13998 to float*
  store float 0.000000e+00, float* %13999, align 1, !tbaa !2452
  %14000 = getelementptr inbounds i8, i8* %13988, i64 8
  %14001 = bitcast i8* %14000 to float*
  store float 0.000000e+00, float* %14001, align 1, !tbaa !2452
  %14002 = getelementptr inbounds i8, i8* %13988, i64 12
  %14003 = bitcast i8* %14002 to float*
  store float 0.000000e+00, float* %14003, align 1, !tbaa !2452
  %14004 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14005 = load i64, i64* %PC
  %14006 = add i64 %14005, 9
  store i64 %14006, i64* %PC
  %14007 = load float, float* bitcast (%omega_type* @omega to float*)
  %14008 = bitcast i8* %14004 to float*
  store float %14007, float* %14008, align 1, !tbaa !2452
  %14009 = getelementptr inbounds i8, i8* %14004, i64 4
  %14010 = bitcast i8* %14009 to float*
  store float 0.000000e+00, float* %14010, align 1, !tbaa !2452
  %14011 = getelementptr inbounds i8, i8* %14004, i64 8
  %14012 = bitcast i8* %14011 to float*
  store float 0.000000e+00, float* %14012, align 1, !tbaa !2452
  %14013 = getelementptr inbounds i8, i8* %14004, i64 12
  %14014 = bitcast i8* %14013 to float*
  store float 0.000000e+00, float* %14014, align 1, !tbaa !2452
  %14015 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14016 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14017 = load i64, i64* %RBP
  %14018 = sub i64 %14017, 88
  %14019 = load i64, i64* %PC
  %14020 = add i64 %14019, 5
  store i64 %14020, i64* %PC
  %14021 = bitcast i8* %14016 to <2 x float>*
  %14022 = load <2 x float>, <2 x float>* %14021, align 1
  %14023 = getelementptr inbounds i8, i8* %14016, i64 8
  %14024 = bitcast i8* %14023 to <2 x i32>*
  %14025 = load <2 x i32>, <2 x i32>* %14024, align 1
  %14026 = inttoptr i64 %14018 to float*
  %14027 = load float, float* %14026
  %14028 = extractelement <2 x float> %14022, i32 0
  %14029 = fmul float %14028, %14027
  %14030 = bitcast i8* %14015 to float*
  store float %14029, float* %14030, align 1, !tbaa !2452
  %14031 = bitcast <2 x float> %14022 to <2 x i32>
  %14032 = extractelement <2 x i32> %14031, i32 1
  %14033 = getelementptr inbounds i8, i8* %14015, i64 4
  %14034 = bitcast i8* %14033 to i32*
  store i32 %14032, i32* %14034, align 1, !tbaa !2452
  %14035 = extractelement <2 x i32> %14025, i32 0
  %14036 = getelementptr inbounds i8, i8* %14015, i64 8
  %14037 = bitcast i8* %14036 to i32*
  store i32 %14035, i32* %14037, align 1, !tbaa !2452
  %14038 = extractelement <2 x i32> %14025, i32 1
  %14039 = getelementptr inbounds i8, i8* %14015, i64 12
  %14040 = bitcast i8* %14039 to i32*
  store i32 %14038, i32* %14040, align 1, !tbaa !2452
  %14041 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14042 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14043 = bitcast %union.vec128_t* %XMM1 to i8*
  %14044 = load i64, i64* %PC
  %14045 = add i64 %14044, 4
  store i64 %14045, i64* %PC
  %14046 = bitcast i8* %14042 to <2 x float>*
  %14047 = load <2 x float>, <2 x float>* %14046, align 1
  %14048 = getelementptr inbounds i8, i8* %14042, i64 8
  %14049 = bitcast i8* %14048 to <2 x i32>*
  %14050 = load <2 x i32>, <2 x i32>* %14049, align 1
  %14051 = bitcast i8* %14043 to <2 x float>*
  %14052 = load <2 x float>, <2 x float>* %14051, align 1
  %14053 = extractelement <2 x float> %14047, i32 0
  %14054 = extractelement <2 x float> %14052, i32 0
  %14055 = fadd float %14053, %14054
  %14056 = bitcast i8* %14041 to float*
  store float %14055, float* %14056, align 1, !tbaa !2452
  %14057 = bitcast <2 x float> %14047 to <2 x i32>
  %14058 = extractelement <2 x i32> %14057, i32 1
  %14059 = getelementptr inbounds i8, i8* %14041, i64 4
  %14060 = bitcast i8* %14059 to i32*
  store i32 %14058, i32* %14060, align 1, !tbaa !2452
  %14061 = extractelement <2 x i32> %14050, i32 0
  %14062 = getelementptr inbounds i8, i8* %14041, i64 8
  %14063 = bitcast i8* %14062 to i32*
  store i32 %14061, i32* %14063, align 1, !tbaa !2452
  %14064 = extractelement <2 x i32> %14050, i32 1
  %14065 = getelementptr inbounds i8, i8* %14041, i64 12
  %14066 = bitcast i8* %14065 to i32*
  store i32 %14064, i32* %14066, align 1, !tbaa !2452
  %14067 = load i64, i64* %RBP
  %14068 = add i64 %14067, 24
  %14069 = load i64, i64* %PC
  %14070 = add i64 %14069, 4
  store i64 %14070, i64* %PC
  %14071 = inttoptr i64 %14068 to i64*
  %14072 = load i64, i64* %14071
  store i64 %14072, i64* %RAX, align 8, !tbaa !2428
  %14073 = load i64, i64* %RAX
  %14074 = load i64, i64* %PC
  %14075 = add i64 %14074, 3
  store i64 %14075, i64* %PC
  %14076 = inttoptr i64 %14073 to i64*
  %14077 = load i64, i64* %14076
  store i64 %14077, i64* %RAX, align 8, !tbaa !2428
  %14078 = load i64, i64* %RBP
  %14079 = add i64 %14078, 24
  %14080 = load i64, i64* %PC
  %14081 = add i64 %14080, 4
  store i64 %14081, i64* %PC
  %14082 = inttoptr i64 %14079 to i64*
  %14083 = load i64, i64* %14082
  store i64 %14083, i64* %RCX, align 8, !tbaa !2428
  %14084 = load i64, i64* %RCX
  %14085 = add i64 %14084, 12
  %14086 = load i64, i64* %PC
  %14087 = add i64 %14086, 4
  store i64 %14087, i64* %PC
  %14088 = inttoptr i64 %14085 to i32*
  %14089 = load i32, i32* %14088
  %14090 = sext i32 %14089 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14091, align 1, !tbaa !2432
  %14092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14092, align 1, !tbaa !2446
  %14093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14093, align 1, !tbaa !2447
  %14094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14094, align 1, !tbaa !2448
  %14095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14095, align 1, !tbaa !2449
  %14096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14096, align 1, !tbaa !2450
  %14097 = load i64, i64* %RBP
  %14098 = add i64 %14097, 24
  %14099 = load i64, i64* %PC
  %14100 = add i64 %14099, 4
  store i64 %14100, i64* %PC
  %14101 = inttoptr i64 %14098 to i64*
  %14102 = load i64, i64* %14101
  store i64 %14102, i64* %RCX, align 8, !tbaa !2428
  %14103 = load i64, i64* %RDX
  %14104 = load i64, i64* %RCX
  %14105 = add i64 %14104, 16
  %14106 = load i64, i64* %PC
  %14107 = add i64 %14106, 4
  store i64 %14107, i64* %PC
  %14108 = inttoptr i64 %14105 to i32*
  %14109 = load i32, i32* %14108
  %14110 = shl i64 %14103, 32
  %14111 = ashr exact i64 %14110, 32
  %14112 = sext i32 %14109 to i64
  %14113 = mul nsw i64 %14112, %14111
  %14114 = trunc i64 %14113 to i32
  %14115 = and i64 %14113, 4294967295
  store i64 %14115, i64* %RDX, align 8, !tbaa !2428
  %14116 = shl i64 %14113, 32
  %14117 = ashr exact i64 %14116, 32
  %14118 = icmp ne i64 %14117, %14113
  %14119 = zext i1 %14118 to i8
  %14120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14119, i8* %14120, align 1, !tbaa !2432
  %14121 = and i32 %14114, 255
  %14122 = call i32 @llvm.ctpop.i32(i32 %14121) #16
  %14123 = trunc i32 %14122 to i8
  %14124 = and i8 %14123, 1
  %14125 = xor i8 %14124, 1
  %14126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14125, i8* %14126, align 1, !tbaa !2446
  %14127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14127, align 1, !tbaa !2447
  %14128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14128, align 1, !tbaa !2448
  %14129 = lshr i32 %14114, 31
  %14130 = trunc i32 %14129 to i8
  %14131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14130, i8* %14131, align 1, !tbaa !2449
  %14132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14119, i8* %14132, align 1, !tbaa !2450
  %14133 = load i64, i64* %RBP
  %14134 = add i64 %14133, 24
  %14135 = load i64, i64* %PC
  %14136 = add i64 %14135, 4
  store i64 %14136, i64* %PC
  %14137 = inttoptr i64 %14134 to i64*
  %14138 = load i64, i64* %14137
  store i64 %14138, i64* %RCX, align 8, !tbaa !2428
  %14139 = load i64, i64* %RDX
  %14140 = load i64, i64* %RCX
  %14141 = add i64 %14140, 20
  %14142 = load i64, i64* %PC
  %14143 = add i64 %14142, 4
  store i64 %14143, i64* %PC
  %14144 = inttoptr i64 %14141 to i32*
  %14145 = load i32, i32* %14144
  %14146 = shl i64 %14139, 32
  %14147 = ashr exact i64 %14146, 32
  %14148 = sext i32 %14145 to i64
  %14149 = mul nsw i64 %14148, %14147
  %14150 = trunc i64 %14149 to i32
  %14151 = and i64 %14149, 4294967295
  store i64 %14151, i64* %RDX, align 8, !tbaa !2428
  %14152 = shl i64 %14149, 32
  %14153 = ashr exact i64 %14152, 32
  %14154 = icmp ne i64 %14153, %14149
  %14155 = zext i1 %14154 to i8
  %14156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14155, i8* %14156, align 1, !tbaa !2432
  %14157 = and i32 %14150, 255
  %14158 = call i32 @llvm.ctpop.i32(i32 %14157) #16
  %14159 = trunc i32 %14158 to i8
  %14160 = and i8 %14159, 1
  %14161 = xor i8 %14160, 1
  %14162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14161, i8* %14162, align 1, !tbaa !2446
  %14163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14163, align 1, !tbaa !2447
  %14164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14164, align 1, !tbaa !2448
  %14165 = lshr i32 %14150, 31
  %14166 = trunc i32 %14165 to i8
  %14167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14166, i8* %14167, align 1, !tbaa !2449
  %14168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14155, i8* %14168, align 1, !tbaa !2450
  %14169 = load i64, i64* %RBP
  %14170 = sub i64 %14169, 52
  %14171 = load i64, i64* %PC
  %14172 = add i64 %14171, 3
  store i64 %14172, i64* %PC
  %14173 = inttoptr i64 %14170 to i32*
  %14174 = load i32, i32* %14173
  %14175 = zext i32 %14174 to i64
  store i64 %14175, i64* %RSI, align 8, !tbaa !2428
  %14176 = load i64, i64* %RBP
  %14177 = add i64 %14176, 24
  %14178 = load i64, i64* %PC
  %14179 = add i64 %14178, 4
  store i64 %14179, i64* %PC
  %14180 = inttoptr i64 %14177 to i64*
  %14181 = load i64, i64* %14180
  store i64 %14181, i64* %RCX, align 8, !tbaa !2428
  %14182 = load i64, i64* %RSI
  %14183 = load i64, i64* %RCX
  %14184 = add i64 %14183, 16
  %14185 = load i64, i64* %PC
  %14186 = add i64 %14185, 4
  store i64 %14186, i64* %PC
  %14187 = inttoptr i64 %14184 to i32*
  %14188 = load i32, i32* %14187
  %14189 = shl i64 %14182, 32
  %14190 = ashr exact i64 %14189, 32
  %14191 = sext i32 %14188 to i64
  %14192 = mul nsw i64 %14191, %14190
  %14193 = trunc i64 %14192 to i32
  %14194 = and i64 %14192, 4294967295
  store i64 %14194, i64* %RSI, align 8, !tbaa !2428
  %14195 = shl i64 %14192, 32
  %14196 = ashr exact i64 %14195, 32
  %14197 = icmp ne i64 %14196, %14192
  %14198 = zext i1 %14197 to i8
  %14199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14198, i8* %14199, align 1, !tbaa !2432
  %14200 = and i32 %14193, 255
  %14201 = call i32 @llvm.ctpop.i32(i32 %14200) #16
  %14202 = trunc i32 %14201 to i8
  %14203 = and i8 %14202, 1
  %14204 = xor i8 %14203, 1
  %14205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14204, i8* %14205, align 1, !tbaa !2446
  %14206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14206, align 1, !tbaa !2447
  %14207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14207, align 1, !tbaa !2448
  %14208 = lshr i32 %14193, 31
  %14209 = trunc i32 %14208 to i8
  %14210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14209, i8* %14210, align 1, !tbaa !2449
  %14211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14198, i8* %14211, align 1, !tbaa !2450
  %14212 = load i64, i64* %RBP
  %14213 = add i64 %14212, 24
  %14214 = load i64, i64* %PC
  %14215 = add i64 %14214, 4
  store i64 %14215, i64* %PC
  %14216 = inttoptr i64 %14213 to i64*
  %14217 = load i64, i64* %14216
  store i64 %14217, i64* %RCX, align 8, !tbaa !2428
  %14218 = load i64, i64* %RSI
  %14219 = load i64, i64* %RCX
  %14220 = add i64 %14219, 20
  %14221 = load i64, i64* %PC
  %14222 = add i64 %14221, 4
  store i64 %14222, i64* %PC
  %14223 = inttoptr i64 %14220 to i32*
  %14224 = load i32, i32* %14223
  %14225 = shl i64 %14218, 32
  %14226 = ashr exact i64 %14225, 32
  %14227 = sext i32 %14224 to i64
  %14228 = mul nsw i64 %14227, %14226
  %14229 = trunc i64 %14228 to i32
  %14230 = and i64 %14228, 4294967295
  store i64 %14230, i64* %RSI, align 8, !tbaa !2428
  %14231 = shl i64 %14228, 32
  %14232 = ashr exact i64 %14231, 32
  %14233 = icmp ne i64 %14232, %14228
  %14234 = zext i1 %14233 to i8
  %14235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14234, i8* %14235, align 1, !tbaa !2432
  %14236 = and i32 %14229, 255
  %14237 = call i32 @llvm.ctpop.i32(i32 %14236) #16
  %14238 = trunc i32 %14237 to i8
  %14239 = and i8 %14238, 1
  %14240 = xor i8 %14239, 1
  %14241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14240, i8* %14241, align 1, !tbaa !2446
  %14242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14242, align 1, !tbaa !2447
  %14243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14243, align 1, !tbaa !2448
  %14244 = lshr i32 %14229, 31
  %14245 = trunc i32 %14244 to i8
  %14246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14245, i8* %14246, align 1, !tbaa !2449
  %14247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14234, i8* %14247, align 1, !tbaa !2450
  %14248 = load i64, i64* %RDX
  %14249 = load i32, i32* %ESI
  %14250 = zext i32 %14249 to i64
  %14251 = load i64, i64* %PC
  %14252 = add i64 %14251, 2
  store i64 %14252, i64* %PC
  %14253 = trunc i64 %14248 to i32
  %14254 = add i32 %14249, %14253
  %14255 = zext i32 %14254 to i64
  store i64 %14255, i64* %RDX, align 8, !tbaa !2428
  %14256 = icmp ult i32 %14254, %14253
  %14257 = icmp ult i32 %14254, %14249
  %14258 = or i1 %14256, %14257
  %14259 = zext i1 %14258 to i8
  %14260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14259, i8* %14260, align 1, !tbaa !2432
  %14261 = and i32 %14254, 255
  %14262 = call i32 @llvm.ctpop.i32(i32 %14261) #16
  %14263 = trunc i32 %14262 to i8
  %14264 = and i8 %14263, 1
  %14265 = xor i8 %14264, 1
  %14266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14265, i8* %14266, align 1, !tbaa !2446
  %14267 = xor i64 %14250, %14248
  %14268 = trunc i64 %14267 to i32
  %14269 = xor i32 %14268, %14254
  %14270 = lshr i32 %14269, 4
  %14271 = trunc i32 %14270 to i8
  %14272 = and i8 %14271, 1
  %14273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14272, i8* %14273, align 1, !tbaa !2447
  %14274 = icmp eq i32 %14254, 0
  %14275 = zext i1 %14274 to i8
  %14276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14275, i8* %14276, align 1, !tbaa !2448
  %14277 = lshr i32 %14254, 31
  %14278 = trunc i32 %14277 to i8
  %14279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14278, i8* %14279, align 1, !tbaa !2449
  %14280 = lshr i32 %14253, 31
  %14281 = lshr i32 %14249, 31
  %14282 = xor i32 %14277, %14280
  %14283 = xor i32 %14277, %14281
  %14284 = add nuw nsw i32 %14282, %14283
  %14285 = icmp eq i32 %14284, 2
  %14286 = zext i1 %14285 to i8
  %14287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14286, i8* %14287, align 1, !tbaa !2450
  %14288 = load i64, i64* %RBP
  %14289 = sub i64 %14288, 56
  %14290 = load i64, i64* %PC
  %14291 = add i64 %14290, 3
  store i64 %14291, i64* %PC
  %14292 = inttoptr i64 %14289 to i32*
  %14293 = load i32, i32* %14292
  %14294 = zext i32 %14293 to i64
  store i64 %14294, i64* %RSI, align 8, !tbaa !2428
  %14295 = load i64, i64* %RBP
  %14296 = add i64 %14295, 24
  %14297 = load i64, i64* %PC
  %14298 = add i64 %14297, 4
  store i64 %14298, i64* %PC
  %14299 = inttoptr i64 %14296 to i64*
  %14300 = load i64, i64* %14299
  store i64 %14300, i64* %RCX, align 8, !tbaa !2428
  %14301 = load i64, i64* %RSI
  %14302 = load i64, i64* %RCX
  %14303 = add i64 %14302, 20
  %14304 = load i64, i64* %PC
  %14305 = add i64 %14304, 4
  store i64 %14305, i64* %PC
  %14306 = inttoptr i64 %14303 to i32*
  %14307 = load i32, i32* %14306
  %14308 = shl i64 %14301, 32
  %14309 = ashr exact i64 %14308, 32
  %14310 = sext i32 %14307 to i64
  %14311 = mul nsw i64 %14310, %14309
  %14312 = trunc i64 %14311 to i32
  %14313 = and i64 %14311, 4294967295
  store i64 %14313, i64* %RSI, align 8, !tbaa !2428
  %14314 = shl i64 %14311, 32
  %14315 = ashr exact i64 %14314, 32
  %14316 = icmp ne i64 %14315, %14311
  %14317 = zext i1 %14316 to i8
  %14318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14317, i8* %14318, align 1, !tbaa !2432
  %14319 = and i32 %14312, 255
  %14320 = call i32 @llvm.ctpop.i32(i32 %14319) #16
  %14321 = trunc i32 %14320 to i8
  %14322 = and i8 %14321, 1
  %14323 = xor i8 %14322, 1
  %14324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14323, i8* %14324, align 1, !tbaa !2446
  %14325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14325, align 1, !tbaa !2447
  %14326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14326, align 1, !tbaa !2448
  %14327 = lshr i32 %14312, 31
  %14328 = trunc i32 %14327 to i8
  %14329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14328, i8* %14329, align 1, !tbaa !2449
  %14330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14317, i8* %14330, align 1, !tbaa !2450
  %14331 = load i64, i64* %RDX
  %14332 = load i32, i32* %ESI
  %14333 = zext i32 %14332 to i64
  %14334 = load i64, i64* %PC
  %14335 = add i64 %14334, 2
  store i64 %14335, i64* %PC
  %14336 = trunc i64 %14331 to i32
  %14337 = add i32 %14332, %14336
  %14338 = zext i32 %14337 to i64
  store i64 %14338, i64* %RDX, align 8, !tbaa !2428
  %14339 = icmp ult i32 %14337, %14336
  %14340 = icmp ult i32 %14337, %14332
  %14341 = or i1 %14339, %14340
  %14342 = zext i1 %14341 to i8
  %14343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14342, i8* %14343, align 1, !tbaa !2432
  %14344 = and i32 %14337, 255
  %14345 = call i32 @llvm.ctpop.i32(i32 %14344) #16
  %14346 = trunc i32 %14345 to i8
  %14347 = and i8 %14346, 1
  %14348 = xor i8 %14347, 1
  %14349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14348, i8* %14349, align 1, !tbaa !2446
  %14350 = xor i64 %14333, %14331
  %14351 = trunc i64 %14350 to i32
  %14352 = xor i32 %14351, %14337
  %14353 = lshr i32 %14352, 4
  %14354 = trunc i32 %14353 to i8
  %14355 = and i8 %14354, 1
  %14356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14355, i8* %14356, align 1, !tbaa !2447
  %14357 = icmp eq i32 %14337, 0
  %14358 = zext i1 %14357 to i8
  %14359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14358, i8* %14359, align 1, !tbaa !2448
  %14360 = lshr i32 %14337, 31
  %14361 = trunc i32 %14360 to i8
  %14362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14361, i8* %14362, align 1, !tbaa !2449
  %14363 = lshr i32 %14336, 31
  %14364 = lshr i32 %14332, 31
  %14365 = xor i32 %14360, %14363
  %14366 = xor i32 %14360, %14364
  %14367 = add nuw nsw i32 %14365, %14366
  %14368 = icmp eq i32 %14367, 2
  %14369 = zext i1 %14368 to i8
  %14370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14369, i8* %14370, align 1, !tbaa !2450
  %14371 = load i64, i64* %RDX
  %14372 = load i64, i64* %RBP
  %14373 = sub i64 %14372, 60
  %14374 = load i64, i64* %PC
  %14375 = add i64 %14374, 3
  store i64 %14375, i64* %PC
  %14376 = trunc i64 %14371 to i32
  %14377 = inttoptr i64 %14373 to i32*
  %14378 = load i32, i32* %14377
  %14379 = add i32 %14378, %14376
  %14380 = zext i32 %14379 to i64
  store i64 %14380, i64* %RDX, align 8, !tbaa !2428
  %14381 = icmp ult i32 %14379, %14376
  %14382 = icmp ult i32 %14379, %14378
  %14383 = or i1 %14381, %14382
  %14384 = zext i1 %14383 to i8
  %14385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14384, i8* %14385, align 1, !tbaa !2432
  %14386 = and i32 %14379, 255
  %14387 = call i32 @llvm.ctpop.i32(i32 %14386) #16
  %14388 = trunc i32 %14387 to i8
  %14389 = and i8 %14388, 1
  %14390 = xor i8 %14389, 1
  %14391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14390, i8* %14391, align 1, !tbaa !2446
  %14392 = xor i32 %14378, %14376
  %14393 = xor i32 %14392, %14379
  %14394 = lshr i32 %14393, 4
  %14395 = trunc i32 %14394 to i8
  %14396 = and i8 %14395, 1
  %14397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14396, i8* %14397, align 1, !tbaa !2447
  %14398 = icmp eq i32 %14379, 0
  %14399 = zext i1 %14398 to i8
  %14400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14399, i8* %14400, align 1, !tbaa !2448
  %14401 = lshr i32 %14379, 31
  %14402 = trunc i32 %14401 to i8
  %14403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14402, i8* %14403, align 1, !tbaa !2449
  %14404 = lshr i32 %14376, 31
  %14405 = lshr i32 %14378, 31
  %14406 = xor i32 %14401, %14404
  %14407 = xor i32 %14401, %14405
  %14408 = add nuw nsw i32 %14406, %14407
  %14409 = icmp eq i32 %14408, 2
  %14410 = zext i1 %14409 to i8
  %14411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14410, i8* %14411, align 1, !tbaa !2450
  %14412 = load i32, i32* %EDX
  %14413 = zext i32 %14412 to i64
  %14414 = load i64, i64* %PC
  %14415 = add i64 %14414, 3
  store i64 %14415, i64* %PC
  %14416 = shl i64 %14413, 32
  %14417 = ashr exact i64 %14416, 32
  store i64 %14417, i64* %RCX, align 8, !tbaa !2428
  %14418 = load i64, i64* %RAX
  %14419 = load i64, i64* %RCX
  %14420 = mul i64 %14419, 4
  %14421 = add i64 %14420, %14418
  %14422 = bitcast %union.vec128_t* %XMM0 to i8*
  %14423 = load i64, i64* %PC
  %14424 = add i64 %14423, 5
  store i64 %14424, i64* %PC
  %14425 = bitcast i8* %14422 to <2 x float>*
  %14426 = load <2 x float>, <2 x float>* %14425, align 1
  %14427 = extractelement <2 x float> %14426, i32 0
  %14428 = inttoptr i64 %14421 to float*
  store float %14427, float* %14428
  %14429 = load i64, i64* %RBP
  %14430 = sub i64 %14429, 60
  %14431 = load i64, i64* %PC
  %14432 = add i64 %14431, 3
  store i64 %14432, i64* %PC
  %14433 = inttoptr i64 %14430 to i32*
  %14434 = load i32, i32* %14433
  %14435 = zext i32 %14434 to i64
  store i64 %14435, i64* %RAX, align 8, !tbaa !2428
  %14436 = load i64, i64* %RAX
  %14437 = load i64, i64* %PC
  %14438 = add i64 %14437, 3
  store i64 %14438, i64* %PC
  %14439 = trunc i64 %14436 to i32
  %14440 = add i32 1, %14439
  %14441 = zext i32 %14440 to i64
  store i64 %14441, i64* %RAX, align 8, !tbaa !2428
  %14442 = icmp ult i32 %14440, %14439
  %14443 = icmp ult i32 %14440, 1
  %14444 = or i1 %14442, %14443
  %14445 = zext i1 %14444 to i8
  %14446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14445, i8* %14446, align 1, !tbaa !2432
  %14447 = and i32 %14440, 255
  %14448 = call i32 @llvm.ctpop.i32(i32 %14447) #16
  %14449 = trunc i32 %14448 to i8
  %14450 = and i8 %14449, 1
  %14451 = xor i8 %14450, 1
  %14452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14451, i8* %14452, align 1, !tbaa !2446
  %14453 = xor i64 1, %14436
  %14454 = trunc i64 %14453 to i32
  %14455 = xor i32 %14454, %14440
  %14456 = lshr i32 %14455, 4
  %14457 = trunc i32 %14456 to i8
  %14458 = and i8 %14457, 1
  %14459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14458, i8* %14459, align 1, !tbaa !2447
  %14460 = icmp eq i32 %14440, 0
  %14461 = zext i1 %14460 to i8
  %14462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14461, i8* %14462, align 1, !tbaa !2448
  %14463 = lshr i32 %14440, 31
  %14464 = trunc i32 %14463 to i8
  %14465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14464, i8* %14465, align 1, !tbaa !2449
  %14466 = lshr i32 %14439, 31
  %14467 = xor i32 %14463, %14466
  %14468 = add nuw nsw i32 %14467, %14463
  %14469 = icmp eq i32 %14468, 2
  %14470 = zext i1 %14469 to i8
  %14471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14470, i8* %14471, align 1, !tbaa !2450
  %14472 = load i64, i64* %RBP
  %14473 = sub i64 %14472, 60
  %14474 = load i32, i32* %EAX
  %14475 = zext i32 %14474 to i64
  %14476 = load i64, i64* %PC
  %14477 = add i64 %14476, 3
  store i64 %14477, i64* %PC
  %14478 = inttoptr i64 %14473 to i32*
  store i32 %14474, i32* %14478
  %14479 = load i64, i64* %PC
  %14480 = sub i64 %14479, 2748
  %14481 = load i64, i64* %PC
  %14482 = add i64 %14481, 5
  store i64 %14482, i64* %PC
  %14483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14480, i64* %14483, align 8, !tbaa !2428
  br label %block_400d6a

block_401858:                                     ; preds = %block_401943, %block_401851
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.4, %block_401851 ], [ %MEMORY.1, %block_401943 ]
  %14484 = load i64, i64* %RBP
  %14485 = sub i64 %14484, 52
  %14486 = load i64, i64* %PC
  %14487 = add i64 %14486, 3
  store i64 %14487, i64* %PC
  %14488 = inttoptr i64 %14485 to i32*
  %14489 = load i32, i32* %14488
  %14490 = zext i32 %14489 to i64
  store i64 %14490, i64* %RAX, align 8, !tbaa !2428
  %14491 = load i32, i32* %EAX
  %14492 = zext i32 %14491 to i64
  %14493 = load i64, i64* %RBP
  %14494 = sub i64 %14493, 68
  %14495 = load i64, i64* %PC
  %14496 = add i64 %14495, 3
  store i64 %14496, i64* %PC
  %14497 = inttoptr i64 %14494 to i32*
  %14498 = load i32, i32* %14497
  %14499 = sub i32 %14491, %14498
  %14500 = icmp ult i32 %14491, %14498
  %14501 = zext i1 %14500 to i8
  %14502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14501, i8* %14502, align 1, !tbaa !2432
  %14503 = and i32 %14499, 255
  %14504 = call i32 @llvm.ctpop.i32(i32 %14503) #16
  %14505 = trunc i32 %14504 to i8
  %14506 = and i8 %14505, 1
  %14507 = xor i8 %14506, 1
  %14508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14507, i8* %14508, align 1, !tbaa !2446
  %14509 = xor i32 %14498, %14491
  %14510 = xor i32 %14509, %14499
  %14511 = lshr i32 %14510, 4
  %14512 = trunc i32 %14511 to i8
  %14513 = and i8 %14512, 1
  %14514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14513, i8* %14514, align 1, !tbaa !2447
  %14515 = icmp eq i32 %14499, 0
  %14516 = zext i1 %14515 to i8
  %14517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14516, i8* %14517, align 1, !tbaa !2448
  %14518 = lshr i32 %14499, 31
  %14519 = trunc i32 %14518 to i8
  %14520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14519, i8* %14520, align 1, !tbaa !2449
  %14521 = lshr i32 %14491, 31
  %14522 = lshr i32 %14498, 31
  %14523 = xor i32 %14522, %14521
  %14524 = xor i32 %14518, %14521
  %14525 = add nuw nsw i32 %14524, %14523
  %14526 = icmp eq i32 %14525, 2
  %14527 = zext i1 %14526 to i8
  %14528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14527, i8* %14528, align 1, !tbaa !2450
  %14529 = load i64, i64* %PC
  %14530 = add i64 %14529, 248
  %14531 = load i64, i64* %PC
  %14532 = add i64 %14531, 6
  %14533 = load i64, i64* %PC
  %14534 = add i64 %14533, 6
  store i64 %14534, i64* %PC
  %14535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14536 = load i8, i8* %14535, align 1, !tbaa !2449
  %14537 = icmp ne i8 %14536, 0
  %14538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14539 = load i8, i8* %14538, align 1, !tbaa !2450
  %14540 = icmp ne i8 %14539, 0
  %14541 = xor i1 %14537, %14540
  %14542 = xor i1 %14541, true
  %14543 = zext i1 %14542 to i8
  store i8 %14543, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14545 = select i1 %14541, i64 %14532, i64 %14530
  store i64 %14545, i64* %14544, align 8, !tbaa !2428
  %14546 = load i8, i8* %BRANCH_TAKEN
  %14547 = icmp eq i8 %14546, 1
  br i1 %14547, label %block_401956, label %block_401864

block_400d57:                                     ; preds = %block_400d50, %block_40182b
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_400d50 ], [ %MEMORY.5, %block_40182b ]
  %14548 = load i64, i64* %RBP
  %14549 = sub i64 %14548, 56
  %14550 = load i64, i64* %PC
  %14551 = add i64 %14550, 3
  store i64 %14551, i64* %PC
  %14552 = inttoptr i64 %14549 to i32*
  %14553 = load i32, i32* %14552
  %14554 = zext i32 %14553 to i64
  store i64 %14554, i64* %RAX, align 8, !tbaa !2428
  %14555 = load i32, i32* %EAX
  %14556 = zext i32 %14555 to i64
  %14557 = load i64, i64* %RBP
  %14558 = sub i64 %14557, 72
  %14559 = load i64, i64* %PC
  %14560 = add i64 %14559, 3
  store i64 %14560, i64* %PC
  %14561 = inttoptr i64 %14558 to i32*
  %14562 = load i32, i32* %14561
  %14563 = sub i32 %14555, %14562
  %14564 = icmp ult i32 %14555, %14562
  %14565 = zext i1 %14564 to i8
  %14566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14565, i8* %14566, align 1, !tbaa !2432
  %14567 = and i32 %14563, 255
  %14568 = call i32 @llvm.ctpop.i32(i32 %14567) #16
  %14569 = trunc i32 %14568 to i8
  %14570 = and i8 %14569, 1
  %14571 = xor i8 %14570, 1
  %14572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14571, i8* %14572, align 1, !tbaa !2446
  %14573 = xor i32 %14562, %14555
  %14574 = xor i32 %14573, %14563
  %14575 = lshr i32 %14574, 4
  %14576 = trunc i32 %14575 to i8
  %14577 = and i8 %14576, 1
  %14578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14577, i8* %14578, align 1, !tbaa !2447
  %14579 = icmp eq i32 %14563, 0
  %14580 = zext i1 %14579 to i8
  %14581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14580, i8* %14581, align 1, !tbaa !2448
  %14582 = lshr i32 %14563, 31
  %14583 = trunc i32 %14582 to i8
  %14584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14583, i8* %14584, align 1, !tbaa !2449
  %14585 = lshr i32 %14555, 31
  %14586 = lshr i32 %14562, 31
  %14587 = xor i32 %14586, %14585
  %14588 = xor i32 %14582, %14585
  %14589 = add nuw nsw i32 %14588, %14587
  %14590 = icmp eq i32 %14589, 2
  %14591 = zext i1 %14590 to i8
  %14592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14591, i8* %14592, align 1, !tbaa !2450
  %14593 = load i64, i64* %PC
  %14594 = add i64 %14593, 2785
  %14595 = load i64, i64* %PC
  %14596 = add i64 %14595, 6
  %14597 = load i64, i64* %PC
  %14598 = add i64 %14597, 6
  store i64 %14598, i64* %PC
  %14599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14600 = load i8, i8* %14599, align 1, !tbaa !2449
  %14601 = icmp ne i8 %14600, 0
  %14602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14603 = load i8, i8* %14602, align 1, !tbaa !2450
  %14604 = icmp ne i8 %14603, 0
  %14605 = xor i1 %14601, %14604
  %14606 = xor i1 %14605, true
  %14607 = zext i1 %14606 to i8
  store i8 %14607, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14609 = select i1 %14605, i64 %14596, i64 %14594
  store i64 %14609, i64* %14608, align 8, !tbaa !2428
  %14610 = load i8, i8* %BRANCH_TAKEN
  %14611 = icmp eq i8 %14610, 1
  br i1 %14611, label %block_40183e, label %block_400d63

block_401956:                                     ; preds = %block_401858
  %14612 = load i64, i64* %PC
  %14613 = add i64 %14612, 5
  %14614 = load i64, i64* %PC
  %14615 = add i64 %14614, 5
  store i64 %14615, i64* %PC
  %14616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14613, i64* %14616, align 8, !tbaa !2428
  %14617 = load i64, i64* %RBP
  %14618 = sub i64 %14617, 64
  %14619 = load i64, i64* %PC
  %14620 = add i64 %14619, 3
  store i64 %14620, i64* %PC
  %14621 = inttoptr i64 %14618 to i32*
  %14622 = load i32, i32* %14621
  %14623 = zext i32 %14622 to i64
  store i64 %14623, i64* %RAX, align 8, !tbaa !2428
  %14624 = load i64, i64* %RAX
  %14625 = load i64, i64* %PC
  %14626 = add i64 %14625, 3
  store i64 %14626, i64* %PC
  %14627 = trunc i64 %14624 to i32
  %14628 = add i32 1, %14627
  %14629 = zext i32 %14628 to i64
  store i64 %14629, i64* %RAX, align 8, !tbaa !2428
  %14630 = icmp ult i32 %14628, %14627
  %14631 = icmp ult i32 %14628, 1
  %14632 = or i1 %14630, %14631
  %14633 = zext i1 %14632 to i8
  %14634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14633, i8* %14634, align 1, !tbaa !2432
  %14635 = and i32 %14628, 255
  %14636 = call i32 @llvm.ctpop.i32(i32 %14635) #16
  %14637 = trunc i32 %14636 to i8
  %14638 = and i8 %14637, 1
  %14639 = xor i8 %14638, 1
  %14640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14639, i8* %14640, align 1, !tbaa !2446
  %14641 = xor i64 1, %14624
  %14642 = trunc i64 %14641 to i32
  %14643 = xor i32 %14642, %14628
  %14644 = lshr i32 %14643, 4
  %14645 = trunc i32 %14644 to i8
  %14646 = and i8 %14645, 1
  %14647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14646, i8* %14647, align 1, !tbaa !2447
  %14648 = icmp eq i32 %14628, 0
  %14649 = zext i1 %14648 to i8
  %14650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14649, i8* %14650, align 1, !tbaa !2448
  %14651 = lshr i32 %14628, 31
  %14652 = trunc i32 %14651 to i8
  %14653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14652, i8* %14653, align 1, !tbaa !2449
  %14654 = lshr i32 %14627, 31
  %14655 = xor i32 %14651, %14654
  %14656 = add nuw nsw i32 %14655, %14651
  %14657 = icmp eq i32 %14656, 2
  %14658 = zext i1 %14657 to i8
  %14659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14658, i8* %14659, align 1, !tbaa !2450
  %14660 = load i64, i64* %RBP
  %14661 = sub i64 %14660, 64
  %14662 = load i32, i32* %EAX
  %14663 = zext i32 %14662 to i64
  %14664 = load i64, i64* %PC
  %14665 = add i64 %14664, 3
  store i64 %14665, i64* %PC
  %14666 = inttoptr i64 %14661 to i32*
  store i32 %14662, i32* %14666
  %14667 = load i64, i64* %PC
  %14668 = sub i64 %14667, 3131
  %14669 = load i64, i64* %PC
  %14670 = add i64 %14669, 5
  store i64 %14670, i64* %PC
  %14671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14668, i64* %14671, align 8, !tbaa !2428
  br label %block_400d29

block_401851:                                     ; preds = %block_400d44
  %14672 = sub i64 %14740, 52
  %14673 = load i64, i64* %PC
  %14674 = add i64 %14673, 7
  store i64 %14674, i64* %PC
  %14675 = inttoptr i64 %14672 to i32*
  store i32 1, i32* %14675
  br label %block_401858

block_400d44:                                     ; preds = %block_400d35, %block_40183e
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.6, %block_400d35 ], [ %MEMORY.3, %block_40183e ]
  %14676 = load i64, i64* %RBP
  %14677 = sub i64 %14676, 52
  %14678 = load i64, i64* %PC
  %14679 = add i64 %14678, 3
  store i64 %14679, i64* %PC
  %14680 = inttoptr i64 %14677 to i32*
  %14681 = load i32, i32* %14680
  %14682 = zext i32 %14681 to i64
  store i64 %14682, i64* %RAX, align 8, !tbaa !2428
  %14683 = load i32, i32* %EAX
  %14684 = zext i32 %14683 to i64
  %14685 = load i64, i64* %RBP
  %14686 = sub i64 %14685, 68
  %14687 = load i64, i64* %PC
  %14688 = add i64 %14687, 3
  store i64 %14688, i64* %PC
  %14689 = inttoptr i64 %14686 to i32*
  %14690 = load i32, i32* %14689
  %14691 = sub i32 %14683, %14690
  %14692 = icmp ult i32 %14683, %14690
  %14693 = zext i1 %14692 to i8
  %14694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14693, i8* %14694, align 1, !tbaa !2432
  %14695 = and i32 %14691, 255
  %14696 = call i32 @llvm.ctpop.i32(i32 %14695) #16
  %14697 = trunc i32 %14696 to i8
  %14698 = and i8 %14697, 1
  %14699 = xor i8 %14698, 1
  %14700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14699, i8* %14700, align 1, !tbaa !2446
  %14701 = xor i32 %14690, %14683
  %14702 = xor i32 %14701, %14691
  %14703 = lshr i32 %14702, 4
  %14704 = trunc i32 %14703 to i8
  %14705 = and i8 %14704, 1
  %14706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14705, i8* %14706, align 1, !tbaa !2447
  %14707 = icmp eq i32 %14691, 0
  %14708 = zext i1 %14707 to i8
  %14709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14708, i8* %14709, align 1, !tbaa !2448
  %14710 = lshr i32 %14691, 31
  %14711 = trunc i32 %14710 to i8
  %14712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14711, i8* %14712, align 1, !tbaa !2449
  %14713 = lshr i32 %14683, 31
  %14714 = lshr i32 %14690, 31
  %14715 = xor i32 %14714, %14713
  %14716 = xor i32 %14710, %14713
  %14717 = add nuw nsw i32 %14716, %14715
  %14718 = icmp eq i32 %14717, 2
  %14719 = zext i1 %14718 to i8
  %14720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14719, i8* %14720, align 1, !tbaa !2450
  %14721 = load i64, i64* %PC
  %14722 = add i64 %14721, 2823
  %14723 = load i64, i64* %PC
  %14724 = add i64 %14723, 6
  %14725 = load i64, i64* %PC
  %14726 = add i64 %14725, 6
  store i64 %14726, i64* %PC
  %14727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14728 = load i8, i8* %14727, align 1, !tbaa !2449
  %14729 = icmp ne i8 %14728, 0
  %14730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14731 = load i8, i8* %14730, align 1, !tbaa !2450
  %14732 = icmp ne i8 %14731, 0
  %14733 = xor i1 %14729, %14732
  %14734 = xor i1 %14733, true
  %14735 = zext i1 %14734 to i8
  store i8 %14735, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14737 = select i1 %14733, i64 %14724, i64 %14722
  store i64 %14737, i64* %14736, align 8, !tbaa !2428
  %14738 = load i8, i8* %BRANCH_TAKEN
  %14739 = icmp eq i8 %14738, 1
  %14740 = load i64, i64* %RBP
  br i1 %14739, label %block_401851, label %block_400d50

block_401943:                                     ; preds = %block_40186b
  %14741 = load i64, i64* %PC
  %14742 = add i64 %14741, 5
  %14743 = load i64, i64* %PC
  %14744 = add i64 %14743, 5
  store i64 %14744, i64* %PC
  %14745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14742, i64* %14745, align 8, !tbaa !2428
  %14746 = load i64, i64* %RBP
  %14747 = sub i64 %14746, 52
  %14748 = load i64, i64* %PC
  %14749 = add i64 %14748, 3
  store i64 %14749, i64* %PC
  %14750 = inttoptr i64 %14747 to i32*
  %14751 = load i32, i32* %14750
  %14752 = zext i32 %14751 to i64
  store i64 %14752, i64* %RAX, align 8, !tbaa !2428
  %14753 = load i64, i64* %RAX
  %14754 = load i64, i64* %PC
  %14755 = add i64 %14754, 3
  store i64 %14755, i64* %PC
  %14756 = trunc i64 %14753 to i32
  %14757 = add i32 1, %14756
  %14758 = zext i32 %14757 to i64
  store i64 %14758, i64* %RAX, align 8, !tbaa !2428
  %14759 = icmp ult i32 %14757, %14756
  %14760 = icmp ult i32 %14757, 1
  %14761 = or i1 %14759, %14760
  %14762 = zext i1 %14761 to i8
  %14763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14762, i8* %14763, align 1, !tbaa !2432
  %14764 = and i32 %14757, 255
  %14765 = call i32 @llvm.ctpop.i32(i32 %14764) #16
  %14766 = trunc i32 %14765 to i8
  %14767 = and i8 %14766, 1
  %14768 = xor i8 %14767, 1
  %14769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14768, i8* %14769, align 1, !tbaa !2446
  %14770 = xor i64 1, %14753
  %14771 = trunc i64 %14770 to i32
  %14772 = xor i32 %14771, %14757
  %14773 = lshr i32 %14772, 4
  %14774 = trunc i32 %14773 to i8
  %14775 = and i8 %14774, 1
  %14776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14775, i8* %14776, align 1, !tbaa !2447
  %14777 = icmp eq i32 %14757, 0
  %14778 = zext i1 %14777 to i8
  %14779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14778, i8* %14779, align 1, !tbaa !2448
  %14780 = lshr i32 %14757, 31
  %14781 = trunc i32 %14780 to i8
  %14782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14781, i8* %14782, align 1, !tbaa !2449
  %14783 = lshr i32 %14756, 31
  %14784 = xor i32 %14780, %14783
  %14785 = add nuw nsw i32 %14784, %14780
  %14786 = icmp eq i32 %14785, 2
  %14787 = zext i1 %14786 to i8
  %14788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14787, i8* %14788, align 1, !tbaa !2450
  %14789 = load i64, i64* %RBP
  %14790 = sub i64 %14789, 52
  %14791 = load i32, i32* %EAX
  %14792 = zext i32 %14791 to i64
  %14793 = load i64, i64* %PC
  %14794 = add i64 %14793, 3
  store i64 %14794, i64* %PC
  %14795 = inttoptr i64 %14790 to i32*
  store i32 %14791, i32* %14795
  %14796 = load i64, i64* %PC
  %14797 = sub i64 %14796, 249
  %14798 = load i64, i64* %PC
  %14799 = add i64 %14798, 5
  store i64 %14799, i64* %PC
  %14800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14797, i64* %14800, align 8, !tbaa !2428
  br label %block_401858

block_40183e:                                     ; preds = %block_400d57
  %14801 = load i64, i64* %PC
  %14802 = add i64 %14801, 5
  %14803 = load i64, i64* %PC
  %14804 = add i64 %14803, 5
  store i64 %14804, i64* %PC
  %14805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14802, i64* %14805, align 8, !tbaa !2428
  %14806 = load i64, i64* %RBP
  %14807 = sub i64 %14806, 52
  %14808 = load i64, i64* %PC
  %14809 = add i64 %14808, 3
  store i64 %14809, i64* %PC
  %14810 = inttoptr i64 %14807 to i32*
  %14811 = load i32, i32* %14810
  %14812 = zext i32 %14811 to i64
  store i64 %14812, i64* %RAX, align 8, !tbaa !2428
  %14813 = load i64, i64* %RAX
  %14814 = load i64, i64* %PC
  %14815 = add i64 %14814, 3
  store i64 %14815, i64* %PC
  %14816 = trunc i64 %14813 to i32
  %14817 = add i32 1, %14816
  %14818 = zext i32 %14817 to i64
  store i64 %14818, i64* %RAX, align 8, !tbaa !2428
  %14819 = icmp ult i32 %14817, %14816
  %14820 = icmp ult i32 %14817, 1
  %14821 = or i1 %14819, %14820
  %14822 = zext i1 %14821 to i8
  %14823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14822, i8* %14823, align 1, !tbaa !2432
  %14824 = and i32 %14817, 255
  %14825 = call i32 @llvm.ctpop.i32(i32 %14824) #16
  %14826 = trunc i32 %14825 to i8
  %14827 = and i8 %14826, 1
  %14828 = xor i8 %14827, 1
  %14829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14828, i8* %14829, align 1, !tbaa !2446
  %14830 = xor i64 1, %14813
  %14831 = trunc i64 %14830 to i32
  %14832 = xor i32 %14831, %14817
  %14833 = lshr i32 %14832, 4
  %14834 = trunc i32 %14833 to i8
  %14835 = and i8 %14834, 1
  %14836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14835, i8* %14836, align 1, !tbaa !2447
  %14837 = icmp eq i32 %14817, 0
  %14838 = zext i1 %14837 to i8
  %14839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14838, i8* %14839, align 1, !tbaa !2448
  %14840 = lshr i32 %14817, 31
  %14841 = trunc i32 %14840 to i8
  %14842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14841, i8* %14842, align 1, !tbaa !2449
  %14843 = lshr i32 %14816, 31
  %14844 = xor i32 %14840, %14843
  %14845 = add nuw nsw i32 %14844, %14840
  %14846 = icmp eq i32 %14845, 2
  %14847 = zext i1 %14846 to i8
  %14848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14847, i8* %14848, align 1, !tbaa !2450
  %14849 = load i64, i64* %RBP
  %14850 = sub i64 %14849, 52
  %14851 = load i32, i32* %EAX
  %14852 = zext i32 %14851 to i64
  %14853 = load i64, i64* %PC
  %14854 = add i64 %14853, 3
  store i64 %14854, i64* %PC
  %14855 = inttoptr i64 %14850 to i32*
  store i32 %14851, i32* %14855
  %14856 = load i64, i64* %PC
  %14857 = sub i64 %14856, 2824
  %14858 = load i64, i64* %PC
  %14859 = add i64 %14858, 5
  store i64 %14859, i64* %PC
  %14860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14857, i64* %14860, align 8, !tbaa !2428
  br label %block_400d44

block_400d6a:                                     ; preds = %block_400d63, %block_400d76
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_400d63 ], [ %MEMORY.5, %block_400d76 ]
  %14861 = load i64, i64* %RBP
  %14862 = sub i64 %14861, 60
  %14863 = load i64, i64* %PC
  %14864 = add i64 %14863, 3
  store i64 %14864, i64* %PC
  %14865 = inttoptr i64 %14862 to i32*
  %14866 = load i32, i32* %14865
  %14867 = zext i32 %14866 to i64
  store i64 %14867, i64* %RAX, align 8, !tbaa !2428
  %14868 = load i32, i32* %EAX
  %14869 = zext i32 %14868 to i64
  %14870 = load i64, i64* %RBP
  %14871 = sub i64 %14870, 76
  %14872 = load i64, i64* %PC
  %14873 = add i64 %14872, 3
  store i64 %14873, i64* %PC
  %14874 = inttoptr i64 %14871 to i32*
  %14875 = load i32, i32* %14874
  %14876 = sub i32 %14868, %14875
  %14877 = icmp ult i32 %14868, %14875
  %14878 = zext i1 %14877 to i8
  %14879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14878, i8* %14879, align 1, !tbaa !2432
  %14880 = and i32 %14876, 255
  %14881 = call i32 @llvm.ctpop.i32(i32 %14880) #16
  %14882 = trunc i32 %14881 to i8
  %14883 = and i8 %14882, 1
  %14884 = xor i8 %14883, 1
  %14885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14884, i8* %14885, align 1, !tbaa !2446
  %14886 = xor i32 %14875, %14868
  %14887 = xor i32 %14886, %14876
  %14888 = lshr i32 %14887, 4
  %14889 = trunc i32 %14888 to i8
  %14890 = and i8 %14889, 1
  %14891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14890, i8* %14891, align 1, !tbaa !2447
  %14892 = icmp eq i32 %14876, 0
  %14893 = zext i1 %14892 to i8
  %14894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14893, i8* %14894, align 1, !tbaa !2448
  %14895 = lshr i32 %14876, 31
  %14896 = trunc i32 %14895 to i8
  %14897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14896, i8* %14897, align 1, !tbaa !2449
  %14898 = lshr i32 %14868, 31
  %14899 = lshr i32 %14875, 31
  %14900 = xor i32 %14899, %14898
  %14901 = xor i32 %14895, %14898
  %14902 = add nuw nsw i32 %14901, %14900
  %14903 = icmp eq i32 %14902, 2
  %14904 = zext i1 %14903 to i8
  %14905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14904, i8* %14905, align 1, !tbaa !2450
  %14906 = load i64, i64* %PC
  %14907 = add i64 %14906, 2747
  %14908 = load i64, i64* %PC
  %14909 = add i64 %14908, 6
  %14910 = load i64, i64* %PC
  %14911 = add i64 %14910, 6
  store i64 %14911, i64* %PC
  %14912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14913 = load i8, i8* %14912, align 1, !tbaa !2449
  %14914 = icmp ne i8 %14913, 0
  %14915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14916 = load i8, i8* %14915, align 1, !tbaa !2450
  %14917 = icmp ne i8 %14916, 0
  %14918 = xor i1 %14914, %14917
  %14919 = xor i1 %14918, true
  %14920 = zext i1 %14919 to i8
  store i8 %14920, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14922 = select i1 %14918, i64 %14909, i64 %14907
  store i64 %14922, i64* %14921, align 8, !tbaa !2428
  %14923 = load i8, i8* %BRANCH_TAKEN
  %14924 = icmp eq i8 %14923, 1
  br i1 %14924, label %block_40182b, label %block_400d76

block_400d35:                                     ; preds = %block_400d29
  %14925 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14926 = bitcast %union.vec128_t* %XMM0 to i8*
  %14927 = load i64, i64* %PC
  %14928 = add i64 %14927, 3
  store i64 %14928, i64* %PC
  %14929 = bitcast i8* %14925 to i64*
  %14930 = load i64, i64* %14929, align 1
  %14931 = getelementptr inbounds i8, i8* %14925, i64 8
  %14932 = bitcast i8* %14931 to i64*
  %14933 = load i64, i64* %14932, align 1
  %14934 = bitcast i8* %14926 to i64*
  %14935 = load i64, i64* %14934, align 1
  %14936 = getelementptr inbounds i8, i8* %14926, i64 8
  %14937 = bitcast i8* %14936 to i64*
  %14938 = load i64, i64* %14937, align 1
  %14939 = xor i64 %14935, %14930
  %14940 = xor i64 %14938, %14933
  %14941 = trunc i64 %14939 to i32
  %14942 = lshr i64 %14939, 32
  %14943 = trunc i64 %14942 to i32
  %14944 = bitcast i8* %15157 to i32*
  store i32 %14941, i32* %14944, align 1, !tbaa !2454
  %14945 = getelementptr inbounds i8, i8* %15157, i64 4
  %14946 = bitcast i8* %14945 to i32*
  store i32 %14943, i32* %14946, align 1, !tbaa !2454
  %14947 = trunc i64 %14940 to i32
  %14948 = getelementptr inbounds i8, i8* %15157, i64 8
  %14949 = bitcast i8* %14948 to i32*
  store i32 %14947, i32* %14949, align 1, !tbaa !2454
  %14950 = lshr i64 %14940, 32
  %14951 = trunc i64 %14950 to i32
  %14952 = getelementptr inbounds i8, i8* %15157, i64 12
  %14953 = bitcast i8* %14952 to i32*
  store i32 %14951, i32* %14953, align 1, !tbaa !2454
  %14954 = load i64, i64* %RBP
  %14955 = sub i64 %14954, 80
  %14956 = bitcast %union.vec128_t* %XMM0 to i8*
  %14957 = load i64, i64* %PC
  %14958 = add i64 %14957, 5
  store i64 %14958, i64* %PC
  %14959 = bitcast i8* %14956 to <2 x float>*
  %14960 = load <2 x float>, <2 x float>* %14959, align 1
  %14961 = extractelement <2 x float> %14960, i32 0
  %14962 = inttoptr i64 %14955 to float*
  store float %14961, float* %14962
  %14963 = load i64, i64* %RBP
  %14964 = sub i64 %14963, 52
  %14965 = load i64, i64* %PC
  %14966 = add i64 %14965, 7
  store i64 %14966, i64* %PC
  %14967 = inttoptr i64 %14964 to i32*
  store i32 1, i32* %14967
  br label %block_400d44

block_40182b:                                     ; preds = %block_400d6a
  %14968 = load i64, i64* %PC
  %14969 = add i64 %14968, 5
  %14970 = load i64, i64* %PC
  %14971 = add i64 %14970, 5
  store i64 %14971, i64* %PC
  %14972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14969, i64* %14972, align 8, !tbaa !2428
  %14973 = load i64, i64* %RBP
  %14974 = sub i64 %14973, 56
  %14975 = load i64, i64* %PC
  %14976 = add i64 %14975, 3
  store i64 %14976, i64* %PC
  %14977 = inttoptr i64 %14974 to i32*
  %14978 = load i32, i32* %14977
  %14979 = zext i32 %14978 to i64
  store i64 %14979, i64* %RAX, align 8, !tbaa !2428
  %14980 = load i64, i64* %RAX
  %14981 = load i64, i64* %PC
  %14982 = add i64 %14981, 3
  store i64 %14982, i64* %PC
  %14983 = trunc i64 %14980 to i32
  %14984 = add i32 1, %14983
  %14985 = zext i32 %14984 to i64
  store i64 %14985, i64* %RAX, align 8, !tbaa !2428
  %14986 = icmp ult i32 %14984, %14983
  %14987 = icmp ult i32 %14984, 1
  %14988 = or i1 %14986, %14987
  %14989 = zext i1 %14988 to i8
  %14990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14989, i8* %14990, align 1, !tbaa !2432
  %14991 = and i32 %14984, 255
  %14992 = call i32 @llvm.ctpop.i32(i32 %14991) #16
  %14993 = trunc i32 %14992 to i8
  %14994 = and i8 %14993, 1
  %14995 = xor i8 %14994, 1
  %14996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14995, i8* %14996, align 1, !tbaa !2446
  %14997 = xor i64 1, %14980
  %14998 = trunc i64 %14997 to i32
  %14999 = xor i32 %14998, %14984
  %15000 = lshr i32 %14999, 4
  %15001 = trunc i32 %15000 to i8
  %15002 = and i8 %15001, 1
  %15003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15002, i8* %15003, align 1, !tbaa !2447
  %15004 = icmp eq i32 %14984, 0
  %15005 = zext i1 %15004 to i8
  %15006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15005, i8* %15006, align 1, !tbaa !2448
  %15007 = lshr i32 %14984, 31
  %15008 = trunc i32 %15007 to i8
  %15009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15008, i8* %15009, align 1, !tbaa !2449
  %15010 = lshr i32 %14983, 31
  %15011 = xor i32 %15007, %15010
  %15012 = add nuw nsw i32 %15011, %15007
  %15013 = icmp eq i32 %15012, 2
  %15014 = zext i1 %15013 to i8
  %15015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15014, i8* %15015, align 1, !tbaa !2450
  %15016 = load i64, i64* %RBP
  %15017 = sub i64 %15016, 56
  %15018 = load i32, i32* %EAX
  %15019 = zext i32 %15018 to i64
  %15020 = load i64, i64* %PC
  %15021 = add i64 %15020, 3
  store i64 %15021, i64* %PC
  %15022 = inttoptr i64 %15017 to i32*
  store i32 %15018, i32* %15022
  %15023 = load i64, i64* %PC
  %15024 = sub i64 %15023, 2786
  %15025 = load i64, i64* %PC
  %15026 = add i64 %15025, 5
  store i64 %15026, i64* %PC
  %15027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15024, i64* %15027, align 8, !tbaa !2428
  br label %block_400d57

block_401930:                                     ; preds = %block_40187e
  %15028 = load i64, i64* %PC
  %15029 = add i64 %15028, 5
  %15030 = load i64, i64* %PC
  %15031 = add i64 %15030, 5
  store i64 %15031, i64* %PC
  %15032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15029, i64* %15032, align 8, !tbaa !2428
  %15033 = load i64, i64* %RBP
  %15034 = sub i64 %15033, 56
  %15035 = load i64, i64* %PC
  %15036 = add i64 %15035, 3
  store i64 %15036, i64* %PC
  %15037 = inttoptr i64 %15034 to i32*
  %15038 = load i32, i32* %15037
  %15039 = zext i32 %15038 to i64
  store i64 %15039, i64* %RAX, align 8, !tbaa !2428
  %15040 = load i64, i64* %RAX
  %15041 = load i64, i64* %PC
  %15042 = add i64 %15041, 3
  store i64 %15042, i64* %PC
  %15043 = trunc i64 %15040 to i32
  %15044 = add i32 1, %15043
  %15045 = zext i32 %15044 to i64
  store i64 %15045, i64* %RAX, align 8, !tbaa !2428
  %15046 = icmp ult i32 %15044, %15043
  %15047 = icmp ult i32 %15044, 1
  %15048 = or i1 %15046, %15047
  %15049 = zext i1 %15048 to i8
  %15050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15049, i8* %15050, align 1, !tbaa !2432
  %15051 = and i32 %15044, 255
  %15052 = call i32 @llvm.ctpop.i32(i32 %15051) #16
  %15053 = trunc i32 %15052 to i8
  %15054 = and i8 %15053, 1
  %15055 = xor i8 %15054, 1
  %15056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15055, i8* %15056, align 1, !tbaa !2446
  %15057 = xor i64 1, %15040
  %15058 = trunc i64 %15057 to i32
  %15059 = xor i32 %15058, %15044
  %15060 = lshr i32 %15059, 4
  %15061 = trunc i32 %15060 to i8
  %15062 = and i8 %15061, 1
  %15063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15062, i8* %15063, align 1, !tbaa !2447
  %15064 = icmp eq i32 %15044, 0
  %15065 = zext i1 %15064 to i8
  %15066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15065, i8* %15066, align 1, !tbaa !2448
  %15067 = lshr i32 %15044, 31
  %15068 = trunc i32 %15067 to i8
  %15069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15068, i8* %15069, align 1, !tbaa !2449
  %15070 = lshr i32 %15043, 31
  %15071 = xor i32 %15067, %15070
  %15072 = add nuw nsw i32 %15071, %15067
  %15073 = icmp eq i32 %15072, 2
  %15074 = zext i1 %15073 to i8
  %15075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15074, i8* %15075, align 1, !tbaa !2450
  %15076 = load i64, i64* %RBP
  %15077 = sub i64 %15076, 56
  %15078 = load i32, i32* %EAX
  %15079 = zext i32 %15078 to i64
  %15080 = load i64, i64* %PC
  %15081 = add i64 %15080, 3
  store i64 %15081, i64* %PC
  %15082 = inttoptr i64 %15077 to i32*
  store i32 %15078, i32* %15082
  %15083 = load i64, i64* %PC
  %15084 = sub i64 %15083, 211
  %15085 = load i64, i64* %PC
  %15086 = add i64 %15085, 5
  store i64 %15086, i64* %PC
  %15087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15084, i64* %15087, align 8, !tbaa !2428
  br label %block_40186b

block_400d63:                                     ; preds = %block_400d57
  %15088 = load i64, i64* %RBP
  %15089 = sub i64 %15088, 60
  %15090 = load i64, i64* %PC
  %15091 = add i64 %15090, 7
  store i64 %15091, i64* %PC
  %15092 = inttoptr i64 %15089 to i32*
  store i32 1, i32* %15092
  br label %block_400d6a

block_400d29:                                     ; preds = %block_401956, %block_400cd0
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_400cd0 ], [ %MEMORY.2, %block_401956 ]
  %15093 = load i64, i64* %RBP
  %15094 = sub i64 %15093, 64
  %15095 = load i64, i64* %PC
  %15096 = add i64 %15095, 3
  store i64 %15096, i64* %PC
  %15097 = inttoptr i64 %15094 to i32*
  %15098 = load i32, i32* %15097
  %15099 = zext i32 %15098 to i64
  store i64 %15099, i64* %RAX, align 8, !tbaa !2428
  %15100 = load i32, i32* %EAX
  %15101 = zext i32 %15100 to i64
  %15102 = load i64, i64* %RBP
  %15103 = sub i64 %15102, 4
  %15104 = load i64, i64* %PC
  %15105 = add i64 %15104, 3
  store i64 %15105, i64* %PC
  %15106 = inttoptr i64 %15103 to i32*
  %15107 = load i32, i32* %15106
  %15108 = sub i32 %15100, %15107
  %15109 = icmp ult i32 %15100, %15107
  %15110 = zext i1 %15109 to i8
  %15111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15110, i8* %15111, align 1, !tbaa !2432
  %15112 = and i32 %15108, 255
  %15113 = call i32 @llvm.ctpop.i32(i32 %15112) #16
  %15114 = trunc i32 %15113 to i8
  %15115 = and i8 %15114, 1
  %15116 = xor i8 %15115, 1
  %15117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15116, i8* %15117, align 1, !tbaa !2446
  %15118 = xor i32 %15107, %15100
  %15119 = xor i32 %15118, %15108
  %15120 = lshr i32 %15119, 4
  %15121 = trunc i32 %15120 to i8
  %15122 = and i8 %15121, 1
  %15123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15122, i8* %15123, align 1, !tbaa !2447
  %15124 = icmp eq i32 %15108, 0
  %15125 = zext i1 %15124 to i8
  %15126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15125, i8* %15126, align 1, !tbaa !2448
  %15127 = lshr i32 %15108, 31
  %15128 = trunc i32 %15127 to i8
  %15129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15128, i8* %15129, align 1, !tbaa !2449
  %15130 = lshr i32 %15100, 31
  %15131 = lshr i32 %15107, 31
  %15132 = xor i32 %15131, %15130
  %15133 = xor i32 %15127, %15130
  %15134 = add nuw nsw i32 %15133, %15132
  %15135 = icmp eq i32 %15134, 2
  %15136 = zext i1 %15135 to i8
  %15137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15136, i8* %15137, align 1, !tbaa !2450
  %15138 = load i64, i64* %PC
  %15139 = add i64 %15138, 3130
  %15140 = load i64, i64* %PC
  %15141 = add i64 %15140, 6
  %15142 = load i64, i64* %PC
  %15143 = add i64 %15142, 6
  store i64 %15143, i64* %PC
  %15144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15145 = load i8, i8* %15144, align 1, !tbaa !2449
  %15146 = icmp ne i8 %15145, 0
  %15147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15148 = load i8, i8* %15147, align 1, !tbaa !2450
  %15149 = icmp ne i8 %15148, 0
  %15150 = xor i1 %15146, %15149
  %15151 = xor i1 %15150, true
  %15152 = zext i1 %15151 to i8
  store i8 %15152, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %15153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15154 = select i1 %15150, i64 %15141, i64 %15139
  store i64 %15154, i64* %15153, align 8, !tbaa !2428
  %15155 = load i8, i8* %BRANCH_TAKEN
  %15156 = icmp eq i8 %15155, 1
  %15157 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %15156, label %block_401969, label %block_400d35

block_400d50:                                     ; preds = %block_400d44
  %15158 = sub i64 %14740, 56
  %15159 = load i64, i64* %PC
  %15160 = add i64 %15159, 7
  store i64 %15160, i64* %PC
  %15161 = inttoptr i64 %15158 to i32*
  store i32 1, i32* %15161
  br label %block_400d57

block_40188a:                                     ; preds = %block_40187e
  %15162 = load i64, i64* %RBP
  %15163 = add i64 %15162, 24
  %15164 = load i64, i64* %PC
  %15165 = add i64 %15164, 4
  store i64 %15165, i64* %PC
  %15166 = inttoptr i64 %15163 to i64*
  %15167 = load i64, i64* %15166
  store i64 %15167, i64* %RAX, align 8, !tbaa !2428
  %15168 = load i64, i64* %RAX
  %15169 = load i64, i64* %PC
  %15170 = add i64 %15169, 3
  store i64 %15170, i64* %PC
  %15171 = inttoptr i64 %15168 to i64*
  %15172 = load i64, i64* %15171
  store i64 %15172, i64* %RAX, align 8, !tbaa !2428
  %15173 = load i64, i64* %RBP
  %15174 = add i64 %15173, 24
  %15175 = load i64, i64* %PC
  %15176 = add i64 %15175, 4
  store i64 %15176, i64* %PC
  %15177 = inttoptr i64 %15174 to i64*
  %15178 = load i64, i64* %15177
  store i64 %15178, i64* %RCX, align 8, !tbaa !2428
  %15179 = load i64, i64* %RCX
  %15180 = add i64 %15179, 12
  %15181 = load i64, i64* %PC
  %15182 = add i64 %15181, 4
  store i64 %15182, i64* %PC
  %15183 = inttoptr i64 %15180 to i32*
  %15184 = load i32, i32* %15183
  %15185 = sext i32 %15184 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %15186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15186, align 1, !tbaa !2432
  %15187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %15187, align 1, !tbaa !2446
  %15188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15188, align 1, !tbaa !2447
  %15189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15189, align 1, !tbaa !2448
  %15190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15190, align 1, !tbaa !2449
  %15191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15191, align 1, !tbaa !2450
  %15192 = load i64, i64* %RBP
  %15193 = add i64 %15192, 24
  %15194 = load i64, i64* %PC
  %15195 = add i64 %15194, 4
  store i64 %15195, i64* %PC
  %15196 = inttoptr i64 %15193 to i64*
  %15197 = load i64, i64* %15196
  store i64 %15197, i64* %RCX, align 8, !tbaa !2428
  %15198 = load i64, i64* %RDX
  %15199 = load i64, i64* %RCX
  %15200 = add i64 %15199, 16
  %15201 = load i64, i64* %PC
  %15202 = add i64 %15201, 4
  store i64 %15202, i64* %PC
  %15203 = inttoptr i64 %15200 to i32*
  %15204 = load i32, i32* %15203
  %15205 = shl i64 %15198, 32
  %15206 = ashr exact i64 %15205, 32
  %15207 = sext i32 %15204 to i64
  %15208 = mul nsw i64 %15207, %15206
  %15209 = trunc i64 %15208 to i32
  %15210 = and i64 %15208, 4294967295
  store i64 %15210, i64* %RDX, align 8, !tbaa !2428
  %15211 = shl i64 %15208, 32
  %15212 = ashr exact i64 %15211, 32
  %15213 = icmp ne i64 %15212, %15208
  %15214 = zext i1 %15213 to i8
  %15215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15214, i8* %15215, align 1, !tbaa !2432
  %15216 = and i32 %15209, 255
  %15217 = call i32 @llvm.ctpop.i32(i32 %15216) #16
  %15218 = trunc i32 %15217 to i8
  %15219 = and i8 %15218, 1
  %15220 = xor i8 %15219, 1
  %15221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15220, i8* %15221, align 1, !tbaa !2446
  %15222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15222, align 1, !tbaa !2447
  %15223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15223, align 1, !tbaa !2448
  %15224 = lshr i32 %15209, 31
  %15225 = trunc i32 %15224 to i8
  %15226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15225, i8* %15226, align 1, !tbaa !2449
  %15227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15214, i8* %15227, align 1, !tbaa !2450
  %15228 = load i64, i64* %RBP
  %15229 = add i64 %15228, 24
  %15230 = load i64, i64* %PC
  %15231 = add i64 %15230, 4
  store i64 %15231, i64* %PC
  %15232 = inttoptr i64 %15229 to i64*
  %15233 = load i64, i64* %15232
  store i64 %15233, i64* %RCX, align 8, !tbaa !2428
  %15234 = load i64, i64* %RDX
  %15235 = load i64, i64* %RCX
  %15236 = add i64 %15235, 20
  %15237 = load i64, i64* %PC
  %15238 = add i64 %15237, 4
  store i64 %15238, i64* %PC
  %15239 = inttoptr i64 %15236 to i32*
  %15240 = load i32, i32* %15239
  %15241 = shl i64 %15234, 32
  %15242 = ashr exact i64 %15241, 32
  %15243 = sext i32 %15240 to i64
  %15244 = mul nsw i64 %15243, %15242
  %15245 = trunc i64 %15244 to i32
  %15246 = and i64 %15244, 4294967295
  store i64 %15246, i64* %RDX, align 8, !tbaa !2428
  %15247 = shl i64 %15244, 32
  %15248 = ashr exact i64 %15247, 32
  %15249 = icmp ne i64 %15248, %15244
  %15250 = zext i1 %15249 to i8
  %15251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15250, i8* %15251, align 1, !tbaa !2432
  %15252 = and i32 %15245, 255
  %15253 = call i32 @llvm.ctpop.i32(i32 %15252) #16
  %15254 = trunc i32 %15253 to i8
  %15255 = and i8 %15254, 1
  %15256 = xor i8 %15255, 1
  %15257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15256, i8* %15257, align 1, !tbaa !2446
  %15258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15258, align 1, !tbaa !2447
  %15259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15259, align 1, !tbaa !2448
  %15260 = lshr i32 %15245, 31
  %15261 = trunc i32 %15260 to i8
  %15262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15261, i8* %15262, align 1, !tbaa !2449
  %15263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15250, i8* %15263, align 1, !tbaa !2450
  %15264 = load i64, i64* %RBP
  %15265 = sub i64 %15264, 52
  %15266 = load i64, i64* %PC
  %15267 = add i64 %15266, 3
  store i64 %15267, i64* %PC
  %15268 = inttoptr i64 %15265 to i32*
  %15269 = load i32, i32* %15268
  %15270 = zext i32 %15269 to i64
  store i64 %15270, i64* %RSI, align 8, !tbaa !2428
  %15271 = load i64, i64* %RBP
  %15272 = add i64 %15271, 24
  %15273 = load i64, i64* %PC
  %15274 = add i64 %15273, 4
  store i64 %15274, i64* %PC
  %15275 = inttoptr i64 %15272 to i64*
  %15276 = load i64, i64* %15275
  store i64 %15276, i64* %RCX, align 8, !tbaa !2428
  %15277 = load i64, i64* %RSI
  %15278 = load i64, i64* %RCX
  %15279 = add i64 %15278, 16
  %15280 = load i64, i64* %PC
  %15281 = add i64 %15280, 4
  store i64 %15281, i64* %PC
  %15282 = inttoptr i64 %15279 to i32*
  %15283 = load i32, i32* %15282
  %15284 = shl i64 %15277, 32
  %15285 = ashr exact i64 %15284, 32
  %15286 = sext i32 %15283 to i64
  %15287 = mul nsw i64 %15286, %15285
  %15288 = trunc i64 %15287 to i32
  %15289 = and i64 %15287, 4294967295
  store i64 %15289, i64* %RSI, align 8, !tbaa !2428
  %15290 = shl i64 %15287, 32
  %15291 = ashr exact i64 %15290, 32
  %15292 = icmp ne i64 %15291, %15287
  %15293 = zext i1 %15292 to i8
  %15294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15293, i8* %15294, align 1, !tbaa !2432
  %15295 = and i32 %15288, 255
  %15296 = call i32 @llvm.ctpop.i32(i32 %15295) #16
  %15297 = trunc i32 %15296 to i8
  %15298 = and i8 %15297, 1
  %15299 = xor i8 %15298, 1
  %15300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15299, i8* %15300, align 1, !tbaa !2446
  %15301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15301, align 1, !tbaa !2447
  %15302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15302, align 1, !tbaa !2448
  %15303 = lshr i32 %15288, 31
  %15304 = trunc i32 %15303 to i8
  %15305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15304, i8* %15305, align 1, !tbaa !2449
  %15306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15293, i8* %15306, align 1, !tbaa !2450
  %15307 = load i64, i64* %RBP
  %15308 = add i64 %15307, 24
  %15309 = load i64, i64* %PC
  %15310 = add i64 %15309, 4
  store i64 %15310, i64* %PC
  %15311 = inttoptr i64 %15308 to i64*
  %15312 = load i64, i64* %15311
  store i64 %15312, i64* %RCX, align 8, !tbaa !2428
  %15313 = load i64, i64* %RSI
  %15314 = load i64, i64* %RCX
  %15315 = add i64 %15314, 20
  %15316 = load i64, i64* %PC
  %15317 = add i64 %15316, 4
  store i64 %15317, i64* %PC
  %15318 = inttoptr i64 %15315 to i32*
  %15319 = load i32, i32* %15318
  %15320 = shl i64 %15313, 32
  %15321 = ashr exact i64 %15320, 32
  %15322 = sext i32 %15319 to i64
  %15323 = mul nsw i64 %15322, %15321
  %15324 = trunc i64 %15323 to i32
  %15325 = and i64 %15323, 4294967295
  store i64 %15325, i64* %RSI, align 8, !tbaa !2428
  %15326 = shl i64 %15323, 32
  %15327 = ashr exact i64 %15326, 32
  %15328 = icmp ne i64 %15327, %15323
  %15329 = zext i1 %15328 to i8
  %15330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15329, i8* %15330, align 1, !tbaa !2432
  %15331 = and i32 %15324, 255
  %15332 = call i32 @llvm.ctpop.i32(i32 %15331) #16
  %15333 = trunc i32 %15332 to i8
  %15334 = and i8 %15333, 1
  %15335 = xor i8 %15334, 1
  %15336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15335, i8* %15336, align 1, !tbaa !2446
  %15337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15337, align 1, !tbaa !2447
  %15338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15338, align 1, !tbaa !2448
  %15339 = lshr i32 %15324, 31
  %15340 = trunc i32 %15339 to i8
  %15341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15340, i8* %15341, align 1, !tbaa !2449
  %15342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15329, i8* %15342, align 1, !tbaa !2450
  %15343 = load i64, i64* %RDX
  %15344 = load i32, i32* %ESI
  %15345 = zext i32 %15344 to i64
  %15346 = load i64, i64* %PC
  %15347 = add i64 %15346, 2
  store i64 %15347, i64* %PC
  %15348 = trunc i64 %15343 to i32
  %15349 = add i32 %15344, %15348
  %15350 = zext i32 %15349 to i64
  store i64 %15350, i64* %RDX, align 8, !tbaa !2428
  %15351 = icmp ult i32 %15349, %15348
  %15352 = icmp ult i32 %15349, %15344
  %15353 = or i1 %15351, %15352
  %15354 = zext i1 %15353 to i8
  %15355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15354, i8* %15355, align 1, !tbaa !2432
  %15356 = and i32 %15349, 255
  %15357 = call i32 @llvm.ctpop.i32(i32 %15356) #16
  %15358 = trunc i32 %15357 to i8
  %15359 = and i8 %15358, 1
  %15360 = xor i8 %15359, 1
  %15361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15360, i8* %15361, align 1, !tbaa !2446
  %15362 = xor i64 %15345, %15343
  %15363 = trunc i64 %15362 to i32
  %15364 = xor i32 %15363, %15349
  %15365 = lshr i32 %15364, 4
  %15366 = trunc i32 %15365 to i8
  %15367 = and i8 %15366, 1
  %15368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15367, i8* %15368, align 1, !tbaa !2447
  %15369 = icmp eq i32 %15349, 0
  %15370 = zext i1 %15369 to i8
  %15371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15370, i8* %15371, align 1, !tbaa !2448
  %15372 = lshr i32 %15349, 31
  %15373 = trunc i32 %15372 to i8
  %15374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15373, i8* %15374, align 1, !tbaa !2449
  %15375 = lshr i32 %15348, 31
  %15376 = lshr i32 %15344, 31
  %15377 = xor i32 %15372, %15375
  %15378 = xor i32 %15372, %15376
  %15379 = add nuw nsw i32 %15377, %15378
  %15380 = icmp eq i32 %15379, 2
  %15381 = zext i1 %15380 to i8
  %15382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15381, i8* %15382, align 1, !tbaa !2450
  %15383 = load i64, i64* %RBP
  %15384 = sub i64 %15383, 56
  %15385 = load i64, i64* %PC
  %15386 = add i64 %15385, 3
  store i64 %15386, i64* %PC
  %15387 = inttoptr i64 %15384 to i32*
  %15388 = load i32, i32* %15387
  %15389 = zext i32 %15388 to i64
  store i64 %15389, i64* %RSI, align 8, !tbaa !2428
  %15390 = load i64, i64* %RBP
  %15391 = add i64 %15390, 24
  %15392 = load i64, i64* %PC
  %15393 = add i64 %15392, 4
  store i64 %15393, i64* %PC
  %15394 = inttoptr i64 %15391 to i64*
  %15395 = load i64, i64* %15394
  store i64 %15395, i64* %RCX, align 8, !tbaa !2428
  %15396 = load i64, i64* %RSI
  %15397 = load i64, i64* %RCX
  %15398 = add i64 %15397, 20
  %15399 = load i64, i64* %PC
  %15400 = add i64 %15399, 4
  store i64 %15400, i64* %PC
  %15401 = inttoptr i64 %15398 to i32*
  %15402 = load i32, i32* %15401
  %15403 = shl i64 %15396, 32
  %15404 = ashr exact i64 %15403, 32
  %15405 = sext i32 %15402 to i64
  %15406 = mul nsw i64 %15405, %15404
  %15407 = trunc i64 %15406 to i32
  %15408 = and i64 %15406, 4294967295
  store i64 %15408, i64* %RSI, align 8, !tbaa !2428
  %15409 = shl i64 %15406, 32
  %15410 = ashr exact i64 %15409, 32
  %15411 = icmp ne i64 %15410, %15406
  %15412 = zext i1 %15411 to i8
  %15413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15412, i8* %15413, align 1, !tbaa !2432
  %15414 = and i32 %15407, 255
  %15415 = call i32 @llvm.ctpop.i32(i32 %15414) #16
  %15416 = trunc i32 %15415 to i8
  %15417 = and i8 %15416, 1
  %15418 = xor i8 %15417, 1
  %15419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15418, i8* %15419, align 1, !tbaa !2446
  %15420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15420, align 1, !tbaa !2447
  %15421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15421, align 1, !tbaa !2448
  %15422 = lshr i32 %15407, 31
  %15423 = trunc i32 %15422 to i8
  %15424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15423, i8* %15424, align 1, !tbaa !2449
  %15425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15412, i8* %15425, align 1, !tbaa !2450
  %15426 = load i64, i64* %RDX
  %15427 = load i32, i32* %ESI
  %15428 = zext i32 %15427 to i64
  %15429 = load i64, i64* %PC
  %15430 = add i64 %15429, 2
  store i64 %15430, i64* %PC
  %15431 = trunc i64 %15426 to i32
  %15432 = add i32 %15427, %15431
  %15433 = zext i32 %15432 to i64
  store i64 %15433, i64* %RDX, align 8, !tbaa !2428
  %15434 = icmp ult i32 %15432, %15431
  %15435 = icmp ult i32 %15432, %15427
  %15436 = or i1 %15434, %15435
  %15437 = zext i1 %15436 to i8
  %15438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15437, i8* %15438, align 1, !tbaa !2432
  %15439 = and i32 %15432, 255
  %15440 = call i32 @llvm.ctpop.i32(i32 %15439) #16
  %15441 = trunc i32 %15440 to i8
  %15442 = and i8 %15441, 1
  %15443 = xor i8 %15442, 1
  %15444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15443, i8* %15444, align 1, !tbaa !2446
  %15445 = xor i64 %15428, %15426
  %15446 = trunc i64 %15445 to i32
  %15447 = xor i32 %15446, %15432
  %15448 = lshr i32 %15447, 4
  %15449 = trunc i32 %15448 to i8
  %15450 = and i8 %15449, 1
  %15451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15450, i8* %15451, align 1, !tbaa !2447
  %15452 = icmp eq i32 %15432, 0
  %15453 = zext i1 %15452 to i8
  %15454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15453, i8* %15454, align 1, !tbaa !2448
  %15455 = lshr i32 %15432, 31
  %15456 = trunc i32 %15455 to i8
  %15457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15456, i8* %15457, align 1, !tbaa !2449
  %15458 = lshr i32 %15431, 31
  %15459 = lshr i32 %15427, 31
  %15460 = xor i32 %15455, %15458
  %15461 = xor i32 %15455, %15459
  %15462 = add nuw nsw i32 %15460, %15461
  %15463 = icmp eq i32 %15462, 2
  %15464 = zext i1 %15463 to i8
  %15465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15464, i8* %15465, align 1, !tbaa !2450
  %15466 = load i64, i64* %RDX
  %15467 = load i64, i64* %RBP
  %15468 = sub i64 %15467, 60
  %15469 = load i64, i64* %PC
  %15470 = add i64 %15469, 3
  store i64 %15470, i64* %PC
  %15471 = trunc i64 %15466 to i32
  %15472 = inttoptr i64 %15468 to i32*
  %15473 = load i32, i32* %15472
  %15474 = add i32 %15473, %15471
  %15475 = zext i32 %15474 to i64
  store i64 %15475, i64* %RDX, align 8, !tbaa !2428
  %15476 = icmp ult i32 %15474, %15471
  %15477 = icmp ult i32 %15474, %15473
  %15478 = or i1 %15476, %15477
  %15479 = zext i1 %15478 to i8
  %15480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15479, i8* %15480, align 1, !tbaa !2432
  %15481 = and i32 %15474, 255
  %15482 = call i32 @llvm.ctpop.i32(i32 %15481) #16
  %15483 = trunc i32 %15482 to i8
  %15484 = and i8 %15483, 1
  %15485 = xor i8 %15484, 1
  %15486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15485, i8* %15486, align 1, !tbaa !2446
  %15487 = xor i32 %15473, %15471
  %15488 = xor i32 %15487, %15474
  %15489 = lshr i32 %15488, 4
  %15490 = trunc i32 %15489 to i8
  %15491 = and i8 %15490, 1
  %15492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15491, i8* %15492, align 1, !tbaa !2447
  %15493 = icmp eq i32 %15474, 0
  %15494 = zext i1 %15493 to i8
  %15495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15494, i8* %15495, align 1, !tbaa !2448
  %15496 = lshr i32 %15474, 31
  %15497 = trunc i32 %15496 to i8
  %15498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15497, i8* %15498, align 1, !tbaa !2449
  %15499 = lshr i32 %15471, 31
  %15500 = lshr i32 %15473, 31
  %15501 = xor i32 %15496, %15499
  %15502 = xor i32 %15496, %15500
  %15503 = add nuw nsw i32 %15501, %15502
  %15504 = icmp eq i32 %15503, 2
  %15505 = zext i1 %15504 to i8
  %15506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15505, i8* %15506, align 1, !tbaa !2450
  %15507 = load i32, i32* %EDX
  %15508 = zext i32 %15507 to i64
  %15509 = load i64, i64* %PC
  %15510 = add i64 %15509, 3
  store i64 %15510, i64* %PC
  %15511 = shl i64 %15508, 32
  %15512 = ashr exact i64 %15511, 32
  store i64 %15512, i64* %RCX, align 8, !tbaa !2428
  %15513 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15514 = load i64, i64* %RAX
  %15515 = load i64, i64* %RCX
  %15516 = mul i64 %15515, 4
  %15517 = add i64 %15516, %15514
  %15518 = load i64, i64* %PC
  %15519 = add i64 %15518, 5
  store i64 %15519, i64* %PC
  %15520 = inttoptr i64 %15517 to float*
  %15521 = load float, float* %15520
  %15522 = bitcast i8* %15513 to float*
  store float %15521, float* %15522, align 1, !tbaa !2452
  %15523 = getelementptr inbounds i8, i8* %15513, i64 4
  %15524 = bitcast i8* %15523 to float*
  store float 0.000000e+00, float* %15524, align 1, !tbaa !2452
  %15525 = getelementptr inbounds i8, i8* %15513, i64 8
  %15526 = bitcast i8* %15525 to float*
  store float 0.000000e+00, float* %15526, align 1, !tbaa !2452
  %15527 = getelementptr inbounds i8, i8* %15513, i64 12
  %15528 = bitcast i8* %15527 to float*
  store float 0.000000e+00, float* %15528, align 1, !tbaa !2452
  %15529 = load i64, i64* %RBP
  %15530 = sub i64 %15529, 40
  %15531 = load i64, i64* %PC
  %15532 = add i64 %15531, 4
  store i64 %15532, i64* %PC
  %15533 = inttoptr i64 %15530 to i64*
  %15534 = load i64, i64* %15533
  store i64 %15534, i64* %RAX, align 8, !tbaa !2428
  %15535 = load i64, i64* %RAX
  %15536 = load i64, i64* %PC
  %15537 = add i64 %15536, 3
  store i64 %15537, i64* %PC
  %15538 = inttoptr i64 %15535 to i64*
  %15539 = load i64, i64* %15538
  store i64 %15539, i64* %RAX, align 8, !tbaa !2428
  %15540 = load i64, i64* %RBP
  %15541 = sub i64 %15540, 40
  %15542 = load i64, i64* %PC
  %15543 = add i64 %15542, 4
  store i64 %15543, i64* %PC
  %15544 = inttoptr i64 %15541 to i64*
  %15545 = load i64, i64* %15544
  store i64 %15545, i64* %RCX, align 8, !tbaa !2428
  %15546 = load i64, i64* %RCX
  %15547 = add i64 %15546, 12
  %15548 = load i64, i64* %PC
  %15549 = add i64 %15548, 4
  store i64 %15549, i64* %PC
  %15550 = inttoptr i64 %15547 to i32*
  %15551 = load i32, i32* %15550
  %15552 = sext i32 %15551 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %15553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15553, align 1, !tbaa !2432
  %15554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %15554, align 1, !tbaa !2446
  %15555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15555, align 1, !tbaa !2447
  %15556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15556, align 1, !tbaa !2448
  %15557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15557, align 1, !tbaa !2449
  %15558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15558, align 1, !tbaa !2450
  %15559 = load i64, i64* %RBP
  %15560 = sub i64 %15559, 40
  %15561 = load i64, i64* %PC
  %15562 = add i64 %15561, 4
  store i64 %15562, i64* %PC
  %15563 = inttoptr i64 %15560 to i64*
  %15564 = load i64, i64* %15563
  store i64 %15564, i64* %RCX, align 8, !tbaa !2428
  %15565 = load i64, i64* %RDX
  %15566 = load i64, i64* %RCX
  %15567 = add i64 %15566, 16
  %15568 = load i64, i64* %PC
  %15569 = add i64 %15568, 4
  store i64 %15569, i64* %PC
  %15570 = inttoptr i64 %15567 to i32*
  %15571 = load i32, i32* %15570
  %15572 = shl i64 %15565, 32
  %15573 = ashr exact i64 %15572, 32
  %15574 = sext i32 %15571 to i64
  %15575 = mul nsw i64 %15574, %15573
  %15576 = trunc i64 %15575 to i32
  %15577 = and i64 %15575, 4294967295
  store i64 %15577, i64* %RDX, align 8, !tbaa !2428
  %15578 = shl i64 %15575, 32
  %15579 = ashr exact i64 %15578, 32
  %15580 = icmp ne i64 %15579, %15575
  %15581 = zext i1 %15580 to i8
  %15582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15581, i8* %15582, align 1, !tbaa !2432
  %15583 = and i32 %15576, 255
  %15584 = call i32 @llvm.ctpop.i32(i32 %15583) #16
  %15585 = trunc i32 %15584 to i8
  %15586 = and i8 %15585, 1
  %15587 = xor i8 %15586, 1
  %15588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15587, i8* %15588, align 1, !tbaa !2446
  %15589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15589, align 1, !tbaa !2447
  %15590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15590, align 1, !tbaa !2448
  %15591 = lshr i32 %15576, 31
  %15592 = trunc i32 %15591 to i8
  %15593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15592, i8* %15593, align 1, !tbaa !2449
  %15594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15581, i8* %15594, align 1, !tbaa !2450
  %15595 = load i64, i64* %RBP
  %15596 = sub i64 %15595, 40
  %15597 = load i64, i64* %PC
  %15598 = add i64 %15597, 4
  store i64 %15598, i64* %PC
  %15599 = inttoptr i64 %15596 to i64*
  %15600 = load i64, i64* %15599
  store i64 %15600, i64* %RCX, align 8, !tbaa !2428
  %15601 = load i64, i64* %RDX
  %15602 = load i64, i64* %RCX
  %15603 = add i64 %15602, 20
  %15604 = load i64, i64* %PC
  %15605 = add i64 %15604, 4
  store i64 %15605, i64* %PC
  %15606 = inttoptr i64 %15603 to i32*
  %15607 = load i32, i32* %15606
  %15608 = shl i64 %15601, 32
  %15609 = ashr exact i64 %15608, 32
  %15610 = sext i32 %15607 to i64
  %15611 = mul nsw i64 %15610, %15609
  %15612 = trunc i64 %15611 to i32
  %15613 = and i64 %15611, 4294967295
  store i64 %15613, i64* %RDX, align 8, !tbaa !2428
  %15614 = shl i64 %15611, 32
  %15615 = ashr exact i64 %15614, 32
  %15616 = icmp ne i64 %15615, %15611
  %15617 = zext i1 %15616 to i8
  %15618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15617, i8* %15618, align 1, !tbaa !2432
  %15619 = and i32 %15612, 255
  %15620 = call i32 @llvm.ctpop.i32(i32 %15619) #16
  %15621 = trunc i32 %15620 to i8
  %15622 = and i8 %15621, 1
  %15623 = xor i8 %15622, 1
  %15624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15623, i8* %15624, align 1, !tbaa !2446
  %15625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15625, align 1, !tbaa !2447
  %15626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15626, align 1, !tbaa !2448
  %15627 = lshr i32 %15612, 31
  %15628 = trunc i32 %15627 to i8
  %15629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15628, i8* %15629, align 1, !tbaa !2449
  %15630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15617, i8* %15630, align 1, !tbaa !2450
  %15631 = load i64, i64* %RBP
  %15632 = sub i64 %15631, 52
  %15633 = load i64, i64* %PC
  %15634 = add i64 %15633, 3
  store i64 %15634, i64* %PC
  %15635 = inttoptr i64 %15632 to i32*
  %15636 = load i32, i32* %15635
  %15637 = zext i32 %15636 to i64
  store i64 %15637, i64* %RSI, align 8, !tbaa !2428
  %15638 = load i64, i64* %RBP
  %15639 = sub i64 %15638, 40
  %15640 = load i64, i64* %PC
  %15641 = add i64 %15640, 4
  store i64 %15641, i64* %PC
  %15642 = inttoptr i64 %15639 to i64*
  %15643 = load i64, i64* %15642
  store i64 %15643, i64* %RCX, align 8, !tbaa !2428
  %15644 = load i64, i64* %RSI
  %15645 = load i64, i64* %RCX
  %15646 = add i64 %15645, 16
  %15647 = load i64, i64* %PC
  %15648 = add i64 %15647, 4
  store i64 %15648, i64* %PC
  %15649 = inttoptr i64 %15646 to i32*
  %15650 = load i32, i32* %15649
  %15651 = shl i64 %15644, 32
  %15652 = ashr exact i64 %15651, 32
  %15653 = sext i32 %15650 to i64
  %15654 = mul nsw i64 %15653, %15652
  %15655 = trunc i64 %15654 to i32
  %15656 = and i64 %15654, 4294967295
  store i64 %15656, i64* %RSI, align 8, !tbaa !2428
  %15657 = shl i64 %15654, 32
  %15658 = ashr exact i64 %15657, 32
  %15659 = icmp ne i64 %15658, %15654
  %15660 = zext i1 %15659 to i8
  %15661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15660, i8* %15661, align 1, !tbaa !2432
  %15662 = and i32 %15655, 255
  %15663 = call i32 @llvm.ctpop.i32(i32 %15662) #16
  %15664 = trunc i32 %15663 to i8
  %15665 = and i8 %15664, 1
  %15666 = xor i8 %15665, 1
  %15667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15666, i8* %15667, align 1, !tbaa !2446
  %15668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15668, align 1, !tbaa !2447
  %15669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15669, align 1, !tbaa !2448
  %15670 = lshr i32 %15655, 31
  %15671 = trunc i32 %15670 to i8
  %15672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15671, i8* %15672, align 1, !tbaa !2449
  %15673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15660, i8* %15673, align 1, !tbaa !2450
  %15674 = load i64, i64* %RBP
  %15675 = sub i64 %15674, 40
  %15676 = load i64, i64* %PC
  %15677 = add i64 %15676, 4
  store i64 %15677, i64* %PC
  %15678 = inttoptr i64 %15675 to i64*
  %15679 = load i64, i64* %15678
  store i64 %15679, i64* %RCX, align 8, !tbaa !2428
  %15680 = load i64, i64* %RSI
  %15681 = load i64, i64* %RCX
  %15682 = add i64 %15681, 20
  %15683 = load i64, i64* %PC
  %15684 = add i64 %15683, 4
  store i64 %15684, i64* %PC
  %15685 = inttoptr i64 %15682 to i32*
  %15686 = load i32, i32* %15685
  %15687 = shl i64 %15680, 32
  %15688 = ashr exact i64 %15687, 32
  %15689 = sext i32 %15686 to i64
  %15690 = mul nsw i64 %15689, %15688
  %15691 = trunc i64 %15690 to i32
  %15692 = and i64 %15690, 4294967295
  store i64 %15692, i64* %RSI, align 8, !tbaa !2428
  %15693 = shl i64 %15690, 32
  %15694 = ashr exact i64 %15693, 32
  %15695 = icmp ne i64 %15694, %15690
  %15696 = zext i1 %15695 to i8
  %15697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15696, i8* %15697, align 1, !tbaa !2432
  %15698 = and i32 %15691, 255
  %15699 = call i32 @llvm.ctpop.i32(i32 %15698) #16
  %15700 = trunc i32 %15699 to i8
  %15701 = and i8 %15700, 1
  %15702 = xor i8 %15701, 1
  %15703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15702, i8* %15703, align 1, !tbaa !2446
  %15704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15704, align 1, !tbaa !2447
  %15705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15705, align 1, !tbaa !2448
  %15706 = lshr i32 %15691, 31
  %15707 = trunc i32 %15706 to i8
  %15708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15707, i8* %15708, align 1, !tbaa !2449
  %15709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15696, i8* %15709, align 1, !tbaa !2450
  %15710 = load i64, i64* %RDX
  %15711 = load i32, i32* %ESI
  %15712 = zext i32 %15711 to i64
  %15713 = load i64, i64* %PC
  %15714 = add i64 %15713, 2
  store i64 %15714, i64* %PC
  %15715 = trunc i64 %15710 to i32
  %15716 = add i32 %15711, %15715
  %15717 = zext i32 %15716 to i64
  store i64 %15717, i64* %RDX, align 8, !tbaa !2428
  %15718 = icmp ult i32 %15716, %15715
  %15719 = icmp ult i32 %15716, %15711
  %15720 = or i1 %15718, %15719
  %15721 = zext i1 %15720 to i8
  %15722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15721, i8* %15722, align 1, !tbaa !2432
  %15723 = and i32 %15716, 255
  %15724 = call i32 @llvm.ctpop.i32(i32 %15723) #16
  %15725 = trunc i32 %15724 to i8
  %15726 = and i8 %15725, 1
  %15727 = xor i8 %15726, 1
  %15728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15727, i8* %15728, align 1, !tbaa !2446
  %15729 = xor i64 %15712, %15710
  %15730 = trunc i64 %15729 to i32
  %15731 = xor i32 %15730, %15716
  %15732 = lshr i32 %15731, 4
  %15733 = trunc i32 %15732 to i8
  %15734 = and i8 %15733, 1
  %15735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15734, i8* %15735, align 1, !tbaa !2447
  %15736 = icmp eq i32 %15716, 0
  %15737 = zext i1 %15736 to i8
  %15738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15737, i8* %15738, align 1, !tbaa !2448
  %15739 = lshr i32 %15716, 31
  %15740 = trunc i32 %15739 to i8
  %15741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15740, i8* %15741, align 1, !tbaa !2449
  %15742 = lshr i32 %15715, 31
  %15743 = lshr i32 %15711, 31
  %15744 = xor i32 %15739, %15742
  %15745 = xor i32 %15739, %15743
  %15746 = add nuw nsw i32 %15744, %15745
  %15747 = icmp eq i32 %15746, 2
  %15748 = zext i1 %15747 to i8
  %15749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15748, i8* %15749, align 1, !tbaa !2450
  %15750 = load i64, i64* %RBP
  %15751 = sub i64 %15750, 56
  %15752 = load i64, i64* %PC
  %15753 = add i64 %15752, 3
  store i64 %15753, i64* %PC
  %15754 = inttoptr i64 %15751 to i32*
  %15755 = load i32, i32* %15754
  %15756 = zext i32 %15755 to i64
  store i64 %15756, i64* %RSI, align 8, !tbaa !2428
  %15757 = load i64, i64* %RBP
  %15758 = sub i64 %15757, 40
  %15759 = load i64, i64* %PC
  %15760 = add i64 %15759, 4
  store i64 %15760, i64* %PC
  %15761 = inttoptr i64 %15758 to i64*
  %15762 = load i64, i64* %15761
  store i64 %15762, i64* %RCX, align 8, !tbaa !2428
  %15763 = load i64, i64* %RSI
  %15764 = load i64, i64* %RCX
  %15765 = add i64 %15764, 20
  %15766 = load i64, i64* %PC
  %15767 = add i64 %15766, 4
  store i64 %15767, i64* %PC
  %15768 = inttoptr i64 %15765 to i32*
  %15769 = load i32, i32* %15768
  %15770 = shl i64 %15763, 32
  %15771 = ashr exact i64 %15770, 32
  %15772 = sext i32 %15769 to i64
  %15773 = mul nsw i64 %15772, %15771
  %15774 = trunc i64 %15773 to i32
  %15775 = and i64 %15773, 4294967295
  store i64 %15775, i64* %RSI, align 8, !tbaa !2428
  %15776 = shl i64 %15773, 32
  %15777 = ashr exact i64 %15776, 32
  %15778 = icmp ne i64 %15777, %15773
  %15779 = zext i1 %15778 to i8
  %15780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15779, i8* %15780, align 1, !tbaa !2432
  %15781 = and i32 %15774, 255
  %15782 = call i32 @llvm.ctpop.i32(i32 %15781) #16
  %15783 = trunc i32 %15782 to i8
  %15784 = and i8 %15783, 1
  %15785 = xor i8 %15784, 1
  %15786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15785, i8* %15786, align 1, !tbaa !2446
  %15787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15787, align 1, !tbaa !2447
  %15788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15788, align 1, !tbaa !2448
  %15789 = lshr i32 %15774, 31
  %15790 = trunc i32 %15789 to i8
  %15791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15790, i8* %15791, align 1, !tbaa !2449
  %15792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15779, i8* %15792, align 1, !tbaa !2450
  %15793 = load i64, i64* %RDX
  %15794 = load i32, i32* %ESI
  %15795 = zext i32 %15794 to i64
  %15796 = load i64, i64* %PC
  %15797 = add i64 %15796, 2
  store i64 %15797, i64* %PC
  %15798 = trunc i64 %15793 to i32
  %15799 = add i32 %15794, %15798
  %15800 = zext i32 %15799 to i64
  store i64 %15800, i64* %RDX, align 8, !tbaa !2428
  %15801 = icmp ult i32 %15799, %15798
  %15802 = icmp ult i32 %15799, %15794
  %15803 = or i1 %15801, %15802
  %15804 = zext i1 %15803 to i8
  %15805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15804, i8* %15805, align 1, !tbaa !2432
  %15806 = and i32 %15799, 255
  %15807 = call i32 @llvm.ctpop.i32(i32 %15806) #16
  %15808 = trunc i32 %15807 to i8
  %15809 = and i8 %15808, 1
  %15810 = xor i8 %15809, 1
  %15811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15810, i8* %15811, align 1, !tbaa !2446
  %15812 = xor i64 %15795, %15793
  %15813 = trunc i64 %15812 to i32
  %15814 = xor i32 %15813, %15799
  %15815 = lshr i32 %15814, 4
  %15816 = trunc i32 %15815 to i8
  %15817 = and i8 %15816, 1
  %15818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15817, i8* %15818, align 1, !tbaa !2447
  %15819 = icmp eq i32 %15799, 0
  %15820 = zext i1 %15819 to i8
  %15821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15820, i8* %15821, align 1, !tbaa !2448
  %15822 = lshr i32 %15799, 31
  %15823 = trunc i32 %15822 to i8
  %15824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15823, i8* %15824, align 1, !tbaa !2449
  %15825 = lshr i32 %15798, 31
  %15826 = lshr i32 %15794, 31
  %15827 = xor i32 %15822, %15825
  %15828 = xor i32 %15822, %15826
  %15829 = add nuw nsw i32 %15827, %15828
  %15830 = icmp eq i32 %15829, 2
  %15831 = zext i1 %15830 to i8
  %15832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15831, i8* %15832, align 1, !tbaa !2450
  %15833 = load i64, i64* %RDX
  %15834 = load i64, i64* %RBP
  %15835 = sub i64 %15834, 60
  %15836 = load i64, i64* %PC
  %15837 = add i64 %15836, 3
  store i64 %15837, i64* %PC
  %15838 = trunc i64 %15833 to i32
  %15839 = inttoptr i64 %15835 to i32*
  %15840 = load i32, i32* %15839
  %15841 = add i32 %15840, %15838
  %15842 = zext i32 %15841 to i64
  store i64 %15842, i64* %RDX, align 8, !tbaa !2428
  %15843 = icmp ult i32 %15841, %15838
  %15844 = icmp ult i32 %15841, %15840
  %15845 = or i1 %15843, %15844
  %15846 = zext i1 %15845 to i8
  %15847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15846, i8* %15847, align 1, !tbaa !2432
  %15848 = and i32 %15841, 255
  %15849 = call i32 @llvm.ctpop.i32(i32 %15848) #16
  %15850 = trunc i32 %15849 to i8
  %15851 = and i8 %15850, 1
  %15852 = xor i8 %15851, 1
  %15853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15852, i8* %15853, align 1, !tbaa !2446
  %15854 = xor i32 %15840, %15838
  %15855 = xor i32 %15854, %15841
  %15856 = lshr i32 %15855, 4
  %15857 = trunc i32 %15856 to i8
  %15858 = and i8 %15857, 1
  %15859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15858, i8* %15859, align 1, !tbaa !2447
  %15860 = icmp eq i32 %15841, 0
  %15861 = zext i1 %15860 to i8
  %15862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15861, i8* %15862, align 1, !tbaa !2448
  %15863 = lshr i32 %15841, 31
  %15864 = trunc i32 %15863 to i8
  %15865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15864, i8* %15865, align 1, !tbaa !2449
  %15866 = lshr i32 %15838, 31
  %15867 = lshr i32 %15840, 31
  %15868 = xor i32 %15863, %15866
  %15869 = xor i32 %15863, %15867
  %15870 = add nuw nsw i32 %15868, %15869
  %15871 = icmp eq i32 %15870, 2
  %15872 = zext i1 %15871 to i8
  %15873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15872, i8* %15873, align 1, !tbaa !2450
  %15874 = load i32, i32* %EDX
  %15875 = zext i32 %15874 to i64
  %15876 = load i64, i64* %PC
  %15877 = add i64 %15876, 3
  store i64 %15877, i64* %PC
  %15878 = shl i64 %15875, 32
  %15879 = ashr exact i64 %15878, 32
  store i64 %15879, i64* %RCX, align 8, !tbaa !2428
  %15880 = load i64, i64* %RAX
  %15881 = load i64, i64* %RCX
  %15882 = mul i64 %15881, 4
  %15883 = add i64 %15882, %15880
  %15884 = bitcast %union.vec128_t* %XMM0 to i8*
  %15885 = load i64, i64* %PC
  %15886 = add i64 %15885, 5
  store i64 %15886, i64* %PC
  %15887 = bitcast i8* %15884 to <2 x float>*
  %15888 = load <2 x float>, <2 x float>* %15887, align 1
  %15889 = extractelement <2 x float> %15888, i32 0
  %15890 = inttoptr i64 %15883 to float*
  store float %15889, float* %15890
  %15891 = load i64, i64* %RBP
  %15892 = sub i64 %15891, 60
  %15893 = load i64, i64* %PC
  %15894 = add i64 %15893, 3
  store i64 %15894, i64* %PC
  %15895 = inttoptr i64 %15892 to i32*
  %15896 = load i32, i32* %15895
  %15897 = zext i32 %15896 to i64
  store i64 %15897, i64* %RAX, align 8, !tbaa !2428
  %15898 = load i64, i64* %RAX
  %15899 = load i64, i64* %PC
  %15900 = add i64 %15899, 3
  store i64 %15900, i64* %PC
  %15901 = trunc i64 %15898 to i32
  %15902 = add i32 1, %15901
  %15903 = zext i32 %15902 to i64
  store i64 %15903, i64* %RAX, align 8, !tbaa !2428
  %15904 = icmp ult i32 %15902, %15901
  %15905 = icmp ult i32 %15902, 1
  %15906 = or i1 %15904, %15905
  %15907 = zext i1 %15906 to i8
  %15908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15907, i8* %15908, align 1, !tbaa !2432
  %15909 = and i32 %15902, 255
  %15910 = call i32 @llvm.ctpop.i32(i32 %15909) #16
  %15911 = trunc i32 %15910 to i8
  %15912 = and i8 %15911, 1
  %15913 = xor i8 %15912, 1
  %15914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15913, i8* %15914, align 1, !tbaa !2446
  %15915 = xor i64 1, %15898
  %15916 = trunc i64 %15915 to i32
  %15917 = xor i32 %15916, %15902
  %15918 = lshr i32 %15917, 4
  %15919 = trunc i32 %15918 to i8
  %15920 = and i8 %15919, 1
  %15921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15920, i8* %15921, align 1, !tbaa !2447
  %15922 = icmp eq i32 %15902, 0
  %15923 = zext i1 %15922 to i8
  %15924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15923, i8* %15924, align 1, !tbaa !2448
  %15925 = lshr i32 %15902, 31
  %15926 = trunc i32 %15925 to i8
  %15927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15926, i8* %15927, align 1, !tbaa !2449
  %15928 = lshr i32 %15901, 31
  %15929 = xor i32 %15925, %15928
  %15930 = add nuw nsw i32 %15929, %15925
  %15931 = icmp eq i32 %15930, 2
  %15932 = zext i1 %15931 to i8
  %15933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15932, i8* %15933, align 1, !tbaa !2450
  %15934 = load i64, i64* %RBP
  %15935 = sub i64 %15934, 60
  %15936 = load i32, i32* %EAX
  %15937 = zext i32 %15936 to i64
  %15938 = load i64, i64* %PC
  %15939 = add i64 %15938, 3
  store i64 %15939, i64* %PC
  %15940 = inttoptr i64 %15935 to i32*
  store i32 %15936, i32* %15940
  %15941 = load i64, i64* %PC
  %15942 = sub i64 %15941, 173
  %15943 = load i64, i64* %PC
  %15944 = add i64 %15943, 5
  store i64 %15944, i64* %PC
  %15945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15942, i64* %15945, align 8, !tbaa !2428
  br label %block_40187e
}

; Function Attrs: noinline
define %struct.Memory* @sub_400620___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400620:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400640, label %block_400629

block_400640:                                     ; preds = %block_400620
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400629:                                     ; preds = %block_400620
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4005b0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400af0_mat_set_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400af0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %36 to %"class.std::bitset"*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %38 to %union.vec128_t*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = load i64, i64* %RBP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 12
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61
  br label %block_400aff

block_400b3d:                                     ; preds = %block_400b2d
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 12
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %63 to i32*
  %67 = load i32, i32* %66
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 12
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74
  %76 = shl i64 %69, 32
  %77 = ashr exact i64 %76, 32
  %78 = sext i32 %75 to i64
  %79 = mul nsw i64 %78, %77
  %80 = trunc i64 %79 to i32
  %81 = and i64 %79, 4294967295
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = shl i64 %79, 32
  %83 = ashr exact i64 %82, 32
  %84 = icmp ne i64 %83, %79
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %85, i8* %86, align 1, !tbaa !2432
  %87 = and i32 %80, 255
  %88 = call i32 @llvm.ctpop.i32(i32 %87) #16
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %91, i8* %92, align 1, !tbaa !2446
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %93, align 1, !tbaa !2447
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %94, align 1, !tbaa !2448
  %95 = lshr i32 %80, 31
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %96, i8* %97, align 1, !tbaa !2449
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %98, align 1, !tbaa !2450
  %99 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %100 = load i32, i32* %EAX
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = bitcast i8* %99 to <2 x i32>*
  %105 = load <2 x i32>, <2 x i32>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %99, i64 8
  %107 = bitcast i8* %106 to <2 x i32>*
  %108 = load <2 x i32>, <2 x i32>* %107, align 1
  %109 = sitofp i32 %100 to float
  %110 = bitcast i8* %99 to float*
  store float %109, float* %110, align 1, !tbaa !2452
  %111 = extractelement <2 x i32> %105, i32 1
  %112 = getelementptr inbounds i8, i8* %99, i64 4
  %113 = bitcast i8* %112 to i32*
  store i32 %111, i32* %113, align 1, !tbaa !2452
  %114 = extractelement <2 x i32> %108, i32 0
  %115 = bitcast i8* %106 to i32*
  store i32 %114, i32* %115, align 1, !tbaa !2452
  %116 = extractelement <2 x i32> %108, i32 1
  %117 = getelementptr inbounds i8, i8* %99, i64 12
  %118 = bitcast i8* %117 to i32*
  store i32 %116, i32* %118, align 1, !tbaa !2452
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = load i64, i64* %RCX
  %126 = add i64 %125, 12
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %RAX
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = trunc i64 %132 to i32
  %136 = sub i32 %135, 1
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = icmp ult i32 %135, 1
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %139, i8* %140, align 1, !tbaa !2432
  %141 = and i32 %136, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #16
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2446
  %147 = xor i64 1, %132
  %148 = trunc i64 %147 to i32
  %149 = xor i32 %148, %136
  %150 = lshr i32 %149, 4
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %152, i8* %153, align 1, !tbaa !2447
  %154 = icmp eq i32 %136, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2448
  %157 = lshr i32 %136, 31
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2449
  %160 = lshr i32 %135, 31
  %161 = xor i32 %157, %160
  %162 = add nuw nsw i32 %161, %160
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 8
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RCX, align 8, !tbaa !2428
  %172 = load i64, i64* %RCX
  %173 = add i64 %172, 12
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RDX, align 8, !tbaa !2428
  %179 = load i64, i64* %RDX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = trunc i64 %179 to i32
  %183 = sub i32 %182, 1
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = icmp ult i32 %182, 1
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %186, i8* %187, align 1, !tbaa !2432
  %188 = and i32 %183, 255
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #16
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %192, i8* %193, align 1, !tbaa !2446
  %194 = xor i64 1, %179
  %195 = trunc i64 %194 to i32
  %196 = xor i32 %195, %183
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %199, i8* %200, align 1, !tbaa !2447
  %201 = icmp eq i32 %183, 0
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %202, i8* %203, align 1, !tbaa !2448
  %204 = lshr i32 %183, 31
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %205, i8* %206, align 1, !tbaa !2449
  %207 = lshr i32 %182, 31
  %208 = xor i32 %204, %207
  %209 = add nuw nsw i32 %208, %207
  %210 = icmp eq i32 %209, 2
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %211, i8* %212, align 1, !tbaa !2450
  %213 = load i64, i64* %RAX
  %214 = load i32, i32* %EDX
  %215 = zext i32 %214 to i64
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = shl i64 %213, 32
  %219 = ashr exact i64 %218, 32
  %220 = shl i64 %215, 32
  %221 = ashr exact i64 %220, 32
  %222 = mul nsw i64 %221, %219
  %223 = trunc i64 %222 to i32
  %224 = and i64 %222, 4294967295
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = shl i64 %222, 32
  %226 = ashr exact i64 %225, 32
  %227 = icmp ne i64 %226, %222
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2432
  %230 = and i32 %223, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2446
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %237, align 1, !tbaa !2448
  %238 = lshr i32 %223, 31
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2449
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %228, i8* %241, align 1, !tbaa !2450
  %242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %243 = load i32, i32* %EAX
  %244 = zext i32 %243 to i64
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = bitcast i8* %242 to <2 x i32>*
  %248 = load <2 x i32>, <2 x i32>* %247, align 1
  %249 = getelementptr inbounds i8, i8* %242, i64 8
  %250 = bitcast i8* %249 to <2 x i32>*
  %251 = load <2 x i32>, <2 x i32>* %250, align 1
  %252 = sitofp i32 %243 to float
  %253 = bitcast i8* %242 to float*
  store float %252, float* %253, align 1, !tbaa !2452
  %254 = extractelement <2 x i32> %248, i32 1
  %255 = getelementptr inbounds i8, i8* %242, i64 4
  %256 = bitcast i8* %255 to i32*
  store i32 %254, i32* %256, align 1, !tbaa !2452
  %257 = extractelement <2 x i32> %251, i32 0
  %258 = bitcast i8* %249 to i32*
  store i32 %257, i32* %258, align 1, !tbaa !2452
  %259 = extractelement <2 x i32> %251, i32 1
  %260 = getelementptr inbounds i8, i8* %242, i64 12
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2452
  %262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %264 = bitcast %union.vec128_t* %XMM1 to i8*
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = bitcast i8* %263 to <2 x float>*
  %268 = load <2 x float>, <2 x float>* %267, align 1
  %269 = getelementptr inbounds i8, i8* %263, i64 8
  %270 = bitcast i8* %269 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 1
  %272 = bitcast i8* %264 to <2 x float>*
  %273 = load <2 x float>, <2 x float>* %272, align 1
  %274 = extractelement <2 x float> %268, i32 0
  %275 = extractelement <2 x float> %273, i32 0
  %276 = fdiv float %274, %275
  %277 = bitcast i8* %262 to float*
  store float %276, float* %277, align 1, !tbaa !2452
  %278 = bitcast <2 x float> %268 to <2 x i32>
  %279 = extractelement <2 x i32> %278, i32 1
  %280 = getelementptr inbounds i8, i8* %262, i64 4
  %281 = bitcast i8* %280 to i32*
  store i32 %279, i32* %281, align 1, !tbaa !2452
  %282 = extractelement <2 x i32> %271, i32 0
  %283 = getelementptr inbounds i8, i8* %262, i64 8
  %284 = bitcast i8* %283 to i32*
  store i32 %282, i32* %284, align 1, !tbaa !2452
  %285 = extractelement <2 x i32> %271, i32 1
  %286 = getelementptr inbounds i8, i8* %262, i64 12
  %287 = bitcast i8* %286 to i32*
  store i32 %285, i32* %287, align 1, !tbaa !2452
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 8
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 4
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RCX, align 8, !tbaa !2428
  %294 = load i64, i64* %RCX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 8
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %RSI, align 8, !tbaa !2428
  %305 = load i64, i64* %RSI
  %306 = add i64 %305, 12
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %312, align 1, !tbaa !2432
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %313, align 1, !tbaa !2446
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %314, align 1, !tbaa !2447
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %315, align 1, !tbaa !2448
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %316, align 1, !tbaa !2449
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %317, align 1, !tbaa !2450
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i64*
  %323 = load i64, i64* %322
  store i64 %323, i64* %RSI, align 8, !tbaa !2428
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %RSI
  %326 = add i64 %325, 16
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = shl i64 %324, 32
  %332 = ashr exact i64 %331, 32
  %333 = sext i32 %330 to i64
  %334 = mul nsw i64 %333, %332
  %335 = trunc i64 %334 to i32
  %336 = and i64 %334, 4294967295
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = shl i64 %334, 32
  %338 = ashr exact i64 %337, 32
  %339 = icmp ne i64 %338, %334
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %340, i8* %341, align 1, !tbaa !2432
  %342 = and i32 %335, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2446
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %348, align 1, !tbaa !2447
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %349, align 1, !tbaa !2448
  %350 = lshr i32 %335, 31
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %351, i8* %352, align 1, !tbaa !2449
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %340, i8* %353, align 1, !tbaa !2450
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 8
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RSI, align 8, !tbaa !2428
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %RSI
  %362 = add i64 %361, 20
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i32*
  %366 = load i32, i32* %365
  %367 = shl i64 %360, 32
  %368 = ashr exact i64 %367, 32
  %369 = sext i32 %366 to i64
  %370 = mul nsw i64 %369, %368
  %371 = trunc i64 %370 to i32
  %372 = and i64 %370, 4294967295
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = shl i64 %370, 32
  %374 = ashr exact i64 %373, 32
  %375 = icmp ne i64 %374, %370
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %376, i8* %377, align 1, !tbaa !2432
  %378 = and i32 %371, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2446
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %384, align 1, !tbaa !2447
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %385, align 1, !tbaa !2448
  %386 = lshr i32 %371, 31
  %387 = trunc i32 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %387, i8* %388, align 1, !tbaa !2449
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %389, align 1, !tbaa !2450
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RDX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 8
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = load i64, i64* %RDX
  %404 = load i64, i64* %RSI
  %405 = add i64 %404, 16
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  %409 = load i32, i32* %408
  %410 = shl i64 %403, 32
  %411 = ashr exact i64 %410, 32
  %412 = sext i32 %409 to i64
  %413 = mul nsw i64 %412, %411
  %414 = trunc i64 %413 to i32
  %415 = and i64 %413, 4294967295
  store i64 %415, i64* %RDX, align 8, !tbaa !2428
  %416 = shl i64 %413, 32
  %417 = ashr exact i64 %416, 32
  %418 = icmp ne i64 %417, %413
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %419, i8* %420, align 1, !tbaa !2432
  %421 = and i32 %414, 255
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %425, i8* %426, align 1, !tbaa !2446
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %427, align 1, !tbaa !2447
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %428, align 1, !tbaa !2448
  %429 = lshr i32 %414, 31
  %430 = trunc i32 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %430, i8* %431, align 1, !tbaa !2449
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %419, i8* %432, align 1, !tbaa !2450
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 8
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RSI, align 8, !tbaa !2428
  %439 = load i64, i64* %RDX
  %440 = load i64, i64* %RSI
  %441 = add i64 %440, 20
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  %445 = load i32, i32* %444
  %446 = shl i64 %439, 32
  %447 = ashr exact i64 %446, 32
  %448 = sext i32 %445 to i64
  %449 = mul nsw i64 %448, %447
  %450 = trunc i64 %449 to i32
  %451 = and i64 %449, 4294967295
  store i64 %451, i64* %RDX, align 8, !tbaa !2428
  %452 = shl i64 %449, 32
  %453 = ashr exact i64 %452, 32
  %454 = icmp ne i64 %453, %449
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %455, i8* %456, align 1, !tbaa !2432
  %457 = and i32 %450, 255
  %458 = call i32 @llvm.ctpop.i32(i32 %457) #16
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %461, i8* %462, align 1, !tbaa !2446
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %463, align 1, !tbaa !2447
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %464, align 1, !tbaa !2448
  %465 = lshr i32 %450, 31
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %466, i8* %467, align 1, !tbaa !2449
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %468, align 1, !tbaa !2450
  %469 = load i64, i64* %RAX
  %470 = load i32, i32* %EDX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 2
  store i64 %473, i64* %PC
  %474 = trunc i64 %469 to i32
  %475 = add i32 %470, %474
  %476 = zext i32 %475 to i64
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = icmp ult i32 %475, %474
  %478 = icmp ult i32 %475, %470
  %479 = or i1 %477, %478
  %480 = zext i1 %479 to i8
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %480, i8* %481, align 1, !tbaa !2432
  %482 = and i32 %475, 255
  %483 = call i32 @llvm.ctpop.i32(i32 %482) #16
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  %486 = xor i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %486, i8* %487, align 1, !tbaa !2446
  %488 = xor i64 %471, %469
  %489 = trunc i64 %488 to i32
  %490 = xor i32 %489, %475
  %491 = lshr i32 %490, 4
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %493, i8* %494, align 1, !tbaa !2447
  %495 = icmp eq i32 %475, 0
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %496, i8* %497, align 1, !tbaa !2448
  %498 = lshr i32 %475, 31
  %499 = trunc i32 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %499, i8* %500, align 1, !tbaa !2449
  %501 = lshr i32 %474, 31
  %502 = lshr i32 %470, 31
  %503 = xor i32 %498, %501
  %504 = xor i32 %498, %502
  %505 = add nuw nsw i32 %503, %504
  %506 = icmp eq i32 %505, 2
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %507, i8* %508, align 1, !tbaa !2450
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 16
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RDX, align 8, !tbaa !2428
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 8
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i64*
  %521 = load i64, i64* %520
  store i64 %521, i64* %RSI, align 8, !tbaa !2428
  %522 = load i64, i64* %RDX
  %523 = load i64, i64* %RSI
  %524 = add i64 %523, 20
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 4
  store i64 %526, i64* %PC
  %527 = inttoptr i64 %524 to i32*
  %528 = load i32, i32* %527
  %529 = shl i64 %522, 32
  %530 = ashr exact i64 %529, 32
  %531 = sext i32 %528 to i64
  %532 = mul nsw i64 %531, %530
  %533 = trunc i64 %532 to i32
  %534 = and i64 %532, 4294967295
  store i64 %534, i64* %RDX, align 8, !tbaa !2428
  %535 = shl i64 %532, 32
  %536 = ashr exact i64 %535, 32
  %537 = icmp ne i64 %536, %532
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %538, i8* %539, align 1, !tbaa !2432
  %540 = and i32 %533, 255
  %541 = call i32 @llvm.ctpop.i32(i32 %540) #16
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %544, i8* %545, align 1, !tbaa !2446
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %546, align 1, !tbaa !2447
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %547, align 1, !tbaa !2448
  %548 = lshr i32 %533, 31
  %549 = trunc i32 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %549, i8* %550, align 1, !tbaa !2449
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %538, i8* %551, align 1, !tbaa !2450
  %552 = load i64, i64* %RAX
  %553 = load i32, i32* %EDX
  %554 = zext i32 %553 to i64
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 2
  store i64 %556, i64* %PC
  %557 = trunc i64 %552 to i32
  %558 = add i32 %553, %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = icmp ult i32 %558, %557
  %561 = icmp ult i32 %558, %553
  %562 = or i1 %560, %561
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %563, i8* %564, align 1, !tbaa !2432
  %565 = and i32 %558, 255
  %566 = call i32 @llvm.ctpop.i32(i32 %565) #16
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %569, i8* %570, align 1, !tbaa !2446
  %571 = xor i64 %554, %552
  %572 = trunc i64 %571 to i32
  %573 = xor i32 %572, %558
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %576, i8* %577, align 1, !tbaa !2447
  %578 = icmp eq i32 %558, 0
  %579 = zext i1 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %579, i8* %580, align 1, !tbaa !2448
  %581 = lshr i32 %558, 31
  %582 = trunc i32 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %582, i8* %583, align 1, !tbaa !2449
  %584 = lshr i32 %557, 31
  %585 = lshr i32 %553, 31
  %586 = xor i32 %581, %584
  %587 = xor i32 %581, %585
  %588 = add nuw nsw i32 %586, %587
  %589 = icmp eq i32 %588, 2
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %590, i8* %591, align 1, !tbaa !2450
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 20
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 3
  store i64 %596, i64* %PC
  %597 = trunc i64 %592 to i32
  %598 = inttoptr i64 %594 to i32*
  %599 = load i32, i32* %598
  %600 = add i32 %599, %597
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = icmp ult i32 %600, %597
  %603 = icmp ult i32 %600, %599
  %604 = or i1 %602, %603
  %605 = zext i1 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %605, i8* %606, align 1, !tbaa !2432
  %607 = and i32 %600, 255
  %608 = call i32 @llvm.ctpop.i32(i32 %607) #16
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %611, i8* %612, align 1, !tbaa !2446
  %613 = xor i32 %599, %597
  %614 = xor i32 %613, %600
  %615 = lshr i32 %614, 4
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2447
  %619 = icmp eq i32 %600, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2448
  %622 = lshr i32 %600, 31
  %623 = trunc i32 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2449
  %625 = lshr i32 %597, 31
  %626 = lshr i32 %599, 31
  %627 = xor i32 %622, %625
  %628 = xor i32 %622, %626
  %629 = add nuw nsw i32 %627, %628
  %630 = icmp eq i32 %629, 2
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %632, align 1, !tbaa !2450
  %633 = load i32, i32* %EAX
  %634 = zext i32 %633 to i64
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = shl i64 %634, 32
  %638 = ashr exact i64 %637, 32
  store i64 %638, i64* %RSI, align 8, !tbaa !2428
  %639 = load i64, i64* %RCX
  %640 = load i64, i64* %RSI
  %641 = mul i64 %640, 4
  %642 = add i64 %641, %639
  %643 = bitcast %union.vec128_t* %XMM0 to i8*
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = bitcast i8* %643 to <2 x float>*
  %647 = load <2 x float>, <2 x float>* %646, align 1
  %648 = extractelement <2 x float> %647, i32 0
  %649 = inttoptr i64 %642 to float*
  store float %648, float* %649
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 20
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 3
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i32*
  %655 = load i32, i32* %654
  %656 = zext i32 %655 to i64
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 3
  store i64 %659, i64* %PC
  %660 = trunc i64 %657 to i32
  %661 = add i32 1, %660
  %662 = zext i32 %661 to i64
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = icmp ult i32 %661, %660
  %664 = icmp ult i32 %661, 1
  %665 = or i1 %663, %664
  %666 = zext i1 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %666, i8* %667, align 1, !tbaa !2432
  %668 = and i32 %661, 255
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #16
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %672, i8* %673, align 1, !tbaa !2446
  %674 = xor i64 1, %657
  %675 = trunc i64 %674 to i32
  %676 = xor i32 %675, %661
  %677 = lshr i32 %676, 4
  %678 = trunc i32 %677 to i8
  %679 = and i8 %678, 1
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %679, i8* %680, align 1, !tbaa !2447
  %681 = icmp eq i32 %661, 0
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %682, i8* %683, align 1, !tbaa !2448
  %684 = lshr i32 %661, 31
  %685 = trunc i32 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %685, i8* %686, align 1, !tbaa !2449
  %687 = lshr i32 %660, 31
  %688 = xor i32 %684, %687
  %689 = add nuw nsw i32 %688, %684
  %690 = icmp eq i32 %689, 2
  %691 = zext i1 %690 to i8
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %691, i8* %692, align 1, !tbaa !2450
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 20
  %695 = load i32, i32* %EAX
  %696 = zext i32 %695 to i64
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %694 to i32*
  store i32 %695, i32* %699
  %700 = load i64, i64* %PC
  %701 = sub i64 %700, 143
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  store i64 %703, i64* %PC
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %701, i64* %704, align 8, !tbaa !2428
  br label %block_400b2d

block_400b16:                                     ; preds = %block_400bc1, %block_400b0f
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_400b0f ], [ %MEMORY.1, %block_400bc1 ]
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 16
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RAX, align 8, !tbaa !2428
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 8
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 4
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i64*
  %717 = load i64, i64* %716
  store i64 %717, i64* %RCX, align 8, !tbaa !2428
  %718 = load i32, i32* %EAX
  %719 = zext i32 %718 to i64
  %720 = load i64, i64* %RCX
  %721 = add i64 %720, 16
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = sub i32 %718, %725
  %727 = icmp ult i32 %718, %725
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %728, i8* %729, align 1, !tbaa !2432
  %730 = and i32 %726, 255
  %731 = call i32 @llvm.ctpop.i32(i32 %730) #16
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %734, i8* %735, align 1, !tbaa !2446
  %736 = xor i32 %725, %718
  %737 = xor i32 %736, %726
  %738 = lshr i32 %737, 4
  %739 = trunc i32 %738 to i8
  %740 = and i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %740, i8* %741, align 1, !tbaa !2447
  %742 = icmp eq i32 %726, 0
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %743, i8* %744, align 1, !tbaa !2448
  %745 = lshr i32 %726, 31
  %746 = trunc i32 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %746, i8* %747, align 1, !tbaa !2449
  %748 = lshr i32 %718, 31
  %749 = lshr i32 %725, 31
  %750 = xor i32 %749, %748
  %751 = xor i32 %745, %748
  %752 = add nuw nsw i32 %751, %750
  %753 = icmp eq i32 %752, 2
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %754, i8* %755, align 1, !tbaa !2450
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 180
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 6
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 6
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %763 = load i8, i8* %762, align 1, !tbaa !2449
  %764 = icmp ne i8 %763, 0
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %766 = load i8, i8* %765, align 1, !tbaa !2450
  %767 = icmp ne i8 %766, 0
  %768 = xor i1 %764, %767
  %769 = xor i1 %768, true
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %772 = select i1 %768, i64 %759, i64 %757
  store i64 %772, i64* %771, align 8, !tbaa !2428
  %773 = load i8, i8* %BRANCH_TAKEN
  %774 = icmp eq i8 %773, 1
  br i1 %774, label %block_400bd4, label %block_400b26

block_400bd4:                                     ; preds = %block_400b16
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 5
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 5
  store i64 %778, i64* %PC
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %776, i64* %779, align 8, !tbaa !2428
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 3
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = trunc i64 %787 to i32
  %791 = add i32 1, %790
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = icmp ult i32 %791, %790
  %794 = icmp ult i32 %791, 1
  %795 = or i1 %793, %794
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %796, i8* %797, align 1, !tbaa !2432
  %798 = and i32 %791, 255
  %799 = call i32 @llvm.ctpop.i32(i32 %798) #16
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  %802 = xor i8 %801, 1
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %802, i8* %803, align 1, !tbaa !2446
  %804 = xor i64 1, %787
  %805 = trunc i64 %804 to i32
  %806 = xor i32 %805, %791
  %807 = lshr i32 %806, 4
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %809, i8* %810, align 1, !tbaa !2447
  %811 = icmp eq i32 %791, 0
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %812, i8* %813, align 1, !tbaa !2448
  %814 = lshr i32 %791, 31
  %815 = trunc i32 %814 to i8
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %815, i8* %816, align 1, !tbaa !2449
  %817 = lshr i32 %790, 31
  %818 = xor i32 %814, %817
  %819 = add nuw nsw i32 %818, %814
  %820 = icmp eq i32 %819, 2
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %821, i8* %822, align 1, !tbaa !2450
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 12
  %825 = load i32, i32* %EAX
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %824 to i32*
  store i32 %825, i32* %829
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 227
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %834, align 8, !tbaa !2428
  br label %block_400aff

block_400b0f:                                     ; preds = %block_400aff
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 16
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 7
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  store i32 0, i32* %839
  br label %block_400b16

block_400b2d:                                     ; preds = %block_400b26, %block_400b3d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_400b26 ], [ %MEMORY.1, %block_400b3d ]
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 20
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i32, i32* %EAX
  %854 = zext i32 %853 to i64
  %855 = load i64, i64* %RCX
  %856 = add i64 %855, 20
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  %860 = load i32, i32* %859
  %861 = sub i32 %853, %860
  %862 = icmp ult i32 %853, %860
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %864, align 1, !tbaa !2432
  %865 = and i32 %861, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2446
  %871 = xor i32 %860, %853
  %872 = xor i32 %871, %861
  %873 = lshr i32 %872, 4
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %875, i8* %876, align 1, !tbaa !2447
  %877 = icmp eq i32 %861, 0
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = lshr i32 %861, 31
  %881 = trunc i32 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %853, 31
  %884 = lshr i32 %860, 31
  %885 = xor i32 %884, %883
  %886 = xor i32 %880, %883
  %887 = add nuw nsw i32 %886, %885
  %888 = icmp eq i32 %887, 2
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %889, i8* %890, align 1, !tbaa !2450
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 138
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 6
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 6
  store i64 %896, i64* %PC
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %898 = load i8, i8* %897, align 1, !tbaa !2449
  %899 = icmp ne i8 %898, 0
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %901 = load i8, i8* %900, align 1, !tbaa !2450
  %902 = icmp ne i8 %901, 0
  %903 = xor i1 %899, %902
  %904 = xor i1 %903, true
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %907 = select i1 %903, i64 %894, i64 %892
  store i64 %907, i64* %906, align 8, !tbaa !2428
  %908 = load i8, i8* %BRANCH_TAKEN
  %909 = icmp eq i8 %908, 1
  br i1 %909, label %block_400bc1, label %block_400b3d

block_400be7:                                     ; preds = %block_400aff
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 1
  store i64 %911, i64* %PC
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %913 = load i64, i64* %912, align 8, !tbaa !2428
  %914 = add i64 %913, 8
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %RBP, align 8, !tbaa !2428
  store i64 %914, i64* %912, align 8, !tbaa !2428
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 1
  store i64 %918, i64* %PC
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %921 = load i64, i64* %920, align 8, !tbaa !2428
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  store i64 %923, i64* %919, align 8, !tbaa !2428
  %924 = add i64 %921, 8
  store i64 %924, i64* %920, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_400aff:                                     ; preds = %block_400bd4, %block_400af0
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400af0 ], [ %MEMORY.0, %block_400bd4 ]
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 12
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929
  %931 = zext i32 %930 to i64
  store i64 %931, i64* %RAX, align 8, !tbaa !2428
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 8
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 4
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %RCX, align 8, !tbaa !2428
  %938 = load i32, i32* %EAX
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %RCX
  %941 = add i64 %940, 12
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = sub i32 %938, %945
  %947 = icmp ult i32 %938, %945
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %948, i8* %949, align 1, !tbaa !2432
  %950 = and i32 %946, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2446
  %956 = xor i32 %945, %938
  %957 = xor i32 %956, %946
  %958 = lshr i32 %957, 4
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2447
  %962 = icmp eq i32 %946, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2448
  %965 = lshr i32 %946, 31
  %966 = trunc i32 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2449
  %968 = lshr i32 %938, 31
  %969 = lshr i32 %945, 31
  %970 = xor i32 %969, %968
  %971 = xor i32 %965, %968
  %972 = add nuw nsw i32 %971, %970
  %973 = icmp eq i32 %972, 2
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %974, i8* %975, align 1, !tbaa !2450
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 222
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 6
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 6
  store i64 %981, i64* %PC
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %983 = load i8, i8* %982, align 1, !tbaa !2449
  %984 = icmp ne i8 %983, 0
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %986 = load i8, i8* %985, align 1, !tbaa !2450
  %987 = icmp ne i8 %986, 0
  %988 = xor i1 %984, %987
  %989 = xor i1 %988, true
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %992 = select i1 %988, i64 %979, i64 %977
  store i64 %992, i64* %991, align 8, !tbaa !2428
  %993 = load i8, i8* %BRANCH_TAKEN
  %994 = icmp eq i8 %993, 1
  br i1 %994, label %block_400be7, label %block_400b0f

block_400b26:                                     ; preds = %block_400b16
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 20
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 7
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i32*
  store i32 0, i32* %999
  br label %block_400b2d

block_400bc1:                                     ; preds = %block_400b2d
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 5
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 5
  store i64 %1003, i64* %PC
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1001, i64* %1004, align 8, !tbaa !2428
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 16
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RAX, align 8, !tbaa !2428
  %1012 = load i64, i64* %RAX
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 3
  store i64 %1014, i64* %PC
  %1015 = trunc i64 %1012 to i32
  %1016 = add i32 1, %1015
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %RAX, align 8, !tbaa !2428
  %1018 = icmp ult i32 %1016, %1015
  %1019 = icmp ult i32 %1016, 1
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2432
  %1023 = and i32 %1016, 255
  %1024 = call i32 @llvm.ctpop.i32(i32 %1023) #16
  %1025 = trunc i32 %1024 to i8
  %1026 = and i8 %1025, 1
  %1027 = xor i8 %1026, 1
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1027, i8* %1028, align 1, !tbaa !2446
  %1029 = xor i64 1, %1012
  %1030 = trunc i64 %1029 to i32
  %1031 = xor i32 %1030, %1016
  %1032 = lshr i32 %1031, 4
  %1033 = trunc i32 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2447
  %1036 = icmp eq i32 %1016, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2448
  %1039 = lshr i32 %1016, 31
  %1040 = trunc i32 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2449
  %1042 = lshr i32 %1015, 31
  %1043 = xor i32 %1039, %1042
  %1044 = add nuw nsw i32 %1043, %1039
  %1045 = icmp eq i32 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = load i64, i64* %RBP
  %1049 = sub i64 %1048, 16
  %1050 = load i32, i32* %EAX
  %1051 = zext i32 %1050 to i64
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 3
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1049 to i32*
  store i32 %1050, i32* %1054
  %1055 = load i64, i64* %PC
  %1056 = sub i64 %1055, 185
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  store i64 %1058, i64* %PC
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1059, align 8, !tbaa !2428
  br label %block_400b16
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004f2, label %block_4004f0

block_4004f0:                                     ; preds = %block_4004e0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4004f2

block_4004f2:                                     ; preds = %block_4004f0, %block_4004e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004e0 ], [ %92, %block_4004f0 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d10___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6236
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4004e0__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401d66, label %block_401d46

block_401d66:                                     ; preds = %block_401d50, %block_401d10
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401d10 ], [ %387, %block_401d50 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401d46:                                     ; preds = %block_401d10
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401d50

block_401d50:                                     ; preds = %block_401d50, %block_401d46
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401d46 ], [ %387, %block_401d50 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401d50, label %block_401d66
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a60_newMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a60:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = sub i64 %46, 32
  store i64 %49, i64* %RSP, align 8, !tbaa !2428
  %50 = icmp ult i64 %46, 32
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %51, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %49 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = xor i64 32, %46
  %61 = xor i64 %60, %49
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = icmp eq i64 %49, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %49, 63
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = lshr i64 %46, 63
  %73 = xor i64 %69, %72
  %74 = add nuw nsw i64 %73, %72
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %76, i8* %77, align 1, !tbaa !2450
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 8
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 12
  %86 = load i32, i32* %ESI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i32, i32* %EDX
  %94 = zext i32 %93 to i64
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 20
  %100 = load i32, i32* %ECX
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %99 to i32*
  store i32 %100, i32* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 24
  %107 = load i32, i32* %R8D
  %108 = zext i32 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 12
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 3
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  %117 = load i32, i32* %116
  %118 = zext i32 %117 to i64
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %RDI
  %126 = add i64 %125, 8
  %127 = load i32, i32* %ECX
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %126 to i32*
  store i32 %127, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 16
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 8
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = load i64, i64* %RDI
  %146 = add i64 %145, 12
  %147 = load i32, i32* %ECX
  %148 = zext i32 %147 to i64
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %146 to i32*
  store i32 %147, i32* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 20
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 3
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RDI, align 8, !tbaa !2428
  %165 = load i64, i64* %RDI
  %166 = add i64 %165, 16
  %167 = load i32, i32* %ECX
  %168 = zext i32 %167 to i64
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 3
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %166 to i32*
  store i32 %167, i32* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 24
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = add i64 %185, 20
  %187 = load i32, i32* %ECX
  %188 = zext i32 %187 to i64
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %186 to i32*
  store i32 %187, i32* %191
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RDI
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 7
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i64*
  store i64 0, i64* %201
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 12
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = load i64, i64* %RCX
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 16
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  %215 = load i32, i32* %214
  %216 = shl i64 %209, 32
  %217 = ashr exact i64 %216, 32
  %218 = sext i32 %215 to i64
  %219 = mul nsw i64 %218, %217
  %220 = trunc i64 %219 to i32
  %221 = and i64 %219, 4294967295
  store i64 %221, i64* %RCX, align 8, !tbaa !2428
  %222 = shl i64 %219, 32
  %223 = ashr exact i64 %222, 32
  %224 = icmp ne i64 %223, %219
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %225, i8* %226, align 1, !tbaa !2432
  %227 = and i32 %220, 255
  %228 = call i32 @llvm.ctpop.i32(i32 %227) #16
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %231, i8* %232, align 1, !tbaa !2446
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %233, align 1, !tbaa !2447
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %234, align 1, !tbaa !2448
  %235 = lshr i32 %220, 31
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %236, i8* %237, align 1, !tbaa !2449
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %238, align 1, !tbaa !2450
  %239 = load i64, i64* %RCX
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 20
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i32*
  %245 = load i32, i32* %244
  %246 = shl i64 %239, 32
  %247 = ashr exact i64 %246, 32
  %248 = sext i32 %245 to i64
  %249 = mul nsw i64 %248, %247
  %250 = trunc i64 %249 to i32
  %251 = and i64 %249, 4294967295
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = shl i64 %249, 32
  %253 = ashr exact i64 %252, 32
  %254 = icmp ne i64 %253, %249
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2432
  %257 = and i32 %250, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2446
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %263, align 1, !tbaa !2447
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %264, align 1, !tbaa !2448
  %265 = lshr i32 %250, 31
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %268, align 1, !tbaa !2450
  %269 = load i64, i64* %RCX
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 24
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = shl i64 %269, 32
  %277 = ashr exact i64 %276, 32
  %278 = sext i32 %275 to i64
  %279 = mul nsw i64 %278, %277
  %280 = trunc i64 %279 to i32
  %281 = and i64 %279, 4294967295
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %282 = shl i64 %279, 32
  %283 = ashr exact i64 %282, 32
  %284 = icmp ne i64 %283, %279
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2432
  %287 = and i32 %280, 255
  %288 = call i32 @llvm.ctpop.i32(i32 %287) #16
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %291, i8* %292, align 1, !tbaa !2446
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %293, align 1, !tbaa !2447
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %294, align 1, !tbaa !2448
  %295 = lshr i32 %280, 31
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %296, i8* %297, align 1, !tbaa !2449
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %285, i8* %298, align 1, !tbaa !2450
  %299 = load i32, i32* %ECX
  %300 = zext i32 %299 to i64
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 3
  store i64 %302, i64* %PC
  %303 = shl i64 %300, 32
  %304 = ashr exact i64 %303, 32
  store i64 %304, i64* %RDI, align 8, !tbaa !2428
  %305 = load i64, i64* %RDI
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = shl i64 %305, 1
  %309 = icmp slt i64 %308, 0
  %310 = shl i64 %308, 1
  store i64 %310, i64* %RDI, align 8, !tbaa !2428
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %312 = zext i1 %309 to i8
  store i8 %312, i8* %311, align 1, !tbaa !2451
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %314 = trunc i64 %310 to i32
  %315 = and i32 %314, 254
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %313, align 1, !tbaa !2451
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %320, align 1, !tbaa !2451
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %322 = icmp eq i64 %310, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %321, align 1, !tbaa !2451
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %325 = lshr i64 %310, 63
  %326 = trunc i64 %325 to i8
  store i8 %326, i8* %324, align 1, !tbaa !2451
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %327, align 1, !tbaa !2451
  %328 = load i64, i64* %PC
  %329 = sub i64 %328, 1394
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 5
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %335 = load i64, i64* %334, align 8, !tbaa !2428
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %331, i64* %337
  store i64 %336, i64* %334, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %338, align 8, !tbaa !2428
  %339 = load i64, i64* %PC
  %340 = call %struct.Memory* @ext_603140_malloc(%struct.State* %0, i64 %339, %struct.Memory* %2)
  %341 = load i64, i64* %RCX
  %342 = load i32, i32* %ECX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 2
  store i64 %345, i64* %PC
  %346 = xor i64 %343, %341
  %347 = trunc i64 %346 to i32
  %348 = and i64 %346, 4294967295
  store i64 %348, i64* %RCX, align 8, !tbaa !2428
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %349, align 1, !tbaa !2432
  %350 = and i32 %347, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2446
  %356 = icmp eq i32 %347, 0
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %357, i8* %358, align 1, !tbaa !2448
  %359 = lshr i32 %347, 31
  %360 = trunc i32 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %360, i8* %361, align 1, !tbaa !2449
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %362, align 1, !tbaa !2450
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %363, align 1, !tbaa !2447
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 8
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %372 = load i64, i64* %RDI
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %372 to i64*
  store i64 %373, i64* %376
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 8
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i64, i64* %RAX
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %388, align 1, !tbaa !2432
  %389 = trunc i64 %387 to i32
  %390 = and i32 %389, 255
  %391 = call i32 @llvm.ctpop.i32(i32 %390) #16
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %394, i8* %395, align 1, !tbaa !2446
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %396, align 1, !tbaa !2447
  %397 = icmp eq i64 %387, 0
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %398, i8* %399, align 1, !tbaa !2448
  %400 = lshr i64 %387, 63
  %401 = trunc i64 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %401, i8* %402, align 1, !tbaa !2449
  %403 = lshr i64 %387, 63
  %404 = xor i64 %400, %403
  %405 = add nuw nsw i64 %404, %403
  %406 = icmp eq i64 %405, 2
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %407, i8* %408, align 1, !tbaa !2450
  %409 = load i32, i32* %EDX
  %410 = zext i32 %409 to i64
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 3
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %414 = load i8, i8* %413, align 1, !tbaa !2448
  %415 = icmp eq i8 %414, 0
  %416 = load i64, i64* %RCX, align 8, !tbaa !2428
  %417 = select i1 %415, i64 %410, i64 %416
  %418 = and i64 %417, 4294967295
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = load i32, i32* %ECX
  %420 = zext i32 %419 to i64
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 2
  store i64 %422, i64* %PC
  %423 = and i64 %420, 4294967295
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RSP
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 32, %424
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 32
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 32, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 1
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %461 = load i64, i64* %460, align 8, !tbaa !2428
  %462 = add i64 %461, 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %RBP, align 8, !tbaa !2428
  store i64 %462, i64* %460, align 8, !tbaa !2428
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 1
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %469 = load i64, i64* %468, align 8, !tbaa !2428
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %467, align 8, !tbaa !2428
  %472 = add i64 %469, 8
  store i64 %472, i64* %468, align 8, !tbaa !2428
  ret %struct.Memory* %340
}

; Function Attrs: noinline
define %struct.Memory* @sub_400650_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400650:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4005e0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019e0_fflop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4019e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 8
  store i64 %48, i64* %PC
  %49 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 16) to double*)
  %50 = bitcast i8* %46 to double*
  store double %49, double* %50, align 1, !tbaa !2455
  %51 = getelementptr inbounds i8, i8* %46, i64 8
  %52 = bitcast i8* %51 to double*
  store double 0.000000e+00, double* %52, align 1, !tbaa !2455
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i32, i32* %EDI
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i32, i32* %ESI
  %63 = zext i32 %62 to i64
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 12
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RDX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = trunc i64 %81 to i32
  %85 = sub i32 %84, 2
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp ult i32 %84, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %85, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = xor i64 2, %81
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %97, %85
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i32 %85, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = lshr i32 %85, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = lshr i32 %84, 31
  %110 = xor i32 %106, %109
  %111 = add nuw nsw i32 %110, %109
  %112 = icmp eq i32 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %116 = load i32, i32* %EDX
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = sitofp i32 %116 to double
  %121 = bitcast i8* %115 to double*
  store double %120, double* %121, align 1, !tbaa !2455
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = trunc i64 %129 to i32
  %133 = sub i32 %132, 2
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RDX, align 8, !tbaa !2428
  %135 = icmp ult i32 %132, 2
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2432
  %138 = and i32 %133, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2446
  %144 = xor i64 2, %129
  %145 = trunc i64 %144 to i32
  %146 = xor i32 %145, %133
  %147 = lshr i32 %146, 4
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2447
  %151 = icmp eq i32 %133, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2448
  %154 = lshr i32 %133, 31
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = lshr i32 %132, 31
  %158 = xor i32 %154, %157
  %159 = add nuw nsw i32 %158, %157
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2450
  %163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %164 = load i32, i32* %EDX
  %165 = zext i32 %164 to i64
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = sitofp i32 %164 to double
  %169 = bitcast i8* %163 to double*
  store double %168, double* %169, align 1, !tbaa !2455
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %172 = bitcast %union.vec128_t* %XMM2 to i8*
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = bitcast i8* %171 to double*
  %176 = load double, double* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 8
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = bitcast i8* %172 to double*
  %181 = load double, double* %180, align 1
  %182 = fmul double %176, %181
  %183 = bitcast i8* %170 to double*
  store double %182, double* %183, align 1, !tbaa !2455
  %184 = getelementptr inbounds i8, i8* %170, i64 8
  %185 = bitcast i8* %184 to i64*
  store i64 %179, i64* %185, align 1, !tbaa !2455
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 4
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RDX, align 8, !tbaa !2428
  %193 = load i64, i64* %RDX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = trunc i64 %193 to i32
  %197 = sub i32 %196, 2
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDX, align 8, !tbaa !2428
  %199 = icmp ult i32 %196, 2
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2432
  %202 = and i32 %197, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i64 2, %193
  %209 = trunc i64 %208 to i32
  %210 = xor i32 %209, %197
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2447
  %215 = icmp eq i32 %197, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2448
  %218 = lshr i32 %197, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2449
  %221 = lshr i32 %196, 31
  %222 = xor i32 %218, %221
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2450
  %227 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %228 = load i32, i32* %EDX
  %229 = zext i32 %228 to i64
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = sitofp i32 %228 to double
  %233 = bitcast i8* %227 to double*
  store double %232, double* %233, align 1, !tbaa !2455
  %234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %236 = bitcast %union.vec128_t* %XMM2 to i8*
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC
  %239 = bitcast i8* %235 to double*
  %240 = load double, double* %239, align 1
  %241 = getelementptr inbounds i8, i8* %235, i64 8
  %242 = bitcast i8* %241 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = bitcast i8* %236 to double*
  %245 = load double, double* %244, align 1
  %246 = fmul double %240, %245
  %247 = bitcast i8* %234 to double*
  store double %246, double* %247, align 1, !tbaa !2455
  %248 = getelementptr inbounds i8, i8* %234, i64 8
  %249 = bitcast i8* %248 to i64*
  store i64 %243, i64* %249, align 1, !tbaa !2455
  %250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = bitcast i8* %251 to double*
  %256 = load double, double* %255, align 1
  %257 = getelementptr inbounds i8, i8* %251, i64 8
  %258 = bitcast i8* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = bitcast i8* %252 to double*
  %261 = load double, double* %260, align 1
  %262 = fmul double %256, %261
  %263 = bitcast i8* %250 to double*
  store double %262, double* %263, align 1, !tbaa !2455
  %264 = getelementptr inbounds i8, i8* %250, i64 8
  %265 = bitcast i8* %264 to i64*
  store i64 %259, i64* %265, align 1, !tbaa !2455
  %266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %267 = bitcast %union.vec128_t* %XMM1 to i8*
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  %270 = bitcast i8* %267 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 1
  %272 = getelementptr inbounds i8, i8* %267, i64 8
  %273 = bitcast i8* %272 to <2 x i32>*
  %274 = load <2 x i32>, <2 x i32>* %273, align 1
  %275 = extractelement <2 x i32> %271, i32 0
  %276 = bitcast i8* %266 to i32*
  store i32 %275, i32* %276, align 1, !tbaa !2452
  %277 = extractelement <2 x i32> %271, i32 1
  %278 = getelementptr inbounds i8, i8* %266, i64 4
  %279 = bitcast i8* %278 to i32*
  store i32 %277, i32* %279, align 1, !tbaa !2452
  %280 = extractelement <2 x i32> %274, i32 0
  %281 = getelementptr inbounds i8, i8* %266, i64 8
  %282 = bitcast i8* %281 to i32*
  store i32 %280, i32* %282, align 1, !tbaa !2452
  %283 = extractelement <2 x i32> %274, i32 1
  %284 = getelementptr inbounds i8, i8* %266, i64 12
  %285 = bitcast i8* %284 to i32*
  store i32 %283, i32* %285, align 1, !tbaa !2452
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RBP, align 8, !tbaa !2428
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %295, align 8, !tbaa !2428
  %300 = add i64 %297, 8
  store i64 %300, i64* %296, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d84__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d84:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d80___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400570__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400570:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401d80___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401d10___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603168___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c60_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c60:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2432
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2446
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2447
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2448
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2449
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 16
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %RAX
  %89 = load i32, i32* %EAX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2432
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2446
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2450
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2447
  %111 = load i32, i32* %EAX
  %112 = zext i32 %111 to i64
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 2
  store i64 %114, i64* %PC
  %115 = and i64 %112, 4294967295
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = sub i64 %116, 5952
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %123 = load i64, i64* %122, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %119, i64* %125
  store i64 %124, i64* %122, align 8, !tbaa !2428
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %126, align 8, !tbaa !2428
  %127 = load i64, i64* %PC
  %128 = call %struct.Memory* @ext_400530_gettimeofday(%struct.State* %0, i64 %127, %struct.Memory* %2)
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 8
  store i64 %130, i64* %PC
  %131 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %132, align 1, !tbaa !2432
  %133 = and i32 %131, 255
  %134 = call i32 @llvm.ctpop.i32(i32 %133) #16
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %137, i8* %138, align 1, !tbaa !2446
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %139, align 1, !tbaa !2447
  %140 = icmp eq i32 %131, 0
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %141, i8* %142, align 1, !tbaa !2448
  %143 = lshr i32 %131, 31
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %144, i8* %145, align 1, !tbaa !2449
  %146 = lshr i32 %131, 31
  %147 = xor i32 %143, %146
  %148 = add nuw nsw i32 %147, %146
  %149 = icmp eq i32 %148, 2
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %150, i8* %151, align 1, !tbaa !2450
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 28
  %154 = load i32, i32* %EAX
  %155 = zext i32 %154 to i64
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %153 to i32*
  store i32 %154, i32* %158
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 59
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 6
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 6
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %166 = load i8, i8* %165, align 1, !tbaa !2448
  %167 = icmp eq i8 %166, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %170 = select i1 %167, i64 %160, i64 %162
  store i64 %170, i64* %169, align 8, !tbaa !2428
  %171 = load i8, i8* %BRANCH_TAKEN
  %172 = icmp eq i8 %171, 1
  br i1 %172, label %block_401cbb, label %block_401c86

block_401cf8:                                     ; preds = %block_401cbb, %block_401c94
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_401cbb ], [ %128, %block_401c94 ]
  %173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 24
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 5
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to double*
  %179 = load double, double* %178
  %180 = bitcast i8* %173 to double*
  store double %179, double* %180, align 1, !tbaa !2455
  %181 = getelementptr inbounds i8, i8* %173, i64 8
  %182 = bitcast i8* %181 to double*
  store double 0.000000e+00, double* %182, align 1, !tbaa !2455
  %183 = load i64, i64* %RSP
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = add i64 32, %183
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %187 = icmp ult i64 %186, %183
  %188 = icmp ult i64 %186, 32
  %189 = or i1 %187, %188
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2432
  %192 = trunc i64 %186 to i32
  %193 = and i32 %192, 255
  %194 = call i32 @llvm.ctpop.i32(i32 %193) #16
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %197, i8* %198, align 1, !tbaa !2446
  %199 = xor i64 32, %183
  %200 = xor i64 %199, %186
  %201 = lshr i64 %200, 4
  %202 = trunc i64 %201 to i8
  %203 = and i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %203, i8* %204, align 1, !tbaa !2447
  %205 = icmp eq i64 %186, 0
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %206, i8* %207, align 1, !tbaa !2448
  %208 = lshr i64 %186, 63
  %209 = trunc i64 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %209, i8* %210, align 1, !tbaa !2449
  %211 = lshr i64 %183, 63
  %212 = xor i64 %208, %211
  %213 = add nuw nsw i64 %212, %208
  %214 = icmp eq i64 %213, 2
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %215, i8* %216, align 1, !tbaa !2450
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 1
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, 8
  %222 = inttoptr i64 %220 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %RBP, align 8, !tbaa !2428
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 1
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %228 = load i64, i64* %227, align 8, !tbaa !2428
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %226, align 8, !tbaa !2428
  %231 = add i64 %228, 8
  store i64 %231, i64* %227, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401c94:                                     ; preds = %block_401c86
  %232 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %233 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %234 = bitcast %union.vec128_t* %XMM0 to i8*
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = bitcast i8* %233 to i64*
  %238 = load i64, i64* %237, align 1
  %239 = getelementptr inbounds i8, i8* %233, i64 8
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240, align 1
  %242 = bitcast i8* %234 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = getelementptr inbounds i8, i8* %234, i64 8
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = xor i64 %243, %238
  %248 = xor i64 %246, %241
  %249 = trunc i64 %247 to i32
  %250 = lshr i64 %247, 32
  %251 = trunc i64 %250 to i32
  %252 = bitcast i8* %232 to i32*
  store i32 %249, i32* %252, align 1, !tbaa !2454
  %253 = getelementptr inbounds i8, i8* %232, i64 4
  %254 = bitcast i8* %253 to i32*
  store i32 %251, i32* %254, align 1, !tbaa !2454
  %255 = trunc i64 %248 to i32
  %256 = getelementptr inbounds i8, i8* %232, i64 8
  %257 = bitcast i8* %256 to i32*
  store i32 %255, i32* %257, align 1, !tbaa !2454
  %258 = lshr i64 %248, 32
  %259 = trunc i64 %258 to i32
  %260 = getelementptr inbounds i8, i8* %232, i64 12
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2454
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 16
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i32, i32* %EAX
  %269 = zext i32 %268 to i64
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 2
  store i64 %271, i64* %PC
  %272 = and i64 %269, 4294967295
  store i64 %272, i64* %RCX, align 8, !tbaa !2428
  %273 = load i32, i32* %ECX
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 7
  store i64 %276, i64* %PC
  store i32 %273, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 8
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = load i32, i32* %EAX
  %284 = zext i32 %283 to i64
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 2
  store i64 %286, i64* %PC
  %287 = and i64 %284, 4294967295
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = load i32, i32* %ECX
  %289 = zext i32 %288 to i64
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 7
  store i64 %291, i64* %PC
  store i32 %288, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 24
  %294 = bitcast %union.vec128_t* %XMM0 to i8*
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = bitcast i8* %294 to double*
  %298 = load double, double* %297, align 1
  %299 = inttoptr i64 %293 to double*
  store double %298, double* %299
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 66
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_401cf8

block_401c86:                                     ; preds = %block_401c60
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 8
  store i64 %306, i64* %PC
  %307 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %308, align 1, !tbaa !2432
  %309 = and i32 %307, 255
  %310 = call i32 @llvm.ctpop.i32(i32 %309) #16
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %313, i8* %314, align 1, !tbaa !2446
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %315, align 1, !tbaa !2447
  %316 = icmp eq i32 %307, 0
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %318, align 1, !tbaa !2448
  %319 = lshr i32 %307, 31
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %320, i8* %321, align 1, !tbaa !2449
  %322 = lshr i32 %307, 31
  %323 = xor i32 %319, %322
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %326, i8* %327, align 1, !tbaa !2450
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 45
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 6
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 6
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %335 = load i8, i8* %334, align 1, !tbaa !2448
  %336 = icmp eq i8 %335, 0
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %339 = select i1 %336, i64 %329, i64 %331
  store i64 %339, i64* %338, align 8, !tbaa !2428
  %340 = load i8, i8* %BRANCH_TAKEN
  %341 = icmp eq i8 %340, 1
  br i1 %341, label %block_401cbb, label %block_401c94

block_401cbb:                                     ; preds = %block_401c86, %block_401c60
  %MEMORY.1 = phi %struct.Memory* [ %128, %block_401c60 ], [ %128, %block_401c86 ]
  %342 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 8
  store i64 %344, i64* %PC
  %345 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401d90__rodata_type* @seg_401d90__rodata to i64), i64 32) to double*)
  %346 = bitcast i8* %342 to double*
  store double %345, double* %346, align 1, !tbaa !2455
  %347 = getelementptr inbounds i8, i8* %342, i64 8
  %348 = bitcast i8* %347 to double*
  store double 0.000000e+00, double* %348, align 1, !tbaa !2455
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 16
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %RAX, align 8, !tbaa !2428
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 8
  store i64 %356, i64* %PC
  %357 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %358 = sext i32 %357 to i64
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = load i64, i64* %RAX
  %360 = load i64, i64* %RCX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = sub i64 %359, %360
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = icmp ult i64 %359, %360
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %365, i8* %366, align 1, !tbaa !2432
  %367 = trunc i64 %363 to i32
  %368 = and i32 %367, 255
  %369 = call i32 @llvm.ctpop.i32(i32 %368) #16
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %372, i8* %373, align 1, !tbaa !2446
  %374 = xor i64 %360, %359
  %375 = xor i64 %374, %363
  %376 = lshr i64 %375, 4
  %377 = trunc i64 %376 to i8
  %378 = and i8 %377, 1
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %378, i8* %379, align 1, !tbaa !2447
  %380 = icmp eq i64 %363, 0
  %381 = zext i1 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %381, i8* %382, align 1, !tbaa !2448
  %383 = lshr i64 %363, 63
  %384 = trunc i64 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %384, i8* %385, align 1, !tbaa !2449
  %386 = lshr i64 %359, 63
  %387 = lshr i64 %360, 63
  %388 = xor i64 %387, %386
  %389 = xor i64 %383, %386
  %390 = add nuw nsw i64 %389, %388
  %391 = icmp eq i64 %390, 2
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %392, i8* %393, align 1, !tbaa !2450
  %394 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = sitofp i64 %395 to double
  %399 = bitcast i8* %394 to double*
  store double %398, double* %399, align 1, !tbaa !2455
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 8
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %409 = sext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RAX
  %411 = load i64, i64* %RCX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = sub i64 %410, %411
  store i64 %414, i64* %RAX, align 8, !tbaa !2428
  %415 = icmp ult i64 %410, %411
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %416, i8* %417, align 1, !tbaa !2432
  %418 = trunc i64 %414 to i32
  %419 = and i32 %418, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #16
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2446
  %425 = xor i64 %411, %410
  %426 = xor i64 %425, %414
  %427 = lshr i64 %426, 4
  %428 = trunc i64 %427 to i8
  %429 = and i8 %428, 1
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %429, i8* %430, align 1, !tbaa !2447
  %431 = icmp eq i64 %414, 0
  %432 = zext i1 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %432, i8* %433, align 1, !tbaa !2448
  %434 = lshr i64 %414, 63
  %435 = trunc i64 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %435, i8* %436, align 1, !tbaa !2449
  %437 = lshr i64 %410, 63
  %438 = lshr i64 %411, 63
  %439 = xor i64 %438, %437
  %440 = xor i64 %434, %437
  %441 = add nuw nsw i64 %440, %439
  %442 = icmp eq i64 %441, 2
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %443, i8* %444, align 1, !tbaa !2450
  %445 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %446 = load i64, i64* %RAX
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 5
  store i64 %448, i64* %PC
  %449 = sitofp i64 %446 to double
  %450 = bitcast i8* %445 to double*
  store double %449, double* %450, align 1, !tbaa !2455
  %451 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %452 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %453 = bitcast %union.vec128_t* %XMM0 to i8*
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = bitcast i8* %452 to double*
  %457 = load double, double* %456, align 1
  %458 = getelementptr inbounds i8, i8* %452, i64 8
  %459 = bitcast i8* %458 to i64*
  %460 = load i64, i64* %459, align 1
  %461 = bitcast i8* %453 to double*
  %462 = load double, double* %461, align 1
  %463 = fdiv double %457, %462
  %464 = bitcast i8* %451 to double*
  store double %463, double* %464, align 1, !tbaa !2455
  %465 = getelementptr inbounds i8, i8* %451, i64 8
  %466 = bitcast i8* %465 to i64*
  store i64 %460, i64* %466, align 1, !tbaa !2455
  %467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %468 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %469 = bitcast %union.vec128_t* %XMM2 to i8*
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 4
  store i64 %471, i64* %PC
  %472 = bitcast i8* %468 to double*
  %473 = load double, double* %472, align 1
  %474 = getelementptr inbounds i8, i8* %468, i64 8
  %475 = bitcast i8* %474 to i64*
  %476 = load i64, i64* %475, align 1
  %477 = bitcast i8* %469 to double*
  %478 = load double, double* %477, align 1
  %479 = fadd double %473, %478
  %480 = bitcast i8* %467 to double*
  store double %479, double* %480, align 1, !tbaa !2455
  %481 = getelementptr inbounds i8, i8* %467, i64 8
  %482 = bitcast i8* %481 to i64*
  store i64 %476, i64* %482, align 1, !tbaa !2455
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 24
  %485 = bitcast %union.vec128_t* %XMM1 to i8*
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  store i64 %487, i64* %PC
  %488 = bitcast i8* %485 to double*
  %489 = load double, double* %488, align 1
  %490 = inttoptr i64 %484 to double*
  store double %489, double* %490
  br label %block_401cf8
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005a0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005b0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %37 = icmp ult i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_4005d8, label %block_4005c1

block_4005d8:                                     ; preds = %block_4005c1, %block_4005d3, %block_4005b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005b0 ], [ %2, %block_4005c1 ], [ %2, %block_4005d3 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005da:                                     ; preds = %block_4005cb
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_4005e0_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_4005d3:                                     ; preds = %block_4005cb
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_4005d8

block_4005cb:                                     ; preds = %block_4005c1
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4195802, label %block_4005da
    i64 4195795, label %block_4005d3
  ]

block_4005c1:                                     ; preds = %block_4005b0
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2432
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2448
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_4005d8, label %block_4005cb

; <label>:163:                                    ; preds = %block_4005cb
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_401970_clearMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401970:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2432
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2446
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2447
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2450
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 8
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %77, align 1, !tbaa !2432
  %78 = trunc i64 %76 to i32
  %79 = and i32 %78, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2446
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %85, align 1, !tbaa !2447
  %86 = icmp eq i64 %76, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2448
  %89 = lshr i64 %76, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2449
  %92 = lshr i64 %76, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2450
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 21
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 6
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %105 = load i8, i8* %104, align 1, !tbaa !2448
  store i8 %105, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %107 = icmp ne i8 %105, 0
  %108 = select i1 %107, i64 %99, i64 %101
  store i64 %108, i64* %106, align 8, !tbaa !2428
  %109 = load i8, i8* %BRANCH_TAKEN
  %110 = icmp eq i8 %109, 1
  br i1 %110, label %block_401999, label %block_40198a

block_40198a:                                     ; preds = %block_401970
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RAX, align 8, !tbaa !2428
  %117 = load i64, i64* %RAX
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 3
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  %126 = sub i64 %125, 5252
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  store i64 %128, i64* %134
  store i64 %133, i64* %131, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %126, i64* %135, align 8, !tbaa !2428
  %136 = load i64, i64* %PC
  %137 = call %struct.Memory* @ext_603118_free(%struct.State* %0, i64 %136, %struct.Memory* %2)
  br label %block_401999

block_401999:                                     ; preds = %block_40198a, %block_401970
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401970 ], [ %137, %block_40198a ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 8
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 7
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  store i64 0, i64* %147
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 8
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX
  %155 = add i64 %154, 8
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 7
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i32*
  store i32 0, i32* %158
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX
  %166 = add i64 %165, 16
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 7
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i32*
  store i32 0, i32* %169
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 8
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = load i64, i64* %RAX
  %177 = add i64 %176, 12
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  store i32 0, i32* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 8
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RAX
  %188 = add i64 %187, 20
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 0, i32* %191
  %192 = load i64, i64* %RSP
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = add i64 16, %192
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  %196 = icmp ult i64 %195, %192
  %197 = icmp ult i64 %195, 16
  %198 = or i1 %196, %197
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %199, i8* %200, align 1, !tbaa !2432
  %201 = trunc i64 %195 to i32
  %202 = and i32 %201, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2446
  %208 = xor i64 16, %192
  %209 = xor i64 %208, %195
  %210 = lshr i64 %209, 4
  %211 = trunc i64 %210 to i8
  %212 = and i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %212, i8* %213, align 1, !tbaa !2447
  %214 = icmp eq i64 %195, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %215, i8* %216, align 1, !tbaa !2448
  %217 = lshr i64 %195, 63
  %218 = trunc i64 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %218, i8* %219, align 1, !tbaa !2449
  %220 = lshr i64 %192, 63
  %221 = xor i64 %217, %220
  %222 = add nuw nsw i64 %221, %217
  %223 = icmp eq i64 %222, 2
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %224, i8* %225, align 1, !tbaa !2450
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %RBP, align 8, !tbaa !2428
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 1
  store i64 %234, i64* %PC
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %237 = load i64, i64* %236, align 8, !tbaa !2428
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %235, align 8, !tbaa !2428
  %240 = add i64 %237, 8
  store i64 %240, i64* %236, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400650_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400650;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400650_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400650_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400620___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400620___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400620___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603120_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603138_strcmp(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400560_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603140_malloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401d80___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401d80___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d80___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401d10___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401d10___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d10___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400660_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603168___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400530_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603118_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400af0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400af0_mat_set_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400bf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400bf0_mat_set(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @newMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400a60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @newMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400a60_newMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mflops() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @mflops_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a30_mflops(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d84;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d84__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c60;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c60_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @fflop() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4019e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @fflop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4019e0_fflop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @jacobi() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @jacobi_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cd0_jacobi(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @clearMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401970;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @clearMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401970_clearMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @set_param() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a70;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @set_param_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a70_set_param(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401d10___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401d80___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"float", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"double", !2430, i64 0}
