; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400508__init_type = type <{ [23 x i8] }>
%seg_400520__plt_type = type <{ [112 x i8] }>
%seg_400590__text_type = type <{ [60 x i8], i32, [6098 x i8] }>
%seg_401da4__fini_type = type <{ [9 x i8] }>
%seg_401db0__rodata_type = type <{ [40 x i8], [34 x i8], [30 x i8], [29 x i8], [13 x i8], [3 x i8], [3 x i8], [2 x i8], [2 x i8], [3 x i8], [3 x i8], [28 x i8] }>
%seg_401e70__eh_frame_hdr_type = type <{ [132 x i8] }>
%seg_401ef8__eh_frame_type = type <{ [504 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64 }>
%seg_603048__data_type = type <{ [16 x i8] }>
%omega_type = type <{ [4 x i8] }>
%seg_603060__bss_type = type <{ [4 x i8], [4 x i8], [8 x i8] }>
%b_type = type <{ [24 x i8] }>
%p_type = type <{ [24 x i8] }>
%wrk2_type = type <{ [24 x i8] }>
%c_type = type <{ [24 x i8] }>
%a_type = type <{ [24 x i8] }>
%wrk1_type = type <{ [24 x i8] }>
%bnd_type = type <{ [24 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400508__init = internal constant %seg_400508__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\E5* \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400520__plt = internal constant %seg_400520__plt_type <{ [112 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\E2* \00\00\00\00\00\00\00\00\00\00\00\FF%\DA* \00\00\00\00\00\00\00\00\00\00\00\FF%\D2* \00\00\00\00\00\00\00\00\00\00\00\FF%\CA* \00\00\00\00\00\00\00\00\00\00\00\FF%\C2* \00\00\00\00\00\00\00\00\00\00\00\FF%\BA* \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400590__text = internal constant %seg_400590__text_type <{ [60 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\A0\1D@\00H\C7\C10\1D@\00H\C7\C7\80\06@\00\FF\156* \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00", i32 trunc (i64 add (i64 ptrtoint (%seg_401ef8__eh_frame_type* @seg_401ef8__eh_frame to i64), i64 23) to i32), [6098 x i8] c"U\B8`0`\00H=`0`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF`0`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE`0`\00UH\81\EE`0`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF`0`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\19* \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\07* \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\B0\00\00\00H\B8\D8\1D@\00\00\00\00\00\C7E\FC\00\00\00\00\89}\F8H\89u\F0\C7E\BC@\00\00\00\C7E\C0@\00\00\00\C7E\C4\80\00\00\00\8B}\BC\89}\D0\8B}\C0\89}\CC\8B}\C4\89}\C8\8B}\D0\83\EF\01\89}\DC\8B}\CC\83\EF\01\89}\D8\8B}\C8\83\EF\01\89}\D4\8Bu\D0\8BU\CC\8BM\C8H\89\C7\B0\00\E8H\FE\FF\FFH\BF\FA\1D@\00\00\00\00\00\8Bu\DC\8BU\D8\8BM\D4\89E\94\B0\00\E8+\FE\FF\FFH\BF\880`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\90\E8J\03\00\00H\BF\001`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\8C\E8)\03\00\00H\BF\E80`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\88\E8\08\03\00\00H\BF\A00`\00\00\00\00\00\BE\01\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\84\E8\E7\02\00\00H\BF\D00`\00\00\00\00\00\BE\04\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89E\80\E8\C6\02\00\00H\BFp0`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85|\FF\FF\FF\E8\A2\02\00\00H\BF\B80`\00\00\00\00\00\BE\03\00\00\00\8BU\D0\8BM\CCD\8BE\C8\89\85x\FF\FF\FF\E8~\02\00\00H\BF\880`\00\00\00\00\00\89\85t\FF\FF\FF\E8\F9\02\00\00H\BF\001`\00\00\00\00\001\F6\F3\0F\10\05\89\15\00\00\E8\E0\03\00\00H\BF\E80`\00\00\00\00\001\F6\0FW\C0\E8\CC\03\00\00H\BF\A00`\00\00\00\00\001\F6\0FW\C0\E8\B8\03\00\00H\BF\D00`\00\00\00\00\001\F6\F3\0F\10\05H\15\00\00\E8\9F\03\00\00H\BF\D00`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05,\15\00\00\E8\83\03\00\00H\BF\D00`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05\10\15\00\00\E8g\03\00\00H\BF\D00`\00\00\00\00\00\BE\03\00\00\00\F3\0F\10\05\F8\14\00\00\E8K\03\00\00H\BFp0`\00\00\00\00\001\F6\0FW\C0\E87\03\00\00H\BFp0`\00\00\00\00\00\BE\01\00\00\00\0FW\C0\E8 \03\00\00H\BFp0`\00\00\00\00\00\BE\02\00\00\00\0FW\C0\E8\09\03\00\00H\BF\B80`\00\00\00\00\001\F6\F3\0F\10\05\99\14\00\00\E8\F0\02\00\00H\BF\B80`\00\00\00\00\00\BE\01\00\00\00\F3\0F\10\05}\14\00\00\E8\D4\02\00\00H\BF\B80`\00\00\00\00\00\BE\02\00\00\00\F3\0F\10\05a\14\00\00\E8\B8\02\00\00H\BE\D00`\00\00\00\00\00H\BAp0`\00\00\00\00\00H\B9\B80`\00\00\00\00\00I\B8\880`\00\00\00\00\00I\B9\001`\00\00\00\00\00H\BF\E80`\00\00\00\00\00I\BA\A00`\00\00\00\00\00\C7E\E0@\00\00\00\8BE\E0H\89\BDh\FF\FF\FF\89\C7L\8B\9Dh\FF\FF\FFL\89\1C$L\89T$\08\E8*\03\00\00H\BF\18\1E@\00\00\00\00\00\F3\0F\11E\B8\8Bu\E0\B0\00\E8a\FB\FF\FFH\BF5\1E@\00\00\00\00\00\F3\0FZE\B8\89\85d\FF\FF\FF\B0\01\E8E\FB\FF\FFH\BF\880`\00\00\00\00\00\89\85`\FF\FF\FF\E8\80\0F\00\00H\BF\001`\00\00\00\00\00\E8q\0F\00\00H\BF\E80`\00\00\00\00\00\E8b\0F\00\00H\BF\A00`\00\00\00\00\00\E8S\0F\00\00H\BF\D00`\00\00\00\00\00\E8D\0F\00\00H\BFp0`\00\00\00\00\00\E85\0F\00\00H\BF\B80`\00\00\00\00\00\E8&\0F\00\001\C0H\81\C4\B0\00\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8\89u\F4\89U\F0\89M\ECD\89E\E8\8BM\F4H\8B}\F8\89O\08\8BM\F0H\8B}\F8\89O\0C\8BM\ECH\8B}\F8\89O\10\8BM\E8H\8B}\F8\89O\14H\8B}\F8H\C7\07\00\00\00\00\8BM\F4\0F\AFM\F0\0F\AFM\EC\0F\AFM\E8Hc\F9H\C1\E7\02\E8\89\FA\FF\FF1\C9\BA\01\00\00\00H\8B}\F8H\89\07H\8BE\F8H\838\00\0FE\CA\89\C8H\83\C4 ]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8\C7E\F4\00\00\00\00\8BE\F4H\8BM\F8;A\0C\0F\8D\D8\00\00\00\C7E\F0\00\00\00\00\8BE\F0H\8BM\F8;A\10\0F\8D\AE\00\00\00\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\14\0F\8D\84\00\00\00\8BE\F4\0F\AFE\F4\F3\0F*\C0H\8BM\F8\8BA\0C\83\E8\01H\8BM\F8\8BQ\0C\83\EA\01\0F\AF\C2\F3\0F*\C8\F3\0F^\C1H\8BM\F8H\8B\09H\8Bu\F8kF\0C\00H\8Bu\F8\0F\AFF\10H\8Bu\F8\0F\AFF\14\8BU\F4H\8Bu\F8\0F\AFV\10H\8Bu\F8\0F\AFV\14\01\D0\8BU\F0H\8Bu\F8\0F\AFV\14\01\D0\03E\ECHc\F0\F3\0F\11\04\B1\8BE\EC\83\C0\01\89E\EC\E9l\FF\FF\FF\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9B\FF\FF\FF\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\18\FF\FF\FF]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8\89u\F4\F3\0F\11E\F0\C7E\EC\00\00\00\00\8BE\ECH\8BM\F8;A\0C\0F\8D\B6\00\00\00\C7E\E8\00\00\00\00\8BE\E8H\8BM\F8;A\10\0F\8D\8C\00\00\00\C7E\E4\00\00\00\00\8BE\E4H\8BM\F8;A\14\0F\8Db\00\00\00\F3\0F\10E\F0H\8BE\F8H\8B\00\8BM\F4H\8BU\F8\0F\AFJ\0CH\8BU\F8\0F\AFJ\10H\8BU\F8\0F\AFJ\14\8Bu\ECH\8BU\F8\0F\AFr\10H\8BU\F8\0F\AFr\14\01\F1\8Bu\E8H\8BU\F8\0F\AFr\14\01\F1\03M\E4Hc\D1\F3\0F\11\04\90\8BE\E4\83\C0\01\89E\E4\E9\8E\FF\FF\FF\E9\00\00\00\00\8BE\E8\83\C0\01\89E\E8\E9d\FF\FF\FF\E9\00\00\00\00\8BE\EC\83\C0\01\89E\EC\E9:\FF\FF\FF]\C3\90UH\89\E5H\8BE\18L\8BU\10\89}\FCH\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0L\89U\C8H\89E\C0H\8BE\D8\8Bx\0C\83\EF\01\89}\ACH\8BE\D8\8Bx\10\83\EF\01\89}\A8H\8BE\D8\8Bx\14\83\EF\01\89}\A4\C7E\B0\00\00\00\00\8BE\B0;E\FC\0F\8D4\0C\00\00\0FW\C0\F3\0F\11E\A0\C7E\BC\01\00\00\00\8BE\BC;E\AC\0F\8D\01\0B\00\00\C7E\B8\01\00\00\00\8BE\B8;E\A8\0F\8D\DB\0A\00\00\C7E\B4\01\00\00\00\8BE\B4;E\A4\0F\8D\B5\0A\00\00H\8BE\F0H\8B\00H\8BM\F0kQ\0C\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\00H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\F0H\8B\00H\8BM\F0\8BQ\0C\C1\E2\01H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8kQ\0C\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\00H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\C6\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E8H\8B\00H\8BM\E8\8BQ\0C\C1\E2\01H\8BM\E8\0F\AFQ\10H\8BM\E8\0F\AFQ\14\8Bu\BCH\8BM\E8\0F\AFq\10H\8BM\E8\0F\AFq\14\01\F2\8Bu\B8H\8BM\E8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\10\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\C6\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\C6\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0F\5C\14\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FX\14\88\F3\0FY\CA\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0kQ\0C\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BC\83\EE\01H\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\00H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8\83\EE\01H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\E0H\8B\00H\8BM\E0\8BQ\0C\C1\E2\01H\8BM\E0\0F\AFQ\10H\8BM\E0\0F\AFQ\14\8Bu\BCH\8BM\E0\0F\AFq\10H\8BM\E0\0F\AFq\14\01\F2\8Bu\B8H\8BM\E0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\0C\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\8Bu\B4\83\EE\01\01\F2Hc\CA\F3\0FY\0C\88\F3\0FX\C1H\8BE\C8H\8B\00H\8BM\C8kQ\0C\00H\8BM\C8\0F\AFQ\10H\8BM\C8\0F\AFQ\14\8Bu\BCH\8BM\C8\0F\AFq\10H\8BM\C8\0F\AFq\14\01\F2\8Bu\B8H\8BM\C8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FX\04\88\F3\0F\11E\9C\F3\0F\10E\9CH\8BE\F0H\8B\00H\8BM\F0kQ\0C\03H\8BM\F0\0F\AFQ\10H\8BM\F0\0F\AFQ\14\8Bu\BCH\8BM\F0\0F\AFq\10H\8BM\F0\0F\AFq\14\01\F2\8Bu\B8H\8BM\F0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\5C\04\88H\8BE\D0H\8B\00H\8BM\D0kQ\0C\00H\8BM\D0\0F\AFQ\10H\8BM\D0\0F\AFQ\14\8Bu\BCH\8BM\D0\0F\AFq\10H\8BM\D0\0F\AFq\14\01\F2\8Bu\B8H\8BM\D0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0FY\04\88\F3\0F\11E\98\F3\0F\10E\98\F3\0FYE\98\F3\0FXE\A0\F3\0F\11E\A0H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88\F3\0F\10\0C%X0`\00\F3\0FYM\98\F3\0FX\C1H\8BE\C0H\8B\00H\8BM\C0kQ\0C\00H\8BM\C0\0F\AFQ\10H\8BM\C0\0F\AFQ\14\8Bu\BCH\8BM\C0\0F\AFq\10H\8BM\C0\0F\AFq\14\01\F2\8Bu\B8H\8BM\C0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\11\04\88\8BE\B4\83\C0\01\89E\B4\E9?\F5\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9\19\F5\FF\FF\E9\00\00\00\00\8BE\BC\83\C0\01\89E\BC\E9\F3\F4\FF\FF\C7E\BC\01\00\00\00\8BE\BC;E\AC\0F\8D\F2\00\00\00\C7E\B8\01\00\00\00\8BE\B8;E\A8\0F\8D\CC\00\00\00\C7E\B4\01\00\00\00\8BE\B4;E\A4\0F\8D\A6\00\00\00H\8BE\C0H\8B\00H\8BM\C0kQ\0C\00H\8BM\C0\0F\AFQ\10H\8BM\C0\0F\AFQ\14\8Bu\BCH\8BM\C0\0F\AFq\10H\8BM\C0\0F\AFq\14\01\F2\8Bu\B8H\8BM\C0\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\10\04\88H\8BE\D8H\8B\00H\8BM\D8kQ\0C\00H\8BM\D8\0F\AFQ\10H\8BM\D8\0F\AFQ\14\8Bu\BCH\8BM\D8\0F\AFq\10H\8BM\D8\0F\AFq\14\01\F2\8Bu\B8H\8BM\D8\0F\AFq\14\01\F2\03U\B4Hc\CA\F3\0F\11\04\88\8BE\B4\83\C0\01\89E\B4\E9N\FF\FF\FF\E9\00\00\00\00\8BE\B8\83\C0\01\89E\B8\E9(\FF\FF\FF\E9\00\00\00\00\8BE\BC\83\C0\01\89E\BC\E9\02\FF\FF\FF\E9\00\00\00\00\8BE\B0\83\C0\01\89E\B0\E9\C0\F3\FF\FF\F3\0F\10E\A0]\C3UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8H\83?\00\0F\84\0F\00\00\00H\8BE\F8H\8B\00H\89\C7\E8w\EB\FF\FFH\8BE\F8H\C7\00\00\00\00\00H\8BE\F8\C7@\08\00\00\00\00H\8BE\F8\C7@\10\00\00\00\00H\8BE\F8\C7@\0C\00\00\00\00H\8BE\F8\C7@\14\00\00\00\00H\83\C4\10]\C3f.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\05\B4\03\00\00\89}\FC\89u\F8\89U\F4\8BU\F4\83\EA\02\F2\0F*\CA\8BU\F8\83\EA\02\F2\0F*\D2\F2\0FY\CA\8BU\FC\83\EA\02\F2\0F*\D2\F2\0FY\CA\F2\0FY\C8\0F(\C1]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5\F2\0F\10\15l\03\00\00\89}\FC\F2\0F\11E\F0\F2\0F\11M\E8\F2\0F\10E\E8\F2\0F^E\F0\F2\0FY\C2\F2\0F*M\FC\F2\0FY\C1]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\89}\F8H\89u\F0H\8B}\F0\B8B\1E@\00\89\C6\E8\B0\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8E\1E@\00\89\C6\E8\97\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00 \00\00\00H\8BE\F8\C7@\04 \00\00\00H\8BE\F8\C7@\08@\00\00\00\E9z\01\00\00H\8B}\F0\B8C\1E@\00\89\C6\E8Y\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8F\1E@\00\89\C6\E8@\EA\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00@\00\00\00H\8BE\F8\C7@\04@\00\00\00H\8BE\F8\C7@\08\80\00\00\00\E9#\01\00\00H\8B}\F0\B8H\1E@\00\89\C6\E8\02\EA\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8J\1E@\00\89\C6\E8\E9\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\80\00\00\00H\8BE\F8\C7@\04\80\00\00\00H\8BE\F8\C7@\08\00\01\00\00\E9\CC\00\00\00H\8B}\F0\B8M\1E@\00\89\C6\E8\AB\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8P\1E@\00\89\C6\E8\92\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\01\00\00H\8BE\F8\C7@\04\00\01\00\00H\8BE\F8\C7@\08\00\02\00\00\E9u\00\00\00H\8B}\F0\B8L\1E@\00\89\C6\E8T\E9\FF\FF\83\F8\00\0F\84\19\00\00\00H\8B}\F0\B8O\1E@\00\89\C6\E8;\E9\FF\FF\83\F8\00\0F\85%\00\00\00H\8BE\F8\C7\00\00\02\00\00H\8BE\F8\C7@\04\00\02\00\00H\8BE\F8\C7@\08\00\04\00\00\E9\1E\00\00\00H\BFR\1E@\00\00\00\00\00\B0\00\E8\DC\E8\FF\FF\BF\06\00\00\00\89E\EC\E8\0F\E9\FF\FFH\83\C4 ]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\8D}\F01\C0\89\C6\E8\BB\E8\FF\FF\83<%d0`\00\00\89E\E4\0F\855\00\00\00\83<%h0`\00\00\0F\85'\00\00\00\0FW\C0H\8BE\F0\89\C1\89\0C%d0`\00H\8BE\F8\89\C1\89\0C%h0`\00\F2\0F\11E\E8\E9=\00\00\00\F2\0F\10\05\ED\00\00\00H\8BE\F0Hc\0C%d0`\00H)\C8\F2H\0F*\C8H\8BE\F8Hc\0C%h0`\00H)\C8\F2H\0F*\D0\F2\0F^\D0\F2\0FX\CA\F2\0F\11M\E8\F2\0F\10E\E8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1F\00AWAVI\89\D7AUATL\8D%\AE\10 \00UH\8D-\AE\10 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\A7\E7\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401da4__fini = internal constant %seg_401da4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401db0__rodata = internal constant %seg_401db0__rodata_type <{ [40 x i8] c"\01\00\02\00\00\00\80?\AB\AA*>\00\00\00\00\00\00\00\00\00\00A@\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\80\84.A", [34 x i8] c"mimax = %d mjmax = %d mkmax = %d\0A\00", [30 x i8] c"imax = %d jmax = %d kmax =%d\0A\00", [29 x i8] c" Loop executed for %d times\0A\00", [13 x i8] c" Gosa : %e \0A\00", [3 x i8] c"XS\00", [3 x i8] c"xs\00", [2 x i8] c"M\00", [2 x i8] c"m\00", [3 x i8] c"XL\00", [3 x i8] c"xl\00", [28 x i8] c"Invalid input character !!\0A\00" }>
@seg_401e70__eh_frame_hdr = internal constant %seg_401e70__eh_frame_hdr_type <{ [132 x i8] c"\01\1B\03;\84\00\00\00\0F\00\00\00\B0\E6\FF\FF\E0\00\00\00 \E7\FF\FF\A0\00\00\00P\E7\FF\FF\CC\00\00\00\10\E8\FF\FF\08\01\00\00\10\EC\FF\FF$\01\00\00\A0\EC\FF\FF@\01\00\00\A0\ED\FF\FF\5C\01\00\00\80\EE\FF\FFx\01\00\00 \FB\FF\FF\94\01\00\00\90\FB\FF\FF\B0\01\00\00\E0\FB\FF\FF\CC\01\00\00 \FC\FF\FF\E8\01\00\00\10\FE\FF\FF\04\02\00\00\C0\FE\FF\FF \02\00\000\FF\FF\FFh\02\00\00" }>
@seg_401ef8__eh_frame = internal constant %seg_401ef8__eh_frame_type <{ [504 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00x\E6\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00|\E6\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\C8\E5\FF\FFp\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\00\E7\FF\FF\F5\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\E4\EA\FF\FF\88\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00X\EB\FF\FF\F9\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00<\EC\FF\FF\DF\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\00\ED\FF\FF\A0\0C\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\84\F9\FF\FFf\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\D8\F9\FF\FFD\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\0C\FA\FF\FF2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\000\FA\FF\FF\E7\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00\04\FC\FF\FF\A3\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00p\01\00\00\98\FC\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\B8\01\00\00\C0\FC\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400670_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400640___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), i64 ptrtoint (i64 (i64)* @malloc to i64), i64 ptrtoint (i64 (i64)* @exit to i64) }>
@seg_603048__data = internal global %seg_603048__data_type zeroinitializer
@omega = global %omega_type <{ [4 x i8] c"\CD\CCL?" }>
@seg_603060__bss = internal global %seg_603060__bss_type zeroinitializer
@b = global %b_type zeroinitializer
@p = global %p_type zeroinitializer
@wrk2 = global %wrk2_type zeroinitializer
@c = global %c_type zeroinitializer
@a = global %a_type zeroinitializer
@wrk1 = global %wrk1_type zeroinitializer
@bnd = global %bnd_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400670_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400640___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401da0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401d30___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mflops_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @newMat_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @jacobi_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @fflop_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @set_param_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @mat_set_init_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @clearMat_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcmp(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @malloc(i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_401a00_fflop(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a00:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %25 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %24, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %25 to %"class.std::bitset"*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %27 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %26, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %27 to %"class.std::bitset"*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %29 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %28, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %29 to %"class.std::bitset"*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %31 to %union.vec128_t*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %33 to %union.vec128_t*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %35 to %union.vec128_t*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 8
  store i64 %48, i64* %PC
  %49 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 16) to double*)
  %50 = bitcast i8* %46 to double*
  store double %49, double* %50, align 1, !tbaa !2432
  %51 = getelementptr inbounds i8, i8* %46, i64 8
  %52 = bitcast i8* %51 to double*
  store double 0.000000e+00, double* %52, align 1, !tbaa !2432
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 4
  %55 = load i32, i32* %EDI
  %56 = zext i32 %55 to i64
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i32, i32* %ESI
  %63 = zext i32 %62 to i64
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %61 to i32*
  store i32 %62, i32* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 12
  %69 = load i32, i32* %EDX
  %70 = zext i32 %69 to i64
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 3
  store i64 %72, i64* %PC
  %73 = inttoptr i64 %68 to i32*
  store i32 %69, i32* %73
  %74 = load i64, i64* %RBP
  %75 = sub i64 %74, 12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 3
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %75 to i32*
  %79 = load i32, i32* %78
  %80 = zext i32 %79 to i64
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RDX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 3
  store i64 %83, i64* %PC
  %84 = trunc i64 %81 to i32
  %85 = sub i32 %84, 2
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp ult i32 %84, 2
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2434
  %90 = and i32 %85, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2448
  %96 = xor i64 2, %81
  %97 = trunc i64 %96 to i32
  %98 = xor i32 %97, %85
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2449
  %103 = icmp eq i32 %85, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2450
  %106 = lshr i32 %85, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2451
  %109 = lshr i32 %84, 31
  %110 = xor i32 %106, %109
  %111 = add nuw nsw i32 %110, %109
  %112 = icmp eq i32 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2452
  %115 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %116 = load i32, i32* %EDX
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = sitofp i32 %116 to double
  %121 = bitcast i8* %115 to double*
  store double %120, double* %121, align 1, !tbaa !2432
  %122 = load i64, i64* %RBP
  %123 = sub i64 %122, 8
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 3
  store i64 %125, i64* %PC
  %126 = inttoptr i64 %123 to i32*
  %127 = load i32, i32* %126
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = load i64, i64* %RDX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = trunc i64 %129 to i32
  %133 = sub i32 %132, 2
  %134 = zext i32 %133 to i64
  store i64 %134, i64* %RDX, align 8, !tbaa !2428
  %135 = icmp ult i32 %132, 2
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2434
  %138 = and i32 %133, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = xor i64 2, %129
  %145 = trunc i64 %144 to i32
  %146 = xor i32 %145, %133
  %147 = lshr i32 %146, 4
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2449
  %151 = icmp eq i32 %133, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2450
  %154 = lshr i32 %133, 31
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2451
  %157 = lshr i32 %132, 31
  %158 = xor i32 %154, %157
  %159 = add nuw nsw i32 %158, %157
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %161, i8* %162, align 1, !tbaa !2452
  %163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %164 = load i32, i32* %EDX
  %165 = zext i32 %164 to i64
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = sitofp i32 %164 to double
  %169 = bitcast i8* %163 to double*
  store double %168, double* %169, align 1, !tbaa !2432
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %172 = bitcast %union.vec128_t* %XMM2 to i8*
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = bitcast i8* %171 to double*
  %176 = load double, double* %175, align 1
  %177 = getelementptr inbounds i8, i8* %171, i64 8
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = bitcast i8* %172 to double*
  %181 = load double, double* %180, align 1
  %182 = fmul double %176, %181
  %183 = bitcast i8* %170 to double*
  store double %182, double* %183, align 1, !tbaa !2432
  %184 = getelementptr inbounds i8, i8* %170, i64 8
  %185 = bitcast i8* %184 to i64*
  store i64 %179, i64* %185, align 1, !tbaa !2432
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 4
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i32*
  %191 = load i32, i32* %190
  %192 = zext i32 %191 to i64
  store i64 %192, i64* %RDX, align 8, !tbaa !2428
  %193 = load i64, i64* %RDX
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = trunc i64 %193 to i32
  %197 = sub i32 %196, 2
  %198 = zext i32 %197 to i64
  store i64 %198, i64* %RDX, align 8, !tbaa !2428
  %199 = icmp ult i32 %196, 2
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2434
  %202 = and i32 %197, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2448
  %208 = xor i64 2, %193
  %209 = trunc i64 %208 to i32
  %210 = xor i32 %209, %197
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = icmp eq i32 %197, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = lshr i32 %197, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2451
  %221 = lshr i32 %196, 31
  %222 = xor i32 %218, %221
  %223 = add nuw nsw i32 %222, %221
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2452
  %227 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %228 = load i32, i32* %EDX
  %229 = zext i32 %228 to i64
  %230 = load i64, i64* %PC
  %231 = add i64 %230, 4
  store i64 %231, i64* %PC
  %232 = sitofp i32 %228 to double
  %233 = bitcast i8* %227 to double*
  store double %232, double* %233, align 1, !tbaa !2432
  %234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %236 = bitcast %union.vec128_t* %XMM2 to i8*
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC
  %239 = bitcast i8* %235 to double*
  %240 = load double, double* %239, align 1
  %241 = getelementptr inbounds i8, i8* %235, i64 8
  %242 = bitcast i8* %241 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = bitcast i8* %236 to double*
  %245 = load double, double* %244, align 1
  %246 = fmul double %240, %245
  %247 = bitcast i8* %234 to double*
  store double %246, double* %247, align 1, !tbaa !2432
  %248 = getelementptr inbounds i8, i8* %234, i64 8
  %249 = bitcast i8* %248 to i64*
  store i64 %243, i64* %249, align 1, !tbaa !2432
  %250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %252 = bitcast %union.vec128_t* %XMM0 to i8*
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = bitcast i8* %251 to double*
  %256 = load double, double* %255, align 1
  %257 = getelementptr inbounds i8, i8* %251, i64 8
  %258 = bitcast i8* %257 to i64*
  %259 = load i64, i64* %258, align 1
  %260 = bitcast i8* %252 to double*
  %261 = load double, double* %260, align 1
  %262 = fmul double %256, %261
  %263 = bitcast i8* %250 to double*
  store double %262, double* %263, align 1, !tbaa !2432
  %264 = getelementptr inbounds i8, i8* %250, i64 8
  %265 = bitcast i8* %264 to i64*
  store i64 %259, i64* %265, align 1, !tbaa !2432
  %266 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %267 = bitcast %union.vec128_t* %XMM1 to i8*
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  %270 = bitcast i8* %267 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 1
  %272 = getelementptr inbounds i8, i8* %267, i64 8
  %273 = bitcast i8* %272 to <2 x i32>*
  %274 = load <2 x i32>, <2 x i32>* %273, align 1
  %275 = extractelement <2 x i32> %271, i32 0
  %276 = bitcast i8* %266 to i32*
  store i32 %275, i32* %276, align 1, !tbaa !2453
  %277 = extractelement <2 x i32> %271, i32 1
  %278 = getelementptr inbounds i8, i8* %266, i64 4
  %279 = bitcast i8* %278 to i32*
  store i32 %277, i32* %279, align 1, !tbaa !2453
  %280 = extractelement <2 x i32> %274, i32 0
  %281 = getelementptr inbounds i8, i8* %266, i64 8
  %282 = bitcast i8* %281 to i32*
  store i32 %280, i32* %282, align 1, !tbaa !2453
  %283 = extractelement <2 x i32> %274, i32 1
  %284 = getelementptr inbounds i8, i8* %266, i64 12
  %285 = bitcast i8* %284 to i32*
  store i32 %283, i32* %285, align 1, !tbaa !2453
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %289 = load i64, i64* %288, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RBP, align 8, !tbaa !2428
  store i64 %290, i64* %288, align 8, !tbaa !2428
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = inttoptr i64 %297 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %295, align 8, !tbaa !2428
  %300 = add i64 %297, 8
  store i64 %300, i64* %296, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400670_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400670:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400600_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a90_set_param(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RSI = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 13
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSP = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 15
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBP = bitcast %union.anon* %27 to i64*
  %28 = load i64, i64* %RBP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 1
  store i64 %30, i64* %PC
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %32 = load i64, i64* %31, align 8, !tbaa !2428
  %33 = add i64 %32, -8
  %34 = inttoptr i64 %33 to i64*
  store i64 %28, i64* %34
  store i64 %33, i64* %31, align 8, !tbaa !2428
  %35 = load i64, i64* %RSP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC
  store i64 %35, i64* %RBP, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = sub i64 %38, 32
  store i64 %41, i64* %RSP, align 8, !tbaa !2428
  %42 = icmp ult i64 %38, 32
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %43, i8* %44, align 1, !tbaa !2434
  %45 = trunc i64 %41 to i32
  %46 = and i32 %45, 255
  %47 = call i32 @llvm.ctpop.i32(i32 %46) #16
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = xor i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %50, i8* %51, align 1, !tbaa !2448
  %52 = xor i64 32, %38
  %53 = xor i64 %52, %41
  %54 = lshr i64 %53, 4
  %55 = trunc i64 %54 to i8
  %56 = and i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = icmp eq i64 %41, 0
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %59, i8* %60, align 1, !tbaa !2450
  %61 = lshr i64 %41, 63
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %62, i8* %63, align 1, !tbaa !2451
  %64 = lshr i64 %38, 63
  %65 = xor i64 %61, %64
  %66 = add nuw nsw i64 %65, %64
  %67 = icmp eq i64 %66, 2
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %68, i8* %69, align 1, !tbaa !2452
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 8
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RSI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 146), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %90 = load i32, i32* %EAX
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = and i64 %91, 4294967295
  store i64 %94, i64* %RSI, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  %96 = sub i64 %95, 5451
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 5
  store i64 %100, i64* %PC
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %102 = load i64, i64* %101, align 8, !tbaa !2428
  %103 = add i64 %102, -8
  %104 = inttoptr i64 %103 to i64*
  store i64 %98, i64* %104
  store i64 %103, i64* %101, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %96, i64* %105, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %106, %struct.Memory* %2)
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %112, align 1, !tbaa !2434
  %113 = and i32 %108, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %119, align 1, !tbaa !2449
  %120 = icmp eq i32 %108, 0
  %121 = zext i1 %120 to i8
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %121, i8* %122, align 1, !tbaa !2450
  %123 = lshr i32 %108, 31
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %124, i8* %125, align 1, !tbaa !2451
  %126 = lshr i32 %108, 31
  %127 = xor i32 %123, %126
  %128 = add nuw nsw i32 %127, %126
  %129 = icmp eq i32 %128, 2
  %130 = zext i1 %129 to i8
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %130, i8* %131, align 1, !tbaa !2452
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 31
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 6
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 6
  store i64 %137, i64* %PC
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %139 = load i8, i8* %138, align 1, !tbaa !2450
  store i8 %139, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = icmp ne i8 %139, 0
  %142 = select i1 %141, i64 %133, i64 %135
  store i64 %142, i64* %140, align 8, !tbaa !2428
  %143 = load i8, i8* %BRANCH_TAKEN
  %144 = icmp eq i8 %143, 1
  br i1 %144, label %block_401ad2, label %block_401ab9

block_401c2e:                                     ; preds = %block_401c15, %block_401bfc
  %MEMORY.0 = phi %struct.Memory* [ %271, %block_401bfc ], [ %435, %block_401c15 ]
  %145 = load i64, i64* %RBP
  %146 = sub i64 %145, 8
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  store i64 %150, i64* %RAX, align 8, !tbaa !2428
  %151 = load i64, i64* %RAX
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  store i32 512, i32* %154
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 8
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX
  %162 = add i64 %161, 4
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 7
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %162 to i32*
  store i32 512, i32* %165
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 8
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = load i64, i64* %RAX
  %173 = add i64 %172, 8
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 7
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  store i32 1024, i32* %176
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 35
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  store i64 %180, i64* %PC
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %178, i64* %181, align 8, !tbaa !2428
  br label %block_401c71

block_401bbe:                                     ; preds = %block_401ba5
  %182 = load i64, i64* %RBP
  %183 = sub i64 %182, 16
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %RDI, align 8, !tbaa !2428
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 160), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %190 = load i32, i32* %EAX
  %191 = zext i32 %190 to i64
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 2
  store i64 %193, i64* %PC
  %194 = and i64 %191, 4294967295
  store i64 %194, i64* %RSI, align 8, !tbaa !2428
  %195 = load i64, i64* %PC
  %196 = sub i64 %195, 5737
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %206, %struct.Memory* %854)
  %208 = load i32, i32* %EAX
  %209 = zext i32 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %212, align 1, !tbaa !2434
  %213 = and i32 %208, 255
  %214 = call i32 @llvm.ctpop.i32(i32 %213) #16
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %217, i8* %218, align 1, !tbaa !2448
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %219, align 1, !tbaa !2449
  %220 = icmp eq i32 %208, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2450
  %223 = lshr i32 %208, 31
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2451
  %226 = lshr i32 %208, 31
  %227 = xor i32 %223, %226
  %228 = add nuw nsw i32 %227, %226
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2452
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 43
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 6
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %239 = load i8, i8* %238, align 1, !tbaa !2450
  %240 = icmp eq i8 %239, 0
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %243 = select i1 %240, i64 %233, i64 %235
  store i64 %243, i64* %242, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401bfc, label %block_401bd7

block_401bfc:                                     ; preds = %block_401bbe
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 16
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 5
  store i64 %253, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 156), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %254 = load i32, i32* %EAX
  %255 = zext i32 %254 to i64
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 2
  store i64 %257, i64* %PC
  %258 = and i64 %255, 4294967295
  store i64 %258, i64* %RSI, align 8, !tbaa !2428
  %259 = load i64, i64* %PC
  %260 = sub i64 %259, 5799
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 5
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %266 = load i64, i64* %265, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %262, i64* %268
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %260, i64* %269, align 8, !tbaa !2428
  %270 = load i64, i64* %PC
  %271 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %270, %struct.Memory* %207)
  %272 = load i32, i32* %EAX
  %273 = zext i32 %272 to i64
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 3
  store i64 %275, i64* %PC
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %276, align 1, !tbaa !2434
  %277 = and i32 %272, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #16
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %281, i8* %282, align 1, !tbaa !2448
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %283, align 1, !tbaa !2449
  %284 = icmp eq i32 %272, 0
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %285, i8* %286, align 1, !tbaa !2450
  %287 = lshr i32 %272, 31
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %288, i8* %289, align 1, !tbaa !2451
  %290 = lshr i32 %272, 31
  %291 = xor i32 %287, %290
  %292 = add nuw nsw i32 %291, %290
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2452
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 31
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 6
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %303 = load i8, i8* %302, align 1, !tbaa !2450
  store i8 %303, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %305 = icmp ne i8 %303, 0
  %306 = select i1 %305, i64 %297, i64 %299
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %307 = load i8, i8* %BRANCH_TAKEN
  %308 = icmp eq i8 %307, 1
  br i1 %308, label %block_401c2e, label %block_401c15

block_401ab9:                                     ; preds = %block_401a90
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 16
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RDI, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  store i64 %316, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 149), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %317 = load i32, i32* %EAX
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 2
  store i64 %320, i64* %PC
  %321 = and i64 %318, 4294967295
  store i64 %321, i64* %RSI, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = sub i64 %322, 5476
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 5
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 5
  store i64 %327, i64* %PC
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %329 = load i64, i64* %328, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %325, i64* %331
  store i64 %330, i64* %328, align 8, !tbaa !2428
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %323, i64* %332, align 8, !tbaa !2428
  %333 = load i64, i64* %PC
  %334 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %333, %struct.Memory* %107)
  %335 = load i32, i32* %EAX
  %336 = zext i32 %335 to i64
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 3
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %339, align 1, !tbaa !2434
  %340 = and i32 %335, 255
  %341 = call i32 @llvm.ctpop.i32(i32 %340) #16
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %344, i8* %345, align 1, !tbaa !2448
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %346, align 1, !tbaa !2449
  %347 = icmp eq i32 %335, 0
  %348 = zext i1 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %348, i8* %349, align 1, !tbaa !2450
  %350 = lshr i32 %335, 31
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %351, i8* %352, align 1, !tbaa !2451
  %353 = lshr i32 %335, 31
  %354 = xor i32 %350, %353
  %355 = add nuw nsw i32 %354, %353
  %356 = icmp eq i32 %355, 2
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %357, i8* %358, align 1, !tbaa !2452
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 43
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 6
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 6
  store i64 %364, i64* %PC
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %366 = load i8, i8* %365, align 1, !tbaa !2450
  %367 = icmp eq i8 %366, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %370 = select i1 %367, i64 %360, i64 %362
  store i64 %370, i64* %369, align 8, !tbaa !2428
  %371 = load i8, i8* %BRANCH_TAKEN
  %372 = icmp eq i8 %371, 1
  br i1 %372, label %block_401af7, label %block_401ad2

block_401bd7:                                     ; preds = %block_401ba5, %block_401bbe
  %MEMORY.1 = phi %struct.Memory* [ %854, %block_401ba5 ], [ %207, %block_401bbe ]
  %373 = load i64, i64* %RBP
  %374 = sub i64 %373, 8
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 6
  store i64 %381, i64* %PC
  %382 = inttoptr i64 %379 to i32*
  store i32 256, i32* %382
  %383 = load i64, i64* %RBP
  %384 = sub i64 %383, 8
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %384 to i64*
  %388 = load i64, i64* %387
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = load i64, i64* %RAX
  %390 = add i64 %389, 4
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 7
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  store i32 256, i32* %393
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 8
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RAX
  %401 = add i64 %400, 8
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 7
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i32*
  store i32 512, i32* %404
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 122
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 5
  store i64 %408, i64* %PC
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %406, i64* %409, align 8, !tbaa !2428
  br label %block_401c71

block_401c15:                                     ; preds = %block_401bfc
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 16
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414
  store i64 %415, i64* %RDI, align 8, !tbaa !2428
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 5
  store i64 %417, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 159), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %418 = load i32, i32* %EAX
  %419 = zext i32 %418 to i64
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 2
  store i64 %421, i64* %PC
  %422 = and i64 %419, 4294967295
  store i64 %422, i64* %RSI, align 8, !tbaa !2428
  %423 = load i64, i64* %PC
  %424 = sub i64 %423, 5824
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 5
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 5
  store i64 %428, i64* %PC
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %430 = load i64, i64* %429, align 8, !tbaa !2428
  %431 = add i64 %430, -8
  %432 = inttoptr i64 %431 to i64*
  store i64 %426, i64* %432
  store i64 %431, i64* %429, align 8, !tbaa !2428
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %424, i64* %433, align 8, !tbaa !2428
  %434 = load i64, i64* %PC
  %435 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %434, %struct.Memory* %271)
  %436 = load i32, i32* %EAX
  %437 = zext i32 %436 to i64
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 3
  store i64 %439, i64* %PC
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %440, align 1, !tbaa !2434
  %441 = and i32 %436, 255
  %442 = call i32 @llvm.ctpop.i32(i32 %441) #16
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %447, align 1, !tbaa !2449
  %448 = icmp eq i32 %436, 0
  %449 = zext i1 %448 to i8
  %450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %449, i8* %450, align 1, !tbaa !2450
  %451 = lshr i32 %436, 31
  %452 = trunc i32 %451 to i8
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %452, i8* %453, align 1, !tbaa !2451
  %454 = lshr i32 %436, 31
  %455 = xor i32 %451, %454
  %456 = add nuw nsw i32 %455, %454
  %457 = icmp eq i32 %456, 2
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %458, i8* %459, align 1, !tbaa !2452
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 43
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 6
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 6
  store i64 %465, i64* %PC
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %467 = load i8, i8* %466, align 1, !tbaa !2450
  %468 = icmp eq i8 %467, 0
  %469 = zext i1 %468 to i8
  store i8 %469, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %471 = select i1 %468, i64 %461, i64 %463
  store i64 %471, i64* %470, align 8, !tbaa !2428
  %472 = load i8, i8* %BRANCH_TAKEN
  %473 = icmp eq i8 %472, 1
  br i1 %473, label %block_401c53, label %block_401c2e

block_401ad2:                                     ; preds = %block_401ab9, %block_401a90
  %MEMORY.2 = phi %struct.Memory* [ %107, %block_401a90 ], [ %334, %block_401ab9 ]
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 8
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 4
  store i64 %477, i64* %PC
  %478 = inttoptr i64 %475 to i64*
  %479 = load i64, i64* %478
  store i64 %479, i64* %RAX, align 8, !tbaa !2428
  %480 = load i64, i64* %RAX
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 6
  store i64 %482, i64* %PC
  %483 = inttoptr i64 %480 to i32*
  store i32 32, i32* %483
  %484 = load i64, i64* %RBP
  %485 = sub i64 %484, 8
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = load i64, i64* %RAX
  %491 = add i64 %490, 4
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 7
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %491 to i32*
  store i32 32, i32* %494
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 8
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = load i64, i64* %RAX
  %502 = add i64 %501, 8
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 7
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to i32*
  store i32 64, i32* %505
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 383
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 5
  store i64 %509, i64* %PC
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %507, i64* %510, align 8, !tbaa !2428
  br label %block_401c71

block_401c53:                                     ; preds = %block_401c15
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 10
  store i64 %512, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 162), i64* %RDI, align 8, !tbaa !2428
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 2
  store i64 %514, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2455
  %515 = load i64, i64* %PC
  %516 = sub i64 %515, 5919
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 5
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 5
  store i64 %520, i64* %PC
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %522 = load i64, i64* %521, align 8, !tbaa !2428
  %523 = add i64 %522, -8
  %524 = inttoptr i64 %523 to i64*
  store i64 %518, i64* %524
  store i64 %523, i64* %521, align 8, !tbaa !2428
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %516, i64* %525, align 8, !tbaa !2428
  %526 = load i64, i64* %PC
  %527 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %526, %struct.Memory* %435)
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 5
  store i64 %529, i64* %PC
  store i64 6, i64* %RDI, align 8, !tbaa !2428
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 20
  %532 = load i32, i32* %EAX
  %533 = zext i32 %532 to i64
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %531 to i32*
  store i32 %532, i32* %536
  %537 = load i64, i64* %PC
  %538 = sub i64 %537, 5868
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 5
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 5
  store i64 %542, i64* %PC
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %544 = load i64, i64* %543, align 8, !tbaa !2428
  %545 = add i64 %544, -8
  %546 = inttoptr i64 %545 to i64*
  store i64 %540, i64* %546
  store i64 %545, i64* %543, align 8, !tbaa !2428
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %538, i64* %547, align 8, !tbaa !2428
  %548 = load i64, i64* %PC
  %549 = call %struct.Memory* @ext_400580_exit(%struct.State* %0, i64 %548, %struct.Memory* %527)
  %550 = load i64, i64* %PC
  %551 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %550, %struct.Memory* %549)
  ret %struct.Memory* %551

block_401b10:                                     ; preds = %block_401af7
  %552 = load i64, i64* %RBP
  %553 = sub i64 %552, 16
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC
  %556 = inttoptr i64 %553 to i64*
  %557 = load i64, i64* %556
  store i64 %557, i64* %RDI, align 8, !tbaa !2428
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 5
  store i64 %559, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 150), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %560 = load i32, i32* %EAX
  %561 = zext i32 %560 to i64
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 2
  store i64 %563, i64* %PC
  %564 = and i64 %561, 4294967295
  store i64 %564, i64* %RSI, align 8, !tbaa !2428
  %565 = load i64, i64* %PC
  %566 = sub i64 %565, 5563
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 5
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 5
  store i64 %570, i64* %PC
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %572 = load i64, i64* %571, align 8, !tbaa !2428
  %573 = add i64 %572, -8
  %574 = inttoptr i64 %573 to i64*
  store i64 %568, i64* %574
  store i64 %573, i64* %571, align 8, !tbaa !2428
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %566, i64* %575, align 8, !tbaa !2428
  %576 = load i64, i64* %PC
  %577 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %576, %struct.Memory* %641)
  %578 = load i32, i32* %EAX
  %579 = zext i32 %578 to i64
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %582, align 1, !tbaa !2434
  %583 = and i32 %578, 255
  %584 = call i32 @llvm.ctpop.i32(i32 %583) #16
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  %587 = xor i8 %586, 1
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %587, i8* %588, align 1, !tbaa !2448
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %589, align 1, !tbaa !2449
  %590 = icmp eq i32 %578, 0
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %591, i8* %592, align 1, !tbaa !2450
  %593 = lshr i32 %578, 31
  %594 = trunc i32 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %594, i8* %595, align 1, !tbaa !2451
  %596 = lshr i32 %578, 31
  %597 = xor i32 %593, %596
  %598 = add nuw nsw i32 %597, %596
  %599 = icmp eq i32 %598, 2
  %600 = zext i1 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %600, i8* %601, align 1, !tbaa !2452
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 43
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 6
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 6
  store i64 %607, i64* %PC
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %609 = load i8, i8* %608, align 1, !tbaa !2450
  %610 = icmp eq i8 %609, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %613 = select i1 %610, i64 %603, i64 %605
  store i64 %613, i64* %612, align 8, !tbaa !2428
  %614 = load i8, i8* %BRANCH_TAKEN
  %615 = icmp eq i8 %614, 1
  br i1 %615, label %block_401b4e, label %block_401b29

block_401af7:                                     ; preds = %block_401ab9
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 16
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i64*
  %621 = load i64, i64* %620
  store i64 %621, i64* %RDI, align 8, !tbaa !2428
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 5
  store i64 %623, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 147), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %624 = load i32, i32* %EAX
  %625 = zext i32 %624 to i64
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 2
  store i64 %627, i64* %PC
  %628 = and i64 %625, 4294967295
  store i64 %628, i64* %RSI, align 8, !tbaa !2428
  %629 = load i64, i64* %PC
  %630 = sub i64 %629, 5538
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 5
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 5
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, -8
  %638 = inttoptr i64 %637 to i64*
  store i64 %632, i64* %638
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %630, i64* %639, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %640, %struct.Memory* %334)
  %642 = load i32, i32* %EAX
  %643 = zext i32 %642 to i64
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %646, align 1, !tbaa !2434
  %647 = and i32 %642, 255
  %648 = call i32 @llvm.ctpop.i32(i32 %647) #16
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %651, i8* %652, align 1, !tbaa !2448
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %653, align 1, !tbaa !2449
  %654 = icmp eq i32 %642, 0
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %655, i8* %656, align 1, !tbaa !2450
  %657 = lshr i32 %642, 31
  %658 = trunc i32 %657 to i8
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %658, i8* %659, align 1, !tbaa !2451
  %660 = lshr i32 %642, 31
  %661 = xor i32 %657, %660
  %662 = add nuw nsw i32 %661, %660
  %663 = icmp eq i32 %662, 2
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %664, i8* %665, align 1, !tbaa !2452
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 31
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 6
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 6
  store i64 %671, i64* %PC
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %673 = load i8, i8* %672, align 1, !tbaa !2450
  store i8 %673, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %675 = icmp ne i8 %673, 0
  %676 = select i1 %675, i64 %667, i64 %669
  store i64 %676, i64* %674, align 8, !tbaa !2428
  %677 = load i8, i8* %BRANCH_TAKEN
  %678 = icmp eq i8 %677, 1
  br i1 %678, label %block_401b29, label %block_401b10

block_401b29:                                     ; preds = %block_401af7, %block_401b10
  %MEMORY.3 = phi %struct.Memory* [ %641, %block_401af7 ], [ %577, %block_401b10 ]
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 8
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 4
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %680 to i64*
  %684 = load i64, i64* %683
  store i64 %684, i64* %RAX, align 8, !tbaa !2428
  %685 = load i64, i64* %RAX
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 6
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  store i32 64, i32* %688
  %689 = load i64, i64* %RBP
  %690 = sub i64 %689, 8
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 4
  store i64 %692, i64* %PC
  %693 = inttoptr i64 %690 to i64*
  %694 = load i64, i64* %693
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = load i64, i64* %RAX
  %696 = add i64 %695, 4
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 7
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %696 to i32*
  store i32 64, i32* %699
  %700 = load i64, i64* %RBP
  %701 = sub i64 %700, 8
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i64*
  %705 = load i64, i64* %704
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = load i64, i64* %RAX
  %707 = add i64 %706, 8
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 7
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i32*
  store i32 128, i32* %710
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 296
  %713 = load i64, i64* %PC
  %714 = add i64 %713, 5
  store i64 %714, i64* %PC
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %712, i64* %715, align 8, !tbaa !2428
  br label %block_401c71

block_401c71:                                     ; preds = %block_401b80, %block_401b29, %block_401ad2, %block_401bd7, %block_401c2e
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_401ad2 ], [ %MEMORY.3, %block_401b29 ], [ %MEMORY.5, %block_401b80 ], [ %MEMORY.1, %block_401bd7 ], [ %MEMORY.0, %block_401c2e ]
  %716 = load i64, i64* %RSP
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = add i64 32, %716
  store i64 %719, i64* %RSP, align 8, !tbaa !2428
  %720 = icmp ult i64 %719, %716
  %721 = icmp ult i64 %719, 32
  %722 = or i1 %720, %721
  %723 = zext i1 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %723, i8* %724, align 1, !tbaa !2434
  %725 = trunc i64 %719 to i32
  %726 = and i32 %725, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2448
  %732 = xor i64 32, %716
  %733 = xor i64 %732, %719
  %734 = lshr i64 %733, 4
  %735 = trunc i64 %734 to i8
  %736 = and i8 %735, 1
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %736, i8* %737, align 1, !tbaa !2449
  %738 = icmp eq i64 %719, 0
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %739, i8* %740, align 1, !tbaa !2450
  %741 = lshr i64 %719, 63
  %742 = trunc i64 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %742, i8* %743, align 1, !tbaa !2451
  %744 = lshr i64 %716, 63
  %745 = xor i64 %741, %744
  %746 = add nuw nsw i64 %745, %741
  %747 = icmp eq i64 %746, 2
  %748 = zext i1 %747 to i8
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %748, i8* %749, align 1, !tbaa !2452
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 1
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %753 = load i64, i64* %752, align 8, !tbaa !2428
  %754 = add i64 %753, 8
  %755 = inttoptr i64 %753 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RBP, align 8, !tbaa !2428
  store i64 %754, i64* %752, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 1
  store i64 %758, i64* %PC
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %761 = load i64, i64* %760, align 8, !tbaa !2428
  %762 = inttoptr i64 %761 to i64*
  %763 = load i64, i64* %762
  store i64 %763, i64* %759, align 8, !tbaa !2428
  %764 = add i64 %761, 8
  store i64 %764, i64* %760, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_401b67:                                     ; preds = %block_401b4e
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 16
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RDI, align 8, !tbaa !2428
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 5
  store i64 %772, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 154), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %773 = load i32, i32* %EAX
  %774 = zext i32 %773 to i64
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 2
  store i64 %776, i64* %PC
  %777 = and i64 %774, 4294967295
  store i64 %777, i64* %RSI, align 8, !tbaa !2428
  %778 = load i64, i64* %PC
  %779 = sub i64 %778, 5650
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 5
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 5
  store i64 %783, i64* %PC
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %785 = load i64, i64* %784, align 8, !tbaa !2428
  %786 = add i64 %785, -8
  %787 = inttoptr i64 %786 to i64*
  store i64 %781, i64* %787
  store i64 %786, i64* %784, align 8, !tbaa !2428
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %779, i64* %788, align 8, !tbaa !2428
  %789 = load i64, i64* %PC
  %790 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %789, %struct.Memory* %917)
  %791 = load i32, i32* %EAX
  %792 = zext i32 %791 to i64
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %795, align 1, !tbaa !2434
  %796 = and i32 %791, 255
  %797 = call i32 @llvm.ctpop.i32(i32 %796) #16
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = xor i8 %799, 1
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %800, i8* %801, align 1, !tbaa !2448
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %802, align 1, !tbaa !2449
  %803 = icmp eq i32 %791, 0
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %804, i8* %805, align 1, !tbaa !2450
  %806 = lshr i32 %791, 31
  %807 = trunc i32 %806 to i8
  %808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %807, i8* %808, align 1, !tbaa !2451
  %809 = lshr i32 %791, 31
  %810 = xor i32 %806, %809
  %811 = add nuw nsw i32 %810, %809
  %812 = icmp eq i32 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2452
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 43
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 6
  %819 = load i64, i64* %PC
  %820 = add i64 %819, 6
  store i64 %820, i64* %PC
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %822 = load i8, i8* %821, align 1, !tbaa !2450
  %823 = icmp eq i8 %822, 0
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %826 = select i1 %823, i64 %816, i64 %818
  store i64 %826, i64* %825, align 8, !tbaa !2428
  %827 = load i8, i8* %BRANCH_TAKEN
  %828 = icmp eq i8 %827, 1
  br i1 %828, label %block_401ba5, label %block_401b80

block_401ba5:                                     ; preds = %block_401b67
  %829 = load i64, i64* %RBP
  %830 = sub i64 %829, 16
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 4
  store i64 %832, i64* %PC
  %833 = inttoptr i64 %830 to i64*
  %834 = load i64, i64* %833
  store i64 %834, i64* %RDI, align 8, !tbaa !2428
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 157), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %837 = load i32, i32* %EAX
  %838 = zext i32 %837 to i64
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 2
  store i64 %840, i64* %PC
  %841 = and i64 %838, 4294967295
  store i64 %841, i64* %RSI, align 8, !tbaa !2428
  %842 = load i64, i64* %PC
  %843 = sub i64 %842, 5712
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 5
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 5
  store i64 %847, i64* %PC
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %849 = load i64, i64* %848, align 8, !tbaa !2428
  %850 = add i64 %849, -8
  %851 = inttoptr i64 %850 to i64*
  store i64 %845, i64* %851
  store i64 %850, i64* %848, align 8, !tbaa !2428
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %843, i64* %852, align 8, !tbaa !2428
  %853 = load i64, i64* %PC
  %854 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %853, %struct.Memory* %790)
  %855 = load i32, i32* %EAX
  %856 = zext i32 %855 to i64
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %859, align 1, !tbaa !2434
  %860 = and i32 %855, 255
  %861 = call i32 @llvm.ctpop.i32(i32 %860) #16
  %862 = trunc i32 %861 to i8
  %863 = and i8 %862, 1
  %864 = xor i8 %863, 1
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %864, i8* %865, align 1, !tbaa !2448
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %866, align 1, !tbaa !2449
  %867 = icmp eq i32 %855, 0
  %868 = zext i1 %867 to i8
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %868, i8* %869, align 1, !tbaa !2450
  %870 = lshr i32 %855, 31
  %871 = trunc i32 %870 to i8
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %871, i8* %872, align 1, !tbaa !2451
  %873 = lshr i32 %855, 31
  %874 = xor i32 %870, %873
  %875 = add nuw nsw i32 %874, %873
  %876 = icmp eq i32 %875, 2
  %877 = zext i1 %876 to i8
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %877, i8* %878, align 1, !tbaa !2452
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 31
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 6
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 6
  store i64 %884, i64* %PC
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %886 = load i8, i8* %885, align 1, !tbaa !2450
  store i8 %886, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %888 = icmp ne i8 %886, 0
  %889 = select i1 %888, i64 %880, i64 %882
  store i64 %889, i64* %887, align 8, !tbaa !2428
  %890 = load i8, i8* %BRANCH_TAKEN
  %891 = icmp eq i8 %890, 1
  br i1 %891, label %block_401bd7, label %block_401bbe

block_401b4e:                                     ; preds = %block_401b10
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 16
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RDI, align 8, !tbaa !2428
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 5
  store i64 %899, i64* %PC
  store i64 and (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 152), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %900 = load i32, i32* %EAX
  %901 = zext i32 %900 to i64
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 2
  store i64 %903, i64* %PC
  %904 = and i64 %901, 4294967295
  store i64 %904, i64* %RSI, align 8, !tbaa !2428
  %905 = load i64, i64* %PC
  %906 = sub i64 %905, 5625
  %907 = load i64, i64* %PC
  %908 = add i64 %907, 5
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 5
  store i64 %910, i64* %PC
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %912 = load i64, i64* %911, align 8, !tbaa !2428
  %913 = add i64 %912, -8
  %914 = inttoptr i64 %913 to i64*
  store i64 %908, i64* %914
  store i64 %913, i64* %911, align 8, !tbaa !2428
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %906, i64* %915, align 8, !tbaa !2428
  %916 = load i64, i64* %PC
  %917 = call %struct.Memory* @ext_603138_strcmp(%struct.State* %0, i64 %916, %struct.Memory* %577)
  %918 = load i32, i32* %EAX
  %919 = zext i32 %918 to i64
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %922, align 1, !tbaa !2434
  %923 = and i32 %918, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2448
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %929, align 1, !tbaa !2449
  %930 = icmp eq i32 %918, 0
  %931 = zext i1 %930 to i8
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %931, i8* %932, align 1, !tbaa !2450
  %933 = lshr i32 %918, 31
  %934 = trunc i32 %933 to i8
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %934, i8* %935, align 1, !tbaa !2451
  %936 = lshr i32 %918, 31
  %937 = xor i32 %933, %936
  %938 = add nuw nsw i32 %937, %936
  %939 = icmp eq i32 %938, 2
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %940, i8* %941, align 1, !tbaa !2452
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 31
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 6
  %946 = load i64, i64* %PC
  %947 = add i64 %946, 6
  store i64 %947, i64* %PC
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %949 = load i8, i8* %948, align 1, !tbaa !2450
  store i8 %949, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %951 = icmp ne i8 %949, 0
  %952 = select i1 %951, i64 %943, i64 %945
  store i64 %952, i64* %950, align 8, !tbaa !2428
  %953 = load i8, i8* %BRANCH_TAKEN
  %954 = icmp eq i8 %953, 1
  br i1 %954, label %block_401b80, label %block_401b67

block_401b80:                                     ; preds = %block_401b4e, %block_401b67
  %MEMORY.5 = phi %struct.Memory* [ %917, %block_401b4e ], [ %790, %block_401b67 ]
  %955 = load i64, i64* %RBP
  %956 = sub i64 %955, 8
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 4
  store i64 %958, i64* %PC
  %959 = inttoptr i64 %956 to i64*
  %960 = load i64, i64* %959
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RAX
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 6
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i32*
  store i32 128, i32* %964
  %965 = load i64, i64* %RBP
  %966 = sub i64 %965, 8
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 4
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %966 to i64*
  %970 = load i64, i64* %969
  store i64 %970, i64* %RAX, align 8, !tbaa !2428
  %971 = load i64, i64* %RAX
  %972 = add i64 %971, 4
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 7
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i32*
  store i32 128, i32* %975
  %976 = load i64, i64* %RBP
  %977 = sub i64 %976, 8
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 4
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980
  store i64 %981, i64* %RAX, align 8, !tbaa !2428
  %982 = load i64, i64* %RAX
  %983 = add i64 %982, 8
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 7
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  store i32 256, i32* %986
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 209
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 5
  store i64 %990, i64* %PC
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %988, i64* %991, align 8, !tbaa !2428
  br label %block_401c71
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400600:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2434
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2448
  %50 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2451
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2452
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2455
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2455
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2455
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2455
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2455
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2455
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2455
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2455
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2455
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2455
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2455
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2455
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2434
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2449
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2451
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2452
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2455
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2455
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2455
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2455
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2455
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2455
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2450
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_400638, label %block_400623

block_40063a:                                     ; preds = %block_40062d
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_400640___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_400635:                                     ; preds = %block_40062d
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_400638

block_40062d:                                     ; preds = %block_400623
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4195898, label %block_40063a
    i64 4195893, label %block_400635
  ]

block_400638:                                     ; preds = %block_400623, %block_400635, %block_400600
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400600 ], [ %2, %block_400623 ], [ %2, %block_400635 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400623:                                     ; preds = %block_400600
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2434
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2451
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2452
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2449
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2450
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_400638, label %block_40062d

; <label>:270:                                    ; preds = %block_40062d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_400640___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400640:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2434
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2448
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2449
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2450
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2451
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2452
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2450
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400660, label %block_400649

block_400660:                                     ; preds = %block_400640
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400649:                                     ; preds = %block_400640
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4005d0_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603060__bss_type, %seg_603060__bss_type* @seg_603060__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b10_mat_set_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 7
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 11
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 13
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 15
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RBP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %34 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %33, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %34 to %"class.std::bitset"*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %36 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %35, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %36 to %"class.std::bitset"*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %38 to %union.vec128_t*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %40 to %union.vec128_t*
  %41 = load i64, i64* %RBP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 1
  store i64 %43, i64* %PC
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %45 = load i64, i64* %44, align 8, !tbaa !2428
  %46 = add i64 %45, -8
  %47 = inttoptr i64 %46 to i64*
  store i64 %41, i64* %47
  store i64 %46, i64* %44, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  store i64 %48, i64* %RBP, align 8, !tbaa !2428
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 8
  %53 = load i64, i64* %RDI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 12
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61
  br label %block_400b1f

block_400b5d:                                     ; preds = %block_400b4d
  %62 = load i64, i64* %RBP
  %63 = sub i64 %62, 12
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %63 to i32*
  %67 = load i32, i32* %66
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RAX
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 12
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74
  %76 = shl i64 %69, 32
  %77 = ashr exact i64 %76, 32
  %78 = sext i32 %75 to i64
  %79 = mul nsw i64 %78, %77
  %80 = trunc i64 %79 to i32
  %81 = and i64 %79, 4294967295
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = shl i64 %79, 32
  %83 = ashr exact i64 %82, 32
  %84 = icmp ne i64 %83, %79
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %85, i8* %86, align 1, !tbaa !2434
  %87 = and i32 %80, 255
  %88 = call i32 @llvm.ctpop.i32(i32 %87) #16
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %91, i8* %92, align 1, !tbaa !2448
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %93, align 1, !tbaa !2449
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %94, align 1, !tbaa !2450
  %95 = lshr i32 %80, 31
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %96, i8* %97, align 1, !tbaa !2451
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %85, i8* %98, align 1, !tbaa !2452
  %99 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %100 = load i32, i32* %EAX
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = bitcast i8* %99 to <2 x i32>*
  %105 = load <2 x i32>, <2 x i32>* %104, align 1
  %106 = getelementptr inbounds i8, i8* %99, i64 8
  %107 = bitcast i8* %106 to <2 x i32>*
  %108 = load <2 x i32>, <2 x i32>* %107, align 1
  %109 = sitofp i32 %100 to float
  %110 = bitcast i8* %99 to float*
  store float %109, float* %110, align 1, !tbaa !2453
  %111 = extractelement <2 x i32> %105, i32 1
  %112 = getelementptr inbounds i8, i8* %99, i64 4
  %113 = bitcast i8* %112 to i32*
  store i32 %111, i32* %113, align 1, !tbaa !2453
  %114 = extractelement <2 x i32> %108, i32 0
  %115 = bitcast i8* %106 to i32*
  store i32 %114, i32* %115, align 1, !tbaa !2453
  %116 = extractelement <2 x i32> %108, i32 1
  %117 = getelementptr inbounds i8, i8* %99, i64 12
  %118 = bitcast i8* %117 to i32*
  store i32 %116, i32* %118, align 1, !tbaa !2453
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = load i64, i64* %RCX
  %126 = add i64 %125, 12
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %RAX
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = trunc i64 %132 to i32
  %136 = sub i32 %135, 1
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = icmp ult i32 %135, 1
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %139, i8* %140, align 1, !tbaa !2434
  %141 = and i32 %136, 255
  %142 = call i32 @llvm.ctpop.i32(i32 %141) #16
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = xor i64 1, %132
  %148 = trunc i64 %147 to i32
  %149 = xor i32 %148, %136
  %150 = lshr i32 %149, 4
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %152, i8* %153, align 1, !tbaa !2449
  %154 = icmp eq i32 %136, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = lshr i32 %136, 31
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2451
  %160 = lshr i32 %135, 31
  %161 = xor i32 %157, %160
  %162 = add nuw nsw i32 %161, %160
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2452
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 8
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170
  store i64 %171, i64* %RCX, align 8, !tbaa !2428
  %172 = load i64, i64* %RCX
  %173 = add i64 %172, 12
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RDX, align 8, !tbaa !2428
  %179 = load i64, i64* %RDX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = trunc i64 %179 to i32
  %183 = sub i32 %182, 1
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = icmp ult i32 %182, 1
  %186 = zext i1 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %186, i8* %187, align 1, !tbaa !2434
  %188 = and i32 %183, 255
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #16
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %192, i8* %193, align 1, !tbaa !2448
  %194 = xor i64 1, %179
  %195 = trunc i64 %194 to i32
  %196 = xor i32 %195, %183
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  %199 = and i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = icmp eq i32 %183, 0
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %202, i8* %203, align 1, !tbaa !2450
  %204 = lshr i32 %183, 31
  %205 = trunc i32 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %205, i8* %206, align 1, !tbaa !2451
  %207 = lshr i32 %182, 31
  %208 = xor i32 %204, %207
  %209 = add nuw nsw i32 %208, %207
  %210 = icmp eq i32 %209, 2
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %211, i8* %212, align 1, !tbaa !2452
  %213 = load i64, i64* %RAX
  %214 = load i32, i32* %EDX
  %215 = zext i32 %214 to i64
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = shl i64 %213, 32
  %219 = ashr exact i64 %218, 32
  %220 = shl i64 %215, 32
  %221 = ashr exact i64 %220, 32
  %222 = mul nsw i64 %221, %219
  %223 = trunc i64 %222 to i32
  %224 = and i64 %222, 4294967295
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = shl i64 %222, 32
  %226 = ashr exact i64 %225, 32
  %227 = icmp ne i64 %226, %222
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2434
  %230 = and i32 %223, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2448
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2449
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %237, align 1, !tbaa !2450
  %238 = lshr i32 %223, 31
  %239 = trunc i32 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %239, i8* %240, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %228, i8* %241, align 1, !tbaa !2452
  %242 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %243 = load i32, i32* %EAX
  %244 = zext i32 %243 to i64
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = bitcast i8* %242 to <2 x i32>*
  %248 = load <2 x i32>, <2 x i32>* %247, align 1
  %249 = getelementptr inbounds i8, i8* %242, i64 8
  %250 = bitcast i8* %249 to <2 x i32>*
  %251 = load <2 x i32>, <2 x i32>* %250, align 1
  %252 = sitofp i32 %243 to float
  %253 = bitcast i8* %242 to float*
  store float %252, float* %253, align 1, !tbaa !2453
  %254 = extractelement <2 x i32> %248, i32 1
  %255 = getelementptr inbounds i8, i8* %242, i64 4
  %256 = bitcast i8* %255 to i32*
  store i32 %254, i32* %256, align 1, !tbaa !2453
  %257 = extractelement <2 x i32> %251, i32 0
  %258 = bitcast i8* %249 to i32*
  store i32 %257, i32* %258, align 1, !tbaa !2453
  %259 = extractelement <2 x i32> %251, i32 1
  %260 = getelementptr inbounds i8, i8* %242, i64 12
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2453
  %262 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %263 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %264 = bitcast %union.vec128_t* %XMM1 to i8*
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = bitcast i8* %263 to <2 x float>*
  %268 = load <2 x float>, <2 x float>* %267, align 1
  %269 = getelementptr inbounds i8, i8* %263, i64 8
  %270 = bitcast i8* %269 to <2 x i32>*
  %271 = load <2 x i32>, <2 x i32>* %270, align 1
  %272 = bitcast i8* %264 to <2 x float>*
  %273 = load <2 x float>, <2 x float>* %272, align 1
  %274 = extractelement <2 x float> %268, i32 0
  %275 = extractelement <2 x float> %273, i32 0
  %276 = fdiv float %274, %275
  %277 = bitcast i8* %262 to float*
  store float %276, float* %277, align 1, !tbaa !2453
  %278 = bitcast <2 x float> %268 to <2 x i32>
  %279 = extractelement <2 x i32> %278, i32 1
  %280 = getelementptr inbounds i8, i8* %262, i64 4
  %281 = bitcast i8* %280 to i32*
  store i32 %279, i32* %281, align 1, !tbaa !2453
  %282 = extractelement <2 x i32> %271, i32 0
  %283 = getelementptr inbounds i8, i8* %262, i64 8
  %284 = bitcast i8* %283 to i32*
  store i32 %282, i32* %284, align 1, !tbaa !2453
  %285 = extractelement <2 x i32> %271, i32 1
  %286 = getelementptr inbounds i8, i8* %262, i64 12
  %287 = bitcast i8* %286 to i32*
  store i32 %285, i32* %287, align 1, !tbaa !2453
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 8
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 4
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RCX, align 8, !tbaa !2428
  %294 = load i64, i64* %RCX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 3
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i64*
  %298 = load i64, i64* %297
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 8
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303
  store i64 %304, i64* %RSI, align 8, !tbaa !2428
  %305 = load i64, i64* %RSI
  %306 = add i64 %305, 12
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i32*
  %310 = load i32, i32* %309
  %311 = sext i32 %310 to i64
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %312, align 1, !tbaa !2434
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %313, align 1, !tbaa !2448
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %314, align 1, !tbaa !2449
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %315, align 1, !tbaa !2450
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %316, align 1, !tbaa !2451
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %317, align 1, !tbaa !2452
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 8
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i64*
  %323 = load i64, i64* %322
  store i64 %323, i64* %RSI, align 8, !tbaa !2428
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %RSI
  %326 = add i64 %325, 16
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = shl i64 %324, 32
  %332 = ashr exact i64 %331, 32
  %333 = sext i32 %330 to i64
  %334 = mul nsw i64 %333, %332
  %335 = trunc i64 %334 to i32
  %336 = and i64 %334, 4294967295
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = shl i64 %334, 32
  %338 = ashr exact i64 %337, 32
  %339 = icmp ne i64 %338, %334
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %340, i8* %341, align 1, !tbaa !2434
  %342 = and i32 %335, 255
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %348, align 1, !tbaa !2449
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %349, align 1, !tbaa !2450
  %350 = lshr i32 %335, 31
  %351 = trunc i32 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %351, i8* %352, align 1, !tbaa !2451
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %340, i8* %353, align 1, !tbaa !2452
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 8
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RSI, align 8, !tbaa !2428
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %RSI
  %362 = add i64 %361, 20
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i32*
  %366 = load i32, i32* %365
  %367 = shl i64 %360, 32
  %368 = ashr exact i64 %367, 32
  %369 = sext i32 %366 to i64
  %370 = mul nsw i64 %369, %368
  %371 = trunc i64 %370 to i32
  %372 = and i64 %370, 4294967295
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = shl i64 %370, 32
  %374 = ashr exact i64 %373, 32
  %375 = icmp ne i64 %374, %370
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %376, i8* %377, align 1, !tbaa !2434
  %378 = and i32 %371, 255
  %379 = call i32 @llvm.ctpop.i32(i32 %378) #16
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %382, i8* %383, align 1, !tbaa !2448
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %384, align 1, !tbaa !2449
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %385, align 1, !tbaa !2450
  %386 = lshr i32 %371, 31
  %387 = trunc i32 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %387, i8* %388, align 1, !tbaa !2451
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %389, align 1, !tbaa !2452
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RDX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 8
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 4
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %398 to i64*
  %402 = load i64, i64* %401
  store i64 %402, i64* %RSI, align 8, !tbaa !2428
  %403 = load i64, i64* %RDX
  %404 = load i64, i64* %RSI
  %405 = add i64 %404, 16
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  %409 = load i32, i32* %408
  %410 = shl i64 %403, 32
  %411 = ashr exact i64 %410, 32
  %412 = sext i32 %409 to i64
  %413 = mul nsw i64 %412, %411
  %414 = trunc i64 %413 to i32
  %415 = and i64 %413, 4294967295
  store i64 %415, i64* %RDX, align 8, !tbaa !2428
  %416 = shl i64 %413, 32
  %417 = ashr exact i64 %416, 32
  %418 = icmp ne i64 %417, %413
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %419, i8* %420, align 1, !tbaa !2434
  %421 = and i32 %414, 255
  %422 = call i32 @llvm.ctpop.i32(i32 %421) #16
  %423 = trunc i32 %422 to i8
  %424 = and i8 %423, 1
  %425 = xor i8 %424, 1
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %425, i8* %426, align 1, !tbaa !2448
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %427, align 1, !tbaa !2449
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %428, align 1, !tbaa !2450
  %429 = lshr i32 %414, 31
  %430 = trunc i32 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %430, i8* %431, align 1, !tbaa !2451
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %419, i8* %432, align 1, !tbaa !2452
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 8
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 4
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to i64*
  %438 = load i64, i64* %437
  store i64 %438, i64* %RSI, align 8, !tbaa !2428
  %439 = load i64, i64* %RDX
  %440 = load i64, i64* %RSI
  %441 = add i64 %440, 20
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  %445 = load i32, i32* %444
  %446 = shl i64 %439, 32
  %447 = ashr exact i64 %446, 32
  %448 = sext i32 %445 to i64
  %449 = mul nsw i64 %448, %447
  %450 = trunc i64 %449 to i32
  %451 = and i64 %449, 4294967295
  store i64 %451, i64* %RDX, align 8, !tbaa !2428
  %452 = shl i64 %449, 32
  %453 = ashr exact i64 %452, 32
  %454 = icmp ne i64 %453, %449
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %455, i8* %456, align 1, !tbaa !2434
  %457 = and i32 %450, 255
  %458 = call i32 @llvm.ctpop.i32(i32 %457) #16
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %461, i8* %462, align 1, !tbaa !2448
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %463, align 1, !tbaa !2449
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %464, align 1, !tbaa !2450
  %465 = lshr i32 %450, 31
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %466, i8* %467, align 1, !tbaa !2451
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %468, align 1, !tbaa !2452
  %469 = load i64, i64* %RAX
  %470 = load i32, i32* %EDX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 2
  store i64 %473, i64* %PC
  %474 = trunc i64 %469 to i32
  %475 = add i32 %470, %474
  %476 = zext i32 %475 to i64
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = icmp ult i32 %475, %474
  %478 = icmp ult i32 %475, %470
  %479 = or i1 %477, %478
  %480 = zext i1 %479 to i8
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %480, i8* %481, align 1, !tbaa !2434
  %482 = and i32 %475, 255
  %483 = call i32 @llvm.ctpop.i32(i32 %482) #16
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  %486 = xor i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %486, i8* %487, align 1, !tbaa !2448
  %488 = xor i64 %471, %469
  %489 = trunc i64 %488 to i32
  %490 = xor i32 %489, %475
  %491 = lshr i32 %490, 4
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = icmp eq i32 %475, 0
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %496, i8* %497, align 1, !tbaa !2450
  %498 = lshr i32 %475, 31
  %499 = trunc i32 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %499, i8* %500, align 1, !tbaa !2451
  %501 = lshr i32 %474, 31
  %502 = lshr i32 %470, 31
  %503 = xor i32 %498, %501
  %504 = xor i32 %498, %502
  %505 = add nuw nsw i32 %503, %504
  %506 = icmp eq i32 %505, 2
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %507, i8* %508, align 1, !tbaa !2452
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 16
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RDX, align 8, !tbaa !2428
  %516 = load i64, i64* %RBP
  %517 = sub i64 %516, 8
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC
  %520 = inttoptr i64 %517 to i64*
  %521 = load i64, i64* %520
  store i64 %521, i64* %RSI, align 8, !tbaa !2428
  %522 = load i64, i64* %RDX
  %523 = load i64, i64* %RSI
  %524 = add i64 %523, 20
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 4
  store i64 %526, i64* %PC
  %527 = inttoptr i64 %524 to i32*
  %528 = load i32, i32* %527
  %529 = shl i64 %522, 32
  %530 = ashr exact i64 %529, 32
  %531 = sext i32 %528 to i64
  %532 = mul nsw i64 %531, %530
  %533 = trunc i64 %532 to i32
  %534 = and i64 %532, 4294967295
  store i64 %534, i64* %RDX, align 8, !tbaa !2428
  %535 = shl i64 %532, 32
  %536 = ashr exact i64 %535, 32
  %537 = icmp ne i64 %536, %532
  %538 = zext i1 %537 to i8
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %538, i8* %539, align 1, !tbaa !2434
  %540 = and i32 %533, 255
  %541 = call i32 @llvm.ctpop.i32(i32 %540) #16
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = xor i8 %543, 1
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %544, i8* %545, align 1, !tbaa !2448
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %546, align 1, !tbaa !2449
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %547, align 1, !tbaa !2450
  %548 = lshr i32 %533, 31
  %549 = trunc i32 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %549, i8* %550, align 1, !tbaa !2451
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %538, i8* %551, align 1, !tbaa !2452
  %552 = load i64, i64* %RAX
  %553 = load i32, i32* %EDX
  %554 = zext i32 %553 to i64
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 2
  store i64 %556, i64* %PC
  %557 = trunc i64 %552 to i32
  %558 = add i32 %553, %557
  %559 = zext i32 %558 to i64
  store i64 %559, i64* %RAX, align 8, !tbaa !2428
  %560 = icmp ult i32 %558, %557
  %561 = icmp ult i32 %558, %553
  %562 = or i1 %560, %561
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %563, i8* %564, align 1, !tbaa !2434
  %565 = and i32 %558, 255
  %566 = call i32 @llvm.ctpop.i32(i32 %565) #16
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %569, i8* %570, align 1, !tbaa !2448
  %571 = xor i64 %554, %552
  %572 = trunc i64 %571 to i32
  %573 = xor i32 %572, %558
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = icmp eq i32 %558, 0
  %579 = zext i1 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %579, i8* %580, align 1, !tbaa !2450
  %581 = lshr i32 %558, 31
  %582 = trunc i32 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %582, i8* %583, align 1, !tbaa !2451
  %584 = lshr i32 %557, 31
  %585 = lshr i32 %553, 31
  %586 = xor i32 %581, %584
  %587 = xor i32 %581, %585
  %588 = add nuw nsw i32 %586, %587
  %589 = icmp eq i32 %588, 2
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %590, i8* %591, align 1, !tbaa !2452
  %592 = load i64, i64* %RAX
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 20
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 3
  store i64 %596, i64* %PC
  %597 = trunc i64 %592 to i32
  %598 = inttoptr i64 %594 to i32*
  %599 = load i32, i32* %598
  %600 = add i32 %599, %597
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = icmp ult i32 %600, %597
  %603 = icmp ult i32 %600, %599
  %604 = or i1 %602, %603
  %605 = zext i1 %604 to i8
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %605, i8* %606, align 1, !tbaa !2434
  %607 = and i32 %600, 255
  %608 = call i32 @llvm.ctpop.i32(i32 %607) #16
  %609 = trunc i32 %608 to i8
  %610 = and i8 %609, 1
  %611 = xor i8 %610, 1
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %611, i8* %612, align 1, !tbaa !2448
  %613 = xor i32 %599, %597
  %614 = xor i32 %613, %600
  %615 = lshr i32 %614, 4
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %617, i8* %618, align 1, !tbaa !2449
  %619 = icmp eq i32 %600, 0
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %620, i8* %621, align 1, !tbaa !2450
  %622 = lshr i32 %600, 31
  %623 = trunc i32 %622 to i8
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %623, i8* %624, align 1, !tbaa !2451
  %625 = lshr i32 %597, 31
  %626 = lshr i32 %599, 31
  %627 = xor i32 %622, %625
  %628 = xor i32 %622, %626
  %629 = add nuw nsw i32 %627, %628
  %630 = icmp eq i32 %629, 2
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %632, align 1, !tbaa !2452
  %633 = load i32, i32* %EAX
  %634 = zext i32 %633 to i64
  %635 = load i64, i64* %PC
  %636 = add i64 %635, 3
  store i64 %636, i64* %PC
  %637 = shl i64 %634, 32
  %638 = ashr exact i64 %637, 32
  store i64 %638, i64* %RSI, align 8, !tbaa !2428
  %639 = load i64, i64* %RCX
  %640 = load i64, i64* %RSI
  %641 = mul i64 %640, 4
  %642 = add i64 %641, %639
  %643 = bitcast %union.vec128_t* %XMM0 to i8*
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 5
  store i64 %645, i64* %PC
  %646 = bitcast i8* %643 to <2 x float>*
  %647 = load <2 x float>, <2 x float>* %646, align 1
  %648 = extractelement <2 x float> %647, i32 0
  %649 = inttoptr i64 %642 to float*
  store float %648, float* %649
  %650 = load i64, i64* %RBP
  %651 = sub i64 %650, 20
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 3
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %651 to i32*
  %655 = load i32, i32* %654
  %656 = zext i32 %655 to i64
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 3
  store i64 %659, i64* %PC
  %660 = trunc i64 %657 to i32
  %661 = add i32 1, %660
  %662 = zext i32 %661 to i64
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = icmp ult i32 %661, %660
  %664 = icmp ult i32 %661, 1
  %665 = or i1 %663, %664
  %666 = zext i1 %665 to i8
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %666, i8* %667, align 1, !tbaa !2434
  %668 = and i32 %661, 255
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #16
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = xor i64 1, %657
  %675 = trunc i64 %674 to i32
  %676 = xor i32 %675, %661
  %677 = lshr i32 %676, 4
  %678 = trunc i32 %677 to i8
  %679 = and i8 %678, 1
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %679, i8* %680, align 1, !tbaa !2449
  %681 = icmp eq i32 %661, 0
  %682 = zext i1 %681 to i8
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %682, i8* %683, align 1, !tbaa !2450
  %684 = lshr i32 %661, 31
  %685 = trunc i32 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %685, i8* %686, align 1, !tbaa !2451
  %687 = lshr i32 %660, 31
  %688 = xor i32 %684, %687
  %689 = add nuw nsw i32 %688, %684
  %690 = icmp eq i32 %689, 2
  %691 = zext i1 %690 to i8
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %691, i8* %692, align 1, !tbaa !2452
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 20
  %695 = load i32, i32* %EAX
  %696 = zext i32 %695 to i64
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 3
  store i64 %698, i64* %PC
  %699 = inttoptr i64 %694 to i32*
  store i32 %695, i32* %699
  %700 = load i64, i64* %PC
  %701 = sub i64 %700, 143
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 5
  store i64 %703, i64* %PC
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %701, i64* %704, align 8, !tbaa !2428
  br label %block_400b4d

block_400b36:                                     ; preds = %block_400be1, %block_400b2f
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_400b2f ], [ %MEMORY.1, %block_400be1 ]
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 16
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 3
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = zext i32 %710 to i64
  store i64 %711, i64* %RAX, align 8, !tbaa !2428
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 8
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 4
  store i64 %715, i64* %PC
  %716 = inttoptr i64 %713 to i64*
  %717 = load i64, i64* %716
  store i64 %717, i64* %RCX, align 8, !tbaa !2428
  %718 = load i32, i32* %EAX
  %719 = zext i32 %718 to i64
  %720 = load i64, i64* %RCX
  %721 = add i64 %720, 16
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 3
  store i64 %723, i64* %PC
  %724 = inttoptr i64 %721 to i32*
  %725 = load i32, i32* %724
  %726 = sub i32 %718, %725
  %727 = icmp ult i32 %718, %725
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %728, i8* %729, align 1, !tbaa !2434
  %730 = and i32 %726, 255
  %731 = call i32 @llvm.ctpop.i32(i32 %730) #16
  %732 = trunc i32 %731 to i8
  %733 = and i8 %732, 1
  %734 = xor i8 %733, 1
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %734, i8* %735, align 1, !tbaa !2448
  %736 = xor i32 %725, %718
  %737 = xor i32 %736, %726
  %738 = lshr i32 %737, 4
  %739 = trunc i32 %738 to i8
  %740 = and i8 %739, 1
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %740, i8* %741, align 1, !tbaa !2449
  %742 = icmp eq i32 %726, 0
  %743 = zext i1 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %743, i8* %744, align 1, !tbaa !2450
  %745 = lshr i32 %726, 31
  %746 = trunc i32 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %746, i8* %747, align 1, !tbaa !2451
  %748 = lshr i32 %718, 31
  %749 = lshr i32 %725, 31
  %750 = xor i32 %749, %748
  %751 = xor i32 %745, %748
  %752 = add nuw nsw i32 %751, %750
  %753 = icmp eq i32 %752, 2
  %754 = zext i1 %753 to i8
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %754, i8* %755, align 1, !tbaa !2452
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 180
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 6
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 6
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %763 = load i8, i8* %762, align 1, !tbaa !2451
  %764 = icmp ne i8 %763, 0
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %766 = load i8, i8* %765, align 1, !tbaa !2452
  %767 = icmp ne i8 %766, 0
  %768 = xor i1 %764, %767
  %769 = xor i1 %768, true
  %770 = zext i1 %769 to i8
  store i8 %770, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %772 = select i1 %768, i64 %759, i64 %757
  store i64 %772, i64* %771, align 8, !tbaa !2428
  %773 = load i8, i8* %BRANCH_TAKEN
  %774 = icmp eq i8 %773, 1
  br i1 %774, label %block_400bf4, label %block_400b46

block_400bf4:                                     ; preds = %block_400b36
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 5
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 5
  store i64 %778, i64* %PC
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %776, i64* %779, align 8, !tbaa !2428
  %780 = load i64, i64* %RBP
  %781 = sub i64 %780, 12
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 3
  store i64 %783, i64* %PC
  %784 = inttoptr i64 %781 to i32*
  %785 = load i32, i32* %784
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RAX
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 3
  store i64 %789, i64* %PC
  %790 = trunc i64 %787 to i32
  %791 = add i32 1, %790
  %792 = zext i32 %791 to i64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = icmp ult i32 %791, %790
  %794 = icmp ult i32 %791, 1
  %795 = or i1 %793, %794
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %796, i8* %797, align 1, !tbaa !2434
  %798 = and i32 %791, 255
  %799 = call i32 @llvm.ctpop.i32(i32 %798) #16
  %800 = trunc i32 %799 to i8
  %801 = and i8 %800, 1
  %802 = xor i8 %801, 1
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %802, i8* %803, align 1, !tbaa !2448
  %804 = xor i64 1, %787
  %805 = trunc i64 %804 to i32
  %806 = xor i32 %805, %791
  %807 = lshr i32 %806, 4
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %809, i8* %810, align 1, !tbaa !2449
  %811 = icmp eq i32 %791, 0
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = lshr i32 %791, 31
  %815 = trunc i32 %814 to i8
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %815, i8* %816, align 1, !tbaa !2451
  %817 = lshr i32 %790, 31
  %818 = xor i32 %814, %817
  %819 = add nuw nsw i32 %818, %814
  %820 = icmp eq i32 %819, 2
  %821 = zext i1 %820 to i8
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %821, i8* %822, align 1, !tbaa !2452
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 12
  %825 = load i32, i32* %EAX
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %824 to i32*
  store i32 %825, i32* %829
  %830 = load i64, i64* %PC
  %831 = sub i64 %830, 227
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %831, i64* %834, align 8, !tbaa !2428
  br label %block_400b1f

block_400b2f:                                     ; preds = %block_400b1f
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 16
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 7
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to i32*
  store i32 0, i32* %839
  br label %block_400b36

block_400b4d:                                     ; preds = %block_400b46, %block_400b5d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_400b46 ], [ %MEMORY.1, %block_400b5d ]
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 20
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 3
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i32*
  %845 = load i32, i32* %844
  %846 = zext i32 %845 to i64
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = load i64, i64* %RBP
  %848 = sub i64 %847, 8
  %849 = load i64, i64* %PC
  %850 = add i64 %849, 4
  store i64 %850, i64* %PC
  %851 = inttoptr i64 %848 to i64*
  %852 = load i64, i64* %851
  store i64 %852, i64* %RCX, align 8, !tbaa !2428
  %853 = load i32, i32* %EAX
  %854 = zext i32 %853 to i64
  %855 = load i64, i64* %RCX
  %856 = add i64 %855, 20
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 3
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  %860 = load i32, i32* %859
  %861 = sub i32 %853, %860
  %862 = icmp ult i32 %853, %860
  %863 = zext i1 %862 to i8
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %863, i8* %864, align 1, !tbaa !2434
  %865 = and i32 %861, 255
  %866 = call i32 @llvm.ctpop.i32(i32 %865) #16
  %867 = trunc i32 %866 to i8
  %868 = and i8 %867, 1
  %869 = xor i8 %868, 1
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %869, i8* %870, align 1, !tbaa !2448
  %871 = xor i32 %860, %853
  %872 = xor i32 %871, %861
  %873 = lshr i32 %872, 4
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %875, i8* %876, align 1, !tbaa !2449
  %877 = icmp eq i32 %861, 0
  %878 = zext i1 %877 to i8
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %878, i8* %879, align 1, !tbaa !2450
  %880 = lshr i32 %861, 31
  %881 = trunc i32 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %881, i8* %882, align 1, !tbaa !2451
  %883 = lshr i32 %853, 31
  %884 = lshr i32 %860, 31
  %885 = xor i32 %884, %883
  %886 = xor i32 %880, %883
  %887 = add nuw nsw i32 %886, %885
  %888 = icmp eq i32 %887, 2
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %889, i8* %890, align 1, !tbaa !2452
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 138
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 6
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 6
  store i64 %896, i64* %PC
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %898 = load i8, i8* %897, align 1, !tbaa !2451
  %899 = icmp ne i8 %898, 0
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %901 = load i8, i8* %900, align 1, !tbaa !2452
  %902 = icmp ne i8 %901, 0
  %903 = xor i1 %899, %902
  %904 = xor i1 %903, true
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %907 = select i1 %903, i64 %894, i64 %892
  store i64 %907, i64* %906, align 8, !tbaa !2428
  %908 = load i8, i8* %BRANCH_TAKEN
  %909 = icmp eq i8 %908, 1
  br i1 %909, label %block_400be1, label %block_400b5d

block_400c07:                                     ; preds = %block_400b1f
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 1
  store i64 %911, i64* %PC
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %913 = load i64, i64* %912, align 8, !tbaa !2428
  %914 = add i64 %913, 8
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %RBP, align 8, !tbaa !2428
  store i64 %914, i64* %912, align 8, !tbaa !2428
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 1
  store i64 %918, i64* %PC
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %921 = load i64, i64* %920, align 8, !tbaa !2428
  %922 = inttoptr i64 %921 to i64*
  %923 = load i64, i64* %922
  store i64 %923, i64* %919, align 8, !tbaa !2428
  %924 = add i64 %921, 8
  store i64 %924, i64* %920, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_400b1f:                                     ; preds = %block_400bf4, %block_400b10
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400b10 ], [ %MEMORY.0, %block_400bf4 ]
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 12
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 3
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i32*
  %930 = load i32, i32* %929
  %931 = zext i32 %930 to i64
  store i64 %931, i64* %RAX, align 8, !tbaa !2428
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 8
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 4
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %RCX, align 8, !tbaa !2428
  %938 = load i32, i32* %EAX
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %RCX
  %941 = add i64 %940, 12
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = sub i32 %938, %945
  %947 = icmp ult i32 %938, %945
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %948, i8* %949, align 1, !tbaa !2434
  %950 = and i32 %946, 255
  %951 = call i32 @llvm.ctpop.i32(i32 %950) #16
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %954, i8* %955, align 1, !tbaa !2448
  %956 = xor i32 %945, %938
  %957 = xor i32 %956, %946
  %958 = lshr i32 %957, 4
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2449
  %962 = icmp eq i32 %946, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2450
  %965 = lshr i32 %946, 31
  %966 = trunc i32 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2451
  %968 = lshr i32 %938, 31
  %969 = lshr i32 %945, 31
  %970 = xor i32 %969, %968
  %971 = xor i32 %965, %968
  %972 = add nuw nsw i32 %971, %970
  %973 = icmp eq i32 %972, 2
  %974 = zext i1 %973 to i8
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %974, i8* %975, align 1, !tbaa !2452
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 222
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 6
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 6
  store i64 %981, i64* %PC
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %983 = load i8, i8* %982, align 1, !tbaa !2451
  %984 = icmp ne i8 %983, 0
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %986 = load i8, i8* %985, align 1, !tbaa !2452
  %987 = icmp ne i8 %986, 0
  %988 = xor i1 %984, %987
  %989 = xor i1 %988, true
  %990 = zext i1 %989 to i8
  store i8 %990, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %992 = select i1 %988, i64 %979, i64 %977
  store i64 %992, i64* %991, align 8, !tbaa !2428
  %993 = load i8, i8* %BRANCH_TAKEN
  %994 = icmp eq i8 %993, 1
  br i1 %994, label %block_400c07, label %block_400b2f

block_400b46:                                     ; preds = %block_400b36
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 20
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 7
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i32*
  store i32 0, i32* %999
  br label %block_400b4d

block_400be1:                                     ; preds = %block_400b4d
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 5
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 5
  store i64 %1003, i64* %PC
  %1004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1001, i64* %1004, align 8, !tbaa !2428
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 16
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009
  %1011 = zext i32 %1010 to i64
  store i64 %1011, i64* %RAX, align 8, !tbaa !2428
  %1012 = load i64, i64* %RAX
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 3
  store i64 %1014, i64* %PC
  %1015 = trunc i64 %1012 to i32
  %1016 = add i32 1, %1015
  %1017 = zext i32 %1016 to i64
  store i64 %1017, i64* %RAX, align 8, !tbaa !2428
  %1018 = icmp ult i32 %1016, %1015
  %1019 = icmp ult i32 %1016, 1
  %1020 = or i1 %1018, %1019
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1021, i8* %1022, align 1, !tbaa !2434
  %1023 = and i32 %1016, 255
  %1024 = call i32 @llvm.ctpop.i32(i32 %1023) #16
  %1025 = trunc i32 %1024 to i8
  %1026 = and i8 %1025, 1
  %1027 = xor i8 %1026, 1
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1027, i8* %1028, align 1, !tbaa !2448
  %1029 = xor i64 1, %1012
  %1030 = trunc i64 %1029 to i32
  %1031 = xor i32 %1030, %1016
  %1032 = lshr i32 %1031, 4
  %1033 = trunc i32 %1032 to i8
  %1034 = and i8 %1033, 1
  %1035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1034, i8* %1035, align 1, !tbaa !2449
  %1036 = icmp eq i32 %1016, 0
  %1037 = zext i1 %1036 to i8
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1037, i8* %1038, align 1, !tbaa !2450
  %1039 = lshr i32 %1016, 31
  %1040 = trunc i32 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1040, i8* %1041, align 1, !tbaa !2451
  %1042 = lshr i32 %1015, 31
  %1043 = xor i32 %1039, %1042
  %1044 = add nuw nsw i32 %1043, %1039
  %1045 = icmp eq i32 %1044, 2
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1046, i8* %1047, align 1, !tbaa !2452
  %1048 = load i64, i64* %RBP
  %1049 = sub i64 %1048, 16
  %1050 = load i32, i32* %EAX
  %1051 = zext i32 %1050 to i64
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 3
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1049 to i32*
  store i32 %1050, i32* %1054
  %1055 = load i64, i64* %PC
  %1056 = sub i64 %1055, 185
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  store i64 %1058, i64* %PC
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1059, align 8, !tbaa !2428
  br label %block_400b36
}

; Function Attrs: noinline
define %struct.Memory* @sub_400680_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400680:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 17
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %R8D = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 17
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %R8 = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 19
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R9 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 21
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R10 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 23
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R11 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %56 to %"class.std::bitset"*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = load i64, i64* %RBP
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 1
  store i64 %61, i64* %PC
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %63 = load i64, i64* %62, align 8, !tbaa !2428
  %64 = add i64 %63, -8
  %65 = inttoptr i64 %64 to i64*
  store i64 %59, i64* %65
  store i64 %64, i64* %62, align 8, !tbaa !2428
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 7
  store i64 %71, i64* %PC
  %72 = sub i64 %69, 176
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  %73 = icmp ult i64 %69, 176
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %74, i8* %75, align 1, !tbaa !2434
  %76 = trunc i64 %72 to i32
  %77 = and i32 %76, 255
  %78 = call i32 @llvm.ctpop.i32(i32 %77) #16
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2448
  %83 = xor i64 176, %69
  %84 = xor i64 %83, %72
  %85 = lshr i64 %84, 4
  %86 = trunc i64 %85 to i8
  %87 = and i8 %86, 1
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %87, i8* %88, align 1, !tbaa !2449
  %89 = icmp eq i64 %72, 0
  %90 = zext i1 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %90, i8* %91, align 1, !tbaa !2450
  %92 = lshr i64 %72, 63
  %93 = trunc i64 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %93, i8* %94, align 1, !tbaa !2451
  %95 = lshr i64 %69, 63
  %96 = xor i64 %92, %95
  %97 = add nuw nsw i64 %96, %95
  %98 = icmp eq i64 %97, 2
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %99, i8* %100, align 1, !tbaa !2452
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 10
  store i64 %102, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 40), i64* %RAX, align 8, !tbaa !2428
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 4
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 7
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  store i32 0, i32* %107
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 8
  %110 = load i32, i32* %EDI
  %111 = zext i32 %110 to i64
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %109 to i32*
  store i32 %110, i32* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 16
  %117 = load i64, i64* %RSI
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %116 to i64*
  store i64 %117, i64* %120
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 68
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 7
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i32*
  store i32 64, i32* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 7
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  store i32 64, i32* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 60
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 7
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  store i32 128, i32* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 68
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i32*
  %141 = load i32, i32* %140
  %142 = zext i32 %141 to i64
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 48
  %145 = load i32, i32* %EDI
  %146 = zext i32 %145 to i64
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %144 to i32*
  store i32 %145, i32* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 3
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i32*
  %155 = load i32, i32* %154
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDI, align 8, !tbaa !2428
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 52
  %159 = load i32, i32* %EDI
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %158 to i32*
  store i32 %159, i32* %163
  %164 = load i64, i64* %RBP
  %165 = sub i64 %164, 60
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i32*
  %169 = load i32, i32* %168
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RDI, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 56
  %173 = load i32, i32* %EDI
  %174 = zext i32 %173 to i64
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %177
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 48
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  %183 = load i32, i32* %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 3
  store i64 %187, i64* %PC
  %188 = trunc i64 %185 to i32
  %189 = sub i32 %188, 1
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RDI, align 8, !tbaa !2428
  %191 = icmp ult i32 %188, 1
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2434
  %194 = and i32 %189, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2448
  %200 = xor i64 1, %185
  %201 = trunc i64 %200 to i32
  %202 = xor i32 %201, %189
  %203 = lshr i32 %202, 4
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2449
  %207 = icmp eq i32 %189, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2450
  %210 = lshr i32 %189, 31
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2451
  %213 = lshr i32 %188, 31
  %214 = xor i32 %210, %213
  %215 = add nuw nsw i32 %214, %213
  %216 = icmp eq i32 %215, 2
  %217 = zext i1 %216 to i8
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %217, i8* %218, align 1, !tbaa !2452
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 36
  %221 = load i32, i32* %EDI
  %222 = zext i32 %221 to i64
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %220 to i32*
  store i32 %221, i32* %225
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 52
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RDI, align 8, !tbaa !2428
  %233 = load i64, i64* %RDI
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = trunc i64 %233 to i32
  %237 = sub i32 %236, 1
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RDI, align 8, !tbaa !2428
  %239 = icmp ult i32 %236, 1
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %240, i8* %241, align 1, !tbaa !2434
  %242 = and i32 %237, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2448
  %248 = xor i64 1, %233
  %249 = trunc i64 %248 to i32
  %250 = xor i32 %249, %237
  %251 = lshr i32 %250, 4
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = icmp eq i32 %237, 0
  %256 = zext i1 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %256, i8* %257, align 1, !tbaa !2450
  %258 = lshr i32 %237, 31
  %259 = trunc i32 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %259, i8* %260, align 1, !tbaa !2451
  %261 = lshr i32 %236, 31
  %262 = xor i32 %258, %261
  %263 = add nuw nsw i32 %262, %261
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2452
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 40
  %269 = load i32, i32* %EDI
  %270 = zext i32 %269 to i64
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 3
  store i64 %272, i64* %PC
  %273 = inttoptr i64 %268 to i32*
  store i32 %269, i32* %273
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 56
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 3
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to i32*
  %279 = load i32, i32* %278
  %280 = zext i32 %279 to i64
  store i64 %280, i64* %RDI, align 8, !tbaa !2428
  %281 = load i64, i64* %RDI
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = trunc i64 %281 to i32
  %285 = sub i32 %284, 1
  %286 = zext i32 %285 to i64
  store i64 %286, i64* %RDI, align 8, !tbaa !2428
  %287 = icmp ult i32 %284, 1
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %288, i8* %289, align 1, !tbaa !2434
  %290 = and i32 %285, 255
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %294, i8* %295, align 1, !tbaa !2448
  %296 = xor i64 1, %281
  %297 = trunc i64 %296 to i32
  %298 = xor i32 %297, %285
  %299 = lshr i32 %298, 4
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %301, i8* %302, align 1, !tbaa !2449
  %303 = icmp eq i32 %285, 0
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %304, i8* %305, align 1, !tbaa !2450
  %306 = lshr i32 %285, 31
  %307 = trunc i32 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %307, i8* %308, align 1, !tbaa !2451
  %309 = lshr i32 %284, 31
  %310 = xor i32 %306, %309
  %311 = add nuw nsw i32 %310, %309
  %312 = icmp eq i32 %311, 2
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %313, i8* %314, align 1, !tbaa !2452
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 44
  %317 = load i32, i32* %EDI
  %318 = zext i32 %317 to i64
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %316 to i32*
  store i32 %317, i32* %321
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 48
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RSI, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 52
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 3
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i32*
  %334 = load i32, i32* %333
  %335 = zext i32 %334 to i64
  store i64 %335, i64* %RDX, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 56
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RCX, align 8, !tbaa !2428
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  store i64 %343, i64* %RDI, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 2
  store i64 %347, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2455
  %348 = load i64, i64* %PC
  %349 = sub i64 %348, 435
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 5
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %355 = load i64, i64* %354, align 8, !tbaa !2428
  %356 = add i64 %355, -8
  %357 = inttoptr i64 %356 to i64*
  store i64 %351, i64* %357
  store i64 %356, i64* %354, align 8, !tbaa !2428
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %349, i64* %358, align 8, !tbaa !2428
  %359 = load i64, i64* %PC
  %360 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %359, %struct.Memory* %2)
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 10
  store i64 %362, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 74), i64* %RDI, align 8, !tbaa !2428
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 36
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 3
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367
  %369 = zext i32 %368 to i64
  store i64 %369, i64* %RSI, align 8, !tbaa !2428
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 40
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %RDX, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 44
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RCX, align 8, !tbaa !2428
  %384 = load i64, i64* %RBP
  %385 = sub i64 %384, 108
  %386 = load i32, i32* %EAX
  %387 = zext i32 %386 to i64
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 3
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %385 to i32*
  store i32 %386, i32* %390
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 2
  store i64 %392, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2455
  %393 = load i64, i64* %PC
  %394 = sub i64 %393, 464
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 5
  store i64 %398, i64* %PC
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %400 = load i64, i64* %399, align 8, !tbaa !2428
  %401 = add i64 %400, -8
  %402 = inttoptr i64 %401 to i64*
  store i64 %396, i64* %402
  store i64 %401, i64* %399, align 8, !tbaa !2428
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %394, i64* %403, align 8, !tbaa !2428
  %404 = load i64, i64* %PC
  %405 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %404, %struct.Memory* %360)
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 10
  store i64 %407, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 48
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RDX, align 8, !tbaa !2428
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 52
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 3
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to i32*
  %422 = load i32, i32* %421
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RCX, align 8, !tbaa !2428
  %424 = bitcast i32* %R8D to i64*
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 56
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = zext i32 %430 to i64
  store i64 %431, i64* %424, align 8, !tbaa !2428
  %432 = load i64, i64* %RBP
  %433 = sub i64 %432, 112
  %434 = load i32, i32* %EAX
  %435 = zext i32 %434 to i64
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 3
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %433 to i32*
  store i32 %434, i32* %438
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 847
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 5
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 5
  store i64 %444, i64* %PC
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %446 = load i64, i64* %445, align 8, !tbaa !2428
  %447 = add i64 %446, -8
  %448 = inttoptr i64 %447 to i64*
  store i64 %442, i64* %448
  store i64 %447, i64* %445, align 8, !tbaa !2428
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %440, i64* %449, align 8, !tbaa !2428
  %450 = load i64, i64* %PC
  %451 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %450, %struct.Memory* %405)
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 10
  store i64 %453, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 5
  store i64 %455, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 48
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 3
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i32*
  %461 = load i32, i32* %460
  %462 = zext i32 %461 to i64
  store i64 %462, i64* %RDX, align 8, !tbaa !2428
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 52
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 3
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i32*
  %468 = load i32, i32* %467
  %469 = zext i32 %468 to i64
  store i64 %469, i64* %RCX, align 8, !tbaa !2428
  %470 = bitcast i32* %R8D to i64*
  %471 = load i64, i64* %RBP
  %472 = sub i64 %471, 56
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = zext i32 %476 to i64
  store i64 %477, i64* %470, align 8, !tbaa !2428
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 116
  %480 = load i32, i32* %EAX
  %481 = zext i32 %480 to i64
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %479 to i32*
  store i32 %480, i32* %484
  %485 = load i64, i64* %PC
  %486 = add i64 %485, 814
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 5
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %492 = load i64, i64* %491, align 8, !tbaa !2428
  %493 = add i64 %492, -8
  %494 = inttoptr i64 %493 to i64*
  store i64 %488, i64* %494
  store i64 %493, i64* %491, align 8, !tbaa !2428
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %486, i64* %495, align 8, !tbaa !2428
  %496 = load i64, i64* %PC
  %497 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %496, %struct.Memory* %451)
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 10
  store i64 %499, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 5
  store i64 %501, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %502 = load i64, i64* %RBP
  %503 = sub i64 %502, 48
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 3
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %503 to i32*
  %507 = load i32, i32* %506
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RDX, align 8, !tbaa !2428
  %509 = load i64, i64* %RBP
  %510 = sub i64 %509, 52
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 3
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i32*
  %514 = load i32, i32* %513
  %515 = zext i32 %514 to i64
  store i64 %515, i64* %RCX, align 8, !tbaa !2428
  %516 = bitcast i32* %R8D to i64*
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 56
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 4
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %516, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 120
  %526 = load i32, i32* %EAX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %530
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 781
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  store i64 %536, i64* %PC
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %538 = load i64, i64* %537, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %534, i64* %540
  store i64 %539, i64* %537, align 8, !tbaa !2428
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %541, align 8, !tbaa !2428
  %542 = load i64, i64* %PC
  %543 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %542, %struct.Memory* %497)
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 10
  store i64 %545, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 5
  store i64 %547, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 48
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 3
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = zext i32 %553 to i64
  store i64 %554, i64* %RDX, align 8, !tbaa !2428
  %555 = load i64, i64* %RBP
  %556 = sub i64 %555, 52
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %556 to i32*
  %560 = load i32, i32* %559
  %561 = zext i32 %560 to i64
  store i64 %561, i64* %RCX, align 8, !tbaa !2428
  %562 = bitcast i32* %R8D to i64*
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 56
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %562, align 8, !tbaa !2428
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 124
  %572 = load i32, i32* %EAX
  %573 = zext i32 %572 to i64
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %571 to i32*
  store i32 %572, i32* %576
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 748
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 5
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 5
  store i64 %582, i64* %PC
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %584 = load i64, i64* %583, align 8, !tbaa !2428
  %585 = add i64 %584, -8
  %586 = inttoptr i64 %585 to i64*
  store i64 %580, i64* %586
  store i64 %585, i64* %583, align 8, !tbaa !2428
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %578, i64* %587, align 8, !tbaa !2428
  %588 = load i64, i64* %PC
  %589 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %588, %struct.Memory* %543)
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 10
  store i64 %591, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 5
  store i64 %593, i64* %PC
  store i64 4, i64* %RSI, align 8, !tbaa !2428
  %594 = load i64, i64* %RBP
  %595 = sub i64 %594, 48
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i32*
  %599 = load i32, i32* %598
  %600 = zext i32 %599 to i64
  store i64 %600, i64* %RDX, align 8, !tbaa !2428
  %601 = load i64, i64* %RBP
  %602 = sub i64 %601, 52
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 3
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %602 to i32*
  %606 = load i32, i32* %605
  %607 = zext i32 %606 to i64
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = bitcast i32* %R8D to i64*
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 56
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i32*
  %614 = load i32, i32* %613
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %608, align 8, !tbaa !2428
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 128
  %618 = load i32, i32* %EAX
  %619 = zext i32 %618 to i64
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %617 to i32*
  store i32 %618, i32* %622
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 715
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %630 = load i64, i64* %629, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %626, i64* %632
  store i64 %631, i64* %629, align 8, !tbaa !2428
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %633, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %634, %struct.Memory* %589)
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 10
  store i64 %637, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %640 = load i64, i64* %RBP
  %641 = sub i64 %640, 48
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 3
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i32*
  %645 = load i32, i32* %644
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RDX, align 8, !tbaa !2428
  %647 = load i64, i64* %RBP
  %648 = sub i64 %647, 52
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 3
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i32*
  %652 = load i32, i32* %651
  %653 = zext i32 %652 to i64
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = bitcast i32* %R8D to i64*
  %655 = load i64, i64* %RBP
  %656 = sub i64 %655, 56
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %656 to i32*
  %660 = load i32, i32* %659
  %661 = zext i32 %660 to i64
  store i64 %661, i64* %654, align 8, !tbaa !2428
  %662 = load i64, i64* %RBP
  %663 = sub i64 %662, 132
  %664 = load i32, i32* %EAX
  %665 = zext i32 %664 to i64
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 6
  store i64 %667, i64* %PC
  %668 = inttoptr i64 %663 to i32*
  store i32 %664, i32* %668
  %669 = load i64, i64* %PC
  %670 = add i64 %669, 679
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %676 = load i64, i64* %675, align 8, !tbaa !2428
  %677 = add i64 %676, -8
  %678 = inttoptr i64 %677 to i64*
  store i64 %672, i64* %678
  store i64 %677, i64* %675, align 8, !tbaa !2428
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %670, i64* %679, align 8, !tbaa !2428
  %680 = load i64, i64* %PC
  %681 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %680, %struct.Memory* %635)
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 10
  store i64 %683, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 5
  store i64 %685, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %686 = load i64, i64* %RBP
  %687 = sub i64 %686, 48
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %687 to i32*
  %691 = load i32, i32* %690
  %692 = zext i32 %691 to i64
  store i64 %692, i64* %RDX, align 8, !tbaa !2428
  %693 = load i64, i64* %RBP
  %694 = sub i64 %693, 52
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %694 to i32*
  %698 = load i32, i32* %697
  %699 = zext i32 %698 to i64
  store i64 %699, i64* %RCX, align 8, !tbaa !2428
  %700 = bitcast i32* %R8D to i64*
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 56
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i32*
  %706 = load i32, i32* %705
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %700, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 136
  %710 = load i32, i32* %EAX
  %711 = zext i32 %710 to i64
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 6
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %709 to i32*
  store i32 %710, i32* %714
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 643
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 5
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %722 = load i64, i64* %721, align 8, !tbaa !2428
  %723 = add i64 %722, -8
  %724 = inttoptr i64 %723 to i64*
  store i64 %718, i64* %724
  store i64 %723, i64* %721, align 8, !tbaa !2428
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %716, i64* %725, align 8, !tbaa !2428
  %726 = load i64, i64* %PC
  %727 = call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %726, %struct.Memory* %681)
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 10
  store i64 %729, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 140
  %732 = load i32, i32* %EAX
  %733 = zext i32 %732 to i64
  %734 = load i64, i64* %PC
  %735 = add i64 %734, 6
  store i64 %735, i64* %PC
  %736 = inttoptr i64 %731 to i32*
  store i32 %732, i32* %736
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 766
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 5
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  store i64 %742, i64* %PC
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %744 = load i64, i64* %743, align 8, !tbaa !2428
  %745 = add i64 %744, -8
  %746 = inttoptr i64 %745 to i64*
  store i64 %740, i64* %746
  store i64 %745, i64* %743, align 8, !tbaa !2428
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %738, i64* %747, align 8, !tbaa !2428
  %748 = load i64, i64* %PC
  %749 = call %struct.Memory* @sub_400b10_mat_set_init(%struct.State* %0, i64 %748, %struct.Memory* %727)
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 10
  store i64 %751, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %RSI
  %753 = load i32, i32* %ESI
  %754 = zext i32 %753 to i64
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 2
  store i64 %756, i64* %PC
  %757 = xor i64 %754, %752
  %758 = trunc i64 %757 to i32
  %759 = and i64 %757, 4294967295
  store i64 %759, i64* %RSI, align 8, !tbaa !2428
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %760, align 1, !tbaa !2434
  %761 = and i32 %758, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #16
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2448
  %767 = icmp eq i32 %758, 0
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %768, i8* %769, align 1, !tbaa !2450
  %770 = lshr i32 %758, 31
  %771 = trunc i32 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %771, i8* %772, align 1, !tbaa !2451
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %773, align 1, !tbaa !2452
  %774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %774, align 1, !tbaa !2449
  %775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 8
  store i64 %777, i64* %PC
  %778 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %779 = bitcast i8* %775 to float*
  store float %778, float* %779, align 1, !tbaa !2453
  %780 = getelementptr inbounds i8, i8* %775, i64 4
  %781 = bitcast i8* %780 to float*
  store float 0.000000e+00, float* %781, align 1, !tbaa !2453
  %782 = getelementptr inbounds i8, i8* %775, i64 8
  %783 = bitcast i8* %782 to float*
  store float 0.000000e+00, float* %783, align 1, !tbaa !2453
  %784 = getelementptr inbounds i8, i8* %775, i64 12
  %785 = bitcast i8* %784 to float*
  store float 0.000000e+00, float* %785, align 1, !tbaa !2453
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 997
  %788 = load i64, i64* %PC
  %789 = add i64 %788, 5
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %793 = load i64, i64* %792, align 8, !tbaa !2428
  %794 = add i64 %793, -8
  %795 = inttoptr i64 %794 to i64*
  store i64 %789, i64* %795
  store i64 %794, i64* %792, align 8, !tbaa !2428
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %787, i64* %796, align 8, !tbaa !2428
  %797 = load i64, i64* %PC
  %798 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %797, %struct.Memory* %749)
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 10
  store i64 %800, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %801 = load i64, i64* %RSI
  %802 = load i32, i32* %ESI
  %803 = zext i32 %802 to i64
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 2
  store i64 %805, i64* %PC
  %806 = xor i64 %803, %801
  %807 = trunc i64 %806 to i32
  %808 = and i64 %806, 4294967295
  store i64 %808, i64* %RSI, align 8, !tbaa !2428
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %809, align 1, !tbaa !2434
  %810 = and i32 %807, 255
  %811 = call i32 @llvm.ctpop.i32(i32 %810) #16
  %812 = trunc i32 %811 to i8
  %813 = and i8 %812, 1
  %814 = xor i8 %813, 1
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %814, i8* %815, align 1, !tbaa !2448
  %816 = icmp eq i32 %807, 0
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %817, i8* %818, align 1, !tbaa !2450
  %819 = lshr i32 %807, 31
  %820 = trunc i32 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %820, i8* %821, align 1, !tbaa !2451
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %822, align 1, !tbaa !2452
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %823, align 1, !tbaa !2449
  %824 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %825 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %826 = bitcast %union.vec128_t* %XMM0 to i8*
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 3
  store i64 %828, i64* %PC
  %829 = bitcast i8* %825 to i64*
  %830 = load i64, i64* %829, align 1
  %831 = getelementptr inbounds i8, i8* %825, i64 8
  %832 = bitcast i8* %831 to i64*
  %833 = load i64, i64* %832, align 1
  %834 = bitcast i8* %826 to i64*
  %835 = load i64, i64* %834, align 1
  %836 = getelementptr inbounds i8, i8* %826, i64 8
  %837 = bitcast i8* %836 to i64*
  %838 = load i64, i64* %837, align 1
  %839 = xor i64 %835, %830
  %840 = xor i64 %838, %833
  %841 = trunc i64 %839 to i32
  %842 = lshr i64 %839, 32
  %843 = trunc i64 %842 to i32
  %844 = bitcast i8* %824 to i32*
  store i32 %841, i32* %844, align 1, !tbaa !2456
  %845 = getelementptr inbounds i8, i8* %824, i64 4
  %846 = bitcast i8* %845 to i32*
  store i32 %843, i32* %846, align 1, !tbaa !2456
  %847 = trunc i64 %840 to i32
  %848 = getelementptr inbounds i8, i8* %824, i64 8
  %849 = bitcast i8* %848 to i32*
  store i32 %847, i32* %849, align 1, !tbaa !2456
  %850 = lshr i64 %840, 32
  %851 = trunc i64 %850 to i32
  %852 = getelementptr inbounds i8, i8* %824, i64 12
  %853 = bitcast i8* %852 to i32*
  store i32 %851, i32* %853, align 1, !tbaa !2456
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 977
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 5
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 5
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %861 = load i64, i64* %860, align 8, !tbaa !2428
  %862 = add i64 %861, -8
  %863 = inttoptr i64 %862 to i64*
  store i64 %857, i64* %863
  store i64 %862, i64* %860, align 8, !tbaa !2428
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %855, i64* %864, align 8, !tbaa !2428
  %865 = load i64, i64* %PC
  %866 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %865, %struct.Memory* %798)
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 10
  store i64 %868, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %869 = load i64, i64* %RSI
  %870 = load i32, i32* %ESI
  %871 = zext i32 %870 to i64
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 2
  store i64 %873, i64* %PC
  %874 = xor i64 %871, %869
  %875 = trunc i64 %874 to i32
  %876 = and i64 %874, 4294967295
  store i64 %876, i64* %RSI, align 8, !tbaa !2428
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %877, align 1, !tbaa !2434
  %878 = and i32 %875, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2448
  %884 = icmp eq i32 %875, 0
  %885 = zext i1 %884 to i8
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %885, i8* %886, align 1, !tbaa !2450
  %887 = lshr i32 %875, 31
  %888 = trunc i32 %887 to i8
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %888, i8* %889, align 1, !tbaa !2451
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %890, align 1, !tbaa !2452
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %891, align 1, !tbaa !2449
  %892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %894 = bitcast %union.vec128_t* %XMM0 to i8*
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 3
  store i64 %896, i64* %PC
  %897 = bitcast i8* %893 to i64*
  %898 = load i64, i64* %897, align 1
  %899 = getelementptr inbounds i8, i8* %893, i64 8
  %900 = bitcast i8* %899 to i64*
  %901 = load i64, i64* %900, align 1
  %902 = bitcast i8* %894 to i64*
  %903 = load i64, i64* %902, align 1
  %904 = getelementptr inbounds i8, i8* %894, i64 8
  %905 = bitcast i8* %904 to i64*
  %906 = load i64, i64* %905, align 1
  %907 = xor i64 %903, %898
  %908 = xor i64 %906, %901
  %909 = trunc i64 %907 to i32
  %910 = lshr i64 %907, 32
  %911 = trunc i64 %910 to i32
  %912 = bitcast i8* %892 to i32*
  store i32 %909, i32* %912, align 1, !tbaa !2456
  %913 = getelementptr inbounds i8, i8* %892, i64 4
  %914 = bitcast i8* %913 to i32*
  store i32 %911, i32* %914, align 1, !tbaa !2456
  %915 = trunc i64 %908 to i32
  %916 = getelementptr inbounds i8, i8* %892, i64 8
  %917 = bitcast i8* %916 to i32*
  store i32 %915, i32* %917, align 1, !tbaa !2456
  %918 = lshr i64 %908, 32
  %919 = trunc i64 %918 to i32
  %920 = getelementptr inbounds i8, i8* %892, i64 12
  %921 = bitcast i8* %920 to i32*
  store i32 %919, i32* %921, align 1, !tbaa !2456
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 957
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 5
  %926 = load i64, i64* %PC
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %929 = load i64, i64* %928, align 8, !tbaa !2428
  %930 = add i64 %929, -8
  %931 = inttoptr i64 %930 to i64*
  store i64 %925, i64* %931
  store i64 %930, i64* %928, align 8, !tbaa !2428
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %923, i64* %932, align 8, !tbaa !2428
  %933 = load i64, i64* %PC
  %934 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %933, %struct.Memory* %866)
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 10
  store i64 %936, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %937 = load i64, i64* %RSI
  %938 = load i32, i32* %ESI
  %939 = zext i32 %938 to i64
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 2
  store i64 %941, i64* %PC
  %942 = xor i64 %939, %937
  %943 = trunc i64 %942 to i32
  %944 = and i64 %942, 4294967295
  store i64 %944, i64* %RSI, align 8, !tbaa !2428
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %945, align 1, !tbaa !2434
  %946 = and i32 %943, 255
  %947 = call i32 @llvm.ctpop.i32(i32 %946) #16
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  %951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %950, i8* %951, align 1, !tbaa !2448
  %952 = icmp eq i32 %943, 0
  %953 = zext i1 %952 to i8
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %953, i8* %954, align 1, !tbaa !2450
  %955 = lshr i32 %943, 31
  %956 = trunc i32 %955 to i8
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %956, i8* %957, align 1, !tbaa !2451
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %958, align 1, !tbaa !2452
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %959, align 1, !tbaa !2449
  %960 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %961 = load i64, i64* %PC
  %962 = add i64 %961, 8
  store i64 %962, i64* %PC
  %963 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %964 = bitcast i8* %960 to float*
  store float %963, float* %964, align 1, !tbaa !2453
  %965 = getelementptr inbounds i8, i8* %960, i64 4
  %966 = bitcast i8* %965 to float*
  store float 0.000000e+00, float* %966, align 1, !tbaa !2453
  %967 = getelementptr inbounds i8, i8* %960, i64 8
  %968 = bitcast i8* %967 to float*
  store float 0.000000e+00, float* %968, align 1, !tbaa !2453
  %969 = getelementptr inbounds i8, i8* %960, i64 12
  %970 = bitcast i8* %969 to float*
  store float 0.000000e+00, float* %970, align 1, !tbaa !2453
  %971 = load i64, i64* %PC
  %972 = add i64 %971, 932
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 5
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 5
  store i64 %976, i64* %PC
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %978 = load i64, i64* %977, align 8, !tbaa !2428
  %979 = add i64 %978, -8
  %980 = inttoptr i64 %979 to i64*
  store i64 %974, i64* %980
  store i64 %979, i64* %977, align 8, !tbaa !2428
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %972, i64* %981, align 8, !tbaa !2428
  %982 = load i64, i64* %PC
  %983 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %982, %struct.Memory* %934)
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 10
  store i64 %985, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  store i64 %987, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 8
  store i64 %990, i64* %PC
  %991 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %992 = bitcast i8* %988 to float*
  store float %991, float* %992, align 1, !tbaa !2453
  %993 = getelementptr inbounds i8, i8* %988, i64 4
  %994 = bitcast i8* %993 to float*
  store float 0.000000e+00, float* %994, align 1, !tbaa !2453
  %995 = getelementptr inbounds i8, i8* %988, i64 8
  %996 = bitcast i8* %995 to float*
  store float 0.000000e+00, float* %996, align 1, !tbaa !2453
  %997 = getelementptr inbounds i8, i8* %988, i64 12
  %998 = bitcast i8* %997 to float*
  store float 0.000000e+00, float* %998, align 1, !tbaa !2453
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 904
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 5
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 5
  store i64 %1004, i64* %PC
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1006 = load i64, i64* %1005, align 8, !tbaa !2428
  %1007 = add i64 %1006, -8
  %1008 = inttoptr i64 %1007 to i64*
  store i64 %1002, i64* %1008
  store i64 %1007, i64* %1005, align 8, !tbaa !2428
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1000, i64* %1009, align 8, !tbaa !2428
  %1010 = load i64, i64* %PC
  %1011 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1010, %struct.Memory* %983)
  %1012 = load i64, i64* %PC
  %1013 = add i64 %1012, 10
  store i64 %1013, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 5
  store i64 %1015, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1016 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1017 = load i64, i64* %PC
  %1018 = add i64 %1017, 8
  store i64 %1018, i64* %PC
  %1019 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %1020 = bitcast i8* %1016 to float*
  store float %1019, float* %1020, align 1, !tbaa !2453
  %1021 = getelementptr inbounds i8, i8* %1016, i64 4
  %1022 = bitcast i8* %1021 to float*
  store float 0.000000e+00, float* %1022, align 1, !tbaa !2453
  %1023 = getelementptr inbounds i8, i8* %1016, i64 8
  %1024 = bitcast i8* %1023 to float*
  store float 0.000000e+00, float* %1024, align 1, !tbaa !2453
  %1025 = getelementptr inbounds i8, i8* %1016, i64 12
  %1026 = bitcast i8* %1025 to float*
  store float 0.000000e+00, float* %1026, align 1, !tbaa !2453
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 876
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 5
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 5
  store i64 %1032, i64* %PC
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1034 = load i64, i64* %1033, align 8, !tbaa !2428
  %1035 = add i64 %1034, -8
  %1036 = inttoptr i64 %1035 to i64*
  store i64 %1030, i64* %1036
  store i64 %1035, i64* %1033, align 8, !tbaa !2428
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1028, i64* %1037, align 8, !tbaa !2428
  %1038 = load i64, i64* %PC
  %1039 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1038, %struct.Memory* %1011)
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 10
  store i64 %1041, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 5
  store i64 %1043, i64* %PC
  store i64 3, i64* %RSI, align 8, !tbaa !2428
  %1044 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 8
  store i64 %1046, i64* %PC
  %1047 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 8) to float*)
  %1048 = bitcast i8* %1044 to float*
  store float %1047, float* %1048, align 1, !tbaa !2453
  %1049 = getelementptr inbounds i8, i8* %1044, i64 4
  %1050 = bitcast i8* %1049 to float*
  store float 0.000000e+00, float* %1050, align 1, !tbaa !2453
  %1051 = getelementptr inbounds i8, i8* %1044, i64 8
  %1052 = bitcast i8* %1051 to float*
  store float 0.000000e+00, float* %1052, align 1, !tbaa !2453
  %1053 = getelementptr inbounds i8, i8* %1044, i64 12
  %1054 = bitcast i8* %1053 to float*
  store float 0.000000e+00, float* %1054, align 1, !tbaa !2453
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 848
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  %1059 = load i64, i64* %PC
  %1060 = add i64 %1059, 5
  store i64 %1060, i64* %PC
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1062 = load i64, i64* %1061, align 8, !tbaa !2428
  %1063 = add i64 %1062, -8
  %1064 = inttoptr i64 %1063 to i64*
  store i64 %1058, i64* %1064
  store i64 %1063, i64* %1061, align 8, !tbaa !2428
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1065, align 8, !tbaa !2428
  %1066 = load i64, i64* %PC
  %1067 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1066, %struct.Memory* %1039)
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 10
  store i64 %1069, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1070 = load i64, i64* %RSI
  %1071 = load i32, i32* %ESI
  %1072 = zext i32 %1071 to i64
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 2
  store i64 %1074, i64* %PC
  %1075 = xor i64 %1072, %1070
  %1076 = trunc i64 %1075 to i32
  %1077 = and i64 %1075, 4294967295
  store i64 %1077, i64* %RSI, align 8, !tbaa !2428
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1078, align 1, !tbaa !2434
  %1079 = and i32 %1076, 255
  %1080 = call i32 @llvm.ctpop.i32(i32 %1079) #16
  %1081 = trunc i32 %1080 to i8
  %1082 = and i8 %1081, 1
  %1083 = xor i8 %1082, 1
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1083, i8* %1084, align 1, !tbaa !2448
  %1085 = icmp eq i32 %1076, 0
  %1086 = zext i1 %1085 to i8
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1086, i8* %1087, align 1, !tbaa !2450
  %1088 = lshr i32 %1076, 31
  %1089 = trunc i32 %1088 to i8
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1089, i8* %1090, align 1, !tbaa !2451
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1091, align 1, !tbaa !2452
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1092, align 1, !tbaa !2449
  %1093 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1094 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1095 = bitcast %union.vec128_t* %XMM0 to i8*
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 3
  store i64 %1097, i64* %PC
  %1098 = bitcast i8* %1094 to i64*
  %1099 = load i64, i64* %1098, align 1
  %1100 = getelementptr inbounds i8, i8* %1094, i64 8
  %1101 = bitcast i8* %1100 to i64*
  %1102 = load i64, i64* %1101, align 1
  %1103 = bitcast i8* %1095 to i64*
  %1104 = load i64, i64* %1103, align 1
  %1105 = getelementptr inbounds i8, i8* %1095, i64 8
  %1106 = bitcast i8* %1105 to i64*
  %1107 = load i64, i64* %1106, align 1
  %1108 = xor i64 %1104, %1099
  %1109 = xor i64 %1107, %1102
  %1110 = trunc i64 %1108 to i32
  %1111 = lshr i64 %1108, 32
  %1112 = trunc i64 %1111 to i32
  %1113 = bitcast i8* %1093 to i32*
  store i32 %1110, i32* %1113, align 1, !tbaa !2456
  %1114 = getelementptr inbounds i8, i8* %1093, i64 4
  %1115 = bitcast i8* %1114 to i32*
  store i32 %1112, i32* %1115, align 1, !tbaa !2456
  %1116 = trunc i64 %1109 to i32
  %1117 = getelementptr inbounds i8, i8* %1093, i64 8
  %1118 = bitcast i8* %1117 to i32*
  store i32 %1116, i32* %1118, align 1, !tbaa !2456
  %1119 = lshr i64 %1109, 32
  %1120 = trunc i64 %1119 to i32
  %1121 = getelementptr inbounds i8, i8* %1093, i64 12
  %1122 = bitcast i8* %1121 to i32*
  store i32 %1120, i32* %1122, align 1, !tbaa !2456
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 828
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 5
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 5
  store i64 %1128, i64* %PC
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1130 = load i64, i64* %1129, align 8, !tbaa !2428
  %1131 = add i64 %1130, -8
  %1132 = inttoptr i64 %1131 to i64*
  store i64 %1126, i64* %1132
  store i64 %1131, i64* %1129, align 8, !tbaa !2428
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1124, i64* %1133, align 8, !tbaa !2428
  %1134 = load i64, i64* %PC
  %1135 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1134, %struct.Memory* %1067)
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 10
  store i64 %1137, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 5
  store i64 %1139, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1140 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1141 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1142 = bitcast %union.vec128_t* %XMM0 to i8*
  %1143 = load i64, i64* %PC
  %1144 = add i64 %1143, 3
  store i64 %1144, i64* %PC
  %1145 = bitcast i8* %1141 to i64*
  %1146 = load i64, i64* %1145, align 1
  %1147 = getelementptr inbounds i8, i8* %1141, i64 8
  %1148 = bitcast i8* %1147 to i64*
  %1149 = load i64, i64* %1148, align 1
  %1150 = bitcast i8* %1142 to i64*
  %1151 = load i64, i64* %1150, align 1
  %1152 = getelementptr inbounds i8, i8* %1142, i64 8
  %1153 = bitcast i8* %1152 to i64*
  %1154 = load i64, i64* %1153, align 1
  %1155 = xor i64 %1151, %1146
  %1156 = xor i64 %1154, %1149
  %1157 = trunc i64 %1155 to i32
  %1158 = lshr i64 %1155, 32
  %1159 = trunc i64 %1158 to i32
  %1160 = bitcast i8* %1140 to i32*
  store i32 %1157, i32* %1160, align 1, !tbaa !2456
  %1161 = getelementptr inbounds i8, i8* %1140, i64 4
  %1162 = bitcast i8* %1161 to i32*
  store i32 %1159, i32* %1162, align 1, !tbaa !2456
  %1163 = trunc i64 %1156 to i32
  %1164 = getelementptr inbounds i8, i8* %1140, i64 8
  %1165 = bitcast i8* %1164 to i32*
  store i32 %1163, i32* %1165, align 1, !tbaa !2456
  %1166 = lshr i64 %1156, 32
  %1167 = trunc i64 %1166 to i32
  %1168 = getelementptr inbounds i8, i8* %1140, i64 12
  %1169 = bitcast i8* %1168 to i32*
  store i32 %1167, i32* %1169, align 1, !tbaa !2456
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 805
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  %1174 = load i64, i64* %PC
  %1175 = add i64 %1174, 5
  store i64 %1175, i64* %PC
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1177 = load i64, i64* %1176, align 8, !tbaa !2428
  %1178 = add i64 %1177, -8
  %1179 = inttoptr i64 %1178 to i64*
  store i64 %1173, i64* %1179
  store i64 %1178, i64* %1176, align 8, !tbaa !2428
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1171, i64* %1180, align 8, !tbaa !2428
  %1181 = load i64, i64* %PC
  %1182 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1181, %struct.Memory* %1135)
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 10
  store i64 %1184, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 5
  store i64 %1186, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1187 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1189 = bitcast %union.vec128_t* %XMM0 to i8*
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 3
  store i64 %1191, i64* %PC
  %1192 = bitcast i8* %1188 to i64*
  %1193 = load i64, i64* %1192, align 1
  %1194 = getelementptr inbounds i8, i8* %1188, i64 8
  %1195 = bitcast i8* %1194 to i64*
  %1196 = load i64, i64* %1195, align 1
  %1197 = bitcast i8* %1189 to i64*
  %1198 = load i64, i64* %1197, align 1
  %1199 = getelementptr inbounds i8, i8* %1189, i64 8
  %1200 = bitcast i8* %1199 to i64*
  %1201 = load i64, i64* %1200, align 1
  %1202 = xor i64 %1198, %1193
  %1203 = xor i64 %1201, %1196
  %1204 = trunc i64 %1202 to i32
  %1205 = lshr i64 %1202, 32
  %1206 = trunc i64 %1205 to i32
  %1207 = bitcast i8* %1187 to i32*
  store i32 %1204, i32* %1207, align 1, !tbaa !2456
  %1208 = getelementptr inbounds i8, i8* %1187, i64 4
  %1209 = bitcast i8* %1208 to i32*
  store i32 %1206, i32* %1209, align 1, !tbaa !2456
  %1210 = trunc i64 %1203 to i32
  %1211 = getelementptr inbounds i8, i8* %1187, i64 8
  %1212 = bitcast i8* %1211 to i32*
  store i32 %1210, i32* %1212, align 1, !tbaa !2456
  %1213 = lshr i64 %1203, 32
  %1214 = trunc i64 %1213 to i32
  %1215 = getelementptr inbounds i8, i8* %1187, i64 12
  %1216 = bitcast i8* %1215 to i32*
  store i32 %1214, i32* %1216, align 1, !tbaa !2456
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 782
  %1219 = load i64, i64* %PC
  %1220 = add i64 %1219, 5
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1224 = load i64, i64* %1223, align 8, !tbaa !2428
  %1225 = add i64 %1224, -8
  %1226 = inttoptr i64 %1225 to i64*
  store i64 %1220, i64* %1226
  store i64 %1225, i64* %1223, align 8, !tbaa !2428
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1218, i64* %1227, align 8, !tbaa !2428
  %1228 = load i64, i64* %PC
  %1229 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1228, %struct.Memory* %1182)
  %1230 = load i64, i64* %PC
  %1231 = add i64 %1230, 10
  store i64 %1231, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1232 = load i64, i64* %RSI
  %1233 = load i32, i32* %ESI
  %1234 = zext i32 %1233 to i64
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 2
  store i64 %1236, i64* %PC
  %1237 = xor i64 %1234, %1232
  %1238 = trunc i64 %1237 to i32
  %1239 = and i64 %1237, 4294967295
  store i64 %1239, i64* %RSI, align 8, !tbaa !2428
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1240, align 1, !tbaa !2434
  %1241 = and i32 %1238, 255
  %1242 = call i32 @llvm.ctpop.i32(i32 %1241) #16
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = xor i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1245, i8* %1246, align 1, !tbaa !2448
  %1247 = icmp eq i32 %1238, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2450
  %1250 = lshr i32 %1238, 31
  %1251 = trunc i32 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2451
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1253, align 1, !tbaa !2452
  %1254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1254, align 1, !tbaa !2449
  %1255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1256 = load i64, i64* %PC
  %1257 = add i64 %1256, 8
  store i64 %1257, i64* %PC
  %1258 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %1259 = bitcast i8* %1255 to float*
  store float %1258, float* %1259, align 1, !tbaa !2453
  %1260 = getelementptr inbounds i8, i8* %1255, i64 4
  %1261 = bitcast i8* %1260 to float*
  store float 0.000000e+00, float* %1261, align 1, !tbaa !2453
  %1262 = getelementptr inbounds i8, i8* %1255, i64 8
  %1263 = bitcast i8* %1262 to float*
  store float 0.000000e+00, float* %1263, align 1, !tbaa !2453
  %1264 = getelementptr inbounds i8, i8* %1255, i64 12
  %1265 = bitcast i8* %1264 to float*
  store float 0.000000e+00, float* %1265, align 1, !tbaa !2453
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 757
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 5
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1273 = load i64, i64* %1272, align 8, !tbaa !2428
  %1274 = add i64 %1273, -8
  %1275 = inttoptr i64 %1274 to i64*
  store i64 %1269, i64* %1275
  store i64 %1274, i64* %1272, align 8, !tbaa !2428
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1267, i64* %1276, align 8, !tbaa !2428
  %1277 = load i64, i64* %PC
  %1278 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1277, %struct.Memory* %1229)
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 10
  store i64 %1280, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1281 = load i64, i64* %PC
  %1282 = add i64 %1281, 5
  store i64 %1282, i64* %PC
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 8
  store i64 %1285, i64* %PC
  %1286 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %1287 = bitcast i8* %1283 to float*
  store float %1286, float* %1287, align 1, !tbaa !2453
  %1288 = getelementptr inbounds i8, i8* %1283, i64 4
  %1289 = bitcast i8* %1288 to float*
  store float 0.000000e+00, float* %1289, align 1, !tbaa !2453
  %1290 = getelementptr inbounds i8, i8* %1283, i64 8
  %1291 = bitcast i8* %1290 to float*
  store float 0.000000e+00, float* %1291, align 1, !tbaa !2453
  %1292 = getelementptr inbounds i8, i8* %1283, i64 12
  %1293 = bitcast i8* %1292 to float*
  store float 0.000000e+00, float* %1293, align 1, !tbaa !2453
  %1294 = load i64, i64* %PC
  %1295 = add i64 %1294, 729
  %1296 = load i64, i64* %PC
  %1297 = add i64 %1296, 5
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 5
  store i64 %1299, i64* %PC
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1301 = load i64, i64* %1300, align 8, !tbaa !2428
  %1302 = add i64 %1301, -8
  %1303 = inttoptr i64 %1302 to i64*
  store i64 %1297, i64* %1303
  store i64 %1302, i64* %1300, align 8, !tbaa !2428
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1295, i64* %1304, align 8, !tbaa !2428
  %1305 = load i64, i64* %PC
  %1306 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1305, %struct.Memory* %1278)
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 10
  store i64 %1308, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 5
  store i64 %1310, i64* %PC
  store i64 2, i64* %RSI, align 8, !tbaa !2428
  %1311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1312 = load i64, i64* %PC
  %1313 = add i64 %1312, 8
  store i64 %1313, i64* %PC
  %1314 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 4) to float*)
  %1315 = bitcast i8* %1311 to float*
  store float %1314, float* %1315, align 1, !tbaa !2453
  %1316 = getelementptr inbounds i8, i8* %1311, i64 4
  %1317 = bitcast i8* %1316 to float*
  store float 0.000000e+00, float* %1317, align 1, !tbaa !2453
  %1318 = getelementptr inbounds i8, i8* %1311, i64 8
  %1319 = bitcast i8* %1318 to float*
  store float 0.000000e+00, float* %1319, align 1, !tbaa !2453
  %1320 = getelementptr inbounds i8, i8* %1311, i64 12
  %1321 = bitcast i8* %1320 to float*
  store float 0.000000e+00, float* %1321, align 1, !tbaa !2453
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 701
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 5
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 5
  store i64 %1327, i64* %PC
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1329 = load i64, i64* %1328, align 8, !tbaa !2428
  %1330 = add i64 %1329, -8
  %1331 = inttoptr i64 %1330 to i64*
  store i64 %1325, i64* %1331
  store i64 %1330, i64* %1328, align 8, !tbaa !2428
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1323, i64* %1332, align 8, !tbaa !2428
  %1333 = load i64, i64* %PC
  %1334 = call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1333, %struct.Memory* %1306)
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 10
  store i64 %1336, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RSI, align 8, !tbaa !2428
  %1337 = load i64, i64* %PC
  %1338 = add i64 %1337, 10
  store i64 %1338, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDX, align 8, !tbaa !2428
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 10
  store i64 %1340, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RCX, align 8, !tbaa !2428
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 10
  store i64 %1342, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %R8, align 8, !tbaa !2428
  %1343 = load i64, i64* %PC
  %1344 = add i64 %1343, 10
  store i64 %1344, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %R9, align 8, !tbaa !2428
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 10
  store i64 %1346, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 10
  store i64 %1348, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %R10, align 8, !tbaa !2428
  %1349 = load i64, i64* %RBP
  %1350 = sub i64 %1349, 32
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 7
  store i64 %1352, i64* %PC
  %1353 = inttoptr i64 %1350 to i32*
  store i32 64, i32* %1353
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 32
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 3
  store i64 %1357, i64* %PC
  %1358 = inttoptr i64 %1355 to i32*
  %1359 = load i32, i32* %1358
  %1360 = zext i32 %1359 to i64
  store i64 %1360, i64* %RAX, align 8, !tbaa !2428
  %1361 = load i64, i64* %RBP
  %1362 = sub i64 %1361, 152
  %1363 = load i64, i64* %RDI
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 7
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1362 to i64*
  store i64 %1363, i64* %1366
  %1367 = load i32, i32* %EAX
  %1368 = zext i32 %1367 to i64
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 2
  store i64 %1370, i64* %PC
  %1371 = and i64 %1368, 4294967295
  store i64 %1371, i64* %RDI, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 152
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 7
  store i64 %1375, i64* %PC
  %1376 = inttoptr i64 %1373 to i64*
  %1377 = load i64, i64* %1376
  store i64 %1377, i64* %R11, align 8, !tbaa !2428
  %1378 = load i64, i64* %RSP
  %1379 = load i64, i64* %R11
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1378 to i64*
  store i64 %1379, i64* %1382
  %1383 = load i64, i64* %RSP
  %1384 = add i64 %1383, 8
  %1385 = load i64, i64* %R10
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1384 to i64*
  store i64 %1385, i64* %1388
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 815
  %1391 = load i64, i64* %PC
  %1392 = add i64 %1391, 5
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 5
  store i64 %1394, i64* %PC
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1396 = load i64, i64* %1395, align 8, !tbaa !2428
  %1397 = add i64 %1396, -8
  %1398 = inttoptr i64 %1397 to i64*
  store i64 %1392, i64* %1398
  store i64 %1397, i64* %1395, align 8, !tbaa !2428
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1390, i64* %1399, align 8, !tbaa !2428
  %1400 = load i64, i64* %PC
  %1401 = call %struct.Memory* @sub_400cf0_jacobi(%struct.State* %0, i64 %1400, %struct.Memory* %1334)
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 10
  store i64 %1403, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 104), i64* %RDI, align 8, !tbaa !2428
  %1404 = load i64, i64* %RBP
  %1405 = sub i64 %1404, 72
  %1406 = bitcast %union.vec128_t* %XMM0 to i8*
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 5
  store i64 %1408, i64* %PC
  %1409 = bitcast i8* %1406 to <2 x float>*
  %1410 = load <2 x float>, <2 x float>* %1409, align 1
  %1411 = extractelement <2 x float> %1410, i32 0
  %1412 = inttoptr i64 %1405 to float*
  store float %1411, float* %1412
  %1413 = load i64, i64* %RBP
  %1414 = sub i64 %1413, 32
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 3
  store i64 %1416, i64* %PC
  %1417 = inttoptr i64 %1414 to i32*
  %1418 = load i32, i32* %1417
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RSI, align 8, !tbaa !2428
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 2
  store i64 %1421, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2455
  %1422 = load i64, i64* %PC
  %1423 = sub i64 %1422, 1178
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 5
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 5
  store i64 %1427, i64* %PC
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1429 = load i64, i64* %1428, align 8, !tbaa !2428
  %1430 = add i64 %1429, -8
  %1431 = inttoptr i64 %1430 to i64*
  store i64 %1425, i64* %1431
  store i64 %1430, i64* %1428, align 8, !tbaa !2428
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1423, i64* %1432, align 8, !tbaa !2428
  %1433 = load i64, i64* %PC
  %1434 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %1433, %struct.Memory* %1401)
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 10
  store i64 %1436, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 133), i64* %RDI, align 8, !tbaa !2428
  %1437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1438 = load i64, i64* %RBP
  %1439 = sub i64 %1438, 72
  %1440 = load i64, i64* %PC
  %1441 = add i64 %1440, 5
  store i64 %1441, i64* %PC
  %1442 = inttoptr i64 %1439 to float*
  %1443 = load float, float* %1442
  %1444 = fpext float %1443 to double
  %1445 = bitcast i8* %1437 to double*
  store double %1444, double* %1445, align 1, !tbaa !2432
  %1446 = load i64, i64* %RBP
  %1447 = sub i64 %1446, 156
  %1448 = load i32, i32* %EAX
  %1449 = zext i32 %1448 to i64
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 6
  store i64 %1451, i64* %PC
  %1452 = inttoptr i64 %1447 to i32*
  store i32 %1448, i32* %1452
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 2
  store i64 %1454, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2455
  %1455 = load i64, i64* %PC
  %1456 = sub i64 %1455, 1206
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 5
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 5
  store i64 %1460, i64* %PC
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1462 = load i64, i64* %1461, align 8, !tbaa !2428
  %1463 = add i64 %1462, -8
  %1464 = inttoptr i64 %1463 to i64*
  store i64 %1458, i64* %1464
  store i64 %1463, i64* %1461, align 8, !tbaa !2428
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1456, i64* %1465, align 8, !tbaa !2428
  %1466 = load i64, i64* %PC
  %1467 = call %struct.Memory* @ext_603120_printf(%struct.State* %0, i64 %1466, %struct.Memory* %1434)
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 10
  store i64 %1469, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RDI, align 8, !tbaa !2428
  %1470 = load i64, i64* %RBP
  %1471 = sub i64 %1470, 160
  %1472 = load i32, i32* %EAX
  %1473 = zext i32 %1472 to i64
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 6
  store i64 %1475, i64* %PC
  %1476 = inttoptr i64 %1471 to i32*
  store i32 %1472, i32* %1476
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 3973
  %1479 = load i64, i64* %PC
  %1480 = add i64 %1479, 5
  %1481 = load i64, i64* %PC
  %1482 = add i64 %1481, 5
  store i64 %1482, i64* %PC
  %1483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1484 = load i64, i64* %1483, align 8, !tbaa !2428
  %1485 = add i64 %1484, -8
  %1486 = inttoptr i64 %1485 to i64*
  store i64 %1480, i64* %1486
  store i64 %1485, i64* %1483, align 8, !tbaa !2428
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1478, i64* %1487, align 8, !tbaa !2428
  %1488 = load i64, i64* %PC
  %1489 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1488, %struct.Memory* %1467)
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 10
  store i64 %1491, i64* %PC
  store i64 ptrtoint (%bnd_type* @bnd to i64), i64* %RDI, align 8, !tbaa !2428
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3958
  %1494 = load i64, i64* %PC
  %1495 = add i64 %1494, 5
  %1496 = load i64, i64* %PC
  %1497 = add i64 %1496, 5
  store i64 %1497, i64* %PC
  %1498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1499 = load i64, i64* %1498, align 8, !tbaa !2428
  %1500 = add i64 %1499, -8
  %1501 = inttoptr i64 %1500 to i64*
  store i64 %1495, i64* %1501
  store i64 %1500, i64* %1498, align 8, !tbaa !2428
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1493, i64* %1502, align 8, !tbaa !2428
  %1503 = load i64, i64* %PC
  %1504 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1503, %struct.Memory* %1489)
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 10
  store i64 %1506, i64* %PC
  store i64 ptrtoint (%wrk1_type* @wrk1 to i64), i64* %RDI, align 8, !tbaa !2428
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 3943
  %1509 = load i64, i64* %PC
  %1510 = add i64 %1509, 5
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 5
  store i64 %1512, i64* %PC
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1514 = load i64, i64* %1513, align 8, !tbaa !2428
  %1515 = add i64 %1514, -8
  %1516 = inttoptr i64 %1515 to i64*
  store i64 %1510, i64* %1516
  store i64 %1515, i64* %1513, align 8, !tbaa !2428
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1508, i64* %1517, align 8, !tbaa !2428
  %1518 = load i64, i64* %PC
  %1519 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1518, %struct.Memory* %1504)
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 10
  store i64 %1521, i64* %PC
  store i64 ptrtoint (%wrk2_type* @wrk2 to i64), i64* %RDI, align 8, !tbaa !2428
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 3928
  %1524 = load i64, i64* %PC
  %1525 = add i64 %1524, 5
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC
  %1528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1529 = load i64, i64* %1528, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1525, i64* %1531
  store i64 %1530, i64* %1528, align 8, !tbaa !2428
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1523, i64* %1532, align 8, !tbaa !2428
  %1533 = load i64, i64* %PC
  %1534 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1533, %struct.Memory* %1519)
  %1535 = load i64, i64* %PC
  %1536 = add i64 %1535, 10
  store i64 %1536, i64* %PC
  store i64 ptrtoint (%a_type* @a to i64), i64* %RDI, align 8, !tbaa !2428
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 3913
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 5
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 5
  store i64 %1542, i64* %PC
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1544 = load i64, i64* %1543, align 8, !tbaa !2428
  %1545 = add i64 %1544, -8
  %1546 = inttoptr i64 %1545 to i64*
  store i64 %1540, i64* %1546
  store i64 %1545, i64* %1543, align 8, !tbaa !2428
  %1547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1538, i64* %1547, align 8, !tbaa !2428
  %1548 = load i64, i64* %PC
  %1549 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1548, %struct.Memory* %1534)
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 10
  store i64 %1551, i64* %PC
  store i64 ptrtoint (%b_type* @b to i64), i64* %RDI, align 8, !tbaa !2428
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 3898
  %1554 = load i64, i64* %PC
  %1555 = add i64 %1554, 5
  %1556 = load i64, i64* %PC
  %1557 = add i64 %1556, 5
  store i64 %1557, i64* %PC
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1559 = load i64, i64* %1558, align 8, !tbaa !2428
  %1560 = add i64 %1559, -8
  %1561 = inttoptr i64 %1560 to i64*
  store i64 %1555, i64* %1561
  store i64 %1560, i64* %1558, align 8, !tbaa !2428
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1553, i64* %1562, align 8, !tbaa !2428
  %1563 = load i64, i64* %PC
  %1564 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1563, %struct.Memory* %1549)
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 10
  store i64 %1566, i64* %PC
  store i64 ptrtoint (%c_type* @c to i64), i64* %RDI, align 8, !tbaa !2428
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 3883
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 5
  store i64 %1572, i64* %PC
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1574 = load i64, i64* %1573, align 8, !tbaa !2428
  %1575 = add i64 %1574, -8
  %1576 = inttoptr i64 %1575 to i64*
  store i64 %1570, i64* %1576
  store i64 %1575, i64* %1573, align 8, !tbaa !2428
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1568, i64* %1577, align 8, !tbaa !2428
  %1578 = load i64, i64* %PC
  %1579 = call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1578, %struct.Memory* %1564)
  %1580 = load i64, i64* %RAX
  %1581 = load i32, i32* %EAX
  %1582 = zext i32 %1581 to i64
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 2
  store i64 %1584, i64* %PC
  %1585 = xor i64 %1582, %1580
  %1586 = trunc i64 %1585 to i32
  %1587 = and i64 %1585, 4294967295
  store i64 %1587, i64* %RAX, align 8, !tbaa !2428
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1588, align 1, !tbaa !2434
  %1589 = and i32 %1586, 255
  %1590 = call i32 @llvm.ctpop.i32(i32 %1589) #16
  %1591 = trunc i32 %1590 to i8
  %1592 = and i8 %1591, 1
  %1593 = xor i8 %1592, 1
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1593, i8* %1594, align 1, !tbaa !2448
  %1595 = icmp eq i32 %1586, 0
  %1596 = zext i1 %1595 to i8
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1596, i8* %1597, align 1, !tbaa !2450
  %1598 = lshr i32 %1586, 31
  %1599 = trunc i32 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1599, i8* %1600, align 1, !tbaa !2451
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1601, align 1, !tbaa !2452
  %1602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1602, align 1, !tbaa !2449
  %1603 = load i64, i64* %RSP
  %1604 = load i64, i64* %PC
  %1605 = add i64 %1604, 7
  store i64 %1605, i64* %PC
  %1606 = add i64 176, %1603
  store i64 %1606, i64* %RSP, align 8, !tbaa !2428
  %1607 = icmp ult i64 %1606, %1603
  %1608 = icmp ult i64 %1606, 176
  %1609 = or i1 %1607, %1608
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1610, i8* %1611, align 1, !tbaa !2434
  %1612 = trunc i64 %1606 to i32
  %1613 = and i32 %1612, 255
  %1614 = call i32 @llvm.ctpop.i32(i32 %1613) #16
  %1615 = trunc i32 %1614 to i8
  %1616 = and i8 %1615, 1
  %1617 = xor i8 %1616, 1
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1617, i8* %1618, align 1, !tbaa !2448
  %1619 = xor i64 176, %1603
  %1620 = xor i64 %1619, %1606
  %1621 = lshr i64 %1620, 4
  %1622 = trunc i64 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1623, i8* %1624, align 1, !tbaa !2449
  %1625 = icmp eq i64 %1606, 0
  %1626 = zext i1 %1625 to i8
  %1627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1626, i8* %1627, align 1, !tbaa !2450
  %1628 = lshr i64 %1606, 63
  %1629 = trunc i64 %1628 to i8
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1629, i8* %1630, align 1, !tbaa !2451
  %1631 = lshr i64 %1603, 63
  %1632 = xor i64 %1628, %1631
  %1633 = add nuw nsw i64 %1632, %1628
  %1634 = icmp eq i64 %1633, 2
  %1635 = zext i1 %1634 to i8
  %1636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1635, i8* %1636, align 1, !tbaa !2452
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 1
  store i64 %1638, i64* %PC
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1640 = load i64, i64* %1639, align 8, !tbaa !2428
  %1641 = add i64 %1640, 8
  %1642 = inttoptr i64 %1640 to i64*
  %1643 = load i64, i64* %1642
  store i64 %1643, i64* %RBP, align 8, !tbaa !2428
  store i64 %1641, i64* %1639, align 8, !tbaa !2428
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 1
  store i64 %1645, i64* %PC
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1648 = load i64, i64* %1647, align 8, !tbaa !2428
  %1649 = inttoptr i64 %1648 to i64*
  %1650 = load i64, i64* %1649
  store i64 %1650, i64* %1646, align 8, !tbaa !2428
  %1651 = add i64 %1648, 8
  store i64 %1651, i64* %1647, align 8, !tbaa !2428
  ret %struct.Memory* %1579
}

; Function Attrs: noinline
define %struct.Memory* @sub_400508__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400508:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2434
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2451
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2452
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2434
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2451
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2452
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2450
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40051a, label %block_400518

block_400518:                                     ; preds = %block_400508
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40051a

block_40051a:                                     ; preds = %block_400518, %block_400508
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400508 ], [ %92, %block_400518 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2434
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2449
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2451
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2452
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401da0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401da0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005d0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %37 = icmp ult i64 %33, ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2434
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2448
  %47 = xor i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2449
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2451
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2452
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2450
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_4005f8, label %block_4005e1

block_4005f8:                                     ; preds = %block_4005e1, %block_4005f3, %block_4005d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4005d0 ], [ %2, %block_4005e1 ], [ %2, %block_4005f3 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005fa:                                     ; preds = %block_4005eb
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_400600_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_4005f3:                                     ; preds = %block_4005eb
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_4005f8

block_4005eb:                                     ; preds = %block_4005e1
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4195834, label %block_4005fa
    i64 4195827, label %block_4005f3
  ]

block_4005e1:                                     ; preds = %block_4005d0
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2434
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2450
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2451
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2452
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2449
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2450
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_4005f8, label %block_4005eb

; <label>:163:                                    ; preds = %block_4005eb
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_401da4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401da4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2434
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2448
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2449
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2451
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2452
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2434
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2452
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400590__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400590:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2434
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2451
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2452
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2449
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2434
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2448
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2450
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2452
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2449
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401da0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401d30___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603168___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400cf0_jacobi(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400cf0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 17
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R8 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 19
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R9 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 21
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R10 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %49 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %48, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %49 to %"class.std::bitset"*
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %51 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %50, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %51 to %"class.std::bitset"*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %53 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %52, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %53 to %"class.std::bitset"*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %54, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %55 to %union.vec128_t*
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %57 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %56, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %57 to %union.vec128_t*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %59 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %58, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %59 to %union.vec128_t*
  %60 = load i64, i64* %RBP
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 1
  store i64 %62, i64* %PC
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %64 = load i64, i64* %63, align 8, !tbaa !2428
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to i64*
  store i64 %60, i64* %66
  store i64 %65, i64* %63, align 8, !tbaa !2428
  %67 = load i64, i64* %RSP
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 3
  store i64 %69, i64* %PC
  store i64 %67, i64* %RBP, align 8, !tbaa !2428
  %70 = load i64, i64* %RBP
  %71 = add i64 %70, 24
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = load i64, i64* %RBP
  %77 = add i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %R10, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 4
  %84 = load i32, i32* %EDI
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 3
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %83 to i32*
  store i32 %84, i32* %88
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %RSI
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %90 to i64*
  store i64 %91, i64* %94
  %95 = load i64, i64* %RBP
  %96 = sub i64 %95, 24
  %97 = load i64, i64* %RDX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100
  %101 = load i64, i64* %RBP
  %102 = sub i64 %101, 32
  %103 = load i64, i64* %RCX
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %102 to i64*
  store i64 %103, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 40
  %109 = load i64, i64* %R8
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %108 to i64*
  store i64 %109, i64* %112
  %113 = load i64, i64* %RBP
  %114 = sub i64 %113, 48
  %115 = load i64, i64* %R9
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 4
  store i64 %117, i64* %PC
  %118 = inttoptr i64 %114 to i64*
  store i64 %115, i64* %118
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 56
  %121 = load i64, i64* %R10
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %124
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 64
  %127 = load i64, i64* %RAX
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %126 to i64*
  store i64 %127, i64* %130
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 40
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = load i64, i64* %RAX
  %138 = add i64 %137, 12
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 3
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  %142 = load i32, i32* %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RDI
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  %147 = trunc i64 %144 to i32
  %148 = sub i32 %147, 1
  %149 = zext i32 %148 to i64
  store i64 %149, i64* %RDI, align 8, !tbaa !2428
  %150 = icmp ult i32 %147, 1
  %151 = zext i1 %150 to i8
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %151, i8* %152, align 1, !tbaa !2434
  %153 = and i32 %148, 255
  %154 = call i32 @llvm.ctpop.i32(i32 %153) #16
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %157, i8* %158, align 1, !tbaa !2448
  %159 = xor i64 1, %144
  %160 = trunc i64 %159 to i32
  %161 = xor i32 %160, %148
  %162 = lshr i32 %161, 4
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = icmp eq i32 %148, 0
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %167, i8* %168, align 1, !tbaa !2450
  %169 = lshr i32 %148, 31
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %170, i8* %171, align 1, !tbaa !2451
  %172 = lshr i32 %147, 31
  %173 = xor i32 %169, %172
  %174 = add nuw nsw i32 %173, %172
  %175 = icmp eq i32 %174, 2
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %176, i8* %177, align 1, !tbaa !2452
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 84
  %180 = load i32, i32* %EDI
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 3
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %179 to i32*
  store i32 %180, i32* %184
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 40
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, 16
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 3
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i32*
  %196 = load i32, i32* %195
  %197 = zext i32 %196 to i64
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RDI
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = trunc i64 %198 to i32
  %202 = sub i32 %201, 1
  %203 = zext i32 %202 to i64
  store i64 %203, i64* %RDI, align 8, !tbaa !2428
  %204 = icmp ult i32 %201, 1
  %205 = zext i1 %204 to i8
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %205, i8* %206, align 1, !tbaa !2434
  %207 = and i32 %202, 255
  %208 = call i32 @llvm.ctpop.i32(i32 %207) #16
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %211, i8* %212, align 1, !tbaa !2448
  %213 = xor i64 1, %198
  %214 = trunc i64 %213 to i32
  %215 = xor i32 %214, %202
  %216 = lshr i32 %215, 4
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %218, i8* %219, align 1, !tbaa !2449
  %220 = icmp eq i32 %202, 0
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %221, i8* %222, align 1, !tbaa !2450
  %223 = lshr i32 %202, 31
  %224 = trunc i32 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %224, i8* %225, align 1, !tbaa !2451
  %226 = lshr i32 %201, 31
  %227 = xor i32 %223, %226
  %228 = add nuw nsw i32 %227, %226
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2452
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 88
  %234 = load i32, i32* %EDI
  %235 = zext i32 %234 to i64
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %233 to i32*
  store i32 %234, i32* %238
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 40
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = load i64, i64* %RAX
  %246 = add i64 %245, 20
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i32*
  %250 = load i32, i32* %249
  %251 = zext i32 %250 to i64
  store i64 %251, i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* %RDI
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC
  %255 = trunc i64 %252 to i32
  %256 = sub i32 %255, 1
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDI, align 8, !tbaa !2428
  %258 = icmp ult i32 %255, 1
  %259 = zext i1 %258 to i8
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %259, i8* %260, align 1, !tbaa !2434
  %261 = and i32 %256, 255
  %262 = call i32 @llvm.ctpop.i32(i32 %261) #16
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %265, i8* %266, align 1, !tbaa !2448
  %267 = xor i64 1, %252
  %268 = trunc i64 %267 to i32
  %269 = xor i32 %268, %256
  %270 = lshr i32 %269, 4
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = icmp eq i32 %256, 0
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %275, i8* %276, align 1, !tbaa !2450
  %277 = lshr i32 %256, 31
  %278 = trunc i32 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %278, i8* %279, align 1, !tbaa !2451
  %280 = lshr i32 %255, 31
  %281 = xor i32 %277, %280
  %282 = add nuw nsw i32 %281, %280
  %283 = icmp eq i32 %282, 2
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %284, i8* %285, align 1, !tbaa !2452
  %286 = load i64, i64* %RBP
  %287 = sub i64 %286, 92
  %288 = load i32, i32* %EDI
  %289 = zext i32 %288 to i64
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 3
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %287 to i32*
  store i32 %288, i32* %292
  %293 = load i64, i64* %RBP
  %294 = sub i64 %293, 80
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 7
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %294 to i32*
  store i32 0, i32* %297
  br label %block_400d49

block_401878:                                     ; preds = %block_401963, %block_401871
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_401871 ], [ %MEMORY.4, %block_401963 ]
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 68
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i32*
  %303 = load i32, i32* %302
  %304 = zext i32 %303 to i64
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = load i32, i32* %EAX
  %306 = zext i32 %305 to i64
  %307 = load i64, i64* %RBP
  %308 = sub i64 %307, 84
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 3
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i32*
  %312 = load i32, i32* %311
  %313 = sub i32 %305, %312
  %314 = icmp ult i32 %305, %312
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %315, i8* %316, align 1, !tbaa !2434
  %317 = and i32 %313, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2448
  %323 = xor i32 %312, %305
  %324 = xor i32 %323, %313
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2449
  %329 = icmp eq i32 %313, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = lshr i32 %313, 31
  %333 = trunc i32 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2451
  %335 = lshr i32 %305, 31
  %336 = lshr i32 %312, 31
  %337 = xor i32 %336, %335
  %338 = xor i32 %332, %335
  %339 = add nuw nsw i32 %338, %337
  %340 = icmp eq i32 %339, 2
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %341, i8* %342, align 1, !tbaa !2452
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 248
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 6
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 6
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %350 = load i8, i8* %349, align 1, !tbaa !2451
  %351 = icmp ne i8 %350, 0
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %353 = load i8, i8* %352, align 1, !tbaa !2452
  %354 = icmp ne i8 %353, 0
  %355 = xor i1 %351, %354
  %356 = xor i1 %355, true
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %359 = select i1 %355, i64 %346, i64 %344
  store i64 %359, i64* %358, align 8, !tbaa !2428
  %360 = load i8, i8* %BRANCH_TAKEN
  %361 = icmp eq i8 %360, 1
  br i1 %361, label %block_401976, label %block_401884

block_400d77:                                     ; preds = %block_400d70, %block_40184b
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_400d70 ], [ %MEMORY.5, %block_40184b ]
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 72
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i32*
  %367 = load i32, i32* %366
  %368 = zext i32 %367 to i64
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = load i32, i32* %EAX
  %370 = zext i32 %369 to i64
  %371 = load i64, i64* %RBP
  %372 = sub i64 %371, 88
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %372 to i32*
  %376 = load i32, i32* %375
  %377 = sub i32 %369, %376
  %378 = icmp ult i32 %369, %376
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %379, i8* %380, align 1, !tbaa !2434
  %381 = and i32 %377, 255
  %382 = call i32 @llvm.ctpop.i32(i32 %381) #16
  %383 = trunc i32 %382 to i8
  %384 = and i8 %383, 1
  %385 = xor i8 %384, 1
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = xor i32 %376, %369
  %388 = xor i32 %387, %377
  %389 = lshr i32 %388, 4
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %391, i8* %392, align 1, !tbaa !2449
  %393 = icmp eq i32 %377, 0
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %394, i8* %395, align 1, !tbaa !2450
  %396 = lshr i32 %377, 31
  %397 = trunc i32 %396 to i8
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %397, i8* %398, align 1, !tbaa !2451
  %399 = lshr i32 %369, 31
  %400 = lshr i32 %376, 31
  %401 = xor i32 %400, %399
  %402 = xor i32 %396, %399
  %403 = add nuw nsw i32 %402, %401
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %405, i8* %406, align 1, !tbaa !2452
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2785
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 6
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 6
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %414 = load i8, i8* %413, align 1, !tbaa !2451
  %415 = icmp ne i8 %414, 0
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %417 = load i8, i8* %416, align 1, !tbaa !2452
  %418 = icmp ne i8 %417, 0
  %419 = xor i1 %415, %418
  %420 = xor i1 %419, true
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %423 = select i1 %419, i64 %410, i64 %408
  store i64 %423, i64* %422, align 8, !tbaa !2428
  %424 = load i8, i8* %BRANCH_TAKEN
  %425 = icmp eq i8 %424, 1
  br i1 %425, label %block_40185e, label %block_400d83

block_401976:                                     ; preds = %block_401878
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 5
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 5
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %430, align 8, !tbaa !2428
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 80
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 3
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i32*
  %436 = load i32, i32* %435
  %437 = zext i32 %436 to i64
  store i64 %437, i64* %RAX, align 8, !tbaa !2428
  %438 = load i64, i64* %RAX
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = trunc i64 %438 to i32
  %442 = add i32 1, %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RAX, align 8, !tbaa !2428
  %444 = icmp ult i32 %442, %441
  %445 = icmp ult i32 %442, 1
  %446 = or i1 %444, %445
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %447, i8* %448, align 1, !tbaa !2434
  %449 = and i32 %442, 255
  %450 = call i32 @llvm.ctpop.i32(i32 %449) #16
  %451 = trunc i32 %450 to i8
  %452 = and i8 %451, 1
  %453 = xor i8 %452, 1
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %453, i8* %454, align 1, !tbaa !2448
  %455 = xor i64 1, %438
  %456 = trunc i64 %455 to i32
  %457 = xor i32 %456, %442
  %458 = lshr i32 %457, 4
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %460, i8* %461, align 1, !tbaa !2449
  %462 = icmp eq i32 %442, 0
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %463, i8* %464, align 1, !tbaa !2450
  %465 = lshr i32 %442, 31
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %466, i8* %467, align 1, !tbaa !2451
  %468 = lshr i32 %441, 31
  %469 = xor i32 %465, %468
  %470 = add nuw nsw i32 %469, %465
  %471 = icmp eq i32 %470, 2
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %472, i8* %473, align 1, !tbaa !2452
  %474 = load i64, i64* %RBP
  %475 = sub i64 %474, 80
  %476 = load i32, i32* %EAX
  %477 = zext i32 %476 to i64
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 3
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %475 to i32*
  store i32 %476, i32* %480
  %481 = load i64, i64* %PC
  %482 = sub i64 %481, 3131
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %482, i64* %485, align 8, !tbaa !2428
  br label %block_400d49

block_401871:                                     ; preds = %block_400d64
  %486 = sub i64 %554, 68
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 7
  store i64 %488, i64* %PC
  %489 = inttoptr i64 %486 to i32*
  store i32 1, i32* %489
  br label %block_401878

block_400d64:                                     ; preds = %block_40185e, %block_400d55
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.6, %block_400d55 ], [ %MEMORY.1, %block_40185e ]
  %490 = load i64, i64* %RBP
  %491 = sub i64 %490, 68
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494
  %496 = zext i32 %495 to i64
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = load i32, i32* %EAX
  %498 = zext i32 %497 to i64
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 84
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 3
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i32*
  %504 = load i32, i32* %503
  %505 = sub i32 %497, %504
  %506 = icmp ult i32 %497, %504
  %507 = zext i1 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %507, i8* %508, align 1, !tbaa !2434
  %509 = and i32 %505, 255
  %510 = call i32 @llvm.ctpop.i32(i32 %509) #16
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %513, i8* %514, align 1, !tbaa !2448
  %515 = xor i32 %504, %497
  %516 = xor i32 %515, %505
  %517 = lshr i32 %516, 4
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %519, i8* %520, align 1, !tbaa !2449
  %521 = icmp eq i32 %505, 0
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %522, i8* %523, align 1, !tbaa !2450
  %524 = lshr i32 %505, 31
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %525, i8* %526, align 1, !tbaa !2451
  %527 = lshr i32 %497, 31
  %528 = lshr i32 %504, 31
  %529 = xor i32 %528, %527
  %530 = xor i32 %524, %527
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %533, i8* %534, align 1, !tbaa !2452
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 2823
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 6
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %542 = load i8, i8* %541, align 1, !tbaa !2451
  %543 = icmp ne i8 %542, 0
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %545 = load i8, i8* %544, align 1, !tbaa !2452
  %546 = icmp ne i8 %545, 0
  %547 = xor i1 %543, %546
  %548 = xor i1 %547, true
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %551 = select i1 %547, i64 %538, i64 %536
  store i64 %551, i64* %550, align 8, !tbaa !2428
  %552 = load i8, i8* %BRANCH_TAKEN
  %553 = icmp eq i8 %552, 1
  %554 = load i64, i64* %RBP
  br i1 %553, label %block_401871, label %block_400d70

block_400d55:                                     ; preds = %block_400d49
  %555 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %556 = bitcast %union.vec128_t* %XMM0 to i8*
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = bitcast i8* %555 to i64*
  %560 = load i64, i64* %559, align 1
  %561 = getelementptr inbounds i8, i8* %555, i64 8
  %562 = bitcast i8* %561 to i64*
  %563 = load i64, i64* %562, align 1
  %564 = bitcast i8* %556 to i64*
  %565 = load i64, i64* %564, align 1
  %566 = getelementptr inbounds i8, i8* %556, i64 8
  %567 = bitcast i8* %566 to i64*
  %568 = load i64, i64* %567, align 1
  %569 = xor i64 %565, %560
  %570 = xor i64 %568, %563
  %571 = trunc i64 %569 to i32
  %572 = lshr i64 %569, 32
  %573 = trunc i64 %572 to i32
  %574 = bitcast i8* %15940 to i32*
  store i32 %571, i32* %574, align 1, !tbaa !2456
  %575 = getelementptr inbounds i8, i8* %15940, i64 4
  %576 = bitcast i8* %575 to i32*
  store i32 %573, i32* %576, align 1, !tbaa !2456
  %577 = trunc i64 %570 to i32
  %578 = getelementptr inbounds i8, i8* %15940, i64 8
  %579 = bitcast i8* %578 to i32*
  store i32 %577, i32* %579, align 1, !tbaa !2456
  %580 = lshr i64 %570, 32
  %581 = trunc i64 %580 to i32
  %582 = getelementptr inbounds i8, i8* %15940, i64 12
  %583 = bitcast i8* %582 to i32*
  store i32 %581, i32* %583, align 1, !tbaa !2456
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 96
  %586 = bitcast %union.vec128_t* %XMM0 to i8*
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 5
  store i64 %588, i64* %PC
  %589 = bitcast i8* %586 to <2 x float>*
  %590 = load <2 x float>, <2 x float>* %589, align 1
  %591 = extractelement <2 x float> %590, i32 0
  %592 = inttoptr i64 %585 to float*
  store float %591, float* %592
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 68
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 7
  store i64 %596, i64* %PC
  %597 = inttoptr i64 %594 to i32*
  store i32 1, i32* %597
  br label %block_400d64

block_40185e:                                     ; preds = %block_400d77
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 5
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %599, i64* %602, align 8, !tbaa !2428
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 68
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 3
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i32*
  %608 = load i32, i32* %607
  %609 = zext i32 %608 to i64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 3
  store i64 %612, i64* %PC
  %613 = trunc i64 %610 to i32
  %614 = add i32 1, %613
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %RAX, align 8, !tbaa !2428
  %616 = icmp ult i32 %614, %613
  %617 = icmp ult i32 %614, 1
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %619, i8* %620, align 1, !tbaa !2434
  %621 = and i32 %614, 255
  %622 = call i32 @llvm.ctpop.i32(i32 %621) #16
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %625, i8* %626, align 1, !tbaa !2448
  %627 = xor i64 1, %610
  %628 = trunc i64 %627 to i32
  %629 = xor i32 %628, %614
  %630 = lshr i32 %629, 4
  %631 = trunc i32 %630 to i8
  %632 = and i8 %631, 1
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %632, i8* %633, align 1, !tbaa !2449
  %634 = icmp eq i32 %614, 0
  %635 = zext i1 %634 to i8
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %635, i8* %636, align 1, !tbaa !2450
  %637 = lshr i32 %614, 31
  %638 = trunc i32 %637 to i8
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %638, i8* %639, align 1, !tbaa !2451
  %640 = lshr i32 %613, 31
  %641 = xor i32 %637, %640
  %642 = add nuw nsw i32 %641, %637
  %643 = icmp eq i32 %642, 2
  %644 = zext i1 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %644, i8* %645, align 1, !tbaa !2452
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 68
  %648 = load i32, i32* %EAX
  %649 = zext i32 %648 to i64
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 3
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %647 to i32*
  store i32 %648, i32* %652
  %653 = load i64, i64* %PC
  %654 = sub i64 %653, 2824
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  store i64 %656, i64* %PC
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %654, i64* %657, align 8, !tbaa !2428
  br label %block_400d64

block_401963:                                     ; preds = %block_40188b
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 5
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 5
  store i64 %661, i64* %PC
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %659, i64* %662, align 8, !tbaa !2428
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 68
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 3
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i32*
  %668 = load i32, i32* %667
  %669 = zext i32 %668 to i64
  store i64 %669, i64* %RAX, align 8, !tbaa !2428
  %670 = load i64, i64* %RAX
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC
  %673 = trunc i64 %670 to i32
  %674 = add i32 1, %673
  %675 = zext i32 %674 to i64
  store i64 %675, i64* %RAX, align 8, !tbaa !2428
  %676 = icmp ult i32 %674, %673
  %677 = icmp ult i32 %674, 1
  %678 = or i1 %676, %677
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %679, i8* %680, align 1, !tbaa !2434
  %681 = and i32 %674, 255
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %685, i8* %686, align 1, !tbaa !2448
  %687 = xor i64 1, %670
  %688 = trunc i64 %687 to i32
  %689 = xor i32 %688, %674
  %690 = lshr i32 %689, 4
  %691 = trunc i32 %690 to i8
  %692 = and i8 %691, 1
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %692, i8* %693, align 1, !tbaa !2449
  %694 = icmp eq i32 %674, 0
  %695 = zext i1 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %695, i8* %696, align 1, !tbaa !2450
  %697 = lshr i32 %674, 31
  %698 = trunc i32 %697 to i8
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %698, i8* %699, align 1, !tbaa !2451
  %700 = lshr i32 %673, 31
  %701 = xor i32 %697, %700
  %702 = add nuw nsw i32 %701, %697
  %703 = icmp eq i32 %702, 2
  %704 = zext i1 %703 to i8
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %704, i8* %705, align 1, !tbaa !2452
  %706 = load i64, i64* %RBP
  %707 = sub i64 %706, 68
  %708 = load i32, i32* %EAX
  %709 = zext i32 %708 to i64
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %707 to i32*
  store i32 %708, i32* %712
  %713 = load i64, i64* %PC
  %714 = sub i64 %713, 249
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 5
  store i64 %716, i64* %PC
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %714, i64* %717, align 8, !tbaa !2428
  br label %block_401878

block_401950:                                     ; preds = %block_40189e
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 5
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 5
  store i64 %721, i64* %PC
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %719, i64* %722, align 8, !tbaa !2428
  %723 = load i64, i64* %RBP
  %724 = sub i64 %723, 72
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 3
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i32*
  %728 = load i32, i32* %727
  %729 = zext i32 %728 to i64
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %730 = load i64, i64* %RAX
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 3
  store i64 %732, i64* %PC
  %733 = trunc i64 %730 to i32
  %734 = add i32 1, %733
  %735 = zext i32 %734 to i64
  store i64 %735, i64* %RAX, align 8, !tbaa !2428
  %736 = icmp ult i32 %734, %733
  %737 = icmp ult i32 %734, 1
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %739, i8* %740, align 1, !tbaa !2434
  %741 = and i32 %734, 255
  %742 = call i32 @llvm.ctpop.i32(i32 %741) #16
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %745, i8* %746, align 1, !tbaa !2448
  %747 = xor i64 1, %730
  %748 = trunc i64 %747 to i32
  %749 = xor i32 %748, %734
  %750 = lshr i32 %749, 4
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %752, i8* %753, align 1, !tbaa !2449
  %754 = icmp eq i32 %734, 0
  %755 = zext i1 %754 to i8
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %755, i8* %756, align 1, !tbaa !2450
  %757 = lshr i32 %734, 31
  %758 = trunc i32 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %758, i8* %759, align 1, !tbaa !2451
  %760 = lshr i32 %733, 31
  %761 = xor i32 %757, %760
  %762 = add nuw nsw i32 %761, %757
  %763 = icmp eq i32 %762, 2
  %764 = zext i1 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %764, i8* %765, align 1, !tbaa !2452
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 72
  %768 = load i32, i32* %EAX
  %769 = zext i32 %768 to i64
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 3
  store i64 %771, i64* %PC
  %772 = inttoptr i64 %767 to i32*
  store i32 %768, i32* %772
  %773 = load i64, i64* %PC
  %774 = sub i64 %773, 211
  %775 = load i64, i64* %PC
  %776 = add i64 %775, 5
  store i64 %776, i64* %PC
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %774, i64* %777, align 8, !tbaa !2428
  br label %block_40188b

block_40184b:                                     ; preds = %block_400d8a
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 5
  %780 = load i64, i64* %PC
  %781 = add i64 %780, 5
  store i64 %781, i64* %PC
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %779, i64* %782, align 8, !tbaa !2428
  %783 = load i64, i64* %RBP
  %784 = sub i64 %783, 72
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 3
  store i64 %786, i64* %PC
  %787 = inttoptr i64 %784 to i32*
  %788 = load i32, i32* %787
  %789 = zext i32 %788 to i64
  store i64 %789, i64* %RAX, align 8, !tbaa !2428
  %790 = load i64, i64* %RAX
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 3
  store i64 %792, i64* %PC
  %793 = trunc i64 %790 to i32
  %794 = add i32 1, %793
  %795 = zext i32 %794 to i64
  store i64 %795, i64* %RAX, align 8, !tbaa !2428
  %796 = icmp ult i32 %794, %793
  %797 = icmp ult i32 %794, 1
  %798 = or i1 %796, %797
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %799, i8* %800, align 1, !tbaa !2434
  %801 = and i32 %794, 255
  %802 = call i32 @llvm.ctpop.i32(i32 %801) #16
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = xor i8 %804, 1
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %805, i8* %806, align 1, !tbaa !2448
  %807 = xor i64 1, %790
  %808 = trunc i64 %807 to i32
  %809 = xor i32 %808, %794
  %810 = lshr i32 %809, 4
  %811 = trunc i32 %810 to i8
  %812 = and i8 %811, 1
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %812, i8* %813, align 1, !tbaa !2449
  %814 = icmp eq i32 %794, 0
  %815 = zext i1 %814 to i8
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %815, i8* %816, align 1, !tbaa !2450
  %817 = lshr i32 %794, 31
  %818 = trunc i32 %817 to i8
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %818, i8* %819, align 1, !tbaa !2451
  %820 = lshr i32 %793, 31
  %821 = xor i32 %817, %820
  %822 = add nuw nsw i32 %821, %817
  %823 = icmp eq i32 %822, 2
  %824 = zext i1 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %824, i8* %825, align 1, !tbaa !2452
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 72
  %828 = load i32, i32* %EAX
  %829 = zext i32 %828 to i64
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 3
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %827 to i32*
  store i32 %828, i32* %832
  %833 = load i64, i64* %PC
  %834 = sub i64 %833, 2786
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %834, i64* %837, align 8, !tbaa !2428
  br label %block_400d77

block_4018aa:                                     ; preds = %block_40189e
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 64
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = load i64, i64* %RAX
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 3
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 64
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i64*
  %854 = load i64, i64* %853
  store i64 %854, i64* %RCX, align 8, !tbaa !2428
  %855 = load i64, i64* %RCX
  %856 = add i64 %855, 12
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 4
  store i64 %858, i64* %PC
  %859 = inttoptr i64 %856 to i32*
  %860 = load i32, i32* %859
  %861 = sext i32 %860 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %862, align 1, !tbaa !2434
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %863, align 1, !tbaa !2448
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %864, align 1, !tbaa !2449
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %865, align 1, !tbaa !2450
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %866, align 1, !tbaa !2451
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %867, align 1, !tbaa !2452
  %868 = load i64, i64* %RBP
  %869 = sub i64 %868, 64
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 4
  store i64 %871, i64* %PC
  %872 = inttoptr i64 %869 to i64*
  %873 = load i64, i64* %872
  store i64 %873, i64* %RCX, align 8, !tbaa !2428
  %874 = load i64, i64* %RDX
  %875 = load i64, i64* %RCX
  %876 = add i64 %875, 16
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i32*
  %880 = load i32, i32* %879
  %881 = shl i64 %874, 32
  %882 = ashr exact i64 %881, 32
  %883 = sext i32 %880 to i64
  %884 = mul nsw i64 %883, %882
  %885 = trunc i64 %884 to i32
  %886 = and i64 %884, 4294967295
  store i64 %886, i64* %RDX, align 8, !tbaa !2428
  %887 = shl i64 %884, 32
  %888 = ashr exact i64 %887, 32
  %889 = icmp ne i64 %888, %884
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %890, i8* %891, align 1, !tbaa !2434
  %892 = and i32 %885, 255
  %893 = call i32 @llvm.ctpop.i32(i32 %892) #16
  %894 = trunc i32 %893 to i8
  %895 = and i8 %894, 1
  %896 = xor i8 %895, 1
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %896, i8* %897, align 1, !tbaa !2448
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %898, align 1, !tbaa !2449
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %899, align 1, !tbaa !2450
  %900 = lshr i32 %885, 31
  %901 = trunc i32 %900 to i8
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %901, i8* %902, align 1, !tbaa !2451
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %890, i8* %903, align 1, !tbaa !2452
  %904 = load i64, i64* %RBP
  %905 = sub i64 %904, 64
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %905 to i64*
  %909 = load i64, i64* %908
  store i64 %909, i64* %RCX, align 8, !tbaa !2428
  %910 = load i64, i64* %RDX
  %911 = load i64, i64* %RCX
  %912 = add i64 %911, 20
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i32*
  %916 = load i32, i32* %915
  %917 = shl i64 %910, 32
  %918 = ashr exact i64 %917, 32
  %919 = sext i32 %916 to i64
  %920 = mul nsw i64 %919, %918
  %921 = trunc i64 %920 to i32
  %922 = and i64 %920, 4294967295
  store i64 %922, i64* %RDX, align 8, !tbaa !2428
  %923 = shl i64 %920, 32
  %924 = ashr exact i64 %923, 32
  %925 = icmp ne i64 %924, %920
  %926 = zext i1 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %926, i8* %927, align 1, !tbaa !2434
  %928 = and i32 %921, 255
  %929 = call i32 @llvm.ctpop.i32(i32 %928) #16
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = xor i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %932, i8* %933, align 1, !tbaa !2448
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %934, align 1, !tbaa !2449
  %935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %935, align 1, !tbaa !2450
  %936 = lshr i32 %921, 31
  %937 = trunc i32 %936 to i8
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %937, i8* %938, align 1, !tbaa !2451
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %926, i8* %939, align 1, !tbaa !2452
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 68
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 3
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i32*
  %945 = load i32, i32* %944
  %946 = zext i32 %945 to i64
  store i64 %946, i64* %RSI, align 8, !tbaa !2428
  %947 = load i64, i64* %RBP
  %948 = sub i64 %947, 64
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 4
  store i64 %950, i64* %PC
  %951 = inttoptr i64 %948 to i64*
  %952 = load i64, i64* %951
  store i64 %952, i64* %RCX, align 8, !tbaa !2428
  %953 = load i64, i64* %RSI
  %954 = load i64, i64* %RCX
  %955 = add i64 %954, 16
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 4
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i32*
  %959 = load i32, i32* %958
  %960 = shl i64 %953, 32
  %961 = ashr exact i64 %960, 32
  %962 = sext i32 %959 to i64
  %963 = mul nsw i64 %962, %961
  %964 = trunc i64 %963 to i32
  %965 = and i64 %963, 4294967295
  store i64 %965, i64* %RSI, align 8, !tbaa !2428
  %966 = shl i64 %963, 32
  %967 = ashr exact i64 %966, 32
  %968 = icmp ne i64 %967, %963
  %969 = zext i1 %968 to i8
  %970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %969, i8* %970, align 1, !tbaa !2434
  %971 = and i32 %964, 255
  %972 = call i32 @llvm.ctpop.i32(i32 %971) #16
  %973 = trunc i32 %972 to i8
  %974 = and i8 %973, 1
  %975 = xor i8 %974, 1
  %976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %975, i8* %976, align 1, !tbaa !2448
  %977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %977, align 1, !tbaa !2449
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %978, align 1, !tbaa !2450
  %979 = lshr i32 %964, 31
  %980 = trunc i32 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %980, i8* %981, align 1, !tbaa !2451
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %969, i8* %982, align 1, !tbaa !2452
  %983 = load i64, i64* %RBP
  %984 = sub i64 %983, 64
  %985 = load i64, i64* %PC
  %986 = add i64 %985, 4
  store i64 %986, i64* %PC
  %987 = inttoptr i64 %984 to i64*
  %988 = load i64, i64* %987
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = load i64, i64* %RSI
  %990 = load i64, i64* %RCX
  %991 = add i64 %990, 20
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 4
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i32*
  %995 = load i32, i32* %994
  %996 = shl i64 %989, 32
  %997 = ashr exact i64 %996, 32
  %998 = sext i32 %995 to i64
  %999 = mul nsw i64 %998, %997
  %1000 = trunc i64 %999 to i32
  %1001 = and i64 %999, 4294967295
  store i64 %1001, i64* %RSI, align 8, !tbaa !2428
  %1002 = shl i64 %999, 32
  %1003 = ashr exact i64 %1002, 32
  %1004 = icmp ne i64 %1003, %999
  %1005 = zext i1 %1004 to i8
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1005, i8* %1006, align 1, !tbaa !2434
  %1007 = and i32 %1000, 255
  %1008 = call i32 @llvm.ctpop.i32(i32 %1007) #16
  %1009 = trunc i32 %1008 to i8
  %1010 = and i8 %1009, 1
  %1011 = xor i8 %1010, 1
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1011, i8* %1012, align 1, !tbaa !2448
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1013, align 1, !tbaa !2449
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1014, align 1, !tbaa !2450
  %1015 = lshr i32 %1000, 31
  %1016 = trunc i32 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1016, i8* %1017, align 1, !tbaa !2451
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1005, i8* %1018, align 1, !tbaa !2452
  %1019 = load i64, i64* %RDX
  %1020 = load i32, i32* %ESI
  %1021 = zext i32 %1020 to i64
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 2
  store i64 %1023, i64* %PC
  %1024 = trunc i64 %1019 to i32
  %1025 = add i32 %1020, %1024
  %1026 = zext i32 %1025 to i64
  store i64 %1026, i64* %RDX, align 8, !tbaa !2428
  %1027 = icmp ult i32 %1025, %1024
  %1028 = icmp ult i32 %1025, %1020
  %1029 = or i1 %1027, %1028
  %1030 = zext i1 %1029 to i8
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1030, i8* %1031, align 1, !tbaa !2434
  %1032 = and i32 %1025, 255
  %1033 = call i32 @llvm.ctpop.i32(i32 %1032) #16
  %1034 = trunc i32 %1033 to i8
  %1035 = and i8 %1034, 1
  %1036 = xor i8 %1035, 1
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1036, i8* %1037, align 1, !tbaa !2448
  %1038 = xor i64 %1021, %1019
  %1039 = trunc i64 %1038 to i32
  %1040 = xor i32 %1039, %1025
  %1041 = lshr i32 %1040, 4
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1043, i8* %1044, align 1, !tbaa !2449
  %1045 = icmp eq i32 %1025, 0
  %1046 = zext i1 %1045 to i8
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1046, i8* %1047, align 1, !tbaa !2450
  %1048 = lshr i32 %1025, 31
  %1049 = trunc i32 %1048 to i8
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1049, i8* %1050, align 1, !tbaa !2451
  %1051 = lshr i32 %1024, 31
  %1052 = lshr i32 %1020, 31
  %1053 = xor i32 %1048, %1051
  %1054 = xor i32 %1048, %1052
  %1055 = add nuw nsw i32 %1053, %1054
  %1056 = icmp eq i32 %1055, 2
  %1057 = zext i1 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1057, i8* %1058, align 1, !tbaa !2452
  %1059 = load i64, i64* %RBP
  %1060 = sub i64 %1059, 72
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 3
  store i64 %1062, i64* %PC
  %1063 = inttoptr i64 %1060 to i32*
  %1064 = load i32, i32* %1063
  %1065 = zext i32 %1064 to i64
  store i64 %1065, i64* %RSI, align 8, !tbaa !2428
  %1066 = load i64, i64* %RBP
  %1067 = sub i64 %1066, 64
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1067 to i64*
  %1071 = load i64, i64* %1070
  store i64 %1071, i64* %RCX, align 8, !tbaa !2428
  %1072 = load i64, i64* %RSI
  %1073 = load i64, i64* %RCX
  %1074 = add i64 %1073, 20
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 4
  store i64 %1076, i64* %PC
  %1077 = inttoptr i64 %1074 to i32*
  %1078 = load i32, i32* %1077
  %1079 = shl i64 %1072, 32
  %1080 = ashr exact i64 %1079, 32
  %1081 = sext i32 %1078 to i64
  %1082 = mul nsw i64 %1081, %1080
  %1083 = trunc i64 %1082 to i32
  %1084 = and i64 %1082, 4294967295
  store i64 %1084, i64* %RSI, align 8, !tbaa !2428
  %1085 = shl i64 %1082, 32
  %1086 = ashr exact i64 %1085, 32
  %1087 = icmp ne i64 %1086, %1082
  %1088 = zext i1 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1088, i8* %1089, align 1, !tbaa !2434
  %1090 = and i32 %1083, 255
  %1091 = call i32 @llvm.ctpop.i32(i32 %1090) #16
  %1092 = trunc i32 %1091 to i8
  %1093 = and i8 %1092, 1
  %1094 = xor i8 %1093, 1
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1094, i8* %1095, align 1, !tbaa !2448
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1096, align 1, !tbaa !2449
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1097, align 1, !tbaa !2450
  %1098 = lshr i32 %1083, 31
  %1099 = trunc i32 %1098 to i8
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1099, i8* %1100, align 1, !tbaa !2451
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1088, i8* %1101, align 1, !tbaa !2452
  %1102 = load i64, i64* %RDX
  %1103 = load i32, i32* %ESI
  %1104 = zext i32 %1103 to i64
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 2
  store i64 %1106, i64* %PC
  %1107 = trunc i64 %1102 to i32
  %1108 = add i32 %1103, %1107
  %1109 = zext i32 %1108 to i64
  store i64 %1109, i64* %RDX, align 8, !tbaa !2428
  %1110 = icmp ult i32 %1108, %1107
  %1111 = icmp ult i32 %1108, %1103
  %1112 = or i1 %1110, %1111
  %1113 = zext i1 %1112 to i8
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1113, i8* %1114, align 1, !tbaa !2434
  %1115 = and i32 %1108, 255
  %1116 = call i32 @llvm.ctpop.i32(i32 %1115) #16
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = xor i8 %1118, 1
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1119, i8* %1120, align 1, !tbaa !2448
  %1121 = xor i64 %1104, %1102
  %1122 = trunc i64 %1121 to i32
  %1123 = xor i32 %1122, %1108
  %1124 = lshr i32 %1123, 4
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1126, i8* %1127, align 1, !tbaa !2449
  %1128 = icmp eq i32 %1108, 0
  %1129 = zext i1 %1128 to i8
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1129, i8* %1130, align 1, !tbaa !2450
  %1131 = lshr i32 %1108, 31
  %1132 = trunc i32 %1131 to i8
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1132, i8* %1133, align 1, !tbaa !2451
  %1134 = lshr i32 %1107, 31
  %1135 = lshr i32 %1103, 31
  %1136 = xor i32 %1131, %1134
  %1137 = xor i32 %1131, %1135
  %1138 = add nuw nsw i32 %1136, %1137
  %1139 = icmp eq i32 %1138, 2
  %1140 = zext i1 %1139 to i8
  %1141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1140, i8* %1141, align 1, !tbaa !2452
  %1142 = load i64, i64* %RDX
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 76
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 3
  store i64 %1146, i64* %PC
  %1147 = trunc i64 %1142 to i32
  %1148 = inttoptr i64 %1144 to i32*
  %1149 = load i32, i32* %1148
  %1150 = add i32 %1149, %1147
  %1151 = zext i32 %1150 to i64
  store i64 %1151, i64* %RDX, align 8, !tbaa !2428
  %1152 = icmp ult i32 %1150, %1147
  %1153 = icmp ult i32 %1150, %1149
  %1154 = or i1 %1152, %1153
  %1155 = zext i1 %1154 to i8
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1155, i8* %1156, align 1, !tbaa !2434
  %1157 = and i32 %1150, 255
  %1158 = call i32 @llvm.ctpop.i32(i32 %1157) #16
  %1159 = trunc i32 %1158 to i8
  %1160 = and i8 %1159, 1
  %1161 = xor i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1161, i8* %1162, align 1, !tbaa !2448
  %1163 = xor i32 %1149, %1147
  %1164 = xor i32 %1163, %1150
  %1165 = lshr i32 %1164, 4
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1167, i8* %1168, align 1, !tbaa !2449
  %1169 = icmp eq i32 %1150, 0
  %1170 = zext i1 %1169 to i8
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1170, i8* %1171, align 1, !tbaa !2450
  %1172 = lshr i32 %1150, 31
  %1173 = trunc i32 %1172 to i8
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1173, i8* %1174, align 1, !tbaa !2451
  %1175 = lshr i32 %1147, 31
  %1176 = lshr i32 %1149, 31
  %1177 = xor i32 %1172, %1175
  %1178 = xor i32 %1172, %1176
  %1179 = add nuw nsw i32 %1177, %1178
  %1180 = icmp eq i32 %1179, 2
  %1181 = zext i1 %1180 to i8
  %1182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1181, i8* %1182, align 1, !tbaa !2452
  %1183 = load i32, i32* %EDX
  %1184 = zext i32 %1183 to i64
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 3
  store i64 %1186, i64* %PC
  %1187 = shl i64 %1184, 32
  %1188 = ashr exact i64 %1187, 32
  store i64 %1188, i64* %RCX, align 8, !tbaa !2428
  %1189 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1190 = load i64, i64* %RAX
  %1191 = load i64, i64* %RCX
  %1192 = mul i64 %1191, 4
  %1193 = add i64 %1192, %1190
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 5
  store i64 %1195, i64* %PC
  %1196 = inttoptr i64 %1193 to float*
  %1197 = load float, float* %1196
  %1198 = bitcast i8* %1189 to float*
  store float %1197, float* %1198, align 1, !tbaa !2453
  %1199 = getelementptr inbounds i8, i8* %1189, i64 4
  %1200 = bitcast i8* %1199 to float*
  store float 0.000000e+00, float* %1200, align 1, !tbaa !2453
  %1201 = getelementptr inbounds i8, i8* %1189, i64 8
  %1202 = bitcast i8* %1201 to float*
  store float 0.000000e+00, float* %1202, align 1, !tbaa !2453
  %1203 = getelementptr inbounds i8, i8* %1189, i64 12
  %1204 = bitcast i8* %1203 to float*
  store float 0.000000e+00, float* %1204, align 1, !tbaa !2453
  %1205 = load i64, i64* %RBP
  %1206 = sub i64 %1205, 40
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 4
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i64*
  %1210 = load i64, i64* %1209
  store i64 %1210, i64* %RAX, align 8, !tbaa !2428
  %1211 = load i64, i64* %RAX
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i64*
  %1215 = load i64, i64* %1214
  store i64 %1215, i64* %RAX, align 8, !tbaa !2428
  %1216 = load i64, i64* %RBP
  %1217 = sub i64 %1216, 40
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 4
  store i64 %1219, i64* %PC
  %1220 = inttoptr i64 %1217 to i64*
  %1221 = load i64, i64* %1220
  store i64 %1221, i64* %RCX, align 8, !tbaa !2428
  %1222 = load i64, i64* %RCX
  %1223 = add i64 %1222, 12
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 4
  store i64 %1225, i64* %PC
  %1226 = inttoptr i64 %1223 to i32*
  %1227 = load i32, i32* %1226
  %1228 = sext i32 %1227 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1229, align 1, !tbaa !2434
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %1230, align 1, !tbaa !2448
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1231, align 1, !tbaa !2449
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1232, align 1, !tbaa !2450
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1233, align 1, !tbaa !2451
  %1234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1234, align 1, !tbaa !2452
  %1235 = load i64, i64* %RBP
  %1236 = sub i64 %1235, 40
  %1237 = load i64, i64* %PC
  %1238 = add i64 %1237, 4
  store i64 %1238, i64* %PC
  %1239 = inttoptr i64 %1236 to i64*
  %1240 = load i64, i64* %1239
  store i64 %1240, i64* %RCX, align 8, !tbaa !2428
  %1241 = load i64, i64* %RDX
  %1242 = load i64, i64* %RCX
  %1243 = add i64 %1242, 16
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 4
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i32*
  %1247 = load i32, i32* %1246
  %1248 = shl i64 %1241, 32
  %1249 = ashr exact i64 %1248, 32
  %1250 = sext i32 %1247 to i64
  %1251 = mul nsw i64 %1250, %1249
  %1252 = trunc i64 %1251 to i32
  %1253 = and i64 %1251, 4294967295
  store i64 %1253, i64* %RDX, align 8, !tbaa !2428
  %1254 = shl i64 %1251, 32
  %1255 = ashr exact i64 %1254, 32
  %1256 = icmp ne i64 %1255, %1251
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1257, i8* %1258, align 1, !tbaa !2434
  %1259 = and i32 %1252, 255
  %1260 = call i32 @llvm.ctpop.i32(i32 %1259) #16
  %1261 = trunc i32 %1260 to i8
  %1262 = and i8 %1261, 1
  %1263 = xor i8 %1262, 1
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1263, i8* %1264, align 1, !tbaa !2448
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1265, align 1, !tbaa !2449
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1266, align 1, !tbaa !2450
  %1267 = lshr i32 %1252, 31
  %1268 = trunc i32 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1268, i8* %1269, align 1, !tbaa !2451
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1257, i8* %1270, align 1, !tbaa !2452
  %1271 = load i64, i64* %RBP
  %1272 = sub i64 %1271, 40
  %1273 = load i64, i64* %PC
  %1274 = add i64 %1273, 4
  store i64 %1274, i64* %PC
  %1275 = inttoptr i64 %1272 to i64*
  %1276 = load i64, i64* %1275
  store i64 %1276, i64* %RCX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RDX
  %1278 = load i64, i64* %RCX
  %1279 = add i64 %1278, 20
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 4
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i32*
  %1283 = load i32, i32* %1282
  %1284 = shl i64 %1277, 32
  %1285 = ashr exact i64 %1284, 32
  %1286 = sext i32 %1283 to i64
  %1287 = mul nsw i64 %1286, %1285
  %1288 = trunc i64 %1287 to i32
  %1289 = and i64 %1287, 4294967295
  store i64 %1289, i64* %RDX, align 8, !tbaa !2428
  %1290 = shl i64 %1287, 32
  %1291 = ashr exact i64 %1290, 32
  %1292 = icmp ne i64 %1291, %1287
  %1293 = zext i1 %1292 to i8
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1293, i8* %1294, align 1, !tbaa !2434
  %1295 = and i32 %1288, 255
  %1296 = call i32 @llvm.ctpop.i32(i32 %1295) #16
  %1297 = trunc i32 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = xor i8 %1298, 1
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1299, i8* %1300, align 1, !tbaa !2448
  %1301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1301, align 1, !tbaa !2449
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1302, align 1, !tbaa !2450
  %1303 = lshr i32 %1288, 31
  %1304 = trunc i32 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1304, i8* %1305, align 1, !tbaa !2451
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1293, i8* %1306, align 1, !tbaa !2452
  %1307 = load i64, i64* %RBP
  %1308 = sub i64 %1307, 68
  %1309 = load i64, i64* %PC
  %1310 = add i64 %1309, 3
  store i64 %1310, i64* %PC
  %1311 = inttoptr i64 %1308 to i32*
  %1312 = load i32, i32* %1311
  %1313 = zext i32 %1312 to i64
  store i64 %1313, i64* %RSI, align 8, !tbaa !2428
  %1314 = load i64, i64* %RBP
  %1315 = sub i64 %1314, 40
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 4
  store i64 %1317, i64* %PC
  %1318 = inttoptr i64 %1315 to i64*
  %1319 = load i64, i64* %1318
  store i64 %1319, i64* %RCX, align 8, !tbaa !2428
  %1320 = load i64, i64* %RSI
  %1321 = load i64, i64* %RCX
  %1322 = add i64 %1321, 16
  %1323 = load i64, i64* %PC
  %1324 = add i64 %1323, 4
  store i64 %1324, i64* %PC
  %1325 = inttoptr i64 %1322 to i32*
  %1326 = load i32, i32* %1325
  %1327 = shl i64 %1320, 32
  %1328 = ashr exact i64 %1327, 32
  %1329 = sext i32 %1326 to i64
  %1330 = mul nsw i64 %1329, %1328
  %1331 = trunc i64 %1330 to i32
  %1332 = and i64 %1330, 4294967295
  store i64 %1332, i64* %RSI, align 8, !tbaa !2428
  %1333 = shl i64 %1330, 32
  %1334 = ashr exact i64 %1333, 32
  %1335 = icmp ne i64 %1334, %1330
  %1336 = zext i1 %1335 to i8
  %1337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1336, i8* %1337, align 1, !tbaa !2434
  %1338 = and i32 %1331, 255
  %1339 = call i32 @llvm.ctpop.i32(i32 %1338) #16
  %1340 = trunc i32 %1339 to i8
  %1341 = and i8 %1340, 1
  %1342 = xor i8 %1341, 1
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1342, i8* %1343, align 1, !tbaa !2448
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1344, align 1, !tbaa !2449
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1345, align 1, !tbaa !2450
  %1346 = lshr i32 %1331, 31
  %1347 = trunc i32 %1346 to i8
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1347, i8* %1348, align 1, !tbaa !2451
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1336, i8* %1349, align 1, !tbaa !2452
  %1350 = load i64, i64* %RBP
  %1351 = sub i64 %1350, 40
  %1352 = load i64, i64* %PC
  %1353 = add i64 %1352, 4
  store i64 %1353, i64* %PC
  %1354 = inttoptr i64 %1351 to i64*
  %1355 = load i64, i64* %1354
  store i64 %1355, i64* %RCX, align 8, !tbaa !2428
  %1356 = load i64, i64* %RSI
  %1357 = load i64, i64* %RCX
  %1358 = add i64 %1357, 20
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 4
  store i64 %1360, i64* %PC
  %1361 = inttoptr i64 %1358 to i32*
  %1362 = load i32, i32* %1361
  %1363 = shl i64 %1356, 32
  %1364 = ashr exact i64 %1363, 32
  %1365 = sext i32 %1362 to i64
  %1366 = mul nsw i64 %1365, %1364
  %1367 = trunc i64 %1366 to i32
  %1368 = and i64 %1366, 4294967295
  store i64 %1368, i64* %RSI, align 8, !tbaa !2428
  %1369 = shl i64 %1366, 32
  %1370 = ashr exact i64 %1369, 32
  %1371 = icmp ne i64 %1370, %1366
  %1372 = zext i1 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1372, i8* %1373, align 1, !tbaa !2434
  %1374 = and i32 %1367, 255
  %1375 = call i32 @llvm.ctpop.i32(i32 %1374) #16
  %1376 = trunc i32 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = xor i8 %1377, 1
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1378, i8* %1379, align 1, !tbaa !2448
  %1380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1380, align 1, !tbaa !2449
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1381, align 1, !tbaa !2450
  %1382 = lshr i32 %1367, 31
  %1383 = trunc i32 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1383, i8* %1384, align 1, !tbaa !2451
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1372, i8* %1385, align 1, !tbaa !2452
  %1386 = load i64, i64* %RDX
  %1387 = load i32, i32* %ESI
  %1388 = zext i32 %1387 to i64
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 2
  store i64 %1390, i64* %PC
  %1391 = trunc i64 %1386 to i32
  %1392 = add i32 %1387, %1391
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RDX, align 8, !tbaa !2428
  %1394 = icmp ult i32 %1392, %1391
  %1395 = icmp ult i32 %1392, %1387
  %1396 = or i1 %1394, %1395
  %1397 = zext i1 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1397, i8* %1398, align 1, !tbaa !2434
  %1399 = and i32 %1392, 255
  %1400 = call i32 @llvm.ctpop.i32(i32 %1399) #16
  %1401 = trunc i32 %1400 to i8
  %1402 = and i8 %1401, 1
  %1403 = xor i8 %1402, 1
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1403, i8* %1404, align 1, !tbaa !2448
  %1405 = xor i64 %1388, %1386
  %1406 = trunc i64 %1405 to i32
  %1407 = xor i32 %1406, %1392
  %1408 = lshr i32 %1407, 4
  %1409 = trunc i32 %1408 to i8
  %1410 = and i8 %1409, 1
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1410, i8* %1411, align 1, !tbaa !2449
  %1412 = icmp eq i32 %1392, 0
  %1413 = zext i1 %1412 to i8
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1413, i8* %1414, align 1, !tbaa !2450
  %1415 = lshr i32 %1392, 31
  %1416 = trunc i32 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1416, i8* %1417, align 1, !tbaa !2451
  %1418 = lshr i32 %1391, 31
  %1419 = lshr i32 %1387, 31
  %1420 = xor i32 %1415, %1418
  %1421 = xor i32 %1415, %1419
  %1422 = add nuw nsw i32 %1420, %1421
  %1423 = icmp eq i32 %1422, 2
  %1424 = zext i1 %1423 to i8
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1424, i8* %1425, align 1, !tbaa !2452
  %1426 = load i64, i64* %RBP
  %1427 = sub i64 %1426, 72
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 3
  store i64 %1429, i64* %PC
  %1430 = inttoptr i64 %1427 to i32*
  %1431 = load i32, i32* %1430
  %1432 = zext i32 %1431 to i64
  store i64 %1432, i64* %RSI, align 8, !tbaa !2428
  %1433 = load i64, i64* %RBP
  %1434 = sub i64 %1433, 40
  %1435 = load i64, i64* %PC
  %1436 = add i64 %1435, 4
  store i64 %1436, i64* %PC
  %1437 = inttoptr i64 %1434 to i64*
  %1438 = load i64, i64* %1437
  store i64 %1438, i64* %RCX, align 8, !tbaa !2428
  %1439 = load i64, i64* %RSI
  %1440 = load i64, i64* %RCX
  %1441 = add i64 %1440, 20
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1441 to i32*
  %1445 = load i32, i32* %1444
  %1446 = shl i64 %1439, 32
  %1447 = ashr exact i64 %1446, 32
  %1448 = sext i32 %1445 to i64
  %1449 = mul nsw i64 %1448, %1447
  %1450 = trunc i64 %1449 to i32
  %1451 = and i64 %1449, 4294967295
  store i64 %1451, i64* %RSI, align 8, !tbaa !2428
  %1452 = shl i64 %1449, 32
  %1453 = ashr exact i64 %1452, 32
  %1454 = icmp ne i64 %1453, %1449
  %1455 = zext i1 %1454 to i8
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1455, i8* %1456, align 1, !tbaa !2434
  %1457 = and i32 %1450, 255
  %1458 = call i32 @llvm.ctpop.i32(i32 %1457) #16
  %1459 = trunc i32 %1458 to i8
  %1460 = and i8 %1459, 1
  %1461 = xor i8 %1460, 1
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1461, i8* %1462, align 1, !tbaa !2448
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1463, align 1, !tbaa !2449
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1464, align 1, !tbaa !2450
  %1465 = lshr i32 %1450, 31
  %1466 = trunc i32 %1465 to i8
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1466, i8* %1467, align 1, !tbaa !2451
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1455, i8* %1468, align 1, !tbaa !2452
  %1469 = load i64, i64* %RDX
  %1470 = load i32, i32* %ESI
  %1471 = zext i32 %1470 to i64
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 2
  store i64 %1473, i64* %PC
  %1474 = trunc i64 %1469 to i32
  %1475 = add i32 %1470, %1474
  %1476 = zext i32 %1475 to i64
  store i64 %1476, i64* %RDX, align 8, !tbaa !2428
  %1477 = icmp ult i32 %1475, %1474
  %1478 = icmp ult i32 %1475, %1470
  %1479 = or i1 %1477, %1478
  %1480 = zext i1 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1480, i8* %1481, align 1, !tbaa !2434
  %1482 = and i32 %1475, 255
  %1483 = call i32 @llvm.ctpop.i32(i32 %1482) #16
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = xor i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1486, i8* %1487, align 1, !tbaa !2448
  %1488 = xor i64 %1471, %1469
  %1489 = trunc i64 %1488 to i32
  %1490 = xor i32 %1489, %1475
  %1491 = lshr i32 %1490, 4
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1493, i8* %1494, align 1, !tbaa !2449
  %1495 = icmp eq i32 %1475, 0
  %1496 = zext i1 %1495 to i8
  %1497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1496, i8* %1497, align 1, !tbaa !2450
  %1498 = lshr i32 %1475, 31
  %1499 = trunc i32 %1498 to i8
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1499, i8* %1500, align 1, !tbaa !2451
  %1501 = lshr i32 %1474, 31
  %1502 = lshr i32 %1470, 31
  %1503 = xor i32 %1498, %1501
  %1504 = xor i32 %1498, %1502
  %1505 = add nuw nsw i32 %1503, %1504
  %1506 = icmp eq i32 %1505, 2
  %1507 = zext i1 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1507, i8* %1508, align 1, !tbaa !2452
  %1509 = load i64, i64* %RDX
  %1510 = load i64, i64* %RBP
  %1511 = sub i64 %1510, 76
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 3
  store i64 %1513, i64* %PC
  %1514 = trunc i64 %1509 to i32
  %1515 = inttoptr i64 %1511 to i32*
  %1516 = load i32, i32* %1515
  %1517 = add i32 %1516, %1514
  %1518 = zext i32 %1517 to i64
  store i64 %1518, i64* %RDX, align 8, !tbaa !2428
  %1519 = icmp ult i32 %1517, %1514
  %1520 = icmp ult i32 %1517, %1516
  %1521 = or i1 %1519, %1520
  %1522 = zext i1 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1522, i8* %1523, align 1, !tbaa !2434
  %1524 = and i32 %1517, 255
  %1525 = call i32 @llvm.ctpop.i32(i32 %1524) #16
  %1526 = trunc i32 %1525 to i8
  %1527 = and i8 %1526, 1
  %1528 = xor i8 %1527, 1
  %1529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1528, i8* %1529, align 1, !tbaa !2448
  %1530 = xor i32 %1516, %1514
  %1531 = xor i32 %1530, %1517
  %1532 = lshr i32 %1531, 4
  %1533 = trunc i32 %1532 to i8
  %1534 = and i8 %1533, 1
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1534, i8* %1535, align 1, !tbaa !2449
  %1536 = icmp eq i32 %1517, 0
  %1537 = zext i1 %1536 to i8
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1537, i8* %1538, align 1, !tbaa !2450
  %1539 = lshr i32 %1517, 31
  %1540 = trunc i32 %1539 to i8
  %1541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1540, i8* %1541, align 1, !tbaa !2451
  %1542 = lshr i32 %1514, 31
  %1543 = lshr i32 %1516, 31
  %1544 = xor i32 %1539, %1542
  %1545 = xor i32 %1539, %1543
  %1546 = add nuw nsw i32 %1544, %1545
  %1547 = icmp eq i32 %1546, 2
  %1548 = zext i1 %1547 to i8
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1548, i8* %1549, align 1, !tbaa !2452
  %1550 = load i32, i32* %EDX
  %1551 = zext i32 %1550 to i64
  %1552 = load i64, i64* %PC
  %1553 = add i64 %1552, 3
  store i64 %1553, i64* %PC
  %1554 = shl i64 %1551, 32
  %1555 = ashr exact i64 %1554, 32
  store i64 %1555, i64* %RCX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RAX
  %1557 = load i64, i64* %RCX
  %1558 = mul i64 %1557, 4
  %1559 = add i64 %1558, %1556
  %1560 = bitcast %union.vec128_t* %XMM0 to i8*
  %1561 = load i64, i64* %PC
  %1562 = add i64 %1561, 5
  store i64 %1562, i64* %PC
  %1563 = bitcast i8* %1560 to <2 x float>*
  %1564 = load <2 x float>, <2 x float>* %1563, align 1
  %1565 = extractelement <2 x float> %1564, i32 0
  %1566 = inttoptr i64 %1559 to float*
  store float %1565, float* %1566
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 76
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 3
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i32*
  %1572 = load i32, i32* %1571
  %1573 = zext i32 %1572 to i64
  store i64 %1573, i64* %RAX, align 8, !tbaa !2428
  %1574 = load i64, i64* %RAX
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 3
  store i64 %1576, i64* %PC
  %1577 = trunc i64 %1574 to i32
  %1578 = add i32 1, %1577
  %1579 = zext i32 %1578 to i64
  store i64 %1579, i64* %RAX, align 8, !tbaa !2428
  %1580 = icmp ult i32 %1578, %1577
  %1581 = icmp ult i32 %1578, 1
  %1582 = or i1 %1580, %1581
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1583, i8* %1584, align 1, !tbaa !2434
  %1585 = and i32 %1578, 255
  %1586 = call i32 @llvm.ctpop.i32(i32 %1585) #16
  %1587 = trunc i32 %1586 to i8
  %1588 = and i8 %1587, 1
  %1589 = xor i8 %1588, 1
  %1590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1589, i8* %1590, align 1, !tbaa !2448
  %1591 = xor i64 1, %1574
  %1592 = trunc i64 %1591 to i32
  %1593 = xor i32 %1592, %1578
  %1594 = lshr i32 %1593, 4
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1596, i8* %1597, align 1, !tbaa !2449
  %1598 = icmp eq i32 %1578, 0
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1599, i8* %1600, align 1, !tbaa !2450
  %1601 = lshr i32 %1578, 31
  %1602 = trunc i32 %1601 to i8
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1602, i8* %1603, align 1, !tbaa !2451
  %1604 = lshr i32 %1577, 31
  %1605 = xor i32 %1601, %1604
  %1606 = add nuw nsw i32 %1605, %1601
  %1607 = icmp eq i32 %1606, 2
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1608, i8* %1609, align 1, !tbaa !2452
  %1610 = load i64, i64* %RBP
  %1611 = sub i64 %1610, 76
  %1612 = load i32, i32* %EAX
  %1613 = zext i32 %1612 to i64
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 3
  store i64 %1615, i64* %PC
  %1616 = inttoptr i64 %1611 to i32*
  store i32 %1612, i32* %1616
  %1617 = load i64, i64* %PC
  %1618 = sub i64 %1617, 173
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 5
  store i64 %1620, i64* %PC
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1618, i64* %1621, align 8, !tbaa !2428
  br label %block_40189e

block_400d70:                                     ; preds = %block_400d64
  %1622 = sub i64 %554, 72
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 7
  store i64 %1624, i64* %PC
  %1625 = inttoptr i64 %1622 to i32*
  store i32 1, i32* %1625
  br label %block_400d77

block_40189e:                                     ; preds = %block_401897, %block_4018aa
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_401897 ], [ %MEMORY.3, %block_4018aa ]
  %1626 = load i64, i64* %RBP
  %1627 = sub i64 %1626, 76
  %1628 = load i64, i64* %PC
  %1629 = add i64 %1628, 3
  store i64 %1629, i64* %PC
  %1630 = inttoptr i64 %1627 to i32*
  %1631 = load i32, i32* %1630
  %1632 = zext i32 %1631 to i64
  store i64 %1632, i64* %RAX, align 8, !tbaa !2428
  %1633 = load i32, i32* %EAX
  %1634 = zext i32 %1633 to i64
  %1635 = load i64, i64* %RBP
  %1636 = sub i64 %1635, 92
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 3
  store i64 %1638, i64* %PC
  %1639 = inttoptr i64 %1636 to i32*
  %1640 = load i32, i32* %1639
  %1641 = sub i32 %1633, %1640
  %1642 = icmp ult i32 %1633, %1640
  %1643 = zext i1 %1642 to i8
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1643, i8* %1644, align 1, !tbaa !2434
  %1645 = and i32 %1641, 255
  %1646 = call i32 @llvm.ctpop.i32(i32 %1645) #16
  %1647 = trunc i32 %1646 to i8
  %1648 = and i8 %1647, 1
  %1649 = xor i8 %1648, 1
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1649, i8* %1650, align 1, !tbaa !2448
  %1651 = xor i32 %1640, %1633
  %1652 = xor i32 %1651, %1641
  %1653 = lshr i32 %1652, 4
  %1654 = trunc i32 %1653 to i8
  %1655 = and i8 %1654, 1
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1655, i8* %1656, align 1, !tbaa !2449
  %1657 = icmp eq i32 %1641, 0
  %1658 = zext i1 %1657 to i8
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1658, i8* %1659, align 1, !tbaa !2450
  %1660 = lshr i32 %1641, 31
  %1661 = trunc i32 %1660 to i8
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1661, i8* %1662, align 1, !tbaa !2451
  %1663 = lshr i32 %1633, 31
  %1664 = lshr i32 %1640, 31
  %1665 = xor i32 %1664, %1663
  %1666 = xor i32 %1660, %1663
  %1667 = add nuw nsw i32 %1666, %1665
  %1668 = icmp eq i32 %1667, 2
  %1669 = zext i1 %1668 to i8
  %1670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1669, i8* %1670, align 1, !tbaa !2452
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 172
  %1673 = load i64, i64* %PC
  %1674 = add i64 %1673, 6
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 6
  store i64 %1676, i64* %PC
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1678 = load i8, i8* %1677, align 1, !tbaa !2451
  %1679 = icmp ne i8 %1678, 0
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1681 = load i8, i8* %1680, align 1, !tbaa !2452
  %1682 = icmp ne i8 %1681, 0
  %1683 = xor i1 %1679, %1682
  %1684 = xor i1 %1683, true
  %1685 = zext i1 %1684 to i8
  store i8 %1685, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1687 = select i1 %1683, i64 %1674, i64 %1672
  store i64 %1687, i64* %1686, align 8, !tbaa !2428
  %1688 = load i8, i8* %BRANCH_TAKEN
  %1689 = icmp eq i8 %1688, 1
  br i1 %1689, label %block_401950, label %block_4018aa

block_401897:                                     ; preds = %block_40188b
  %1690 = load i64, i64* %RBP
  %1691 = sub i64 %1690, 76
  %1692 = load i64, i64* %PC
  %1693 = add i64 %1692, 7
  store i64 %1693, i64* %PC
  %1694 = inttoptr i64 %1691 to i32*
  store i32 1, i32* %1694
  br label %block_40189e

block_400d96:                                     ; preds = %block_400d8a
  %1695 = load i64, i64* %RBP
  %1696 = sub i64 %1695, 16
  %1697 = load i64, i64* %PC
  %1698 = add i64 %1697, 4
  store i64 %1698, i64* %PC
  %1699 = inttoptr i64 %1696 to i64*
  %1700 = load i64, i64* %1699
  store i64 %1700, i64* %RAX, align 8, !tbaa !2428
  %1701 = load i64, i64* %RAX
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 3
  store i64 %1703, i64* %PC
  %1704 = inttoptr i64 %1701 to i64*
  %1705 = load i64, i64* %1704
  store i64 %1705, i64* %RAX, align 8, !tbaa !2428
  %1706 = load i64, i64* %RBP
  %1707 = sub i64 %1706, 16
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 4
  store i64 %1709, i64* %PC
  %1710 = inttoptr i64 %1707 to i64*
  %1711 = load i64, i64* %1710
  store i64 %1711, i64* %RCX, align 8, !tbaa !2428
  %1712 = load i64, i64* %RCX
  %1713 = add i64 %1712, 12
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 4
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1713 to i32*
  %1717 = load i32, i32* %1716
  %1718 = sext i32 %1717 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1719, align 1, !tbaa !2434
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %1720, align 1, !tbaa !2448
  %1721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1721, align 1, !tbaa !2449
  %1722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1722, align 1, !tbaa !2450
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1723, align 1, !tbaa !2451
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1724, align 1, !tbaa !2452
  %1725 = load i64, i64* %RBP
  %1726 = sub i64 %1725, 16
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 4
  store i64 %1728, i64* %PC
  %1729 = inttoptr i64 %1726 to i64*
  %1730 = load i64, i64* %1729
  store i64 %1730, i64* %RCX, align 8, !tbaa !2428
  %1731 = load i64, i64* %RDX
  %1732 = load i64, i64* %RCX
  %1733 = add i64 %1732, 16
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 4
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i32*
  %1737 = load i32, i32* %1736
  %1738 = shl i64 %1731, 32
  %1739 = ashr exact i64 %1738, 32
  %1740 = sext i32 %1737 to i64
  %1741 = mul nsw i64 %1740, %1739
  %1742 = trunc i64 %1741 to i32
  %1743 = and i64 %1741, 4294967295
  store i64 %1743, i64* %RDX, align 8, !tbaa !2428
  %1744 = shl i64 %1741, 32
  %1745 = ashr exact i64 %1744, 32
  %1746 = icmp ne i64 %1745, %1741
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1747, i8* %1748, align 1, !tbaa !2434
  %1749 = and i32 %1742, 255
  %1750 = call i32 @llvm.ctpop.i32(i32 %1749) #16
  %1751 = trunc i32 %1750 to i8
  %1752 = and i8 %1751, 1
  %1753 = xor i8 %1752, 1
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1753, i8* %1754, align 1, !tbaa !2448
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1755, align 1, !tbaa !2449
  %1756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1756, align 1, !tbaa !2450
  %1757 = lshr i32 %1742, 31
  %1758 = trunc i32 %1757 to i8
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1758, i8* %1759, align 1, !tbaa !2451
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1747, i8* %1760, align 1, !tbaa !2452
  %1761 = load i64, i64* %RBP
  %1762 = sub i64 %1761, 16
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 4
  store i64 %1764, i64* %PC
  %1765 = inttoptr i64 %1762 to i64*
  %1766 = load i64, i64* %1765
  store i64 %1766, i64* %RCX, align 8, !tbaa !2428
  %1767 = load i64, i64* %RDX
  %1768 = load i64, i64* %RCX
  %1769 = add i64 %1768, 20
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 4
  store i64 %1771, i64* %PC
  %1772 = inttoptr i64 %1769 to i32*
  %1773 = load i32, i32* %1772
  %1774 = shl i64 %1767, 32
  %1775 = ashr exact i64 %1774, 32
  %1776 = sext i32 %1773 to i64
  %1777 = mul nsw i64 %1776, %1775
  %1778 = trunc i64 %1777 to i32
  %1779 = and i64 %1777, 4294967295
  store i64 %1779, i64* %RDX, align 8, !tbaa !2428
  %1780 = shl i64 %1777, 32
  %1781 = ashr exact i64 %1780, 32
  %1782 = icmp ne i64 %1781, %1777
  %1783 = zext i1 %1782 to i8
  %1784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1783, i8* %1784, align 1, !tbaa !2434
  %1785 = and i32 %1778, 255
  %1786 = call i32 @llvm.ctpop.i32(i32 %1785) #16
  %1787 = trunc i32 %1786 to i8
  %1788 = and i8 %1787, 1
  %1789 = xor i8 %1788, 1
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1789, i8* %1790, align 1, !tbaa !2448
  %1791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1791, align 1, !tbaa !2449
  %1792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1792, align 1, !tbaa !2450
  %1793 = lshr i32 %1778, 31
  %1794 = trunc i32 %1793 to i8
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1794, i8* %1795, align 1, !tbaa !2451
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1783, i8* %1796, align 1, !tbaa !2452
  %1797 = load i64, i64* %RBP
  %1798 = sub i64 %1797, 68
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 3
  store i64 %1800, i64* %PC
  %1801 = inttoptr i64 %1798 to i32*
  %1802 = load i32, i32* %1801
  %1803 = zext i32 %1802 to i64
  store i64 %1803, i64* %RSI, align 8, !tbaa !2428
  %1804 = load i64, i64* %RBP
  %1805 = sub i64 %1804, 16
  %1806 = load i64, i64* %PC
  %1807 = add i64 %1806, 4
  store i64 %1807, i64* %PC
  %1808 = inttoptr i64 %1805 to i64*
  %1809 = load i64, i64* %1808
  store i64 %1809, i64* %RCX, align 8, !tbaa !2428
  %1810 = load i64, i64* %RSI
  %1811 = load i64, i64* %RCX
  %1812 = add i64 %1811, 16
  %1813 = load i64, i64* %PC
  %1814 = add i64 %1813, 4
  store i64 %1814, i64* %PC
  %1815 = inttoptr i64 %1812 to i32*
  %1816 = load i32, i32* %1815
  %1817 = shl i64 %1810, 32
  %1818 = ashr exact i64 %1817, 32
  %1819 = sext i32 %1816 to i64
  %1820 = mul nsw i64 %1819, %1818
  %1821 = trunc i64 %1820 to i32
  %1822 = and i64 %1820, 4294967295
  store i64 %1822, i64* %RSI, align 8, !tbaa !2428
  %1823 = shl i64 %1820, 32
  %1824 = ashr exact i64 %1823, 32
  %1825 = icmp ne i64 %1824, %1820
  %1826 = zext i1 %1825 to i8
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1826, i8* %1827, align 1, !tbaa !2434
  %1828 = and i32 %1821, 255
  %1829 = call i32 @llvm.ctpop.i32(i32 %1828) #16
  %1830 = trunc i32 %1829 to i8
  %1831 = and i8 %1830, 1
  %1832 = xor i8 %1831, 1
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1832, i8* %1833, align 1, !tbaa !2448
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1834, align 1, !tbaa !2449
  %1835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1835, align 1, !tbaa !2450
  %1836 = lshr i32 %1821, 31
  %1837 = trunc i32 %1836 to i8
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1837, i8* %1838, align 1, !tbaa !2451
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1826, i8* %1839, align 1, !tbaa !2452
  %1840 = load i64, i64* %RBP
  %1841 = sub i64 %1840, 16
  %1842 = load i64, i64* %PC
  %1843 = add i64 %1842, 4
  store i64 %1843, i64* %PC
  %1844 = inttoptr i64 %1841 to i64*
  %1845 = load i64, i64* %1844
  store i64 %1845, i64* %RCX, align 8, !tbaa !2428
  %1846 = load i64, i64* %RSI
  %1847 = load i64, i64* %RCX
  %1848 = add i64 %1847, 20
  %1849 = load i64, i64* %PC
  %1850 = add i64 %1849, 4
  store i64 %1850, i64* %PC
  %1851 = inttoptr i64 %1848 to i32*
  %1852 = load i32, i32* %1851
  %1853 = shl i64 %1846, 32
  %1854 = ashr exact i64 %1853, 32
  %1855 = sext i32 %1852 to i64
  %1856 = mul nsw i64 %1855, %1854
  %1857 = trunc i64 %1856 to i32
  %1858 = and i64 %1856, 4294967295
  store i64 %1858, i64* %RSI, align 8, !tbaa !2428
  %1859 = shl i64 %1856, 32
  %1860 = ashr exact i64 %1859, 32
  %1861 = icmp ne i64 %1860, %1856
  %1862 = zext i1 %1861 to i8
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1862, i8* %1863, align 1, !tbaa !2434
  %1864 = and i32 %1857, 255
  %1865 = call i32 @llvm.ctpop.i32(i32 %1864) #16
  %1866 = trunc i32 %1865 to i8
  %1867 = and i8 %1866, 1
  %1868 = xor i8 %1867, 1
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1868, i8* %1869, align 1, !tbaa !2448
  %1870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1870, align 1, !tbaa !2449
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1871, align 1, !tbaa !2450
  %1872 = lshr i32 %1857, 31
  %1873 = trunc i32 %1872 to i8
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1873, i8* %1874, align 1, !tbaa !2451
  %1875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1862, i8* %1875, align 1, !tbaa !2452
  %1876 = load i64, i64* %RDX
  %1877 = load i32, i32* %ESI
  %1878 = zext i32 %1877 to i64
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 2
  store i64 %1880, i64* %PC
  %1881 = trunc i64 %1876 to i32
  %1882 = add i32 %1877, %1881
  %1883 = zext i32 %1882 to i64
  store i64 %1883, i64* %RDX, align 8, !tbaa !2428
  %1884 = icmp ult i32 %1882, %1881
  %1885 = icmp ult i32 %1882, %1877
  %1886 = or i1 %1884, %1885
  %1887 = zext i1 %1886 to i8
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1887, i8* %1888, align 1, !tbaa !2434
  %1889 = and i32 %1882, 255
  %1890 = call i32 @llvm.ctpop.i32(i32 %1889) #16
  %1891 = trunc i32 %1890 to i8
  %1892 = and i8 %1891, 1
  %1893 = xor i8 %1892, 1
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1893, i8* %1894, align 1, !tbaa !2448
  %1895 = xor i64 %1878, %1876
  %1896 = trunc i64 %1895 to i32
  %1897 = xor i32 %1896, %1882
  %1898 = lshr i32 %1897, 4
  %1899 = trunc i32 %1898 to i8
  %1900 = and i8 %1899, 1
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1900, i8* %1901, align 1, !tbaa !2449
  %1902 = icmp eq i32 %1882, 0
  %1903 = zext i1 %1902 to i8
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1903, i8* %1904, align 1, !tbaa !2450
  %1905 = lshr i32 %1882, 31
  %1906 = trunc i32 %1905 to i8
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1906, i8* %1907, align 1, !tbaa !2451
  %1908 = lshr i32 %1881, 31
  %1909 = lshr i32 %1877, 31
  %1910 = xor i32 %1905, %1908
  %1911 = xor i32 %1905, %1909
  %1912 = add nuw nsw i32 %1910, %1911
  %1913 = icmp eq i32 %1912, 2
  %1914 = zext i1 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1914, i8* %1915, align 1, !tbaa !2452
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 72
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 3
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i32*
  %1921 = load i32, i32* %1920
  %1922 = zext i32 %1921 to i64
  store i64 %1922, i64* %RSI, align 8, !tbaa !2428
  %1923 = load i64, i64* %RBP
  %1924 = sub i64 %1923, 16
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 4
  store i64 %1926, i64* %PC
  %1927 = inttoptr i64 %1924 to i64*
  %1928 = load i64, i64* %1927
  store i64 %1928, i64* %RCX, align 8, !tbaa !2428
  %1929 = load i64, i64* %RSI
  %1930 = load i64, i64* %RCX
  %1931 = add i64 %1930, 20
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 4
  store i64 %1933, i64* %PC
  %1934 = inttoptr i64 %1931 to i32*
  %1935 = load i32, i32* %1934
  %1936 = shl i64 %1929, 32
  %1937 = ashr exact i64 %1936, 32
  %1938 = sext i32 %1935 to i64
  %1939 = mul nsw i64 %1938, %1937
  %1940 = trunc i64 %1939 to i32
  %1941 = and i64 %1939, 4294967295
  store i64 %1941, i64* %RSI, align 8, !tbaa !2428
  %1942 = shl i64 %1939, 32
  %1943 = ashr exact i64 %1942, 32
  %1944 = icmp ne i64 %1943, %1939
  %1945 = zext i1 %1944 to i8
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1945, i8* %1946, align 1, !tbaa !2434
  %1947 = and i32 %1940, 255
  %1948 = call i32 @llvm.ctpop.i32(i32 %1947) #16
  %1949 = trunc i32 %1948 to i8
  %1950 = and i8 %1949, 1
  %1951 = xor i8 %1950, 1
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1951, i8* %1952, align 1, !tbaa !2448
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1953, align 1, !tbaa !2449
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1954, align 1, !tbaa !2450
  %1955 = lshr i32 %1940, 31
  %1956 = trunc i32 %1955 to i8
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1956, i8* %1957, align 1, !tbaa !2451
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1945, i8* %1958, align 1, !tbaa !2452
  %1959 = load i64, i64* %RDX
  %1960 = load i32, i32* %ESI
  %1961 = zext i32 %1960 to i64
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 2
  store i64 %1963, i64* %PC
  %1964 = trunc i64 %1959 to i32
  %1965 = add i32 %1960, %1964
  %1966 = zext i32 %1965 to i64
  store i64 %1966, i64* %RDX, align 8, !tbaa !2428
  %1967 = icmp ult i32 %1965, %1964
  %1968 = icmp ult i32 %1965, %1960
  %1969 = or i1 %1967, %1968
  %1970 = zext i1 %1969 to i8
  %1971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1970, i8* %1971, align 1, !tbaa !2434
  %1972 = and i32 %1965, 255
  %1973 = call i32 @llvm.ctpop.i32(i32 %1972) #16
  %1974 = trunc i32 %1973 to i8
  %1975 = and i8 %1974, 1
  %1976 = xor i8 %1975, 1
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1976, i8* %1977, align 1, !tbaa !2448
  %1978 = xor i64 %1961, %1959
  %1979 = trunc i64 %1978 to i32
  %1980 = xor i32 %1979, %1965
  %1981 = lshr i32 %1980, 4
  %1982 = trunc i32 %1981 to i8
  %1983 = and i8 %1982, 1
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1983, i8* %1984, align 1, !tbaa !2449
  %1985 = icmp eq i32 %1965, 0
  %1986 = zext i1 %1985 to i8
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1986, i8* %1987, align 1, !tbaa !2450
  %1988 = lshr i32 %1965, 31
  %1989 = trunc i32 %1988 to i8
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1989, i8* %1990, align 1, !tbaa !2451
  %1991 = lshr i32 %1964, 31
  %1992 = lshr i32 %1960, 31
  %1993 = xor i32 %1988, %1991
  %1994 = xor i32 %1988, %1992
  %1995 = add nuw nsw i32 %1993, %1994
  %1996 = icmp eq i32 %1995, 2
  %1997 = zext i1 %1996 to i8
  %1998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1997, i8* %1998, align 1, !tbaa !2452
  %1999 = load i64, i64* %RDX
  %2000 = load i64, i64* %RBP
  %2001 = sub i64 %2000, 76
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 3
  store i64 %2003, i64* %PC
  %2004 = trunc i64 %1999 to i32
  %2005 = inttoptr i64 %2001 to i32*
  %2006 = load i32, i32* %2005
  %2007 = add i32 %2006, %2004
  %2008 = zext i32 %2007 to i64
  store i64 %2008, i64* %RDX, align 8, !tbaa !2428
  %2009 = icmp ult i32 %2007, %2004
  %2010 = icmp ult i32 %2007, %2006
  %2011 = or i1 %2009, %2010
  %2012 = zext i1 %2011 to i8
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2012, i8* %2013, align 1, !tbaa !2434
  %2014 = and i32 %2007, 255
  %2015 = call i32 @llvm.ctpop.i32(i32 %2014) #16
  %2016 = trunc i32 %2015 to i8
  %2017 = and i8 %2016, 1
  %2018 = xor i8 %2017, 1
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2018, i8* %2019, align 1, !tbaa !2448
  %2020 = xor i32 %2006, %2004
  %2021 = xor i32 %2020, %2007
  %2022 = lshr i32 %2021, 4
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2024, i8* %2025, align 1, !tbaa !2449
  %2026 = icmp eq i32 %2007, 0
  %2027 = zext i1 %2026 to i8
  %2028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2027, i8* %2028, align 1, !tbaa !2450
  %2029 = lshr i32 %2007, 31
  %2030 = trunc i32 %2029 to i8
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2030, i8* %2031, align 1, !tbaa !2451
  %2032 = lshr i32 %2004, 31
  %2033 = lshr i32 %2006, 31
  %2034 = xor i32 %2029, %2032
  %2035 = xor i32 %2029, %2033
  %2036 = add nuw nsw i32 %2034, %2035
  %2037 = icmp eq i32 %2036, 2
  %2038 = zext i1 %2037 to i8
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2038, i8* %2039, align 1, !tbaa !2452
  %2040 = load i32, i32* %EDX
  %2041 = zext i32 %2040 to i64
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 3
  store i64 %2043, i64* %PC
  %2044 = shl i64 %2041, 32
  %2045 = ashr exact i64 %2044, 32
  store i64 %2045, i64* %RCX, align 8, !tbaa !2428
  %2046 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2047 = load i64, i64* %RAX
  %2048 = load i64, i64* %RCX
  %2049 = mul i64 %2048, 4
  %2050 = add i64 %2049, %2047
  %2051 = load i64, i64* %PC
  %2052 = add i64 %2051, 5
  store i64 %2052, i64* %PC
  %2053 = inttoptr i64 %2050 to float*
  %2054 = load float, float* %2053
  %2055 = bitcast i8* %2046 to float*
  store float %2054, float* %2055, align 1, !tbaa !2453
  %2056 = getelementptr inbounds i8, i8* %2046, i64 4
  %2057 = bitcast i8* %2056 to float*
  store float 0.000000e+00, float* %2057, align 1, !tbaa !2453
  %2058 = getelementptr inbounds i8, i8* %2046, i64 8
  %2059 = bitcast i8* %2058 to float*
  store float 0.000000e+00, float* %2059, align 1, !tbaa !2453
  %2060 = getelementptr inbounds i8, i8* %2046, i64 12
  %2061 = bitcast i8* %2060 to float*
  store float 0.000000e+00, float* %2061, align 1, !tbaa !2453
  %2062 = load i64, i64* %RBP
  %2063 = sub i64 %2062, 40
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 4
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2063 to i64*
  %2067 = load i64, i64* %2066
  store i64 %2067, i64* %RAX, align 8, !tbaa !2428
  %2068 = load i64, i64* %RAX
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 3
  store i64 %2070, i64* %PC
  %2071 = inttoptr i64 %2068 to i64*
  %2072 = load i64, i64* %2071
  store i64 %2072, i64* %RAX, align 8, !tbaa !2428
  %2073 = load i64, i64* %RBP
  %2074 = sub i64 %2073, 40
  %2075 = load i64, i64* %PC
  %2076 = add i64 %2075, 4
  store i64 %2076, i64* %PC
  %2077 = inttoptr i64 %2074 to i64*
  %2078 = load i64, i64* %2077
  store i64 %2078, i64* %RCX, align 8, !tbaa !2428
  %2079 = load i64, i64* %RCX
  %2080 = add i64 %2079, 12
  %2081 = load i64, i64* %PC
  %2082 = add i64 %2081, 4
  store i64 %2082, i64* %PC
  %2083 = inttoptr i64 %2080 to i32*
  %2084 = load i32, i32* %2083
  %2085 = sext i32 %2084 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2086, align 1, !tbaa !2434
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2087, align 1, !tbaa !2448
  %2088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2088, align 1, !tbaa !2449
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2089, align 1, !tbaa !2450
  %2090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2090, align 1, !tbaa !2451
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2091, align 1, !tbaa !2452
  %2092 = load i64, i64* %RBP
  %2093 = sub i64 %2092, 40
  %2094 = load i64, i64* %PC
  %2095 = add i64 %2094, 4
  store i64 %2095, i64* %PC
  %2096 = inttoptr i64 %2093 to i64*
  %2097 = load i64, i64* %2096
  store i64 %2097, i64* %RCX, align 8, !tbaa !2428
  %2098 = load i64, i64* %RDX
  %2099 = load i64, i64* %RCX
  %2100 = add i64 %2099, 16
  %2101 = load i64, i64* %PC
  %2102 = add i64 %2101, 4
  store i64 %2102, i64* %PC
  %2103 = inttoptr i64 %2100 to i32*
  %2104 = load i32, i32* %2103
  %2105 = shl i64 %2098, 32
  %2106 = ashr exact i64 %2105, 32
  %2107 = sext i32 %2104 to i64
  %2108 = mul nsw i64 %2107, %2106
  %2109 = trunc i64 %2108 to i32
  %2110 = and i64 %2108, 4294967295
  store i64 %2110, i64* %RDX, align 8, !tbaa !2428
  %2111 = shl i64 %2108, 32
  %2112 = ashr exact i64 %2111, 32
  %2113 = icmp ne i64 %2112, %2108
  %2114 = zext i1 %2113 to i8
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2114, i8* %2115, align 1, !tbaa !2434
  %2116 = and i32 %2109, 255
  %2117 = call i32 @llvm.ctpop.i32(i32 %2116) #16
  %2118 = trunc i32 %2117 to i8
  %2119 = and i8 %2118, 1
  %2120 = xor i8 %2119, 1
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2120, i8* %2121, align 1, !tbaa !2448
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2122, align 1, !tbaa !2449
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2123, align 1, !tbaa !2450
  %2124 = lshr i32 %2109, 31
  %2125 = trunc i32 %2124 to i8
  %2126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2125, i8* %2126, align 1, !tbaa !2451
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2114, i8* %2127, align 1, !tbaa !2452
  %2128 = load i64, i64* %RBP
  %2129 = sub i64 %2128, 40
  %2130 = load i64, i64* %PC
  %2131 = add i64 %2130, 4
  store i64 %2131, i64* %PC
  %2132 = inttoptr i64 %2129 to i64*
  %2133 = load i64, i64* %2132
  store i64 %2133, i64* %RCX, align 8, !tbaa !2428
  %2134 = load i64, i64* %RDX
  %2135 = load i64, i64* %RCX
  %2136 = add i64 %2135, 20
  %2137 = load i64, i64* %PC
  %2138 = add i64 %2137, 4
  store i64 %2138, i64* %PC
  %2139 = inttoptr i64 %2136 to i32*
  %2140 = load i32, i32* %2139
  %2141 = shl i64 %2134, 32
  %2142 = ashr exact i64 %2141, 32
  %2143 = sext i32 %2140 to i64
  %2144 = mul nsw i64 %2143, %2142
  %2145 = trunc i64 %2144 to i32
  %2146 = and i64 %2144, 4294967295
  store i64 %2146, i64* %RDX, align 8, !tbaa !2428
  %2147 = shl i64 %2144, 32
  %2148 = ashr exact i64 %2147, 32
  %2149 = icmp ne i64 %2148, %2144
  %2150 = zext i1 %2149 to i8
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2150, i8* %2151, align 1, !tbaa !2434
  %2152 = and i32 %2145, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #16
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2156, i8* %2157, align 1, !tbaa !2448
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2158, align 1, !tbaa !2449
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2159, align 1, !tbaa !2450
  %2160 = lshr i32 %2145, 31
  %2161 = trunc i32 %2160 to i8
  %2162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2161, i8* %2162, align 1, !tbaa !2451
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2150, i8* %2163, align 1, !tbaa !2452
  %2164 = load i64, i64* %RBP
  %2165 = sub i64 %2164, 68
  %2166 = load i64, i64* %PC
  %2167 = add i64 %2166, 3
  store i64 %2167, i64* %PC
  %2168 = inttoptr i64 %2165 to i32*
  %2169 = load i32, i32* %2168
  %2170 = zext i32 %2169 to i64
  store i64 %2170, i64* %RSI, align 8, !tbaa !2428
  %2171 = load i64, i64* %RSI
  %2172 = load i64, i64* %PC
  %2173 = add i64 %2172, 3
  store i64 %2173, i64* %PC
  %2174 = trunc i64 %2171 to i32
  %2175 = add i32 1, %2174
  %2176 = zext i32 %2175 to i64
  store i64 %2176, i64* %RSI, align 8, !tbaa !2428
  %2177 = icmp ult i32 %2175, %2174
  %2178 = icmp ult i32 %2175, 1
  %2179 = or i1 %2177, %2178
  %2180 = zext i1 %2179 to i8
  %2181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2180, i8* %2181, align 1, !tbaa !2434
  %2182 = and i32 %2175, 255
  %2183 = call i32 @llvm.ctpop.i32(i32 %2182) #16
  %2184 = trunc i32 %2183 to i8
  %2185 = and i8 %2184, 1
  %2186 = xor i8 %2185, 1
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2186, i8* %2187, align 1, !tbaa !2448
  %2188 = xor i64 1, %2171
  %2189 = trunc i64 %2188 to i32
  %2190 = xor i32 %2189, %2175
  %2191 = lshr i32 %2190, 4
  %2192 = trunc i32 %2191 to i8
  %2193 = and i8 %2192, 1
  %2194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2193, i8* %2194, align 1, !tbaa !2449
  %2195 = icmp eq i32 %2175, 0
  %2196 = zext i1 %2195 to i8
  %2197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2196, i8* %2197, align 1, !tbaa !2450
  %2198 = lshr i32 %2175, 31
  %2199 = trunc i32 %2198 to i8
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2199, i8* %2200, align 1, !tbaa !2451
  %2201 = lshr i32 %2174, 31
  %2202 = xor i32 %2198, %2201
  %2203 = add nuw nsw i32 %2202, %2198
  %2204 = icmp eq i32 %2203, 2
  %2205 = zext i1 %2204 to i8
  %2206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2205, i8* %2206, align 1, !tbaa !2452
  %2207 = load i64, i64* %RBP
  %2208 = sub i64 %2207, 40
  %2209 = load i64, i64* %PC
  %2210 = add i64 %2209, 4
  store i64 %2210, i64* %PC
  %2211 = inttoptr i64 %2208 to i64*
  %2212 = load i64, i64* %2211
  store i64 %2212, i64* %RCX, align 8, !tbaa !2428
  %2213 = load i64, i64* %RSI
  %2214 = load i64, i64* %RCX
  %2215 = add i64 %2214, 16
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 4
  store i64 %2217, i64* %PC
  %2218 = inttoptr i64 %2215 to i32*
  %2219 = load i32, i32* %2218
  %2220 = shl i64 %2213, 32
  %2221 = ashr exact i64 %2220, 32
  %2222 = sext i32 %2219 to i64
  %2223 = mul nsw i64 %2222, %2221
  %2224 = trunc i64 %2223 to i32
  %2225 = and i64 %2223, 4294967295
  store i64 %2225, i64* %RSI, align 8, !tbaa !2428
  %2226 = shl i64 %2223, 32
  %2227 = ashr exact i64 %2226, 32
  %2228 = icmp ne i64 %2227, %2223
  %2229 = zext i1 %2228 to i8
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2229, i8* %2230, align 1, !tbaa !2434
  %2231 = and i32 %2224, 255
  %2232 = call i32 @llvm.ctpop.i32(i32 %2231) #16
  %2233 = trunc i32 %2232 to i8
  %2234 = and i8 %2233, 1
  %2235 = xor i8 %2234, 1
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2235, i8* %2236, align 1, !tbaa !2448
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2237, align 1, !tbaa !2449
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2238, align 1, !tbaa !2450
  %2239 = lshr i32 %2224, 31
  %2240 = trunc i32 %2239 to i8
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2240, i8* %2241, align 1, !tbaa !2451
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2229, i8* %2242, align 1, !tbaa !2452
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 40
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 4
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i64*
  %2248 = load i64, i64* %2247
  store i64 %2248, i64* %RCX, align 8, !tbaa !2428
  %2249 = load i64, i64* %RSI
  %2250 = load i64, i64* %RCX
  %2251 = add i64 %2250, 20
  %2252 = load i64, i64* %PC
  %2253 = add i64 %2252, 4
  store i64 %2253, i64* %PC
  %2254 = inttoptr i64 %2251 to i32*
  %2255 = load i32, i32* %2254
  %2256 = shl i64 %2249, 32
  %2257 = ashr exact i64 %2256, 32
  %2258 = sext i32 %2255 to i64
  %2259 = mul nsw i64 %2258, %2257
  %2260 = trunc i64 %2259 to i32
  %2261 = and i64 %2259, 4294967295
  store i64 %2261, i64* %RSI, align 8, !tbaa !2428
  %2262 = shl i64 %2259, 32
  %2263 = ashr exact i64 %2262, 32
  %2264 = icmp ne i64 %2263, %2259
  %2265 = zext i1 %2264 to i8
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2265, i8* %2266, align 1, !tbaa !2434
  %2267 = and i32 %2260, 255
  %2268 = call i32 @llvm.ctpop.i32(i32 %2267) #16
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  %2271 = xor i8 %2270, 1
  %2272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2271, i8* %2272, align 1, !tbaa !2448
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2273, align 1, !tbaa !2449
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2274, align 1, !tbaa !2450
  %2275 = lshr i32 %2260, 31
  %2276 = trunc i32 %2275 to i8
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2276, i8* %2277, align 1, !tbaa !2451
  %2278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2265, i8* %2278, align 1, !tbaa !2452
  %2279 = load i64, i64* %RDX
  %2280 = load i32, i32* %ESI
  %2281 = zext i32 %2280 to i64
  %2282 = load i64, i64* %PC
  %2283 = add i64 %2282, 2
  store i64 %2283, i64* %PC
  %2284 = trunc i64 %2279 to i32
  %2285 = add i32 %2280, %2284
  %2286 = zext i32 %2285 to i64
  store i64 %2286, i64* %RDX, align 8, !tbaa !2428
  %2287 = icmp ult i32 %2285, %2284
  %2288 = icmp ult i32 %2285, %2280
  %2289 = or i1 %2287, %2288
  %2290 = zext i1 %2289 to i8
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2290, i8* %2291, align 1, !tbaa !2434
  %2292 = and i32 %2285, 255
  %2293 = call i32 @llvm.ctpop.i32(i32 %2292) #16
  %2294 = trunc i32 %2293 to i8
  %2295 = and i8 %2294, 1
  %2296 = xor i8 %2295, 1
  %2297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2296, i8* %2297, align 1, !tbaa !2448
  %2298 = xor i64 %2281, %2279
  %2299 = trunc i64 %2298 to i32
  %2300 = xor i32 %2299, %2285
  %2301 = lshr i32 %2300, 4
  %2302 = trunc i32 %2301 to i8
  %2303 = and i8 %2302, 1
  %2304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2303, i8* %2304, align 1, !tbaa !2449
  %2305 = icmp eq i32 %2285, 0
  %2306 = zext i1 %2305 to i8
  %2307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2306, i8* %2307, align 1, !tbaa !2450
  %2308 = lshr i32 %2285, 31
  %2309 = trunc i32 %2308 to i8
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2309, i8* %2310, align 1, !tbaa !2451
  %2311 = lshr i32 %2284, 31
  %2312 = lshr i32 %2280, 31
  %2313 = xor i32 %2308, %2311
  %2314 = xor i32 %2308, %2312
  %2315 = add nuw nsw i32 %2313, %2314
  %2316 = icmp eq i32 %2315, 2
  %2317 = zext i1 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2317, i8* %2318, align 1, !tbaa !2452
  %2319 = load i64, i64* %RBP
  %2320 = sub i64 %2319, 72
  %2321 = load i64, i64* %PC
  %2322 = add i64 %2321, 3
  store i64 %2322, i64* %PC
  %2323 = inttoptr i64 %2320 to i32*
  %2324 = load i32, i32* %2323
  %2325 = zext i32 %2324 to i64
  store i64 %2325, i64* %RSI, align 8, !tbaa !2428
  %2326 = load i64, i64* %RBP
  %2327 = sub i64 %2326, 40
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2327 to i64*
  %2331 = load i64, i64* %2330
  store i64 %2331, i64* %RCX, align 8, !tbaa !2428
  %2332 = load i64, i64* %RSI
  %2333 = load i64, i64* %RCX
  %2334 = add i64 %2333, 20
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2334 to i32*
  %2338 = load i32, i32* %2337
  %2339 = shl i64 %2332, 32
  %2340 = ashr exact i64 %2339, 32
  %2341 = sext i32 %2338 to i64
  %2342 = mul nsw i64 %2341, %2340
  %2343 = trunc i64 %2342 to i32
  %2344 = and i64 %2342, 4294967295
  store i64 %2344, i64* %RSI, align 8, !tbaa !2428
  %2345 = shl i64 %2342, 32
  %2346 = ashr exact i64 %2345, 32
  %2347 = icmp ne i64 %2346, %2342
  %2348 = zext i1 %2347 to i8
  %2349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2348, i8* %2349, align 1, !tbaa !2434
  %2350 = and i32 %2343, 255
  %2351 = call i32 @llvm.ctpop.i32(i32 %2350) #16
  %2352 = trunc i32 %2351 to i8
  %2353 = and i8 %2352, 1
  %2354 = xor i8 %2353, 1
  %2355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2354, i8* %2355, align 1, !tbaa !2448
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2356, align 1, !tbaa !2449
  %2357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2357, align 1, !tbaa !2450
  %2358 = lshr i32 %2343, 31
  %2359 = trunc i32 %2358 to i8
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2359, i8* %2360, align 1, !tbaa !2451
  %2361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2348, i8* %2361, align 1, !tbaa !2452
  %2362 = load i64, i64* %RDX
  %2363 = load i32, i32* %ESI
  %2364 = zext i32 %2363 to i64
  %2365 = load i64, i64* %PC
  %2366 = add i64 %2365, 2
  store i64 %2366, i64* %PC
  %2367 = trunc i64 %2362 to i32
  %2368 = add i32 %2363, %2367
  %2369 = zext i32 %2368 to i64
  store i64 %2369, i64* %RDX, align 8, !tbaa !2428
  %2370 = icmp ult i32 %2368, %2367
  %2371 = icmp ult i32 %2368, %2363
  %2372 = or i1 %2370, %2371
  %2373 = zext i1 %2372 to i8
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2373, i8* %2374, align 1, !tbaa !2434
  %2375 = and i32 %2368, 255
  %2376 = call i32 @llvm.ctpop.i32(i32 %2375) #16
  %2377 = trunc i32 %2376 to i8
  %2378 = and i8 %2377, 1
  %2379 = xor i8 %2378, 1
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2379, i8* %2380, align 1, !tbaa !2448
  %2381 = xor i64 %2364, %2362
  %2382 = trunc i64 %2381 to i32
  %2383 = xor i32 %2382, %2368
  %2384 = lshr i32 %2383, 4
  %2385 = trunc i32 %2384 to i8
  %2386 = and i8 %2385, 1
  %2387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2386, i8* %2387, align 1, !tbaa !2449
  %2388 = icmp eq i32 %2368, 0
  %2389 = zext i1 %2388 to i8
  %2390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2389, i8* %2390, align 1, !tbaa !2450
  %2391 = lshr i32 %2368, 31
  %2392 = trunc i32 %2391 to i8
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2392, i8* %2393, align 1, !tbaa !2451
  %2394 = lshr i32 %2367, 31
  %2395 = lshr i32 %2363, 31
  %2396 = xor i32 %2391, %2394
  %2397 = xor i32 %2391, %2395
  %2398 = add nuw nsw i32 %2396, %2397
  %2399 = icmp eq i32 %2398, 2
  %2400 = zext i1 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2400, i8* %2401, align 1, !tbaa !2452
  %2402 = load i64, i64* %RDX
  %2403 = load i64, i64* %RBP
  %2404 = sub i64 %2403, 76
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 3
  store i64 %2406, i64* %PC
  %2407 = trunc i64 %2402 to i32
  %2408 = inttoptr i64 %2404 to i32*
  %2409 = load i32, i32* %2408
  %2410 = add i32 %2409, %2407
  %2411 = zext i32 %2410 to i64
  store i64 %2411, i64* %RDX, align 8, !tbaa !2428
  %2412 = icmp ult i32 %2410, %2407
  %2413 = icmp ult i32 %2410, %2409
  %2414 = or i1 %2412, %2413
  %2415 = zext i1 %2414 to i8
  %2416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2415, i8* %2416, align 1, !tbaa !2434
  %2417 = and i32 %2410, 255
  %2418 = call i32 @llvm.ctpop.i32(i32 %2417) #16
  %2419 = trunc i32 %2418 to i8
  %2420 = and i8 %2419, 1
  %2421 = xor i8 %2420, 1
  %2422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2421, i8* %2422, align 1, !tbaa !2448
  %2423 = xor i32 %2409, %2407
  %2424 = xor i32 %2423, %2410
  %2425 = lshr i32 %2424, 4
  %2426 = trunc i32 %2425 to i8
  %2427 = and i8 %2426, 1
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2427, i8* %2428, align 1, !tbaa !2449
  %2429 = icmp eq i32 %2410, 0
  %2430 = zext i1 %2429 to i8
  %2431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2430, i8* %2431, align 1, !tbaa !2450
  %2432 = lshr i32 %2410, 31
  %2433 = trunc i32 %2432 to i8
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2433, i8* %2434, align 1, !tbaa !2451
  %2435 = lshr i32 %2407, 31
  %2436 = lshr i32 %2409, 31
  %2437 = xor i32 %2432, %2435
  %2438 = xor i32 %2432, %2436
  %2439 = add nuw nsw i32 %2437, %2438
  %2440 = icmp eq i32 %2439, 2
  %2441 = zext i1 %2440 to i8
  %2442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2441, i8* %2442, align 1, !tbaa !2452
  %2443 = load i32, i32* %EDX
  %2444 = zext i32 %2443 to i64
  %2445 = load i64, i64* %PC
  %2446 = add i64 %2445, 3
  store i64 %2446, i64* %PC
  %2447 = shl i64 %2444, 32
  %2448 = ashr exact i64 %2447, 32
  store i64 %2448, i64* %RCX, align 8, !tbaa !2428
  %2449 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2450 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2451 = load i64, i64* %RAX
  %2452 = load i64, i64* %RCX
  %2453 = mul i64 %2452, 4
  %2454 = add i64 %2453, %2451
  %2455 = load i64, i64* %PC
  %2456 = add i64 %2455, 5
  store i64 %2456, i64* %PC
  %2457 = bitcast i8* %2450 to <2 x float>*
  %2458 = load <2 x float>, <2 x float>* %2457, align 1
  %2459 = getelementptr inbounds i8, i8* %2450, i64 8
  %2460 = bitcast i8* %2459 to <2 x i32>*
  %2461 = load <2 x i32>, <2 x i32>* %2460, align 1
  %2462 = inttoptr i64 %2454 to float*
  %2463 = load float, float* %2462
  %2464 = extractelement <2 x float> %2458, i32 0
  %2465 = fmul float %2464, %2463
  %2466 = bitcast i8* %2449 to float*
  store float %2465, float* %2466, align 1, !tbaa !2453
  %2467 = bitcast <2 x float> %2458 to <2 x i32>
  %2468 = extractelement <2 x i32> %2467, i32 1
  %2469 = getelementptr inbounds i8, i8* %2449, i64 4
  %2470 = bitcast i8* %2469 to i32*
  store i32 %2468, i32* %2470, align 1, !tbaa !2453
  %2471 = extractelement <2 x i32> %2461, i32 0
  %2472 = getelementptr inbounds i8, i8* %2449, i64 8
  %2473 = bitcast i8* %2472 to i32*
  store i32 %2471, i32* %2473, align 1, !tbaa !2453
  %2474 = extractelement <2 x i32> %2461, i32 1
  %2475 = getelementptr inbounds i8, i8* %2449, i64 12
  %2476 = bitcast i8* %2475 to i32*
  store i32 %2474, i32* %2476, align 1, !tbaa !2453
  %2477 = load i64, i64* %RBP
  %2478 = sub i64 %2477, 16
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 4
  store i64 %2480, i64* %PC
  %2481 = inttoptr i64 %2478 to i64*
  %2482 = load i64, i64* %2481
  store i64 %2482, i64* %RAX, align 8, !tbaa !2428
  %2483 = load i64, i64* %RAX
  %2484 = load i64, i64* %PC
  %2485 = add i64 %2484, 3
  store i64 %2485, i64* %PC
  %2486 = inttoptr i64 %2483 to i64*
  %2487 = load i64, i64* %2486
  store i64 %2487, i64* %RAX, align 8, !tbaa !2428
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 16
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 4
  store i64 %2491, i64* %PC
  %2492 = inttoptr i64 %2489 to i64*
  %2493 = load i64, i64* %2492
  store i64 %2493, i64* %RCX, align 8, !tbaa !2428
  %2494 = load i64, i64* %RCX
  %2495 = add i64 %2494, 12
  %2496 = load i64, i64* %PC
  %2497 = add i64 %2496, 3
  store i64 %2497, i64* %PC
  %2498 = inttoptr i64 %2495 to i32*
  %2499 = load i32, i32* %2498
  %2500 = zext i32 %2499 to i64
  store i64 %2500, i64* %RDX, align 8, !tbaa !2428
  %2501 = load i64, i64* %RDX
  %2502 = load i64, i64* %PC
  %2503 = add i64 %2502, 3
  store i64 %2503, i64* %PC
  %2504 = load i64, i64* %RBP
  %2505 = sub i64 %2504, 16
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 4
  store i64 %2507, i64* %PC
  %2508 = inttoptr i64 %2505 to i64*
  %2509 = load i64, i64* %2508
  store i64 %2509, i64* %RCX, align 8, !tbaa !2428
  %2510 = load i64, i64* %RDX
  %2511 = load i64, i64* %RCX
  %2512 = add i64 %2511, 16
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 4
  store i64 %2514, i64* %PC
  %2515 = inttoptr i64 %2512 to i32*
  %2516 = load i32, i32* %2515
  %2517 = shl i64 %2510, 32
  %2518 = ashr exact i64 %2517, 32
  %2519 = sext i32 %2516 to i64
  %2520 = mul nsw i64 %2519, %2518
  %2521 = trunc i64 %2520 to i32
  %2522 = and i64 %2520, 4294967295
  store i64 %2522, i64* %RDX, align 8, !tbaa !2428
  %2523 = shl i64 %2520, 32
  %2524 = ashr exact i64 %2523, 32
  %2525 = icmp ne i64 %2524, %2520
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2526, i8* %2527, align 1, !tbaa !2434
  %2528 = and i32 %2521, 255
  %2529 = call i32 @llvm.ctpop.i32(i32 %2528) #16
  %2530 = trunc i32 %2529 to i8
  %2531 = and i8 %2530, 1
  %2532 = xor i8 %2531, 1
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2532, i8* %2533, align 1, !tbaa !2448
  %2534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2534, align 1, !tbaa !2449
  %2535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2535, align 1, !tbaa !2450
  %2536 = lshr i32 %2521, 31
  %2537 = trunc i32 %2536 to i8
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2537, i8* %2538, align 1, !tbaa !2451
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2526, i8* %2539, align 1, !tbaa !2452
  %2540 = load i64, i64* %RBP
  %2541 = sub i64 %2540, 16
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 4
  store i64 %2543, i64* %PC
  %2544 = inttoptr i64 %2541 to i64*
  %2545 = load i64, i64* %2544
  store i64 %2545, i64* %RCX, align 8, !tbaa !2428
  %2546 = load i64, i64* %RDX
  %2547 = load i64, i64* %RCX
  %2548 = add i64 %2547, 20
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 4
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i32*
  %2552 = load i32, i32* %2551
  %2553 = shl i64 %2546, 32
  %2554 = ashr exact i64 %2553, 32
  %2555 = sext i32 %2552 to i64
  %2556 = mul nsw i64 %2555, %2554
  %2557 = trunc i64 %2556 to i32
  %2558 = and i64 %2556, 4294967295
  store i64 %2558, i64* %RDX, align 8, !tbaa !2428
  %2559 = shl i64 %2556, 32
  %2560 = ashr exact i64 %2559, 32
  %2561 = icmp ne i64 %2560, %2556
  %2562 = zext i1 %2561 to i8
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2562, i8* %2563, align 1, !tbaa !2434
  %2564 = and i32 %2557, 255
  %2565 = call i32 @llvm.ctpop.i32(i32 %2564) #16
  %2566 = trunc i32 %2565 to i8
  %2567 = and i8 %2566, 1
  %2568 = xor i8 %2567, 1
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2568, i8* %2569, align 1, !tbaa !2448
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2570, align 1, !tbaa !2449
  %2571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2571, align 1, !tbaa !2450
  %2572 = lshr i32 %2557, 31
  %2573 = trunc i32 %2572 to i8
  %2574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2573, i8* %2574, align 1, !tbaa !2451
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2562, i8* %2575, align 1, !tbaa !2452
  %2576 = load i64, i64* %RBP
  %2577 = sub i64 %2576, 68
  %2578 = load i64, i64* %PC
  %2579 = add i64 %2578, 3
  store i64 %2579, i64* %PC
  %2580 = inttoptr i64 %2577 to i32*
  %2581 = load i32, i32* %2580
  %2582 = zext i32 %2581 to i64
  store i64 %2582, i64* %RSI, align 8, !tbaa !2428
  %2583 = load i64, i64* %RBP
  %2584 = sub i64 %2583, 16
  %2585 = load i64, i64* %PC
  %2586 = add i64 %2585, 4
  store i64 %2586, i64* %PC
  %2587 = inttoptr i64 %2584 to i64*
  %2588 = load i64, i64* %2587
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = load i64, i64* %RSI
  %2590 = load i64, i64* %RCX
  %2591 = add i64 %2590, 16
  %2592 = load i64, i64* %PC
  %2593 = add i64 %2592, 4
  store i64 %2593, i64* %PC
  %2594 = inttoptr i64 %2591 to i32*
  %2595 = load i32, i32* %2594
  %2596 = shl i64 %2589, 32
  %2597 = ashr exact i64 %2596, 32
  %2598 = sext i32 %2595 to i64
  %2599 = mul nsw i64 %2598, %2597
  %2600 = trunc i64 %2599 to i32
  %2601 = and i64 %2599, 4294967295
  store i64 %2601, i64* %RSI, align 8, !tbaa !2428
  %2602 = shl i64 %2599, 32
  %2603 = ashr exact i64 %2602, 32
  %2604 = icmp ne i64 %2603, %2599
  %2605 = zext i1 %2604 to i8
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2605, i8* %2606, align 1, !tbaa !2434
  %2607 = and i32 %2600, 255
  %2608 = call i32 @llvm.ctpop.i32(i32 %2607) #16
  %2609 = trunc i32 %2608 to i8
  %2610 = and i8 %2609, 1
  %2611 = xor i8 %2610, 1
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2611, i8* %2612, align 1, !tbaa !2448
  %2613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2613, align 1, !tbaa !2449
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2614, align 1, !tbaa !2450
  %2615 = lshr i32 %2600, 31
  %2616 = trunc i32 %2615 to i8
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2616, i8* %2617, align 1, !tbaa !2451
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2605, i8* %2618, align 1, !tbaa !2452
  %2619 = load i64, i64* %RBP
  %2620 = sub i64 %2619, 16
  %2621 = load i64, i64* %PC
  %2622 = add i64 %2621, 4
  store i64 %2622, i64* %PC
  %2623 = inttoptr i64 %2620 to i64*
  %2624 = load i64, i64* %2623
  store i64 %2624, i64* %RCX, align 8, !tbaa !2428
  %2625 = load i64, i64* %RSI
  %2626 = load i64, i64* %RCX
  %2627 = add i64 %2626, 20
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 4
  store i64 %2629, i64* %PC
  %2630 = inttoptr i64 %2627 to i32*
  %2631 = load i32, i32* %2630
  %2632 = shl i64 %2625, 32
  %2633 = ashr exact i64 %2632, 32
  %2634 = sext i32 %2631 to i64
  %2635 = mul nsw i64 %2634, %2633
  %2636 = trunc i64 %2635 to i32
  %2637 = and i64 %2635, 4294967295
  store i64 %2637, i64* %RSI, align 8, !tbaa !2428
  %2638 = shl i64 %2635, 32
  %2639 = ashr exact i64 %2638, 32
  %2640 = icmp ne i64 %2639, %2635
  %2641 = zext i1 %2640 to i8
  %2642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2641, i8* %2642, align 1, !tbaa !2434
  %2643 = and i32 %2636, 255
  %2644 = call i32 @llvm.ctpop.i32(i32 %2643) #16
  %2645 = trunc i32 %2644 to i8
  %2646 = and i8 %2645, 1
  %2647 = xor i8 %2646, 1
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2647, i8* %2648, align 1, !tbaa !2448
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2649, align 1, !tbaa !2449
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2650, align 1, !tbaa !2450
  %2651 = lshr i32 %2636, 31
  %2652 = trunc i32 %2651 to i8
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2652, i8* %2653, align 1, !tbaa !2451
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2641, i8* %2654, align 1, !tbaa !2452
  %2655 = load i64, i64* %RDX
  %2656 = load i32, i32* %ESI
  %2657 = zext i32 %2656 to i64
  %2658 = load i64, i64* %PC
  %2659 = add i64 %2658, 2
  store i64 %2659, i64* %PC
  %2660 = trunc i64 %2655 to i32
  %2661 = add i32 %2656, %2660
  %2662 = zext i32 %2661 to i64
  store i64 %2662, i64* %RDX, align 8, !tbaa !2428
  %2663 = icmp ult i32 %2661, %2660
  %2664 = icmp ult i32 %2661, %2656
  %2665 = or i1 %2663, %2664
  %2666 = zext i1 %2665 to i8
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2666, i8* %2667, align 1, !tbaa !2434
  %2668 = and i32 %2661, 255
  %2669 = call i32 @llvm.ctpop.i32(i32 %2668) #16
  %2670 = trunc i32 %2669 to i8
  %2671 = and i8 %2670, 1
  %2672 = xor i8 %2671, 1
  %2673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2672, i8* %2673, align 1, !tbaa !2448
  %2674 = xor i64 %2657, %2655
  %2675 = trunc i64 %2674 to i32
  %2676 = xor i32 %2675, %2661
  %2677 = lshr i32 %2676, 4
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2679, i8* %2680, align 1, !tbaa !2449
  %2681 = icmp eq i32 %2661, 0
  %2682 = zext i1 %2681 to i8
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2682, i8* %2683, align 1, !tbaa !2450
  %2684 = lshr i32 %2661, 31
  %2685 = trunc i32 %2684 to i8
  %2686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2685, i8* %2686, align 1, !tbaa !2451
  %2687 = lshr i32 %2660, 31
  %2688 = lshr i32 %2656, 31
  %2689 = xor i32 %2684, %2687
  %2690 = xor i32 %2684, %2688
  %2691 = add nuw nsw i32 %2689, %2690
  %2692 = icmp eq i32 %2691, 2
  %2693 = zext i1 %2692 to i8
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2693, i8* %2694, align 1, !tbaa !2452
  %2695 = load i64, i64* %RBP
  %2696 = sub i64 %2695, 72
  %2697 = load i64, i64* %PC
  %2698 = add i64 %2697, 3
  store i64 %2698, i64* %PC
  %2699 = inttoptr i64 %2696 to i32*
  %2700 = load i32, i32* %2699
  %2701 = zext i32 %2700 to i64
  store i64 %2701, i64* %RSI, align 8, !tbaa !2428
  %2702 = load i64, i64* %RBP
  %2703 = sub i64 %2702, 16
  %2704 = load i64, i64* %PC
  %2705 = add i64 %2704, 4
  store i64 %2705, i64* %PC
  %2706 = inttoptr i64 %2703 to i64*
  %2707 = load i64, i64* %2706
  store i64 %2707, i64* %RCX, align 8, !tbaa !2428
  %2708 = load i64, i64* %RSI
  %2709 = load i64, i64* %RCX
  %2710 = add i64 %2709, 20
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 4
  store i64 %2712, i64* %PC
  %2713 = inttoptr i64 %2710 to i32*
  %2714 = load i32, i32* %2713
  %2715 = shl i64 %2708, 32
  %2716 = ashr exact i64 %2715, 32
  %2717 = sext i32 %2714 to i64
  %2718 = mul nsw i64 %2717, %2716
  %2719 = trunc i64 %2718 to i32
  %2720 = and i64 %2718, 4294967295
  store i64 %2720, i64* %RSI, align 8, !tbaa !2428
  %2721 = shl i64 %2718, 32
  %2722 = ashr exact i64 %2721, 32
  %2723 = icmp ne i64 %2722, %2718
  %2724 = zext i1 %2723 to i8
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2724, i8* %2725, align 1, !tbaa !2434
  %2726 = and i32 %2719, 255
  %2727 = call i32 @llvm.ctpop.i32(i32 %2726) #16
  %2728 = trunc i32 %2727 to i8
  %2729 = and i8 %2728, 1
  %2730 = xor i8 %2729, 1
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2730, i8* %2731, align 1, !tbaa !2448
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2732, align 1, !tbaa !2449
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2733, align 1, !tbaa !2450
  %2734 = lshr i32 %2719, 31
  %2735 = trunc i32 %2734 to i8
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2735, i8* %2736, align 1, !tbaa !2451
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2724, i8* %2737, align 1, !tbaa !2452
  %2738 = load i64, i64* %RDX
  %2739 = load i32, i32* %ESI
  %2740 = zext i32 %2739 to i64
  %2741 = load i64, i64* %PC
  %2742 = add i64 %2741, 2
  store i64 %2742, i64* %PC
  %2743 = trunc i64 %2738 to i32
  %2744 = add i32 %2739, %2743
  %2745 = zext i32 %2744 to i64
  store i64 %2745, i64* %RDX, align 8, !tbaa !2428
  %2746 = icmp ult i32 %2744, %2743
  %2747 = icmp ult i32 %2744, %2739
  %2748 = or i1 %2746, %2747
  %2749 = zext i1 %2748 to i8
  %2750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2749, i8* %2750, align 1, !tbaa !2434
  %2751 = and i32 %2744, 255
  %2752 = call i32 @llvm.ctpop.i32(i32 %2751) #16
  %2753 = trunc i32 %2752 to i8
  %2754 = and i8 %2753, 1
  %2755 = xor i8 %2754, 1
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2755, i8* %2756, align 1, !tbaa !2448
  %2757 = xor i64 %2740, %2738
  %2758 = trunc i64 %2757 to i32
  %2759 = xor i32 %2758, %2744
  %2760 = lshr i32 %2759, 4
  %2761 = trunc i32 %2760 to i8
  %2762 = and i8 %2761, 1
  %2763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2762, i8* %2763, align 1, !tbaa !2449
  %2764 = icmp eq i32 %2744, 0
  %2765 = zext i1 %2764 to i8
  %2766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2765, i8* %2766, align 1, !tbaa !2450
  %2767 = lshr i32 %2744, 31
  %2768 = trunc i32 %2767 to i8
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2768, i8* %2769, align 1, !tbaa !2451
  %2770 = lshr i32 %2743, 31
  %2771 = lshr i32 %2739, 31
  %2772 = xor i32 %2767, %2770
  %2773 = xor i32 %2767, %2771
  %2774 = add nuw nsw i32 %2772, %2773
  %2775 = icmp eq i32 %2774, 2
  %2776 = zext i1 %2775 to i8
  %2777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2776, i8* %2777, align 1, !tbaa !2452
  %2778 = load i64, i64* %RDX
  %2779 = load i64, i64* %RBP
  %2780 = sub i64 %2779, 76
  %2781 = load i64, i64* %PC
  %2782 = add i64 %2781, 3
  store i64 %2782, i64* %PC
  %2783 = trunc i64 %2778 to i32
  %2784 = inttoptr i64 %2780 to i32*
  %2785 = load i32, i32* %2784
  %2786 = add i32 %2785, %2783
  %2787 = zext i32 %2786 to i64
  store i64 %2787, i64* %RDX, align 8, !tbaa !2428
  %2788 = icmp ult i32 %2786, %2783
  %2789 = icmp ult i32 %2786, %2785
  %2790 = or i1 %2788, %2789
  %2791 = zext i1 %2790 to i8
  %2792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2791, i8* %2792, align 1, !tbaa !2434
  %2793 = and i32 %2786, 255
  %2794 = call i32 @llvm.ctpop.i32(i32 %2793) #16
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2797, i8* %2798, align 1, !tbaa !2448
  %2799 = xor i32 %2785, %2783
  %2800 = xor i32 %2799, %2786
  %2801 = lshr i32 %2800, 4
  %2802 = trunc i32 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2803, i8* %2804, align 1, !tbaa !2449
  %2805 = icmp eq i32 %2786, 0
  %2806 = zext i1 %2805 to i8
  %2807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2806, i8* %2807, align 1, !tbaa !2450
  %2808 = lshr i32 %2786, 31
  %2809 = trunc i32 %2808 to i8
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2809, i8* %2810, align 1, !tbaa !2451
  %2811 = lshr i32 %2783, 31
  %2812 = lshr i32 %2785, 31
  %2813 = xor i32 %2808, %2811
  %2814 = xor i32 %2808, %2812
  %2815 = add nuw nsw i32 %2813, %2814
  %2816 = icmp eq i32 %2815, 2
  %2817 = zext i1 %2816 to i8
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2817, i8* %2818, align 1, !tbaa !2452
  %2819 = load i32, i32* %EDX
  %2820 = zext i32 %2819 to i64
  %2821 = load i64, i64* %PC
  %2822 = add i64 %2821, 3
  store i64 %2822, i64* %PC
  %2823 = shl i64 %2820, 32
  %2824 = ashr exact i64 %2823, 32
  store i64 %2824, i64* %RCX, align 8, !tbaa !2428
  %2825 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2826 = load i64, i64* %RAX
  %2827 = load i64, i64* %RCX
  %2828 = mul i64 %2827, 4
  %2829 = add i64 %2828, %2826
  %2830 = load i64, i64* %PC
  %2831 = add i64 %2830, 5
  store i64 %2831, i64* %PC
  %2832 = inttoptr i64 %2829 to float*
  %2833 = load float, float* %2832
  %2834 = bitcast i8* %2825 to float*
  store float %2833, float* %2834, align 1, !tbaa !2453
  %2835 = getelementptr inbounds i8, i8* %2825, i64 4
  %2836 = bitcast i8* %2835 to float*
  store float 0.000000e+00, float* %2836, align 1, !tbaa !2453
  %2837 = getelementptr inbounds i8, i8* %2825, i64 8
  %2838 = bitcast i8* %2837 to float*
  store float 0.000000e+00, float* %2838, align 1, !tbaa !2453
  %2839 = getelementptr inbounds i8, i8* %2825, i64 12
  %2840 = bitcast i8* %2839 to float*
  store float 0.000000e+00, float* %2840, align 1, !tbaa !2453
  %2841 = load i64, i64* %RBP
  %2842 = sub i64 %2841, 40
  %2843 = load i64, i64* %PC
  %2844 = add i64 %2843, 4
  store i64 %2844, i64* %PC
  %2845 = inttoptr i64 %2842 to i64*
  %2846 = load i64, i64* %2845
  store i64 %2846, i64* %RAX, align 8, !tbaa !2428
  %2847 = load i64, i64* %RAX
  %2848 = load i64, i64* %PC
  %2849 = add i64 %2848, 3
  store i64 %2849, i64* %PC
  %2850 = inttoptr i64 %2847 to i64*
  %2851 = load i64, i64* %2850
  store i64 %2851, i64* %RAX, align 8, !tbaa !2428
  %2852 = load i64, i64* %RBP
  %2853 = sub i64 %2852, 40
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 4
  store i64 %2855, i64* %PC
  %2856 = inttoptr i64 %2853 to i64*
  %2857 = load i64, i64* %2856
  store i64 %2857, i64* %RCX, align 8, !tbaa !2428
  %2858 = load i64, i64* %RCX
  %2859 = add i64 %2858, 12
  %2860 = load i64, i64* %PC
  %2861 = add i64 %2860, 4
  store i64 %2861, i64* %PC
  %2862 = inttoptr i64 %2859 to i32*
  %2863 = load i32, i32* %2862
  %2864 = sext i32 %2863 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2865, align 1, !tbaa !2434
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %2866, align 1, !tbaa !2448
  %2867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2867, align 1, !tbaa !2449
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2868, align 1, !tbaa !2450
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2869, align 1, !tbaa !2451
  %2870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2870, align 1, !tbaa !2452
  %2871 = load i64, i64* %RBP
  %2872 = sub i64 %2871, 40
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 4
  store i64 %2874, i64* %PC
  %2875 = inttoptr i64 %2872 to i64*
  %2876 = load i64, i64* %2875
  store i64 %2876, i64* %RCX, align 8, !tbaa !2428
  %2877 = load i64, i64* %RDX
  %2878 = load i64, i64* %RCX
  %2879 = add i64 %2878, 16
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 4
  store i64 %2881, i64* %PC
  %2882 = inttoptr i64 %2879 to i32*
  %2883 = load i32, i32* %2882
  %2884 = shl i64 %2877, 32
  %2885 = ashr exact i64 %2884, 32
  %2886 = sext i32 %2883 to i64
  %2887 = mul nsw i64 %2886, %2885
  %2888 = trunc i64 %2887 to i32
  %2889 = and i64 %2887, 4294967295
  store i64 %2889, i64* %RDX, align 8, !tbaa !2428
  %2890 = shl i64 %2887, 32
  %2891 = ashr exact i64 %2890, 32
  %2892 = icmp ne i64 %2891, %2887
  %2893 = zext i1 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2893, i8* %2894, align 1, !tbaa !2434
  %2895 = and i32 %2888, 255
  %2896 = call i32 @llvm.ctpop.i32(i32 %2895) #16
  %2897 = trunc i32 %2896 to i8
  %2898 = and i8 %2897, 1
  %2899 = xor i8 %2898, 1
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2899, i8* %2900, align 1, !tbaa !2448
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2901, align 1, !tbaa !2449
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2902, align 1, !tbaa !2450
  %2903 = lshr i32 %2888, 31
  %2904 = trunc i32 %2903 to i8
  %2905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2904, i8* %2905, align 1, !tbaa !2451
  %2906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2893, i8* %2906, align 1, !tbaa !2452
  %2907 = load i64, i64* %RBP
  %2908 = sub i64 %2907, 40
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 4
  store i64 %2910, i64* %PC
  %2911 = inttoptr i64 %2908 to i64*
  %2912 = load i64, i64* %2911
  store i64 %2912, i64* %RCX, align 8, !tbaa !2428
  %2913 = load i64, i64* %RDX
  %2914 = load i64, i64* %RCX
  %2915 = add i64 %2914, 20
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 4
  store i64 %2917, i64* %PC
  %2918 = inttoptr i64 %2915 to i32*
  %2919 = load i32, i32* %2918
  %2920 = shl i64 %2913, 32
  %2921 = ashr exact i64 %2920, 32
  %2922 = sext i32 %2919 to i64
  %2923 = mul nsw i64 %2922, %2921
  %2924 = trunc i64 %2923 to i32
  %2925 = and i64 %2923, 4294967295
  store i64 %2925, i64* %RDX, align 8, !tbaa !2428
  %2926 = shl i64 %2923, 32
  %2927 = ashr exact i64 %2926, 32
  %2928 = icmp ne i64 %2927, %2923
  %2929 = zext i1 %2928 to i8
  %2930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2929, i8* %2930, align 1, !tbaa !2434
  %2931 = and i32 %2924, 255
  %2932 = call i32 @llvm.ctpop.i32(i32 %2931) #16
  %2933 = trunc i32 %2932 to i8
  %2934 = and i8 %2933, 1
  %2935 = xor i8 %2934, 1
  %2936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2935, i8* %2936, align 1, !tbaa !2448
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2937, align 1, !tbaa !2449
  %2938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2938, align 1, !tbaa !2450
  %2939 = lshr i32 %2924, 31
  %2940 = trunc i32 %2939 to i8
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2940, i8* %2941, align 1, !tbaa !2451
  %2942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2929, i8* %2942, align 1, !tbaa !2452
  %2943 = load i64, i64* %RBP
  %2944 = sub i64 %2943, 68
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 3
  store i64 %2946, i64* %PC
  %2947 = inttoptr i64 %2944 to i32*
  %2948 = load i32, i32* %2947
  %2949 = zext i32 %2948 to i64
  store i64 %2949, i64* %RSI, align 8, !tbaa !2428
  %2950 = load i64, i64* %RBP
  %2951 = sub i64 %2950, 40
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 4
  store i64 %2953, i64* %PC
  %2954 = inttoptr i64 %2951 to i64*
  %2955 = load i64, i64* %2954
  store i64 %2955, i64* %RCX, align 8, !tbaa !2428
  %2956 = load i64, i64* %RSI
  %2957 = load i64, i64* %RCX
  %2958 = add i64 %2957, 16
  %2959 = load i64, i64* %PC
  %2960 = add i64 %2959, 4
  store i64 %2960, i64* %PC
  %2961 = inttoptr i64 %2958 to i32*
  %2962 = load i32, i32* %2961
  %2963 = shl i64 %2956, 32
  %2964 = ashr exact i64 %2963, 32
  %2965 = sext i32 %2962 to i64
  %2966 = mul nsw i64 %2965, %2964
  %2967 = trunc i64 %2966 to i32
  %2968 = and i64 %2966, 4294967295
  store i64 %2968, i64* %RSI, align 8, !tbaa !2428
  %2969 = shl i64 %2966, 32
  %2970 = ashr exact i64 %2969, 32
  %2971 = icmp ne i64 %2970, %2966
  %2972 = zext i1 %2971 to i8
  %2973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2972, i8* %2973, align 1, !tbaa !2434
  %2974 = and i32 %2967, 255
  %2975 = call i32 @llvm.ctpop.i32(i32 %2974) #16
  %2976 = trunc i32 %2975 to i8
  %2977 = and i8 %2976, 1
  %2978 = xor i8 %2977, 1
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2978, i8* %2979, align 1, !tbaa !2448
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2980, align 1, !tbaa !2449
  %2981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2981, align 1, !tbaa !2450
  %2982 = lshr i32 %2967, 31
  %2983 = trunc i32 %2982 to i8
  %2984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2983, i8* %2984, align 1, !tbaa !2451
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2972, i8* %2985, align 1, !tbaa !2452
  %2986 = load i64, i64* %RBP
  %2987 = sub i64 %2986, 40
  %2988 = load i64, i64* %PC
  %2989 = add i64 %2988, 4
  store i64 %2989, i64* %PC
  %2990 = inttoptr i64 %2987 to i64*
  %2991 = load i64, i64* %2990
  store i64 %2991, i64* %RCX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RSI
  %2993 = load i64, i64* %RCX
  %2994 = add i64 %2993, 20
  %2995 = load i64, i64* %PC
  %2996 = add i64 %2995, 4
  store i64 %2996, i64* %PC
  %2997 = inttoptr i64 %2994 to i32*
  %2998 = load i32, i32* %2997
  %2999 = shl i64 %2992, 32
  %3000 = ashr exact i64 %2999, 32
  %3001 = sext i32 %2998 to i64
  %3002 = mul nsw i64 %3001, %3000
  %3003 = trunc i64 %3002 to i32
  %3004 = and i64 %3002, 4294967295
  store i64 %3004, i64* %RSI, align 8, !tbaa !2428
  %3005 = shl i64 %3002, 32
  %3006 = ashr exact i64 %3005, 32
  %3007 = icmp ne i64 %3006, %3002
  %3008 = zext i1 %3007 to i8
  %3009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3008, i8* %3009, align 1, !tbaa !2434
  %3010 = and i32 %3003, 255
  %3011 = call i32 @llvm.ctpop.i32(i32 %3010) #16
  %3012 = trunc i32 %3011 to i8
  %3013 = and i8 %3012, 1
  %3014 = xor i8 %3013, 1
  %3015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3014, i8* %3015, align 1, !tbaa !2448
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3016, align 1, !tbaa !2449
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3017, align 1, !tbaa !2450
  %3018 = lshr i32 %3003, 31
  %3019 = trunc i32 %3018 to i8
  %3020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3019, i8* %3020, align 1, !tbaa !2451
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3008, i8* %3021, align 1, !tbaa !2452
  %3022 = load i64, i64* %RDX
  %3023 = load i32, i32* %ESI
  %3024 = zext i32 %3023 to i64
  %3025 = load i64, i64* %PC
  %3026 = add i64 %3025, 2
  store i64 %3026, i64* %PC
  %3027 = trunc i64 %3022 to i32
  %3028 = add i32 %3023, %3027
  %3029 = zext i32 %3028 to i64
  store i64 %3029, i64* %RDX, align 8, !tbaa !2428
  %3030 = icmp ult i32 %3028, %3027
  %3031 = icmp ult i32 %3028, %3023
  %3032 = or i1 %3030, %3031
  %3033 = zext i1 %3032 to i8
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3033, i8* %3034, align 1, !tbaa !2434
  %3035 = and i32 %3028, 255
  %3036 = call i32 @llvm.ctpop.i32(i32 %3035) #16
  %3037 = trunc i32 %3036 to i8
  %3038 = and i8 %3037, 1
  %3039 = xor i8 %3038, 1
  %3040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3039, i8* %3040, align 1, !tbaa !2448
  %3041 = xor i64 %3024, %3022
  %3042 = trunc i64 %3041 to i32
  %3043 = xor i32 %3042, %3028
  %3044 = lshr i32 %3043, 4
  %3045 = trunc i32 %3044 to i8
  %3046 = and i8 %3045, 1
  %3047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3046, i8* %3047, align 1, !tbaa !2449
  %3048 = icmp eq i32 %3028, 0
  %3049 = zext i1 %3048 to i8
  %3050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3049, i8* %3050, align 1, !tbaa !2450
  %3051 = lshr i32 %3028, 31
  %3052 = trunc i32 %3051 to i8
  %3053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3052, i8* %3053, align 1, !tbaa !2451
  %3054 = lshr i32 %3027, 31
  %3055 = lshr i32 %3023, 31
  %3056 = xor i32 %3051, %3054
  %3057 = xor i32 %3051, %3055
  %3058 = add nuw nsw i32 %3056, %3057
  %3059 = icmp eq i32 %3058, 2
  %3060 = zext i1 %3059 to i8
  %3061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3060, i8* %3061, align 1, !tbaa !2452
  %3062 = load i64, i64* %RBP
  %3063 = sub i64 %3062, 72
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 3
  store i64 %3065, i64* %PC
  %3066 = inttoptr i64 %3063 to i32*
  %3067 = load i32, i32* %3066
  %3068 = zext i32 %3067 to i64
  store i64 %3068, i64* %RSI, align 8, !tbaa !2428
  %3069 = load i64, i64* %RSI
  %3070 = load i64, i64* %PC
  %3071 = add i64 %3070, 3
  store i64 %3071, i64* %PC
  %3072 = trunc i64 %3069 to i32
  %3073 = add i32 1, %3072
  %3074 = zext i32 %3073 to i64
  store i64 %3074, i64* %RSI, align 8, !tbaa !2428
  %3075 = icmp ult i32 %3073, %3072
  %3076 = icmp ult i32 %3073, 1
  %3077 = or i1 %3075, %3076
  %3078 = zext i1 %3077 to i8
  %3079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3078, i8* %3079, align 1, !tbaa !2434
  %3080 = and i32 %3073, 255
  %3081 = call i32 @llvm.ctpop.i32(i32 %3080) #16
  %3082 = trunc i32 %3081 to i8
  %3083 = and i8 %3082, 1
  %3084 = xor i8 %3083, 1
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3084, i8* %3085, align 1, !tbaa !2448
  %3086 = xor i64 1, %3069
  %3087 = trunc i64 %3086 to i32
  %3088 = xor i32 %3087, %3073
  %3089 = lshr i32 %3088, 4
  %3090 = trunc i32 %3089 to i8
  %3091 = and i8 %3090, 1
  %3092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3091, i8* %3092, align 1, !tbaa !2449
  %3093 = icmp eq i32 %3073, 0
  %3094 = zext i1 %3093 to i8
  %3095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3094, i8* %3095, align 1, !tbaa !2450
  %3096 = lshr i32 %3073, 31
  %3097 = trunc i32 %3096 to i8
  %3098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3097, i8* %3098, align 1, !tbaa !2451
  %3099 = lshr i32 %3072, 31
  %3100 = xor i32 %3096, %3099
  %3101 = add nuw nsw i32 %3100, %3096
  %3102 = icmp eq i32 %3101, 2
  %3103 = zext i1 %3102 to i8
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3103, i8* %3104, align 1, !tbaa !2452
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 40
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 4
  store i64 %3108, i64* %PC
  %3109 = inttoptr i64 %3106 to i64*
  %3110 = load i64, i64* %3109
  store i64 %3110, i64* %RCX, align 8, !tbaa !2428
  %3111 = load i64, i64* %RSI
  %3112 = load i64, i64* %RCX
  %3113 = add i64 %3112, 20
  %3114 = load i64, i64* %PC
  %3115 = add i64 %3114, 4
  store i64 %3115, i64* %PC
  %3116 = inttoptr i64 %3113 to i32*
  %3117 = load i32, i32* %3116
  %3118 = shl i64 %3111, 32
  %3119 = ashr exact i64 %3118, 32
  %3120 = sext i32 %3117 to i64
  %3121 = mul nsw i64 %3120, %3119
  %3122 = trunc i64 %3121 to i32
  %3123 = and i64 %3121, 4294967295
  store i64 %3123, i64* %RSI, align 8, !tbaa !2428
  %3124 = shl i64 %3121, 32
  %3125 = ashr exact i64 %3124, 32
  %3126 = icmp ne i64 %3125, %3121
  %3127 = zext i1 %3126 to i8
  %3128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3127, i8* %3128, align 1, !tbaa !2434
  %3129 = and i32 %3122, 255
  %3130 = call i32 @llvm.ctpop.i32(i32 %3129) #16
  %3131 = trunc i32 %3130 to i8
  %3132 = and i8 %3131, 1
  %3133 = xor i8 %3132, 1
  %3134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3133, i8* %3134, align 1, !tbaa !2448
  %3135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3135, align 1, !tbaa !2449
  %3136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3136, align 1, !tbaa !2450
  %3137 = lshr i32 %3122, 31
  %3138 = trunc i32 %3137 to i8
  %3139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3138, i8* %3139, align 1, !tbaa !2451
  %3140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3127, i8* %3140, align 1, !tbaa !2452
  %3141 = load i64, i64* %RDX
  %3142 = load i32, i32* %ESI
  %3143 = zext i32 %3142 to i64
  %3144 = load i64, i64* %PC
  %3145 = add i64 %3144, 2
  store i64 %3145, i64* %PC
  %3146 = trunc i64 %3141 to i32
  %3147 = add i32 %3142, %3146
  %3148 = zext i32 %3147 to i64
  store i64 %3148, i64* %RDX, align 8, !tbaa !2428
  %3149 = icmp ult i32 %3147, %3146
  %3150 = icmp ult i32 %3147, %3142
  %3151 = or i1 %3149, %3150
  %3152 = zext i1 %3151 to i8
  %3153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3152, i8* %3153, align 1, !tbaa !2434
  %3154 = and i32 %3147, 255
  %3155 = call i32 @llvm.ctpop.i32(i32 %3154) #16
  %3156 = trunc i32 %3155 to i8
  %3157 = and i8 %3156, 1
  %3158 = xor i8 %3157, 1
  %3159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3158, i8* %3159, align 1, !tbaa !2448
  %3160 = xor i64 %3143, %3141
  %3161 = trunc i64 %3160 to i32
  %3162 = xor i32 %3161, %3147
  %3163 = lshr i32 %3162, 4
  %3164 = trunc i32 %3163 to i8
  %3165 = and i8 %3164, 1
  %3166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3165, i8* %3166, align 1, !tbaa !2449
  %3167 = icmp eq i32 %3147, 0
  %3168 = zext i1 %3167 to i8
  %3169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3168, i8* %3169, align 1, !tbaa !2450
  %3170 = lshr i32 %3147, 31
  %3171 = trunc i32 %3170 to i8
  %3172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3171, i8* %3172, align 1, !tbaa !2451
  %3173 = lshr i32 %3146, 31
  %3174 = lshr i32 %3142, 31
  %3175 = xor i32 %3170, %3173
  %3176 = xor i32 %3170, %3174
  %3177 = add nuw nsw i32 %3175, %3176
  %3178 = icmp eq i32 %3177, 2
  %3179 = zext i1 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3179, i8* %3180, align 1, !tbaa !2452
  %3181 = load i64, i64* %RDX
  %3182 = load i64, i64* %RBP
  %3183 = sub i64 %3182, 76
  %3184 = load i64, i64* %PC
  %3185 = add i64 %3184, 3
  store i64 %3185, i64* %PC
  %3186 = trunc i64 %3181 to i32
  %3187 = inttoptr i64 %3183 to i32*
  %3188 = load i32, i32* %3187
  %3189 = add i32 %3188, %3186
  %3190 = zext i32 %3189 to i64
  store i64 %3190, i64* %RDX, align 8, !tbaa !2428
  %3191 = icmp ult i32 %3189, %3186
  %3192 = icmp ult i32 %3189, %3188
  %3193 = or i1 %3191, %3192
  %3194 = zext i1 %3193 to i8
  %3195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3194, i8* %3195, align 1, !tbaa !2434
  %3196 = and i32 %3189, 255
  %3197 = call i32 @llvm.ctpop.i32(i32 %3196) #16
  %3198 = trunc i32 %3197 to i8
  %3199 = and i8 %3198, 1
  %3200 = xor i8 %3199, 1
  %3201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3200, i8* %3201, align 1, !tbaa !2448
  %3202 = xor i32 %3188, %3186
  %3203 = xor i32 %3202, %3189
  %3204 = lshr i32 %3203, 4
  %3205 = trunc i32 %3204 to i8
  %3206 = and i8 %3205, 1
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3206, i8* %3207, align 1, !tbaa !2449
  %3208 = icmp eq i32 %3189, 0
  %3209 = zext i1 %3208 to i8
  %3210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3209, i8* %3210, align 1, !tbaa !2450
  %3211 = lshr i32 %3189, 31
  %3212 = trunc i32 %3211 to i8
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3212, i8* %3213, align 1, !tbaa !2451
  %3214 = lshr i32 %3186, 31
  %3215 = lshr i32 %3188, 31
  %3216 = xor i32 %3211, %3214
  %3217 = xor i32 %3211, %3215
  %3218 = add nuw nsw i32 %3216, %3217
  %3219 = icmp eq i32 %3218, 2
  %3220 = zext i1 %3219 to i8
  %3221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3220, i8* %3221, align 1, !tbaa !2452
  %3222 = load i32, i32* %EDX
  %3223 = zext i32 %3222 to i64
  %3224 = load i64, i64* %PC
  %3225 = add i64 %3224, 3
  store i64 %3225, i64* %PC
  %3226 = shl i64 %3223, 32
  %3227 = ashr exact i64 %3226, 32
  store i64 %3227, i64* %RCX, align 8, !tbaa !2428
  %3228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3230 = load i64, i64* %RAX
  %3231 = load i64, i64* %RCX
  %3232 = mul i64 %3231, 4
  %3233 = add i64 %3232, %3230
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 5
  store i64 %3235, i64* %PC
  %3236 = bitcast i8* %3229 to <2 x float>*
  %3237 = load <2 x float>, <2 x float>* %3236, align 1
  %3238 = getelementptr inbounds i8, i8* %3229, i64 8
  %3239 = bitcast i8* %3238 to <2 x i32>*
  %3240 = load <2 x i32>, <2 x i32>* %3239, align 1
  %3241 = inttoptr i64 %3233 to float*
  %3242 = load float, float* %3241
  %3243 = extractelement <2 x float> %3237, i32 0
  %3244 = fmul float %3243, %3242
  %3245 = bitcast i8* %3228 to float*
  store float %3244, float* %3245, align 1, !tbaa !2453
  %3246 = bitcast <2 x float> %3237 to <2 x i32>
  %3247 = extractelement <2 x i32> %3246, i32 1
  %3248 = getelementptr inbounds i8, i8* %3228, i64 4
  %3249 = bitcast i8* %3248 to i32*
  store i32 %3247, i32* %3249, align 1, !tbaa !2453
  %3250 = extractelement <2 x i32> %3240, i32 0
  %3251 = getelementptr inbounds i8, i8* %3228, i64 8
  %3252 = bitcast i8* %3251 to i32*
  store i32 %3250, i32* %3252, align 1, !tbaa !2453
  %3253 = extractelement <2 x i32> %3240, i32 1
  %3254 = getelementptr inbounds i8, i8* %3228, i64 12
  %3255 = bitcast i8* %3254 to i32*
  store i32 %3253, i32* %3255, align 1, !tbaa !2453
  %3256 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3257 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3258 = bitcast %union.vec128_t* %XMM1 to i8*
  %3259 = load i64, i64* %PC
  %3260 = add i64 %3259, 4
  store i64 %3260, i64* %PC
  %3261 = bitcast i8* %3257 to <2 x float>*
  %3262 = load <2 x float>, <2 x float>* %3261, align 1
  %3263 = getelementptr inbounds i8, i8* %3257, i64 8
  %3264 = bitcast i8* %3263 to <2 x i32>*
  %3265 = load <2 x i32>, <2 x i32>* %3264, align 1
  %3266 = bitcast i8* %3258 to <2 x float>*
  %3267 = load <2 x float>, <2 x float>* %3266, align 1
  %3268 = extractelement <2 x float> %3262, i32 0
  %3269 = extractelement <2 x float> %3267, i32 0
  %3270 = fadd float %3268, %3269
  %3271 = bitcast i8* %3256 to float*
  store float %3270, float* %3271, align 1, !tbaa !2453
  %3272 = bitcast <2 x float> %3262 to <2 x i32>
  %3273 = extractelement <2 x i32> %3272, i32 1
  %3274 = getelementptr inbounds i8, i8* %3256, i64 4
  %3275 = bitcast i8* %3274 to i32*
  store i32 %3273, i32* %3275, align 1, !tbaa !2453
  %3276 = extractelement <2 x i32> %3265, i32 0
  %3277 = getelementptr inbounds i8, i8* %3256, i64 8
  %3278 = bitcast i8* %3277 to i32*
  store i32 %3276, i32* %3278, align 1, !tbaa !2453
  %3279 = extractelement <2 x i32> %3265, i32 1
  %3280 = getelementptr inbounds i8, i8* %3256, i64 12
  %3281 = bitcast i8* %3280 to i32*
  store i32 %3279, i32* %3281, align 1, !tbaa !2453
  %3282 = load i64, i64* %RBP
  %3283 = sub i64 %3282, 16
  %3284 = load i64, i64* %PC
  %3285 = add i64 %3284, 4
  store i64 %3285, i64* %PC
  %3286 = inttoptr i64 %3283 to i64*
  %3287 = load i64, i64* %3286
  store i64 %3287, i64* %RAX, align 8, !tbaa !2428
  %3288 = load i64, i64* %RAX
  %3289 = load i64, i64* %PC
  %3290 = add i64 %3289, 3
  store i64 %3290, i64* %PC
  %3291 = inttoptr i64 %3288 to i64*
  %3292 = load i64, i64* %3291
  store i64 %3292, i64* %RAX, align 8, !tbaa !2428
  %3293 = load i64, i64* %RBP
  %3294 = sub i64 %3293, 16
  %3295 = load i64, i64* %PC
  %3296 = add i64 %3295, 4
  store i64 %3296, i64* %PC
  %3297 = inttoptr i64 %3294 to i64*
  %3298 = load i64, i64* %3297
  store i64 %3298, i64* %RCX, align 8, !tbaa !2428
  %3299 = load i64, i64* %RCX
  %3300 = add i64 %3299, 12
  %3301 = load i64, i64* %PC
  %3302 = add i64 %3301, 3
  store i64 %3302, i64* %PC
  %3303 = inttoptr i64 %3300 to i32*
  %3304 = load i32, i32* %3303
  %3305 = zext i32 %3304 to i64
  store i64 %3305, i64* %RDX, align 8, !tbaa !2428
  %3306 = load i64, i64* %RDX
  %3307 = load i64, i64* %PC
  %3308 = add i64 %3307, 3
  store i64 %3308, i64* %PC
  %3309 = trunc i64 %3306 to i32
  %3310 = shl i32 %3309, 1
  %3311 = icmp slt i32 %3309, 0
  %3312 = icmp slt i32 %3310, 0
  %3313 = xor i1 %3311, %3312
  %3314 = zext i32 %3310 to i64
  store i64 %3314, i64* %RDX, align 8, !tbaa !2428
  %3315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3316 = zext i1 %3311 to i8
  store i8 %3316, i8* %3315, align 1, !tbaa !2455
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3318 = and i32 %3310, 254
  %3319 = call i32 @llvm.ctpop.i32(i32 %3318) #16
  %3320 = trunc i32 %3319 to i8
  %3321 = and i8 %3320, 1
  %3322 = xor i8 %3321, 1
  store i8 %3322, i8* %3317, align 1, !tbaa !2455
  %3323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3323, align 1, !tbaa !2455
  %3324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3325 = icmp eq i32 %3310, 0
  %3326 = zext i1 %3325 to i8
  store i8 %3326, i8* %3324, align 1, !tbaa !2455
  %3327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3328 = lshr i32 %3310, 31
  %3329 = trunc i32 %3328 to i8
  store i8 %3329, i8* %3327, align 1, !tbaa !2455
  %3330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3331 = zext i1 %3313 to i8
  store i8 %3331, i8* %3330, align 1, !tbaa !2455
  %3332 = load i64, i64* %RBP
  %3333 = sub i64 %3332, 16
  %3334 = load i64, i64* %PC
  %3335 = add i64 %3334, 4
  store i64 %3335, i64* %PC
  %3336 = inttoptr i64 %3333 to i64*
  %3337 = load i64, i64* %3336
  store i64 %3337, i64* %RCX, align 8, !tbaa !2428
  %3338 = load i64, i64* %RDX
  %3339 = load i64, i64* %RCX
  %3340 = add i64 %3339, 16
  %3341 = load i64, i64* %PC
  %3342 = add i64 %3341, 4
  store i64 %3342, i64* %PC
  %3343 = inttoptr i64 %3340 to i32*
  %3344 = load i32, i32* %3343
  %3345 = shl i64 %3338, 32
  %3346 = ashr exact i64 %3345, 32
  %3347 = sext i32 %3344 to i64
  %3348 = mul nsw i64 %3347, %3346
  %3349 = trunc i64 %3348 to i32
  %3350 = and i64 %3348, 4294967295
  store i64 %3350, i64* %RDX, align 8, !tbaa !2428
  %3351 = shl i64 %3348, 32
  %3352 = ashr exact i64 %3351, 32
  %3353 = icmp ne i64 %3352, %3348
  %3354 = zext i1 %3353 to i8
  %3355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3354, i8* %3355, align 1, !tbaa !2434
  %3356 = and i32 %3349, 255
  %3357 = call i32 @llvm.ctpop.i32(i32 %3356) #16
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  %3360 = xor i8 %3359, 1
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3360, i8* %3361, align 1, !tbaa !2448
  %3362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3362, align 1, !tbaa !2449
  %3363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3363, align 1, !tbaa !2450
  %3364 = lshr i32 %3349, 31
  %3365 = trunc i32 %3364 to i8
  %3366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3365, i8* %3366, align 1, !tbaa !2451
  %3367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3354, i8* %3367, align 1, !tbaa !2452
  %3368 = load i64, i64* %RBP
  %3369 = sub i64 %3368, 16
  %3370 = load i64, i64* %PC
  %3371 = add i64 %3370, 4
  store i64 %3371, i64* %PC
  %3372 = inttoptr i64 %3369 to i64*
  %3373 = load i64, i64* %3372
  store i64 %3373, i64* %RCX, align 8, !tbaa !2428
  %3374 = load i64, i64* %RDX
  %3375 = load i64, i64* %RCX
  %3376 = add i64 %3375, 20
  %3377 = load i64, i64* %PC
  %3378 = add i64 %3377, 4
  store i64 %3378, i64* %PC
  %3379 = inttoptr i64 %3376 to i32*
  %3380 = load i32, i32* %3379
  %3381 = shl i64 %3374, 32
  %3382 = ashr exact i64 %3381, 32
  %3383 = sext i32 %3380 to i64
  %3384 = mul nsw i64 %3383, %3382
  %3385 = trunc i64 %3384 to i32
  %3386 = and i64 %3384, 4294967295
  store i64 %3386, i64* %RDX, align 8, !tbaa !2428
  %3387 = shl i64 %3384, 32
  %3388 = ashr exact i64 %3387, 32
  %3389 = icmp ne i64 %3388, %3384
  %3390 = zext i1 %3389 to i8
  %3391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3390, i8* %3391, align 1, !tbaa !2434
  %3392 = and i32 %3385, 255
  %3393 = call i32 @llvm.ctpop.i32(i32 %3392) #16
  %3394 = trunc i32 %3393 to i8
  %3395 = and i8 %3394, 1
  %3396 = xor i8 %3395, 1
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3396, i8* %3397, align 1, !tbaa !2448
  %3398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3398, align 1, !tbaa !2449
  %3399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3399, align 1, !tbaa !2450
  %3400 = lshr i32 %3385, 31
  %3401 = trunc i32 %3400 to i8
  %3402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3401, i8* %3402, align 1, !tbaa !2451
  %3403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3390, i8* %3403, align 1, !tbaa !2452
  %3404 = load i64, i64* %RBP
  %3405 = sub i64 %3404, 68
  %3406 = load i64, i64* %PC
  %3407 = add i64 %3406, 3
  store i64 %3407, i64* %PC
  %3408 = inttoptr i64 %3405 to i32*
  %3409 = load i32, i32* %3408
  %3410 = zext i32 %3409 to i64
  store i64 %3410, i64* %RSI, align 8, !tbaa !2428
  %3411 = load i64, i64* %RBP
  %3412 = sub i64 %3411, 16
  %3413 = load i64, i64* %PC
  %3414 = add i64 %3413, 4
  store i64 %3414, i64* %PC
  %3415 = inttoptr i64 %3412 to i64*
  %3416 = load i64, i64* %3415
  store i64 %3416, i64* %RCX, align 8, !tbaa !2428
  %3417 = load i64, i64* %RSI
  %3418 = load i64, i64* %RCX
  %3419 = add i64 %3418, 16
  %3420 = load i64, i64* %PC
  %3421 = add i64 %3420, 4
  store i64 %3421, i64* %PC
  %3422 = inttoptr i64 %3419 to i32*
  %3423 = load i32, i32* %3422
  %3424 = shl i64 %3417, 32
  %3425 = ashr exact i64 %3424, 32
  %3426 = sext i32 %3423 to i64
  %3427 = mul nsw i64 %3426, %3425
  %3428 = trunc i64 %3427 to i32
  %3429 = and i64 %3427, 4294967295
  store i64 %3429, i64* %RSI, align 8, !tbaa !2428
  %3430 = shl i64 %3427, 32
  %3431 = ashr exact i64 %3430, 32
  %3432 = icmp ne i64 %3431, %3427
  %3433 = zext i1 %3432 to i8
  %3434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3433, i8* %3434, align 1, !tbaa !2434
  %3435 = and i32 %3428, 255
  %3436 = call i32 @llvm.ctpop.i32(i32 %3435) #16
  %3437 = trunc i32 %3436 to i8
  %3438 = and i8 %3437, 1
  %3439 = xor i8 %3438, 1
  %3440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3439, i8* %3440, align 1, !tbaa !2448
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3441, align 1, !tbaa !2449
  %3442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3442, align 1, !tbaa !2450
  %3443 = lshr i32 %3428, 31
  %3444 = trunc i32 %3443 to i8
  %3445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3444, i8* %3445, align 1, !tbaa !2451
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3433, i8* %3446, align 1, !tbaa !2452
  %3447 = load i64, i64* %RBP
  %3448 = sub i64 %3447, 16
  %3449 = load i64, i64* %PC
  %3450 = add i64 %3449, 4
  store i64 %3450, i64* %PC
  %3451 = inttoptr i64 %3448 to i64*
  %3452 = load i64, i64* %3451
  store i64 %3452, i64* %RCX, align 8, !tbaa !2428
  %3453 = load i64, i64* %RSI
  %3454 = load i64, i64* %RCX
  %3455 = add i64 %3454, 20
  %3456 = load i64, i64* %PC
  %3457 = add i64 %3456, 4
  store i64 %3457, i64* %PC
  %3458 = inttoptr i64 %3455 to i32*
  %3459 = load i32, i32* %3458
  %3460 = shl i64 %3453, 32
  %3461 = ashr exact i64 %3460, 32
  %3462 = sext i32 %3459 to i64
  %3463 = mul nsw i64 %3462, %3461
  %3464 = trunc i64 %3463 to i32
  %3465 = and i64 %3463, 4294967295
  store i64 %3465, i64* %RSI, align 8, !tbaa !2428
  %3466 = shl i64 %3463, 32
  %3467 = ashr exact i64 %3466, 32
  %3468 = icmp ne i64 %3467, %3463
  %3469 = zext i1 %3468 to i8
  %3470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3469, i8* %3470, align 1, !tbaa !2434
  %3471 = and i32 %3464, 255
  %3472 = call i32 @llvm.ctpop.i32(i32 %3471) #16
  %3473 = trunc i32 %3472 to i8
  %3474 = and i8 %3473, 1
  %3475 = xor i8 %3474, 1
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3475, i8* %3476, align 1, !tbaa !2448
  %3477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3477, align 1, !tbaa !2449
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3478, align 1, !tbaa !2450
  %3479 = lshr i32 %3464, 31
  %3480 = trunc i32 %3479 to i8
  %3481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3480, i8* %3481, align 1, !tbaa !2451
  %3482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3469, i8* %3482, align 1, !tbaa !2452
  %3483 = load i64, i64* %RDX
  %3484 = load i32, i32* %ESI
  %3485 = zext i32 %3484 to i64
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 2
  store i64 %3487, i64* %PC
  %3488 = trunc i64 %3483 to i32
  %3489 = add i32 %3484, %3488
  %3490 = zext i32 %3489 to i64
  store i64 %3490, i64* %RDX, align 8, !tbaa !2428
  %3491 = icmp ult i32 %3489, %3488
  %3492 = icmp ult i32 %3489, %3484
  %3493 = or i1 %3491, %3492
  %3494 = zext i1 %3493 to i8
  %3495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3494, i8* %3495, align 1, !tbaa !2434
  %3496 = and i32 %3489, 255
  %3497 = call i32 @llvm.ctpop.i32(i32 %3496) #16
  %3498 = trunc i32 %3497 to i8
  %3499 = and i8 %3498, 1
  %3500 = xor i8 %3499, 1
  %3501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3500, i8* %3501, align 1, !tbaa !2448
  %3502 = xor i64 %3485, %3483
  %3503 = trunc i64 %3502 to i32
  %3504 = xor i32 %3503, %3489
  %3505 = lshr i32 %3504, 4
  %3506 = trunc i32 %3505 to i8
  %3507 = and i8 %3506, 1
  %3508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3507, i8* %3508, align 1, !tbaa !2449
  %3509 = icmp eq i32 %3489, 0
  %3510 = zext i1 %3509 to i8
  %3511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3510, i8* %3511, align 1, !tbaa !2450
  %3512 = lshr i32 %3489, 31
  %3513 = trunc i32 %3512 to i8
  %3514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3513, i8* %3514, align 1, !tbaa !2451
  %3515 = lshr i32 %3488, 31
  %3516 = lshr i32 %3484, 31
  %3517 = xor i32 %3512, %3515
  %3518 = xor i32 %3512, %3516
  %3519 = add nuw nsw i32 %3517, %3518
  %3520 = icmp eq i32 %3519, 2
  %3521 = zext i1 %3520 to i8
  %3522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3521, i8* %3522, align 1, !tbaa !2452
  %3523 = load i64, i64* %RBP
  %3524 = sub i64 %3523, 72
  %3525 = load i64, i64* %PC
  %3526 = add i64 %3525, 3
  store i64 %3526, i64* %PC
  %3527 = inttoptr i64 %3524 to i32*
  %3528 = load i32, i32* %3527
  %3529 = zext i32 %3528 to i64
  store i64 %3529, i64* %RSI, align 8, !tbaa !2428
  %3530 = load i64, i64* %RBP
  %3531 = sub i64 %3530, 16
  %3532 = load i64, i64* %PC
  %3533 = add i64 %3532, 4
  store i64 %3533, i64* %PC
  %3534 = inttoptr i64 %3531 to i64*
  %3535 = load i64, i64* %3534
  store i64 %3535, i64* %RCX, align 8, !tbaa !2428
  %3536 = load i64, i64* %RSI
  %3537 = load i64, i64* %RCX
  %3538 = add i64 %3537, 20
  %3539 = load i64, i64* %PC
  %3540 = add i64 %3539, 4
  store i64 %3540, i64* %PC
  %3541 = inttoptr i64 %3538 to i32*
  %3542 = load i32, i32* %3541
  %3543 = shl i64 %3536, 32
  %3544 = ashr exact i64 %3543, 32
  %3545 = sext i32 %3542 to i64
  %3546 = mul nsw i64 %3545, %3544
  %3547 = trunc i64 %3546 to i32
  %3548 = and i64 %3546, 4294967295
  store i64 %3548, i64* %RSI, align 8, !tbaa !2428
  %3549 = shl i64 %3546, 32
  %3550 = ashr exact i64 %3549, 32
  %3551 = icmp ne i64 %3550, %3546
  %3552 = zext i1 %3551 to i8
  %3553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3552, i8* %3553, align 1, !tbaa !2434
  %3554 = and i32 %3547, 255
  %3555 = call i32 @llvm.ctpop.i32(i32 %3554) #16
  %3556 = trunc i32 %3555 to i8
  %3557 = and i8 %3556, 1
  %3558 = xor i8 %3557, 1
  %3559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3558, i8* %3559, align 1, !tbaa !2448
  %3560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3560, align 1, !tbaa !2449
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3561, align 1, !tbaa !2450
  %3562 = lshr i32 %3547, 31
  %3563 = trunc i32 %3562 to i8
  %3564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3563, i8* %3564, align 1, !tbaa !2451
  %3565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3552, i8* %3565, align 1, !tbaa !2452
  %3566 = load i64, i64* %RDX
  %3567 = load i32, i32* %ESI
  %3568 = zext i32 %3567 to i64
  %3569 = load i64, i64* %PC
  %3570 = add i64 %3569, 2
  store i64 %3570, i64* %PC
  %3571 = trunc i64 %3566 to i32
  %3572 = add i32 %3567, %3571
  %3573 = zext i32 %3572 to i64
  store i64 %3573, i64* %RDX, align 8, !tbaa !2428
  %3574 = icmp ult i32 %3572, %3571
  %3575 = icmp ult i32 %3572, %3567
  %3576 = or i1 %3574, %3575
  %3577 = zext i1 %3576 to i8
  %3578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3577, i8* %3578, align 1, !tbaa !2434
  %3579 = and i32 %3572, 255
  %3580 = call i32 @llvm.ctpop.i32(i32 %3579) #16
  %3581 = trunc i32 %3580 to i8
  %3582 = and i8 %3581, 1
  %3583 = xor i8 %3582, 1
  %3584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3583, i8* %3584, align 1, !tbaa !2448
  %3585 = xor i64 %3568, %3566
  %3586 = trunc i64 %3585 to i32
  %3587 = xor i32 %3586, %3572
  %3588 = lshr i32 %3587, 4
  %3589 = trunc i32 %3588 to i8
  %3590 = and i8 %3589, 1
  %3591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3590, i8* %3591, align 1, !tbaa !2449
  %3592 = icmp eq i32 %3572, 0
  %3593 = zext i1 %3592 to i8
  %3594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3593, i8* %3594, align 1, !tbaa !2450
  %3595 = lshr i32 %3572, 31
  %3596 = trunc i32 %3595 to i8
  %3597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3596, i8* %3597, align 1, !tbaa !2451
  %3598 = lshr i32 %3571, 31
  %3599 = lshr i32 %3567, 31
  %3600 = xor i32 %3595, %3598
  %3601 = xor i32 %3595, %3599
  %3602 = add nuw nsw i32 %3600, %3601
  %3603 = icmp eq i32 %3602, 2
  %3604 = zext i1 %3603 to i8
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3604, i8* %3605, align 1, !tbaa !2452
  %3606 = load i64, i64* %RDX
  %3607 = load i64, i64* %RBP
  %3608 = sub i64 %3607, 76
  %3609 = load i64, i64* %PC
  %3610 = add i64 %3609, 3
  store i64 %3610, i64* %PC
  %3611 = trunc i64 %3606 to i32
  %3612 = inttoptr i64 %3608 to i32*
  %3613 = load i32, i32* %3612
  %3614 = add i32 %3613, %3611
  %3615 = zext i32 %3614 to i64
  store i64 %3615, i64* %RDX, align 8, !tbaa !2428
  %3616 = icmp ult i32 %3614, %3611
  %3617 = icmp ult i32 %3614, %3613
  %3618 = or i1 %3616, %3617
  %3619 = zext i1 %3618 to i8
  %3620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3619, i8* %3620, align 1, !tbaa !2434
  %3621 = and i32 %3614, 255
  %3622 = call i32 @llvm.ctpop.i32(i32 %3621) #16
  %3623 = trunc i32 %3622 to i8
  %3624 = and i8 %3623, 1
  %3625 = xor i8 %3624, 1
  %3626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3625, i8* %3626, align 1, !tbaa !2448
  %3627 = xor i32 %3613, %3611
  %3628 = xor i32 %3627, %3614
  %3629 = lshr i32 %3628, 4
  %3630 = trunc i32 %3629 to i8
  %3631 = and i8 %3630, 1
  %3632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3631, i8* %3632, align 1, !tbaa !2449
  %3633 = icmp eq i32 %3614, 0
  %3634 = zext i1 %3633 to i8
  %3635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3634, i8* %3635, align 1, !tbaa !2450
  %3636 = lshr i32 %3614, 31
  %3637 = trunc i32 %3636 to i8
  %3638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3637, i8* %3638, align 1, !tbaa !2451
  %3639 = lshr i32 %3611, 31
  %3640 = lshr i32 %3613, 31
  %3641 = xor i32 %3636, %3639
  %3642 = xor i32 %3636, %3640
  %3643 = add nuw nsw i32 %3641, %3642
  %3644 = icmp eq i32 %3643, 2
  %3645 = zext i1 %3644 to i8
  %3646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3645, i8* %3646, align 1, !tbaa !2452
  %3647 = load i32, i32* %EDX
  %3648 = zext i32 %3647 to i64
  %3649 = load i64, i64* %PC
  %3650 = add i64 %3649, 3
  store i64 %3650, i64* %PC
  %3651 = shl i64 %3648, 32
  %3652 = ashr exact i64 %3651, 32
  store i64 %3652, i64* %RCX, align 8, !tbaa !2428
  %3653 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3654 = load i64, i64* %RAX
  %3655 = load i64, i64* %RCX
  %3656 = mul i64 %3655, 4
  %3657 = add i64 %3656, %3654
  %3658 = load i64, i64* %PC
  %3659 = add i64 %3658, 5
  store i64 %3659, i64* %PC
  %3660 = inttoptr i64 %3657 to float*
  %3661 = load float, float* %3660
  %3662 = bitcast i8* %3653 to float*
  store float %3661, float* %3662, align 1, !tbaa !2453
  %3663 = getelementptr inbounds i8, i8* %3653, i64 4
  %3664 = bitcast i8* %3663 to float*
  store float 0.000000e+00, float* %3664, align 1, !tbaa !2453
  %3665 = getelementptr inbounds i8, i8* %3653, i64 8
  %3666 = bitcast i8* %3665 to float*
  store float 0.000000e+00, float* %3666, align 1, !tbaa !2453
  %3667 = getelementptr inbounds i8, i8* %3653, i64 12
  %3668 = bitcast i8* %3667 to float*
  store float 0.000000e+00, float* %3668, align 1, !tbaa !2453
  %3669 = load i64, i64* %RBP
  %3670 = sub i64 %3669, 40
  %3671 = load i64, i64* %PC
  %3672 = add i64 %3671, 4
  store i64 %3672, i64* %PC
  %3673 = inttoptr i64 %3670 to i64*
  %3674 = load i64, i64* %3673
  store i64 %3674, i64* %RAX, align 8, !tbaa !2428
  %3675 = load i64, i64* %RAX
  %3676 = load i64, i64* %PC
  %3677 = add i64 %3676, 3
  store i64 %3677, i64* %PC
  %3678 = inttoptr i64 %3675 to i64*
  %3679 = load i64, i64* %3678
  store i64 %3679, i64* %RAX, align 8, !tbaa !2428
  %3680 = load i64, i64* %RBP
  %3681 = sub i64 %3680, 40
  %3682 = load i64, i64* %PC
  %3683 = add i64 %3682, 4
  store i64 %3683, i64* %PC
  %3684 = inttoptr i64 %3681 to i64*
  %3685 = load i64, i64* %3684
  store i64 %3685, i64* %RCX, align 8, !tbaa !2428
  %3686 = load i64, i64* %RCX
  %3687 = add i64 %3686, 12
  %3688 = load i64, i64* %PC
  %3689 = add i64 %3688, 4
  store i64 %3689, i64* %PC
  %3690 = inttoptr i64 %3687 to i32*
  %3691 = load i32, i32* %3690
  %3692 = sext i32 %3691 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %3693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3693, align 1, !tbaa !2434
  %3694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %3694, align 1, !tbaa !2448
  %3695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3695, align 1, !tbaa !2449
  %3696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3696, align 1, !tbaa !2450
  %3697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %3697, align 1, !tbaa !2451
  %3698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3698, align 1, !tbaa !2452
  %3699 = load i64, i64* %RBP
  %3700 = sub i64 %3699, 40
  %3701 = load i64, i64* %PC
  %3702 = add i64 %3701, 4
  store i64 %3702, i64* %PC
  %3703 = inttoptr i64 %3700 to i64*
  %3704 = load i64, i64* %3703
  store i64 %3704, i64* %RCX, align 8, !tbaa !2428
  %3705 = load i64, i64* %RDX
  %3706 = load i64, i64* %RCX
  %3707 = add i64 %3706, 16
  %3708 = load i64, i64* %PC
  %3709 = add i64 %3708, 4
  store i64 %3709, i64* %PC
  %3710 = inttoptr i64 %3707 to i32*
  %3711 = load i32, i32* %3710
  %3712 = shl i64 %3705, 32
  %3713 = ashr exact i64 %3712, 32
  %3714 = sext i32 %3711 to i64
  %3715 = mul nsw i64 %3714, %3713
  %3716 = trunc i64 %3715 to i32
  %3717 = and i64 %3715, 4294967295
  store i64 %3717, i64* %RDX, align 8, !tbaa !2428
  %3718 = shl i64 %3715, 32
  %3719 = ashr exact i64 %3718, 32
  %3720 = icmp ne i64 %3719, %3715
  %3721 = zext i1 %3720 to i8
  %3722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3721, i8* %3722, align 1, !tbaa !2434
  %3723 = and i32 %3716, 255
  %3724 = call i32 @llvm.ctpop.i32(i32 %3723) #16
  %3725 = trunc i32 %3724 to i8
  %3726 = and i8 %3725, 1
  %3727 = xor i8 %3726, 1
  %3728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3727, i8* %3728, align 1, !tbaa !2448
  %3729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3729, align 1, !tbaa !2449
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3730, align 1, !tbaa !2450
  %3731 = lshr i32 %3716, 31
  %3732 = trunc i32 %3731 to i8
  %3733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3732, i8* %3733, align 1, !tbaa !2451
  %3734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3721, i8* %3734, align 1, !tbaa !2452
  %3735 = load i64, i64* %RBP
  %3736 = sub i64 %3735, 40
  %3737 = load i64, i64* %PC
  %3738 = add i64 %3737, 4
  store i64 %3738, i64* %PC
  %3739 = inttoptr i64 %3736 to i64*
  %3740 = load i64, i64* %3739
  store i64 %3740, i64* %RCX, align 8, !tbaa !2428
  %3741 = load i64, i64* %RDX
  %3742 = load i64, i64* %RCX
  %3743 = add i64 %3742, 20
  %3744 = load i64, i64* %PC
  %3745 = add i64 %3744, 4
  store i64 %3745, i64* %PC
  %3746 = inttoptr i64 %3743 to i32*
  %3747 = load i32, i32* %3746
  %3748 = shl i64 %3741, 32
  %3749 = ashr exact i64 %3748, 32
  %3750 = sext i32 %3747 to i64
  %3751 = mul nsw i64 %3750, %3749
  %3752 = trunc i64 %3751 to i32
  %3753 = and i64 %3751, 4294967295
  store i64 %3753, i64* %RDX, align 8, !tbaa !2428
  %3754 = shl i64 %3751, 32
  %3755 = ashr exact i64 %3754, 32
  %3756 = icmp ne i64 %3755, %3751
  %3757 = zext i1 %3756 to i8
  %3758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3757, i8* %3758, align 1, !tbaa !2434
  %3759 = and i32 %3752, 255
  %3760 = call i32 @llvm.ctpop.i32(i32 %3759) #16
  %3761 = trunc i32 %3760 to i8
  %3762 = and i8 %3761, 1
  %3763 = xor i8 %3762, 1
  %3764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3763, i8* %3764, align 1, !tbaa !2448
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3765, align 1, !tbaa !2449
  %3766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3766, align 1, !tbaa !2450
  %3767 = lshr i32 %3752, 31
  %3768 = trunc i32 %3767 to i8
  %3769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3768, i8* %3769, align 1, !tbaa !2451
  %3770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3757, i8* %3770, align 1, !tbaa !2452
  %3771 = load i64, i64* %RBP
  %3772 = sub i64 %3771, 68
  %3773 = load i64, i64* %PC
  %3774 = add i64 %3773, 3
  store i64 %3774, i64* %PC
  %3775 = inttoptr i64 %3772 to i32*
  %3776 = load i32, i32* %3775
  %3777 = zext i32 %3776 to i64
  store i64 %3777, i64* %RSI, align 8, !tbaa !2428
  %3778 = load i64, i64* %RBP
  %3779 = sub i64 %3778, 40
  %3780 = load i64, i64* %PC
  %3781 = add i64 %3780, 4
  store i64 %3781, i64* %PC
  %3782 = inttoptr i64 %3779 to i64*
  %3783 = load i64, i64* %3782
  store i64 %3783, i64* %RCX, align 8, !tbaa !2428
  %3784 = load i64, i64* %RSI
  %3785 = load i64, i64* %RCX
  %3786 = add i64 %3785, 16
  %3787 = load i64, i64* %PC
  %3788 = add i64 %3787, 4
  store i64 %3788, i64* %PC
  %3789 = inttoptr i64 %3786 to i32*
  %3790 = load i32, i32* %3789
  %3791 = shl i64 %3784, 32
  %3792 = ashr exact i64 %3791, 32
  %3793 = sext i32 %3790 to i64
  %3794 = mul nsw i64 %3793, %3792
  %3795 = trunc i64 %3794 to i32
  %3796 = and i64 %3794, 4294967295
  store i64 %3796, i64* %RSI, align 8, !tbaa !2428
  %3797 = shl i64 %3794, 32
  %3798 = ashr exact i64 %3797, 32
  %3799 = icmp ne i64 %3798, %3794
  %3800 = zext i1 %3799 to i8
  %3801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3800, i8* %3801, align 1, !tbaa !2434
  %3802 = and i32 %3795, 255
  %3803 = call i32 @llvm.ctpop.i32(i32 %3802) #16
  %3804 = trunc i32 %3803 to i8
  %3805 = and i8 %3804, 1
  %3806 = xor i8 %3805, 1
  %3807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3806, i8* %3807, align 1, !tbaa !2448
  %3808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3808, align 1, !tbaa !2449
  %3809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3809, align 1, !tbaa !2450
  %3810 = lshr i32 %3795, 31
  %3811 = trunc i32 %3810 to i8
  %3812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3811, i8* %3812, align 1, !tbaa !2451
  %3813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3800, i8* %3813, align 1, !tbaa !2452
  %3814 = load i64, i64* %RBP
  %3815 = sub i64 %3814, 40
  %3816 = load i64, i64* %PC
  %3817 = add i64 %3816, 4
  store i64 %3817, i64* %PC
  %3818 = inttoptr i64 %3815 to i64*
  %3819 = load i64, i64* %3818
  store i64 %3819, i64* %RCX, align 8, !tbaa !2428
  %3820 = load i64, i64* %RSI
  %3821 = load i64, i64* %RCX
  %3822 = add i64 %3821, 20
  %3823 = load i64, i64* %PC
  %3824 = add i64 %3823, 4
  store i64 %3824, i64* %PC
  %3825 = inttoptr i64 %3822 to i32*
  %3826 = load i32, i32* %3825
  %3827 = shl i64 %3820, 32
  %3828 = ashr exact i64 %3827, 32
  %3829 = sext i32 %3826 to i64
  %3830 = mul nsw i64 %3829, %3828
  %3831 = trunc i64 %3830 to i32
  %3832 = and i64 %3830, 4294967295
  store i64 %3832, i64* %RSI, align 8, !tbaa !2428
  %3833 = shl i64 %3830, 32
  %3834 = ashr exact i64 %3833, 32
  %3835 = icmp ne i64 %3834, %3830
  %3836 = zext i1 %3835 to i8
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3836, i8* %3837, align 1, !tbaa !2434
  %3838 = and i32 %3831, 255
  %3839 = call i32 @llvm.ctpop.i32(i32 %3838) #16
  %3840 = trunc i32 %3839 to i8
  %3841 = and i8 %3840, 1
  %3842 = xor i8 %3841, 1
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3842, i8* %3843, align 1, !tbaa !2448
  %3844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3844, align 1, !tbaa !2449
  %3845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3845, align 1, !tbaa !2450
  %3846 = lshr i32 %3831, 31
  %3847 = trunc i32 %3846 to i8
  %3848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3847, i8* %3848, align 1, !tbaa !2451
  %3849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3836, i8* %3849, align 1, !tbaa !2452
  %3850 = load i64, i64* %RDX
  %3851 = load i32, i32* %ESI
  %3852 = zext i32 %3851 to i64
  %3853 = load i64, i64* %PC
  %3854 = add i64 %3853, 2
  store i64 %3854, i64* %PC
  %3855 = trunc i64 %3850 to i32
  %3856 = add i32 %3851, %3855
  %3857 = zext i32 %3856 to i64
  store i64 %3857, i64* %RDX, align 8, !tbaa !2428
  %3858 = icmp ult i32 %3856, %3855
  %3859 = icmp ult i32 %3856, %3851
  %3860 = or i1 %3858, %3859
  %3861 = zext i1 %3860 to i8
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3861, i8* %3862, align 1, !tbaa !2434
  %3863 = and i32 %3856, 255
  %3864 = call i32 @llvm.ctpop.i32(i32 %3863) #16
  %3865 = trunc i32 %3864 to i8
  %3866 = and i8 %3865, 1
  %3867 = xor i8 %3866, 1
  %3868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3867, i8* %3868, align 1, !tbaa !2448
  %3869 = xor i64 %3852, %3850
  %3870 = trunc i64 %3869 to i32
  %3871 = xor i32 %3870, %3856
  %3872 = lshr i32 %3871, 4
  %3873 = trunc i32 %3872 to i8
  %3874 = and i8 %3873, 1
  %3875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3874, i8* %3875, align 1, !tbaa !2449
  %3876 = icmp eq i32 %3856, 0
  %3877 = zext i1 %3876 to i8
  %3878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3877, i8* %3878, align 1, !tbaa !2450
  %3879 = lshr i32 %3856, 31
  %3880 = trunc i32 %3879 to i8
  %3881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3880, i8* %3881, align 1, !tbaa !2451
  %3882 = lshr i32 %3855, 31
  %3883 = lshr i32 %3851, 31
  %3884 = xor i32 %3879, %3882
  %3885 = xor i32 %3879, %3883
  %3886 = add nuw nsw i32 %3884, %3885
  %3887 = icmp eq i32 %3886, 2
  %3888 = zext i1 %3887 to i8
  %3889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3888, i8* %3889, align 1, !tbaa !2452
  %3890 = load i64, i64* %RBP
  %3891 = sub i64 %3890, 72
  %3892 = load i64, i64* %PC
  %3893 = add i64 %3892, 3
  store i64 %3893, i64* %PC
  %3894 = inttoptr i64 %3891 to i32*
  %3895 = load i32, i32* %3894
  %3896 = zext i32 %3895 to i64
  store i64 %3896, i64* %RSI, align 8, !tbaa !2428
  %3897 = load i64, i64* %RBP
  %3898 = sub i64 %3897, 40
  %3899 = load i64, i64* %PC
  %3900 = add i64 %3899, 4
  store i64 %3900, i64* %PC
  %3901 = inttoptr i64 %3898 to i64*
  %3902 = load i64, i64* %3901
  store i64 %3902, i64* %RCX, align 8, !tbaa !2428
  %3903 = load i64, i64* %RSI
  %3904 = load i64, i64* %RCX
  %3905 = add i64 %3904, 20
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 4
  store i64 %3907, i64* %PC
  %3908 = inttoptr i64 %3905 to i32*
  %3909 = load i32, i32* %3908
  %3910 = shl i64 %3903, 32
  %3911 = ashr exact i64 %3910, 32
  %3912 = sext i32 %3909 to i64
  %3913 = mul nsw i64 %3912, %3911
  %3914 = trunc i64 %3913 to i32
  %3915 = and i64 %3913, 4294967295
  store i64 %3915, i64* %RSI, align 8, !tbaa !2428
  %3916 = shl i64 %3913, 32
  %3917 = ashr exact i64 %3916, 32
  %3918 = icmp ne i64 %3917, %3913
  %3919 = zext i1 %3918 to i8
  %3920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3919, i8* %3920, align 1, !tbaa !2434
  %3921 = and i32 %3914, 255
  %3922 = call i32 @llvm.ctpop.i32(i32 %3921) #16
  %3923 = trunc i32 %3922 to i8
  %3924 = and i8 %3923, 1
  %3925 = xor i8 %3924, 1
  %3926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3925, i8* %3926, align 1, !tbaa !2448
  %3927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3927, align 1, !tbaa !2449
  %3928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3928, align 1, !tbaa !2450
  %3929 = lshr i32 %3914, 31
  %3930 = trunc i32 %3929 to i8
  %3931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3930, i8* %3931, align 1, !tbaa !2451
  %3932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3919, i8* %3932, align 1, !tbaa !2452
  %3933 = load i64, i64* %RDX
  %3934 = load i32, i32* %ESI
  %3935 = zext i32 %3934 to i64
  %3936 = load i64, i64* %PC
  %3937 = add i64 %3936, 2
  store i64 %3937, i64* %PC
  %3938 = trunc i64 %3933 to i32
  %3939 = add i32 %3934, %3938
  %3940 = zext i32 %3939 to i64
  store i64 %3940, i64* %RDX, align 8, !tbaa !2428
  %3941 = icmp ult i32 %3939, %3938
  %3942 = icmp ult i32 %3939, %3934
  %3943 = or i1 %3941, %3942
  %3944 = zext i1 %3943 to i8
  %3945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3944, i8* %3945, align 1, !tbaa !2434
  %3946 = and i32 %3939, 255
  %3947 = call i32 @llvm.ctpop.i32(i32 %3946) #16
  %3948 = trunc i32 %3947 to i8
  %3949 = and i8 %3948, 1
  %3950 = xor i8 %3949, 1
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3950, i8* %3951, align 1, !tbaa !2448
  %3952 = xor i64 %3935, %3933
  %3953 = trunc i64 %3952 to i32
  %3954 = xor i32 %3953, %3939
  %3955 = lshr i32 %3954, 4
  %3956 = trunc i32 %3955 to i8
  %3957 = and i8 %3956, 1
  %3958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3957, i8* %3958, align 1, !tbaa !2449
  %3959 = icmp eq i32 %3939, 0
  %3960 = zext i1 %3959 to i8
  %3961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3960, i8* %3961, align 1, !tbaa !2450
  %3962 = lshr i32 %3939, 31
  %3963 = trunc i32 %3962 to i8
  %3964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3963, i8* %3964, align 1, !tbaa !2451
  %3965 = lshr i32 %3938, 31
  %3966 = lshr i32 %3934, 31
  %3967 = xor i32 %3962, %3965
  %3968 = xor i32 %3962, %3966
  %3969 = add nuw nsw i32 %3967, %3968
  %3970 = icmp eq i32 %3969, 2
  %3971 = zext i1 %3970 to i8
  %3972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3971, i8* %3972, align 1, !tbaa !2452
  %3973 = load i64, i64* %RBP
  %3974 = sub i64 %3973, 76
  %3975 = load i64, i64* %PC
  %3976 = add i64 %3975, 3
  store i64 %3976, i64* %PC
  %3977 = inttoptr i64 %3974 to i32*
  %3978 = load i32, i32* %3977
  %3979 = zext i32 %3978 to i64
  store i64 %3979, i64* %RSI, align 8, !tbaa !2428
  %3980 = load i64, i64* %RSI
  %3981 = load i64, i64* %PC
  %3982 = add i64 %3981, 3
  store i64 %3982, i64* %PC
  %3983 = trunc i64 %3980 to i32
  %3984 = add i32 1, %3983
  %3985 = zext i32 %3984 to i64
  store i64 %3985, i64* %RSI, align 8, !tbaa !2428
  %3986 = icmp ult i32 %3984, %3983
  %3987 = icmp ult i32 %3984, 1
  %3988 = or i1 %3986, %3987
  %3989 = zext i1 %3988 to i8
  %3990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3989, i8* %3990, align 1, !tbaa !2434
  %3991 = and i32 %3984, 255
  %3992 = call i32 @llvm.ctpop.i32(i32 %3991) #16
  %3993 = trunc i32 %3992 to i8
  %3994 = and i8 %3993, 1
  %3995 = xor i8 %3994, 1
  %3996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3995, i8* %3996, align 1, !tbaa !2448
  %3997 = xor i64 1, %3980
  %3998 = trunc i64 %3997 to i32
  %3999 = xor i32 %3998, %3984
  %4000 = lshr i32 %3999, 4
  %4001 = trunc i32 %4000 to i8
  %4002 = and i8 %4001, 1
  %4003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4002, i8* %4003, align 1, !tbaa !2449
  %4004 = icmp eq i32 %3984, 0
  %4005 = zext i1 %4004 to i8
  %4006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4005, i8* %4006, align 1, !tbaa !2450
  %4007 = lshr i32 %3984, 31
  %4008 = trunc i32 %4007 to i8
  %4009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4008, i8* %4009, align 1, !tbaa !2451
  %4010 = lshr i32 %3983, 31
  %4011 = xor i32 %4007, %4010
  %4012 = add nuw nsw i32 %4011, %4007
  %4013 = icmp eq i32 %4012, 2
  %4014 = zext i1 %4013 to i8
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4014, i8* %4015, align 1, !tbaa !2452
  %4016 = load i64, i64* %RDX
  %4017 = load i32, i32* %ESI
  %4018 = zext i32 %4017 to i64
  %4019 = load i64, i64* %PC
  %4020 = add i64 %4019, 2
  store i64 %4020, i64* %PC
  %4021 = trunc i64 %4016 to i32
  %4022 = add i32 %4017, %4021
  %4023 = zext i32 %4022 to i64
  store i64 %4023, i64* %RDX, align 8, !tbaa !2428
  %4024 = icmp ult i32 %4022, %4021
  %4025 = icmp ult i32 %4022, %4017
  %4026 = or i1 %4024, %4025
  %4027 = zext i1 %4026 to i8
  %4028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4027, i8* %4028, align 1, !tbaa !2434
  %4029 = and i32 %4022, 255
  %4030 = call i32 @llvm.ctpop.i32(i32 %4029) #16
  %4031 = trunc i32 %4030 to i8
  %4032 = and i8 %4031, 1
  %4033 = xor i8 %4032, 1
  %4034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4033, i8* %4034, align 1, !tbaa !2448
  %4035 = xor i64 %4018, %4016
  %4036 = trunc i64 %4035 to i32
  %4037 = xor i32 %4036, %4022
  %4038 = lshr i32 %4037, 4
  %4039 = trunc i32 %4038 to i8
  %4040 = and i8 %4039, 1
  %4041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4040, i8* %4041, align 1, !tbaa !2449
  %4042 = icmp eq i32 %4022, 0
  %4043 = zext i1 %4042 to i8
  %4044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4043, i8* %4044, align 1, !tbaa !2450
  %4045 = lshr i32 %4022, 31
  %4046 = trunc i32 %4045 to i8
  %4047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4046, i8* %4047, align 1, !tbaa !2451
  %4048 = lshr i32 %4021, 31
  %4049 = lshr i32 %4017, 31
  %4050 = xor i32 %4045, %4048
  %4051 = xor i32 %4045, %4049
  %4052 = add nuw nsw i32 %4050, %4051
  %4053 = icmp eq i32 %4052, 2
  %4054 = zext i1 %4053 to i8
  %4055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4054, i8* %4055, align 1, !tbaa !2452
  %4056 = load i32, i32* %EDX
  %4057 = zext i32 %4056 to i64
  %4058 = load i64, i64* %PC
  %4059 = add i64 %4058, 3
  store i64 %4059, i64* %PC
  %4060 = shl i64 %4057, 32
  %4061 = ashr exact i64 %4060, 32
  store i64 %4061, i64* %RCX, align 8, !tbaa !2428
  %4062 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4063 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4064 = load i64, i64* %RAX
  %4065 = load i64, i64* %RCX
  %4066 = mul i64 %4065, 4
  %4067 = add i64 %4066, %4064
  %4068 = load i64, i64* %PC
  %4069 = add i64 %4068, 5
  store i64 %4069, i64* %PC
  %4070 = bitcast i8* %4063 to <2 x float>*
  %4071 = load <2 x float>, <2 x float>* %4070, align 1
  %4072 = getelementptr inbounds i8, i8* %4063, i64 8
  %4073 = bitcast i8* %4072 to <2 x i32>*
  %4074 = load <2 x i32>, <2 x i32>* %4073, align 1
  %4075 = inttoptr i64 %4067 to float*
  %4076 = load float, float* %4075
  %4077 = extractelement <2 x float> %4071, i32 0
  %4078 = fmul float %4077, %4076
  %4079 = bitcast i8* %4062 to float*
  store float %4078, float* %4079, align 1, !tbaa !2453
  %4080 = bitcast <2 x float> %4071 to <2 x i32>
  %4081 = extractelement <2 x i32> %4080, i32 1
  %4082 = getelementptr inbounds i8, i8* %4062, i64 4
  %4083 = bitcast i8* %4082 to i32*
  store i32 %4081, i32* %4083, align 1, !tbaa !2453
  %4084 = extractelement <2 x i32> %4074, i32 0
  %4085 = getelementptr inbounds i8, i8* %4062, i64 8
  %4086 = bitcast i8* %4085 to i32*
  store i32 %4084, i32* %4086, align 1, !tbaa !2453
  %4087 = extractelement <2 x i32> %4074, i32 1
  %4088 = getelementptr inbounds i8, i8* %4062, i64 12
  %4089 = bitcast i8* %4088 to i32*
  store i32 %4087, i32* %4089, align 1, !tbaa !2453
  %4090 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4091 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4092 = bitcast %union.vec128_t* %XMM1 to i8*
  %4093 = load i64, i64* %PC
  %4094 = add i64 %4093, 4
  store i64 %4094, i64* %PC
  %4095 = bitcast i8* %4091 to <2 x float>*
  %4096 = load <2 x float>, <2 x float>* %4095, align 1
  %4097 = getelementptr inbounds i8, i8* %4091, i64 8
  %4098 = bitcast i8* %4097 to <2 x i32>*
  %4099 = load <2 x i32>, <2 x i32>* %4098, align 1
  %4100 = bitcast i8* %4092 to <2 x float>*
  %4101 = load <2 x float>, <2 x float>* %4100, align 1
  %4102 = extractelement <2 x float> %4096, i32 0
  %4103 = extractelement <2 x float> %4101, i32 0
  %4104 = fadd float %4102, %4103
  %4105 = bitcast i8* %4090 to float*
  store float %4104, float* %4105, align 1, !tbaa !2453
  %4106 = bitcast <2 x float> %4096 to <2 x i32>
  %4107 = extractelement <2 x i32> %4106, i32 1
  %4108 = getelementptr inbounds i8, i8* %4090, i64 4
  %4109 = bitcast i8* %4108 to i32*
  store i32 %4107, i32* %4109, align 1, !tbaa !2453
  %4110 = extractelement <2 x i32> %4099, i32 0
  %4111 = getelementptr inbounds i8, i8* %4090, i64 8
  %4112 = bitcast i8* %4111 to i32*
  store i32 %4110, i32* %4112, align 1, !tbaa !2453
  %4113 = extractelement <2 x i32> %4099, i32 1
  %4114 = getelementptr inbounds i8, i8* %4090, i64 12
  %4115 = bitcast i8* %4114 to i32*
  store i32 %4113, i32* %4115, align 1, !tbaa !2453
  %4116 = load i64, i64* %RBP
  %4117 = sub i64 %4116, 24
  %4118 = load i64, i64* %PC
  %4119 = add i64 %4118, 4
  store i64 %4119, i64* %PC
  %4120 = inttoptr i64 %4117 to i64*
  %4121 = load i64, i64* %4120
  store i64 %4121, i64* %RAX, align 8, !tbaa !2428
  %4122 = load i64, i64* %RAX
  %4123 = load i64, i64* %PC
  %4124 = add i64 %4123, 3
  store i64 %4124, i64* %PC
  %4125 = inttoptr i64 %4122 to i64*
  %4126 = load i64, i64* %4125
  store i64 %4126, i64* %RAX, align 8, !tbaa !2428
  %4127 = load i64, i64* %RBP
  %4128 = sub i64 %4127, 24
  %4129 = load i64, i64* %PC
  %4130 = add i64 %4129, 4
  store i64 %4130, i64* %PC
  %4131 = inttoptr i64 %4128 to i64*
  %4132 = load i64, i64* %4131
  store i64 %4132, i64* %RCX, align 8, !tbaa !2428
  %4133 = load i64, i64* %RCX
  %4134 = add i64 %4133, 12
  %4135 = load i64, i64* %PC
  %4136 = add i64 %4135, 4
  store i64 %4136, i64* %PC
  %4137 = inttoptr i64 %4134 to i32*
  %4138 = load i32, i32* %4137
  %4139 = sext i32 %4138 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4140, align 1, !tbaa !2434
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4141, align 1, !tbaa !2448
  %4142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4142, align 1, !tbaa !2449
  %4143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4143, align 1, !tbaa !2450
  %4144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4144, align 1, !tbaa !2451
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4145, align 1, !tbaa !2452
  %4146 = load i64, i64* %RBP
  %4147 = sub i64 %4146, 24
  %4148 = load i64, i64* %PC
  %4149 = add i64 %4148, 4
  store i64 %4149, i64* %PC
  %4150 = inttoptr i64 %4147 to i64*
  %4151 = load i64, i64* %4150
  store i64 %4151, i64* %RCX, align 8, !tbaa !2428
  %4152 = load i64, i64* %RDX
  %4153 = load i64, i64* %RCX
  %4154 = add i64 %4153, 16
  %4155 = load i64, i64* %PC
  %4156 = add i64 %4155, 4
  store i64 %4156, i64* %PC
  %4157 = inttoptr i64 %4154 to i32*
  %4158 = load i32, i32* %4157
  %4159 = shl i64 %4152, 32
  %4160 = ashr exact i64 %4159, 32
  %4161 = sext i32 %4158 to i64
  %4162 = mul nsw i64 %4161, %4160
  %4163 = trunc i64 %4162 to i32
  %4164 = and i64 %4162, 4294967295
  store i64 %4164, i64* %RDX, align 8, !tbaa !2428
  %4165 = shl i64 %4162, 32
  %4166 = ashr exact i64 %4165, 32
  %4167 = icmp ne i64 %4166, %4162
  %4168 = zext i1 %4167 to i8
  %4169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4168, i8* %4169, align 1, !tbaa !2434
  %4170 = and i32 %4163, 255
  %4171 = call i32 @llvm.ctpop.i32(i32 %4170) #16
  %4172 = trunc i32 %4171 to i8
  %4173 = and i8 %4172, 1
  %4174 = xor i8 %4173, 1
  %4175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4174, i8* %4175, align 1, !tbaa !2448
  %4176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4176, align 1, !tbaa !2449
  %4177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4177, align 1, !tbaa !2450
  %4178 = lshr i32 %4163, 31
  %4179 = trunc i32 %4178 to i8
  %4180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4179, i8* %4180, align 1, !tbaa !2451
  %4181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4168, i8* %4181, align 1, !tbaa !2452
  %4182 = load i64, i64* %RBP
  %4183 = sub i64 %4182, 24
  %4184 = load i64, i64* %PC
  %4185 = add i64 %4184, 4
  store i64 %4185, i64* %PC
  %4186 = inttoptr i64 %4183 to i64*
  %4187 = load i64, i64* %4186
  store i64 %4187, i64* %RCX, align 8, !tbaa !2428
  %4188 = load i64, i64* %RDX
  %4189 = load i64, i64* %RCX
  %4190 = add i64 %4189, 20
  %4191 = load i64, i64* %PC
  %4192 = add i64 %4191, 4
  store i64 %4192, i64* %PC
  %4193 = inttoptr i64 %4190 to i32*
  %4194 = load i32, i32* %4193
  %4195 = shl i64 %4188, 32
  %4196 = ashr exact i64 %4195, 32
  %4197 = sext i32 %4194 to i64
  %4198 = mul nsw i64 %4197, %4196
  %4199 = trunc i64 %4198 to i32
  %4200 = and i64 %4198, 4294967295
  store i64 %4200, i64* %RDX, align 8, !tbaa !2428
  %4201 = shl i64 %4198, 32
  %4202 = ashr exact i64 %4201, 32
  %4203 = icmp ne i64 %4202, %4198
  %4204 = zext i1 %4203 to i8
  %4205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4204, i8* %4205, align 1, !tbaa !2434
  %4206 = and i32 %4199, 255
  %4207 = call i32 @llvm.ctpop.i32(i32 %4206) #16
  %4208 = trunc i32 %4207 to i8
  %4209 = and i8 %4208, 1
  %4210 = xor i8 %4209, 1
  %4211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4210, i8* %4211, align 1, !tbaa !2448
  %4212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4212, align 1, !tbaa !2449
  %4213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4213, align 1, !tbaa !2450
  %4214 = lshr i32 %4199, 31
  %4215 = trunc i32 %4214 to i8
  %4216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4215, i8* %4216, align 1, !tbaa !2451
  %4217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4204, i8* %4217, align 1, !tbaa !2452
  %4218 = load i64, i64* %RBP
  %4219 = sub i64 %4218, 68
  %4220 = load i64, i64* %PC
  %4221 = add i64 %4220, 3
  store i64 %4221, i64* %PC
  %4222 = inttoptr i64 %4219 to i32*
  %4223 = load i32, i32* %4222
  %4224 = zext i32 %4223 to i64
  store i64 %4224, i64* %RSI, align 8, !tbaa !2428
  %4225 = load i64, i64* %RBP
  %4226 = sub i64 %4225, 24
  %4227 = load i64, i64* %PC
  %4228 = add i64 %4227, 4
  store i64 %4228, i64* %PC
  %4229 = inttoptr i64 %4226 to i64*
  %4230 = load i64, i64* %4229
  store i64 %4230, i64* %RCX, align 8, !tbaa !2428
  %4231 = load i64, i64* %RSI
  %4232 = load i64, i64* %RCX
  %4233 = add i64 %4232, 16
  %4234 = load i64, i64* %PC
  %4235 = add i64 %4234, 4
  store i64 %4235, i64* %PC
  %4236 = inttoptr i64 %4233 to i32*
  %4237 = load i32, i32* %4236
  %4238 = shl i64 %4231, 32
  %4239 = ashr exact i64 %4238, 32
  %4240 = sext i32 %4237 to i64
  %4241 = mul nsw i64 %4240, %4239
  %4242 = trunc i64 %4241 to i32
  %4243 = and i64 %4241, 4294967295
  store i64 %4243, i64* %RSI, align 8, !tbaa !2428
  %4244 = shl i64 %4241, 32
  %4245 = ashr exact i64 %4244, 32
  %4246 = icmp ne i64 %4245, %4241
  %4247 = zext i1 %4246 to i8
  %4248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4247, i8* %4248, align 1, !tbaa !2434
  %4249 = and i32 %4242, 255
  %4250 = call i32 @llvm.ctpop.i32(i32 %4249) #16
  %4251 = trunc i32 %4250 to i8
  %4252 = and i8 %4251, 1
  %4253 = xor i8 %4252, 1
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4253, i8* %4254, align 1, !tbaa !2448
  %4255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4255, align 1, !tbaa !2449
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4256, align 1, !tbaa !2450
  %4257 = lshr i32 %4242, 31
  %4258 = trunc i32 %4257 to i8
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4258, i8* %4259, align 1, !tbaa !2451
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4247, i8* %4260, align 1, !tbaa !2452
  %4261 = load i64, i64* %RBP
  %4262 = sub i64 %4261, 24
  %4263 = load i64, i64* %PC
  %4264 = add i64 %4263, 4
  store i64 %4264, i64* %PC
  %4265 = inttoptr i64 %4262 to i64*
  %4266 = load i64, i64* %4265
  store i64 %4266, i64* %RCX, align 8, !tbaa !2428
  %4267 = load i64, i64* %RSI
  %4268 = load i64, i64* %RCX
  %4269 = add i64 %4268, 20
  %4270 = load i64, i64* %PC
  %4271 = add i64 %4270, 4
  store i64 %4271, i64* %PC
  %4272 = inttoptr i64 %4269 to i32*
  %4273 = load i32, i32* %4272
  %4274 = shl i64 %4267, 32
  %4275 = ashr exact i64 %4274, 32
  %4276 = sext i32 %4273 to i64
  %4277 = mul nsw i64 %4276, %4275
  %4278 = trunc i64 %4277 to i32
  %4279 = and i64 %4277, 4294967295
  store i64 %4279, i64* %RSI, align 8, !tbaa !2428
  %4280 = shl i64 %4277, 32
  %4281 = ashr exact i64 %4280, 32
  %4282 = icmp ne i64 %4281, %4277
  %4283 = zext i1 %4282 to i8
  %4284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4283, i8* %4284, align 1, !tbaa !2434
  %4285 = and i32 %4278, 255
  %4286 = call i32 @llvm.ctpop.i32(i32 %4285) #16
  %4287 = trunc i32 %4286 to i8
  %4288 = and i8 %4287, 1
  %4289 = xor i8 %4288, 1
  %4290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4289, i8* %4290, align 1, !tbaa !2448
  %4291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4291, align 1, !tbaa !2449
  %4292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4292, align 1, !tbaa !2450
  %4293 = lshr i32 %4278, 31
  %4294 = trunc i32 %4293 to i8
  %4295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4294, i8* %4295, align 1, !tbaa !2451
  %4296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4283, i8* %4296, align 1, !tbaa !2452
  %4297 = load i64, i64* %RDX
  %4298 = load i32, i32* %ESI
  %4299 = zext i32 %4298 to i64
  %4300 = load i64, i64* %PC
  %4301 = add i64 %4300, 2
  store i64 %4301, i64* %PC
  %4302 = trunc i64 %4297 to i32
  %4303 = add i32 %4298, %4302
  %4304 = zext i32 %4303 to i64
  store i64 %4304, i64* %RDX, align 8, !tbaa !2428
  %4305 = icmp ult i32 %4303, %4302
  %4306 = icmp ult i32 %4303, %4298
  %4307 = or i1 %4305, %4306
  %4308 = zext i1 %4307 to i8
  %4309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4308, i8* %4309, align 1, !tbaa !2434
  %4310 = and i32 %4303, 255
  %4311 = call i32 @llvm.ctpop.i32(i32 %4310) #16
  %4312 = trunc i32 %4311 to i8
  %4313 = and i8 %4312, 1
  %4314 = xor i8 %4313, 1
  %4315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4314, i8* %4315, align 1, !tbaa !2448
  %4316 = xor i64 %4299, %4297
  %4317 = trunc i64 %4316 to i32
  %4318 = xor i32 %4317, %4303
  %4319 = lshr i32 %4318, 4
  %4320 = trunc i32 %4319 to i8
  %4321 = and i8 %4320, 1
  %4322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4321, i8* %4322, align 1, !tbaa !2449
  %4323 = icmp eq i32 %4303, 0
  %4324 = zext i1 %4323 to i8
  %4325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4324, i8* %4325, align 1, !tbaa !2450
  %4326 = lshr i32 %4303, 31
  %4327 = trunc i32 %4326 to i8
  %4328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4327, i8* %4328, align 1, !tbaa !2451
  %4329 = lshr i32 %4302, 31
  %4330 = lshr i32 %4298, 31
  %4331 = xor i32 %4326, %4329
  %4332 = xor i32 %4326, %4330
  %4333 = add nuw nsw i32 %4331, %4332
  %4334 = icmp eq i32 %4333, 2
  %4335 = zext i1 %4334 to i8
  %4336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4335, i8* %4336, align 1, !tbaa !2452
  %4337 = load i64, i64* %RBP
  %4338 = sub i64 %4337, 72
  %4339 = load i64, i64* %PC
  %4340 = add i64 %4339, 3
  store i64 %4340, i64* %PC
  %4341 = inttoptr i64 %4338 to i32*
  %4342 = load i32, i32* %4341
  %4343 = zext i32 %4342 to i64
  store i64 %4343, i64* %RSI, align 8, !tbaa !2428
  %4344 = load i64, i64* %RBP
  %4345 = sub i64 %4344, 24
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 4
  store i64 %4347, i64* %PC
  %4348 = inttoptr i64 %4345 to i64*
  %4349 = load i64, i64* %4348
  store i64 %4349, i64* %RCX, align 8, !tbaa !2428
  %4350 = load i64, i64* %RSI
  %4351 = load i64, i64* %RCX
  %4352 = add i64 %4351, 20
  %4353 = load i64, i64* %PC
  %4354 = add i64 %4353, 4
  store i64 %4354, i64* %PC
  %4355 = inttoptr i64 %4352 to i32*
  %4356 = load i32, i32* %4355
  %4357 = shl i64 %4350, 32
  %4358 = ashr exact i64 %4357, 32
  %4359 = sext i32 %4356 to i64
  %4360 = mul nsw i64 %4359, %4358
  %4361 = trunc i64 %4360 to i32
  %4362 = and i64 %4360, 4294967295
  store i64 %4362, i64* %RSI, align 8, !tbaa !2428
  %4363 = shl i64 %4360, 32
  %4364 = ashr exact i64 %4363, 32
  %4365 = icmp ne i64 %4364, %4360
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4366, i8* %4367, align 1, !tbaa !2434
  %4368 = and i32 %4361, 255
  %4369 = call i32 @llvm.ctpop.i32(i32 %4368) #16
  %4370 = trunc i32 %4369 to i8
  %4371 = and i8 %4370, 1
  %4372 = xor i8 %4371, 1
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4372, i8* %4373, align 1, !tbaa !2448
  %4374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4374, align 1, !tbaa !2449
  %4375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4375, align 1, !tbaa !2450
  %4376 = lshr i32 %4361, 31
  %4377 = trunc i32 %4376 to i8
  %4378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4377, i8* %4378, align 1, !tbaa !2451
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4366, i8* %4379, align 1, !tbaa !2452
  %4380 = load i64, i64* %RDX
  %4381 = load i32, i32* %ESI
  %4382 = zext i32 %4381 to i64
  %4383 = load i64, i64* %PC
  %4384 = add i64 %4383, 2
  store i64 %4384, i64* %PC
  %4385 = trunc i64 %4380 to i32
  %4386 = add i32 %4381, %4385
  %4387 = zext i32 %4386 to i64
  store i64 %4387, i64* %RDX, align 8, !tbaa !2428
  %4388 = icmp ult i32 %4386, %4385
  %4389 = icmp ult i32 %4386, %4381
  %4390 = or i1 %4388, %4389
  %4391 = zext i1 %4390 to i8
  %4392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4391, i8* %4392, align 1, !tbaa !2434
  %4393 = and i32 %4386, 255
  %4394 = call i32 @llvm.ctpop.i32(i32 %4393) #16
  %4395 = trunc i32 %4394 to i8
  %4396 = and i8 %4395, 1
  %4397 = xor i8 %4396, 1
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4397, i8* %4398, align 1, !tbaa !2448
  %4399 = xor i64 %4382, %4380
  %4400 = trunc i64 %4399 to i32
  %4401 = xor i32 %4400, %4386
  %4402 = lshr i32 %4401, 4
  %4403 = trunc i32 %4402 to i8
  %4404 = and i8 %4403, 1
  %4405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4404, i8* %4405, align 1, !tbaa !2449
  %4406 = icmp eq i32 %4386, 0
  %4407 = zext i1 %4406 to i8
  %4408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4407, i8* %4408, align 1, !tbaa !2450
  %4409 = lshr i32 %4386, 31
  %4410 = trunc i32 %4409 to i8
  %4411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4410, i8* %4411, align 1, !tbaa !2451
  %4412 = lshr i32 %4385, 31
  %4413 = lshr i32 %4381, 31
  %4414 = xor i32 %4409, %4412
  %4415 = xor i32 %4409, %4413
  %4416 = add nuw nsw i32 %4414, %4415
  %4417 = icmp eq i32 %4416, 2
  %4418 = zext i1 %4417 to i8
  %4419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4418, i8* %4419, align 1, !tbaa !2452
  %4420 = load i64, i64* %RDX
  %4421 = load i64, i64* %RBP
  %4422 = sub i64 %4421, 76
  %4423 = load i64, i64* %PC
  %4424 = add i64 %4423, 3
  store i64 %4424, i64* %PC
  %4425 = trunc i64 %4420 to i32
  %4426 = inttoptr i64 %4422 to i32*
  %4427 = load i32, i32* %4426
  %4428 = add i32 %4427, %4425
  %4429 = zext i32 %4428 to i64
  store i64 %4429, i64* %RDX, align 8, !tbaa !2428
  %4430 = icmp ult i32 %4428, %4425
  %4431 = icmp ult i32 %4428, %4427
  %4432 = or i1 %4430, %4431
  %4433 = zext i1 %4432 to i8
  %4434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4433, i8* %4434, align 1, !tbaa !2434
  %4435 = and i32 %4428, 255
  %4436 = call i32 @llvm.ctpop.i32(i32 %4435) #16
  %4437 = trunc i32 %4436 to i8
  %4438 = and i8 %4437, 1
  %4439 = xor i8 %4438, 1
  %4440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4439, i8* %4440, align 1, !tbaa !2448
  %4441 = xor i32 %4427, %4425
  %4442 = xor i32 %4441, %4428
  %4443 = lshr i32 %4442, 4
  %4444 = trunc i32 %4443 to i8
  %4445 = and i8 %4444, 1
  %4446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4445, i8* %4446, align 1, !tbaa !2449
  %4447 = icmp eq i32 %4428, 0
  %4448 = zext i1 %4447 to i8
  %4449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4448, i8* %4449, align 1, !tbaa !2450
  %4450 = lshr i32 %4428, 31
  %4451 = trunc i32 %4450 to i8
  %4452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4451, i8* %4452, align 1, !tbaa !2451
  %4453 = lshr i32 %4425, 31
  %4454 = lshr i32 %4427, 31
  %4455 = xor i32 %4450, %4453
  %4456 = xor i32 %4450, %4454
  %4457 = add nuw nsw i32 %4455, %4456
  %4458 = icmp eq i32 %4457, 2
  %4459 = zext i1 %4458 to i8
  %4460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4459, i8* %4460, align 1, !tbaa !2452
  %4461 = load i32, i32* %EDX
  %4462 = zext i32 %4461 to i64
  %4463 = load i64, i64* %PC
  %4464 = add i64 %4463, 3
  store i64 %4464, i64* %PC
  %4465 = shl i64 %4462, 32
  %4466 = ashr exact i64 %4465, 32
  store i64 %4466, i64* %RCX, align 8, !tbaa !2428
  %4467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4468 = load i64, i64* %RAX
  %4469 = load i64, i64* %RCX
  %4470 = mul i64 %4469, 4
  %4471 = add i64 %4470, %4468
  %4472 = load i64, i64* %PC
  %4473 = add i64 %4472, 5
  store i64 %4473, i64* %PC
  %4474 = inttoptr i64 %4471 to float*
  %4475 = load float, float* %4474
  %4476 = bitcast i8* %4467 to float*
  store float %4475, float* %4476, align 1, !tbaa !2453
  %4477 = getelementptr inbounds i8, i8* %4467, i64 4
  %4478 = bitcast i8* %4477 to float*
  store float 0.000000e+00, float* %4478, align 1, !tbaa !2453
  %4479 = getelementptr inbounds i8, i8* %4467, i64 8
  %4480 = bitcast i8* %4479 to float*
  store float 0.000000e+00, float* %4480, align 1, !tbaa !2453
  %4481 = getelementptr inbounds i8, i8* %4467, i64 12
  %4482 = bitcast i8* %4481 to float*
  store float 0.000000e+00, float* %4482, align 1, !tbaa !2453
  %4483 = load i64, i64* %RBP
  %4484 = sub i64 %4483, 40
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 4
  store i64 %4486, i64* %PC
  %4487 = inttoptr i64 %4484 to i64*
  %4488 = load i64, i64* %4487
  store i64 %4488, i64* %RAX, align 8, !tbaa !2428
  %4489 = load i64, i64* %RAX
  %4490 = load i64, i64* %PC
  %4491 = add i64 %4490, 3
  store i64 %4491, i64* %PC
  %4492 = inttoptr i64 %4489 to i64*
  %4493 = load i64, i64* %4492
  store i64 %4493, i64* %RAX, align 8, !tbaa !2428
  %4494 = load i64, i64* %RBP
  %4495 = sub i64 %4494, 40
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 4
  store i64 %4497, i64* %PC
  %4498 = inttoptr i64 %4495 to i64*
  %4499 = load i64, i64* %4498
  store i64 %4499, i64* %RCX, align 8, !tbaa !2428
  %4500 = load i64, i64* %RCX
  %4501 = add i64 %4500, 12
  %4502 = load i64, i64* %PC
  %4503 = add i64 %4502, 4
  store i64 %4503, i64* %PC
  %4504 = inttoptr i64 %4501 to i32*
  %4505 = load i32, i32* %4504
  %4506 = sext i32 %4505 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4507, align 1, !tbaa !2434
  %4508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4508, align 1, !tbaa !2448
  %4509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4509, align 1, !tbaa !2449
  %4510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4510, align 1, !tbaa !2450
  %4511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4511, align 1, !tbaa !2451
  %4512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4512, align 1, !tbaa !2452
  %4513 = load i64, i64* %RBP
  %4514 = sub i64 %4513, 40
  %4515 = load i64, i64* %PC
  %4516 = add i64 %4515, 4
  store i64 %4516, i64* %PC
  %4517 = inttoptr i64 %4514 to i64*
  %4518 = load i64, i64* %4517
  store i64 %4518, i64* %RCX, align 8, !tbaa !2428
  %4519 = load i64, i64* %RDX
  %4520 = load i64, i64* %RCX
  %4521 = add i64 %4520, 16
  %4522 = load i64, i64* %PC
  %4523 = add i64 %4522, 4
  store i64 %4523, i64* %PC
  %4524 = inttoptr i64 %4521 to i32*
  %4525 = load i32, i32* %4524
  %4526 = shl i64 %4519, 32
  %4527 = ashr exact i64 %4526, 32
  %4528 = sext i32 %4525 to i64
  %4529 = mul nsw i64 %4528, %4527
  %4530 = trunc i64 %4529 to i32
  %4531 = and i64 %4529, 4294967295
  store i64 %4531, i64* %RDX, align 8, !tbaa !2428
  %4532 = shl i64 %4529, 32
  %4533 = ashr exact i64 %4532, 32
  %4534 = icmp ne i64 %4533, %4529
  %4535 = zext i1 %4534 to i8
  %4536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4535, i8* %4536, align 1, !tbaa !2434
  %4537 = and i32 %4530, 255
  %4538 = call i32 @llvm.ctpop.i32(i32 %4537) #16
  %4539 = trunc i32 %4538 to i8
  %4540 = and i8 %4539, 1
  %4541 = xor i8 %4540, 1
  %4542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4541, i8* %4542, align 1, !tbaa !2448
  %4543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4543, align 1, !tbaa !2449
  %4544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4544, align 1, !tbaa !2450
  %4545 = lshr i32 %4530, 31
  %4546 = trunc i32 %4545 to i8
  %4547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4546, i8* %4547, align 1, !tbaa !2451
  %4548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4535, i8* %4548, align 1, !tbaa !2452
  %4549 = load i64, i64* %RBP
  %4550 = sub i64 %4549, 40
  %4551 = load i64, i64* %PC
  %4552 = add i64 %4551, 4
  store i64 %4552, i64* %PC
  %4553 = inttoptr i64 %4550 to i64*
  %4554 = load i64, i64* %4553
  store i64 %4554, i64* %RCX, align 8, !tbaa !2428
  %4555 = load i64, i64* %RDX
  %4556 = load i64, i64* %RCX
  %4557 = add i64 %4556, 20
  %4558 = load i64, i64* %PC
  %4559 = add i64 %4558, 4
  store i64 %4559, i64* %PC
  %4560 = inttoptr i64 %4557 to i32*
  %4561 = load i32, i32* %4560
  %4562 = shl i64 %4555, 32
  %4563 = ashr exact i64 %4562, 32
  %4564 = sext i32 %4561 to i64
  %4565 = mul nsw i64 %4564, %4563
  %4566 = trunc i64 %4565 to i32
  %4567 = and i64 %4565, 4294967295
  store i64 %4567, i64* %RDX, align 8, !tbaa !2428
  %4568 = shl i64 %4565, 32
  %4569 = ashr exact i64 %4568, 32
  %4570 = icmp ne i64 %4569, %4565
  %4571 = zext i1 %4570 to i8
  %4572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4571, i8* %4572, align 1, !tbaa !2434
  %4573 = and i32 %4566, 255
  %4574 = call i32 @llvm.ctpop.i32(i32 %4573) #16
  %4575 = trunc i32 %4574 to i8
  %4576 = and i8 %4575, 1
  %4577 = xor i8 %4576, 1
  %4578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4577, i8* %4578, align 1, !tbaa !2448
  %4579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4579, align 1, !tbaa !2449
  %4580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4580, align 1, !tbaa !2450
  %4581 = lshr i32 %4566, 31
  %4582 = trunc i32 %4581 to i8
  %4583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4582, i8* %4583, align 1, !tbaa !2451
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4571, i8* %4584, align 1, !tbaa !2452
  %4585 = load i64, i64* %RBP
  %4586 = sub i64 %4585, 68
  %4587 = load i64, i64* %PC
  %4588 = add i64 %4587, 3
  store i64 %4588, i64* %PC
  %4589 = inttoptr i64 %4586 to i32*
  %4590 = load i32, i32* %4589
  %4591 = zext i32 %4590 to i64
  store i64 %4591, i64* %RSI, align 8, !tbaa !2428
  %4592 = load i64, i64* %RSI
  %4593 = load i64, i64* %PC
  %4594 = add i64 %4593, 3
  store i64 %4594, i64* %PC
  %4595 = trunc i64 %4592 to i32
  %4596 = add i32 1, %4595
  %4597 = zext i32 %4596 to i64
  store i64 %4597, i64* %RSI, align 8, !tbaa !2428
  %4598 = icmp ult i32 %4596, %4595
  %4599 = icmp ult i32 %4596, 1
  %4600 = or i1 %4598, %4599
  %4601 = zext i1 %4600 to i8
  %4602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4601, i8* %4602, align 1, !tbaa !2434
  %4603 = and i32 %4596, 255
  %4604 = call i32 @llvm.ctpop.i32(i32 %4603) #16
  %4605 = trunc i32 %4604 to i8
  %4606 = and i8 %4605, 1
  %4607 = xor i8 %4606, 1
  %4608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4607, i8* %4608, align 1, !tbaa !2448
  %4609 = xor i64 1, %4592
  %4610 = trunc i64 %4609 to i32
  %4611 = xor i32 %4610, %4596
  %4612 = lshr i32 %4611, 4
  %4613 = trunc i32 %4612 to i8
  %4614 = and i8 %4613, 1
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4614, i8* %4615, align 1, !tbaa !2449
  %4616 = icmp eq i32 %4596, 0
  %4617 = zext i1 %4616 to i8
  %4618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4617, i8* %4618, align 1, !tbaa !2450
  %4619 = lshr i32 %4596, 31
  %4620 = trunc i32 %4619 to i8
  %4621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4620, i8* %4621, align 1, !tbaa !2451
  %4622 = lshr i32 %4595, 31
  %4623 = xor i32 %4619, %4622
  %4624 = add nuw nsw i32 %4623, %4619
  %4625 = icmp eq i32 %4624, 2
  %4626 = zext i1 %4625 to i8
  %4627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4626, i8* %4627, align 1, !tbaa !2452
  %4628 = load i64, i64* %RBP
  %4629 = sub i64 %4628, 40
  %4630 = load i64, i64* %PC
  %4631 = add i64 %4630, 4
  store i64 %4631, i64* %PC
  %4632 = inttoptr i64 %4629 to i64*
  %4633 = load i64, i64* %4632
  store i64 %4633, i64* %RCX, align 8, !tbaa !2428
  %4634 = load i64, i64* %RSI
  %4635 = load i64, i64* %RCX
  %4636 = add i64 %4635, 16
  %4637 = load i64, i64* %PC
  %4638 = add i64 %4637, 4
  store i64 %4638, i64* %PC
  %4639 = inttoptr i64 %4636 to i32*
  %4640 = load i32, i32* %4639
  %4641 = shl i64 %4634, 32
  %4642 = ashr exact i64 %4641, 32
  %4643 = sext i32 %4640 to i64
  %4644 = mul nsw i64 %4643, %4642
  %4645 = trunc i64 %4644 to i32
  %4646 = and i64 %4644, 4294967295
  store i64 %4646, i64* %RSI, align 8, !tbaa !2428
  %4647 = shl i64 %4644, 32
  %4648 = ashr exact i64 %4647, 32
  %4649 = icmp ne i64 %4648, %4644
  %4650 = zext i1 %4649 to i8
  %4651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4650, i8* %4651, align 1, !tbaa !2434
  %4652 = and i32 %4645, 255
  %4653 = call i32 @llvm.ctpop.i32(i32 %4652) #16
  %4654 = trunc i32 %4653 to i8
  %4655 = and i8 %4654, 1
  %4656 = xor i8 %4655, 1
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4656, i8* %4657, align 1, !tbaa !2448
  %4658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4658, align 1, !tbaa !2449
  %4659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4659, align 1, !tbaa !2450
  %4660 = lshr i32 %4645, 31
  %4661 = trunc i32 %4660 to i8
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4661, i8* %4662, align 1, !tbaa !2451
  %4663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4650, i8* %4663, align 1, !tbaa !2452
  %4664 = load i64, i64* %RBP
  %4665 = sub i64 %4664, 40
  %4666 = load i64, i64* %PC
  %4667 = add i64 %4666, 4
  store i64 %4667, i64* %PC
  %4668 = inttoptr i64 %4665 to i64*
  %4669 = load i64, i64* %4668
  store i64 %4669, i64* %RCX, align 8, !tbaa !2428
  %4670 = load i64, i64* %RSI
  %4671 = load i64, i64* %RCX
  %4672 = add i64 %4671, 20
  %4673 = load i64, i64* %PC
  %4674 = add i64 %4673, 4
  store i64 %4674, i64* %PC
  %4675 = inttoptr i64 %4672 to i32*
  %4676 = load i32, i32* %4675
  %4677 = shl i64 %4670, 32
  %4678 = ashr exact i64 %4677, 32
  %4679 = sext i32 %4676 to i64
  %4680 = mul nsw i64 %4679, %4678
  %4681 = trunc i64 %4680 to i32
  %4682 = and i64 %4680, 4294967295
  store i64 %4682, i64* %RSI, align 8, !tbaa !2428
  %4683 = shl i64 %4680, 32
  %4684 = ashr exact i64 %4683, 32
  %4685 = icmp ne i64 %4684, %4680
  %4686 = zext i1 %4685 to i8
  %4687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4686, i8* %4687, align 1, !tbaa !2434
  %4688 = and i32 %4681, 255
  %4689 = call i32 @llvm.ctpop.i32(i32 %4688) #16
  %4690 = trunc i32 %4689 to i8
  %4691 = and i8 %4690, 1
  %4692 = xor i8 %4691, 1
  %4693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4692, i8* %4693, align 1, !tbaa !2448
  %4694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4694, align 1, !tbaa !2449
  %4695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4695, align 1, !tbaa !2450
  %4696 = lshr i32 %4681, 31
  %4697 = trunc i32 %4696 to i8
  %4698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4697, i8* %4698, align 1, !tbaa !2451
  %4699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4686, i8* %4699, align 1, !tbaa !2452
  %4700 = load i64, i64* %RDX
  %4701 = load i32, i32* %ESI
  %4702 = zext i32 %4701 to i64
  %4703 = load i64, i64* %PC
  %4704 = add i64 %4703, 2
  store i64 %4704, i64* %PC
  %4705 = trunc i64 %4700 to i32
  %4706 = add i32 %4701, %4705
  %4707 = zext i32 %4706 to i64
  store i64 %4707, i64* %RDX, align 8, !tbaa !2428
  %4708 = icmp ult i32 %4706, %4705
  %4709 = icmp ult i32 %4706, %4701
  %4710 = or i1 %4708, %4709
  %4711 = zext i1 %4710 to i8
  %4712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4711, i8* %4712, align 1, !tbaa !2434
  %4713 = and i32 %4706, 255
  %4714 = call i32 @llvm.ctpop.i32(i32 %4713) #16
  %4715 = trunc i32 %4714 to i8
  %4716 = and i8 %4715, 1
  %4717 = xor i8 %4716, 1
  %4718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4717, i8* %4718, align 1, !tbaa !2448
  %4719 = xor i64 %4702, %4700
  %4720 = trunc i64 %4719 to i32
  %4721 = xor i32 %4720, %4706
  %4722 = lshr i32 %4721, 4
  %4723 = trunc i32 %4722 to i8
  %4724 = and i8 %4723, 1
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4724, i8* %4725, align 1, !tbaa !2449
  %4726 = icmp eq i32 %4706, 0
  %4727 = zext i1 %4726 to i8
  %4728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4727, i8* %4728, align 1, !tbaa !2450
  %4729 = lshr i32 %4706, 31
  %4730 = trunc i32 %4729 to i8
  %4731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4730, i8* %4731, align 1, !tbaa !2451
  %4732 = lshr i32 %4705, 31
  %4733 = lshr i32 %4701, 31
  %4734 = xor i32 %4729, %4732
  %4735 = xor i32 %4729, %4733
  %4736 = add nuw nsw i32 %4734, %4735
  %4737 = icmp eq i32 %4736, 2
  %4738 = zext i1 %4737 to i8
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4738, i8* %4739, align 1, !tbaa !2452
  %4740 = load i64, i64* %RBP
  %4741 = sub i64 %4740, 72
  %4742 = load i64, i64* %PC
  %4743 = add i64 %4742, 3
  store i64 %4743, i64* %PC
  %4744 = inttoptr i64 %4741 to i32*
  %4745 = load i32, i32* %4744
  %4746 = zext i32 %4745 to i64
  store i64 %4746, i64* %RSI, align 8, !tbaa !2428
  %4747 = load i64, i64* %RSI
  %4748 = load i64, i64* %PC
  %4749 = add i64 %4748, 3
  store i64 %4749, i64* %PC
  %4750 = trunc i64 %4747 to i32
  %4751 = add i32 1, %4750
  %4752 = zext i32 %4751 to i64
  store i64 %4752, i64* %RSI, align 8, !tbaa !2428
  %4753 = icmp ult i32 %4751, %4750
  %4754 = icmp ult i32 %4751, 1
  %4755 = or i1 %4753, %4754
  %4756 = zext i1 %4755 to i8
  %4757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4756, i8* %4757, align 1, !tbaa !2434
  %4758 = and i32 %4751, 255
  %4759 = call i32 @llvm.ctpop.i32(i32 %4758) #16
  %4760 = trunc i32 %4759 to i8
  %4761 = and i8 %4760, 1
  %4762 = xor i8 %4761, 1
  %4763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4762, i8* %4763, align 1, !tbaa !2448
  %4764 = xor i64 1, %4747
  %4765 = trunc i64 %4764 to i32
  %4766 = xor i32 %4765, %4751
  %4767 = lshr i32 %4766, 4
  %4768 = trunc i32 %4767 to i8
  %4769 = and i8 %4768, 1
  %4770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4769, i8* %4770, align 1, !tbaa !2449
  %4771 = icmp eq i32 %4751, 0
  %4772 = zext i1 %4771 to i8
  %4773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4772, i8* %4773, align 1, !tbaa !2450
  %4774 = lshr i32 %4751, 31
  %4775 = trunc i32 %4774 to i8
  %4776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4775, i8* %4776, align 1, !tbaa !2451
  %4777 = lshr i32 %4750, 31
  %4778 = xor i32 %4774, %4777
  %4779 = add nuw nsw i32 %4778, %4774
  %4780 = icmp eq i32 %4779, 2
  %4781 = zext i1 %4780 to i8
  %4782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4781, i8* %4782, align 1, !tbaa !2452
  %4783 = load i64, i64* %RBP
  %4784 = sub i64 %4783, 40
  %4785 = load i64, i64* %PC
  %4786 = add i64 %4785, 4
  store i64 %4786, i64* %PC
  %4787 = inttoptr i64 %4784 to i64*
  %4788 = load i64, i64* %4787
  store i64 %4788, i64* %RCX, align 8, !tbaa !2428
  %4789 = load i64, i64* %RSI
  %4790 = load i64, i64* %RCX
  %4791 = add i64 %4790, 20
  %4792 = load i64, i64* %PC
  %4793 = add i64 %4792, 4
  store i64 %4793, i64* %PC
  %4794 = inttoptr i64 %4791 to i32*
  %4795 = load i32, i32* %4794
  %4796 = shl i64 %4789, 32
  %4797 = ashr exact i64 %4796, 32
  %4798 = sext i32 %4795 to i64
  %4799 = mul nsw i64 %4798, %4797
  %4800 = trunc i64 %4799 to i32
  %4801 = and i64 %4799, 4294967295
  store i64 %4801, i64* %RSI, align 8, !tbaa !2428
  %4802 = shl i64 %4799, 32
  %4803 = ashr exact i64 %4802, 32
  %4804 = icmp ne i64 %4803, %4799
  %4805 = zext i1 %4804 to i8
  %4806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4805, i8* %4806, align 1, !tbaa !2434
  %4807 = and i32 %4800, 255
  %4808 = call i32 @llvm.ctpop.i32(i32 %4807) #16
  %4809 = trunc i32 %4808 to i8
  %4810 = and i8 %4809, 1
  %4811 = xor i8 %4810, 1
  %4812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4811, i8* %4812, align 1, !tbaa !2448
  %4813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4813, align 1, !tbaa !2449
  %4814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4814, align 1, !tbaa !2450
  %4815 = lshr i32 %4800, 31
  %4816 = trunc i32 %4815 to i8
  %4817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4816, i8* %4817, align 1, !tbaa !2451
  %4818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4805, i8* %4818, align 1, !tbaa !2452
  %4819 = load i64, i64* %RDX
  %4820 = load i32, i32* %ESI
  %4821 = zext i32 %4820 to i64
  %4822 = load i64, i64* %PC
  %4823 = add i64 %4822, 2
  store i64 %4823, i64* %PC
  %4824 = trunc i64 %4819 to i32
  %4825 = add i32 %4820, %4824
  %4826 = zext i32 %4825 to i64
  store i64 %4826, i64* %RDX, align 8, !tbaa !2428
  %4827 = icmp ult i32 %4825, %4824
  %4828 = icmp ult i32 %4825, %4820
  %4829 = or i1 %4827, %4828
  %4830 = zext i1 %4829 to i8
  %4831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4830, i8* %4831, align 1, !tbaa !2434
  %4832 = and i32 %4825, 255
  %4833 = call i32 @llvm.ctpop.i32(i32 %4832) #16
  %4834 = trunc i32 %4833 to i8
  %4835 = and i8 %4834, 1
  %4836 = xor i8 %4835, 1
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4836, i8* %4837, align 1, !tbaa !2448
  %4838 = xor i64 %4821, %4819
  %4839 = trunc i64 %4838 to i32
  %4840 = xor i32 %4839, %4825
  %4841 = lshr i32 %4840, 4
  %4842 = trunc i32 %4841 to i8
  %4843 = and i8 %4842, 1
  %4844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4843, i8* %4844, align 1, !tbaa !2449
  %4845 = icmp eq i32 %4825, 0
  %4846 = zext i1 %4845 to i8
  %4847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4846, i8* %4847, align 1, !tbaa !2450
  %4848 = lshr i32 %4825, 31
  %4849 = trunc i32 %4848 to i8
  %4850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4849, i8* %4850, align 1, !tbaa !2451
  %4851 = lshr i32 %4824, 31
  %4852 = lshr i32 %4820, 31
  %4853 = xor i32 %4848, %4851
  %4854 = xor i32 %4848, %4852
  %4855 = add nuw nsw i32 %4853, %4854
  %4856 = icmp eq i32 %4855, 2
  %4857 = zext i1 %4856 to i8
  %4858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4857, i8* %4858, align 1, !tbaa !2452
  %4859 = load i64, i64* %RDX
  %4860 = load i64, i64* %RBP
  %4861 = sub i64 %4860, 76
  %4862 = load i64, i64* %PC
  %4863 = add i64 %4862, 3
  store i64 %4863, i64* %PC
  %4864 = trunc i64 %4859 to i32
  %4865 = inttoptr i64 %4861 to i32*
  %4866 = load i32, i32* %4865
  %4867 = add i32 %4866, %4864
  %4868 = zext i32 %4867 to i64
  store i64 %4868, i64* %RDX, align 8, !tbaa !2428
  %4869 = icmp ult i32 %4867, %4864
  %4870 = icmp ult i32 %4867, %4866
  %4871 = or i1 %4869, %4870
  %4872 = zext i1 %4871 to i8
  %4873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4872, i8* %4873, align 1, !tbaa !2434
  %4874 = and i32 %4867, 255
  %4875 = call i32 @llvm.ctpop.i32(i32 %4874) #16
  %4876 = trunc i32 %4875 to i8
  %4877 = and i8 %4876, 1
  %4878 = xor i8 %4877, 1
  %4879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4878, i8* %4879, align 1, !tbaa !2448
  %4880 = xor i32 %4866, %4864
  %4881 = xor i32 %4880, %4867
  %4882 = lshr i32 %4881, 4
  %4883 = trunc i32 %4882 to i8
  %4884 = and i8 %4883, 1
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4884, i8* %4885, align 1, !tbaa !2449
  %4886 = icmp eq i32 %4867, 0
  %4887 = zext i1 %4886 to i8
  %4888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4887, i8* %4888, align 1, !tbaa !2450
  %4889 = lshr i32 %4867, 31
  %4890 = trunc i32 %4889 to i8
  %4891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4890, i8* %4891, align 1, !tbaa !2451
  %4892 = lshr i32 %4864, 31
  %4893 = lshr i32 %4866, 31
  %4894 = xor i32 %4889, %4892
  %4895 = xor i32 %4889, %4893
  %4896 = add nuw nsw i32 %4894, %4895
  %4897 = icmp eq i32 %4896, 2
  %4898 = zext i1 %4897 to i8
  %4899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4898, i8* %4899, align 1, !tbaa !2452
  %4900 = load i32, i32* %EDX
  %4901 = zext i32 %4900 to i64
  %4902 = load i64, i64* %PC
  %4903 = add i64 %4902, 3
  store i64 %4903, i64* %PC
  %4904 = shl i64 %4901, 32
  %4905 = ashr exact i64 %4904, 32
  store i64 %4905, i64* %RCX, align 8, !tbaa !2428
  %4906 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4907 = load i64, i64* %RAX
  %4908 = load i64, i64* %RCX
  %4909 = mul i64 %4908, 4
  %4910 = add i64 %4909, %4907
  %4911 = load i64, i64* %PC
  %4912 = add i64 %4911, 5
  store i64 %4912, i64* %PC
  %4913 = inttoptr i64 %4910 to float*
  %4914 = load float, float* %4913
  %4915 = bitcast i8* %4906 to float*
  store float %4914, float* %4915, align 1, !tbaa !2453
  %4916 = getelementptr inbounds i8, i8* %4906, i64 4
  %4917 = bitcast i8* %4916 to float*
  store float 0.000000e+00, float* %4917, align 1, !tbaa !2453
  %4918 = getelementptr inbounds i8, i8* %4906, i64 8
  %4919 = bitcast i8* %4918 to float*
  store float 0.000000e+00, float* %4919, align 1, !tbaa !2453
  %4920 = getelementptr inbounds i8, i8* %4906, i64 12
  %4921 = bitcast i8* %4920 to float*
  store float 0.000000e+00, float* %4921, align 1, !tbaa !2453
  %4922 = load i64, i64* %RBP
  %4923 = sub i64 %4922, 40
  %4924 = load i64, i64* %PC
  %4925 = add i64 %4924, 4
  store i64 %4925, i64* %PC
  %4926 = inttoptr i64 %4923 to i64*
  %4927 = load i64, i64* %4926
  store i64 %4927, i64* %RAX, align 8, !tbaa !2428
  %4928 = load i64, i64* %RAX
  %4929 = load i64, i64* %PC
  %4930 = add i64 %4929, 3
  store i64 %4930, i64* %PC
  %4931 = inttoptr i64 %4928 to i64*
  %4932 = load i64, i64* %4931
  store i64 %4932, i64* %RAX, align 8, !tbaa !2428
  %4933 = load i64, i64* %RBP
  %4934 = sub i64 %4933, 40
  %4935 = load i64, i64* %PC
  %4936 = add i64 %4935, 4
  store i64 %4936, i64* %PC
  %4937 = inttoptr i64 %4934 to i64*
  %4938 = load i64, i64* %4937
  store i64 %4938, i64* %RCX, align 8, !tbaa !2428
  %4939 = load i64, i64* %RCX
  %4940 = add i64 %4939, 12
  %4941 = load i64, i64* %PC
  %4942 = add i64 %4941, 4
  store i64 %4942, i64* %PC
  %4943 = inttoptr i64 %4940 to i32*
  %4944 = load i32, i32* %4943
  %4945 = sext i32 %4944 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4946, align 1, !tbaa !2434
  %4947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4947, align 1, !tbaa !2448
  %4948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4948, align 1, !tbaa !2449
  %4949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4949, align 1, !tbaa !2450
  %4950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4950, align 1, !tbaa !2451
  %4951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4951, align 1, !tbaa !2452
  %4952 = load i64, i64* %RBP
  %4953 = sub i64 %4952, 40
  %4954 = load i64, i64* %PC
  %4955 = add i64 %4954, 4
  store i64 %4955, i64* %PC
  %4956 = inttoptr i64 %4953 to i64*
  %4957 = load i64, i64* %4956
  store i64 %4957, i64* %RCX, align 8, !tbaa !2428
  %4958 = load i64, i64* %RDX
  %4959 = load i64, i64* %RCX
  %4960 = add i64 %4959, 16
  %4961 = load i64, i64* %PC
  %4962 = add i64 %4961, 4
  store i64 %4962, i64* %PC
  %4963 = inttoptr i64 %4960 to i32*
  %4964 = load i32, i32* %4963
  %4965 = shl i64 %4958, 32
  %4966 = ashr exact i64 %4965, 32
  %4967 = sext i32 %4964 to i64
  %4968 = mul nsw i64 %4967, %4966
  %4969 = trunc i64 %4968 to i32
  %4970 = and i64 %4968, 4294967295
  store i64 %4970, i64* %RDX, align 8, !tbaa !2428
  %4971 = shl i64 %4968, 32
  %4972 = ashr exact i64 %4971, 32
  %4973 = icmp ne i64 %4972, %4968
  %4974 = zext i1 %4973 to i8
  %4975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4974, i8* %4975, align 1, !tbaa !2434
  %4976 = and i32 %4969, 255
  %4977 = call i32 @llvm.ctpop.i32(i32 %4976) #16
  %4978 = trunc i32 %4977 to i8
  %4979 = and i8 %4978, 1
  %4980 = xor i8 %4979, 1
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4980, i8* %4981, align 1, !tbaa !2448
  %4982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4982, align 1, !tbaa !2449
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4983, align 1, !tbaa !2450
  %4984 = lshr i32 %4969, 31
  %4985 = trunc i32 %4984 to i8
  %4986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4985, i8* %4986, align 1, !tbaa !2451
  %4987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4974, i8* %4987, align 1, !tbaa !2452
  %4988 = load i64, i64* %RBP
  %4989 = sub i64 %4988, 40
  %4990 = load i64, i64* %PC
  %4991 = add i64 %4990, 4
  store i64 %4991, i64* %PC
  %4992 = inttoptr i64 %4989 to i64*
  %4993 = load i64, i64* %4992
  store i64 %4993, i64* %RCX, align 8, !tbaa !2428
  %4994 = load i64, i64* %RDX
  %4995 = load i64, i64* %RCX
  %4996 = add i64 %4995, 20
  %4997 = load i64, i64* %PC
  %4998 = add i64 %4997, 4
  store i64 %4998, i64* %PC
  %4999 = inttoptr i64 %4996 to i32*
  %5000 = load i32, i32* %4999
  %5001 = shl i64 %4994, 32
  %5002 = ashr exact i64 %5001, 32
  %5003 = sext i32 %5000 to i64
  %5004 = mul nsw i64 %5003, %5002
  %5005 = trunc i64 %5004 to i32
  %5006 = and i64 %5004, 4294967295
  store i64 %5006, i64* %RDX, align 8, !tbaa !2428
  %5007 = shl i64 %5004, 32
  %5008 = ashr exact i64 %5007, 32
  %5009 = icmp ne i64 %5008, %5004
  %5010 = zext i1 %5009 to i8
  %5011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5010, i8* %5011, align 1, !tbaa !2434
  %5012 = and i32 %5005, 255
  %5013 = call i32 @llvm.ctpop.i32(i32 %5012) #16
  %5014 = trunc i32 %5013 to i8
  %5015 = and i8 %5014, 1
  %5016 = xor i8 %5015, 1
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5016, i8* %5017, align 1, !tbaa !2448
  %5018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5018, align 1, !tbaa !2449
  %5019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5019, align 1, !tbaa !2450
  %5020 = lshr i32 %5005, 31
  %5021 = trunc i32 %5020 to i8
  %5022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5021, i8* %5022, align 1, !tbaa !2451
  %5023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5010, i8* %5023, align 1, !tbaa !2452
  %5024 = load i64, i64* %RBP
  %5025 = sub i64 %5024, 68
  %5026 = load i64, i64* %PC
  %5027 = add i64 %5026, 3
  store i64 %5027, i64* %PC
  %5028 = inttoptr i64 %5025 to i32*
  %5029 = load i32, i32* %5028
  %5030 = zext i32 %5029 to i64
  store i64 %5030, i64* %RSI, align 8, !tbaa !2428
  %5031 = load i64, i64* %RSI
  %5032 = load i64, i64* %PC
  %5033 = add i64 %5032, 3
  store i64 %5033, i64* %PC
  %5034 = trunc i64 %5031 to i32
  %5035 = add i32 1, %5034
  %5036 = zext i32 %5035 to i64
  store i64 %5036, i64* %RSI, align 8, !tbaa !2428
  %5037 = icmp ult i32 %5035, %5034
  %5038 = icmp ult i32 %5035, 1
  %5039 = or i1 %5037, %5038
  %5040 = zext i1 %5039 to i8
  %5041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5040, i8* %5041, align 1, !tbaa !2434
  %5042 = and i32 %5035, 255
  %5043 = call i32 @llvm.ctpop.i32(i32 %5042) #16
  %5044 = trunc i32 %5043 to i8
  %5045 = and i8 %5044, 1
  %5046 = xor i8 %5045, 1
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5046, i8* %5047, align 1, !tbaa !2448
  %5048 = xor i64 1, %5031
  %5049 = trunc i64 %5048 to i32
  %5050 = xor i32 %5049, %5035
  %5051 = lshr i32 %5050, 4
  %5052 = trunc i32 %5051 to i8
  %5053 = and i8 %5052, 1
  %5054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5053, i8* %5054, align 1, !tbaa !2449
  %5055 = icmp eq i32 %5035, 0
  %5056 = zext i1 %5055 to i8
  %5057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5056, i8* %5057, align 1, !tbaa !2450
  %5058 = lshr i32 %5035, 31
  %5059 = trunc i32 %5058 to i8
  %5060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5059, i8* %5060, align 1, !tbaa !2451
  %5061 = lshr i32 %5034, 31
  %5062 = xor i32 %5058, %5061
  %5063 = add nuw nsw i32 %5062, %5058
  %5064 = icmp eq i32 %5063, 2
  %5065 = zext i1 %5064 to i8
  %5066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5065, i8* %5066, align 1, !tbaa !2452
  %5067 = load i64, i64* %RBP
  %5068 = sub i64 %5067, 40
  %5069 = load i64, i64* %PC
  %5070 = add i64 %5069, 4
  store i64 %5070, i64* %PC
  %5071 = inttoptr i64 %5068 to i64*
  %5072 = load i64, i64* %5071
  store i64 %5072, i64* %RCX, align 8, !tbaa !2428
  %5073 = load i64, i64* %RSI
  %5074 = load i64, i64* %RCX
  %5075 = add i64 %5074, 16
  %5076 = load i64, i64* %PC
  %5077 = add i64 %5076, 4
  store i64 %5077, i64* %PC
  %5078 = inttoptr i64 %5075 to i32*
  %5079 = load i32, i32* %5078
  %5080 = shl i64 %5073, 32
  %5081 = ashr exact i64 %5080, 32
  %5082 = sext i32 %5079 to i64
  %5083 = mul nsw i64 %5082, %5081
  %5084 = trunc i64 %5083 to i32
  %5085 = and i64 %5083, 4294967295
  store i64 %5085, i64* %RSI, align 8, !tbaa !2428
  %5086 = shl i64 %5083, 32
  %5087 = ashr exact i64 %5086, 32
  %5088 = icmp ne i64 %5087, %5083
  %5089 = zext i1 %5088 to i8
  %5090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5089, i8* %5090, align 1, !tbaa !2434
  %5091 = and i32 %5084, 255
  %5092 = call i32 @llvm.ctpop.i32(i32 %5091) #16
  %5093 = trunc i32 %5092 to i8
  %5094 = and i8 %5093, 1
  %5095 = xor i8 %5094, 1
  %5096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5095, i8* %5096, align 1, !tbaa !2448
  %5097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5097, align 1, !tbaa !2449
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5098, align 1, !tbaa !2450
  %5099 = lshr i32 %5084, 31
  %5100 = trunc i32 %5099 to i8
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5100, i8* %5101, align 1, !tbaa !2451
  %5102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5089, i8* %5102, align 1, !tbaa !2452
  %5103 = load i64, i64* %RBP
  %5104 = sub i64 %5103, 40
  %5105 = load i64, i64* %PC
  %5106 = add i64 %5105, 4
  store i64 %5106, i64* %PC
  %5107 = inttoptr i64 %5104 to i64*
  %5108 = load i64, i64* %5107
  store i64 %5108, i64* %RCX, align 8, !tbaa !2428
  %5109 = load i64, i64* %RSI
  %5110 = load i64, i64* %RCX
  %5111 = add i64 %5110, 20
  %5112 = load i64, i64* %PC
  %5113 = add i64 %5112, 4
  store i64 %5113, i64* %PC
  %5114 = inttoptr i64 %5111 to i32*
  %5115 = load i32, i32* %5114
  %5116 = shl i64 %5109, 32
  %5117 = ashr exact i64 %5116, 32
  %5118 = sext i32 %5115 to i64
  %5119 = mul nsw i64 %5118, %5117
  %5120 = trunc i64 %5119 to i32
  %5121 = and i64 %5119, 4294967295
  store i64 %5121, i64* %RSI, align 8, !tbaa !2428
  %5122 = shl i64 %5119, 32
  %5123 = ashr exact i64 %5122, 32
  %5124 = icmp ne i64 %5123, %5119
  %5125 = zext i1 %5124 to i8
  %5126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5125, i8* %5126, align 1, !tbaa !2434
  %5127 = and i32 %5120, 255
  %5128 = call i32 @llvm.ctpop.i32(i32 %5127) #16
  %5129 = trunc i32 %5128 to i8
  %5130 = and i8 %5129, 1
  %5131 = xor i8 %5130, 1
  %5132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5131, i8* %5132, align 1, !tbaa !2448
  %5133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5133, align 1, !tbaa !2449
  %5134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5134, align 1, !tbaa !2450
  %5135 = lshr i32 %5120, 31
  %5136 = trunc i32 %5135 to i8
  %5137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5136, i8* %5137, align 1, !tbaa !2451
  %5138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5125, i8* %5138, align 1, !tbaa !2452
  %5139 = load i64, i64* %RDX
  %5140 = load i32, i32* %ESI
  %5141 = zext i32 %5140 to i64
  %5142 = load i64, i64* %PC
  %5143 = add i64 %5142, 2
  store i64 %5143, i64* %PC
  %5144 = trunc i64 %5139 to i32
  %5145 = add i32 %5140, %5144
  %5146 = zext i32 %5145 to i64
  store i64 %5146, i64* %RDX, align 8, !tbaa !2428
  %5147 = icmp ult i32 %5145, %5144
  %5148 = icmp ult i32 %5145, %5140
  %5149 = or i1 %5147, %5148
  %5150 = zext i1 %5149 to i8
  %5151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5150, i8* %5151, align 1, !tbaa !2434
  %5152 = and i32 %5145, 255
  %5153 = call i32 @llvm.ctpop.i32(i32 %5152) #16
  %5154 = trunc i32 %5153 to i8
  %5155 = and i8 %5154, 1
  %5156 = xor i8 %5155, 1
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5156, i8* %5157, align 1, !tbaa !2448
  %5158 = xor i64 %5141, %5139
  %5159 = trunc i64 %5158 to i32
  %5160 = xor i32 %5159, %5145
  %5161 = lshr i32 %5160, 4
  %5162 = trunc i32 %5161 to i8
  %5163 = and i8 %5162, 1
  %5164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5163, i8* %5164, align 1, !tbaa !2449
  %5165 = icmp eq i32 %5145, 0
  %5166 = zext i1 %5165 to i8
  %5167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5166, i8* %5167, align 1, !tbaa !2450
  %5168 = lshr i32 %5145, 31
  %5169 = trunc i32 %5168 to i8
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5169, i8* %5170, align 1, !tbaa !2451
  %5171 = lshr i32 %5144, 31
  %5172 = lshr i32 %5140, 31
  %5173 = xor i32 %5168, %5171
  %5174 = xor i32 %5168, %5172
  %5175 = add nuw nsw i32 %5173, %5174
  %5176 = icmp eq i32 %5175, 2
  %5177 = zext i1 %5176 to i8
  %5178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5177, i8* %5178, align 1, !tbaa !2452
  %5179 = load i64, i64* %RBP
  %5180 = sub i64 %5179, 72
  %5181 = load i64, i64* %PC
  %5182 = add i64 %5181, 3
  store i64 %5182, i64* %PC
  %5183 = inttoptr i64 %5180 to i32*
  %5184 = load i32, i32* %5183
  %5185 = zext i32 %5184 to i64
  store i64 %5185, i64* %RSI, align 8, !tbaa !2428
  %5186 = load i64, i64* %RSI
  %5187 = load i64, i64* %PC
  %5188 = add i64 %5187, 3
  store i64 %5188, i64* %PC
  %5189 = trunc i64 %5186 to i32
  %5190 = sub i32 %5189, 1
  %5191 = zext i32 %5190 to i64
  store i64 %5191, i64* %RSI, align 8, !tbaa !2428
  %5192 = icmp ult i32 %5189, 1
  %5193 = zext i1 %5192 to i8
  %5194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5193, i8* %5194, align 1, !tbaa !2434
  %5195 = and i32 %5190, 255
  %5196 = call i32 @llvm.ctpop.i32(i32 %5195) #16
  %5197 = trunc i32 %5196 to i8
  %5198 = and i8 %5197, 1
  %5199 = xor i8 %5198, 1
  %5200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5199, i8* %5200, align 1, !tbaa !2448
  %5201 = xor i64 1, %5186
  %5202 = trunc i64 %5201 to i32
  %5203 = xor i32 %5202, %5190
  %5204 = lshr i32 %5203, 4
  %5205 = trunc i32 %5204 to i8
  %5206 = and i8 %5205, 1
  %5207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5206, i8* %5207, align 1, !tbaa !2449
  %5208 = icmp eq i32 %5190, 0
  %5209 = zext i1 %5208 to i8
  %5210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5209, i8* %5210, align 1, !tbaa !2450
  %5211 = lshr i32 %5190, 31
  %5212 = trunc i32 %5211 to i8
  %5213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5212, i8* %5213, align 1, !tbaa !2451
  %5214 = lshr i32 %5189, 31
  %5215 = xor i32 %5211, %5214
  %5216 = add nuw nsw i32 %5215, %5214
  %5217 = icmp eq i32 %5216, 2
  %5218 = zext i1 %5217 to i8
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5218, i8* %5219, align 1, !tbaa !2452
  %5220 = load i64, i64* %RBP
  %5221 = sub i64 %5220, 40
  %5222 = load i64, i64* %PC
  %5223 = add i64 %5222, 4
  store i64 %5223, i64* %PC
  %5224 = inttoptr i64 %5221 to i64*
  %5225 = load i64, i64* %5224
  store i64 %5225, i64* %RCX, align 8, !tbaa !2428
  %5226 = load i64, i64* %RSI
  %5227 = load i64, i64* %RCX
  %5228 = add i64 %5227, 20
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 4
  store i64 %5230, i64* %PC
  %5231 = inttoptr i64 %5228 to i32*
  %5232 = load i32, i32* %5231
  %5233 = shl i64 %5226, 32
  %5234 = ashr exact i64 %5233, 32
  %5235 = sext i32 %5232 to i64
  %5236 = mul nsw i64 %5235, %5234
  %5237 = trunc i64 %5236 to i32
  %5238 = and i64 %5236, 4294967295
  store i64 %5238, i64* %RSI, align 8, !tbaa !2428
  %5239 = shl i64 %5236, 32
  %5240 = ashr exact i64 %5239, 32
  %5241 = icmp ne i64 %5240, %5236
  %5242 = zext i1 %5241 to i8
  %5243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5242, i8* %5243, align 1, !tbaa !2434
  %5244 = and i32 %5237, 255
  %5245 = call i32 @llvm.ctpop.i32(i32 %5244) #16
  %5246 = trunc i32 %5245 to i8
  %5247 = and i8 %5246, 1
  %5248 = xor i8 %5247, 1
  %5249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5248, i8* %5249, align 1, !tbaa !2448
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5250, align 1, !tbaa !2449
  %5251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5251, align 1, !tbaa !2450
  %5252 = lshr i32 %5237, 31
  %5253 = trunc i32 %5252 to i8
  %5254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5253, i8* %5254, align 1, !tbaa !2451
  %5255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5242, i8* %5255, align 1, !tbaa !2452
  %5256 = load i64, i64* %RDX
  %5257 = load i32, i32* %ESI
  %5258 = zext i32 %5257 to i64
  %5259 = load i64, i64* %PC
  %5260 = add i64 %5259, 2
  store i64 %5260, i64* %PC
  %5261 = trunc i64 %5256 to i32
  %5262 = add i32 %5257, %5261
  %5263 = zext i32 %5262 to i64
  store i64 %5263, i64* %RDX, align 8, !tbaa !2428
  %5264 = icmp ult i32 %5262, %5261
  %5265 = icmp ult i32 %5262, %5257
  %5266 = or i1 %5264, %5265
  %5267 = zext i1 %5266 to i8
  %5268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5267, i8* %5268, align 1, !tbaa !2434
  %5269 = and i32 %5262, 255
  %5270 = call i32 @llvm.ctpop.i32(i32 %5269) #16
  %5271 = trunc i32 %5270 to i8
  %5272 = and i8 %5271, 1
  %5273 = xor i8 %5272, 1
  %5274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5273, i8* %5274, align 1, !tbaa !2448
  %5275 = xor i64 %5258, %5256
  %5276 = trunc i64 %5275 to i32
  %5277 = xor i32 %5276, %5262
  %5278 = lshr i32 %5277, 4
  %5279 = trunc i32 %5278 to i8
  %5280 = and i8 %5279, 1
  %5281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5280, i8* %5281, align 1, !tbaa !2449
  %5282 = icmp eq i32 %5262, 0
  %5283 = zext i1 %5282 to i8
  %5284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5283, i8* %5284, align 1, !tbaa !2450
  %5285 = lshr i32 %5262, 31
  %5286 = trunc i32 %5285 to i8
  %5287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5286, i8* %5287, align 1, !tbaa !2451
  %5288 = lshr i32 %5261, 31
  %5289 = lshr i32 %5257, 31
  %5290 = xor i32 %5285, %5288
  %5291 = xor i32 %5285, %5289
  %5292 = add nuw nsw i32 %5290, %5291
  %5293 = icmp eq i32 %5292, 2
  %5294 = zext i1 %5293 to i8
  %5295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5294, i8* %5295, align 1, !tbaa !2452
  %5296 = load i64, i64* %RDX
  %5297 = load i64, i64* %RBP
  %5298 = sub i64 %5297, 76
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 3
  store i64 %5300, i64* %PC
  %5301 = trunc i64 %5296 to i32
  %5302 = inttoptr i64 %5298 to i32*
  %5303 = load i32, i32* %5302
  %5304 = add i32 %5303, %5301
  %5305 = zext i32 %5304 to i64
  store i64 %5305, i64* %RDX, align 8, !tbaa !2428
  %5306 = icmp ult i32 %5304, %5301
  %5307 = icmp ult i32 %5304, %5303
  %5308 = or i1 %5306, %5307
  %5309 = zext i1 %5308 to i8
  %5310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5309, i8* %5310, align 1, !tbaa !2434
  %5311 = and i32 %5304, 255
  %5312 = call i32 @llvm.ctpop.i32(i32 %5311) #16
  %5313 = trunc i32 %5312 to i8
  %5314 = and i8 %5313, 1
  %5315 = xor i8 %5314, 1
  %5316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5315, i8* %5316, align 1, !tbaa !2448
  %5317 = xor i32 %5303, %5301
  %5318 = xor i32 %5317, %5304
  %5319 = lshr i32 %5318, 4
  %5320 = trunc i32 %5319 to i8
  %5321 = and i8 %5320, 1
  %5322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5321, i8* %5322, align 1, !tbaa !2449
  %5323 = icmp eq i32 %5304, 0
  %5324 = zext i1 %5323 to i8
  %5325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5324, i8* %5325, align 1, !tbaa !2450
  %5326 = lshr i32 %5304, 31
  %5327 = trunc i32 %5326 to i8
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5327, i8* %5328, align 1, !tbaa !2451
  %5329 = lshr i32 %5301, 31
  %5330 = lshr i32 %5303, 31
  %5331 = xor i32 %5326, %5329
  %5332 = xor i32 %5326, %5330
  %5333 = add nuw nsw i32 %5331, %5332
  %5334 = icmp eq i32 %5333, 2
  %5335 = zext i1 %5334 to i8
  %5336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5335, i8* %5336, align 1, !tbaa !2452
  %5337 = load i32, i32* %EDX
  %5338 = zext i32 %5337 to i64
  %5339 = load i64, i64* %PC
  %5340 = add i64 %5339, 3
  store i64 %5340, i64* %PC
  %5341 = shl i64 %5338, 32
  %5342 = ashr exact i64 %5341, 32
  store i64 %5342, i64* %RCX, align 8, !tbaa !2428
  %5343 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5344 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5345 = load i64, i64* %RAX
  %5346 = load i64, i64* %RCX
  %5347 = mul i64 %5346, 4
  %5348 = add i64 %5347, %5345
  %5349 = load i64, i64* %PC
  %5350 = add i64 %5349, 5
  store i64 %5350, i64* %PC
  %5351 = bitcast i8* %5344 to <2 x float>*
  %5352 = load <2 x float>, <2 x float>* %5351, align 1
  %5353 = getelementptr inbounds i8, i8* %5344, i64 8
  %5354 = bitcast i8* %5353 to <2 x i32>*
  %5355 = load <2 x i32>, <2 x i32>* %5354, align 1
  %5356 = inttoptr i64 %5348 to float*
  %5357 = load float, float* %5356
  %5358 = extractelement <2 x float> %5352, i32 0
  %5359 = fsub float %5358, %5357
  %5360 = bitcast i8* %5343 to float*
  store float %5359, float* %5360, align 1, !tbaa !2453
  %5361 = bitcast <2 x float> %5352 to <2 x i32>
  %5362 = extractelement <2 x i32> %5361, i32 1
  %5363 = getelementptr inbounds i8, i8* %5343, i64 4
  %5364 = bitcast i8* %5363 to i32*
  store i32 %5362, i32* %5364, align 1, !tbaa !2453
  %5365 = extractelement <2 x i32> %5355, i32 0
  %5366 = getelementptr inbounds i8, i8* %5343, i64 8
  %5367 = bitcast i8* %5366 to i32*
  store i32 %5365, i32* %5367, align 1, !tbaa !2453
  %5368 = extractelement <2 x i32> %5355, i32 1
  %5369 = getelementptr inbounds i8, i8* %5343, i64 12
  %5370 = bitcast i8* %5369 to i32*
  store i32 %5368, i32* %5370, align 1, !tbaa !2453
  %5371 = load i64, i64* %RBP
  %5372 = sub i64 %5371, 40
  %5373 = load i64, i64* %PC
  %5374 = add i64 %5373, 4
  store i64 %5374, i64* %PC
  %5375 = inttoptr i64 %5372 to i64*
  %5376 = load i64, i64* %5375
  store i64 %5376, i64* %RAX, align 8, !tbaa !2428
  %5377 = load i64, i64* %RAX
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 3
  store i64 %5379, i64* %PC
  %5380 = inttoptr i64 %5377 to i64*
  %5381 = load i64, i64* %5380
  store i64 %5381, i64* %RAX, align 8, !tbaa !2428
  %5382 = load i64, i64* %RBP
  %5383 = sub i64 %5382, 40
  %5384 = load i64, i64* %PC
  %5385 = add i64 %5384, 4
  store i64 %5385, i64* %PC
  %5386 = inttoptr i64 %5383 to i64*
  %5387 = load i64, i64* %5386
  store i64 %5387, i64* %RCX, align 8, !tbaa !2428
  %5388 = load i64, i64* %RCX
  %5389 = add i64 %5388, 12
  %5390 = load i64, i64* %PC
  %5391 = add i64 %5390, 4
  store i64 %5391, i64* %PC
  %5392 = inttoptr i64 %5389 to i32*
  %5393 = load i32, i32* %5392
  %5394 = sext i32 %5393 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5395, align 1, !tbaa !2434
  %5396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5396, align 1, !tbaa !2448
  %5397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5397, align 1, !tbaa !2449
  %5398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5398, align 1, !tbaa !2450
  %5399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5399, align 1, !tbaa !2451
  %5400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5400, align 1, !tbaa !2452
  %5401 = load i64, i64* %RBP
  %5402 = sub i64 %5401, 40
  %5403 = load i64, i64* %PC
  %5404 = add i64 %5403, 4
  store i64 %5404, i64* %PC
  %5405 = inttoptr i64 %5402 to i64*
  %5406 = load i64, i64* %5405
  store i64 %5406, i64* %RCX, align 8, !tbaa !2428
  %5407 = load i64, i64* %RDX
  %5408 = load i64, i64* %RCX
  %5409 = add i64 %5408, 16
  %5410 = load i64, i64* %PC
  %5411 = add i64 %5410, 4
  store i64 %5411, i64* %PC
  %5412 = inttoptr i64 %5409 to i32*
  %5413 = load i32, i32* %5412
  %5414 = shl i64 %5407, 32
  %5415 = ashr exact i64 %5414, 32
  %5416 = sext i32 %5413 to i64
  %5417 = mul nsw i64 %5416, %5415
  %5418 = trunc i64 %5417 to i32
  %5419 = and i64 %5417, 4294967295
  store i64 %5419, i64* %RDX, align 8, !tbaa !2428
  %5420 = shl i64 %5417, 32
  %5421 = ashr exact i64 %5420, 32
  %5422 = icmp ne i64 %5421, %5417
  %5423 = zext i1 %5422 to i8
  %5424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5423, i8* %5424, align 1, !tbaa !2434
  %5425 = and i32 %5418, 255
  %5426 = call i32 @llvm.ctpop.i32(i32 %5425) #16
  %5427 = trunc i32 %5426 to i8
  %5428 = and i8 %5427, 1
  %5429 = xor i8 %5428, 1
  %5430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5429, i8* %5430, align 1, !tbaa !2448
  %5431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5431, align 1, !tbaa !2449
  %5432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5432, align 1, !tbaa !2450
  %5433 = lshr i32 %5418, 31
  %5434 = trunc i32 %5433 to i8
  %5435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5434, i8* %5435, align 1, !tbaa !2451
  %5436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5423, i8* %5436, align 1, !tbaa !2452
  %5437 = load i64, i64* %RBP
  %5438 = sub i64 %5437, 40
  %5439 = load i64, i64* %PC
  %5440 = add i64 %5439, 4
  store i64 %5440, i64* %PC
  %5441 = inttoptr i64 %5438 to i64*
  %5442 = load i64, i64* %5441
  store i64 %5442, i64* %RCX, align 8, !tbaa !2428
  %5443 = load i64, i64* %RDX
  %5444 = load i64, i64* %RCX
  %5445 = add i64 %5444, 20
  %5446 = load i64, i64* %PC
  %5447 = add i64 %5446, 4
  store i64 %5447, i64* %PC
  %5448 = inttoptr i64 %5445 to i32*
  %5449 = load i32, i32* %5448
  %5450 = shl i64 %5443, 32
  %5451 = ashr exact i64 %5450, 32
  %5452 = sext i32 %5449 to i64
  %5453 = mul nsw i64 %5452, %5451
  %5454 = trunc i64 %5453 to i32
  %5455 = and i64 %5453, 4294967295
  store i64 %5455, i64* %RDX, align 8, !tbaa !2428
  %5456 = shl i64 %5453, 32
  %5457 = ashr exact i64 %5456, 32
  %5458 = icmp ne i64 %5457, %5453
  %5459 = zext i1 %5458 to i8
  %5460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5459, i8* %5460, align 1, !tbaa !2434
  %5461 = and i32 %5454, 255
  %5462 = call i32 @llvm.ctpop.i32(i32 %5461) #16
  %5463 = trunc i32 %5462 to i8
  %5464 = and i8 %5463, 1
  %5465 = xor i8 %5464, 1
  %5466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5465, i8* %5466, align 1, !tbaa !2448
  %5467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5467, align 1, !tbaa !2449
  %5468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5468, align 1, !tbaa !2450
  %5469 = lshr i32 %5454, 31
  %5470 = trunc i32 %5469 to i8
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5470, i8* %5471, align 1, !tbaa !2451
  %5472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5459, i8* %5472, align 1, !tbaa !2452
  %5473 = load i64, i64* %RBP
  %5474 = sub i64 %5473, 68
  %5475 = load i64, i64* %PC
  %5476 = add i64 %5475, 3
  store i64 %5476, i64* %PC
  %5477 = inttoptr i64 %5474 to i32*
  %5478 = load i32, i32* %5477
  %5479 = zext i32 %5478 to i64
  store i64 %5479, i64* %RSI, align 8, !tbaa !2428
  %5480 = load i64, i64* %RSI
  %5481 = load i64, i64* %PC
  %5482 = add i64 %5481, 3
  store i64 %5482, i64* %PC
  %5483 = trunc i64 %5480 to i32
  %5484 = sub i32 %5483, 1
  %5485 = zext i32 %5484 to i64
  store i64 %5485, i64* %RSI, align 8, !tbaa !2428
  %5486 = icmp ult i32 %5483, 1
  %5487 = zext i1 %5486 to i8
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5487, i8* %5488, align 1, !tbaa !2434
  %5489 = and i32 %5484, 255
  %5490 = call i32 @llvm.ctpop.i32(i32 %5489) #16
  %5491 = trunc i32 %5490 to i8
  %5492 = and i8 %5491, 1
  %5493 = xor i8 %5492, 1
  %5494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5493, i8* %5494, align 1, !tbaa !2448
  %5495 = xor i64 1, %5480
  %5496 = trunc i64 %5495 to i32
  %5497 = xor i32 %5496, %5484
  %5498 = lshr i32 %5497, 4
  %5499 = trunc i32 %5498 to i8
  %5500 = and i8 %5499, 1
  %5501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5500, i8* %5501, align 1, !tbaa !2449
  %5502 = icmp eq i32 %5484, 0
  %5503 = zext i1 %5502 to i8
  %5504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5503, i8* %5504, align 1, !tbaa !2450
  %5505 = lshr i32 %5484, 31
  %5506 = trunc i32 %5505 to i8
  %5507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5506, i8* %5507, align 1, !tbaa !2451
  %5508 = lshr i32 %5483, 31
  %5509 = xor i32 %5505, %5508
  %5510 = add nuw nsw i32 %5509, %5508
  %5511 = icmp eq i32 %5510, 2
  %5512 = zext i1 %5511 to i8
  %5513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5512, i8* %5513, align 1, !tbaa !2452
  %5514 = load i64, i64* %RBP
  %5515 = sub i64 %5514, 40
  %5516 = load i64, i64* %PC
  %5517 = add i64 %5516, 4
  store i64 %5517, i64* %PC
  %5518 = inttoptr i64 %5515 to i64*
  %5519 = load i64, i64* %5518
  store i64 %5519, i64* %RCX, align 8, !tbaa !2428
  %5520 = load i64, i64* %RSI
  %5521 = load i64, i64* %RCX
  %5522 = add i64 %5521, 16
  %5523 = load i64, i64* %PC
  %5524 = add i64 %5523, 4
  store i64 %5524, i64* %PC
  %5525 = inttoptr i64 %5522 to i32*
  %5526 = load i32, i32* %5525
  %5527 = shl i64 %5520, 32
  %5528 = ashr exact i64 %5527, 32
  %5529 = sext i32 %5526 to i64
  %5530 = mul nsw i64 %5529, %5528
  %5531 = trunc i64 %5530 to i32
  %5532 = and i64 %5530, 4294967295
  store i64 %5532, i64* %RSI, align 8, !tbaa !2428
  %5533 = shl i64 %5530, 32
  %5534 = ashr exact i64 %5533, 32
  %5535 = icmp ne i64 %5534, %5530
  %5536 = zext i1 %5535 to i8
  %5537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5536, i8* %5537, align 1, !tbaa !2434
  %5538 = and i32 %5531, 255
  %5539 = call i32 @llvm.ctpop.i32(i32 %5538) #16
  %5540 = trunc i32 %5539 to i8
  %5541 = and i8 %5540, 1
  %5542 = xor i8 %5541, 1
  %5543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5542, i8* %5543, align 1, !tbaa !2448
  %5544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5544, align 1, !tbaa !2449
  %5545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5545, align 1, !tbaa !2450
  %5546 = lshr i32 %5531, 31
  %5547 = trunc i32 %5546 to i8
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5547, i8* %5548, align 1, !tbaa !2451
  %5549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5536, i8* %5549, align 1, !tbaa !2452
  %5550 = load i64, i64* %RBP
  %5551 = sub i64 %5550, 40
  %5552 = load i64, i64* %PC
  %5553 = add i64 %5552, 4
  store i64 %5553, i64* %PC
  %5554 = inttoptr i64 %5551 to i64*
  %5555 = load i64, i64* %5554
  store i64 %5555, i64* %RCX, align 8, !tbaa !2428
  %5556 = load i64, i64* %RSI
  %5557 = load i64, i64* %RCX
  %5558 = add i64 %5557, 20
  %5559 = load i64, i64* %PC
  %5560 = add i64 %5559, 4
  store i64 %5560, i64* %PC
  %5561 = inttoptr i64 %5558 to i32*
  %5562 = load i32, i32* %5561
  %5563 = shl i64 %5556, 32
  %5564 = ashr exact i64 %5563, 32
  %5565 = sext i32 %5562 to i64
  %5566 = mul nsw i64 %5565, %5564
  %5567 = trunc i64 %5566 to i32
  %5568 = and i64 %5566, 4294967295
  store i64 %5568, i64* %RSI, align 8, !tbaa !2428
  %5569 = shl i64 %5566, 32
  %5570 = ashr exact i64 %5569, 32
  %5571 = icmp ne i64 %5570, %5566
  %5572 = zext i1 %5571 to i8
  %5573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5572, i8* %5573, align 1, !tbaa !2434
  %5574 = and i32 %5567, 255
  %5575 = call i32 @llvm.ctpop.i32(i32 %5574) #16
  %5576 = trunc i32 %5575 to i8
  %5577 = and i8 %5576, 1
  %5578 = xor i8 %5577, 1
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5578, i8* %5579, align 1, !tbaa !2448
  %5580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5580, align 1, !tbaa !2449
  %5581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5581, align 1, !tbaa !2450
  %5582 = lshr i32 %5567, 31
  %5583 = trunc i32 %5582 to i8
  %5584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5583, i8* %5584, align 1, !tbaa !2451
  %5585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5572, i8* %5585, align 1, !tbaa !2452
  %5586 = load i64, i64* %RDX
  %5587 = load i32, i32* %ESI
  %5588 = zext i32 %5587 to i64
  %5589 = load i64, i64* %PC
  %5590 = add i64 %5589, 2
  store i64 %5590, i64* %PC
  %5591 = trunc i64 %5586 to i32
  %5592 = add i32 %5587, %5591
  %5593 = zext i32 %5592 to i64
  store i64 %5593, i64* %RDX, align 8, !tbaa !2428
  %5594 = icmp ult i32 %5592, %5591
  %5595 = icmp ult i32 %5592, %5587
  %5596 = or i1 %5594, %5595
  %5597 = zext i1 %5596 to i8
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5597, i8* %5598, align 1, !tbaa !2434
  %5599 = and i32 %5592, 255
  %5600 = call i32 @llvm.ctpop.i32(i32 %5599) #16
  %5601 = trunc i32 %5600 to i8
  %5602 = and i8 %5601, 1
  %5603 = xor i8 %5602, 1
  %5604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5603, i8* %5604, align 1, !tbaa !2448
  %5605 = xor i64 %5588, %5586
  %5606 = trunc i64 %5605 to i32
  %5607 = xor i32 %5606, %5592
  %5608 = lshr i32 %5607, 4
  %5609 = trunc i32 %5608 to i8
  %5610 = and i8 %5609, 1
  %5611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5610, i8* %5611, align 1, !tbaa !2449
  %5612 = icmp eq i32 %5592, 0
  %5613 = zext i1 %5612 to i8
  %5614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5613, i8* %5614, align 1, !tbaa !2450
  %5615 = lshr i32 %5592, 31
  %5616 = trunc i32 %5615 to i8
  %5617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5616, i8* %5617, align 1, !tbaa !2451
  %5618 = lshr i32 %5591, 31
  %5619 = lshr i32 %5587, 31
  %5620 = xor i32 %5615, %5618
  %5621 = xor i32 %5615, %5619
  %5622 = add nuw nsw i32 %5620, %5621
  %5623 = icmp eq i32 %5622, 2
  %5624 = zext i1 %5623 to i8
  %5625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5624, i8* %5625, align 1, !tbaa !2452
  %5626 = load i64, i64* %RBP
  %5627 = sub i64 %5626, 72
  %5628 = load i64, i64* %PC
  %5629 = add i64 %5628, 3
  store i64 %5629, i64* %PC
  %5630 = inttoptr i64 %5627 to i32*
  %5631 = load i32, i32* %5630
  %5632 = zext i32 %5631 to i64
  store i64 %5632, i64* %RSI, align 8, !tbaa !2428
  %5633 = load i64, i64* %RSI
  %5634 = load i64, i64* %PC
  %5635 = add i64 %5634, 3
  store i64 %5635, i64* %PC
  %5636 = trunc i64 %5633 to i32
  %5637 = add i32 1, %5636
  %5638 = zext i32 %5637 to i64
  store i64 %5638, i64* %RSI, align 8, !tbaa !2428
  %5639 = icmp ult i32 %5637, %5636
  %5640 = icmp ult i32 %5637, 1
  %5641 = or i1 %5639, %5640
  %5642 = zext i1 %5641 to i8
  %5643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5642, i8* %5643, align 1, !tbaa !2434
  %5644 = and i32 %5637, 255
  %5645 = call i32 @llvm.ctpop.i32(i32 %5644) #16
  %5646 = trunc i32 %5645 to i8
  %5647 = and i8 %5646, 1
  %5648 = xor i8 %5647, 1
  %5649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5648, i8* %5649, align 1, !tbaa !2448
  %5650 = xor i64 1, %5633
  %5651 = trunc i64 %5650 to i32
  %5652 = xor i32 %5651, %5637
  %5653 = lshr i32 %5652, 4
  %5654 = trunc i32 %5653 to i8
  %5655 = and i8 %5654, 1
  %5656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5655, i8* %5656, align 1, !tbaa !2449
  %5657 = icmp eq i32 %5637, 0
  %5658 = zext i1 %5657 to i8
  %5659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5658, i8* %5659, align 1, !tbaa !2450
  %5660 = lshr i32 %5637, 31
  %5661 = trunc i32 %5660 to i8
  %5662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5661, i8* %5662, align 1, !tbaa !2451
  %5663 = lshr i32 %5636, 31
  %5664 = xor i32 %5660, %5663
  %5665 = add nuw nsw i32 %5664, %5660
  %5666 = icmp eq i32 %5665, 2
  %5667 = zext i1 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5667, i8* %5668, align 1, !tbaa !2452
  %5669 = load i64, i64* %RBP
  %5670 = sub i64 %5669, 40
  %5671 = load i64, i64* %PC
  %5672 = add i64 %5671, 4
  store i64 %5672, i64* %PC
  %5673 = inttoptr i64 %5670 to i64*
  %5674 = load i64, i64* %5673
  store i64 %5674, i64* %RCX, align 8, !tbaa !2428
  %5675 = load i64, i64* %RSI
  %5676 = load i64, i64* %RCX
  %5677 = add i64 %5676, 20
  %5678 = load i64, i64* %PC
  %5679 = add i64 %5678, 4
  store i64 %5679, i64* %PC
  %5680 = inttoptr i64 %5677 to i32*
  %5681 = load i32, i32* %5680
  %5682 = shl i64 %5675, 32
  %5683 = ashr exact i64 %5682, 32
  %5684 = sext i32 %5681 to i64
  %5685 = mul nsw i64 %5684, %5683
  %5686 = trunc i64 %5685 to i32
  %5687 = and i64 %5685, 4294967295
  store i64 %5687, i64* %RSI, align 8, !tbaa !2428
  %5688 = shl i64 %5685, 32
  %5689 = ashr exact i64 %5688, 32
  %5690 = icmp ne i64 %5689, %5685
  %5691 = zext i1 %5690 to i8
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5691, i8* %5692, align 1, !tbaa !2434
  %5693 = and i32 %5686, 255
  %5694 = call i32 @llvm.ctpop.i32(i32 %5693) #16
  %5695 = trunc i32 %5694 to i8
  %5696 = and i8 %5695, 1
  %5697 = xor i8 %5696, 1
  %5698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5697, i8* %5698, align 1, !tbaa !2448
  %5699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5699, align 1, !tbaa !2449
  %5700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5700, align 1, !tbaa !2450
  %5701 = lshr i32 %5686, 31
  %5702 = trunc i32 %5701 to i8
  %5703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5702, i8* %5703, align 1, !tbaa !2451
  %5704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5691, i8* %5704, align 1, !tbaa !2452
  %5705 = load i64, i64* %RDX
  %5706 = load i32, i32* %ESI
  %5707 = zext i32 %5706 to i64
  %5708 = load i64, i64* %PC
  %5709 = add i64 %5708, 2
  store i64 %5709, i64* %PC
  %5710 = trunc i64 %5705 to i32
  %5711 = add i32 %5706, %5710
  %5712 = zext i32 %5711 to i64
  store i64 %5712, i64* %RDX, align 8, !tbaa !2428
  %5713 = icmp ult i32 %5711, %5710
  %5714 = icmp ult i32 %5711, %5706
  %5715 = or i1 %5713, %5714
  %5716 = zext i1 %5715 to i8
  %5717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5716, i8* %5717, align 1, !tbaa !2434
  %5718 = and i32 %5711, 255
  %5719 = call i32 @llvm.ctpop.i32(i32 %5718) #16
  %5720 = trunc i32 %5719 to i8
  %5721 = and i8 %5720, 1
  %5722 = xor i8 %5721, 1
  %5723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5722, i8* %5723, align 1, !tbaa !2448
  %5724 = xor i64 %5707, %5705
  %5725 = trunc i64 %5724 to i32
  %5726 = xor i32 %5725, %5711
  %5727 = lshr i32 %5726, 4
  %5728 = trunc i32 %5727 to i8
  %5729 = and i8 %5728, 1
  %5730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5729, i8* %5730, align 1, !tbaa !2449
  %5731 = icmp eq i32 %5711, 0
  %5732 = zext i1 %5731 to i8
  %5733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5732, i8* %5733, align 1, !tbaa !2450
  %5734 = lshr i32 %5711, 31
  %5735 = trunc i32 %5734 to i8
  %5736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5735, i8* %5736, align 1, !tbaa !2451
  %5737 = lshr i32 %5710, 31
  %5738 = lshr i32 %5706, 31
  %5739 = xor i32 %5734, %5737
  %5740 = xor i32 %5734, %5738
  %5741 = add nuw nsw i32 %5739, %5740
  %5742 = icmp eq i32 %5741, 2
  %5743 = zext i1 %5742 to i8
  %5744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5743, i8* %5744, align 1, !tbaa !2452
  %5745 = load i64, i64* %RDX
  %5746 = load i64, i64* %RBP
  %5747 = sub i64 %5746, 76
  %5748 = load i64, i64* %PC
  %5749 = add i64 %5748, 3
  store i64 %5749, i64* %PC
  %5750 = trunc i64 %5745 to i32
  %5751 = inttoptr i64 %5747 to i32*
  %5752 = load i32, i32* %5751
  %5753 = add i32 %5752, %5750
  %5754 = zext i32 %5753 to i64
  store i64 %5754, i64* %RDX, align 8, !tbaa !2428
  %5755 = icmp ult i32 %5753, %5750
  %5756 = icmp ult i32 %5753, %5752
  %5757 = or i1 %5755, %5756
  %5758 = zext i1 %5757 to i8
  %5759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5758, i8* %5759, align 1, !tbaa !2434
  %5760 = and i32 %5753, 255
  %5761 = call i32 @llvm.ctpop.i32(i32 %5760) #16
  %5762 = trunc i32 %5761 to i8
  %5763 = and i8 %5762, 1
  %5764 = xor i8 %5763, 1
  %5765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5764, i8* %5765, align 1, !tbaa !2448
  %5766 = xor i32 %5752, %5750
  %5767 = xor i32 %5766, %5753
  %5768 = lshr i32 %5767, 4
  %5769 = trunc i32 %5768 to i8
  %5770 = and i8 %5769, 1
  %5771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5770, i8* %5771, align 1, !tbaa !2449
  %5772 = icmp eq i32 %5753, 0
  %5773 = zext i1 %5772 to i8
  %5774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5773, i8* %5774, align 1, !tbaa !2450
  %5775 = lshr i32 %5753, 31
  %5776 = trunc i32 %5775 to i8
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5776, i8* %5777, align 1, !tbaa !2451
  %5778 = lshr i32 %5750, 31
  %5779 = lshr i32 %5752, 31
  %5780 = xor i32 %5775, %5778
  %5781 = xor i32 %5775, %5779
  %5782 = add nuw nsw i32 %5780, %5781
  %5783 = icmp eq i32 %5782, 2
  %5784 = zext i1 %5783 to i8
  %5785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5784, i8* %5785, align 1, !tbaa !2452
  %5786 = load i32, i32* %EDX
  %5787 = zext i32 %5786 to i64
  %5788 = load i64, i64* %PC
  %5789 = add i64 %5788, 3
  store i64 %5789, i64* %PC
  %5790 = shl i64 %5787, 32
  %5791 = ashr exact i64 %5790, 32
  store i64 %5791, i64* %RCX, align 8, !tbaa !2428
  %5792 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5793 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5794 = load i64, i64* %RAX
  %5795 = load i64, i64* %RCX
  %5796 = mul i64 %5795, 4
  %5797 = add i64 %5796, %5794
  %5798 = load i64, i64* %PC
  %5799 = add i64 %5798, 5
  store i64 %5799, i64* %PC
  %5800 = bitcast i8* %5793 to <2 x float>*
  %5801 = load <2 x float>, <2 x float>* %5800, align 1
  %5802 = getelementptr inbounds i8, i8* %5793, i64 8
  %5803 = bitcast i8* %5802 to <2 x i32>*
  %5804 = load <2 x i32>, <2 x i32>* %5803, align 1
  %5805 = inttoptr i64 %5797 to float*
  %5806 = load float, float* %5805
  %5807 = extractelement <2 x float> %5801, i32 0
  %5808 = fsub float %5807, %5806
  %5809 = bitcast i8* %5792 to float*
  store float %5808, float* %5809, align 1, !tbaa !2453
  %5810 = bitcast <2 x float> %5801 to <2 x i32>
  %5811 = extractelement <2 x i32> %5810, i32 1
  %5812 = getelementptr inbounds i8, i8* %5792, i64 4
  %5813 = bitcast i8* %5812 to i32*
  store i32 %5811, i32* %5813, align 1, !tbaa !2453
  %5814 = extractelement <2 x i32> %5804, i32 0
  %5815 = getelementptr inbounds i8, i8* %5792, i64 8
  %5816 = bitcast i8* %5815 to i32*
  store i32 %5814, i32* %5816, align 1, !tbaa !2453
  %5817 = extractelement <2 x i32> %5804, i32 1
  %5818 = getelementptr inbounds i8, i8* %5792, i64 12
  %5819 = bitcast i8* %5818 to i32*
  store i32 %5817, i32* %5819, align 1, !tbaa !2453
  %5820 = load i64, i64* %RBP
  %5821 = sub i64 %5820, 40
  %5822 = load i64, i64* %PC
  %5823 = add i64 %5822, 4
  store i64 %5823, i64* %PC
  %5824 = inttoptr i64 %5821 to i64*
  %5825 = load i64, i64* %5824
  store i64 %5825, i64* %RAX, align 8, !tbaa !2428
  %5826 = load i64, i64* %RAX
  %5827 = load i64, i64* %PC
  %5828 = add i64 %5827, 3
  store i64 %5828, i64* %PC
  %5829 = inttoptr i64 %5826 to i64*
  %5830 = load i64, i64* %5829
  store i64 %5830, i64* %RAX, align 8, !tbaa !2428
  %5831 = load i64, i64* %RBP
  %5832 = sub i64 %5831, 40
  %5833 = load i64, i64* %PC
  %5834 = add i64 %5833, 4
  store i64 %5834, i64* %PC
  %5835 = inttoptr i64 %5832 to i64*
  %5836 = load i64, i64* %5835
  store i64 %5836, i64* %RCX, align 8, !tbaa !2428
  %5837 = load i64, i64* %RCX
  %5838 = add i64 %5837, 12
  %5839 = load i64, i64* %PC
  %5840 = add i64 %5839, 4
  store i64 %5840, i64* %PC
  %5841 = inttoptr i64 %5838 to i32*
  %5842 = load i32, i32* %5841
  %5843 = sext i32 %5842 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %5844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5844, align 1, !tbaa !2434
  %5845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %5845, align 1, !tbaa !2448
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5846, align 1, !tbaa !2449
  %5847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5847, align 1, !tbaa !2450
  %5848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %5848, align 1, !tbaa !2451
  %5849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5849, align 1, !tbaa !2452
  %5850 = load i64, i64* %RBP
  %5851 = sub i64 %5850, 40
  %5852 = load i64, i64* %PC
  %5853 = add i64 %5852, 4
  store i64 %5853, i64* %PC
  %5854 = inttoptr i64 %5851 to i64*
  %5855 = load i64, i64* %5854
  store i64 %5855, i64* %RCX, align 8, !tbaa !2428
  %5856 = load i64, i64* %RDX
  %5857 = load i64, i64* %RCX
  %5858 = add i64 %5857, 16
  %5859 = load i64, i64* %PC
  %5860 = add i64 %5859, 4
  store i64 %5860, i64* %PC
  %5861 = inttoptr i64 %5858 to i32*
  %5862 = load i32, i32* %5861
  %5863 = shl i64 %5856, 32
  %5864 = ashr exact i64 %5863, 32
  %5865 = sext i32 %5862 to i64
  %5866 = mul nsw i64 %5865, %5864
  %5867 = trunc i64 %5866 to i32
  %5868 = and i64 %5866, 4294967295
  store i64 %5868, i64* %RDX, align 8, !tbaa !2428
  %5869 = shl i64 %5866, 32
  %5870 = ashr exact i64 %5869, 32
  %5871 = icmp ne i64 %5870, %5866
  %5872 = zext i1 %5871 to i8
  %5873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5872, i8* %5873, align 1, !tbaa !2434
  %5874 = and i32 %5867, 255
  %5875 = call i32 @llvm.ctpop.i32(i32 %5874) #16
  %5876 = trunc i32 %5875 to i8
  %5877 = and i8 %5876, 1
  %5878 = xor i8 %5877, 1
  %5879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5878, i8* %5879, align 1, !tbaa !2448
  %5880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5880, align 1, !tbaa !2449
  %5881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5881, align 1, !tbaa !2450
  %5882 = lshr i32 %5867, 31
  %5883 = trunc i32 %5882 to i8
  %5884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5883, i8* %5884, align 1, !tbaa !2451
  %5885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5872, i8* %5885, align 1, !tbaa !2452
  %5886 = load i64, i64* %RBP
  %5887 = sub i64 %5886, 40
  %5888 = load i64, i64* %PC
  %5889 = add i64 %5888, 4
  store i64 %5889, i64* %PC
  %5890 = inttoptr i64 %5887 to i64*
  %5891 = load i64, i64* %5890
  store i64 %5891, i64* %RCX, align 8, !tbaa !2428
  %5892 = load i64, i64* %RDX
  %5893 = load i64, i64* %RCX
  %5894 = add i64 %5893, 20
  %5895 = load i64, i64* %PC
  %5896 = add i64 %5895, 4
  store i64 %5896, i64* %PC
  %5897 = inttoptr i64 %5894 to i32*
  %5898 = load i32, i32* %5897
  %5899 = shl i64 %5892, 32
  %5900 = ashr exact i64 %5899, 32
  %5901 = sext i32 %5898 to i64
  %5902 = mul nsw i64 %5901, %5900
  %5903 = trunc i64 %5902 to i32
  %5904 = and i64 %5902, 4294967295
  store i64 %5904, i64* %RDX, align 8, !tbaa !2428
  %5905 = shl i64 %5902, 32
  %5906 = ashr exact i64 %5905, 32
  %5907 = icmp ne i64 %5906, %5902
  %5908 = zext i1 %5907 to i8
  %5909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5908, i8* %5909, align 1, !tbaa !2434
  %5910 = and i32 %5903, 255
  %5911 = call i32 @llvm.ctpop.i32(i32 %5910) #16
  %5912 = trunc i32 %5911 to i8
  %5913 = and i8 %5912, 1
  %5914 = xor i8 %5913, 1
  %5915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5914, i8* %5915, align 1, !tbaa !2448
  %5916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5916, align 1, !tbaa !2449
  %5917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5917, align 1, !tbaa !2450
  %5918 = lshr i32 %5903, 31
  %5919 = trunc i32 %5918 to i8
  %5920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5919, i8* %5920, align 1, !tbaa !2451
  %5921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5908, i8* %5921, align 1, !tbaa !2452
  %5922 = load i64, i64* %RBP
  %5923 = sub i64 %5922, 68
  %5924 = load i64, i64* %PC
  %5925 = add i64 %5924, 3
  store i64 %5925, i64* %PC
  %5926 = inttoptr i64 %5923 to i32*
  %5927 = load i32, i32* %5926
  %5928 = zext i32 %5927 to i64
  store i64 %5928, i64* %RSI, align 8, !tbaa !2428
  %5929 = load i64, i64* %RSI
  %5930 = load i64, i64* %PC
  %5931 = add i64 %5930, 3
  store i64 %5931, i64* %PC
  %5932 = trunc i64 %5929 to i32
  %5933 = sub i32 %5932, 1
  %5934 = zext i32 %5933 to i64
  store i64 %5934, i64* %RSI, align 8, !tbaa !2428
  %5935 = icmp ult i32 %5932, 1
  %5936 = zext i1 %5935 to i8
  %5937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5936, i8* %5937, align 1, !tbaa !2434
  %5938 = and i32 %5933, 255
  %5939 = call i32 @llvm.ctpop.i32(i32 %5938) #16
  %5940 = trunc i32 %5939 to i8
  %5941 = and i8 %5940, 1
  %5942 = xor i8 %5941, 1
  %5943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5942, i8* %5943, align 1, !tbaa !2448
  %5944 = xor i64 1, %5929
  %5945 = trunc i64 %5944 to i32
  %5946 = xor i32 %5945, %5933
  %5947 = lshr i32 %5946, 4
  %5948 = trunc i32 %5947 to i8
  %5949 = and i8 %5948, 1
  %5950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5949, i8* %5950, align 1, !tbaa !2449
  %5951 = icmp eq i32 %5933, 0
  %5952 = zext i1 %5951 to i8
  %5953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5952, i8* %5953, align 1, !tbaa !2450
  %5954 = lshr i32 %5933, 31
  %5955 = trunc i32 %5954 to i8
  %5956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5955, i8* %5956, align 1, !tbaa !2451
  %5957 = lshr i32 %5932, 31
  %5958 = xor i32 %5954, %5957
  %5959 = add nuw nsw i32 %5958, %5957
  %5960 = icmp eq i32 %5959, 2
  %5961 = zext i1 %5960 to i8
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5961, i8* %5962, align 1, !tbaa !2452
  %5963 = load i64, i64* %RBP
  %5964 = sub i64 %5963, 40
  %5965 = load i64, i64* %PC
  %5966 = add i64 %5965, 4
  store i64 %5966, i64* %PC
  %5967 = inttoptr i64 %5964 to i64*
  %5968 = load i64, i64* %5967
  store i64 %5968, i64* %RCX, align 8, !tbaa !2428
  %5969 = load i64, i64* %RSI
  %5970 = load i64, i64* %RCX
  %5971 = add i64 %5970, 16
  %5972 = load i64, i64* %PC
  %5973 = add i64 %5972, 4
  store i64 %5973, i64* %PC
  %5974 = inttoptr i64 %5971 to i32*
  %5975 = load i32, i32* %5974
  %5976 = shl i64 %5969, 32
  %5977 = ashr exact i64 %5976, 32
  %5978 = sext i32 %5975 to i64
  %5979 = mul nsw i64 %5978, %5977
  %5980 = trunc i64 %5979 to i32
  %5981 = and i64 %5979, 4294967295
  store i64 %5981, i64* %RSI, align 8, !tbaa !2428
  %5982 = shl i64 %5979, 32
  %5983 = ashr exact i64 %5982, 32
  %5984 = icmp ne i64 %5983, %5979
  %5985 = zext i1 %5984 to i8
  %5986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5985, i8* %5986, align 1, !tbaa !2434
  %5987 = and i32 %5980, 255
  %5988 = call i32 @llvm.ctpop.i32(i32 %5987) #16
  %5989 = trunc i32 %5988 to i8
  %5990 = and i8 %5989, 1
  %5991 = xor i8 %5990, 1
  %5992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5991, i8* %5992, align 1, !tbaa !2448
  %5993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5993, align 1, !tbaa !2449
  %5994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5994, align 1, !tbaa !2450
  %5995 = lshr i32 %5980, 31
  %5996 = trunc i32 %5995 to i8
  %5997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5996, i8* %5997, align 1, !tbaa !2451
  %5998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5985, i8* %5998, align 1, !tbaa !2452
  %5999 = load i64, i64* %RBP
  %6000 = sub i64 %5999, 40
  %6001 = load i64, i64* %PC
  %6002 = add i64 %6001, 4
  store i64 %6002, i64* %PC
  %6003 = inttoptr i64 %6000 to i64*
  %6004 = load i64, i64* %6003
  store i64 %6004, i64* %RCX, align 8, !tbaa !2428
  %6005 = load i64, i64* %RSI
  %6006 = load i64, i64* %RCX
  %6007 = add i64 %6006, 20
  %6008 = load i64, i64* %PC
  %6009 = add i64 %6008, 4
  store i64 %6009, i64* %PC
  %6010 = inttoptr i64 %6007 to i32*
  %6011 = load i32, i32* %6010
  %6012 = shl i64 %6005, 32
  %6013 = ashr exact i64 %6012, 32
  %6014 = sext i32 %6011 to i64
  %6015 = mul nsw i64 %6014, %6013
  %6016 = trunc i64 %6015 to i32
  %6017 = and i64 %6015, 4294967295
  store i64 %6017, i64* %RSI, align 8, !tbaa !2428
  %6018 = shl i64 %6015, 32
  %6019 = ashr exact i64 %6018, 32
  %6020 = icmp ne i64 %6019, %6015
  %6021 = zext i1 %6020 to i8
  %6022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6021, i8* %6022, align 1, !tbaa !2434
  %6023 = and i32 %6016, 255
  %6024 = call i32 @llvm.ctpop.i32(i32 %6023) #16
  %6025 = trunc i32 %6024 to i8
  %6026 = and i8 %6025, 1
  %6027 = xor i8 %6026, 1
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6027, i8* %6028, align 1, !tbaa !2448
  %6029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6029, align 1, !tbaa !2449
  %6030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6030, align 1, !tbaa !2450
  %6031 = lshr i32 %6016, 31
  %6032 = trunc i32 %6031 to i8
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6032, i8* %6033, align 1, !tbaa !2451
  %6034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6021, i8* %6034, align 1, !tbaa !2452
  %6035 = load i64, i64* %RDX
  %6036 = load i32, i32* %ESI
  %6037 = zext i32 %6036 to i64
  %6038 = load i64, i64* %PC
  %6039 = add i64 %6038, 2
  store i64 %6039, i64* %PC
  %6040 = trunc i64 %6035 to i32
  %6041 = add i32 %6036, %6040
  %6042 = zext i32 %6041 to i64
  store i64 %6042, i64* %RDX, align 8, !tbaa !2428
  %6043 = icmp ult i32 %6041, %6040
  %6044 = icmp ult i32 %6041, %6036
  %6045 = or i1 %6043, %6044
  %6046 = zext i1 %6045 to i8
  %6047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6046, i8* %6047, align 1, !tbaa !2434
  %6048 = and i32 %6041, 255
  %6049 = call i32 @llvm.ctpop.i32(i32 %6048) #16
  %6050 = trunc i32 %6049 to i8
  %6051 = and i8 %6050, 1
  %6052 = xor i8 %6051, 1
  %6053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6052, i8* %6053, align 1, !tbaa !2448
  %6054 = xor i64 %6037, %6035
  %6055 = trunc i64 %6054 to i32
  %6056 = xor i32 %6055, %6041
  %6057 = lshr i32 %6056, 4
  %6058 = trunc i32 %6057 to i8
  %6059 = and i8 %6058, 1
  %6060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6059, i8* %6060, align 1, !tbaa !2449
  %6061 = icmp eq i32 %6041, 0
  %6062 = zext i1 %6061 to i8
  %6063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6062, i8* %6063, align 1, !tbaa !2450
  %6064 = lshr i32 %6041, 31
  %6065 = trunc i32 %6064 to i8
  %6066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6065, i8* %6066, align 1, !tbaa !2451
  %6067 = lshr i32 %6040, 31
  %6068 = lshr i32 %6036, 31
  %6069 = xor i32 %6064, %6067
  %6070 = xor i32 %6064, %6068
  %6071 = add nuw nsw i32 %6069, %6070
  %6072 = icmp eq i32 %6071, 2
  %6073 = zext i1 %6072 to i8
  %6074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6073, i8* %6074, align 1, !tbaa !2452
  %6075 = load i64, i64* %RBP
  %6076 = sub i64 %6075, 72
  %6077 = load i64, i64* %PC
  %6078 = add i64 %6077, 3
  store i64 %6078, i64* %PC
  %6079 = inttoptr i64 %6076 to i32*
  %6080 = load i32, i32* %6079
  %6081 = zext i32 %6080 to i64
  store i64 %6081, i64* %RSI, align 8, !tbaa !2428
  %6082 = load i64, i64* %RSI
  %6083 = load i64, i64* %PC
  %6084 = add i64 %6083, 3
  store i64 %6084, i64* %PC
  %6085 = trunc i64 %6082 to i32
  %6086 = sub i32 %6085, 1
  %6087 = zext i32 %6086 to i64
  store i64 %6087, i64* %RSI, align 8, !tbaa !2428
  %6088 = icmp ult i32 %6085, 1
  %6089 = zext i1 %6088 to i8
  %6090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6089, i8* %6090, align 1, !tbaa !2434
  %6091 = and i32 %6086, 255
  %6092 = call i32 @llvm.ctpop.i32(i32 %6091) #16
  %6093 = trunc i32 %6092 to i8
  %6094 = and i8 %6093, 1
  %6095 = xor i8 %6094, 1
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6095, i8* %6096, align 1, !tbaa !2448
  %6097 = xor i64 1, %6082
  %6098 = trunc i64 %6097 to i32
  %6099 = xor i32 %6098, %6086
  %6100 = lshr i32 %6099, 4
  %6101 = trunc i32 %6100 to i8
  %6102 = and i8 %6101, 1
  %6103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6102, i8* %6103, align 1, !tbaa !2449
  %6104 = icmp eq i32 %6086, 0
  %6105 = zext i1 %6104 to i8
  %6106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6105, i8* %6106, align 1, !tbaa !2450
  %6107 = lshr i32 %6086, 31
  %6108 = trunc i32 %6107 to i8
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6108, i8* %6109, align 1, !tbaa !2451
  %6110 = lshr i32 %6085, 31
  %6111 = xor i32 %6107, %6110
  %6112 = add nuw nsw i32 %6111, %6110
  %6113 = icmp eq i32 %6112, 2
  %6114 = zext i1 %6113 to i8
  %6115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6114, i8* %6115, align 1, !tbaa !2452
  %6116 = load i64, i64* %RBP
  %6117 = sub i64 %6116, 40
  %6118 = load i64, i64* %PC
  %6119 = add i64 %6118, 4
  store i64 %6119, i64* %PC
  %6120 = inttoptr i64 %6117 to i64*
  %6121 = load i64, i64* %6120
  store i64 %6121, i64* %RCX, align 8, !tbaa !2428
  %6122 = load i64, i64* %RSI
  %6123 = load i64, i64* %RCX
  %6124 = add i64 %6123, 20
  %6125 = load i64, i64* %PC
  %6126 = add i64 %6125, 4
  store i64 %6126, i64* %PC
  %6127 = inttoptr i64 %6124 to i32*
  %6128 = load i32, i32* %6127
  %6129 = shl i64 %6122, 32
  %6130 = ashr exact i64 %6129, 32
  %6131 = sext i32 %6128 to i64
  %6132 = mul nsw i64 %6131, %6130
  %6133 = trunc i64 %6132 to i32
  %6134 = and i64 %6132, 4294967295
  store i64 %6134, i64* %RSI, align 8, !tbaa !2428
  %6135 = shl i64 %6132, 32
  %6136 = ashr exact i64 %6135, 32
  %6137 = icmp ne i64 %6136, %6132
  %6138 = zext i1 %6137 to i8
  %6139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6138, i8* %6139, align 1, !tbaa !2434
  %6140 = and i32 %6133, 255
  %6141 = call i32 @llvm.ctpop.i32(i32 %6140) #16
  %6142 = trunc i32 %6141 to i8
  %6143 = and i8 %6142, 1
  %6144 = xor i8 %6143, 1
  %6145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6144, i8* %6145, align 1, !tbaa !2448
  %6146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6146, align 1, !tbaa !2449
  %6147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6147, align 1, !tbaa !2450
  %6148 = lshr i32 %6133, 31
  %6149 = trunc i32 %6148 to i8
  %6150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6149, i8* %6150, align 1, !tbaa !2451
  %6151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6138, i8* %6151, align 1, !tbaa !2452
  %6152 = load i64, i64* %RDX
  %6153 = load i32, i32* %ESI
  %6154 = zext i32 %6153 to i64
  %6155 = load i64, i64* %PC
  %6156 = add i64 %6155, 2
  store i64 %6156, i64* %PC
  %6157 = trunc i64 %6152 to i32
  %6158 = add i32 %6153, %6157
  %6159 = zext i32 %6158 to i64
  store i64 %6159, i64* %RDX, align 8, !tbaa !2428
  %6160 = icmp ult i32 %6158, %6157
  %6161 = icmp ult i32 %6158, %6153
  %6162 = or i1 %6160, %6161
  %6163 = zext i1 %6162 to i8
  %6164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6163, i8* %6164, align 1, !tbaa !2434
  %6165 = and i32 %6158, 255
  %6166 = call i32 @llvm.ctpop.i32(i32 %6165) #16
  %6167 = trunc i32 %6166 to i8
  %6168 = and i8 %6167, 1
  %6169 = xor i8 %6168, 1
  %6170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6169, i8* %6170, align 1, !tbaa !2448
  %6171 = xor i64 %6154, %6152
  %6172 = trunc i64 %6171 to i32
  %6173 = xor i32 %6172, %6158
  %6174 = lshr i32 %6173, 4
  %6175 = trunc i32 %6174 to i8
  %6176 = and i8 %6175, 1
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6176, i8* %6177, align 1, !tbaa !2449
  %6178 = icmp eq i32 %6158, 0
  %6179 = zext i1 %6178 to i8
  %6180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6179, i8* %6180, align 1, !tbaa !2450
  %6181 = lshr i32 %6158, 31
  %6182 = trunc i32 %6181 to i8
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6182, i8* %6183, align 1, !tbaa !2451
  %6184 = lshr i32 %6157, 31
  %6185 = lshr i32 %6153, 31
  %6186 = xor i32 %6181, %6184
  %6187 = xor i32 %6181, %6185
  %6188 = add nuw nsw i32 %6186, %6187
  %6189 = icmp eq i32 %6188, 2
  %6190 = zext i1 %6189 to i8
  %6191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6190, i8* %6191, align 1, !tbaa !2452
  %6192 = load i64, i64* %RDX
  %6193 = load i64, i64* %RBP
  %6194 = sub i64 %6193, 76
  %6195 = load i64, i64* %PC
  %6196 = add i64 %6195, 3
  store i64 %6196, i64* %PC
  %6197 = trunc i64 %6192 to i32
  %6198 = inttoptr i64 %6194 to i32*
  %6199 = load i32, i32* %6198
  %6200 = add i32 %6199, %6197
  %6201 = zext i32 %6200 to i64
  store i64 %6201, i64* %RDX, align 8, !tbaa !2428
  %6202 = icmp ult i32 %6200, %6197
  %6203 = icmp ult i32 %6200, %6199
  %6204 = or i1 %6202, %6203
  %6205 = zext i1 %6204 to i8
  %6206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6205, i8* %6206, align 1, !tbaa !2434
  %6207 = and i32 %6200, 255
  %6208 = call i32 @llvm.ctpop.i32(i32 %6207) #16
  %6209 = trunc i32 %6208 to i8
  %6210 = and i8 %6209, 1
  %6211 = xor i8 %6210, 1
  %6212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6211, i8* %6212, align 1, !tbaa !2448
  %6213 = xor i32 %6199, %6197
  %6214 = xor i32 %6213, %6200
  %6215 = lshr i32 %6214, 4
  %6216 = trunc i32 %6215 to i8
  %6217 = and i8 %6216, 1
  %6218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6217, i8* %6218, align 1, !tbaa !2449
  %6219 = icmp eq i32 %6200, 0
  %6220 = zext i1 %6219 to i8
  %6221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6220, i8* %6221, align 1, !tbaa !2450
  %6222 = lshr i32 %6200, 31
  %6223 = trunc i32 %6222 to i8
  %6224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6223, i8* %6224, align 1, !tbaa !2451
  %6225 = lshr i32 %6197, 31
  %6226 = lshr i32 %6199, 31
  %6227 = xor i32 %6222, %6225
  %6228 = xor i32 %6222, %6226
  %6229 = add nuw nsw i32 %6227, %6228
  %6230 = icmp eq i32 %6229, 2
  %6231 = zext i1 %6230 to i8
  %6232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6231, i8* %6232, align 1, !tbaa !2452
  %6233 = load i32, i32* %EDX
  %6234 = zext i32 %6233 to i64
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 3
  store i64 %6236, i64* %PC
  %6237 = shl i64 %6234, 32
  %6238 = ashr exact i64 %6237, 32
  store i64 %6238, i64* %RCX, align 8, !tbaa !2428
  %6239 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6240 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6241 = load i64, i64* %RAX
  %6242 = load i64, i64* %RCX
  %6243 = mul i64 %6242, 4
  %6244 = add i64 %6243, %6241
  %6245 = load i64, i64* %PC
  %6246 = add i64 %6245, 5
  store i64 %6246, i64* %PC
  %6247 = bitcast i8* %6240 to <2 x float>*
  %6248 = load <2 x float>, <2 x float>* %6247, align 1
  %6249 = getelementptr inbounds i8, i8* %6240, i64 8
  %6250 = bitcast i8* %6249 to <2 x i32>*
  %6251 = load <2 x i32>, <2 x i32>* %6250, align 1
  %6252 = inttoptr i64 %6244 to float*
  %6253 = load float, float* %6252
  %6254 = extractelement <2 x float> %6248, i32 0
  %6255 = fadd float %6254, %6253
  %6256 = bitcast i8* %6239 to float*
  store float %6255, float* %6256, align 1, !tbaa !2453
  %6257 = bitcast <2 x float> %6248 to <2 x i32>
  %6258 = extractelement <2 x i32> %6257, i32 1
  %6259 = getelementptr inbounds i8, i8* %6239, i64 4
  %6260 = bitcast i8* %6259 to i32*
  store i32 %6258, i32* %6260, align 1, !tbaa !2453
  %6261 = extractelement <2 x i32> %6251, i32 0
  %6262 = getelementptr inbounds i8, i8* %6239, i64 8
  %6263 = bitcast i8* %6262 to i32*
  store i32 %6261, i32* %6263, align 1, !tbaa !2453
  %6264 = extractelement <2 x i32> %6251, i32 1
  %6265 = getelementptr inbounds i8, i8* %6239, i64 12
  %6266 = bitcast i8* %6265 to i32*
  store i32 %6264, i32* %6266, align 1, !tbaa !2453
  %6267 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6268 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6269 = bitcast %union.vec128_t* %XMM2 to i8*
  %6270 = load i64, i64* %PC
  %6271 = add i64 %6270, 4
  store i64 %6271, i64* %PC
  %6272 = bitcast i8* %6268 to <2 x float>*
  %6273 = load <2 x float>, <2 x float>* %6272, align 1
  %6274 = getelementptr inbounds i8, i8* %6268, i64 8
  %6275 = bitcast i8* %6274 to <2 x i32>*
  %6276 = load <2 x i32>, <2 x i32>* %6275, align 1
  %6277 = bitcast i8* %6269 to <2 x float>*
  %6278 = load <2 x float>, <2 x float>* %6277, align 1
  %6279 = extractelement <2 x float> %6273, i32 0
  %6280 = extractelement <2 x float> %6278, i32 0
  %6281 = fmul float %6279, %6280
  %6282 = bitcast i8* %6267 to float*
  store float %6281, float* %6282, align 1, !tbaa !2453
  %6283 = bitcast <2 x float> %6273 to <2 x i32>
  %6284 = extractelement <2 x i32> %6283, i32 1
  %6285 = getelementptr inbounds i8, i8* %6267, i64 4
  %6286 = bitcast i8* %6285 to i32*
  store i32 %6284, i32* %6286, align 1, !tbaa !2453
  %6287 = extractelement <2 x i32> %6276, i32 0
  %6288 = getelementptr inbounds i8, i8* %6267, i64 8
  %6289 = bitcast i8* %6288 to i32*
  store i32 %6287, i32* %6289, align 1, !tbaa !2453
  %6290 = extractelement <2 x i32> %6276, i32 1
  %6291 = getelementptr inbounds i8, i8* %6267, i64 12
  %6292 = bitcast i8* %6291 to i32*
  store i32 %6290, i32* %6292, align 1, !tbaa !2453
  %6293 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6294 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6295 = bitcast %union.vec128_t* %XMM1 to i8*
  %6296 = load i64, i64* %PC
  %6297 = add i64 %6296, 4
  store i64 %6297, i64* %PC
  %6298 = bitcast i8* %6294 to <2 x float>*
  %6299 = load <2 x float>, <2 x float>* %6298, align 1
  %6300 = getelementptr inbounds i8, i8* %6294, i64 8
  %6301 = bitcast i8* %6300 to <2 x i32>*
  %6302 = load <2 x i32>, <2 x i32>* %6301, align 1
  %6303 = bitcast i8* %6295 to <2 x float>*
  %6304 = load <2 x float>, <2 x float>* %6303, align 1
  %6305 = extractelement <2 x float> %6299, i32 0
  %6306 = extractelement <2 x float> %6304, i32 0
  %6307 = fadd float %6305, %6306
  %6308 = bitcast i8* %6293 to float*
  store float %6307, float* %6308, align 1, !tbaa !2453
  %6309 = bitcast <2 x float> %6299 to <2 x i32>
  %6310 = extractelement <2 x i32> %6309, i32 1
  %6311 = getelementptr inbounds i8, i8* %6293, i64 4
  %6312 = bitcast i8* %6311 to i32*
  store i32 %6310, i32* %6312, align 1, !tbaa !2453
  %6313 = extractelement <2 x i32> %6302, i32 0
  %6314 = getelementptr inbounds i8, i8* %6293, i64 8
  %6315 = bitcast i8* %6314 to i32*
  store i32 %6313, i32* %6315, align 1, !tbaa !2453
  %6316 = extractelement <2 x i32> %6302, i32 1
  %6317 = getelementptr inbounds i8, i8* %6293, i64 12
  %6318 = bitcast i8* %6317 to i32*
  store i32 %6316, i32* %6318, align 1, !tbaa !2453
  %6319 = load i64, i64* %RBP
  %6320 = sub i64 %6319, 24
  %6321 = load i64, i64* %PC
  %6322 = add i64 %6321, 4
  store i64 %6322, i64* %PC
  %6323 = inttoptr i64 %6320 to i64*
  %6324 = load i64, i64* %6323
  store i64 %6324, i64* %RAX, align 8, !tbaa !2428
  %6325 = load i64, i64* %RAX
  %6326 = load i64, i64* %PC
  %6327 = add i64 %6326, 3
  store i64 %6327, i64* %PC
  %6328 = inttoptr i64 %6325 to i64*
  %6329 = load i64, i64* %6328
  store i64 %6329, i64* %RAX, align 8, !tbaa !2428
  %6330 = load i64, i64* %RBP
  %6331 = sub i64 %6330, 24
  %6332 = load i64, i64* %PC
  %6333 = add i64 %6332, 4
  store i64 %6333, i64* %PC
  %6334 = inttoptr i64 %6331 to i64*
  %6335 = load i64, i64* %6334
  store i64 %6335, i64* %RCX, align 8, !tbaa !2428
  %6336 = load i64, i64* %RCX
  %6337 = add i64 %6336, 12
  %6338 = load i64, i64* %PC
  %6339 = add i64 %6338, 3
  store i64 %6339, i64* %PC
  %6340 = inttoptr i64 %6337 to i32*
  %6341 = load i32, i32* %6340
  %6342 = zext i32 %6341 to i64
  store i64 %6342, i64* %RDX, align 8, !tbaa !2428
  %6343 = load i64, i64* %RDX
  %6344 = load i64, i64* %PC
  %6345 = add i64 %6344, 3
  store i64 %6345, i64* %PC
  %6346 = load i64, i64* %RBP
  %6347 = sub i64 %6346, 24
  %6348 = load i64, i64* %PC
  %6349 = add i64 %6348, 4
  store i64 %6349, i64* %PC
  %6350 = inttoptr i64 %6347 to i64*
  %6351 = load i64, i64* %6350
  store i64 %6351, i64* %RCX, align 8, !tbaa !2428
  %6352 = load i64, i64* %RDX
  %6353 = load i64, i64* %RCX
  %6354 = add i64 %6353, 16
  %6355 = load i64, i64* %PC
  %6356 = add i64 %6355, 4
  store i64 %6356, i64* %PC
  %6357 = inttoptr i64 %6354 to i32*
  %6358 = load i32, i32* %6357
  %6359 = shl i64 %6352, 32
  %6360 = ashr exact i64 %6359, 32
  %6361 = sext i32 %6358 to i64
  %6362 = mul nsw i64 %6361, %6360
  %6363 = trunc i64 %6362 to i32
  %6364 = and i64 %6362, 4294967295
  store i64 %6364, i64* %RDX, align 8, !tbaa !2428
  %6365 = shl i64 %6362, 32
  %6366 = ashr exact i64 %6365, 32
  %6367 = icmp ne i64 %6366, %6362
  %6368 = zext i1 %6367 to i8
  %6369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6368, i8* %6369, align 1, !tbaa !2434
  %6370 = and i32 %6363, 255
  %6371 = call i32 @llvm.ctpop.i32(i32 %6370) #16
  %6372 = trunc i32 %6371 to i8
  %6373 = and i8 %6372, 1
  %6374 = xor i8 %6373, 1
  %6375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6374, i8* %6375, align 1, !tbaa !2448
  %6376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6376, align 1, !tbaa !2449
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6377, align 1, !tbaa !2450
  %6378 = lshr i32 %6363, 31
  %6379 = trunc i32 %6378 to i8
  %6380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6379, i8* %6380, align 1, !tbaa !2451
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6368, i8* %6381, align 1, !tbaa !2452
  %6382 = load i64, i64* %RBP
  %6383 = sub i64 %6382, 24
  %6384 = load i64, i64* %PC
  %6385 = add i64 %6384, 4
  store i64 %6385, i64* %PC
  %6386 = inttoptr i64 %6383 to i64*
  %6387 = load i64, i64* %6386
  store i64 %6387, i64* %RCX, align 8, !tbaa !2428
  %6388 = load i64, i64* %RDX
  %6389 = load i64, i64* %RCX
  %6390 = add i64 %6389, 20
  %6391 = load i64, i64* %PC
  %6392 = add i64 %6391, 4
  store i64 %6392, i64* %PC
  %6393 = inttoptr i64 %6390 to i32*
  %6394 = load i32, i32* %6393
  %6395 = shl i64 %6388, 32
  %6396 = ashr exact i64 %6395, 32
  %6397 = sext i32 %6394 to i64
  %6398 = mul nsw i64 %6397, %6396
  %6399 = trunc i64 %6398 to i32
  %6400 = and i64 %6398, 4294967295
  store i64 %6400, i64* %RDX, align 8, !tbaa !2428
  %6401 = shl i64 %6398, 32
  %6402 = ashr exact i64 %6401, 32
  %6403 = icmp ne i64 %6402, %6398
  %6404 = zext i1 %6403 to i8
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6404, i8* %6405, align 1, !tbaa !2434
  %6406 = and i32 %6399, 255
  %6407 = call i32 @llvm.ctpop.i32(i32 %6406) #16
  %6408 = trunc i32 %6407 to i8
  %6409 = and i8 %6408, 1
  %6410 = xor i8 %6409, 1
  %6411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6410, i8* %6411, align 1, !tbaa !2448
  %6412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6412, align 1, !tbaa !2449
  %6413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6413, align 1, !tbaa !2450
  %6414 = lshr i32 %6399, 31
  %6415 = trunc i32 %6414 to i8
  %6416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6415, i8* %6416, align 1, !tbaa !2451
  %6417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6404, i8* %6417, align 1, !tbaa !2452
  %6418 = load i64, i64* %RBP
  %6419 = sub i64 %6418, 68
  %6420 = load i64, i64* %PC
  %6421 = add i64 %6420, 3
  store i64 %6421, i64* %PC
  %6422 = inttoptr i64 %6419 to i32*
  %6423 = load i32, i32* %6422
  %6424 = zext i32 %6423 to i64
  store i64 %6424, i64* %RSI, align 8, !tbaa !2428
  %6425 = load i64, i64* %RBP
  %6426 = sub i64 %6425, 24
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 4
  store i64 %6428, i64* %PC
  %6429 = inttoptr i64 %6426 to i64*
  %6430 = load i64, i64* %6429
  store i64 %6430, i64* %RCX, align 8, !tbaa !2428
  %6431 = load i64, i64* %RSI
  %6432 = load i64, i64* %RCX
  %6433 = add i64 %6432, 16
  %6434 = load i64, i64* %PC
  %6435 = add i64 %6434, 4
  store i64 %6435, i64* %PC
  %6436 = inttoptr i64 %6433 to i32*
  %6437 = load i32, i32* %6436
  %6438 = shl i64 %6431, 32
  %6439 = ashr exact i64 %6438, 32
  %6440 = sext i32 %6437 to i64
  %6441 = mul nsw i64 %6440, %6439
  %6442 = trunc i64 %6441 to i32
  %6443 = and i64 %6441, 4294967295
  store i64 %6443, i64* %RSI, align 8, !tbaa !2428
  %6444 = shl i64 %6441, 32
  %6445 = ashr exact i64 %6444, 32
  %6446 = icmp ne i64 %6445, %6441
  %6447 = zext i1 %6446 to i8
  %6448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6447, i8* %6448, align 1, !tbaa !2434
  %6449 = and i32 %6442, 255
  %6450 = call i32 @llvm.ctpop.i32(i32 %6449) #16
  %6451 = trunc i32 %6450 to i8
  %6452 = and i8 %6451, 1
  %6453 = xor i8 %6452, 1
  %6454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6453, i8* %6454, align 1, !tbaa !2448
  %6455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6455, align 1, !tbaa !2449
  %6456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6456, align 1, !tbaa !2450
  %6457 = lshr i32 %6442, 31
  %6458 = trunc i32 %6457 to i8
  %6459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6458, i8* %6459, align 1, !tbaa !2451
  %6460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6447, i8* %6460, align 1, !tbaa !2452
  %6461 = load i64, i64* %RBP
  %6462 = sub i64 %6461, 24
  %6463 = load i64, i64* %PC
  %6464 = add i64 %6463, 4
  store i64 %6464, i64* %PC
  %6465 = inttoptr i64 %6462 to i64*
  %6466 = load i64, i64* %6465
  store i64 %6466, i64* %RCX, align 8, !tbaa !2428
  %6467 = load i64, i64* %RSI
  %6468 = load i64, i64* %RCX
  %6469 = add i64 %6468, 20
  %6470 = load i64, i64* %PC
  %6471 = add i64 %6470, 4
  store i64 %6471, i64* %PC
  %6472 = inttoptr i64 %6469 to i32*
  %6473 = load i32, i32* %6472
  %6474 = shl i64 %6467, 32
  %6475 = ashr exact i64 %6474, 32
  %6476 = sext i32 %6473 to i64
  %6477 = mul nsw i64 %6476, %6475
  %6478 = trunc i64 %6477 to i32
  %6479 = and i64 %6477, 4294967295
  store i64 %6479, i64* %RSI, align 8, !tbaa !2428
  %6480 = shl i64 %6477, 32
  %6481 = ashr exact i64 %6480, 32
  %6482 = icmp ne i64 %6481, %6477
  %6483 = zext i1 %6482 to i8
  %6484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6483, i8* %6484, align 1, !tbaa !2434
  %6485 = and i32 %6478, 255
  %6486 = call i32 @llvm.ctpop.i32(i32 %6485) #16
  %6487 = trunc i32 %6486 to i8
  %6488 = and i8 %6487, 1
  %6489 = xor i8 %6488, 1
  %6490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6489, i8* %6490, align 1, !tbaa !2448
  %6491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6491, align 1, !tbaa !2449
  %6492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6492, align 1, !tbaa !2450
  %6493 = lshr i32 %6478, 31
  %6494 = trunc i32 %6493 to i8
  %6495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6494, i8* %6495, align 1, !tbaa !2451
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6483, i8* %6496, align 1, !tbaa !2452
  %6497 = load i64, i64* %RDX
  %6498 = load i32, i32* %ESI
  %6499 = zext i32 %6498 to i64
  %6500 = load i64, i64* %PC
  %6501 = add i64 %6500, 2
  store i64 %6501, i64* %PC
  %6502 = trunc i64 %6497 to i32
  %6503 = add i32 %6498, %6502
  %6504 = zext i32 %6503 to i64
  store i64 %6504, i64* %RDX, align 8, !tbaa !2428
  %6505 = icmp ult i32 %6503, %6502
  %6506 = icmp ult i32 %6503, %6498
  %6507 = or i1 %6505, %6506
  %6508 = zext i1 %6507 to i8
  %6509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6508, i8* %6509, align 1, !tbaa !2434
  %6510 = and i32 %6503, 255
  %6511 = call i32 @llvm.ctpop.i32(i32 %6510) #16
  %6512 = trunc i32 %6511 to i8
  %6513 = and i8 %6512, 1
  %6514 = xor i8 %6513, 1
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6514, i8* %6515, align 1, !tbaa !2448
  %6516 = xor i64 %6499, %6497
  %6517 = trunc i64 %6516 to i32
  %6518 = xor i32 %6517, %6503
  %6519 = lshr i32 %6518, 4
  %6520 = trunc i32 %6519 to i8
  %6521 = and i8 %6520, 1
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6521, i8* %6522, align 1, !tbaa !2449
  %6523 = icmp eq i32 %6503, 0
  %6524 = zext i1 %6523 to i8
  %6525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6524, i8* %6525, align 1, !tbaa !2450
  %6526 = lshr i32 %6503, 31
  %6527 = trunc i32 %6526 to i8
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6527, i8* %6528, align 1, !tbaa !2451
  %6529 = lshr i32 %6502, 31
  %6530 = lshr i32 %6498, 31
  %6531 = xor i32 %6526, %6529
  %6532 = xor i32 %6526, %6530
  %6533 = add nuw nsw i32 %6531, %6532
  %6534 = icmp eq i32 %6533, 2
  %6535 = zext i1 %6534 to i8
  %6536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6535, i8* %6536, align 1, !tbaa !2452
  %6537 = load i64, i64* %RBP
  %6538 = sub i64 %6537, 72
  %6539 = load i64, i64* %PC
  %6540 = add i64 %6539, 3
  store i64 %6540, i64* %PC
  %6541 = inttoptr i64 %6538 to i32*
  %6542 = load i32, i32* %6541
  %6543 = zext i32 %6542 to i64
  store i64 %6543, i64* %RSI, align 8, !tbaa !2428
  %6544 = load i64, i64* %RBP
  %6545 = sub i64 %6544, 24
  %6546 = load i64, i64* %PC
  %6547 = add i64 %6546, 4
  store i64 %6547, i64* %PC
  %6548 = inttoptr i64 %6545 to i64*
  %6549 = load i64, i64* %6548
  store i64 %6549, i64* %RCX, align 8, !tbaa !2428
  %6550 = load i64, i64* %RSI
  %6551 = load i64, i64* %RCX
  %6552 = add i64 %6551, 20
  %6553 = load i64, i64* %PC
  %6554 = add i64 %6553, 4
  store i64 %6554, i64* %PC
  %6555 = inttoptr i64 %6552 to i32*
  %6556 = load i32, i32* %6555
  %6557 = shl i64 %6550, 32
  %6558 = ashr exact i64 %6557, 32
  %6559 = sext i32 %6556 to i64
  %6560 = mul nsw i64 %6559, %6558
  %6561 = trunc i64 %6560 to i32
  %6562 = and i64 %6560, 4294967295
  store i64 %6562, i64* %RSI, align 8, !tbaa !2428
  %6563 = shl i64 %6560, 32
  %6564 = ashr exact i64 %6563, 32
  %6565 = icmp ne i64 %6564, %6560
  %6566 = zext i1 %6565 to i8
  %6567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6566, i8* %6567, align 1, !tbaa !2434
  %6568 = and i32 %6561, 255
  %6569 = call i32 @llvm.ctpop.i32(i32 %6568) #16
  %6570 = trunc i32 %6569 to i8
  %6571 = and i8 %6570, 1
  %6572 = xor i8 %6571, 1
  %6573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6572, i8* %6573, align 1, !tbaa !2448
  %6574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6574, align 1, !tbaa !2449
  %6575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6575, align 1, !tbaa !2450
  %6576 = lshr i32 %6561, 31
  %6577 = trunc i32 %6576 to i8
  %6578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6577, i8* %6578, align 1, !tbaa !2451
  %6579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6566, i8* %6579, align 1, !tbaa !2452
  %6580 = load i64, i64* %RDX
  %6581 = load i32, i32* %ESI
  %6582 = zext i32 %6581 to i64
  %6583 = load i64, i64* %PC
  %6584 = add i64 %6583, 2
  store i64 %6584, i64* %PC
  %6585 = trunc i64 %6580 to i32
  %6586 = add i32 %6581, %6585
  %6587 = zext i32 %6586 to i64
  store i64 %6587, i64* %RDX, align 8, !tbaa !2428
  %6588 = icmp ult i32 %6586, %6585
  %6589 = icmp ult i32 %6586, %6581
  %6590 = or i1 %6588, %6589
  %6591 = zext i1 %6590 to i8
  %6592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6591, i8* %6592, align 1, !tbaa !2434
  %6593 = and i32 %6586, 255
  %6594 = call i32 @llvm.ctpop.i32(i32 %6593) #16
  %6595 = trunc i32 %6594 to i8
  %6596 = and i8 %6595, 1
  %6597 = xor i8 %6596, 1
  %6598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6597, i8* %6598, align 1, !tbaa !2448
  %6599 = xor i64 %6582, %6580
  %6600 = trunc i64 %6599 to i32
  %6601 = xor i32 %6600, %6586
  %6602 = lshr i32 %6601, 4
  %6603 = trunc i32 %6602 to i8
  %6604 = and i8 %6603, 1
  %6605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6604, i8* %6605, align 1, !tbaa !2449
  %6606 = icmp eq i32 %6586, 0
  %6607 = zext i1 %6606 to i8
  %6608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6607, i8* %6608, align 1, !tbaa !2450
  %6609 = lshr i32 %6586, 31
  %6610 = trunc i32 %6609 to i8
  %6611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6610, i8* %6611, align 1, !tbaa !2451
  %6612 = lshr i32 %6585, 31
  %6613 = lshr i32 %6581, 31
  %6614 = xor i32 %6609, %6612
  %6615 = xor i32 %6609, %6613
  %6616 = add nuw nsw i32 %6614, %6615
  %6617 = icmp eq i32 %6616, 2
  %6618 = zext i1 %6617 to i8
  %6619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6618, i8* %6619, align 1, !tbaa !2452
  %6620 = load i64, i64* %RDX
  %6621 = load i64, i64* %RBP
  %6622 = sub i64 %6621, 76
  %6623 = load i64, i64* %PC
  %6624 = add i64 %6623, 3
  store i64 %6624, i64* %PC
  %6625 = trunc i64 %6620 to i32
  %6626 = inttoptr i64 %6622 to i32*
  %6627 = load i32, i32* %6626
  %6628 = add i32 %6627, %6625
  %6629 = zext i32 %6628 to i64
  store i64 %6629, i64* %RDX, align 8, !tbaa !2428
  %6630 = icmp ult i32 %6628, %6625
  %6631 = icmp ult i32 %6628, %6627
  %6632 = or i1 %6630, %6631
  %6633 = zext i1 %6632 to i8
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6633, i8* %6634, align 1, !tbaa !2434
  %6635 = and i32 %6628, 255
  %6636 = call i32 @llvm.ctpop.i32(i32 %6635) #16
  %6637 = trunc i32 %6636 to i8
  %6638 = and i8 %6637, 1
  %6639 = xor i8 %6638, 1
  %6640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6639, i8* %6640, align 1, !tbaa !2448
  %6641 = xor i32 %6627, %6625
  %6642 = xor i32 %6641, %6628
  %6643 = lshr i32 %6642, 4
  %6644 = trunc i32 %6643 to i8
  %6645 = and i8 %6644, 1
  %6646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6645, i8* %6646, align 1, !tbaa !2449
  %6647 = icmp eq i32 %6628, 0
  %6648 = zext i1 %6647 to i8
  %6649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6648, i8* %6649, align 1, !tbaa !2450
  %6650 = lshr i32 %6628, 31
  %6651 = trunc i32 %6650 to i8
  %6652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6651, i8* %6652, align 1, !tbaa !2451
  %6653 = lshr i32 %6625, 31
  %6654 = lshr i32 %6627, 31
  %6655 = xor i32 %6650, %6653
  %6656 = xor i32 %6650, %6654
  %6657 = add nuw nsw i32 %6655, %6656
  %6658 = icmp eq i32 %6657, 2
  %6659 = zext i1 %6658 to i8
  %6660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6659, i8* %6660, align 1, !tbaa !2452
  %6661 = load i32, i32* %EDX
  %6662 = zext i32 %6661 to i64
  %6663 = load i64, i64* %PC
  %6664 = add i64 %6663, 3
  store i64 %6664, i64* %PC
  %6665 = shl i64 %6662, 32
  %6666 = ashr exact i64 %6665, 32
  store i64 %6666, i64* %RCX, align 8, !tbaa !2428
  %6667 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6668 = load i64, i64* %RAX
  %6669 = load i64, i64* %RCX
  %6670 = mul i64 %6669, 4
  %6671 = add i64 %6670, %6668
  %6672 = load i64, i64* %PC
  %6673 = add i64 %6672, 5
  store i64 %6673, i64* %PC
  %6674 = inttoptr i64 %6671 to float*
  %6675 = load float, float* %6674
  %6676 = bitcast i8* %6667 to float*
  store float %6675, float* %6676, align 1, !tbaa !2453
  %6677 = getelementptr inbounds i8, i8* %6667, i64 4
  %6678 = bitcast i8* %6677 to float*
  store float 0.000000e+00, float* %6678, align 1, !tbaa !2453
  %6679 = getelementptr inbounds i8, i8* %6667, i64 8
  %6680 = bitcast i8* %6679 to float*
  store float 0.000000e+00, float* %6680, align 1, !tbaa !2453
  %6681 = getelementptr inbounds i8, i8* %6667, i64 12
  %6682 = bitcast i8* %6681 to float*
  store float 0.000000e+00, float* %6682, align 1, !tbaa !2453
  %6683 = load i64, i64* %RBP
  %6684 = sub i64 %6683, 40
  %6685 = load i64, i64* %PC
  %6686 = add i64 %6685, 4
  store i64 %6686, i64* %PC
  %6687 = inttoptr i64 %6684 to i64*
  %6688 = load i64, i64* %6687
  store i64 %6688, i64* %RAX, align 8, !tbaa !2428
  %6689 = load i64, i64* %RAX
  %6690 = load i64, i64* %PC
  %6691 = add i64 %6690, 3
  store i64 %6691, i64* %PC
  %6692 = inttoptr i64 %6689 to i64*
  %6693 = load i64, i64* %6692
  store i64 %6693, i64* %RAX, align 8, !tbaa !2428
  %6694 = load i64, i64* %RBP
  %6695 = sub i64 %6694, 40
  %6696 = load i64, i64* %PC
  %6697 = add i64 %6696, 4
  store i64 %6697, i64* %PC
  %6698 = inttoptr i64 %6695 to i64*
  %6699 = load i64, i64* %6698
  store i64 %6699, i64* %RCX, align 8, !tbaa !2428
  %6700 = load i64, i64* %RCX
  %6701 = add i64 %6700, 12
  %6702 = load i64, i64* %PC
  %6703 = add i64 %6702, 4
  store i64 %6703, i64* %PC
  %6704 = inttoptr i64 %6701 to i32*
  %6705 = load i32, i32* %6704
  %6706 = sext i32 %6705 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %6707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6707, align 1, !tbaa !2434
  %6708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6708, align 1, !tbaa !2448
  %6709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6709, align 1, !tbaa !2449
  %6710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6710, align 1, !tbaa !2450
  %6711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6711, align 1, !tbaa !2451
  %6712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6712, align 1, !tbaa !2452
  %6713 = load i64, i64* %RBP
  %6714 = sub i64 %6713, 40
  %6715 = load i64, i64* %PC
  %6716 = add i64 %6715, 4
  store i64 %6716, i64* %PC
  %6717 = inttoptr i64 %6714 to i64*
  %6718 = load i64, i64* %6717
  store i64 %6718, i64* %RCX, align 8, !tbaa !2428
  %6719 = load i64, i64* %RDX
  %6720 = load i64, i64* %RCX
  %6721 = add i64 %6720, 16
  %6722 = load i64, i64* %PC
  %6723 = add i64 %6722, 4
  store i64 %6723, i64* %PC
  %6724 = inttoptr i64 %6721 to i32*
  %6725 = load i32, i32* %6724
  %6726 = shl i64 %6719, 32
  %6727 = ashr exact i64 %6726, 32
  %6728 = sext i32 %6725 to i64
  %6729 = mul nsw i64 %6728, %6727
  %6730 = trunc i64 %6729 to i32
  %6731 = and i64 %6729, 4294967295
  store i64 %6731, i64* %RDX, align 8, !tbaa !2428
  %6732 = shl i64 %6729, 32
  %6733 = ashr exact i64 %6732, 32
  %6734 = icmp ne i64 %6733, %6729
  %6735 = zext i1 %6734 to i8
  %6736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6735, i8* %6736, align 1, !tbaa !2434
  %6737 = and i32 %6730, 255
  %6738 = call i32 @llvm.ctpop.i32(i32 %6737) #16
  %6739 = trunc i32 %6738 to i8
  %6740 = and i8 %6739, 1
  %6741 = xor i8 %6740, 1
  %6742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6741, i8* %6742, align 1, !tbaa !2448
  %6743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6743, align 1, !tbaa !2449
  %6744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6744, align 1, !tbaa !2450
  %6745 = lshr i32 %6730, 31
  %6746 = trunc i32 %6745 to i8
  %6747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6746, i8* %6747, align 1, !tbaa !2451
  %6748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6735, i8* %6748, align 1, !tbaa !2452
  %6749 = load i64, i64* %RBP
  %6750 = sub i64 %6749, 40
  %6751 = load i64, i64* %PC
  %6752 = add i64 %6751, 4
  store i64 %6752, i64* %PC
  %6753 = inttoptr i64 %6750 to i64*
  %6754 = load i64, i64* %6753
  store i64 %6754, i64* %RCX, align 8, !tbaa !2428
  %6755 = load i64, i64* %RDX
  %6756 = load i64, i64* %RCX
  %6757 = add i64 %6756, 20
  %6758 = load i64, i64* %PC
  %6759 = add i64 %6758, 4
  store i64 %6759, i64* %PC
  %6760 = inttoptr i64 %6757 to i32*
  %6761 = load i32, i32* %6760
  %6762 = shl i64 %6755, 32
  %6763 = ashr exact i64 %6762, 32
  %6764 = sext i32 %6761 to i64
  %6765 = mul nsw i64 %6764, %6763
  %6766 = trunc i64 %6765 to i32
  %6767 = and i64 %6765, 4294967295
  store i64 %6767, i64* %RDX, align 8, !tbaa !2428
  %6768 = shl i64 %6765, 32
  %6769 = ashr exact i64 %6768, 32
  %6770 = icmp ne i64 %6769, %6765
  %6771 = zext i1 %6770 to i8
  %6772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6771, i8* %6772, align 1, !tbaa !2434
  %6773 = and i32 %6766, 255
  %6774 = call i32 @llvm.ctpop.i32(i32 %6773) #16
  %6775 = trunc i32 %6774 to i8
  %6776 = and i8 %6775, 1
  %6777 = xor i8 %6776, 1
  %6778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6777, i8* %6778, align 1, !tbaa !2448
  %6779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6779, align 1, !tbaa !2449
  %6780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6780, align 1, !tbaa !2450
  %6781 = lshr i32 %6766, 31
  %6782 = trunc i32 %6781 to i8
  %6783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6782, i8* %6783, align 1, !tbaa !2451
  %6784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6771, i8* %6784, align 1, !tbaa !2452
  %6785 = load i64, i64* %RBP
  %6786 = sub i64 %6785, 68
  %6787 = load i64, i64* %PC
  %6788 = add i64 %6787, 3
  store i64 %6788, i64* %PC
  %6789 = inttoptr i64 %6786 to i32*
  %6790 = load i32, i32* %6789
  %6791 = zext i32 %6790 to i64
  store i64 %6791, i64* %RSI, align 8, !tbaa !2428
  %6792 = load i64, i64* %RBP
  %6793 = sub i64 %6792, 40
  %6794 = load i64, i64* %PC
  %6795 = add i64 %6794, 4
  store i64 %6795, i64* %PC
  %6796 = inttoptr i64 %6793 to i64*
  %6797 = load i64, i64* %6796
  store i64 %6797, i64* %RCX, align 8, !tbaa !2428
  %6798 = load i64, i64* %RSI
  %6799 = load i64, i64* %RCX
  %6800 = add i64 %6799, 16
  %6801 = load i64, i64* %PC
  %6802 = add i64 %6801, 4
  store i64 %6802, i64* %PC
  %6803 = inttoptr i64 %6800 to i32*
  %6804 = load i32, i32* %6803
  %6805 = shl i64 %6798, 32
  %6806 = ashr exact i64 %6805, 32
  %6807 = sext i32 %6804 to i64
  %6808 = mul nsw i64 %6807, %6806
  %6809 = trunc i64 %6808 to i32
  %6810 = and i64 %6808, 4294967295
  store i64 %6810, i64* %RSI, align 8, !tbaa !2428
  %6811 = shl i64 %6808, 32
  %6812 = ashr exact i64 %6811, 32
  %6813 = icmp ne i64 %6812, %6808
  %6814 = zext i1 %6813 to i8
  %6815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6814, i8* %6815, align 1, !tbaa !2434
  %6816 = and i32 %6809, 255
  %6817 = call i32 @llvm.ctpop.i32(i32 %6816) #16
  %6818 = trunc i32 %6817 to i8
  %6819 = and i8 %6818, 1
  %6820 = xor i8 %6819, 1
  %6821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6820, i8* %6821, align 1, !tbaa !2448
  %6822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6822, align 1, !tbaa !2449
  %6823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6823, align 1, !tbaa !2450
  %6824 = lshr i32 %6809, 31
  %6825 = trunc i32 %6824 to i8
  %6826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6825, i8* %6826, align 1, !tbaa !2451
  %6827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6814, i8* %6827, align 1, !tbaa !2452
  %6828 = load i64, i64* %RBP
  %6829 = sub i64 %6828, 40
  %6830 = load i64, i64* %PC
  %6831 = add i64 %6830, 4
  store i64 %6831, i64* %PC
  %6832 = inttoptr i64 %6829 to i64*
  %6833 = load i64, i64* %6832
  store i64 %6833, i64* %RCX, align 8, !tbaa !2428
  %6834 = load i64, i64* %RSI
  %6835 = load i64, i64* %RCX
  %6836 = add i64 %6835, 20
  %6837 = load i64, i64* %PC
  %6838 = add i64 %6837, 4
  store i64 %6838, i64* %PC
  %6839 = inttoptr i64 %6836 to i32*
  %6840 = load i32, i32* %6839
  %6841 = shl i64 %6834, 32
  %6842 = ashr exact i64 %6841, 32
  %6843 = sext i32 %6840 to i64
  %6844 = mul nsw i64 %6843, %6842
  %6845 = trunc i64 %6844 to i32
  %6846 = and i64 %6844, 4294967295
  store i64 %6846, i64* %RSI, align 8, !tbaa !2428
  %6847 = shl i64 %6844, 32
  %6848 = ashr exact i64 %6847, 32
  %6849 = icmp ne i64 %6848, %6844
  %6850 = zext i1 %6849 to i8
  %6851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6850, i8* %6851, align 1, !tbaa !2434
  %6852 = and i32 %6845, 255
  %6853 = call i32 @llvm.ctpop.i32(i32 %6852) #16
  %6854 = trunc i32 %6853 to i8
  %6855 = and i8 %6854, 1
  %6856 = xor i8 %6855, 1
  %6857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6856, i8* %6857, align 1, !tbaa !2448
  %6858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6858, align 1, !tbaa !2449
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6859, align 1, !tbaa !2450
  %6860 = lshr i32 %6845, 31
  %6861 = trunc i32 %6860 to i8
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6861, i8* %6862, align 1, !tbaa !2451
  %6863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6850, i8* %6863, align 1, !tbaa !2452
  %6864 = load i64, i64* %RDX
  %6865 = load i32, i32* %ESI
  %6866 = zext i32 %6865 to i64
  %6867 = load i64, i64* %PC
  %6868 = add i64 %6867, 2
  store i64 %6868, i64* %PC
  %6869 = trunc i64 %6864 to i32
  %6870 = add i32 %6865, %6869
  %6871 = zext i32 %6870 to i64
  store i64 %6871, i64* %RDX, align 8, !tbaa !2428
  %6872 = icmp ult i32 %6870, %6869
  %6873 = icmp ult i32 %6870, %6865
  %6874 = or i1 %6872, %6873
  %6875 = zext i1 %6874 to i8
  %6876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6875, i8* %6876, align 1, !tbaa !2434
  %6877 = and i32 %6870, 255
  %6878 = call i32 @llvm.ctpop.i32(i32 %6877) #16
  %6879 = trunc i32 %6878 to i8
  %6880 = and i8 %6879, 1
  %6881 = xor i8 %6880, 1
  %6882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6881, i8* %6882, align 1, !tbaa !2448
  %6883 = xor i64 %6866, %6864
  %6884 = trunc i64 %6883 to i32
  %6885 = xor i32 %6884, %6870
  %6886 = lshr i32 %6885, 4
  %6887 = trunc i32 %6886 to i8
  %6888 = and i8 %6887, 1
  %6889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6888, i8* %6889, align 1, !tbaa !2449
  %6890 = icmp eq i32 %6870, 0
  %6891 = zext i1 %6890 to i8
  %6892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6891, i8* %6892, align 1, !tbaa !2450
  %6893 = lshr i32 %6870, 31
  %6894 = trunc i32 %6893 to i8
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6894, i8* %6895, align 1, !tbaa !2451
  %6896 = lshr i32 %6869, 31
  %6897 = lshr i32 %6865, 31
  %6898 = xor i32 %6893, %6896
  %6899 = xor i32 %6893, %6897
  %6900 = add nuw nsw i32 %6898, %6899
  %6901 = icmp eq i32 %6900, 2
  %6902 = zext i1 %6901 to i8
  %6903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6902, i8* %6903, align 1, !tbaa !2452
  %6904 = load i64, i64* %RBP
  %6905 = sub i64 %6904, 72
  %6906 = load i64, i64* %PC
  %6907 = add i64 %6906, 3
  store i64 %6907, i64* %PC
  %6908 = inttoptr i64 %6905 to i32*
  %6909 = load i32, i32* %6908
  %6910 = zext i32 %6909 to i64
  store i64 %6910, i64* %RSI, align 8, !tbaa !2428
  %6911 = load i64, i64* %RSI
  %6912 = load i64, i64* %PC
  %6913 = add i64 %6912, 3
  store i64 %6913, i64* %PC
  %6914 = trunc i64 %6911 to i32
  %6915 = add i32 1, %6914
  %6916 = zext i32 %6915 to i64
  store i64 %6916, i64* %RSI, align 8, !tbaa !2428
  %6917 = icmp ult i32 %6915, %6914
  %6918 = icmp ult i32 %6915, 1
  %6919 = or i1 %6917, %6918
  %6920 = zext i1 %6919 to i8
  %6921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6920, i8* %6921, align 1, !tbaa !2434
  %6922 = and i32 %6915, 255
  %6923 = call i32 @llvm.ctpop.i32(i32 %6922) #16
  %6924 = trunc i32 %6923 to i8
  %6925 = and i8 %6924, 1
  %6926 = xor i8 %6925, 1
  %6927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6926, i8* %6927, align 1, !tbaa !2448
  %6928 = xor i64 1, %6911
  %6929 = trunc i64 %6928 to i32
  %6930 = xor i32 %6929, %6915
  %6931 = lshr i32 %6930, 4
  %6932 = trunc i32 %6931 to i8
  %6933 = and i8 %6932, 1
  %6934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6933, i8* %6934, align 1, !tbaa !2449
  %6935 = icmp eq i32 %6915, 0
  %6936 = zext i1 %6935 to i8
  %6937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6936, i8* %6937, align 1, !tbaa !2450
  %6938 = lshr i32 %6915, 31
  %6939 = trunc i32 %6938 to i8
  %6940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6939, i8* %6940, align 1, !tbaa !2451
  %6941 = lshr i32 %6914, 31
  %6942 = xor i32 %6938, %6941
  %6943 = add nuw nsw i32 %6942, %6938
  %6944 = icmp eq i32 %6943, 2
  %6945 = zext i1 %6944 to i8
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6945, i8* %6946, align 1, !tbaa !2452
  %6947 = load i64, i64* %RBP
  %6948 = sub i64 %6947, 40
  %6949 = load i64, i64* %PC
  %6950 = add i64 %6949, 4
  store i64 %6950, i64* %PC
  %6951 = inttoptr i64 %6948 to i64*
  %6952 = load i64, i64* %6951
  store i64 %6952, i64* %RCX, align 8, !tbaa !2428
  %6953 = load i64, i64* %RSI
  %6954 = load i64, i64* %RCX
  %6955 = add i64 %6954, 20
  %6956 = load i64, i64* %PC
  %6957 = add i64 %6956, 4
  store i64 %6957, i64* %PC
  %6958 = inttoptr i64 %6955 to i32*
  %6959 = load i32, i32* %6958
  %6960 = shl i64 %6953, 32
  %6961 = ashr exact i64 %6960, 32
  %6962 = sext i32 %6959 to i64
  %6963 = mul nsw i64 %6962, %6961
  %6964 = trunc i64 %6963 to i32
  %6965 = and i64 %6963, 4294967295
  store i64 %6965, i64* %RSI, align 8, !tbaa !2428
  %6966 = shl i64 %6963, 32
  %6967 = ashr exact i64 %6966, 32
  %6968 = icmp ne i64 %6967, %6963
  %6969 = zext i1 %6968 to i8
  %6970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6969, i8* %6970, align 1, !tbaa !2434
  %6971 = and i32 %6964, 255
  %6972 = call i32 @llvm.ctpop.i32(i32 %6971) #16
  %6973 = trunc i32 %6972 to i8
  %6974 = and i8 %6973, 1
  %6975 = xor i8 %6974, 1
  %6976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6975, i8* %6976, align 1, !tbaa !2448
  %6977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6977, align 1, !tbaa !2449
  %6978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %6978, align 1, !tbaa !2450
  %6979 = lshr i32 %6964, 31
  %6980 = trunc i32 %6979 to i8
  %6981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6980, i8* %6981, align 1, !tbaa !2451
  %6982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6969, i8* %6982, align 1, !tbaa !2452
  %6983 = load i64, i64* %RDX
  %6984 = load i32, i32* %ESI
  %6985 = zext i32 %6984 to i64
  %6986 = load i64, i64* %PC
  %6987 = add i64 %6986, 2
  store i64 %6987, i64* %PC
  %6988 = trunc i64 %6983 to i32
  %6989 = add i32 %6984, %6988
  %6990 = zext i32 %6989 to i64
  store i64 %6990, i64* %RDX, align 8, !tbaa !2428
  %6991 = icmp ult i32 %6989, %6988
  %6992 = icmp ult i32 %6989, %6984
  %6993 = or i1 %6991, %6992
  %6994 = zext i1 %6993 to i8
  %6995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6994, i8* %6995, align 1, !tbaa !2434
  %6996 = and i32 %6989, 255
  %6997 = call i32 @llvm.ctpop.i32(i32 %6996) #16
  %6998 = trunc i32 %6997 to i8
  %6999 = and i8 %6998, 1
  %7000 = xor i8 %6999, 1
  %7001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7000, i8* %7001, align 1, !tbaa !2448
  %7002 = xor i64 %6985, %6983
  %7003 = trunc i64 %7002 to i32
  %7004 = xor i32 %7003, %6989
  %7005 = lshr i32 %7004, 4
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  %7008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7007, i8* %7008, align 1, !tbaa !2449
  %7009 = icmp eq i32 %6989, 0
  %7010 = zext i1 %7009 to i8
  %7011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7010, i8* %7011, align 1, !tbaa !2450
  %7012 = lshr i32 %6989, 31
  %7013 = trunc i32 %7012 to i8
  %7014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7013, i8* %7014, align 1, !tbaa !2451
  %7015 = lshr i32 %6988, 31
  %7016 = lshr i32 %6984, 31
  %7017 = xor i32 %7012, %7015
  %7018 = xor i32 %7012, %7016
  %7019 = add nuw nsw i32 %7017, %7018
  %7020 = icmp eq i32 %7019, 2
  %7021 = zext i1 %7020 to i8
  %7022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7021, i8* %7022, align 1, !tbaa !2452
  %7023 = load i64, i64* %RBP
  %7024 = sub i64 %7023, 76
  %7025 = load i64, i64* %PC
  %7026 = add i64 %7025, 3
  store i64 %7026, i64* %PC
  %7027 = inttoptr i64 %7024 to i32*
  %7028 = load i32, i32* %7027
  %7029 = zext i32 %7028 to i64
  store i64 %7029, i64* %RSI, align 8, !tbaa !2428
  %7030 = load i64, i64* %RSI
  %7031 = load i64, i64* %PC
  %7032 = add i64 %7031, 3
  store i64 %7032, i64* %PC
  %7033 = trunc i64 %7030 to i32
  %7034 = add i32 1, %7033
  %7035 = zext i32 %7034 to i64
  store i64 %7035, i64* %RSI, align 8, !tbaa !2428
  %7036 = icmp ult i32 %7034, %7033
  %7037 = icmp ult i32 %7034, 1
  %7038 = or i1 %7036, %7037
  %7039 = zext i1 %7038 to i8
  %7040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7039, i8* %7040, align 1, !tbaa !2434
  %7041 = and i32 %7034, 255
  %7042 = call i32 @llvm.ctpop.i32(i32 %7041) #16
  %7043 = trunc i32 %7042 to i8
  %7044 = and i8 %7043, 1
  %7045 = xor i8 %7044, 1
  %7046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7045, i8* %7046, align 1, !tbaa !2448
  %7047 = xor i64 1, %7030
  %7048 = trunc i64 %7047 to i32
  %7049 = xor i32 %7048, %7034
  %7050 = lshr i32 %7049, 4
  %7051 = trunc i32 %7050 to i8
  %7052 = and i8 %7051, 1
  %7053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7052, i8* %7053, align 1, !tbaa !2449
  %7054 = icmp eq i32 %7034, 0
  %7055 = zext i1 %7054 to i8
  %7056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7055, i8* %7056, align 1, !tbaa !2450
  %7057 = lshr i32 %7034, 31
  %7058 = trunc i32 %7057 to i8
  %7059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7058, i8* %7059, align 1, !tbaa !2451
  %7060 = lshr i32 %7033, 31
  %7061 = xor i32 %7057, %7060
  %7062 = add nuw nsw i32 %7061, %7057
  %7063 = icmp eq i32 %7062, 2
  %7064 = zext i1 %7063 to i8
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7064, i8* %7065, align 1, !tbaa !2452
  %7066 = load i64, i64* %RDX
  %7067 = load i32, i32* %ESI
  %7068 = zext i32 %7067 to i64
  %7069 = load i64, i64* %PC
  %7070 = add i64 %7069, 2
  store i64 %7070, i64* %PC
  %7071 = trunc i64 %7066 to i32
  %7072 = add i32 %7067, %7071
  %7073 = zext i32 %7072 to i64
  store i64 %7073, i64* %RDX, align 8, !tbaa !2428
  %7074 = icmp ult i32 %7072, %7071
  %7075 = icmp ult i32 %7072, %7067
  %7076 = or i1 %7074, %7075
  %7077 = zext i1 %7076 to i8
  %7078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7077, i8* %7078, align 1, !tbaa !2434
  %7079 = and i32 %7072, 255
  %7080 = call i32 @llvm.ctpop.i32(i32 %7079) #16
  %7081 = trunc i32 %7080 to i8
  %7082 = and i8 %7081, 1
  %7083 = xor i8 %7082, 1
  %7084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7083, i8* %7084, align 1, !tbaa !2448
  %7085 = xor i64 %7068, %7066
  %7086 = trunc i64 %7085 to i32
  %7087 = xor i32 %7086, %7072
  %7088 = lshr i32 %7087, 4
  %7089 = trunc i32 %7088 to i8
  %7090 = and i8 %7089, 1
  %7091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7090, i8* %7091, align 1, !tbaa !2449
  %7092 = icmp eq i32 %7072, 0
  %7093 = zext i1 %7092 to i8
  %7094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7093, i8* %7094, align 1, !tbaa !2450
  %7095 = lshr i32 %7072, 31
  %7096 = trunc i32 %7095 to i8
  %7097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7096, i8* %7097, align 1, !tbaa !2451
  %7098 = lshr i32 %7071, 31
  %7099 = lshr i32 %7067, 31
  %7100 = xor i32 %7095, %7098
  %7101 = xor i32 %7095, %7099
  %7102 = add nuw nsw i32 %7100, %7101
  %7103 = icmp eq i32 %7102, 2
  %7104 = zext i1 %7103 to i8
  %7105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7104, i8* %7105, align 1, !tbaa !2452
  %7106 = load i32, i32* %EDX
  %7107 = zext i32 %7106 to i64
  %7108 = load i64, i64* %PC
  %7109 = add i64 %7108, 3
  store i64 %7109, i64* %PC
  %7110 = shl i64 %7107, 32
  %7111 = ashr exact i64 %7110, 32
  store i64 %7111, i64* %RCX, align 8, !tbaa !2428
  %7112 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7113 = load i64, i64* %RAX
  %7114 = load i64, i64* %RCX
  %7115 = mul i64 %7114, 4
  %7116 = add i64 %7115, %7113
  %7117 = load i64, i64* %PC
  %7118 = add i64 %7117, 5
  store i64 %7118, i64* %PC
  %7119 = inttoptr i64 %7116 to float*
  %7120 = load float, float* %7119
  %7121 = bitcast i8* %7112 to float*
  store float %7120, float* %7121, align 1, !tbaa !2453
  %7122 = getelementptr inbounds i8, i8* %7112, i64 4
  %7123 = bitcast i8* %7122 to float*
  store float 0.000000e+00, float* %7123, align 1, !tbaa !2453
  %7124 = getelementptr inbounds i8, i8* %7112, i64 8
  %7125 = bitcast i8* %7124 to float*
  store float 0.000000e+00, float* %7125, align 1, !tbaa !2453
  %7126 = getelementptr inbounds i8, i8* %7112, i64 12
  %7127 = bitcast i8* %7126 to float*
  store float 0.000000e+00, float* %7127, align 1, !tbaa !2453
  %7128 = load i64, i64* %RBP
  %7129 = sub i64 %7128, 40
  %7130 = load i64, i64* %PC
  %7131 = add i64 %7130, 4
  store i64 %7131, i64* %PC
  %7132 = inttoptr i64 %7129 to i64*
  %7133 = load i64, i64* %7132
  store i64 %7133, i64* %RAX, align 8, !tbaa !2428
  %7134 = load i64, i64* %RAX
  %7135 = load i64, i64* %PC
  %7136 = add i64 %7135, 3
  store i64 %7136, i64* %PC
  %7137 = inttoptr i64 %7134 to i64*
  %7138 = load i64, i64* %7137
  store i64 %7138, i64* %RAX, align 8, !tbaa !2428
  %7139 = load i64, i64* %RBP
  %7140 = sub i64 %7139, 40
  %7141 = load i64, i64* %PC
  %7142 = add i64 %7141, 4
  store i64 %7142, i64* %PC
  %7143 = inttoptr i64 %7140 to i64*
  %7144 = load i64, i64* %7143
  store i64 %7144, i64* %RCX, align 8, !tbaa !2428
  %7145 = load i64, i64* %RCX
  %7146 = add i64 %7145, 12
  %7147 = load i64, i64* %PC
  %7148 = add i64 %7147, 4
  store i64 %7148, i64* %PC
  %7149 = inttoptr i64 %7146 to i32*
  %7150 = load i32, i32* %7149
  %7151 = sext i32 %7150 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %7152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7152, align 1, !tbaa !2434
  %7153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7153, align 1, !tbaa !2448
  %7154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7154, align 1, !tbaa !2449
  %7155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7155, align 1, !tbaa !2450
  %7156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7156, align 1, !tbaa !2451
  %7157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7157, align 1, !tbaa !2452
  %7158 = load i64, i64* %RBP
  %7159 = sub i64 %7158, 40
  %7160 = load i64, i64* %PC
  %7161 = add i64 %7160, 4
  store i64 %7161, i64* %PC
  %7162 = inttoptr i64 %7159 to i64*
  %7163 = load i64, i64* %7162
  store i64 %7163, i64* %RCX, align 8, !tbaa !2428
  %7164 = load i64, i64* %RDX
  %7165 = load i64, i64* %RCX
  %7166 = add i64 %7165, 16
  %7167 = load i64, i64* %PC
  %7168 = add i64 %7167, 4
  store i64 %7168, i64* %PC
  %7169 = inttoptr i64 %7166 to i32*
  %7170 = load i32, i32* %7169
  %7171 = shl i64 %7164, 32
  %7172 = ashr exact i64 %7171, 32
  %7173 = sext i32 %7170 to i64
  %7174 = mul nsw i64 %7173, %7172
  %7175 = trunc i64 %7174 to i32
  %7176 = and i64 %7174, 4294967295
  store i64 %7176, i64* %RDX, align 8, !tbaa !2428
  %7177 = shl i64 %7174, 32
  %7178 = ashr exact i64 %7177, 32
  %7179 = icmp ne i64 %7178, %7174
  %7180 = zext i1 %7179 to i8
  %7181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7180, i8* %7181, align 1, !tbaa !2434
  %7182 = and i32 %7175, 255
  %7183 = call i32 @llvm.ctpop.i32(i32 %7182) #16
  %7184 = trunc i32 %7183 to i8
  %7185 = and i8 %7184, 1
  %7186 = xor i8 %7185, 1
  %7187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7186, i8* %7187, align 1, !tbaa !2448
  %7188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7188, align 1, !tbaa !2449
  %7189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7189, align 1, !tbaa !2450
  %7190 = lshr i32 %7175, 31
  %7191 = trunc i32 %7190 to i8
  %7192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7191, i8* %7192, align 1, !tbaa !2451
  %7193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7180, i8* %7193, align 1, !tbaa !2452
  %7194 = load i64, i64* %RBP
  %7195 = sub i64 %7194, 40
  %7196 = load i64, i64* %PC
  %7197 = add i64 %7196, 4
  store i64 %7197, i64* %PC
  %7198 = inttoptr i64 %7195 to i64*
  %7199 = load i64, i64* %7198
  store i64 %7199, i64* %RCX, align 8, !tbaa !2428
  %7200 = load i64, i64* %RDX
  %7201 = load i64, i64* %RCX
  %7202 = add i64 %7201, 20
  %7203 = load i64, i64* %PC
  %7204 = add i64 %7203, 4
  store i64 %7204, i64* %PC
  %7205 = inttoptr i64 %7202 to i32*
  %7206 = load i32, i32* %7205
  %7207 = shl i64 %7200, 32
  %7208 = ashr exact i64 %7207, 32
  %7209 = sext i32 %7206 to i64
  %7210 = mul nsw i64 %7209, %7208
  %7211 = trunc i64 %7210 to i32
  %7212 = and i64 %7210, 4294967295
  store i64 %7212, i64* %RDX, align 8, !tbaa !2428
  %7213 = shl i64 %7210, 32
  %7214 = ashr exact i64 %7213, 32
  %7215 = icmp ne i64 %7214, %7210
  %7216 = zext i1 %7215 to i8
  %7217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7216, i8* %7217, align 1, !tbaa !2434
  %7218 = and i32 %7211, 255
  %7219 = call i32 @llvm.ctpop.i32(i32 %7218) #16
  %7220 = trunc i32 %7219 to i8
  %7221 = and i8 %7220, 1
  %7222 = xor i8 %7221, 1
  %7223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7222, i8* %7223, align 1, !tbaa !2448
  %7224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7224, align 1, !tbaa !2449
  %7225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7225, align 1, !tbaa !2450
  %7226 = lshr i32 %7211, 31
  %7227 = trunc i32 %7226 to i8
  %7228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7227, i8* %7228, align 1, !tbaa !2451
  %7229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7216, i8* %7229, align 1, !tbaa !2452
  %7230 = load i64, i64* %RBP
  %7231 = sub i64 %7230, 68
  %7232 = load i64, i64* %PC
  %7233 = add i64 %7232, 3
  store i64 %7233, i64* %PC
  %7234 = inttoptr i64 %7231 to i32*
  %7235 = load i32, i32* %7234
  %7236 = zext i32 %7235 to i64
  store i64 %7236, i64* %RSI, align 8, !tbaa !2428
  %7237 = load i64, i64* %RBP
  %7238 = sub i64 %7237, 40
  %7239 = load i64, i64* %PC
  %7240 = add i64 %7239, 4
  store i64 %7240, i64* %PC
  %7241 = inttoptr i64 %7238 to i64*
  %7242 = load i64, i64* %7241
  store i64 %7242, i64* %RCX, align 8, !tbaa !2428
  %7243 = load i64, i64* %RSI
  %7244 = load i64, i64* %RCX
  %7245 = add i64 %7244, 16
  %7246 = load i64, i64* %PC
  %7247 = add i64 %7246, 4
  store i64 %7247, i64* %PC
  %7248 = inttoptr i64 %7245 to i32*
  %7249 = load i32, i32* %7248
  %7250 = shl i64 %7243, 32
  %7251 = ashr exact i64 %7250, 32
  %7252 = sext i32 %7249 to i64
  %7253 = mul nsw i64 %7252, %7251
  %7254 = trunc i64 %7253 to i32
  %7255 = and i64 %7253, 4294967295
  store i64 %7255, i64* %RSI, align 8, !tbaa !2428
  %7256 = shl i64 %7253, 32
  %7257 = ashr exact i64 %7256, 32
  %7258 = icmp ne i64 %7257, %7253
  %7259 = zext i1 %7258 to i8
  %7260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7259, i8* %7260, align 1, !tbaa !2434
  %7261 = and i32 %7254, 255
  %7262 = call i32 @llvm.ctpop.i32(i32 %7261) #16
  %7263 = trunc i32 %7262 to i8
  %7264 = and i8 %7263, 1
  %7265 = xor i8 %7264, 1
  %7266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7265, i8* %7266, align 1, !tbaa !2448
  %7267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7267, align 1, !tbaa !2449
  %7268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7268, align 1, !tbaa !2450
  %7269 = lshr i32 %7254, 31
  %7270 = trunc i32 %7269 to i8
  %7271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7270, i8* %7271, align 1, !tbaa !2451
  %7272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7259, i8* %7272, align 1, !tbaa !2452
  %7273 = load i64, i64* %RBP
  %7274 = sub i64 %7273, 40
  %7275 = load i64, i64* %PC
  %7276 = add i64 %7275, 4
  store i64 %7276, i64* %PC
  %7277 = inttoptr i64 %7274 to i64*
  %7278 = load i64, i64* %7277
  store i64 %7278, i64* %RCX, align 8, !tbaa !2428
  %7279 = load i64, i64* %RSI
  %7280 = load i64, i64* %RCX
  %7281 = add i64 %7280, 20
  %7282 = load i64, i64* %PC
  %7283 = add i64 %7282, 4
  store i64 %7283, i64* %PC
  %7284 = inttoptr i64 %7281 to i32*
  %7285 = load i32, i32* %7284
  %7286 = shl i64 %7279, 32
  %7287 = ashr exact i64 %7286, 32
  %7288 = sext i32 %7285 to i64
  %7289 = mul nsw i64 %7288, %7287
  %7290 = trunc i64 %7289 to i32
  %7291 = and i64 %7289, 4294967295
  store i64 %7291, i64* %RSI, align 8, !tbaa !2428
  %7292 = shl i64 %7289, 32
  %7293 = ashr exact i64 %7292, 32
  %7294 = icmp ne i64 %7293, %7289
  %7295 = zext i1 %7294 to i8
  %7296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7295, i8* %7296, align 1, !tbaa !2434
  %7297 = and i32 %7290, 255
  %7298 = call i32 @llvm.ctpop.i32(i32 %7297) #16
  %7299 = trunc i32 %7298 to i8
  %7300 = and i8 %7299, 1
  %7301 = xor i8 %7300, 1
  %7302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7301, i8* %7302, align 1, !tbaa !2448
  %7303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7303, align 1, !tbaa !2449
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7304, align 1, !tbaa !2450
  %7305 = lshr i32 %7290, 31
  %7306 = trunc i32 %7305 to i8
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7306, i8* %7307, align 1, !tbaa !2451
  %7308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7295, i8* %7308, align 1, !tbaa !2452
  %7309 = load i64, i64* %RDX
  %7310 = load i32, i32* %ESI
  %7311 = zext i32 %7310 to i64
  %7312 = load i64, i64* %PC
  %7313 = add i64 %7312, 2
  store i64 %7313, i64* %PC
  %7314 = trunc i64 %7309 to i32
  %7315 = add i32 %7310, %7314
  %7316 = zext i32 %7315 to i64
  store i64 %7316, i64* %RDX, align 8, !tbaa !2428
  %7317 = icmp ult i32 %7315, %7314
  %7318 = icmp ult i32 %7315, %7310
  %7319 = or i1 %7317, %7318
  %7320 = zext i1 %7319 to i8
  %7321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7320, i8* %7321, align 1, !tbaa !2434
  %7322 = and i32 %7315, 255
  %7323 = call i32 @llvm.ctpop.i32(i32 %7322) #16
  %7324 = trunc i32 %7323 to i8
  %7325 = and i8 %7324, 1
  %7326 = xor i8 %7325, 1
  %7327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7326, i8* %7327, align 1, !tbaa !2448
  %7328 = xor i64 %7311, %7309
  %7329 = trunc i64 %7328 to i32
  %7330 = xor i32 %7329, %7315
  %7331 = lshr i32 %7330, 4
  %7332 = trunc i32 %7331 to i8
  %7333 = and i8 %7332, 1
  %7334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7333, i8* %7334, align 1, !tbaa !2449
  %7335 = icmp eq i32 %7315, 0
  %7336 = zext i1 %7335 to i8
  %7337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7336, i8* %7337, align 1, !tbaa !2450
  %7338 = lshr i32 %7315, 31
  %7339 = trunc i32 %7338 to i8
  %7340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7339, i8* %7340, align 1, !tbaa !2451
  %7341 = lshr i32 %7314, 31
  %7342 = lshr i32 %7310, 31
  %7343 = xor i32 %7338, %7341
  %7344 = xor i32 %7338, %7342
  %7345 = add nuw nsw i32 %7343, %7344
  %7346 = icmp eq i32 %7345, 2
  %7347 = zext i1 %7346 to i8
  %7348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7347, i8* %7348, align 1, !tbaa !2452
  %7349 = load i64, i64* %RBP
  %7350 = sub i64 %7349, 72
  %7351 = load i64, i64* %PC
  %7352 = add i64 %7351, 3
  store i64 %7352, i64* %PC
  %7353 = inttoptr i64 %7350 to i32*
  %7354 = load i32, i32* %7353
  %7355 = zext i32 %7354 to i64
  store i64 %7355, i64* %RSI, align 8, !tbaa !2428
  %7356 = load i64, i64* %RSI
  %7357 = load i64, i64* %PC
  %7358 = add i64 %7357, 3
  store i64 %7358, i64* %PC
  %7359 = trunc i64 %7356 to i32
  %7360 = sub i32 %7359, 1
  %7361 = zext i32 %7360 to i64
  store i64 %7361, i64* %RSI, align 8, !tbaa !2428
  %7362 = icmp ult i32 %7359, 1
  %7363 = zext i1 %7362 to i8
  %7364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7363, i8* %7364, align 1, !tbaa !2434
  %7365 = and i32 %7360, 255
  %7366 = call i32 @llvm.ctpop.i32(i32 %7365) #16
  %7367 = trunc i32 %7366 to i8
  %7368 = and i8 %7367, 1
  %7369 = xor i8 %7368, 1
  %7370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7369, i8* %7370, align 1, !tbaa !2448
  %7371 = xor i64 1, %7356
  %7372 = trunc i64 %7371 to i32
  %7373 = xor i32 %7372, %7360
  %7374 = lshr i32 %7373, 4
  %7375 = trunc i32 %7374 to i8
  %7376 = and i8 %7375, 1
  %7377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7376, i8* %7377, align 1, !tbaa !2449
  %7378 = icmp eq i32 %7360, 0
  %7379 = zext i1 %7378 to i8
  %7380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7379, i8* %7380, align 1, !tbaa !2450
  %7381 = lshr i32 %7360, 31
  %7382 = trunc i32 %7381 to i8
  %7383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7382, i8* %7383, align 1, !tbaa !2451
  %7384 = lshr i32 %7359, 31
  %7385 = xor i32 %7381, %7384
  %7386 = add nuw nsw i32 %7385, %7384
  %7387 = icmp eq i32 %7386, 2
  %7388 = zext i1 %7387 to i8
  %7389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7388, i8* %7389, align 1, !tbaa !2452
  %7390 = load i64, i64* %RBP
  %7391 = sub i64 %7390, 40
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 4
  store i64 %7393, i64* %PC
  %7394 = inttoptr i64 %7391 to i64*
  %7395 = load i64, i64* %7394
  store i64 %7395, i64* %RCX, align 8, !tbaa !2428
  %7396 = load i64, i64* %RSI
  %7397 = load i64, i64* %RCX
  %7398 = add i64 %7397, 20
  %7399 = load i64, i64* %PC
  %7400 = add i64 %7399, 4
  store i64 %7400, i64* %PC
  %7401 = inttoptr i64 %7398 to i32*
  %7402 = load i32, i32* %7401
  %7403 = shl i64 %7396, 32
  %7404 = ashr exact i64 %7403, 32
  %7405 = sext i32 %7402 to i64
  %7406 = mul nsw i64 %7405, %7404
  %7407 = trunc i64 %7406 to i32
  %7408 = and i64 %7406, 4294967295
  store i64 %7408, i64* %RSI, align 8, !tbaa !2428
  %7409 = shl i64 %7406, 32
  %7410 = ashr exact i64 %7409, 32
  %7411 = icmp ne i64 %7410, %7406
  %7412 = zext i1 %7411 to i8
  %7413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7412, i8* %7413, align 1, !tbaa !2434
  %7414 = and i32 %7407, 255
  %7415 = call i32 @llvm.ctpop.i32(i32 %7414) #16
  %7416 = trunc i32 %7415 to i8
  %7417 = and i8 %7416, 1
  %7418 = xor i8 %7417, 1
  %7419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7418, i8* %7419, align 1, !tbaa !2448
  %7420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7420, align 1, !tbaa !2449
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7421, align 1, !tbaa !2450
  %7422 = lshr i32 %7407, 31
  %7423 = trunc i32 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7423, i8* %7424, align 1, !tbaa !2451
  %7425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7412, i8* %7425, align 1, !tbaa !2452
  %7426 = load i64, i64* %RDX
  %7427 = load i32, i32* %ESI
  %7428 = zext i32 %7427 to i64
  %7429 = load i64, i64* %PC
  %7430 = add i64 %7429, 2
  store i64 %7430, i64* %PC
  %7431 = trunc i64 %7426 to i32
  %7432 = add i32 %7427, %7431
  %7433 = zext i32 %7432 to i64
  store i64 %7433, i64* %RDX, align 8, !tbaa !2428
  %7434 = icmp ult i32 %7432, %7431
  %7435 = icmp ult i32 %7432, %7427
  %7436 = or i1 %7434, %7435
  %7437 = zext i1 %7436 to i8
  %7438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7437, i8* %7438, align 1, !tbaa !2434
  %7439 = and i32 %7432, 255
  %7440 = call i32 @llvm.ctpop.i32(i32 %7439) #16
  %7441 = trunc i32 %7440 to i8
  %7442 = and i8 %7441, 1
  %7443 = xor i8 %7442, 1
  %7444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7443, i8* %7444, align 1, !tbaa !2448
  %7445 = xor i64 %7428, %7426
  %7446 = trunc i64 %7445 to i32
  %7447 = xor i32 %7446, %7432
  %7448 = lshr i32 %7447, 4
  %7449 = trunc i32 %7448 to i8
  %7450 = and i8 %7449, 1
  %7451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7450, i8* %7451, align 1, !tbaa !2449
  %7452 = icmp eq i32 %7432, 0
  %7453 = zext i1 %7452 to i8
  %7454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7453, i8* %7454, align 1, !tbaa !2450
  %7455 = lshr i32 %7432, 31
  %7456 = trunc i32 %7455 to i8
  %7457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7456, i8* %7457, align 1, !tbaa !2451
  %7458 = lshr i32 %7431, 31
  %7459 = lshr i32 %7427, 31
  %7460 = xor i32 %7455, %7458
  %7461 = xor i32 %7455, %7459
  %7462 = add nuw nsw i32 %7460, %7461
  %7463 = icmp eq i32 %7462, 2
  %7464 = zext i1 %7463 to i8
  %7465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7464, i8* %7465, align 1, !tbaa !2452
  %7466 = load i64, i64* %RBP
  %7467 = sub i64 %7466, 76
  %7468 = load i64, i64* %PC
  %7469 = add i64 %7468, 3
  store i64 %7469, i64* %PC
  %7470 = inttoptr i64 %7467 to i32*
  %7471 = load i32, i32* %7470
  %7472 = zext i32 %7471 to i64
  store i64 %7472, i64* %RSI, align 8, !tbaa !2428
  %7473 = load i64, i64* %RSI
  %7474 = load i64, i64* %PC
  %7475 = add i64 %7474, 3
  store i64 %7475, i64* %PC
  %7476 = trunc i64 %7473 to i32
  %7477 = add i32 1, %7476
  %7478 = zext i32 %7477 to i64
  store i64 %7478, i64* %RSI, align 8, !tbaa !2428
  %7479 = icmp ult i32 %7477, %7476
  %7480 = icmp ult i32 %7477, 1
  %7481 = or i1 %7479, %7480
  %7482 = zext i1 %7481 to i8
  %7483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7482, i8* %7483, align 1, !tbaa !2434
  %7484 = and i32 %7477, 255
  %7485 = call i32 @llvm.ctpop.i32(i32 %7484) #16
  %7486 = trunc i32 %7485 to i8
  %7487 = and i8 %7486, 1
  %7488 = xor i8 %7487, 1
  %7489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7488, i8* %7489, align 1, !tbaa !2448
  %7490 = xor i64 1, %7473
  %7491 = trunc i64 %7490 to i32
  %7492 = xor i32 %7491, %7477
  %7493 = lshr i32 %7492, 4
  %7494 = trunc i32 %7493 to i8
  %7495 = and i8 %7494, 1
  %7496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7495, i8* %7496, align 1, !tbaa !2449
  %7497 = icmp eq i32 %7477, 0
  %7498 = zext i1 %7497 to i8
  %7499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7498, i8* %7499, align 1, !tbaa !2450
  %7500 = lshr i32 %7477, 31
  %7501 = trunc i32 %7500 to i8
  %7502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7501, i8* %7502, align 1, !tbaa !2451
  %7503 = lshr i32 %7476, 31
  %7504 = xor i32 %7500, %7503
  %7505 = add nuw nsw i32 %7504, %7500
  %7506 = icmp eq i32 %7505, 2
  %7507 = zext i1 %7506 to i8
  %7508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7507, i8* %7508, align 1, !tbaa !2452
  %7509 = load i64, i64* %RDX
  %7510 = load i32, i32* %ESI
  %7511 = zext i32 %7510 to i64
  %7512 = load i64, i64* %PC
  %7513 = add i64 %7512, 2
  store i64 %7513, i64* %PC
  %7514 = trunc i64 %7509 to i32
  %7515 = add i32 %7510, %7514
  %7516 = zext i32 %7515 to i64
  store i64 %7516, i64* %RDX, align 8, !tbaa !2428
  %7517 = icmp ult i32 %7515, %7514
  %7518 = icmp ult i32 %7515, %7510
  %7519 = or i1 %7517, %7518
  %7520 = zext i1 %7519 to i8
  %7521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7520, i8* %7521, align 1, !tbaa !2434
  %7522 = and i32 %7515, 255
  %7523 = call i32 @llvm.ctpop.i32(i32 %7522) #16
  %7524 = trunc i32 %7523 to i8
  %7525 = and i8 %7524, 1
  %7526 = xor i8 %7525, 1
  %7527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7526, i8* %7527, align 1, !tbaa !2448
  %7528 = xor i64 %7511, %7509
  %7529 = trunc i64 %7528 to i32
  %7530 = xor i32 %7529, %7515
  %7531 = lshr i32 %7530, 4
  %7532 = trunc i32 %7531 to i8
  %7533 = and i8 %7532, 1
  %7534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7533, i8* %7534, align 1, !tbaa !2449
  %7535 = icmp eq i32 %7515, 0
  %7536 = zext i1 %7535 to i8
  %7537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7536, i8* %7537, align 1, !tbaa !2450
  %7538 = lshr i32 %7515, 31
  %7539 = trunc i32 %7538 to i8
  %7540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7539, i8* %7540, align 1, !tbaa !2451
  %7541 = lshr i32 %7514, 31
  %7542 = lshr i32 %7510, 31
  %7543 = xor i32 %7538, %7541
  %7544 = xor i32 %7538, %7542
  %7545 = add nuw nsw i32 %7543, %7544
  %7546 = icmp eq i32 %7545, 2
  %7547 = zext i1 %7546 to i8
  %7548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7547, i8* %7548, align 1, !tbaa !2452
  %7549 = load i32, i32* %EDX
  %7550 = zext i32 %7549 to i64
  %7551 = load i64, i64* %PC
  %7552 = add i64 %7551, 3
  store i64 %7552, i64* %PC
  %7553 = shl i64 %7550, 32
  %7554 = ashr exact i64 %7553, 32
  store i64 %7554, i64* %RCX, align 8, !tbaa !2428
  %7555 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7556 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7557 = load i64, i64* %RAX
  %7558 = load i64, i64* %RCX
  %7559 = mul i64 %7558, 4
  %7560 = add i64 %7559, %7557
  %7561 = load i64, i64* %PC
  %7562 = add i64 %7561, 5
  store i64 %7562, i64* %PC
  %7563 = bitcast i8* %7556 to <2 x float>*
  %7564 = load <2 x float>, <2 x float>* %7563, align 1
  %7565 = getelementptr inbounds i8, i8* %7556, i64 8
  %7566 = bitcast i8* %7565 to <2 x i32>*
  %7567 = load <2 x i32>, <2 x i32>* %7566, align 1
  %7568 = inttoptr i64 %7560 to float*
  %7569 = load float, float* %7568
  %7570 = extractelement <2 x float> %7564, i32 0
  %7571 = fsub float %7570, %7569
  %7572 = bitcast i8* %7555 to float*
  store float %7571, float* %7572, align 1, !tbaa !2453
  %7573 = bitcast <2 x float> %7564 to <2 x i32>
  %7574 = extractelement <2 x i32> %7573, i32 1
  %7575 = getelementptr inbounds i8, i8* %7555, i64 4
  %7576 = bitcast i8* %7575 to i32*
  store i32 %7574, i32* %7576, align 1, !tbaa !2453
  %7577 = extractelement <2 x i32> %7567, i32 0
  %7578 = getelementptr inbounds i8, i8* %7555, i64 8
  %7579 = bitcast i8* %7578 to i32*
  store i32 %7577, i32* %7579, align 1, !tbaa !2453
  %7580 = extractelement <2 x i32> %7567, i32 1
  %7581 = getelementptr inbounds i8, i8* %7555, i64 12
  %7582 = bitcast i8* %7581 to i32*
  store i32 %7580, i32* %7582, align 1, !tbaa !2453
  %7583 = load i64, i64* %RBP
  %7584 = sub i64 %7583, 40
  %7585 = load i64, i64* %PC
  %7586 = add i64 %7585, 4
  store i64 %7586, i64* %PC
  %7587 = inttoptr i64 %7584 to i64*
  %7588 = load i64, i64* %7587
  store i64 %7588, i64* %RAX, align 8, !tbaa !2428
  %7589 = load i64, i64* %RAX
  %7590 = load i64, i64* %PC
  %7591 = add i64 %7590, 3
  store i64 %7591, i64* %PC
  %7592 = inttoptr i64 %7589 to i64*
  %7593 = load i64, i64* %7592
  store i64 %7593, i64* %RAX, align 8, !tbaa !2428
  %7594 = load i64, i64* %RBP
  %7595 = sub i64 %7594, 40
  %7596 = load i64, i64* %PC
  %7597 = add i64 %7596, 4
  store i64 %7597, i64* %PC
  %7598 = inttoptr i64 %7595 to i64*
  %7599 = load i64, i64* %7598
  store i64 %7599, i64* %RCX, align 8, !tbaa !2428
  %7600 = load i64, i64* %RCX
  %7601 = add i64 %7600, 12
  %7602 = load i64, i64* %PC
  %7603 = add i64 %7602, 4
  store i64 %7603, i64* %PC
  %7604 = inttoptr i64 %7601 to i32*
  %7605 = load i32, i32* %7604
  %7606 = sext i32 %7605 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %7607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7607, align 1, !tbaa !2434
  %7608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7608, align 1, !tbaa !2448
  %7609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7609, align 1, !tbaa !2449
  %7610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7610, align 1, !tbaa !2450
  %7611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %7611, align 1, !tbaa !2451
  %7612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7612, align 1, !tbaa !2452
  %7613 = load i64, i64* %RBP
  %7614 = sub i64 %7613, 40
  %7615 = load i64, i64* %PC
  %7616 = add i64 %7615, 4
  store i64 %7616, i64* %PC
  %7617 = inttoptr i64 %7614 to i64*
  %7618 = load i64, i64* %7617
  store i64 %7618, i64* %RCX, align 8, !tbaa !2428
  %7619 = load i64, i64* %RDX
  %7620 = load i64, i64* %RCX
  %7621 = add i64 %7620, 16
  %7622 = load i64, i64* %PC
  %7623 = add i64 %7622, 4
  store i64 %7623, i64* %PC
  %7624 = inttoptr i64 %7621 to i32*
  %7625 = load i32, i32* %7624
  %7626 = shl i64 %7619, 32
  %7627 = ashr exact i64 %7626, 32
  %7628 = sext i32 %7625 to i64
  %7629 = mul nsw i64 %7628, %7627
  %7630 = trunc i64 %7629 to i32
  %7631 = and i64 %7629, 4294967295
  store i64 %7631, i64* %RDX, align 8, !tbaa !2428
  %7632 = shl i64 %7629, 32
  %7633 = ashr exact i64 %7632, 32
  %7634 = icmp ne i64 %7633, %7629
  %7635 = zext i1 %7634 to i8
  %7636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7635, i8* %7636, align 1, !tbaa !2434
  %7637 = and i32 %7630, 255
  %7638 = call i32 @llvm.ctpop.i32(i32 %7637) #16
  %7639 = trunc i32 %7638 to i8
  %7640 = and i8 %7639, 1
  %7641 = xor i8 %7640, 1
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7641, i8* %7642, align 1, !tbaa !2448
  %7643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7643, align 1, !tbaa !2449
  %7644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7644, align 1, !tbaa !2450
  %7645 = lshr i32 %7630, 31
  %7646 = trunc i32 %7645 to i8
  %7647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7646, i8* %7647, align 1, !tbaa !2451
  %7648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7635, i8* %7648, align 1, !tbaa !2452
  %7649 = load i64, i64* %RBP
  %7650 = sub i64 %7649, 40
  %7651 = load i64, i64* %PC
  %7652 = add i64 %7651, 4
  store i64 %7652, i64* %PC
  %7653 = inttoptr i64 %7650 to i64*
  %7654 = load i64, i64* %7653
  store i64 %7654, i64* %RCX, align 8, !tbaa !2428
  %7655 = load i64, i64* %RDX
  %7656 = load i64, i64* %RCX
  %7657 = add i64 %7656, 20
  %7658 = load i64, i64* %PC
  %7659 = add i64 %7658, 4
  store i64 %7659, i64* %PC
  %7660 = inttoptr i64 %7657 to i32*
  %7661 = load i32, i32* %7660
  %7662 = shl i64 %7655, 32
  %7663 = ashr exact i64 %7662, 32
  %7664 = sext i32 %7661 to i64
  %7665 = mul nsw i64 %7664, %7663
  %7666 = trunc i64 %7665 to i32
  %7667 = and i64 %7665, 4294967295
  store i64 %7667, i64* %RDX, align 8, !tbaa !2428
  %7668 = shl i64 %7665, 32
  %7669 = ashr exact i64 %7668, 32
  %7670 = icmp ne i64 %7669, %7665
  %7671 = zext i1 %7670 to i8
  %7672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7671, i8* %7672, align 1, !tbaa !2434
  %7673 = and i32 %7666, 255
  %7674 = call i32 @llvm.ctpop.i32(i32 %7673) #16
  %7675 = trunc i32 %7674 to i8
  %7676 = and i8 %7675, 1
  %7677 = xor i8 %7676, 1
  %7678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7677, i8* %7678, align 1, !tbaa !2448
  %7679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7679, align 1, !tbaa !2449
  %7680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7680, align 1, !tbaa !2450
  %7681 = lshr i32 %7666, 31
  %7682 = trunc i32 %7681 to i8
  %7683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7682, i8* %7683, align 1, !tbaa !2451
  %7684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7671, i8* %7684, align 1, !tbaa !2452
  %7685 = load i64, i64* %RBP
  %7686 = sub i64 %7685, 68
  %7687 = load i64, i64* %PC
  %7688 = add i64 %7687, 3
  store i64 %7688, i64* %PC
  %7689 = inttoptr i64 %7686 to i32*
  %7690 = load i32, i32* %7689
  %7691 = zext i32 %7690 to i64
  store i64 %7691, i64* %RSI, align 8, !tbaa !2428
  %7692 = load i64, i64* %RBP
  %7693 = sub i64 %7692, 40
  %7694 = load i64, i64* %PC
  %7695 = add i64 %7694, 4
  store i64 %7695, i64* %PC
  %7696 = inttoptr i64 %7693 to i64*
  %7697 = load i64, i64* %7696
  store i64 %7697, i64* %RCX, align 8, !tbaa !2428
  %7698 = load i64, i64* %RSI
  %7699 = load i64, i64* %RCX
  %7700 = add i64 %7699, 16
  %7701 = load i64, i64* %PC
  %7702 = add i64 %7701, 4
  store i64 %7702, i64* %PC
  %7703 = inttoptr i64 %7700 to i32*
  %7704 = load i32, i32* %7703
  %7705 = shl i64 %7698, 32
  %7706 = ashr exact i64 %7705, 32
  %7707 = sext i32 %7704 to i64
  %7708 = mul nsw i64 %7707, %7706
  %7709 = trunc i64 %7708 to i32
  %7710 = and i64 %7708, 4294967295
  store i64 %7710, i64* %RSI, align 8, !tbaa !2428
  %7711 = shl i64 %7708, 32
  %7712 = ashr exact i64 %7711, 32
  %7713 = icmp ne i64 %7712, %7708
  %7714 = zext i1 %7713 to i8
  %7715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7714, i8* %7715, align 1, !tbaa !2434
  %7716 = and i32 %7709, 255
  %7717 = call i32 @llvm.ctpop.i32(i32 %7716) #16
  %7718 = trunc i32 %7717 to i8
  %7719 = and i8 %7718, 1
  %7720 = xor i8 %7719, 1
  %7721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7720, i8* %7721, align 1, !tbaa !2448
  %7722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7722, align 1, !tbaa !2449
  %7723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7723, align 1, !tbaa !2450
  %7724 = lshr i32 %7709, 31
  %7725 = trunc i32 %7724 to i8
  %7726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7725, i8* %7726, align 1, !tbaa !2451
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7714, i8* %7727, align 1, !tbaa !2452
  %7728 = load i64, i64* %RBP
  %7729 = sub i64 %7728, 40
  %7730 = load i64, i64* %PC
  %7731 = add i64 %7730, 4
  store i64 %7731, i64* %PC
  %7732 = inttoptr i64 %7729 to i64*
  %7733 = load i64, i64* %7732
  store i64 %7733, i64* %RCX, align 8, !tbaa !2428
  %7734 = load i64, i64* %RSI
  %7735 = load i64, i64* %RCX
  %7736 = add i64 %7735, 20
  %7737 = load i64, i64* %PC
  %7738 = add i64 %7737, 4
  store i64 %7738, i64* %PC
  %7739 = inttoptr i64 %7736 to i32*
  %7740 = load i32, i32* %7739
  %7741 = shl i64 %7734, 32
  %7742 = ashr exact i64 %7741, 32
  %7743 = sext i32 %7740 to i64
  %7744 = mul nsw i64 %7743, %7742
  %7745 = trunc i64 %7744 to i32
  %7746 = and i64 %7744, 4294967295
  store i64 %7746, i64* %RSI, align 8, !tbaa !2428
  %7747 = shl i64 %7744, 32
  %7748 = ashr exact i64 %7747, 32
  %7749 = icmp ne i64 %7748, %7744
  %7750 = zext i1 %7749 to i8
  %7751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7750, i8* %7751, align 1, !tbaa !2434
  %7752 = and i32 %7745, 255
  %7753 = call i32 @llvm.ctpop.i32(i32 %7752) #16
  %7754 = trunc i32 %7753 to i8
  %7755 = and i8 %7754, 1
  %7756 = xor i8 %7755, 1
  %7757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7756, i8* %7757, align 1, !tbaa !2448
  %7758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7758, align 1, !tbaa !2449
  %7759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7759, align 1, !tbaa !2450
  %7760 = lshr i32 %7745, 31
  %7761 = trunc i32 %7760 to i8
  %7762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7761, i8* %7762, align 1, !tbaa !2451
  %7763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7750, i8* %7763, align 1, !tbaa !2452
  %7764 = load i64, i64* %RDX
  %7765 = load i32, i32* %ESI
  %7766 = zext i32 %7765 to i64
  %7767 = load i64, i64* %PC
  %7768 = add i64 %7767, 2
  store i64 %7768, i64* %PC
  %7769 = trunc i64 %7764 to i32
  %7770 = add i32 %7765, %7769
  %7771 = zext i32 %7770 to i64
  store i64 %7771, i64* %RDX, align 8, !tbaa !2428
  %7772 = icmp ult i32 %7770, %7769
  %7773 = icmp ult i32 %7770, %7765
  %7774 = or i1 %7772, %7773
  %7775 = zext i1 %7774 to i8
  %7776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7775, i8* %7776, align 1, !tbaa !2434
  %7777 = and i32 %7770, 255
  %7778 = call i32 @llvm.ctpop.i32(i32 %7777) #16
  %7779 = trunc i32 %7778 to i8
  %7780 = and i8 %7779, 1
  %7781 = xor i8 %7780, 1
  %7782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7781, i8* %7782, align 1, !tbaa !2448
  %7783 = xor i64 %7766, %7764
  %7784 = trunc i64 %7783 to i32
  %7785 = xor i32 %7784, %7770
  %7786 = lshr i32 %7785, 4
  %7787 = trunc i32 %7786 to i8
  %7788 = and i8 %7787, 1
  %7789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7788, i8* %7789, align 1, !tbaa !2449
  %7790 = icmp eq i32 %7770, 0
  %7791 = zext i1 %7790 to i8
  %7792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7791, i8* %7792, align 1, !tbaa !2450
  %7793 = lshr i32 %7770, 31
  %7794 = trunc i32 %7793 to i8
  %7795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7794, i8* %7795, align 1, !tbaa !2451
  %7796 = lshr i32 %7769, 31
  %7797 = lshr i32 %7765, 31
  %7798 = xor i32 %7793, %7796
  %7799 = xor i32 %7793, %7797
  %7800 = add nuw nsw i32 %7798, %7799
  %7801 = icmp eq i32 %7800, 2
  %7802 = zext i1 %7801 to i8
  %7803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7802, i8* %7803, align 1, !tbaa !2452
  %7804 = load i64, i64* %RBP
  %7805 = sub i64 %7804, 72
  %7806 = load i64, i64* %PC
  %7807 = add i64 %7806, 3
  store i64 %7807, i64* %PC
  %7808 = inttoptr i64 %7805 to i32*
  %7809 = load i32, i32* %7808
  %7810 = zext i32 %7809 to i64
  store i64 %7810, i64* %RSI, align 8, !tbaa !2428
  %7811 = load i64, i64* %RSI
  %7812 = load i64, i64* %PC
  %7813 = add i64 %7812, 3
  store i64 %7813, i64* %PC
  %7814 = trunc i64 %7811 to i32
  %7815 = add i32 1, %7814
  %7816 = zext i32 %7815 to i64
  store i64 %7816, i64* %RSI, align 8, !tbaa !2428
  %7817 = icmp ult i32 %7815, %7814
  %7818 = icmp ult i32 %7815, 1
  %7819 = or i1 %7817, %7818
  %7820 = zext i1 %7819 to i8
  %7821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7820, i8* %7821, align 1, !tbaa !2434
  %7822 = and i32 %7815, 255
  %7823 = call i32 @llvm.ctpop.i32(i32 %7822) #16
  %7824 = trunc i32 %7823 to i8
  %7825 = and i8 %7824, 1
  %7826 = xor i8 %7825, 1
  %7827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7826, i8* %7827, align 1, !tbaa !2448
  %7828 = xor i64 1, %7811
  %7829 = trunc i64 %7828 to i32
  %7830 = xor i32 %7829, %7815
  %7831 = lshr i32 %7830, 4
  %7832 = trunc i32 %7831 to i8
  %7833 = and i8 %7832, 1
  %7834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7833, i8* %7834, align 1, !tbaa !2449
  %7835 = icmp eq i32 %7815, 0
  %7836 = zext i1 %7835 to i8
  %7837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7836, i8* %7837, align 1, !tbaa !2450
  %7838 = lshr i32 %7815, 31
  %7839 = trunc i32 %7838 to i8
  %7840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7839, i8* %7840, align 1, !tbaa !2451
  %7841 = lshr i32 %7814, 31
  %7842 = xor i32 %7838, %7841
  %7843 = add nuw nsw i32 %7842, %7838
  %7844 = icmp eq i32 %7843, 2
  %7845 = zext i1 %7844 to i8
  %7846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7845, i8* %7846, align 1, !tbaa !2452
  %7847 = load i64, i64* %RBP
  %7848 = sub i64 %7847, 40
  %7849 = load i64, i64* %PC
  %7850 = add i64 %7849, 4
  store i64 %7850, i64* %PC
  %7851 = inttoptr i64 %7848 to i64*
  %7852 = load i64, i64* %7851
  store i64 %7852, i64* %RCX, align 8, !tbaa !2428
  %7853 = load i64, i64* %RSI
  %7854 = load i64, i64* %RCX
  %7855 = add i64 %7854, 20
  %7856 = load i64, i64* %PC
  %7857 = add i64 %7856, 4
  store i64 %7857, i64* %PC
  %7858 = inttoptr i64 %7855 to i32*
  %7859 = load i32, i32* %7858
  %7860 = shl i64 %7853, 32
  %7861 = ashr exact i64 %7860, 32
  %7862 = sext i32 %7859 to i64
  %7863 = mul nsw i64 %7862, %7861
  %7864 = trunc i64 %7863 to i32
  %7865 = and i64 %7863, 4294967295
  store i64 %7865, i64* %RSI, align 8, !tbaa !2428
  %7866 = shl i64 %7863, 32
  %7867 = ashr exact i64 %7866, 32
  %7868 = icmp ne i64 %7867, %7863
  %7869 = zext i1 %7868 to i8
  %7870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7869, i8* %7870, align 1, !tbaa !2434
  %7871 = and i32 %7864, 255
  %7872 = call i32 @llvm.ctpop.i32(i32 %7871) #16
  %7873 = trunc i32 %7872 to i8
  %7874 = and i8 %7873, 1
  %7875 = xor i8 %7874, 1
  %7876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7875, i8* %7876, align 1, !tbaa !2448
  %7877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7877, align 1, !tbaa !2449
  %7878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %7878, align 1, !tbaa !2450
  %7879 = lshr i32 %7864, 31
  %7880 = trunc i32 %7879 to i8
  %7881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7880, i8* %7881, align 1, !tbaa !2451
  %7882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7869, i8* %7882, align 1, !tbaa !2452
  %7883 = load i64, i64* %RDX
  %7884 = load i32, i32* %ESI
  %7885 = zext i32 %7884 to i64
  %7886 = load i64, i64* %PC
  %7887 = add i64 %7886, 2
  store i64 %7887, i64* %PC
  %7888 = trunc i64 %7883 to i32
  %7889 = add i32 %7884, %7888
  %7890 = zext i32 %7889 to i64
  store i64 %7890, i64* %RDX, align 8, !tbaa !2428
  %7891 = icmp ult i32 %7889, %7888
  %7892 = icmp ult i32 %7889, %7884
  %7893 = or i1 %7891, %7892
  %7894 = zext i1 %7893 to i8
  %7895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7894, i8* %7895, align 1, !tbaa !2434
  %7896 = and i32 %7889, 255
  %7897 = call i32 @llvm.ctpop.i32(i32 %7896) #16
  %7898 = trunc i32 %7897 to i8
  %7899 = and i8 %7898, 1
  %7900 = xor i8 %7899, 1
  %7901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7900, i8* %7901, align 1, !tbaa !2448
  %7902 = xor i64 %7885, %7883
  %7903 = trunc i64 %7902 to i32
  %7904 = xor i32 %7903, %7889
  %7905 = lshr i32 %7904, 4
  %7906 = trunc i32 %7905 to i8
  %7907 = and i8 %7906, 1
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7907, i8* %7908, align 1, !tbaa !2449
  %7909 = icmp eq i32 %7889, 0
  %7910 = zext i1 %7909 to i8
  %7911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7910, i8* %7911, align 1, !tbaa !2450
  %7912 = lshr i32 %7889, 31
  %7913 = trunc i32 %7912 to i8
  %7914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7913, i8* %7914, align 1, !tbaa !2451
  %7915 = lshr i32 %7888, 31
  %7916 = lshr i32 %7884, 31
  %7917 = xor i32 %7912, %7915
  %7918 = xor i32 %7912, %7916
  %7919 = add nuw nsw i32 %7917, %7918
  %7920 = icmp eq i32 %7919, 2
  %7921 = zext i1 %7920 to i8
  %7922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7921, i8* %7922, align 1, !tbaa !2452
  %7923 = load i64, i64* %RBP
  %7924 = sub i64 %7923, 76
  %7925 = load i64, i64* %PC
  %7926 = add i64 %7925, 3
  store i64 %7926, i64* %PC
  %7927 = inttoptr i64 %7924 to i32*
  %7928 = load i32, i32* %7927
  %7929 = zext i32 %7928 to i64
  store i64 %7929, i64* %RSI, align 8, !tbaa !2428
  %7930 = load i64, i64* %RSI
  %7931 = load i64, i64* %PC
  %7932 = add i64 %7931, 3
  store i64 %7932, i64* %PC
  %7933 = trunc i64 %7930 to i32
  %7934 = sub i32 %7933, 1
  %7935 = zext i32 %7934 to i64
  store i64 %7935, i64* %RSI, align 8, !tbaa !2428
  %7936 = icmp ult i32 %7933, 1
  %7937 = zext i1 %7936 to i8
  %7938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7937, i8* %7938, align 1, !tbaa !2434
  %7939 = and i32 %7934, 255
  %7940 = call i32 @llvm.ctpop.i32(i32 %7939) #16
  %7941 = trunc i32 %7940 to i8
  %7942 = and i8 %7941, 1
  %7943 = xor i8 %7942, 1
  %7944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7943, i8* %7944, align 1, !tbaa !2448
  %7945 = xor i64 1, %7930
  %7946 = trunc i64 %7945 to i32
  %7947 = xor i32 %7946, %7934
  %7948 = lshr i32 %7947, 4
  %7949 = trunc i32 %7948 to i8
  %7950 = and i8 %7949, 1
  %7951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7950, i8* %7951, align 1, !tbaa !2449
  %7952 = icmp eq i32 %7934, 0
  %7953 = zext i1 %7952 to i8
  %7954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7953, i8* %7954, align 1, !tbaa !2450
  %7955 = lshr i32 %7934, 31
  %7956 = trunc i32 %7955 to i8
  %7957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7956, i8* %7957, align 1, !tbaa !2451
  %7958 = lshr i32 %7933, 31
  %7959 = xor i32 %7955, %7958
  %7960 = add nuw nsw i32 %7959, %7958
  %7961 = icmp eq i32 %7960, 2
  %7962 = zext i1 %7961 to i8
  %7963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7962, i8* %7963, align 1, !tbaa !2452
  %7964 = load i64, i64* %RDX
  %7965 = load i32, i32* %ESI
  %7966 = zext i32 %7965 to i64
  %7967 = load i64, i64* %PC
  %7968 = add i64 %7967, 2
  store i64 %7968, i64* %PC
  %7969 = trunc i64 %7964 to i32
  %7970 = add i32 %7965, %7969
  %7971 = zext i32 %7970 to i64
  store i64 %7971, i64* %RDX, align 8, !tbaa !2428
  %7972 = icmp ult i32 %7970, %7969
  %7973 = icmp ult i32 %7970, %7965
  %7974 = or i1 %7972, %7973
  %7975 = zext i1 %7974 to i8
  %7976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7975, i8* %7976, align 1, !tbaa !2434
  %7977 = and i32 %7970, 255
  %7978 = call i32 @llvm.ctpop.i32(i32 %7977) #16
  %7979 = trunc i32 %7978 to i8
  %7980 = and i8 %7979, 1
  %7981 = xor i8 %7980, 1
  %7982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7981, i8* %7982, align 1, !tbaa !2448
  %7983 = xor i64 %7966, %7964
  %7984 = trunc i64 %7983 to i32
  %7985 = xor i32 %7984, %7970
  %7986 = lshr i32 %7985, 4
  %7987 = trunc i32 %7986 to i8
  %7988 = and i8 %7987, 1
  %7989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7988, i8* %7989, align 1, !tbaa !2449
  %7990 = icmp eq i32 %7970, 0
  %7991 = zext i1 %7990 to i8
  %7992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7991, i8* %7992, align 1, !tbaa !2450
  %7993 = lshr i32 %7970, 31
  %7994 = trunc i32 %7993 to i8
  %7995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7994, i8* %7995, align 1, !tbaa !2451
  %7996 = lshr i32 %7969, 31
  %7997 = lshr i32 %7965, 31
  %7998 = xor i32 %7993, %7996
  %7999 = xor i32 %7993, %7997
  %8000 = add nuw nsw i32 %7998, %7999
  %8001 = icmp eq i32 %8000, 2
  %8002 = zext i1 %8001 to i8
  %8003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8002, i8* %8003, align 1, !tbaa !2452
  %8004 = load i32, i32* %EDX
  %8005 = zext i32 %8004 to i64
  %8006 = load i64, i64* %PC
  %8007 = add i64 %8006, 3
  store i64 %8007, i64* %PC
  %8008 = shl i64 %8005, 32
  %8009 = ashr exact i64 %8008, 32
  store i64 %8009, i64* %RCX, align 8, !tbaa !2428
  %8010 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8011 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8012 = load i64, i64* %RAX
  %8013 = load i64, i64* %RCX
  %8014 = mul i64 %8013, 4
  %8015 = add i64 %8014, %8012
  %8016 = load i64, i64* %PC
  %8017 = add i64 %8016, 5
  store i64 %8017, i64* %PC
  %8018 = bitcast i8* %8011 to <2 x float>*
  %8019 = load <2 x float>, <2 x float>* %8018, align 1
  %8020 = getelementptr inbounds i8, i8* %8011, i64 8
  %8021 = bitcast i8* %8020 to <2 x i32>*
  %8022 = load <2 x i32>, <2 x i32>* %8021, align 1
  %8023 = inttoptr i64 %8015 to float*
  %8024 = load float, float* %8023
  %8025 = extractelement <2 x float> %8019, i32 0
  %8026 = fsub float %8025, %8024
  %8027 = bitcast i8* %8010 to float*
  store float %8026, float* %8027, align 1, !tbaa !2453
  %8028 = bitcast <2 x float> %8019 to <2 x i32>
  %8029 = extractelement <2 x i32> %8028, i32 1
  %8030 = getelementptr inbounds i8, i8* %8010, i64 4
  %8031 = bitcast i8* %8030 to i32*
  store i32 %8029, i32* %8031, align 1, !tbaa !2453
  %8032 = extractelement <2 x i32> %8022, i32 0
  %8033 = getelementptr inbounds i8, i8* %8010, i64 8
  %8034 = bitcast i8* %8033 to i32*
  store i32 %8032, i32* %8034, align 1, !tbaa !2453
  %8035 = extractelement <2 x i32> %8022, i32 1
  %8036 = getelementptr inbounds i8, i8* %8010, i64 12
  %8037 = bitcast i8* %8036 to i32*
  store i32 %8035, i32* %8037, align 1, !tbaa !2453
  %8038 = load i64, i64* %RBP
  %8039 = sub i64 %8038, 40
  %8040 = load i64, i64* %PC
  %8041 = add i64 %8040, 4
  store i64 %8041, i64* %PC
  %8042 = inttoptr i64 %8039 to i64*
  %8043 = load i64, i64* %8042
  store i64 %8043, i64* %RAX, align 8, !tbaa !2428
  %8044 = load i64, i64* %RAX
  %8045 = load i64, i64* %PC
  %8046 = add i64 %8045, 3
  store i64 %8046, i64* %PC
  %8047 = inttoptr i64 %8044 to i64*
  %8048 = load i64, i64* %8047
  store i64 %8048, i64* %RAX, align 8, !tbaa !2428
  %8049 = load i64, i64* %RBP
  %8050 = sub i64 %8049, 40
  %8051 = load i64, i64* %PC
  %8052 = add i64 %8051, 4
  store i64 %8052, i64* %PC
  %8053 = inttoptr i64 %8050 to i64*
  %8054 = load i64, i64* %8053
  store i64 %8054, i64* %RCX, align 8, !tbaa !2428
  %8055 = load i64, i64* %RCX
  %8056 = add i64 %8055, 12
  %8057 = load i64, i64* %PC
  %8058 = add i64 %8057, 4
  store i64 %8058, i64* %PC
  %8059 = inttoptr i64 %8056 to i32*
  %8060 = load i32, i32* %8059
  %8061 = sext i32 %8060 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8062, align 1, !tbaa !2434
  %8063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8063, align 1, !tbaa !2448
  %8064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8064, align 1, !tbaa !2449
  %8065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8065, align 1, !tbaa !2450
  %8066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8066, align 1, !tbaa !2451
  %8067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8067, align 1, !tbaa !2452
  %8068 = load i64, i64* %RBP
  %8069 = sub i64 %8068, 40
  %8070 = load i64, i64* %PC
  %8071 = add i64 %8070, 4
  store i64 %8071, i64* %PC
  %8072 = inttoptr i64 %8069 to i64*
  %8073 = load i64, i64* %8072
  store i64 %8073, i64* %RCX, align 8, !tbaa !2428
  %8074 = load i64, i64* %RDX
  %8075 = load i64, i64* %RCX
  %8076 = add i64 %8075, 16
  %8077 = load i64, i64* %PC
  %8078 = add i64 %8077, 4
  store i64 %8078, i64* %PC
  %8079 = inttoptr i64 %8076 to i32*
  %8080 = load i32, i32* %8079
  %8081 = shl i64 %8074, 32
  %8082 = ashr exact i64 %8081, 32
  %8083 = sext i32 %8080 to i64
  %8084 = mul nsw i64 %8083, %8082
  %8085 = trunc i64 %8084 to i32
  %8086 = and i64 %8084, 4294967295
  store i64 %8086, i64* %RDX, align 8, !tbaa !2428
  %8087 = shl i64 %8084, 32
  %8088 = ashr exact i64 %8087, 32
  %8089 = icmp ne i64 %8088, %8084
  %8090 = zext i1 %8089 to i8
  %8091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8090, i8* %8091, align 1, !tbaa !2434
  %8092 = and i32 %8085, 255
  %8093 = call i32 @llvm.ctpop.i32(i32 %8092) #16
  %8094 = trunc i32 %8093 to i8
  %8095 = and i8 %8094, 1
  %8096 = xor i8 %8095, 1
  %8097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8096, i8* %8097, align 1, !tbaa !2448
  %8098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8098, align 1, !tbaa !2449
  %8099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8099, align 1, !tbaa !2450
  %8100 = lshr i32 %8085, 31
  %8101 = trunc i32 %8100 to i8
  %8102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8101, i8* %8102, align 1, !tbaa !2451
  %8103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8090, i8* %8103, align 1, !tbaa !2452
  %8104 = load i64, i64* %RBP
  %8105 = sub i64 %8104, 40
  %8106 = load i64, i64* %PC
  %8107 = add i64 %8106, 4
  store i64 %8107, i64* %PC
  %8108 = inttoptr i64 %8105 to i64*
  %8109 = load i64, i64* %8108
  store i64 %8109, i64* %RCX, align 8, !tbaa !2428
  %8110 = load i64, i64* %RDX
  %8111 = load i64, i64* %RCX
  %8112 = add i64 %8111, 20
  %8113 = load i64, i64* %PC
  %8114 = add i64 %8113, 4
  store i64 %8114, i64* %PC
  %8115 = inttoptr i64 %8112 to i32*
  %8116 = load i32, i32* %8115
  %8117 = shl i64 %8110, 32
  %8118 = ashr exact i64 %8117, 32
  %8119 = sext i32 %8116 to i64
  %8120 = mul nsw i64 %8119, %8118
  %8121 = trunc i64 %8120 to i32
  %8122 = and i64 %8120, 4294967295
  store i64 %8122, i64* %RDX, align 8, !tbaa !2428
  %8123 = shl i64 %8120, 32
  %8124 = ashr exact i64 %8123, 32
  %8125 = icmp ne i64 %8124, %8120
  %8126 = zext i1 %8125 to i8
  %8127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8126, i8* %8127, align 1, !tbaa !2434
  %8128 = and i32 %8121, 255
  %8129 = call i32 @llvm.ctpop.i32(i32 %8128) #16
  %8130 = trunc i32 %8129 to i8
  %8131 = and i8 %8130, 1
  %8132 = xor i8 %8131, 1
  %8133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8132, i8* %8133, align 1, !tbaa !2448
  %8134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8134, align 1, !tbaa !2449
  %8135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8135, align 1, !tbaa !2450
  %8136 = lshr i32 %8121, 31
  %8137 = trunc i32 %8136 to i8
  %8138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8137, i8* %8138, align 1, !tbaa !2451
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8126, i8* %8139, align 1, !tbaa !2452
  %8140 = load i64, i64* %RBP
  %8141 = sub i64 %8140, 68
  %8142 = load i64, i64* %PC
  %8143 = add i64 %8142, 3
  store i64 %8143, i64* %PC
  %8144 = inttoptr i64 %8141 to i32*
  %8145 = load i32, i32* %8144
  %8146 = zext i32 %8145 to i64
  store i64 %8146, i64* %RSI, align 8, !tbaa !2428
  %8147 = load i64, i64* %RBP
  %8148 = sub i64 %8147, 40
  %8149 = load i64, i64* %PC
  %8150 = add i64 %8149, 4
  store i64 %8150, i64* %PC
  %8151 = inttoptr i64 %8148 to i64*
  %8152 = load i64, i64* %8151
  store i64 %8152, i64* %RCX, align 8, !tbaa !2428
  %8153 = load i64, i64* %RSI
  %8154 = load i64, i64* %RCX
  %8155 = add i64 %8154, 16
  %8156 = load i64, i64* %PC
  %8157 = add i64 %8156, 4
  store i64 %8157, i64* %PC
  %8158 = inttoptr i64 %8155 to i32*
  %8159 = load i32, i32* %8158
  %8160 = shl i64 %8153, 32
  %8161 = ashr exact i64 %8160, 32
  %8162 = sext i32 %8159 to i64
  %8163 = mul nsw i64 %8162, %8161
  %8164 = trunc i64 %8163 to i32
  %8165 = and i64 %8163, 4294967295
  store i64 %8165, i64* %RSI, align 8, !tbaa !2428
  %8166 = shl i64 %8163, 32
  %8167 = ashr exact i64 %8166, 32
  %8168 = icmp ne i64 %8167, %8163
  %8169 = zext i1 %8168 to i8
  %8170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8169, i8* %8170, align 1, !tbaa !2434
  %8171 = and i32 %8164, 255
  %8172 = call i32 @llvm.ctpop.i32(i32 %8171) #16
  %8173 = trunc i32 %8172 to i8
  %8174 = and i8 %8173, 1
  %8175 = xor i8 %8174, 1
  %8176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8175, i8* %8176, align 1, !tbaa !2448
  %8177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8177, align 1, !tbaa !2449
  %8178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8178, align 1, !tbaa !2450
  %8179 = lshr i32 %8164, 31
  %8180 = trunc i32 %8179 to i8
  %8181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8180, i8* %8181, align 1, !tbaa !2451
  %8182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8169, i8* %8182, align 1, !tbaa !2452
  %8183 = load i64, i64* %RBP
  %8184 = sub i64 %8183, 40
  %8185 = load i64, i64* %PC
  %8186 = add i64 %8185, 4
  store i64 %8186, i64* %PC
  %8187 = inttoptr i64 %8184 to i64*
  %8188 = load i64, i64* %8187
  store i64 %8188, i64* %RCX, align 8, !tbaa !2428
  %8189 = load i64, i64* %RSI
  %8190 = load i64, i64* %RCX
  %8191 = add i64 %8190, 20
  %8192 = load i64, i64* %PC
  %8193 = add i64 %8192, 4
  store i64 %8193, i64* %PC
  %8194 = inttoptr i64 %8191 to i32*
  %8195 = load i32, i32* %8194
  %8196 = shl i64 %8189, 32
  %8197 = ashr exact i64 %8196, 32
  %8198 = sext i32 %8195 to i64
  %8199 = mul nsw i64 %8198, %8197
  %8200 = trunc i64 %8199 to i32
  %8201 = and i64 %8199, 4294967295
  store i64 %8201, i64* %RSI, align 8, !tbaa !2428
  %8202 = shl i64 %8199, 32
  %8203 = ashr exact i64 %8202, 32
  %8204 = icmp ne i64 %8203, %8199
  %8205 = zext i1 %8204 to i8
  %8206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8205, i8* %8206, align 1, !tbaa !2434
  %8207 = and i32 %8200, 255
  %8208 = call i32 @llvm.ctpop.i32(i32 %8207) #16
  %8209 = trunc i32 %8208 to i8
  %8210 = and i8 %8209, 1
  %8211 = xor i8 %8210, 1
  %8212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8211, i8* %8212, align 1, !tbaa !2448
  %8213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8213, align 1, !tbaa !2449
  %8214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8214, align 1, !tbaa !2450
  %8215 = lshr i32 %8200, 31
  %8216 = trunc i32 %8215 to i8
  %8217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8216, i8* %8217, align 1, !tbaa !2451
  %8218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8205, i8* %8218, align 1, !tbaa !2452
  %8219 = load i64, i64* %RDX
  %8220 = load i32, i32* %ESI
  %8221 = zext i32 %8220 to i64
  %8222 = load i64, i64* %PC
  %8223 = add i64 %8222, 2
  store i64 %8223, i64* %PC
  %8224 = trunc i64 %8219 to i32
  %8225 = add i32 %8220, %8224
  %8226 = zext i32 %8225 to i64
  store i64 %8226, i64* %RDX, align 8, !tbaa !2428
  %8227 = icmp ult i32 %8225, %8224
  %8228 = icmp ult i32 %8225, %8220
  %8229 = or i1 %8227, %8228
  %8230 = zext i1 %8229 to i8
  %8231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8230, i8* %8231, align 1, !tbaa !2434
  %8232 = and i32 %8225, 255
  %8233 = call i32 @llvm.ctpop.i32(i32 %8232) #16
  %8234 = trunc i32 %8233 to i8
  %8235 = and i8 %8234, 1
  %8236 = xor i8 %8235, 1
  %8237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8236, i8* %8237, align 1, !tbaa !2448
  %8238 = xor i64 %8221, %8219
  %8239 = trunc i64 %8238 to i32
  %8240 = xor i32 %8239, %8225
  %8241 = lshr i32 %8240, 4
  %8242 = trunc i32 %8241 to i8
  %8243 = and i8 %8242, 1
  %8244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8243, i8* %8244, align 1, !tbaa !2449
  %8245 = icmp eq i32 %8225, 0
  %8246 = zext i1 %8245 to i8
  %8247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8246, i8* %8247, align 1, !tbaa !2450
  %8248 = lshr i32 %8225, 31
  %8249 = trunc i32 %8248 to i8
  %8250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8249, i8* %8250, align 1, !tbaa !2451
  %8251 = lshr i32 %8224, 31
  %8252 = lshr i32 %8220, 31
  %8253 = xor i32 %8248, %8251
  %8254 = xor i32 %8248, %8252
  %8255 = add nuw nsw i32 %8253, %8254
  %8256 = icmp eq i32 %8255, 2
  %8257 = zext i1 %8256 to i8
  %8258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8257, i8* %8258, align 1, !tbaa !2452
  %8259 = load i64, i64* %RBP
  %8260 = sub i64 %8259, 72
  %8261 = load i64, i64* %PC
  %8262 = add i64 %8261, 3
  store i64 %8262, i64* %PC
  %8263 = inttoptr i64 %8260 to i32*
  %8264 = load i32, i32* %8263
  %8265 = zext i32 %8264 to i64
  store i64 %8265, i64* %RSI, align 8, !tbaa !2428
  %8266 = load i64, i64* %RSI
  %8267 = load i64, i64* %PC
  %8268 = add i64 %8267, 3
  store i64 %8268, i64* %PC
  %8269 = trunc i64 %8266 to i32
  %8270 = sub i32 %8269, 1
  %8271 = zext i32 %8270 to i64
  store i64 %8271, i64* %RSI, align 8, !tbaa !2428
  %8272 = icmp ult i32 %8269, 1
  %8273 = zext i1 %8272 to i8
  %8274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8273, i8* %8274, align 1, !tbaa !2434
  %8275 = and i32 %8270, 255
  %8276 = call i32 @llvm.ctpop.i32(i32 %8275) #16
  %8277 = trunc i32 %8276 to i8
  %8278 = and i8 %8277, 1
  %8279 = xor i8 %8278, 1
  %8280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8279, i8* %8280, align 1, !tbaa !2448
  %8281 = xor i64 1, %8266
  %8282 = trunc i64 %8281 to i32
  %8283 = xor i32 %8282, %8270
  %8284 = lshr i32 %8283, 4
  %8285 = trunc i32 %8284 to i8
  %8286 = and i8 %8285, 1
  %8287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8286, i8* %8287, align 1, !tbaa !2449
  %8288 = icmp eq i32 %8270, 0
  %8289 = zext i1 %8288 to i8
  %8290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8289, i8* %8290, align 1, !tbaa !2450
  %8291 = lshr i32 %8270, 31
  %8292 = trunc i32 %8291 to i8
  %8293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8292, i8* %8293, align 1, !tbaa !2451
  %8294 = lshr i32 %8269, 31
  %8295 = xor i32 %8291, %8294
  %8296 = add nuw nsw i32 %8295, %8294
  %8297 = icmp eq i32 %8296, 2
  %8298 = zext i1 %8297 to i8
  %8299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8298, i8* %8299, align 1, !tbaa !2452
  %8300 = load i64, i64* %RBP
  %8301 = sub i64 %8300, 40
  %8302 = load i64, i64* %PC
  %8303 = add i64 %8302, 4
  store i64 %8303, i64* %PC
  %8304 = inttoptr i64 %8301 to i64*
  %8305 = load i64, i64* %8304
  store i64 %8305, i64* %RCX, align 8, !tbaa !2428
  %8306 = load i64, i64* %RSI
  %8307 = load i64, i64* %RCX
  %8308 = add i64 %8307, 20
  %8309 = load i64, i64* %PC
  %8310 = add i64 %8309, 4
  store i64 %8310, i64* %PC
  %8311 = inttoptr i64 %8308 to i32*
  %8312 = load i32, i32* %8311
  %8313 = shl i64 %8306, 32
  %8314 = ashr exact i64 %8313, 32
  %8315 = sext i32 %8312 to i64
  %8316 = mul nsw i64 %8315, %8314
  %8317 = trunc i64 %8316 to i32
  %8318 = and i64 %8316, 4294967295
  store i64 %8318, i64* %RSI, align 8, !tbaa !2428
  %8319 = shl i64 %8316, 32
  %8320 = ashr exact i64 %8319, 32
  %8321 = icmp ne i64 %8320, %8316
  %8322 = zext i1 %8321 to i8
  %8323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8322, i8* %8323, align 1, !tbaa !2434
  %8324 = and i32 %8317, 255
  %8325 = call i32 @llvm.ctpop.i32(i32 %8324) #16
  %8326 = trunc i32 %8325 to i8
  %8327 = and i8 %8326, 1
  %8328 = xor i8 %8327, 1
  %8329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8328, i8* %8329, align 1, !tbaa !2448
  %8330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8330, align 1, !tbaa !2449
  %8331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8331, align 1, !tbaa !2450
  %8332 = lshr i32 %8317, 31
  %8333 = trunc i32 %8332 to i8
  %8334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8333, i8* %8334, align 1, !tbaa !2451
  %8335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8322, i8* %8335, align 1, !tbaa !2452
  %8336 = load i64, i64* %RDX
  %8337 = load i32, i32* %ESI
  %8338 = zext i32 %8337 to i64
  %8339 = load i64, i64* %PC
  %8340 = add i64 %8339, 2
  store i64 %8340, i64* %PC
  %8341 = trunc i64 %8336 to i32
  %8342 = add i32 %8337, %8341
  %8343 = zext i32 %8342 to i64
  store i64 %8343, i64* %RDX, align 8, !tbaa !2428
  %8344 = icmp ult i32 %8342, %8341
  %8345 = icmp ult i32 %8342, %8337
  %8346 = or i1 %8344, %8345
  %8347 = zext i1 %8346 to i8
  %8348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8347, i8* %8348, align 1, !tbaa !2434
  %8349 = and i32 %8342, 255
  %8350 = call i32 @llvm.ctpop.i32(i32 %8349) #16
  %8351 = trunc i32 %8350 to i8
  %8352 = and i8 %8351, 1
  %8353 = xor i8 %8352, 1
  %8354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8353, i8* %8354, align 1, !tbaa !2448
  %8355 = xor i64 %8338, %8336
  %8356 = trunc i64 %8355 to i32
  %8357 = xor i32 %8356, %8342
  %8358 = lshr i32 %8357, 4
  %8359 = trunc i32 %8358 to i8
  %8360 = and i8 %8359, 1
  %8361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8360, i8* %8361, align 1, !tbaa !2449
  %8362 = icmp eq i32 %8342, 0
  %8363 = zext i1 %8362 to i8
  %8364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8363, i8* %8364, align 1, !tbaa !2450
  %8365 = lshr i32 %8342, 31
  %8366 = trunc i32 %8365 to i8
  %8367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8366, i8* %8367, align 1, !tbaa !2451
  %8368 = lshr i32 %8341, 31
  %8369 = lshr i32 %8337, 31
  %8370 = xor i32 %8365, %8368
  %8371 = xor i32 %8365, %8369
  %8372 = add nuw nsw i32 %8370, %8371
  %8373 = icmp eq i32 %8372, 2
  %8374 = zext i1 %8373 to i8
  %8375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8374, i8* %8375, align 1, !tbaa !2452
  %8376 = load i64, i64* %RBP
  %8377 = sub i64 %8376, 76
  %8378 = load i64, i64* %PC
  %8379 = add i64 %8378, 3
  store i64 %8379, i64* %PC
  %8380 = inttoptr i64 %8377 to i32*
  %8381 = load i32, i32* %8380
  %8382 = zext i32 %8381 to i64
  store i64 %8382, i64* %RSI, align 8, !tbaa !2428
  %8383 = load i64, i64* %RSI
  %8384 = load i64, i64* %PC
  %8385 = add i64 %8384, 3
  store i64 %8385, i64* %PC
  %8386 = trunc i64 %8383 to i32
  %8387 = sub i32 %8386, 1
  %8388 = zext i32 %8387 to i64
  store i64 %8388, i64* %RSI, align 8, !tbaa !2428
  %8389 = icmp ult i32 %8386, 1
  %8390 = zext i1 %8389 to i8
  %8391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8390, i8* %8391, align 1, !tbaa !2434
  %8392 = and i32 %8387, 255
  %8393 = call i32 @llvm.ctpop.i32(i32 %8392) #16
  %8394 = trunc i32 %8393 to i8
  %8395 = and i8 %8394, 1
  %8396 = xor i8 %8395, 1
  %8397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8396, i8* %8397, align 1, !tbaa !2448
  %8398 = xor i64 1, %8383
  %8399 = trunc i64 %8398 to i32
  %8400 = xor i32 %8399, %8387
  %8401 = lshr i32 %8400, 4
  %8402 = trunc i32 %8401 to i8
  %8403 = and i8 %8402, 1
  %8404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8403, i8* %8404, align 1, !tbaa !2449
  %8405 = icmp eq i32 %8387, 0
  %8406 = zext i1 %8405 to i8
  %8407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8406, i8* %8407, align 1, !tbaa !2450
  %8408 = lshr i32 %8387, 31
  %8409 = trunc i32 %8408 to i8
  %8410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8409, i8* %8410, align 1, !tbaa !2451
  %8411 = lshr i32 %8386, 31
  %8412 = xor i32 %8408, %8411
  %8413 = add nuw nsw i32 %8412, %8411
  %8414 = icmp eq i32 %8413, 2
  %8415 = zext i1 %8414 to i8
  %8416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8415, i8* %8416, align 1, !tbaa !2452
  %8417 = load i64, i64* %RDX
  %8418 = load i32, i32* %ESI
  %8419 = zext i32 %8418 to i64
  %8420 = load i64, i64* %PC
  %8421 = add i64 %8420, 2
  store i64 %8421, i64* %PC
  %8422 = trunc i64 %8417 to i32
  %8423 = add i32 %8418, %8422
  %8424 = zext i32 %8423 to i64
  store i64 %8424, i64* %RDX, align 8, !tbaa !2428
  %8425 = icmp ult i32 %8423, %8422
  %8426 = icmp ult i32 %8423, %8418
  %8427 = or i1 %8425, %8426
  %8428 = zext i1 %8427 to i8
  %8429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8428, i8* %8429, align 1, !tbaa !2434
  %8430 = and i32 %8423, 255
  %8431 = call i32 @llvm.ctpop.i32(i32 %8430) #16
  %8432 = trunc i32 %8431 to i8
  %8433 = and i8 %8432, 1
  %8434 = xor i8 %8433, 1
  %8435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8434, i8* %8435, align 1, !tbaa !2448
  %8436 = xor i64 %8419, %8417
  %8437 = trunc i64 %8436 to i32
  %8438 = xor i32 %8437, %8423
  %8439 = lshr i32 %8438, 4
  %8440 = trunc i32 %8439 to i8
  %8441 = and i8 %8440, 1
  %8442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8441, i8* %8442, align 1, !tbaa !2449
  %8443 = icmp eq i32 %8423, 0
  %8444 = zext i1 %8443 to i8
  %8445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8444, i8* %8445, align 1, !tbaa !2450
  %8446 = lshr i32 %8423, 31
  %8447 = trunc i32 %8446 to i8
  %8448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8447, i8* %8448, align 1, !tbaa !2451
  %8449 = lshr i32 %8422, 31
  %8450 = lshr i32 %8418, 31
  %8451 = xor i32 %8446, %8449
  %8452 = xor i32 %8446, %8450
  %8453 = add nuw nsw i32 %8451, %8452
  %8454 = icmp eq i32 %8453, 2
  %8455 = zext i1 %8454 to i8
  %8456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8455, i8* %8456, align 1, !tbaa !2452
  %8457 = load i32, i32* %EDX
  %8458 = zext i32 %8457 to i64
  %8459 = load i64, i64* %PC
  %8460 = add i64 %8459, 3
  store i64 %8460, i64* %PC
  %8461 = shl i64 %8458, 32
  %8462 = ashr exact i64 %8461, 32
  store i64 %8462, i64* %RCX, align 8, !tbaa !2428
  %8463 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8464 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8465 = load i64, i64* %RAX
  %8466 = load i64, i64* %RCX
  %8467 = mul i64 %8466, 4
  %8468 = add i64 %8467, %8465
  %8469 = load i64, i64* %PC
  %8470 = add i64 %8469, 5
  store i64 %8470, i64* %PC
  %8471 = bitcast i8* %8464 to <2 x float>*
  %8472 = load <2 x float>, <2 x float>* %8471, align 1
  %8473 = getelementptr inbounds i8, i8* %8464, i64 8
  %8474 = bitcast i8* %8473 to <2 x i32>*
  %8475 = load <2 x i32>, <2 x i32>* %8474, align 1
  %8476 = inttoptr i64 %8468 to float*
  %8477 = load float, float* %8476
  %8478 = extractelement <2 x float> %8472, i32 0
  %8479 = fadd float %8478, %8477
  %8480 = bitcast i8* %8463 to float*
  store float %8479, float* %8480, align 1, !tbaa !2453
  %8481 = bitcast <2 x float> %8472 to <2 x i32>
  %8482 = extractelement <2 x i32> %8481, i32 1
  %8483 = getelementptr inbounds i8, i8* %8463, i64 4
  %8484 = bitcast i8* %8483 to i32*
  store i32 %8482, i32* %8484, align 1, !tbaa !2453
  %8485 = extractelement <2 x i32> %8475, i32 0
  %8486 = getelementptr inbounds i8, i8* %8463, i64 8
  %8487 = bitcast i8* %8486 to i32*
  store i32 %8485, i32* %8487, align 1, !tbaa !2453
  %8488 = extractelement <2 x i32> %8475, i32 1
  %8489 = getelementptr inbounds i8, i8* %8463, i64 12
  %8490 = bitcast i8* %8489 to i32*
  store i32 %8488, i32* %8490, align 1, !tbaa !2453
  %8491 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8492 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8493 = bitcast %union.vec128_t* %XMM2 to i8*
  %8494 = load i64, i64* %PC
  %8495 = add i64 %8494, 4
  store i64 %8495, i64* %PC
  %8496 = bitcast i8* %8492 to <2 x float>*
  %8497 = load <2 x float>, <2 x float>* %8496, align 1
  %8498 = getelementptr inbounds i8, i8* %8492, i64 8
  %8499 = bitcast i8* %8498 to <2 x i32>*
  %8500 = load <2 x i32>, <2 x i32>* %8499, align 1
  %8501 = bitcast i8* %8493 to <2 x float>*
  %8502 = load <2 x float>, <2 x float>* %8501, align 1
  %8503 = extractelement <2 x float> %8497, i32 0
  %8504 = extractelement <2 x float> %8502, i32 0
  %8505 = fmul float %8503, %8504
  %8506 = bitcast i8* %8491 to float*
  store float %8505, float* %8506, align 1, !tbaa !2453
  %8507 = bitcast <2 x float> %8497 to <2 x i32>
  %8508 = extractelement <2 x i32> %8507, i32 1
  %8509 = getelementptr inbounds i8, i8* %8491, i64 4
  %8510 = bitcast i8* %8509 to i32*
  store i32 %8508, i32* %8510, align 1, !tbaa !2453
  %8511 = extractelement <2 x i32> %8500, i32 0
  %8512 = getelementptr inbounds i8, i8* %8491, i64 8
  %8513 = bitcast i8* %8512 to i32*
  store i32 %8511, i32* %8513, align 1, !tbaa !2453
  %8514 = extractelement <2 x i32> %8500, i32 1
  %8515 = getelementptr inbounds i8, i8* %8491, i64 12
  %8516 = bitcast i8* %8515 to i32*
  store i32 %8514, i32* %8516, align 1, !tbaa !2453
  %8517 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8518 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8519 = bitcast %union.vec128_t* %XMM1 to i8*
  %8520 = load i64, i64* %PC
  %8521 = add i64 %8520, 4
  store i64 %8521, i64* %PC
  %8522 = bitcast i8* %8518 to <2 x float>*
  %8523 = load <2 x float>, <2 x float>* %8522, align 1
  %8524 = getelementptr inbounds i8, i8* %8518, i64 8
  %8525 = bitcast i8* %8524 to <2 x i32>*
  %8526 = load <2 x i32>, <2 x i32>* %8525, align 1
  %8527 = bitcast i8* %8519 to <2 x float>*
  %8528 = load <2 x float>, <2 x float>* %8527, align 1
  %8529 = extractelement <2 x float> %8523, i32 0
  %8530 = extractelement <2 x float> %8528, i32 0
  %8531 = fadd float %8529, %8530
  %8532 = bitcast i8* %8517 to float*
  store float %8531, float* %8532, align 1, !tbaa !2453
  %8533 = bitcast <2 x float> %8523 to <2 x i32>
  %8534 = extractelement <2 x i32> %8533, i32 1
  %8535 = getelementptr inbounds i8, i8* %8517, i64 4
  %8536 = bitcast i8* %8535 to i32*
  store i32 %8534, i32* %8536, align 1, !tbaa !2453
  %8537 = extractelement <2 x i32> %8526, i32 0
  %8538 = getelementptr inbounds i8, i8* %8517, i64 8
  %8539 = bitcast i8* %8538 to i32*
  store i32 %8537, i32* %8539, align 1, !tbaa !2453
  %8540 = extractelement <2 x i32> %8526, i32 1
  %8541 = getelementptr inbounds i8, i8* %8517, i64 12
  %8542 = bitcast i8* %8541 to i32*
  store i32 %8540, i32* %8542, align 1, !tbaa !2453
  %8543 = load i64, i64* %RBP
  %8544 = sub i64 %8543, 24
  %8545 = load i64, i64* %PC
  %8546 = add i64 %8545, 4
  store i64 %8546, i64* %PC
  %8547 = inttoptr i64 %8544 to i64*
  %8548 = load i64, i64* %8547
  store i64 %8548, i64* %RAX, align 8, !tbaa !2428
  %8549 = load i64, i64* %RAX
  %8550 = load i64, i64* %PC
  %8551 = add i64 %8550, 3
  store i64 %8551, i64* %PC
  %8552 = inttoptr i64 %8549 to i64*
  %8553 = load i64, i64* %8552
  store i64 %8553, i64* %RAX, align 8, !tbaa !2428
  %8554 = load i64, i64* %RBP
  %8555 = sub i64 %8554, 24
  %8556 = load i64, i64* %PC
  %8557 = add i64 %8556, 4
  store i64 %8557, i64* %PC
  %8558 = inttoptr i64 %8555 to i64*
  %8559 = load i64, i64* %8558
  store i64 %8559, i64* %RCX, align 8, !tbaa !2428
  %8560 = load i64, i64* %RCX
  %8561 = add i64 %8560, 12
  %8562 = load i64, i64* %PC
  %8563 = add i64 %8562, 3
  store i64 %8563, i64* %PC
  %8564 = inttoptr i64 %8561 to i32*
  %8565 = load i32, i32* %8564
  %8566 = zext i32 %8565 to i64
  store i64 %8566, i64* %RDX, align 8, !tbaa !2428
  %8567 = load i64, i64* %RDX
  %8568 = load i64, i64* %PC
  %8569 = add i64 %8568, 3
  store i64 %8569, i64* %PC
  %8570 = trunc i64 %8567 to i32
  %8571 = shl i32 %8570, 1
  %8572 = icmp slt i32 %8570, 0
  %8573 = icmp slt i32 %8571, 0
  %8574 = xor i1 %8572, %8573
  %8575 = zext i32 %8571 to i64
  store i64 %8575, i64* %RDX, align 8, !tbaa !2428
  %8576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8577 = zext i1 %8572 to i8
  store i8 %8577, i8* %8576, align 1, !tbaa !2455
  %8578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8579 = and i32 %8571, 254
  %8580 = call i32 @llvm.ctpop.i32(i32 %8579) #16
  %8581 = trunc i32 %8580 to i8
  %8582 = and i8 %8581, 1
  %8583 = xor i8 %8582, 1
  store i8 %8583, i8* %8578, align 1, !tbaa !2455
  %8584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8584, align 1, !tbaa !2455
  %8585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8586 = icmp eq i32 %8571, 0
  %8587 = zext i1 %8586 to i8
  store i8 %8587, i8* %8585, align 1, !tbaa !2455
  %8588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8589 = lshr i32 %8571, 31
  %8590 = trunc i32 %8589 to i8
  store i8 %8590, i8* %8588, align 1, !tbaa !2455
  %8591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8592 = zext i1 %8574 to i8
  store i8 %8592, i8* %8591, align 1, !tbaa !2455
  %8593 = load i64, i64* %RBP
  %8594 = sub i64 %8593, 24
  %8595 = load i64, i64* %PC
  %8596 = add i64 %8595, 4
  store i64 %8596, i64* %PC
  %8597 = inttoptr i64 %8594 to i64*
  %8598 = load i64, i64* %8597
  store i64 %8598, i64* %RCX, align 8, !tbaa !2428
  %8599 = load i64, i64* %RDX
  %8600 = load i64, i64* %RCX
  %8601 = add i64 %8600, 16
  %8602 = load i64, i64* %PC
  %8603 = add i64 %8602, 4
  store i64 %8603, i64* %PC
  %8604 = inttoptr i64 %8601 to i32*
  %8605 = load i32, i32* %8604
  %8606 = shl i64 %8599, 32
  %8607 = ashr exact i64 %8606, 32
  %8608 = sext i32 %8605 to i64
  %8609 = mul nsw i64 %8608, %8607
  %8610 = trunc i64 %8609 to i32
  %8611 = and i64 %8609, 4294967295
  store i64 %8611, i64* %RDX, align 8, !tbaa !2428
  %8612 = shl i64 %8609, 32
  %8613 = ashr exact i64 %8612, 32
  %8614 = icmp ne i64 %8613, %8609
  %8615 = zext i1 %8614 to i8
  %8616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8615, i8* %8616, align 1, !tbaa !2434
  %8617 = and i32 %8610, 255
  %8618 = call i32 @llvm.ctpop.i32(i32 %8617) #16
  %8619 = trunc i32 %8618 to i8
  %8620 = and i8 %8619, 1
  %8621 = xor i8 %8620, 1
  %8622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8621, i8* %8622, align 1, !tbaa !2448
  %8623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8623, align 1, !tbaa !2449
  %8624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8624, align 1, !tbaa !2450
  %8625 = lshr i32 %8610, 31
  %8626 = trunc i32 %8625 to i8
  %8627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8626, i8* %8627, align 1, !tbaa !2451
  %8628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8615, i8* %8628, align 1, !tbaa !2452
  %8629 = load i64, i64* %RBP
  %8630 = sub i64 %8629, 24
  %8631 = load i64, i64* %PC
  %8632 = add i64 %8631, 4
  store i64 %8632, i64* %PC
  %8633 = inttoptr i64 %8630 to i64*
  %8634 = load i64, i64* %8633
  store i64 %8634, i64* %RCX, align 8, !tbaa !2428
  %8635 = load i64, i64* %RDX
  %8636 = load i64, i64* %RCX
  %8637 = add i64 %8636, 20
  %8638 = load i64, i64* %PC
  %8639 = add i64 %8638, 4
  store i64 %8639, i64* %PC
  %8640 = inttoptr i64 %8637 to i32*
  %8641 = load i32, i32* %8640
  %8642 = shl i64 %8635, 32
  %8643 = ashr exact i64 %8642, 32
  %8644 = sext i32 %8641 to i64
  %8645 = mul nsw i64 %8644, %8643
  %8646 = trunc i64 %8645 to i32
  %8647 = and i64 %8645, 4294967295
  store i64 %8647, i64* %RDX, align 8, !tbaa !2428
  %8648 = shl i64 %8645, 32
  %8649 = ashr exact i64 %8648, 32
  %8650 = icmp ne i64 %8649, %8645
  %8651 = zext i1 %8650 to i8
  %8652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8651, i8* %8652, align 1, !tbaa !2434
  %8653 = and i32 %8646, 255
  %8654 = call i32 @llvm.ctpop.i32(i32 %8653) #16
  %8655 = trunc i32 %8654 to i8
  %8656 = and i8 %8655, 1
  %8657 = xor i8 %8656, 1
  %8658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8657, i8* %8658, align 1, !tbaa !2448
  %8659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8659, align 1, !tbaa !2449
  %8660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8660, align 1, !tbaa !2450
  %8661 = lshr i32 %8646, 31
  %8662 = trunc i32 %8661 to i8
  %8663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8662, i8* %8663, align 1, !tbaa !2451
  %8664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8651, i8* %8664, align 1, !tbaa !2452
  %8665 = load i64, i64* %RBP
  %8666 = sub i64 %8665, 68
  %8667 = load i64, i64* %PC
  %8668 = add i64 %8667, 3
  store i64 %8668, i64* %PC
  %8669 = inttoptr i64 %8666 to i32*
  %8670 = load i32, i32* %8669
  %8671 = zext i32 %8670 to i64
  store i64 %8671, i64* %RSI, align 8, !tbaa !2428
  %8672 = load i64, i64* %RBP
  %8673 = sub i64 %8672, 24
  %8674 = load i64, i64* %PC
  %8675 = add i64 %8674, 4
  store i64 %8675, i64* %PC
  %8676 = inttoptr i64 %8673 to i64*
  %8677 = load i64, i64* %8676
  store i64 %8677, i64* %RCX, align 8, !tbaa !2428
  %8678 = load i64, i64* %RSI
  %8679 = load i64, i64* %RCX
  %8680 = add i64 %8679, 16
  %8681 = load i64, i64* %PC
  %8682 = add i64 %8681, 4
  store i64 %8682, i64* %PC
  %8683 = inttoptr i64 %8680 to i32*
  %8684 = load i32, i32* %8683
  %8685 = shl i64 %8678, 32
  %8686 = ashr exact i64 %8685, 32
  %8687 = sext i32 %8684 to i64
  %8688 = mul nsw i64 %8687, %8686
  %8689 = trunc i64 %8688 to i32
  %8690 = and i64 %8688, 4294967295
  store i64 %8690, i64* %RSI, align 8, !tbaa !2428
  %8691 = shl i64 %8688, 32
  %8692 = ashr exact i64 %8691, 32
  %8693 = icmp ne i64 %8692, %8688
  %8694 = zext i1 %8693 to i8
  %8695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8694, i8* %8695, align 1, !tbaa !2434
  %8696 = and i32 %8689, 255
  %8697 = call i32 @llvm.ctpop.i32(i32 %8696) #16
  %8698 = trunc i32 %8697 to i8
  %8699 = and i8 %8698, 1
  %8700 = xor i8 %8699, 1
  %8701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8700, i8* %8701, align 1, !tbaa !2448
  %8702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8702, align 1, !tbaa !2449
  %8703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8703, align 1, !tbaa !2450
  %8704 = lshr i32 %8689, 31
  %8705 = trunc i32 %8704 to i8
  %8706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8705, i8* %8706, align 1, !tbaa !2451
  %8707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8694, i8* %8707, align 1, !tbaa !2452
  %8708 = load i64, i64* %RBP
  %8709 = sub i64 %8708, 24
  %8710 = load i64, i64* %PC
  %8711 = add i64 %8710, 4
  store i64 %8711, i64* %PC
  %8712 = inttoptr i64 %8709 to i64*
  %8713 = load i64, i64* %8712
  store i64 %8713, i64* %RCX, align 8, !tbaa !2428
  %8714 = load i64, i64* %RSI
  %8715 = load i64, i64* %RCX
  %8716 = add i64 %8715, 20
  %8717 = load i64, i64* %PC
  %8718 = add i64 %8717, 4
  store i64 %8718, i64* %PC
  %8719 = inttoptr i64 %8716 to i32*
  %8720 = load i32, i32* %8719
  %8721 = shl i64 %8714, 32
  %8722 = ashr exact i64 %8721, 32
  %8723 = sext i32 %8720 to i64
  %8724 = mul nsw i64 %8723, %8722
  %8725 = trunc i64 %8724 to i32
  %8726 = and i64 %8724, 4294967295
  store i64 %8726, i64* %RSI, align 8, !tbaa !2428
  %8727 = shl i64 %8724, 32
  %8728 = ashr exact i64 %8727, 32
  %8729 = icmp ne i64 %8728, %8724
  %8730 = zext i1 %8729 to i8
  %8731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8730, i8* %8731, align 1, !tbaa !2434
  %8732 = and i32 %8725, 255
  %8733 = call i32 @llvm.ctpop.i32(i32 %8732) #16
  %8734 = trunc i32 %8733 to i8
  %8735 = and i8 %8734, 1
  %8736 = xor i8 %8735, 1
  %8737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8736, i8* %8737, align 1, !tbaa !2448
  %8738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8738, align 1, !tbaa !2449
  %8739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8739, align 1, !tbaa !2450
  %8740 = lshr i32 %8725, 31
  %8741 = trunc i32 %8740 to i8
  %8742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8741, i8* %8742, align 1, !tbaa !2451
  %8743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8730, i8* %8743, align 1, !tbaa !2452
  %8744 = load i64, i64* %RDX
  %8745 = load i32, i32* %ESI
  %8746 = zext i32 %8745 to i64
  %8747 = load i64, i64* %PC
  %8748 = add i64 %8747, 2
  store i64 %8748, i64* %PC
  %8749 = trunc i64 %8744 to i32
  %8750 = add i32 %8745, %8749
  %8751 = zext i32 %8750 to i64
  store i64 %8751, i64* %RDX, align 8, !tbaa !2428
  %8752 = icmp ult i32 %8750, %8749
  %8753 = icmp ult i32 %8750, %8745
  %8754 = or i1 %8752, %8753
  %8755 = zext i1 %8754 to i8
  %8756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8755, i8* %8756, align 1, !tbaa !2434
  %8757 = and i32 %8750, 255
  %8758 = call i32 @llvm.ctpop.i32(i32 %8757) #16
  %8759 = trunc i32 %8758 to i8
  %8760 = and i8 %8759, 1
  %8761 = xor i8 %8760, 1
  %8762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8761, i8* %8762, align 1, !tbaa !2448
  %8763 = xor i64 %8746, %8744
  %8764 = trunc i64 %8763 to i32
  %8765 = xor i32 %8764, %8750
  %8766 = lshr i32 %8765, 4
  %8767 = trunc i32 %8766 to i8
  %8768 = and i8 %8767, 1
  %8769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8768, i8* %8769, align 1, !tbaa !2449
  %8770 = icmp eq i32 %8750, 0
  %8771 = zext i1 %8770 to i8
  %8772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8771, i8* %8772, align 1, !tbaa !2450
  %8773 = lshr i32 %8750, 31
  %8774 = trunc i32 %8773 to i8
  %8775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8774, i8* %8775, align 1, !tbaa !2451
  %8776 = lshr i32 %8749, 31
  %8777 = lshr i32 %8745, 31
  %8778 = xor i32 %8773, %8776
  %8779 = xor i32 %8773, %8777
  %8780 = add nuw nsw i32 %8778, %8779
  %8781 = icmp eq i32 %8780, 2
  %8782 = zext i1 %8781 to i8
  %8783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8782, i8* %8783, align 1, !tbaa !2452
  %8784 = load i64, i64* %RBP
  %8785 = sub i64 %8784, 72
  %8786 = load i64, i64* %PC
  %8787 = add i64 %8786, 3
  store i64 %8787, i64* %PC
  %8788 = inttoptr i64 %8785 to i32*
  %8789 = load i32, i32* %8788
  %8790 = zext i32 %8789 to i64
  store i64 %8790, i64* %RSI, align 8, !tbaa !2428
  %8791 = load i64, i64* %RBP
  %8792 = sub i64 %8791, 24
  %8793 = load i64, i64* %PC
  %8794 = add i64 %8793, 4
  store i64 %8794, i64* %PC
  %8795 = inttoptr i64 %8792 to i64*
  %8796 = load i64, i64* %8795
  store i64 %8796, i64* %RCX, align 8, !tbaa !2428
  %8797 = load i64, i64* %RSI
  %8798 = load i64, i64* %RCX
  %8799 = add i64 %8798, 20
  %8800 = load i64, i64* %PC
  %8801 = add i64 %8800, 4
  store i64 %8801, i64* %PC
  %8802 = inttoptr i64 %8799 to i32*
  %8803 = load i32, i32* %8802
  %8804 = shl i64 %8797, 32
  %8805 = ashr exact i64 %8804, 32
  %8806 = sext i32 %8803 to i64
  %8807 = mul nsw i64 %8806, %8805
  %8808 = trunc i64 %8807 to i32
  %8809 = and i64 %8807, 4294967295
  store i64 %8809, i64* %RSI, align 8, !tbaa !2428
  %8810 = shl i64 %8807, 32
  %8811 = ashr exact i64 %8810, 32
  %8812 = icmp ne i64 %8811, %8807
  %8813 = zext i1 %8812 to i8
  %8814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8813, i8* %8814, align 1, !tbaa !2434
  %8815 = and i32 %8808, 255
  %8816 = call i32 @llvm.ctpop.i32(i32 %8815) #16
  %8817 = trunc i32 %8816 to i8
  %8818 = and i8 %8817, 1
  %8819 = xor i8 %8818, 1
  %8820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8819, i8* %8820, align 1, !tbaa !2448
  %8821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8821, align 1, !tbaa !2449
  %8822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8822, align 1, !tbaa !2450
  %8823 = lshr i32 %8808, 31
  %8824 = trunc i32 %8823 to i8
  %8825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8824, i8* %8825, align 1, !tbaa !2451
  %8826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8813, i8* %8826, align 1, !tbaa !2452
  %8827 = load i64, i64* %RDX
  %8828 = load i32, i32* %ESI
  %8829 = zext i32 %8828 to i64
  %8830 = load i64, i64* %PC
  %8831 = add i64 %8830, 2
  store i64 %8831, i64* %PC
  %8832 = trunc i64 %8827 to i32
  %8833 = add i32 %8828, %8832
  %8834 = zext i32 %8833 to i64
  store i64 %8834, i64* %RDX, align 8, !tbaa !2428
  %8835 = icmp ult i32 %8833, %8832
  %8836 = icmp ult i32 %8833, %8828
  %8837 = or i1 %8835, %8836
  %8838 = zext i1 %8837 to i8
  %8839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8838, i8* %8839, align 1, !tbaa !2434
  %8840 = and i32 %8833, 255
  %8841 = call i32 @llvm.ctpop.i32(i32 %8840) #16
  %8842 = trunc i32 %8841 to i8
  %8843 = and i8 %8842, 1
  %8844 = xor i8 %8843, 1
  %8845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8844, i8* %8845, align 1, !tbaa !2448
  %8846 = xor i64 %8829, %8827
  %8847 = trunc i64 %8846 to i32
  %8848 = xor i32 %8847, %8833
  %8849 = lshr i32 %8848, 4
  %8850 = trunc i32 %8849 to i8
  %8851 = and i8 %8850, 1
  %8852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8851, i8* %8852, align 1, !tbaa !2449
  %8853 = icmp eq i32 %8833, 0
  %8854 = zext i1 %8853 to i8
  %8855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8854, i8* %8855, align 1, !tbaa !2450
  %8856 = lshr i32 %8833, 31
  %8857 = trunc i32 %8856 to i8
  %8858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8857, i8* %8858, align 1, !tbaa !2451
  %8859 = lshr i32 %8832, 31
  %8860 = lshr i32 %8828, 31
  %8861 = xor i32 %8856, %8859
  %8862 = xor i32 %8856, %8860
  %8863 = add nuw nsw i32 %8861, %8862
  %8864 = icmp eq i32 %8863, 2
  %8865 = zext i1 %8864 to i8
  %8866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8865, i8* %8866, align 1, !tbaa !2452
  %8867 = load i64, i64* %RDX
  %8868 = load i64, i64* %RBP
  %8869 = sub i64 %8868, 76
  %8870 = load i64, i64* %PC
  %8871 = add i64 %8870, 3
  store i64 %8871, i64* %PC
  %8872 = trunc i64 %8867 to i32
  %8873 = inttoptr i64 %8869 to i32*
  %8874 = load i32, i32* %8873
  %8875 = add i32 %8874, %8872
  %8876 = zext i32 %8875 to i64
  store i64 %8876, i64* %RDX, align 8, !tbaa !2428
  %8877 = icmp ult i32 %8875, %8872
  %8878 = icmp ult i32 %8875, %8874
  %8879 = or i1 %8877, %8878
  %8880 = zext i1 %8879 to i8
  %8881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8880, i8* %8881, align 1, !tbaa !2434
  %8882 = and i32 %8875, 255
  %8883 = call i32 @llvm.ctpop.i32(i32 %8882) #16
  %8884 = trunc i32 %8883 to i8
  %8885 = and i8 %8884, 1
  %8886 = xor i8 %8885, 1
  %8887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8886, i8* %8887, align 1, !tbaa !2448
  %8888 = xor i32 %8874, %8872
  %8889 = xor i32 %8888, %8875
  %8890 = lshr i32 %8889, 4
  %8891 = trunc i32 %8890 to i8
  %8892 = and i8 %8891, 1
  %8893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8892, i8* %8893, align 1, !tbaa !2449
  %8894 = icmp eq i32 %8875, 0
  %8895 = zext i1 %8894 to i8
  %8896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8895, i8* %8896, align 1, !tbaa !2450
  %8897 = lshr i32 %8875, 31
  %8898 = trunc i32 %8897 to i8
  %8899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8898, i8* %8899, align 1, !tbaa !2451
  %8900 = lshr i32 %8872, 31
  %8901 = lshr i32 %8874, 31
  %8902 = xor i32 %8897, %8900
  %8903 = xor i32 %8897, %8901
  %8904 = add nuw nsw i32 %8902, %8903
  %8905 = icmp eq i32 %8904, 2
  %8906 = zext i1 %8905 to i8
  %8907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8906, i8* %8907, align 1, !tbaa !2452
  %8908 = load i32, i32* %EDX
  %8909 = zext i32 %8908 to i64
  %8910 = load i64, i64* %PC
  %8911 = add i64 %8910, 3
  store i64 %8911, i64* %PC
  %8912 = shl i64 %8909, 32
  %8913 = ashr exact i64 %8912, 32
  store i64 %8913, i64* %RCX, align 8, !tbaa !2428
  %8914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8915 = load i64, i64* %RAX
  %8916 = load i64, i64* %RCX
  %8917 = mul i64 %8916, 4
  %8918 = add i64 %8917, %8915
  %8919 = load i64, i64* %PC
  %8920 = add i64 %8919, 5
  store i64 %8920, i64* %PC
  %8921 = inttoptr i64 %8918 to float*
  %8922 = load float, float* %8921
  %8923 = bitcast i8* %8914 to float*
  store float %8922, float* %8923, align 1, !tbaa !2453
  %8924 = getelementptr inbounds i8, i8* %8914, i64 4
  %8925 = bitcast i8* %8924 to float*
  store float 0.000000e+00, float* %8925, align 1, !tbaa !2453
  %8926 = getelementptr inbounds i8, i8* %8914, i64 8
  %8927 = bitcast i8* %8926 to float*
  store float 0.000000e+00, float* %8927, align 1, !tbaa !2453
  %8928 = getelementptr inbounds i8, i8* %8914, i64 12
  %8929 = bitcast i8* %8928 to float*
  store float 0.000000e+00, float* %8929, align 1, !tbaa !2453
  %8930 = load i64, i64* %RBP
  %8931 = sub i64 %8930, 40
  %8932 = load i64, i64* %PC
  %8933 = add i64 %8932, 4
  store i64 %8933, i64* %PC
  %8934 = inttoptr i64 %8931 to i64*
  %8935 = load i64, i64* %8934
  store i64 %8935, i64* %RAX, align 8, !tbaa !2428
  %8936 = load i64, i64* %RAX
  %8937 = load i64, i64* %PC
  %8938 = add i64 %8937, 3
  store i64 %8938, i64* %PC
  %8939 = inttoptr i64 %8936 to i64*
  %8940 = load i64, i64* %8939
  store i64 %8940, i64* %RAX, align 8, !tbaa !2428
  %8941 = load i64, i64* %RBP
  %8942 = sub i64 %8941, 40
  %8943 = load i64, i64* %PC
  %8944 = add i64 %8943, 4
  store i64 %8944, i64* %PC
  %8945 = inttoptr i64 %8942 to i64*
  %8946 = load i64, i64* %8945
  store i64 %8946, i64* %RCX, align 8, !tbaa !2428
  %8947 = load i64, i64* %RCX
  %8948 = add i64 %8947, 12
  %8949 = load i64, i64* %PC
  %8950 = add i64 %8949, 4
  store i64 %8950, i64* %PC
  %8951 = inttoptr i64 %8948 to i32*
  %8952 = load i32, i32* %8951
  %8953 = sext i32 %8952 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %8954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8954, align 1, !tbaa !2434
  %8955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8955, align 1, !tbaa !2448
  %8956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8956, align 1, !tbaa !2449
  %8957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8957, align 1, !tbaa !2450
  %8958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8958, align 1, !tbaa !2451
  %8959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8959, align 1, !tbaa !2452
  %8960 = load i64, i64* %RBP
  %8961 = sub i64 %8960, 40
  %8962 = load i64, i64* %PC
  %8963 = add i64 %8962, 4
  store i64 %8963, i64* %PC
  %8964 = inttoptr i64 %8961 to i64*
  %8965 = load i64, i64* %8964
  store i64 %8965, i64* %RCX, align 8, !tbaa !2428
  %8966 = load i64, i64* %RDX
  %8967 = load i64, i64* %RCX
  %8968 = add i64 %8967, 16
  %8969 = load i64, i64* %PC
  %8970 = add i64 %8969, 4
  store i64 %8970, i64* %PC
  %8971 = inttoptr i64 %8968 to i32*
  %8972 = load i32, i32* %8971
  %8973 = shl i64 %8966, 32
  %8974 = ashr exact i64 %8973, 32
  %8975 = sext i32 %8972 to i64
  %8976 = mul nsw i64 %8975, %8974
  %8977 = trunc i64 %8976 to i32
  %8978 = and i64 %8976, 4294967295
  store i64 %8978, i64* %RDX, align 8, !tbaa !2428
  %8979 = shl i64 %8976, 32
  %8980 = ashr exact i64 %8979, 32
  %8981 = icmp ne i64 %8980, %8976
  %8982 = zext i1 %8981 to i8
  %8983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8982, i8* %8983, align 1, !tbaa !2434
  %8984 = and i32 %8977, 255
  %8985 = call i32 @llvm.ctpop.i32(i32 %8984) #16
  %8986 = trunc i32 %8985 to i8
  %8987 = and i8 %8986, 1
  %8988 = xor i8 %8987, 1
  %8989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8988, i8* %8989, align 1, !tbaa !2448
  %8990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8990, align 1, !tbaa !2449
  %8991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %8991, align 1, !tbaa !2450
  %8992 = lshr i32 %8977, 31
  %8993 = trunc i32 %8992 to i8
  %8994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8993, i8* %8994, align 1, !tbaa !2451
  %8995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8982, i8* %8995, align 1, !tbaa !2452
  %8996 = load i64, i64* %RBP
  %8997 = sub i64 %8996, 40
  %8998 = load i64, i64* %PC
  %8999 = add i64 %8998, 4
  store i64 %8999, i64* %PC
  %9000 = inttoptr i64 %8997 to i64*
  %9001 = load i64, i64* %9000
  store i64 %9001, i64* %RCX, align 8, !tbaa !2428
  %9002 = load i64, i64* %RDX
  %9003 = load i64, i64* %RCX
  %9004 = add i64 %9003, 20
  %9005 = load i64, i64* %PC
  %9006 = add i64 %9005, 4
  store i64 %9006, i64* %PC
  %9007 = inttoptr i64 %9004 to i32*
  %9008 = load i32, i32* %9007
  %9009 = shl i64 %9002, 32
  %9010 = ashr exact i64 %9009, 32
  %9011 = sext i32 %9008 to i64
  %9012 = mul nsw i64 %9011, %9010
  %9013 = trunc i64 %9012 to i32
  %9014 = and i64 %9012, 4294967295
  store i64 %9014, i64* %RDX, align 8, !tbaa !2428
  %9015 = shl i64 %9012, 32
  %9016 = ashr exact i64 %9015, 32
  %9017 = icmp ne i64 %9016, %9012
  %9018 = zext i1 %9017 to i8
  %9019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9018, i8* %9019, align 1, !tbaa !2434
  %9020 = and i32 %9013, 255
  %9021 = call i32 @llvm.ctpop.i32(i32 %9020) #16
  %9022 = trunc i32 %9021 to i8
  %9023 = and i8 %9022, 1
  %9024 = xor i8 %9023, 1
  %9025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9024, i8* %9025, align 1, !tbaa !2448
  %9026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9026, align 1, !tbaa !2449
  %9027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9027, align 1, !tbaa !2450
  %9028 = lshr i32 %9013, 31
  %9029 = trunc i32 %9028 to i8
  %9030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9029, i8* %9030, align 1, !tbaa !2451
  %9031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9018, i8* %9031, align 1, !tbaa !2452
  %9032 = load i64, i64* %RBP
  %9033 = sub i64 %9032, 68
  %9034 = load i64, i64* %PC
  %9035 = add i64 %9034, 3
  store i64 %9035, i64* %PC
  %9036 = inttoptr i64 %9033 to i32*
  %9037 = load i32, i32* %9036
  %9038 = zext i32 %9037 to i64
  store i64 %9038, i64* %RSI, align 8, !tbaa !2428
  %9039 = load i64, i64* %RSI
  %9040 = load i64, i64* %PC
  %9041 = add i64 %9040, 3
  store i64 %9041, i64* %PC
  %9042 = trunc i64 %9039 to i32
  %9043 = add i32 1, %9042
  %9044 = zext i32 %9043 to i64
  store i64 %9044, i64* %RSI, align 8, !tbaa !2428
  %9045 = icmp ult i32 %9043, %9042
  %9046 = icmp ult i32 %9043, 1
  %9047 = or i1 %9045, %9046
  %9048 = zext i1 %9047 to i8
  %9049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9048, i8* %9049, align 1, !tbaa !2434
  %9050 = and i32 %9043, 255
  %9051 = call i32 @llvm.ctpop.i32(i32 %9050) #16
  %9052 = trunc i32 %9051 to i8
  %9053 = and i8 %9052, 1
  %9054 = xor i8 %9053, 1
  %9055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9054, i8* %9055, align 1, !tbaa !2448
  %9056 = xor i64 1, %9039
  %9057 = trunc i64 %9056 to i32
  %9058 = xor i32 %9057, %9043
  %9059 = lshr i32 %9058, 4
  %9060 = trunc i32 %9059 to i8
  %9061 = and i8 %9060, 1
  %9062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9061, i8* %9062, align 1, !tbaa !2449
  %9063 = icmp eq i32 %9043, 0
  %9064 = zext i1 %9063 to i8
  %9065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9064, i8* %9065, align 1, !tbaa !2450
  %9066 = lshr i32 %9043, 31
  %9067 = trunc i32 %9066 to i8
  %9068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9067, i8* %9068, align 1, !tbaa !2451
  %9069 = lshr i32 %9042, 31
  %9070 = xor i32 %9066, %9069
  %9071 = add nuw nsw i32 %9070, %9066
  %9072 = icmp eq i32 %9071, 2
  %9073 = zext i1 %9072 to i8
  %9074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9073, i8* %9074, align 1, !tbaa !2452
  %9075 = load i64, i64* %RBP
  %9076 = sub i64 %9075, 40
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 4
  store i64 %9078, i64* %PC
  %9079 = inttoptr i64 %9076 to i64*
  %9080 = load i64, i64* %9079
  store i64 %9080, i64* %RCX, align 8, !tbaa !2428
  %9081 = load i64, i64* %RSI
  %9082 = load i64, i64* %RCX
  %9083 = add i64 %9082, 16
  %9084 = load i64, i64* %PC
  %9085 = add i64 %9084, 4
  store i64 %9085, i64* %PC
  %9086 = inttoptr i64 %9083 to i32*
  %9087 = load i32, i32* %9086
  %9088 = shl i64 %9081, 32
  %9089 = ashr exact i64 %9088, 32
  %9090 = sext i32 %9087 to i64
  %9091 = mul nsw i64 %9090, %9089
  %9092 = trunc i64 %9091 to i32
  %9093 = and i64 %9091, 4294967295
  store i64 %9093, i64* %RSI, align 8, !tbaa !2428
  %9094 = shl i64 %9091, 32
  %9095 = ashr exact i64 %9094, 32
  %9096 = icmp ne i64 %9095, %9091
  %9097 = zext i1 %9096 to i8
  %9098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9097, i8* %9098, align 1, !tbaa !2434
  %9099 = and i32 %9092, 255
  %9100 = call i32 @llvm.ctpop.i32(i32 %9099) #16
  %9101 = trunc i32 %9100 to i8
  %9102 = and i8 %9101, 1
  %9103 = xor i8 %9102, 1
  %9104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9103, i8* %9104, align 1, !tbaa !2448
  %9105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9105, align 1, !tbaa !2449
  %9106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9106, align 1, !tbaa !2450
  %9107 = lshr i32 %9092, 31
  %9108 = trunc i32 %9107 to i8
  %9109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9108, i8* %9109, align 1, !tbaa !2451
  %9110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9097, i8* %9110, align 1, !tbaa !2452
  %9111 = load i64, i64* %RBP
  %9112 = sub i64 %9111, 40
  %9113 = load i64, i64* %PC
  %9114 = add i64 %9113, 4
  store i64 %9114, i64* %PC
  %9115 = inttoptr i64 %9112 to i64*
  %9116 = load i64, i64* %9115
  store i64 %9116, i64* %RCX, align 8, !tbaa !2428
  %9117 = load i64, i64* %RSI
  %9118 = load i64, i64* %RCX
  %9119 = add i64 %9118, 20
  %9120 = load i64, i64* %PC
  %9121 = add i64 %9120, 4
  store i64 %9121, i64* %PC
  %9122 = inttoptr i64 %9119 to i32*
  %9123 = load i32, i32* %9122
  %9124 = shl i64 %9117, 32
  %9125 = ashr exact i64 %9124, 32
  %9126 = sext i32 %9123 to i64
  %9127 = mul nsw i64 %9126, %9125
  %9128 = trunc i64 %9127 to i32
  %9129 = and i64 %9127, 4294967295
  store i64 %9129, i64* %RSI, align 8, !tbaa !2428
  %9130 = shl i64 %9127, 32
  %9131 = ashr exact i64 %9130, 32
  %9132 = icmp ne i64 %9131, %9127
  %9133 = zext i1 %9132 to i8
  %9134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9133, i8* %9134, align 1, !tbaa !2434
  %9135 = and i32 %9128, 255
  %9136 = call i32 @llvm.ctpop.i32(i32 %9135) #16
  %9137 = trunc i32 %9136 to i8
  %9138 = and i8 %9137, 1
  %9139 = xor i8 %9138, 1
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9139, i8* %9140, align 1, !tbaa !2448
  %9141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9141, align 1, !tbaa !2449
  %9142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9142, align 1, !tbaa !2450
  %9143 = lshr i32 %9128, 31
  %9144 = trunc i32 %9143 to i8
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9144, i8* %9145, align 1, !tbaa !2451
  %9146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9133, i8* %9146, align 1, !tbaa !2452
  %9147 = load i64, i64* %RDX
  %9148 = load i32, i32* %ESI
  %9149 = zext i32 %9148 to i64
  %9150 = load i64, i64* %PC
  %9151 = add i64 %9150, 2
  store i64 %9151, i64* %PC
  %9152 = trunc i64 %9147 to i32
  %9153 = add i32 %9148, %9152
  %9154 = zext i32 %9153 to i64
  store i64 %9154, i64* %RDX, align 8, !tbaa !2428
  %9155 = icmp ult i32 %9153, %9152
  %9156 = icmp ult i32 %9153, %9148
  %9157 = or i1 %9155, %9156
  %9158 = zext i1 %9157 to i8
  %9159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9158, i8* %9159, align 1, !tbaa !2434
  %9160 = and i32 %9153, 255
  %9161 = call i32 @llvm.ctpop.i32(i32 %9160) #16
  %9162 = trunc i32 %9161 to i8
  %9163 = and i8 %9162, 1
  %9164 = xor i8 %9163, 1
  %9165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9164, i8* %9165, align 1, !tbaa !2448
  %9166 = xor i64 %9149, %9147
  %9167 = trunc i64 %9166 to i32
  %9168 = xor i32 %9167, %9153
  %9169 = lshr i32 %9168, 4
  %9170 = trunc i32 %9169 to i8
  %9171 = and i8 %9170, 1
  %9172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9171, i8* %9172, align 1, !tbaa !2449
  %9173 = icmp eq i32 %9153, 0
  %9174 = zext i1 %9173 to i8
  %9175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9174, i8* %9175, align 1, !tbaa !2450
  %9176 = lshr i32 %9153, 31
  %9177 = trunc i32 %9176 to i8
  %9178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9177, i8* %9178, align 1, !tbaa !2451
  %9179 = lshr i32 %9152, 31
  %9180 = lshr i32 %9148, 31
  %9181 = xor i32 %9176, %9179
  %9182 = xor i32 %9176, %9180
  %9183 = add nuw nsw i32 %9181, %9182
  %9184 = icmp eq i32 %9183, 2
  %9185 = zext i1 %9184 to i8
  %9186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9185, i8* %9186, align 1, !tbaa !2452
  %9187 = load i64, i64* %RBP
  %9188 = sub i64 %9187, 72
  %9189 = load i64, i64* %PC
  %9190 = add i64 %9189, 3
  store i64 %9190, i64* %PC
  %9191 = inttoptr i64 %9188 to i32*
  %9192 = load i32, i32* %9191
  %9193 = zext i32 %9192 to i64
  store i64 %9193, i64* %RSI, align 8, !tbaa !2428
  %9194 = load i64, i64* %RBP
  %9195 = sub i64 %9194, 40
  %9196 = load i64, i64* %PC
  %9197 = add i64 %9196, 4
  store i64 %9197, i64* %PC
  %9198 = inttoptr i64 %9195 to i64*
  %9199 = load i64, i64* %9198
  store i64 %9199, i64* %RCX, align 8, !tbaa !2428
  %9200 = load i64, i64* %RSI
  %9201 = load i64, i64* %RCX
  %9202 = add i64 %9201, 20
  %9203 = load i64, i64* %PC
  %9204 = add i64 %9203, 4
  store i64 %9204, i64* %PC
  %9205 = inttoptr i64 %9202 to i32*
  %9206 = load i32, i32* %9205
  %9207 = shl i64 %9200, 32
  %9208 = ashr exact i64 %9207, 32
  %9209 = sext i32 %9206 to i64
  %9210 = mul nsw i64 %9209, %9208
  %9211 = trunc i64 %9210 to i32
  %9212 = and i64 %9210, 4294967295
  store i64 %9212, i64* %RSI, align 8, !tbaa !2428
  %9213 = shl i64 %9210, 32
  %9214 = ashr exact i64 %9213, 32
  %9215 = icmp ne i64 %9214, %9210
  %9216 = zext i1 %9215 to i8
  %9217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9216, i8* %9217, align 1, !tbaa !2434
  %9218 = and i32 %9211, 255
  %9219 = call i32 @llvm.ctpop.i32(i32 %9218) #16
  %9220 = trunc i32 %9219 to i8
  %9221 = and i8 %9220, 1
  %9222 = xor i8 %9221, 1
  %9223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9222, i8* %9223, align 1, !tbaa !2448
  %9224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9224, align 1, !tbaa !2449
  %9225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9225, align 1, !tbaa !2450
  %9226 = lshr i32 %9211, 31
  %9227 = trunc i32 %9226 to i8
  %9228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9227, i8* %9228, align 1, !tbaa !2451
  %9229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9216, i8* %9229, align 1, !tbaa !2452
  %9230 = load i64, i64* %RDX
  %9231 = load i32, i32* %ESI
  %9232 = zext i32 %9231 to i64
  %9233 = load i64, i64* %PC
  %9234 = add i64 %9233, 2
  store i64 %9234, i64* %PC
  %9235 = trunc i64 %9230 to i32
  %9236 = add i32 %9231, %9235
  %9237 = zext i32 %9236 to i64
  store i64 %9237, i64* %RDX, align 8, !tbaa !2428
  %9238 = icmp ult i32 %9236, %9235
  %9239 = icmp ult i32 %9236, %9231
  %9240 = or i1 %9238, %9239
  %9241 = zext i1 %9240 to i8
  %9242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9241, i8* %9242, align 1, !tbaa !2434
  %9243 = and i32 %9236, 255
  %9244 = call i32 @llvm.ctpop.i32(i32 %9243) #16
  %9245 = trunc i32 %9244 to i8
  %9246 = and i8 %9245, 1
  %9247 = xor i8 %9246, 1
  %9248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9247, i8* %9248, align 1, !tbaa !2448
  %9249 = xor i64 %9232, %9230
  %9250 = trunc i64 %9249 to i32
  %9251 = xor i32 %9250, %9236
  %9252 = lshr i32 %9251, 4
  %9253 = trunc i32 %9252 to i8
  %9254 = and i8 %9253, 1
  %9255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9254, i8* %9255, align 1, !tbaa !2449
  %9256 = icmp eq i32 %9236, 0
  %9257 = zext i1 %9256 to i8
  %9258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9257, i8* %9258, align 1, !tbaa !2450
  %9259 = lshr i32 %9236, 31
  %9260 = trunc i32 %9259 to i8
  %9261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9260, i8* %9261, align 1, !tbaa !2451
  %9262 = lshr i32 %9235, 31
  %9263 = lshr i32 %9231, 31
  %9264 = xor i32 %9259, %9262
  %9265 = xor i32 %9259, %9263
  %9266 = add nuw nsw i32 %9264, %9265
  %9267 = icmp eq i32 %9266, 2
  %9268 = zext i1 %9267 to i8
  %9269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9268, i8* %9269, align 1, !tbaa !2452
  %9270 = load i64, i64* %RBP
  %9271 = sub i64 %9270, 76
  %9272 = load i64, i64* %PC
  %9273 = add i64 %9272, 3
  store i64 %9273, i64* %PC
  %9274 = inttoptr i64 %9271 to i32*
  %9275 = load i32, i32* %9274
  %9276 = zext i32 %9275 to i64
  store i64 %9276, i64* %RSI, align 8, !tbaa !2428
  %9277 = load i64, i64* %RSI
  %9278 = load i64, i64* %PC
  %9279 = add i64 %9278, 3
  store i64 %9279, i64* %PC
  %9280 = trunc i64 %9277 to i32
  %9281 = add i32 1, %9280
  %9282 = zext i32 %9281 to i64
  store i64 %9282, i64* %RSI, align 8, !tbaa !2428
  %9283 = icmp ult i32 %9281, %9280
  %9284 = icmp ult i32 %9281, 1
  %9285 = or i1 %9283, %9284
  %9286 = zext i1 %9285 to i8
  %9287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9286, i8* %9287, align 1, !tbaa !2434
  %9288 = and i32 %9281, 255
  %9289 = call i32 @llvm.ctpop.i32(i32 %9288) #16
  %9290 = trunc i32 %9289 to i8
  %9291 = and i8 %9290, 1
  %9292 = xor i8 %9291, 1
  %9293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9292, i8* %9293, align 1, !tbaa !2448
  %9294 = xor i64 1, %9277
  %9295 = trunc i64 %9294 to i32
  %9296 = xor i32 %9295, %9281
  %9297 = lshr i32 %9296, 4
  %9298 = trunc i32 %9297 to i8
  %9299 = and i8 %9298, 1
  %9300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9299, i8* %9300, align 1, !tbaa !2449
  %9301 = icmp eq i32 %9281, 0
  %9302 = zext i1 %9301 to i8
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9302, i8* %9303, align 1, !tbaa !2450
  %9304 = lshr i32 %9281, 31
  %9305 = trunc i32 %9304 to i8
  %9306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9305, i8* %9306, align 1, !tbaa !2451
  %9307 = lshr i32 %9280, 31
  %9308 = xor i32 %9304, %9307
  %9309 = add nuw nsw i32 %9308, %9304
  %9310 = icmp eq i32 %9309, 2
  %9311 = zext i1 %9310 to i8
  %9312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9311, i8* %9312, align 1, !tbaa !2452
  %9313 = load i64, i64* %RDX
  %9314 = load i32, i32* %ESI
  %9315 = zext i32 %9314 to i64
  %9316 = load i64, i64* %PC
  %9317 = add i64 %9316, 2
  store i64 %9317, i64* %PC
  %9318 = trunc i64 %9313 to i32
  %9319 = add i32 %9314, %9318
  %9320 = zext i32 %9319 to i64
  store i64 %9320, i64* %RDX, align 8, !tbaa !2428
  %9321 = icmp ult i32 %9319, %9318
  %9322 = icmp ult i32 %9319, %9314
  %9323 = or i1 %9321, %9322
  %9324 = zext i1 %9323 to i8
  %9325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9324, i8* %9325, align 1, !tbaa !2434
  %9326 = and i32 %9319, 255
  %9327 = call i32 @llvm.ctpop.i32(i32 %9326) #16
  %9328 = trunc i32 %9327 to i8
  %9329 = and i8 %9328, 1
  %9330 = xor i8 %9329, 1
  %9331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9330, i8* %9331, align 1, !tbaa !2448
  %9332 = xor i64 %9315, %9313
  %9333 = trunc i64 %9332 to i32
  %9334 = xor i32 %9333, %9319
  %9335 = lshr i32 %9334, 4
  %9336 = trunc i32 %9335 to i8
  %9337 = and i8 %9336, 1
  %9338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9337, i8* %9338, align 1, !tbaa !2449
  %9339 = icmp eq i32 %9319, 0
  %9340 = zext i1 %9339 to i8
  %9341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9340, i8* %9341, align 1, !tbaa !2450
  %9342 = lshr i32 %9319, 31
  %9343 = trunc i32 %9342 to i8
  %9344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9343, i8* %9344, align 1, !tbaa !2451
  %9345 = lshr i32 %9318, 31
  %9346 = lshr i32 %9314, 31
  %9347 = xor i32 %9342, %9345
  %9348 = xor i32 %9342, %9346
  %9349 = add nuw nsw i32 %9347, %9348
  %9350 = icmp eq i32 %9349, 2
  %9351 = zext i1 %9350 to i8
  %9352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9351, i8* %9352, align 1, !tbaa !2452
  %9353 = load i32, i32* %EDX
  %9354 = zext i32 %9353 to i64
  %9355 = load i64, i64* %PC
  %9356 = add i64 %9355, 3
  store i64 %9356, i64* %PC
  %9357 = shl i64 %9354, 32
  %9358 = ashr exact i64 %9357, 32
  store i64 %9358, i64* %RCX, align 8, !tbaa !2428
  %9359 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9360 = load i64, i64* %RAX
  %9361 = load i64, i64* %RCX
  %9362 = mul i64 %9361, 4
  %9363 = add i64 %9362, %9360
  %9364 = load i64, i64* %PC
  %9365 = add i64 %9364, 5
  store i64 %9365, i64* %PC
  %9366 = inttoptr i64 %9363 to float*
  %9367 = load float, float* %9366
  %9368 = bitcast i8* %9359 to float*
  store float %9367, float* %9368, align 1, !tbaa !2453
  %9369 = getelementptr inbounds i8, i8* %9359, i64 4
  %9370 = bitcast i8* %9369 to float*
  store float 0.000000e+00, float* %9370, align 1, !tbaa !2453
  %9371 = getelementptr inbounds i8, i8* %9359, i64 8
  %9372 = bitcast i8* %9371 to float*
  store float 0.000000e+00, float* %9372, align 1, !tbaa !2453
  %9373 = getelementptr inbounds i8, i8* %9359, i64 12
  %9374 = bitcast i8* %9373 to float*
  store float 0.000000e+00, float* %9374, align 1, !tbaa !2453
  %9375 = load i64, i64* %RBP
  %9376 = sub i64 %9375, 40
  %9377 = load i64, i64* %PC
  %9378 = add i64 %9377, 4
  store i64 %9378, i64* %PC
  %9379 = inttoptr i64 %9376 to i64*
  %9380 = load i64, i64* %9379
  store i64 %9380, i64* %RAX, align 8, !tbaa !2428
  %9381 = load i64, i64* %RAX
  %9382 = load i64, i64* %PC
  %9383 = add i64 %9382, 3
  store i64 %9383, i64* %PC
  %9384 = inttoptr i64 %9381 to i64*
  %9385 = load i64, i64* %9384
  store i64 %9385, i64* %RAX, align 8, !tbaa !2428
  %9386 = load i64, i64* %RBP
  %9387 = sub i64 %9386, 40
  %9388 = load i64, i64* %PC
  %9389 = add i64 %9388, 4
  store i64 %9389, i64* %PC
  %9390 = inttoptr i64 %9387 to i64*
  %9391 = load i64, i64* %9390
  store i64 %9391, i64* %RCX, align 8, !tbaa !2428
  %9392 = load i64, i64* %RCX
  %9393 = add i64 %9392, 12
  %9394 = load i64, i64* %PC
  %9395 = add i64 %9394, 4
  store i64 %9395, i64* %PC
  %9396 = inttoptr i64 %9393 to i32*
  %9397 = load i32, i32* %9396
  %9398 = sext i32 %9397 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9399, align 1, !tbaa !2434
  %9400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9400, align 1, !tbaa !2448
  %9401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9401, align 1, !tbaa !2449
  %9402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9402, align 1, !tbaa !2450
  %9403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9403, align 1, !tbaa !2451
  %9404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9404, align 1, !tbaa !2452
  %9405 = load i64, i64* %RBP
  %9406 = sub i64 %9405, 40
  %9407 = load i64, i64* %PC
  %9408 = add i64 %9407, 4
  store i64 %9408, i64* %PC
  %9409 = inttoptr i64 %9406 to i64*
  %9410 = load i64, i64* %9409
  store i64 %9410, i64* %RCX, align 8, !tbaa !2428
  %9411 = load i64, i64* %RDX
  %9412 = load i64, i64* %RCX
  %9413 = add i64 %9412, 16
  %9414 = load i64, i64* %PC
  %9415 = add i64 %9414, 4
  store i64 %9415, i64* %PC
  %9416 = inttoptr i64 %9413 to i32*
  %9417 = load i32, i32* %9416
  %9418 = shl i64 %9411, 32
  %9419 = ashr exact i64 %9418, 32
  %9420 = sext i32 %9417 to i64
  %9421 = mul nsw i64 %9420, %9419
  %9422 = trunc i64 %9421 to i32
  %9423 = and i64 %9421, 4294967295
  store i64 %9423, i64* %RDX, align 8, !tbaa !2428
  %9424 = shl i64 %9421, 32
  %9425 = ashr exact i64 %9424, 32
  %9426 = icmp ne i64 %9425, %9421
  %9427 = zext i1 %9426 to i8
  %9428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9427, i8* %9428, align 1, !tbaa !2434
  %9429 = and i32 %9422, 255
  %9430 = call i32 @llvm.ctpop.i32(i32 %9429) #16
  %9431 = trunc i32 %9430 to i8
  %9432 = and i8 %9431, 1
  %9433 = xor i8 %9432, 1
  %9434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9433, i8* %9434, align 1, !tbaa !2448
  %9435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9435, align 1, !tbaa !2449
  %9436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9436, align 1, !tbaa !2450
  %9437 = lshr i32 %9422, 31
  %9438 = trunc i32 %9437 to i8
  %9439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9438, i8* %9439, align 1, !tbaa !2451
  %9440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9427, i8* %9440, align 1, !tbaa !2452
  %9441 = load i64, i64* %RBP
  %9442 = sub i64 %9441, 40
  %9443 = load i64, i64* %PC
  %9444 = add i64 %9443, 4
  store i64 %9444, i64* %PC
  %9445 = inttoptr i64 %9442 to i64*
  %9446 = load i64, i64* %9445
  store i64 %9446, i64* %RCX, align 8, !tbaa !2428
  %9447 = load i64, i64* %RDX
  %9448 = load i64, i64* %RCX
  %9449 = add i64 %9448, 20
  %9450 = load i64, i64* %PC
  %9451 = add i64 %9450, 4
  store i64 %9451, i64* %PC
  %9452 = inttoptr i64 %9449 to i32*
  %9453 = load i32, i32* %9452
  %9454 = shl i64 %9447, 32
  %9455 = ashr exact i64 %9454, 32
  %9456 = sext i32 %9453 to i64
  %9457 = mul nsw i64 %9456, %9455
  %9458 = trunc i64 %9457 to i32
  %9459 = and i64 %9457, 4294967295
  store i64 %9459, i64* %RDX, align 8, !tbaa !2428
  %9460 = shl i64 %9457, 32
  %9461 = ashr exact i64 %9460, 32
  %9462 = icmp ne i64 %9461, %9457
  %9463 = zext i1 %9462 to i8
  %9464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9463, i8* %9464, align 1, !tbaa !2434
  %9465 = and i32 %9458, 255
  %9466 = call i32 @llvm.ctpop.i32(i32 %9465) #16
  %9467 = trunc i32 %9466 to i8
  %9468 = and i8 %9467, 1
  %9469 = xor i8 %9468, 1
  %9470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9469, i8* %9470, align 1, !tbaa !2448
  %9471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9471, align 1, !tbaa !2449
  %9472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9472, align 1, !tbaa !2450
  %9473 = lshr i32 %9458, 31
  %9474 = trunc i32 %9473 to i8
  %9475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9474, i8* %9475, align 1, !tbaa !2451
  %9476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9463, i8* %9476, align 1, !tbaa !2452
  %9477 = load i64, i64* %RBP
  %9478 = sub i64 %9477, 68
  %9479 = load i64, i64* %PC
  %9480 = add i64 %9479, 3
  store i64 %9480, i64* %PC
  %9481 = inttoptr i64 %9478 to i32*
  %9482 = load i32, i32* %9481
  %9483 = zext i32 %9482 to i64
  store i64 %9483, i64* %RSI, align 8, !tbaa !2428
  %9484 = load i64, i64* %RSI
  %9485 = load i64, i64* %PC
  %9486 = add i64 %9485, 3
  store i64 %9486, i64* %PC
  %9487 = trunc i64 %9484 to i32
  %9488 = sub i32 %9487, 1
  %9489 = zext i32 %9488 to i64
  store i64 %9489, i64* %RSI, align 8, !tbaa !2428
  %9490 = icmp ult i32 %9487, 1
  %9491 = zext i1 %9490 to i8
  %9492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9491, i8* %9492, align 1, !tbaa !2434
  %9493 = and i32 %9488, 255
  %9494 = call i32 @llvm.ctpop.i32(i32 %9493) #16
  %9495 = trunc i32 %9494 to i8
  %9496 = and i8 %9495, 1
  %9497 = xor i8 %9496, 1
  %9498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9497, i8* %9498, align 1, !tbaa !2448
  %9499 = xor i64 1, %9484
  %9500 = trunc i64 %9499 to i32
  %9501 = xor i32 %9500, %9488
  %9502 = lshr i32 %9501, 4
  %9503 = trunc i32 %9502 to i8
  %9504 = and i8 %9503, 1
  %9505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9504, i8* %9505, align 1, !tbaa !2449
  %9506 = icmp eq i32 %9488, 0
  %9507 = zext i1 %9506 to i8
  %9508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9507, i8* %9508, align 1, !tbaa !2450
  %9509 = lshr i32 %9488, 31
  %9510 = trunc i32 %9509 to i8
  %9511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9510, i8* %9511, align 1, !tbaa !2451
  %9512 = lshr i32 %9487, 31
  %9513 = xor i32 %9509, %9512
  %9514 = add nuw nsw i32 %9513, %9512
  %9515 = icmp eq i32 %9514, 2
  %9516 = zext i1 %9515 to i8
  %9517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9516, i8* %9517, align 1, !tbaa !2452
  %9518 = load i64, i64* %RBP
  %9519 = sub i64 %9518, 40
  %9520 = load i64, i64* %PC
  %9521 = add i64 %9520, 4
  store i64 %9521, i64* %PC
  %9522 = inttoptr i64 %9519 to i64*
  %9523 = load i64, i64* %9522
  store i64 %9523, i64* %RCX, align 8, !tbaa !2428
  %9524 = load i64, i64* %RSI
  %9525 = load i64, i64* %RCX
  %9526 = add i64 %9525, 16
  %9527 = load i64, i64* %PC
  %9528 = add i64 %9527, 4
  store i64 %9528, i64* %PC
  %9529 = inttoptr i64 %9526 to i32*
  %9530 = load i32, i32* %9529
  %9531 = shl i64 %9524, 32
  %9532 = ashr exact i64 %9531, 32
  %9533 = sext i32 %9530 to i64
  %9534 = mul nsw i64 %9533, %9532
  %9535 = trunc i64 %9534 to i32
  %9536 = and i64 %9534, 4294967295
  store i64 %9536, i64* %RSI, align 8, !tbaa !2428
  %9537 = shl i64 %9534, 32
  %9538 = ashr exact i64 %9537, 32
  %9539 = icmp ne i64 %9538, %9534
  %9540 = zext i1 %9539 to i8
  %9541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9540, i8* %9541, align 1, !tbaa !2434
  %9542 = and i32 %9535, 255
  %9543 = call i32 @llvm.ctpop.i32(i32 %9542) #16
  %9544 = trunc i32 %9543 to i8
  %9545 = and i8 %9544, 1
  %9546 = xor i8 %9545, 1
  %9547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9546, i8* %9547, align 1, !tbaa !2448
  %9548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9548, align 1, !tbaa !2449
  %9549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9549, align 1, !tbaa !2450
  %9550 = lshr i32 %9535, 31
  %9551 = trunc i32 %9550 to i8
  %9552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9551, i8* %9552, align 1, !tbaa !2451
  %9553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9540, i8* %9553, align 1, !tbaa !2452
  %9554 = load i64, i64* %RBP
  %9555 = sub i64 %9554, 40
  %9556 = load i64, i64* %PC
  %9557 = add i64 %9556, 4
  store i64 %9557, i64* %PC
  %9558 = inttoptr i64 %9555 to i64*
  %9559 = load i64, i64* %9558
  store i64 %9559, i64* %RCX, align 8, !tbaa !2428
  %9560 = load i64, i64* %RSI
  %9561 = load i64, i64* %RCX
  %9562 = add i64 %9561, 20
  %9563 = load i64, i64* %PC
  %9564 = add i64 %9563, 4
  store i64 %9564, i64* %PC
  %9565 = inttoptr i64 %9562 to i32*
  %9566 = load i32, i32* %9565
  %9567 = shl i64 %9560, 32
  %9568 = ashr exact i64 %9567, 32
  %9569 = sext i32 %9566 to i64
  %9570 = mul nsw i64 %9569, %9568
  %9571 = trunc i64 %9570 to i32
  %9572 = and i64 %9570, 4294967295
  store i64 %9572, i64* %RSI, align 8, !tbaa !2428
  %9573 = shl i64 %9570, 32
  %9574 = ashr exact i64 %9573, 32
  %9575 = icmp ne i64 %9574, %9570
  %9576 = zext i1 %9575 to i8
  %9577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9576, i8* %9577, align 1, !tbaa !2434
  %9578 = and i32 %9571, 255
  %9579 = call i32 @llvm.ctpop.i32(i32 %9578) #16
  %9580 = trunc i32 %9579 to i8
  %9581 = and i8 %9580, 1
  %9582 = xor i8 %9581, 1
  %9583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9582, i8* %9583, align 1, !tbaa !2448
  %9584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9584, align 1, !tbaa !2449
  %9585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9585, align 1, !tbaa !2450
  %9586 = lshr i32 %9571, 31
  %9587 = trunc i32 %9586 to i8
  %9588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9587, i8* %9588, align 1, !tbaa !2451
  %9589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9576, i8* %9589, align 1, !tbaa !2452
  %9590 = load i64, i64* %RDX
  %9591 = load i32, i32* %ESI
  %9592 = zext i32 %9591 to i64
  %9593 = load i64, i64* %PC
  %9594 = add i64 %9593, 2
  store i64 %9594, i64* %PC
  %9595 = trunc i64 %9590 to i32
  %9596 = add i32 %9591, %9595
  %9597 = zext i32 %9596 to i64
  store i64 %9597, i64* %RDX, align 8, !tbaa !2428
  %9598 = icmp ult i32 %9596, %9595
  %9599 = icmp ult i32 %9596, %9591
  %9600 = or i1 %9598, %9599
  %9601 = zext i1 %9600 to i8
  %9602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9601, i8* %9602, align 1, !tbaa !2434
  %9603 = and i32 %9596, 255
  %9604 = call i32 @llvm.ctpop.i32(i32 %9603) #16
  %9605 = trunc i32 %9604 to i8
  %9606 = and i8 %9605, 1
  %9607 = xor i8 %9606, 1
  %9608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9607, i8* %9608, align 1, !tbaa !2448
  %9609 = xor i64 %9592, %9590
  %9610 = trunc i64 %9609 to i32
  %9611 = xor i32 %9610, %9596
  %9612 = lshr i32 %9611, 4
  %9613 = trunc i32 %9612 to i8
  %9614 = and i8 %9613, 1
  %9615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9614, i8* %9615, align 1, !tbaa !2449
  %9616 = icmp eq i32 %9596, 0
  %9617 = zext i1 %9616 to i8
  %9618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9617, i8* %9618, align 1, !tbaa !2450
  %9619 = lshr i32 %9596, 31
  %9620 = trunc i32 %9619 to i8
  %9621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9620, i8* %9621, align 1, !tbaa !2451
  %9622 = lshr i32 %9595, 31
  %9623 = lshr i32 %9591, 31
  %9624 = xor i32 %9619, %9622
  %9625 = xor i32 %9619, %9623
  %9626 = add nuw nsw i32 %9624, %9625
  %9627 = icmp eq i32 %9626, 2
  %9628 = zext i1 %9627 to i8
  %9629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9628, i8* %9629, align 1, !tbaa !2452
  %9630 = load i64, i64* %RBP
  %9631 = sub i64 %9630, 72
  %9632 = load i64, i64* %PC
  %9633 = add i64 %9632, 3
  store i64 %9633, i64* %PC
  %9634 = inttoptr i64 %9631 to i32*
  %9635 = load i32, i32* %9634
  %9636 = zext i32 %9635 to i64
  store i64 %9636, i64* %RSI, align 8, !tbaa !2428
  %9637 = load i64, i64* %RBP
  %9638 = sub i64 %9637, 40
  %9639 = load i64, i64* %PC
  %9640 = add i64 %9639, 4
  store i64 %9640, i64* %PC
  %9641 = inttoptr i64 %9638 to i64*
  %9642 = load i64, i64* %9641
  store i64 %9642, i64* %RCX, align 8, !tbaa !2428
  %9643 = load i64, i64* %RSI
  %9644 = load i64, i64* %RCX
  %9645 = add i64 %9644, 20
  %9646 = load i64, i64* %PC
  %9647 = add i64 %9646, 4
  store i64 %9647, i64* %PC
  %9648 = inttoptr i64 %9645 to i32*
  %9649 = load i32, i32* %9648
  %9650 = shl i64 %9643, 32
  %9651 = ashr exact i64 %9650, 32
  %9652 = sext i32 %9649 to i64
  %9653 = mul nsw i64 %9652, %9651
  %9654 = trunc i64 %9653 to i32
  %9655 = and i64 %9653, 4294967295
  store i64 %9655, i64* %RSI, align 8, !tbaa !2428
  %9656 = shl i64 %9653, 32
  %9657 = ashr exact i64 %9656, 32
  %9658 = icmp ne i64 %9657, %9653
  %9659 = zext i1 %9658 to i8
  %9660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9659, i8* %9660, align 1, !tbaa !2434
  %9661 = and i32 %9654, 255
  %9662 = call i32 @llvm.ctpop.i32(i32 %9661) #16
  %9663 = trunc i32 %9662 to i8
  %9664 = and i8 %9663, 1
  %9665 = xor i8 %9664, 1
  %9666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9665, i8* %9666, align 1, !tbaa !2448
  %9667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9667, align 1, !tbaa !2449
  %9668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9668, align 1, !tbaa !2450
  %9669 = lshr i32 %9654, 31
  %9670 = trunc i32 %9669 to i8
  %9671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9670, i8* %9671, align 1, !tbaa !2451
  %9672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9659, i8* %9672, align 1, !tbaa !2452
  %9673 = load i64, i64* %RDX
  %9674 = load i32, i32* %ESI
  %9675 = zext i32 %9674 to i64
  %9676 = load i64, i64* %PC
  %9677 = add i64 %9676, 2
  store i64 %9677, i64* %PC
  %9678 = trunc i64 %9673 to i32
  %9679 = add i32 %9674, %9678
  %9680 = zext i32 %9679 to i64
  store i64 %9680, i64* %RDX, align 8, !tbaa !2428
  %9681 = icmp ult i32 %9679, %9678
  %9682 = icmp ult i32 %9679, %9674
  %9683 = or i1 %9681, %9682
  %9684 = zext i1 %9683 to i8
  %9685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9684, i8* %9685, align 1, !tbaa !2434
  %9686 = and i32 %9679, 255
  %9687 = call i32 @llvm.ctpop.i32(i32 %9686) #16
  %9688 = trunc i32 %9687 to i8
  %9689 = and i8 %9688, 1
  %9690 = xor i8 %9689, 1
  %9691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9690, i8* %9691, align 1, !tbaa !2448
  %9692 = xor i64 %9675, %9673
  %9693 = trunc i64 %9692 to i32
  %9694 = xor i32 %9693, %9679
  %9695 = lshr i32 %9694, 4
  %9696 = trunc i32 %9695 to i8
  %9697 = and i8 %9696, 1
  %9698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9697, i8* %9698, align 1, !tbaa !2449
  %9699 = icmp eq i32 %9679, 0
  %9700 = zext i1 %9699 to i8
  %9701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9700, i8* %9701, align 1, !tbaa !2450
  %9702 = lshr i32 %9679, 31
  %9703 = trunc i32 %9702 to i8
  %9704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9703, i8* %9704, align 1, !tbaa !2451
  %9705 = lshr i32 %9678, 31
  %9706 = lshr i32 %9674, 31
  %9707 = xor i32 %9702, %9705
  %9708 = xor i32 %9702, %9706
  %9709 = add nuw nsw i32 %9707, %9708
  %9710 = icmp eq i32 %9709, 2
  %9711 = zext i1 %9710 to i8
  %9712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9711, i8* %9712, align 1, !tbaa !2452
  %9713 = load i64, i64* %RBP
  %9714 = sub i64 %9713, 76
  %9715 = load i64, i64* %PC
  %9716 = add i64 %9715, 3
  store i64 %9716, i64* %PC
  %9717 = inttoptr i64 %9714 to i32*
  %9718 = load i32, i32* %9717
  %9719 = zext i32 %9718 to i64
  store i64 %9719, i64* %RSI, align 8, !tbaa !2428
  %9720 = load i64, i64* %RSI
  %9721 = load i64, i64* %PC
  %9722 = add i64 %9721, 3
  store i64 %9722, i64* %PC
  %9723 = trunc i64 %9720 to i32
  %9724 = add i32 1, %9723
  %9725 = zext i32 %9724 to i64
  store i64 %9725, i64* %RSI, align 8, !tbaa !2428
  %9726 = icmp ult i32 %9724, %9723
  %9727 = icmp ult i32 %9724, 1
  %9728 = or i1 %9726, %9727
  %9729 = zext i1 %9728 to i8
  %9730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9729, i8* %9730, align 1, !tbaa !2434
  %9731 = and i32 %9724, 255
  %9732 = call i32 @llvm.ctpop.i32(i32 %9731) #16
  %9733 = trunc i32 %9732 to i8
  %9734 = and i8 %9733, 1
  %9735 = xor i8 %9734, 1
  %9736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9735, i8* %9736, align 1, !tbaa !2448
  %9737 = xor i64 1, %9720
  %9738 = trunc i64 %9737 to i32
  %9739 = xor i32 %9738, %9724
  %9740 = lshr i32 %9739, 4
  %9741 = trunc i32 %9740 to i8
  %9742 = and i8 %9741, 1
  %9743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9742, i8* %9743, align 1, !tbaa !2449
  %9744 = icmp eq i32 %9724, 0
  %9745 = zext i1 %9744 to i8
  %9746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9745, i8* %9746, align 1, !tbaa !2450
  %9747 = lshr i32 %9724, 31
  %9748 = trunc i32 %9747 to i8
  %9749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9748, i8* %9749, align 1, !tbaa !2451
  %9750 = lshr i32 %9723, 31
  %9751 = xor i32 %9747, %9750
  %9752 = add nuw nsw i32 %9751, %9747
  %9753 = icmp eq i32 %9752, 2
  %9754 = zext i1 %9753 to i8
  %9755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9754, i8* %9755, align 1, !tbaa !2452
  %9756 = load i64, i64* %RDX
  %9757 = load i32, i32* %ESI
  %9758 = zext i32 %9757 to i64
  %9759 = load i64, i64* %PC
  %9760 = add i64 %9759, 2
  store i64 %9760, i64* %PC
  %9761 = trunc i64 %9756 to i32
  %9762 = add i32 %9757, %9761
  %9763 = zext i32 %9762 to i64
  store i64 %9763, i64* %RDX, align 8, !tbaa !2428
  %9764 = icmp ult i32 %9762, %9761
  %9765 = icmp ult i32 %9762, %9757
  %9766 = or i1 %9764, %9765
  %9767 = zext i1 %9766 to i8
  %9768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9767, i8* %9768, align 1, !tbaa !2434
  %9769 = and i32 %9762, 255
  %9770 = call i32 @llvm.ctpop.i32(i32 %9769) #16
  %9771 = trunc i32 %9770 to i8
  %9772 = and i8 %9771, 1
  %9773 = xor i8 %9772, 1
  %9774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9773, i8* %9774, align 1, !tbaa !2448
  %9775 = xor i64 %9758, %9756
  %9776 = trunc i64 %9775 to i32
  %9777 = xor i32 %9776, %9762
  %9778 = lshr i32 %9777, 4
  %9779 = trunc i32 %9778 to i8
  %9780 = and i8 %9779, 1
  %9781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9780, i8* %9781, align 1, !tbaa !2449
  %9782 = icmp eq i32 %9762, 0
  %9783 = zext i1 %9782 to i8
  %9784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9783, i8* %9784, align 1, !tbaa !2450
  %9785 = lshr i32 %9762, 31
  %9786 = trunc i32 %9785 to i8
  %9787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9786, i8* %9787, align 1, !tbaa !2451
  %9788 = lshr i32 %9761, 31
  %9789 = lshr i32 %9757, 31
  %9790 = xor i32 %9785, %9788
  %9791 = xor i32 %9785, %9789
  %9792 = add nuw nsw i32 %9790, %9791
  %9793 = icmp eq i32 %9792, 2
  %9794 = zext i1 %9793 to i8
  %9795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9794, i8* %9795, align 1, !tbaa !2452
  %9796 = load i32, i32* %EDX
  %9797 = zext i32 %9796 to i64
  %9798 = load i64, i64* %PC
  %9799 = add i64 %9798, 3
  store i64 %9799, i64* %PC
  %9800 = shl i64 %9797, 32
  %9801 = ashr exact i64 %9800, 32
  store i64 %9801, i64* %RCX, align 8, !tbaa !2428
  %9802 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9803 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9804 = load i64, i64* %RAX
  %9805 = load i64, i64* %RCX
  %9806 = mul i64 %9805, 4
  %9807 = add i64 %9806, %9804
  %9808 = load i64, i64* %PC
  %9809 = add i64 %9808, 5
  store i64 %9809, i64* %PC
  %9810 = bitcast i8* %9803 to <2 x float>*
  %9811 = load <2 x float>, <2 x float>* %9810, align 1
  %9812 = getelementptr inbounds i8, i8* %9803, i64 8
  %9813 = bitcast i8* %9812 to <2 x i32>*
  %9814 = load <2 x i32>, <2 x i32>* %9813, align 1
  %9815 = inttoptr i64 %9807 to float*
  %9816 = load float, float* %9815
  %9817 = extractelement <2 x float> %9811, i32 0
  %9818 = fsub float %9817, %9816
  %9819 = bitcast i8* %9802 to float*
  store float %9818, float* %9819, align 1, !tbaa !2453
  %9820 = bitcast <2 x float> %9811 to <2 x i32>
  %9821 = extractelement <2 x i32> %9820, i32 1
  %9822 = getelementptr inbounds i8, i8* %9802, i64 4
  %9823 = bitcast i8* %9822 to i32*
  store i32 %9821, i32* %9823, align 1, !tbaa !2453
  %9824 = extractelement <2 x i32> %9814, i32 0
  %9825 = getelementptr inbounds i8, i8* %9802, i64 8
  %9826 = bitcast i8* %9825 to i32*
  store i32 %9824, i32* %9826, align 1, !tbaa !2453
  %9827 = extractelement <2 x i32> %9814, i32 1
  %9828 = getelementptr inbounds i8, i8* %9802, i64 12
  %9829 = bitcast i8* %9828 to i32*
  store i32 %9827, i32* %9829, align 1, !tbaa !2453
  %9830 = load i64, i64* %RBP
  %9831 = sub i64 %9830, 40
  %9832 = load i64, i64* %PC
  %9833 = add i64 %9832, 4
  store i64 %9833, i64* %PC
  %9834 = inttoptr i64 %9831 to i64*
  %9835 = load i64, i64* %9834
  store i64 %9835, i64* %RAX, align 8, !tbaa !2428
  %9836 = load i64, i64* %RAX
  %9837 = load i64, i64* %PC
  %9838 = add i64 %9837, 3
  store i64 %9838, i64* %PC
  %9839 = inttoptr i64 %9836 to i64*
  %9840 = load i64, i64* %9839
  store i64 %9840, i64* %RAX, align 8, !tbaa !2428
  %9841 = load i64, i64* %RBP
  %9842 = sub i64 %9841, 40
  %9843 = load i64, i64* %PC
  %9844 = add i64 %9843, 4
  store i64 %9844, i64* %PC
  %9845 = inttoptr i64 %9842 to i64*
  %9846 = load i64, i64* %9845
  store i64 %9846, i64* %RCX, align 8, !tbaa !2428
  %9847 = load i64, i64* %RCX
  %9848 = add i64 %9847, 12
  %9849 = load i64, i64* %PC
  %9850 = add i64 %9849, 4
  store i64 %9850, i64* %PC
  %9851 = inttoptr i64 %9848 to i32*
  %9852 = load i32, i32* %9851
  %9853 = sext i32 %9852 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %9854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9854, align 1, !tbaa !2434
  %9855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %9855, align 1, !tbaa !2448
  %9856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9856, align 1, !tbaa !2449
  %9857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9857, align 1, !tbaa !2450
  %9858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9858, align 1, !tbaa !2451
  %9859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9859, align 1, !tbaa !2452
  %9860 = load i64, i64* %RBP
  %9861 = sub i64 %9860, 40
  %9862 = load i64, i64* %PC
  %9863 = add i64 %9862, 4
  store i64 %9863, i64* %PC
  %9864 = inttoptr i64 %9861 to i64*
  %9865 = load i64, i64* %9864
  store i64 %9865, i64* %RCX, align 8, !tbaa !2428
  %9866 = load i64, i64* %RDX
  %9867 = load i64, i64* %RCX
  %9868 = add i64 %9867, 16
  %9869 = load i64, i64* %PC
  %9870 = add i64 %9869, 4
  store i64 %9870, i64* %PC
  %9871 = inttoptr i64 %9868 to i32*
  %9872 = load i32, i32* %9871
  %9873 = shl i64 %9866, 32
  %9874 = ashr exact i64 %9873, 32
  %9875 = sext i32 %9872 to i64
  %9876 = mul nsw i64 %9875, %9874
  %9877 = trunc i64 %9876 to i32
  %9878 = and i64 %9876, 4294967295
  store i64 %9878, i64* %RDX, align 8, !tbaa !2428
  %9879 = shl i64 %9876, 32
  %9880 = ashr exact i64 %9879, 32
  %9881 = icmp ne i64 %9880, %9876
  %9882 = zext i1 %9881 to i8
  %9883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9882, i8* %9883, align 1, !tbaa !2434
  %9884 = and i32 %9877, 255
  %9885 = call i32 @llvm.ctpop.i32(i32 %9884) #16
  %9886 = trunc i32 %9885 to i8
  %9887 = and i8 %9886, 1
  %9888 = xor i8 %9887, 1
  %9889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9888, i8* %9889, align 1, !tbaa !2448
  %9890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9890, align 1, !tbaa !2449
  %9891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9891, align 1, !tbaa !2450
  %9892 = lshr i32 %9877, 31
  %9893 = trunc i32 %9892 to i8
  %9894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9893, i8* %9894, align 1, !tbaa !2451
  %9895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9882, i8* %9895, align 1, !tbaa !2452
  %9896 = load i64, i64* %RBP
  %9897 = sub i64 %9896, 40
  %9898 = load i64, i64* %PC
  %9899 = add i64 %9898, 4
  store i64 %9899, i64* %PC
  %9900 = inttoptr i64 %9897 to i64*
  %9901 = load i64, i64* %9900
  store i64 %9901, i64* %RCX, align 8, !tbaa !2428
  %9902 = load i64, i64* %RDX
  %9903 = load i64, i64* %RCX
  %9904 = add i64 %9903, 20
  %9905 = load i64, i64* %PC
  %9906 = add i64 %9905, 4
  store i64 %9906, i64* %PC
  %9907 = inttoptr i64 %9904 to i32*
  %9908 = load i32, i32* %9907
  %9909 = shl i64 %9902, 32
  %9910 = ashr exact i64 %9909, 32
  %9911 = sext i32 %9908 to i64
  %9912 = mul nsw i64 %9911, %9910
  %9913 = trunc i64 %9912 to i32
  %9914 = and i64 %9912, 4294967295
  store i64 %9914, i64* %RDX, align 8, !tbaa !2428
  %9915 = shl i64 %9912, 32
  %9916 = ashr exact i64 %9915, 32
  %9917 = icmp ne i64 %9916, %9912
  %9918 = zext i1 %9917 to i8
  %9919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9918, i8* %9919, align 1, !tbaa !2434
  %9920 = and i32 %9913, 255
  %9921 = call i32 @llvm.ctpop.i32(i32 %9920) #16
  %9922 = trunc i32 %9921 to i8
  %9923 = and i8 %9922, 1
  %9924 = xor i8 %9923, 1
  %9925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9924, i8* %9925, align 1, !tbaa !2448
  %9926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9926, align 1, !tbaa !2449
  %9927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %9927, align 1, !tbaa !2450
  %9928 = lshr i32 %9913, 31
  %9929 = trunc i32 %9928 to i8
  %9930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9929, i8* %9930, align 1, !tbaa !2451
  %9931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9918, i8* %9931, align 1, !tbaa !2452
  %9932 = load i64, i64* %RBP
  %9933 = sub i64 %9932, 68
  %9934 = load i64, i64* %PC
  %9935 = add i64 %9934, 3
  store i64 %9935, i64* %PC
  %9936 = inttoptr i64 %9933 to i32*
  %9937 = load i32, i32* %9936
  %9938 = zext i32 %9937 to i64
  store i64 %9938, i64* %RSI, align 8, !tbaa !2428
  %9939 = load i64, i64* %RSI
  %9940 = load i64, i64* %PC
  %9941 = add i64 %9940, 3
  store i64 %9941, i64* %PC
  %9942 = trunc i64 %9939 to i32
  %9943 = add i32 1, %9942
  %9944 = zext i32 %9943 to i64
  store i64 %9944, i64* %RSI, align 8, !tbaa !2428
  %9945 = icmp ult i32 %9943, %9942
  %9946 = icmp ult i32 %9943, 1
  %9947 = or i1 %9945, %9946
  %9948 = zext i1 %9947 to i8
  %9949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9948, i8* %9949, align 1, !tbaa !2434
  %9950 = and i32 %9943, 255
  %9951 = call i32 @llvm.ctpop.i32(i32 %9950) #16
  %9952 = trunc i32 %9951 to i8
  %9953 = and i8 %9952, 1
  %9954 = xor i8 %9953, 1
  %9955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9954, i8* %9955, align 1, !tbaa !2448
  %9956 = xor i64 1, %9939
  %9957 = trunc i64 %9956 to i32
  %9958 = xor i32 %9957, %9943
  %9959 = lshr i32 %9958, 4
  %9960 = trunc i32 %9959 to i8
  %9961 = and i8 %9960, 1
  %9962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9961, i8* %9962, align 1, !tbaa !2449
  %9963 = icmp eq i32 %9943, 0
  %9964 = zext i1 %9963 to i8
  %9965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9964, i8* %9965, align 1, !tbaa !2450
  %9966 = lshr i32 %9943, 31
  %9967 = trunc i32 %9966 to i8
  %9968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9967, i8* %9968, align 1, !tbaa !2451
  %9969 = lshr i32 %9942, 31
  %9970 = xor i32 %9966, %9969
  %9971 = add nuw nsw i32 %9970, %9966
  %9972 = icmp eq i32 %9971, 2
  %9973 = zext i1 %9972 to i8
  %9974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9973, i8* %9974, align 1, !tbaa !2452
  %9975 = load i64, i64* %RBP
  %9976 = sub i64 %9975, 40
  %9977 = load i64, i64* %PC
  %9978 = add i64 %9977, 4
  store i64 %9978, i64* %PC
  %9979 = inttoptr i64 %9976 to i64*
  %9980 = load i64, i64* %9979
  store i64 %9980, i64* %RCX, align 8, !tbaa !2428
  %9981 = load i64, i64* %RSI
  %9982 = load i64, i64* %RCX
  %9983 = add i64 %9982, 16
  %9984 = load i64, i64* %PC
  %9985 = add i64 %9984, 4
  store i64 %9985, i64* %PC
  %9986 = inttoptr i64 %9983 to i32*
  %9987 = load i32, i32* %9986
  %9988 = shl i64 %9981, 32
  %9989 = ashr exact i64 %9988, 32
  %9990 = sext i32 %9987 to i64
  %9991 = mul nsw i64 %9990, %9989
  %9992 = trunc i64 %9991 to i32
  %9993 = and i64 %9991, 4294967295
  store i64 %9993, i64* %RSI, align 8, !tbaa !2428
  %9994 = shl i64 %9991, 32
  %9995 = ashr exact i64 %9994, 32
  %9996 = icmp ne i64 %9995, %9991
  %9997 = zext i1 %9996 to i8
  %9998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9997, i8* %9998, align 1, !tbaa !2434
  %9999 = and i32 %9992, 255
  %10000 = call i32 @llvm.ctpop.i32(i32 %9999) #16
  %10001 = trunc i32 %10000 to i8
  %10002 = and i8 %10001, 1
  %10003 = xor i8 %10002, 1
  %10004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10003, i8* %10004, align 1, !tbaa !2448
  %10005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10005, align 1, !tbaa !2449
  %10006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10006, align 1, !tbaa !2450
  %10007 = lshr i32 %9992, 31
  %10008 = trunc i32 %10007 to i8
  %10009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10008, i8* %10009, align 1, !tbaa !2451
  %10010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9997, i8* %10010, align 1, !tbaa !2452
  %10011 = load i64, i64* %RBP
  %10012 = sub i64 %10011, 40
  %10013 = load i64, i64* %PC
  %10014 = add i64 %10013, 4
  store i64 %10014, i64* %PC
  %10015 = inttoptr i64 %10012 to i64*
  %10016 = load i64, i64* %10015
  store i64 %10016, i64* %RCX, align 8, !tbaa !2428
  %10017 = load i64, i64* %RSI
  %10018 = load i64, i64* %RCX
  %10019 = add i64 %10018, 20
  %10020 = load i64, i64* %PC
  %10021 = add i64 %10020, 4
  store i64 %10021, i64* %PC
  %10022 = inttoptr i64 %10019 to i32*
  %10023 = load i32, i32* %10022
  %10024 = shl i64 %10017, 32
  %10025 = ashr exact i64 %10024, 32
  %10026 = sext i32 %10023 to i64
  %10027 = mul nsw i64 %10026, %10025
  %10028 = trunc i64 %10027 to i32
  %10029 = and i64 %10027, 4294967295
  store i64 %10029, i64* %RSI, align 8, !tbaa !2428
  %10030 = shl i64 %10027, 32
  %10031 = ashr exact i64 %10030, 32
  %10032 = icmp ne i64 %10031, %10027
  %10033 = zext i1 %10032 to i8
  %10034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10033, i8* %10034, align 1, !tbaa !2434
  %10035 = and i32 %10028, 255
  %10036 = call i32 @llvm.ctpop.i32(i32 %10035) #16
  %10037 = trunc i32 %10036 to i8
  %10038 = and i8 %10037, 1
  %10039 = xor i8 %10038, 1
  %10040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10039, i8* %10040, align 1, !tbaa !2448
  %10041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10041, align 1, !tbaa !2449
  %10042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10042, align 1, !tbaa !2450
  %10043 = lshr i32 %10028, 31
  %10044 = trunc i32 %10043 to i8
  %10045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10044, i8* %10045, align 1, !tbaa !2451
  %10046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10033, i8* %10046, align 1, !tbaa !2452
  %10047 = load i64, i64* %RDX
  %10048 = load i32, i32* %ESI
  %10049 = zext i32 %10048 to i64
  %10050 = load i64, i64* %PC
  %10051 = add i64 %10050, 2
  store i64 %10051, i64* %PC
  %10052 = trunc i64 %10047 to i32
  %10053 = add i32 %10048, %10052
  %10054 = zext i32 %10053 to i64
  store i64 %10054, i64* %RDX, align 8, !tbaa !2428
  %10055 = icmp ult i32 %10053, %10052
  %10056 = icmp ult i32 %10053, %10048
  %10057 = or i1 %10055, %10056
  %10058 = zext i1 %10057 to i8
  %10059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10058, i8* %10059, align 1, !tbaa !2434
  %10060 = and i32 %10053, 255
  %10061 = call i32 @llvm.ctpop.i32(i32 %10060) #16
  %10062 = trunc i32 %10061 to i8
  %10063 = and i8 %10062, 1
  %10064 = xor i8 %10063, 1
  %10065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10064, i8* %10065, align 1, !tbaa !2448
  %10066 = xor i64 %10049, %10047
  %10067 = trunc i64 %10066 to i32
  %10068 = xor i32 %10067, %10053
  %10069 = lshr i32 %10068, 4
  %10070 = trunc i32 %10069 to i8
  %10071 = and i8 %10070, 1
  %10072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10071, i8* %10072, align 1, !tbaa !2449
  %10073 = icmp eq i32 %10053, 0
  %10074 = zext i1 %10073 to i8
  %10075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10074, i8* %10075, align 1, !tbaa !2450
  %10076 = lshr i32 %10053, 31
  %10077 = trunc i32 %10076 to i8
  %10078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10077, i8* %10078, align 1, !tbaa !2451
  %10079 = lshr i32 %10052, 31
  %10080 = lshr i32 %10048, 31
  %10081 = xor i32 %10076, %10079
  %10082 = xor i32 %10076, %10080
  %10083 = add nuw nsw i32 %10081, %10082
  %10084 = icmp eq i32 %10083, 2
  %10085 = zext i1 %10084 to i8
  %10086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10085, i8* %10086, align 1, !tbaa !2452
  %10087 = load i64, i64* %RBP
  %10088 = sub i64 %10087, 72
  %10089 = load i64, i64* %PC
  %10090 = add i64 %10089, 3
  store i64 %10090, i64* %PC
  %10091 = inttoptr i64 %10088 to i32*
  %10092 = load i32, i32* %10091
  %10093 = zext i32 %10092 to i64
  store i64 %10093, i64* %RSI, align 8, !tbaa !2428
  %10094 = load i64, i64* %RBP
  %10095 = sub i64 %10094, 40
  %10096 = load i64, i64* %PC
  %10097 = add i64 %10096, 4
  store i64 %10097, i64* %PC
  %10098 = inttoptr i64 %10095 to i64*
  %10099 = load i64, i64* %10098
  store i64 %10099, i64* %RCX, align 8, !tbaa !2428
  %10100 = load i64, i64* %RSI
  %10101 = load i64, i64* %RCX
  %10102 = add i64 %10101, 20
  %10103 = load i64, i64* %PC
  %10104 = add i64 %10103, 4
  store i64 %10104, i64* %PC
  %10105 = inttoptr i64 %10102 to i32*
  %10106 = load i32, i32* %10105
  %10107 = shl i64 %10100, 32
  %10108 = ashr exact i64 %10107, 32
  %10109 = sext i32 %10106 to i64
  %10110 = mul nsw i64 %10109, %10108
  %10111 = trunc i64 %10110 to i32
  %10112 = and i64 %10110, 4294967295
  store i64 %10112, i64* %RSI, align 8, !tbaa !2428
  %10113 = shl i64 %10110, 32
  %10114 = ashr exact i64 %10113, 32
  %10115 = icmp ne i64 %10114, %10110
  %10116 = zext i1 %10115 to i8
  %10117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10116, i8* %10117, align 1, !tbaa !2434
  %10118 = and i32 %10111, 255
  %10119 = call i32 @llvm.ctpop.i32(i32 %10118) #16
  %10120 = trunc i32 %10119 to i8
  %10121 = and i8 %10120, 1
  %10122 = xor i8 %10121, 1
  %10123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10122, i8* %10123, align 1, !tbaa !2448
  %10124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10124, align 1, !tbaa !2449
  %10125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10125, align 1, !tbaa !2450
  %10126 = lshr i32 %10111, 31
  %10127 = trunc i32 %10126 to i8
  %10128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10127, i8* %10128, align 1, !tbaa !2451
  %10129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10116, i8* %10129, align 1, !tbaa !2452
  %10130 = load i64, i64* %RDX
  %10131 = load i32, i32* %ESI
  %10132 = zext i32 %10131 to i64
  %10133 = load i64, i64* %PC
  %10134 = add i64 %10133, 2
  store i64 %10134, i64* %PC
  %10135 = trunc i64 %10130 to i32
  %10136 = add i32 %10131, %10135
  %10137 = zext i32 %10136 to i64
  store i64 %10137, i64* %RDX, align 8, !tbaa !2428
  %10138 = icmp ult i32 %10136, %10135
  %10139 = icmp ult i32 %10136, %10131
  %10140 = or i1 %10138, %10139
  %10141 = zext i1 %10140 to i8
  %10142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10141, i8* %10142, align 1, !tbaa !2434
  %10143 = and i32 %10136, 255
  %10144 = call i32 @llvm.ctpop.i32(i32 %10143) #16
  %10145 = trunc i32 %10144 to i8
  %10146 = and i8 %10145, 1
  %10147 = xor i8 %10146, 1
  %10148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10147, i8* %10148, align 1, !tbaa !2448
  %10149 = xor i64 %10132, %10130
  %10150 = trunc i64 %10149 to i32
  %10151 = xor i32 %10150, %10136
  %10152 = lshr i32 %10151, 4
  %10153 = trunc i32 %10152 to i8
  %10154 = and i8 %10153, 1
  %10155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10154, i8* %10155, align 1, !tbaa !2449
  %10156 = icmp eq i32 %10136, 0
  %10157 = zext i1 %10156 to i8
  %10158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10157, i8* %10158, align 1, !tbaa !2450
  %10159 = lshr i32 %10136, 31
  %10160 = trunc i32 %10159 to i8
  %10161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10160, i8* %10161, align 1, !tbaa !2451
  %10162 = lshr i32 %10135, 31
  %10163 = lshr i32 %10131, 31
  %10164 = xor i32 %10159, %10162
  %10165 = xor i32 %10159, %10163
  %10166 = add nuw nsw i32 %10164, %10165
  %10167 = icmp eq i32 %10166, 2
  %10168 = zext i1 %10167 to i8
  %10169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10168, i8* %10169, align 1, !tbaa !2452
  %10170 = load i64, i64* %RBP
  %10171 = sub i64 %10170, 76
  %10172 = load i64, i64* %PC
  %10173 = add i64 %10172, 3
  store i64 %10173, i64* %PC
  %10174 = inttoptr i64 %10171 to i32*
  %10175 = load i32, i32* %10174
  %10176 = zext i32 %10175 to i64
  store i64 %10176, i64* %RSI, align 8, !tbaa !2428
  %10177 = load i64, i64* %RSI
  %10178 = load i64, i64* %PC
  %10179 = add i64 %10178, 3
  store i64 %10179, i64* %PC
  %10180 = trunc i64 %10177 to i32
  %10181 = sub i32 %10180, 1
  %10182 = zext i32 %10181 to i64
  store i64 %10182, i64* %RSI, align 8, !tbaa !2428
  %10183 = icmp ult i32 %10180, 1
  %10184 = zext i1 %10183 to i8
  %10185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10184, i8* %10185, align 1, !tbaa !2434
  %10186 = and i32 %10181, 255
  %10187 = call i32 @llvm.ctpop.i32(i32 %10186) #16
  %10188 = trunc i32 %10187 to i8
  %10189 = and i8 %10188, 1
  %10190 = xor i8 %10189, 1
  %10191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10190, i8* %10191, align 1, !tbaa !2448
  %10192 = xor i64 1, %10177
  %10193 = trunc i64 %10192 to i32
  %10194 = xor i32 %10193, %10181
  %10195 = lshr i32 %10194, 4
  %10196 = trunc i32 %10195 to i8
  %10197 = and i8 %10196, 1
  %10198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10197, i8* %10198, align 1, !tbaa !2449
  %10199 = icmp eq i32 %10181, 0
  %10200 = zext i1 %10199 to i8
  %10201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10200, i8* %10201, align 1, !tbaa !2450
  %10202 = lshr i32 %10181, 31
  %10203 = trunc i32 %10202 to i8
  %10204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10203, i8* %10204, align 1, !tbaa !2451
  %10205 = lshr i32 %10180, 31
  %10206 = xor i32 %10202, %10205
  %10207 = add nuw nsw i32 %10206, %10205
  %10208 = icmp eq i32 %10207, 2
  %10209 = zext i1 %10208 to i8
  %10210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10209, i8* %10210, align 1, !tbaa !2452
  %10211 = load i64, i64* %RDX
  %10212 = load i32, i32* %ESI
  %10213 = zext i32 %10212 to i64
  %10214 = load i64, i64* %PC
  %10215 = add i64 %10214, 2
  store i64 %10215, i64* %PC
  %10216 = trunc i64 %10211 to i32
  %10217 = add i32 %10212, %10216
  %10218 = zext i32 %10217 to i64
  store i64 %10218, i64* %RDX, align 8, !tbaa !2428
  %10219 = icmp ult i32 %10217, %10216
  %10220 = icmp ult i32 %10217, %10212
  %10221 = or i1 %10219, %10220
  %10222 = zext i1 %10221 to i8
  %10223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10222, i8* %10223, align 1, !tbaa !2434
  %10224 = and i32 %10217, 255
  %10225 = call i32 @llvm.ctpop.i32(i32 %10224) #16
  %10226 = trunc i32 %10225 to i8
  %10227 = and i8 %10226, 1
  %10228 = xor i8 %10227, 1
  %10229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10228, i8* %10229, align 1, !tbaa !2448
  %10230 = xor i64 %10213, %10211
  %10231 = trunc i64 %10230 to i32
  %10232 = xor i32 %10231, %10217
  %10233 = lshr i32 %10232, 4
  %10234 = trunc i32 %10233 to i8
  %10235 = and i8 %10234, 1
  %10236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10235, i8* %10236, align 1, !tbaa !2449
  %10237 = icmp eq i32 %10217, 0
  %10238 = zext i1 %10237 to i8
  %10239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10238, i8* %10239, align 1, !tbaa !2450
  %10240 = lshr i32 %10217, 31
  %10241 = trunc i32 %10240 to i8
  %10242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10241, i8* %10242, align 1, !tbaa !2451
  %10243 = lshr i32 %10216, 31
  %10244 = lshr i32 %10212, 31
  %10245 = xor i32 %10240, %10243
  %10246 = xor i32 %10240, %10244
  %10247 = add nuw nsw i32 %10245, %10246
  %10248 = icmp eq i32 %10247, 2
  %10249 = zext i1 %10248 to i8
  %10250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10249, i8* %10250, align 1, !tbaa !2452
  %10251 = load i32, i32* %EDX
  %10252 = zext i32 %10251 to i64
  %10253 = load i64, i64* %PC
  %10254 = add i64 %10253, 3
  store i64 %10254, i64* %PC
  %10255 = shl i64 %10252, 32
  %10256 = ashr exact i64 %10255, 32
  store i64 %10256, i64* %RCX, align 8, !tbaa !2428
  %10257 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10258 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10259 = load i64, i64* %RAX
  %10260 = load i64, i64* %RCX
  %10261 = mul i64 %10260, 4
  %10262 = add i64 %10261, %10259
  %10263 = load i64, i64* %PC
  %10264 = add i64 %10263, 5
  store i64 %10264, i64* %PC
  %10265 = bitcast i8* %10258 to <2 x float>*
  %10266 = load <2 x float>, <2 x float>* %10265, align 1
  %10267 = getelementptr inbounds i8, i8* %10258, i64 8
  %10268 = bitcast i8* %10267 to <2 x i32>*
  %10269 = load <2 x i32>, <2 x i32>* %10268, align 1
  %10270 = inttoptr i64 %10262 to float*
  %10271 = load float, float* %10270
  %10272 = extractelement <2 x float> %10266, i32 0
  %10273 = fsub float %10272, %10271
  %10274 = bitcast i8* %10257 to float*
  store float %10273, float* %10274, align 1, !tbaa !2453
  %10275 = bitcast <2 x float> %10266 to <2 x i32>
  %10276 = extractelement <2 x i32> %10275, i32 1
  %10277 = getelementptr inbounds i8, i8* %10257, i64 4
  %10278 = bitcast i8* %10277 to i32*
  store i32 %10276, i32* %10278, align 1, !tbaa !2453
  %10279 = extractelement <2 x i32> %10269, i32 0
  %10280 = getelementptr inbounds i8, i8* %10257, i64 8
  %10281 = bitcast i8* %10280 to i32*
  store i32 %10279, i32* %10281, align 1, !tbaa !2453
  %10282 = extractelement <2 x i32> %10269, i32 1
  %10283 = getelementptr inbounds i8, i8* %10257, i64 12
  %10284 = bitcast i8* %10283 to i32*
  store i32 %10282, i32* %10284, align 1, !tbaa !2453
  %10285 = load i64, i64* %RBP
  %10286 = sub i64 %10285, 40
  %10287 = load i64, i64* %PC
  %10288 = add i64 %10287, 4
  store i64 %10288, i64* %PC
  %10289 = inttoptr i64 %10286 to i64*
  %10290 = load i64, i64* %10289
  store i64 %10290, i64* %RAX, align 8, !tbaa !2428
  %10291 = load i64, i64* %RAX
  %10292 = load i64, i64* %PC
  %10293 = add i64 %10292, 3
  store i64 %10293, i64* %PC
  %10294 = inttoptr i64 %10291 to i64*
  %10295 = load i64, i64* %10294
  store i64 %10295, i64* %RAX, align 8, !tbaa !2428
  %10296 = load i64, i64* %RBP
  %10297 = sub i64 %10296, 40
  %10298 = load i64, i64* %PC
  %10299 = add i64 %10298, 4
  store i64 %10299, i64* %PC
  %10300 = inttoptr i64 %10297 to i64*
  %10301 = load i64, i64* %10300
  store i64 %10301, i64* %RCX, align 8, !tbaa !2428
  %10302 = load i64, i64* %RCX
  %10303 = add i64 %10302, 12
  %10304 = load i64, i64* %PC
  %10305 = add i64 %10304, 4
  store i64 %10305, i64* %PC
  %10306 = inttoptr i64 %10303 to i32*
  %10307 = load i32, i32* %10306
  %10308 = sext i32 %10307 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %10309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10309, align 1, !tbaa !2434
  %10310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10310, align 1, !tbaa !2448
  %10311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10311, align 1, !tbaa !2449
  %10312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10312, align 1, !tbaa !2450
  %10313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10313, align 1, !tbaa !2451
  %10314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10314, align 1, !tbaa !2452
  %10315 = load i64, i64* %RBP
  %10316 = sub i64 %10315, 40
  %10317 = load i64, i64* %PC
  %10318 = add i64 %10317, 4
  store i64 %10318, i64* %PC
  %10319 = inttoptr i64 %10316 to i64*
  %10320 = load i64, i64* %10319
  store i64 %10320, i64* %RCX, align 8, !tbaa !2428
  %10321 = load i64, i64* %RDX
  %10322 = load i64, i64* %RCX
  %10323 = add i64 %10322, 16
  %10324 = load i64, i64* %PC
  %10325 = add i64 %10324, 4
  store i64 %10325, i64* %PC
  %10326 = inttoptr i64 %10323 to i32*
  %10327 = load i32, i32* %10326
  %10328 = shl i64 %10321, 32
  %10329 = ashr exact i64 %10328, 32
  %10330 = sext i32 %10327 to i64
  %10331 = mul nsw i64 %10330, %10329
  %10332 = trunc i64 %10331 to i32
  %10333 = and i64 %10331, 4294967295
  store i64 %10333, i64* %RDX, align 8, !tbaa !2428
  %10334 = shl i64 %10331, 32
  %10335 = ashr exact i64 %10334, 32
  %10336 = icmp ne i64 %10335, %10331
  %10337 = zext i1 %10336 to i8
  %10338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10337, i8* %10338, align 1, !tbaa !2434
  %10339 = and i32 %10332, 255
  %10340 = call i32 @llvm.ctpop.i32(i32 %10339) #16
  %10341 = trunc i32 %10340 to i8
  %10342 = and i8 %10341, 1
  %10343 = xor i8 %10342, 1
  %10344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10343, i8* %10344, align 1, !tbaa !2448
  %10345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10345, align 1, !tbaa !2449
  %10346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10346, align 1, !tbaa !2450
  %10347 = lshr i32 %10332, 31
  %10348 = trunc i32 %10347 to i8
  %10349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10348, i8* %10349, align 1, !tbaa !2451
  %10350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10337, i8* %10350, align 1, !tbaa !2452
  %10351 = load i64, i64* %RBP
  %10352 = sub i64 %10351, 40
  %10353 = load i64, i64* %PC
  %10354 = add i64 %10353, 4
  store i64 %10354, i64* %PC
  %10355 = inttoptr i64 %10352 to i64*
  %10356 = load i64, i64* %10355
  store i64 %10356, i64* %RCX, align 8, !tbaa !2428
  %10357 = load i64, i64* %RDX
  %10358 = load i64, i64* %RCX
  %10359 = add i64 %10358, 20
  %10360 = load i64, i64* %PC
  %10361 = add i64 %10360, 4
  store i64 %10361, i64* %PC
  %10362 = inttoptr i64 %10359 to i32*
  %10363 = load i32, i32* %10362
  %10364 = shl i64 %10357, 32
  %10365 = ashr exact i64 %10364, 32
  %10366 = sext i32 %10363 to i64
  %10367 = mul nsw i64 %10366, %10365
  %10368 = trunc i64 %10367 to i32
  %10369 = and i64 %10367, 4294967295
  store i64 %10369, i64* %RDX, align 8, !tbaa !2428
  %10370 = shl i64 %10367, 32
  %10371 = ashr exact i64 %10370, 32
  %10372 = icmp ne i64 %10371, %10367
  %10373 = zext i1 %10372 to i8
  %10374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10373, i8* %10374, align 1, !tbaa !2434
  %10375 = and i32 %10368, 255
  %10376 = call i32 @llvm.ctpop.i32(i32 %10375) #16
  %10377 = trunc i32 %10376 to i8
  %10378 = and i8 %10377, 1
  %10379 = xor i8 %10378, 1
  %10380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10379, i8* %10380, align 1, !tbaa !2448
  %10381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10381, align 1, !tbaa !2449
  %10382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10382, align 1, !tbaa !2450
  %10383 = lshr i32 %10368, 31
  %10384 = trunc i32 %10383 to i8
  %10385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10384, i8* %10385, align 1, !tbaa !2451
  %10386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10373, i8* %10386, align 1, !tbaa !2452
  %10387 = load i64, i64* %RBP
  %10388 = sub i64 %10387, 68
  %10389 = load i64, i64* %PC
  %10390 = add i64 %10389, 3
  store i64 %10390, i64* %PC
  %10391 = inttoptr i64 %10388 to i32*
  %10392 = load i32, i32* %10391
  %10393 = zext i32 %10392 to i64
  store i64 %10393, i64* %RSI, align 8, !tbaa !2428
  %10394 = load i64, i64* %RSI
  %10395 = load i64, i64* %PC
  %10396 = add i64 %10395, 3
  store i64 %10396, i64* %PC
  %10397 = trunc i64 %10394 to i32
  %10398 = sub i32 %10397, 1
  %10399 = zext i32 %10398 to i64
  store i64 %10399, i64* %RSI, align 8, !tbaa !2428
  %10400 = icmp ult i32 %10397, 1
  %10401 = zext i1 %10400 to i8
  %10402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10401, i8* %10402, align 1, !tbaa !2434
  %10403 = and i32 %10398, 255
  %10404 = call i32 @llvm.ctpop.i32(i32 %10403) #16
  %10405 = trunc i32 %10404 to i8
  %10406 = and i8 %10405, 1
  %10407 = xor i8 %10406, 1
  %10408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10407, i8* %10408, align 1, !tbaa !2448
  %10409 = xor i64 1, %10394
  %10410 = trunc i64 %10409 to i32
  %10411 = xor i32 %10410, %10398
  %10412 = lshr i32 %10411, 4
  %10413 = trunc i32 %10412 to i8
  %10414 = and i8 %10413, 1
  %10415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10414, i8* %10415, align 1, !tbaa !2449
  %10416 = icmp eq i32 %10398, 0
  %10417 = zext i1 %10416 to i8
  %10418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10417, i8* %10418, align 1, !tbaa !2450
  %10419 = lshr i32 %10398, 31
  %10420 = trunc i32 %10419 to i8
  %10421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10420, i8* %10421, align 1, !tbaa !2451
  %10422 = lshr i32 %10397, 31
  %10423 = xor i32 %10419, %10422
  %10424 = add nuw nsw i32 %10423, %10422
  %10425 = icmp eq i32 %10424, 2
  %10426 = zext i1 %10425 to i8
  %10427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10426, i8* %10427, align 1, !tbaa !2452
  %10428 = load i64, i64* %RBP
  %10429 = sub i64 %10428, 40
  %10430 = load i64, i64* %PC
  %10431 = add i64 %10430, 4
  store i64 %10431, i64* %PC
  %10432 = inttoptr i64 %10429 to i64*
  %10433 = load i64, i64* %10432
  store i64 %10433, i64* %RCX, align 8, !tbaa !2428
  %10434 = load i64, i64* %RSI
  %10435 = load i64, i64* %RCX
  %10436 = add i64 %10435, 16
  %10437 = load i64, i64* %PC
  %10438 = add i64 %10437, 4
  store i64 %10438, i64* %PC
  %10439 = inttoptr i64 %10436 to i32*
  %10440 = load i32, i32* %10439
  %10441 = shl i64 %10434, 32
  %10442 = ashr exact i64 %10441, 32
  %10443 = sext i32 %10440 to i64
  %10444 = mul nsw i64 %10443, %10442
  %10445 = trunc i64 %10444 to i32
  %10446 = and i64 %10444, 4294967295
  store i64 %10446, i64* %RSI, align 8, !tbaa !2428
  %10447 = shl i64 %10444, 32
  %10448 = ashr exact i64 %10447, 32
  %10449 = icmp ne i64 %10448, %10444
  %10450 = zext i1 %10449 to i8
  %10451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10450, i8* %10451, align 1, !tbaa !2434
  %10452 = and i32 %10445, 255
  %10453 = call i32 @llvm.ctpop.i32(i32 %10452) #16
  %10454 = trunc i32 %10453 to i8
  %10455 = and i8 %10454, 1
  %10456 = xor i8 %10455, 1
  %10457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10456, i8* %10457, align 1, !tbaa !2448
  %10458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10458, align 1, !tbaa !2449
  %10459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10459, align 1, !tbaa !2450
  %10460 = lshr i32 %10445, 31
  %10461 = trunc i32 %10460 to i8
  %10462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10461, i8* %10462, align 1, !tbaa !2451
  %10463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10450, i8* %10463, align 1, !tbaa !2452
  %10464 = load i64, i64* %RBP
  %10465 = sub i64 %10464, 40
  %10466 = load i64, i64* %PC
  %10467 = add i64 %10466, 4
  store i64 %10467, i64* %PC
  %10468 = inttoptr i64 %10465 to i64*
  %10469 = load i64, i64* %10468
  store i64 %10469, i64* %RCX, align 8, !tbaa !2428
  %10470 = load i64, i64* %RSI
  %10471 = load i64, i64* %RCX
  %10472 = add i64 %10471, 20
  %10473 = load i64, i64* %PC
  %10474 = add i64 %10473, 4
  store i64 %10474, i64* %PC
  %10475 = inttoptr i64 %10472 to i32*
  %10476 = load i32, i32* %10475
  %10477 = shl i64 %10470, 32
  %10478 = ashr exact i64 %10477, 32
  %10479 = sext i32 %10476 to i64
  %10480 = mul nsw i64 %10479, %10478
  %10481 = trunc i64 %10480 to i32
  %10482 = and i64 %10480, 4294967295
  store i64 %10482, i64* %RSI, align 8, !tbaa !2428
  %10483 = shl i64 %10480, 32
  %10484 = ashr exact i64 %10483, 32
  %10485 = icmp ne i64 %10484, %10480
  %10486 = zext i1 %10485 to i8
  %10487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10486, i8* %10487, align 1, !tbaa !2434
  %10488 = and i32 %10481, 255
  %10489 = call i32 @llvm.ctpop.i32(i32 %10488) #16
  %10490 = trunc i32 %10489 to i8
  %10491 = and i8 %10490, 1
  %10492 = xor i8 %10491, 1
  %10493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10492, i8* %10493, align 1, !tbaa !2448
  %10494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10494, align 1, !tbaa !2449
  %10495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10495, align 1, !tbaa !2450
  %10496 = lshr i32 %10481, 31
  %10497 = trunc i32 %10496 to i8
  %10498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10497, i8* %10498, align 1, !tbaa !2451
  %10499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10486, i8* %10499, align 1, !tbaa !2452
  %10500 = load i64, i64* %RDX
  %10501 = load i32, i32* %ESI
  %10502 = zext i32 %10501 to i64
  %10503 = load i64, i64* %PC
  %10504 = add i64 %10503, 2
  store i64 %10504, i64* %PC
  %10505 = trunc i64 %10500 to i32
  %10506 = add i32 %10501, %10505
  %10507 = zext i32 %10506 to i64
  store i64 %10507, i64* %RDX, align 8, !tbaa !2428
  %10508 = icmp ult i32 %10506, %10505
  %10509 = icmp ult i32 %10506, %10501
  %10510 = or i1 %10508, %10509
  %10511 = zext i1 %10510 to i8
  %10512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10511, i8* %10512, align 1, !tbaa !2434
  %10513 = and i32 %10506, 255
  %10514 = call i32 @llvm.ctpop.i32(i32 %10513) #16
  %10515 = trunc i32 %10514 to i8
  %10516 = and i8 %10515, 1
  %10517 = xor i8 %10516, 1
  %10518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10517, i8* %10518, align 1, !tbaa !2448
  %10519 = xor i64 %10502, %10500
  %10520 = trunc i64 %10519 to i32
  %10521 = xor i32 %10520, %10506
  %10522 = lshr i32 %10521, 4
  %10523 = trunc i32 %10522 to i8
  %10524 = and i8 %10523, 1
  %10525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10524, i8* %10525, align 1, !tbaa !2449
  %10526 = icmp eq i32 %10506, 0
  %10527 = zext i1 %10526 to i8
  %10528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10527, i8* %10528, align 1, !tbaa !2450
  %10529 = lshr i32 %10506, 31
  %10530 = trunc i32 %10529 to i8
  %10531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10530, i8* %10531, align 1, !tbaa !2451
  %10532 = lshr i32 %10505, 31
  %10533 = lshr i32 %10501, 31
  %10534 = xor i32 %10529, %10532
  %10535 = xor i32 %10529, %10533
  %10536 = add nuw nsw i32 %10534, %10535
  %10537 = icmp eq i32 %10536, 2
  %10538 = zext i1 %10537 to i8
  %10539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10538, i8* %10539, align 1, !tbaa !2452
  %10540 = load i64, i64* %RBP
  %10541 = sub i64 %10540, 72
  %10542 = load i64, i64* %PC
  %10543 = add i64 %10542, 3
  store i64 %10543, i64* %PC
  %10544 = inttoptr i64 %10541 to i32*
  %10545 = load i32, i32* %10544
  %10546 = zext i32 %10545 to i64
  store i64 %10546, i64* %RSI, align 8, !tbaa !2428
  %10547 = load i64, i64* %RBP
  %10548 = sub i64 %10547, 40
  %10549 = load i64, i64* %PC
  %10550 = add i64 %10549, 4
  store i64 %10550, i64* %PC
  %10551 = inttoptr i64 %10548 to i64*
  %10552 = load i64, i64* %10551
  store i64 %10552, i64* %RCX, align 8, !tbaa !2428
  %10553 = load i64, i64* %RSI
  %10554 = load i64, i64* %RCX
  %10555 = add i64 %10554, 20
  %10556 = load i64, i64* %PC
  %10557 = add i64 %10556, 4
  store i64 %10557, i64* %PC
  %10558 = inttoptr i64 %10555 to i32*
  %10559 = load i32, i32* %10558
  %10560 = shl i64 %10553, 32
  %10561 = ashr exact i64 %10560, 32
  %10562 = sext i32 %10559 to i64
  %10563 = mul nsw i64 %10562, %10561
  %10564 = trunc i64 %10563 to i32
  %10565 = and i64 %10563, 4294967295
  store i64 %10565, i64* %RSI, align 8, !tbaa !2428
  %10566 = shl i64 %10563, 32
  %10567 = ashr exact i64 %10566, 32
  %10568 = icmp ne i64 %10567, %10563
  %10569 = zext i1 %10568 to i8
  %10570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10569, i8* %10570, align 1, !tbaa !2434
  %10571 = and i32 %10564, 255
  %10572 = call i32 @llvm.ctpop.i32(i32 %10571) #16
  %10573 = trunc i32 %10572 to i8
  %10574 = and i8 %10573, 1
  %10575 = xor i8 %10574, 1
  %10576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10575, i8* %10576, align 1, !tbaa !2448
  %10577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10577, align 1, !tbaa !2449
  %10578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10578, align 1, !tbaa !2450
  %10579 = lshr i32 %10564, 31
  %10580 = trunc i32 %10579 to i8
  %10581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10580, i8* %10581, align 1, !tbaa !2451
  %10582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10569, i8* %10582, align 1, !tbaa !2452
  %10583 = load i64, i64* %RDX
  %10584 = load i32, i32* %ESI
  %10585 = zext i32 %10584 to i64
  %10586 = load i64, i64* %PC
  %10587 = add i64 %10586, 2
  store i64 %10587, i64* %PC
  %10588 = trunc i64 %10583 to i32
  %10589 = add i32 %10584, %10588
  %10590 = zext i32 %10589 to i64
  store i64 %10590, i64* %RDX, align 8, !tbaa !2428
  %10591 = icmp ult i32 %10589, %10588
  %10592 = icmp ult i32 %10589, %10584
  %10593 = or i1 %10591, %10592
  %10594 = zext i1 %10593 to i8
  %10595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10594, i8* %10595, align 1, !tbaa !2434
  %10596 = and i32 %10589, 255
  %10597 = call i32 @llvm.ctpop.i32(i32 %10596) #16
  %10598 = trunc i32 %10597 to i8
  %10599 = and i8 %10598, 1
  %10600 = xor i8 %10599, 1
  %10601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10600, i8* %10601, align 1, !tbaa !2448
  %10602 = xor i64 %10585, %10583
  %10603 = trunc i64 %10602 to i32
  %10604 = xor i32 %10603, %10589
  %10605 = lshr i32 %10604, 4
  %10606 = trunc i32 %10605 to i8
  %10607 = and i8 %10606, 1
  %10608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10607, i8* %10608, align 1, !tbaa !2449
  %10609 = icmp eq i32 %10589, 0
  %10610 = zext i1 %10609 to i8
  %10611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10610, i8* %10611, align 1, !tbaa !2450
  %10612 = lshr i32 %10589, 31
  %10613 = trunc i32 %10612 to i8
  %10614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10613, i8* %10614, align 1, !tbaa !2451
  %10615 = lshr i32 %10588, 31
  %10616 = lshr i32 %10584, 31
  %10617 = xor i32 %10612, %10615
  %10618 = xor i32 %10612, %10616
  %10619 = add nuw nsw i32 %10617, %10618
  %10620 = icmp eq i32 %10619, 2
  %10621 = zext i1 %10620 to i8
  %10622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10621, i8* %10622, align 1, !tbaa !2452
  %10623 = load i64, i64* %RBP
  %10624 = sub i64 %10623, 76
  %10625 = load i64, i64* %PC
  %10626 = add i64 %10625, 3
  store i64 %10626, i64* %PC
  %10627 = inttoptr i64 %10624 to i32*
  %10628 = load i32, i32* %10627
  %10629 = zext i32 %10628 to i64
  store i64 %10629, i64* %RSI, align 8, !tbaa !2428
  %10630 = load i64, i64* %RSI
  %10631 = load i64, i64* %PC
  %10632 = add i64 %10631, 3
  store i64 %10632, i64* %PC
  %10633 = trunc i64 %10630 to i32
  %10634 = sub i32 %10633, 1
  %10635 = zext i32 %10634 to i64
  store i64 %10635, i64* %RSI, align 8, !tbaa !2428
  %10636 = icmp ult i32 %10633, 1
  %10637 = zext i1 %10636 to i8
  %10638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10637, i8* %10638, align 1, !tbaa !2434
  %10639 = and i32 %10634, 255
  %10640 = call i32 @llvm.ctpop.i32(i32 %10639) #16
  %10641 = trunc i32 %10640 to i8
  %10642 = and i8 %10641, 1
  %10643 = xor i8 %10642, 1
  %10644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10643, i8* %10644, align 1, !tbaa !2448
  %10645 = xor i64 1, %10630
  %10646 = trunc i64 %10645 to i32
  %10647 = xor i32 %10646, %10634
  %10648 = lshr i32 %10647, 4
  %10649 = trunc i32 %10648 to i8
  %10650 = and i8 %10649, 1
  %10651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10650, i8* %10651, align 1, !tbaa !2449
  %10652 = icmp eq i32 %10634, 0
  %10653 = zext i1 %10652 to i8
  %10654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10653, i8* %10654, align 1, !tbaa !2450
  %10655 = lshr i32 %10634, 31
  %10656 = trunc i32 %10655 to i8
  %10657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10656, i8* %10657, align 1, !tbaa !2451
  %10658 = lshr i32 %10633, 31
  %10659 = xor i32 %10655, %10658
  %10660 = add nuw nsw i32 %10659, %10658
  %10661 = icmp eq i32 %10660, 2
  %10662 = zext i1 %10661 to i8
  %10663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10662, i8* %10663, align 1, !tbaa !2452
  %10664 = load i64, i64* %RDX
  %10665 = load i32, i32* %ESI
  %10666 = zext i32 %10665 to i64
  %10667 = load i64, i64* %PC
  %10668 = add i64 %10667, 2
  store i64 %10668, i64* %PC
  %10669 = trunc i64 %10664 to i32
  %10670 = add i32 %10665, %10669
  %10671 = zext i32 %10670 to i64
  store i64 %10671, i64* %RDX, align 8, !tbaa !2428
  %10672 = icmp ult i32 %10670, %10669
  %10673 = icmp ult i32 %10670, %10665
  %10674 = or i1 %10672, %10673
  %10675 = zext i1 %10674 to i8
  %10676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10675, i8* %10676, align 1, !tbaa !2434
  %10677 = and i32 %10670, 255
  %10678 = call i32 @llvm.ctpop.i32(i32 %10677) #16
  %10679 = trunc i32 %10678 to i8
  %10680 = and i8 %10679, 1
  %10681 = xor i8 %10680, 1
  %10682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10681, i8* %10682, align 1, !tbaa !2448
  %10683 = xor i64 %10666, %10664
  %10684 = trunc i64 %10683 to i32
  %10685 = xor i32 %10684, %10670
  %10686 = lshr i32 %10685, 4
  %10687 = trunc i32 %10686 to i8
  %10688 = and i8 %10687, 1
  %10689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10688, i8* %10689, align 1, !tbaa !2449
  %10690 = icmp eq i32 %10670, 0
  %10691 = zext i1 %10690 to i8
  %10692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10691, i8* %10692, align 1, !tbaa !2450
  %10693 = lshr i32 %10670, 31
  %10694 = trunc i32 %10693 to i8
  %10695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10694, i8* %10695, align 1, !tbaa !2451
  %10696 = lshr i32 %10669, 31
  %10697 = lshr i32 %10665, 31
  %10698 = xor i32 %10693, %10696
  %10699 = xor i32 %10693, %10697
  %10700 = add nuw nsw i32 %10698, %10699
  %10701 = icmp eq i32 %10700, 2
  %10702 = zext i1 %10701 to i8
  %10703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10702, i8* %10703, align 1, !tbaa !2452
  %10704 = load i32, i32* %EDX
  %10705 = zext i32 %10704 to i64
  %10706 = load i64, i64* %PC
  %10707 = add i64 %10706, 3
  store i64 %10707, i64* %PC
  %10708 = shl i64 %10705, 32
  %10709 = ashr exact i64 %10708, 32
  store i64 %10709, i64* %RCX, align 8, !tbaa !2428
  %10710 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10711 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10712 = load i64, i64* %RAX
  %10713 = load i64, i64* %RCX
  %10714 = mul i64 %10713, 4
  %10715 = add i64 %10714, %10712
  %10716 = load i64, i64* %PC
  %10717 = add i64 %10716, 5
  store i64 %10717, i64* %PC
  %10718 = bitcast i8* %10711 to <2 x float>*
  %10719 = load <2 x float>, <2 x float>* %10718, align 1
  %10720 = getelementptr inbounds i8, i8* %10711, i64 8
  %10721 = bitcast i8* %10720 to <2 x i32>*
  %10722 = load <2 x i32>, <2 x i32>* %10721, align 1
  %10723 = inttoptr i64 %10715 to float*
  %10724 = load float, float* %10723
  %10725 = extractelement <2 x float> %10719, i32 0
  %10726 = fadd float %10725, %10724
  %10727 = bitcast i8* %10710 to float*
  store float %10726, float* %10727, align 1, !tbaa !2453
  %10728 = bitcast <2 x float> %10719 to <2 x i32>
  %10729 = extractelement <2 x i32> %10728, i32 1
  %10730 = getelementptr inbounds i8, i8* %10710, i64 4
  %10731 = bitcast i8* %10730 to i32*
  store i32 %10729, i32* %10731, align 1, !tbaa !2453
  %10732 = extractelement <2 x i32> %10722, i32 0
  %10733 = getelementptr inbounds i8, i8* %10710, i64 8
  %10734 = bitcast i8* %10733 to i32*
  store i32 %10732, i32* %10734, align 1, !tbaa !2453
  %10735 = extractelement <2 x i32> %10722, i32 1
  %10736 = getelementptr inbounds i8, i8* %10710, i64 12
  %10737 = bitcast i8* %10736 to i32*
  store i32 %10735, i32* %10737, align 1, !tbaa !2453
  %10738 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10740 = bitcast %union.vec128_t* %XMM2 to i8*
  %10741 = load i64, i64* %PC
  %10742 = add i64 %10741, 4
  store i64 %10742, i64* %PC
  %10743 = bitcast i8* %10739 to <2 x float>*
  %10744 = load <2 x float>, <2 x float>* %10743, align 1
  %10745 = getelementptr inbounds i8, i8* %10739, i64 8
  %10746 = bitcast i8* %10745 to <2 x i32>*
  %10747 = load <2 x i32>, <2 x i32>* %10746, align 1
  %10748 = bitcast i8* %10740 to <2 x float>*
  %10749 = load <2 x float>, <2 x float>* %10748, align 1
  %10750 = extractelement <2 x float> %10744, i32 0
  %10751 = extractelement <2 x float> %10749, i32 0
  %10752 = fmul float %10750, %10751
  %10753 = bitcast i8* %10738 to float*
  store float %10752, float* %10753, align 1, !tbaa !2453
  %10754 = bitcast <2 x float> %10744 to <2 x i32>
  %10755 = extractelement <2 x i32> %10754, i32 1
  %10756 = getelementptr inbounds i8, i8* %10738, i64 4
  %10757 = bitcast i8* %10756 to i32*
  store i32 %10755, i32* %10757, align 1, !tbaa !2453
  %10758 = extractelement <2 x i32> %10747, i32 0
  %10759 = getelementptr inbounds i8, i8* %10738, i64 8
  %10760 = bitcast i8* %10759 to i32*
  store i32 %10758, i32* %10760, align 1, !tbaa !2453
  %10761 = extractelement <2 x i32> %10747, i32 1
  %10762 = getelementptr inbounds i8, i8* %10738, i64 12
  %10763 = bitcast i8* %10762 to i32*
  store i32 %10761, i32* %10763, align 1, !tbaa !2453
  %10764 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10766 = bitcast %union.vec128_t* %XMM1 to i8*
  %10767 = load i64, i64* %PC
  %10768 = add i64 %10767, 4
  store i64 %10768, i64* %PC
  %10769 = bitcast i8* %10765 to <2 x float>*
  %10770 = load <2 x float>, <2 x float>* %10769, align 1
  %10771 = getelementptr inbounds i8, i8* %10765, i64 8
  %10772 = bitcast i8* %10771 to <2 x i32>*
  %10773 = load <2 x i32>, <2 x i32>* %10772, align 1
  %10774 = bitcast i8* %10766 to <2 x float>*
  %10775 = load <2 x float>, <2 x float>* %10774, align 1
  %10776 = extractelement <2 x float> %10770, i32 0
  %10777 = extractelement <2 x float> %10775, i32 0
  %10778 = fadd float %10776, %10777
  %10779 = bitcast i8* %10764 to float*
  store float %10778, float* %10779, align 1, !tbaa !2453
  %10780 = bitcast <2 x float> %10770 to <2 x i32>
  %10781 = extractelement <2 x i32> %10780, i32 1
  %10782 = getelementptr inbounds i8, i8* %10764, i64 4
  %10783 = bitcast i8* %10782 to i32*
  store i32 %10781, i32* %10783, align 1, !tbaa !2453
  %10784 = extractelement <2 x i32> %10773, i32 0
  %10785 = getelementptr inbounds i8, i8* %10764, i64 8
  %10786 = bitcast i8* %10785 to i32*
  store i32 %10784, i32* %10786, align 1, !tbaa !2453
  %10787 = extractelement <2 x i32> %10773, i32 1
  %10788 = getelementptr inbounds i8, i8* %10764, i64 12
  %10789 = bitcast i8* %10788 to i32*
  store i32 %10787, i32* %10789, align 1, !tbaa !2453
  %10790 = load i64, i64* %RBP
  %10791 = sub i64 %10790, 32
  %10792 = load i64, i64* %PC
  %10793 = add i64 %10792, 4
  store i64 %10793, i64* %PC
  %10794 = inttoptr i64 %10791 to i64*
  %10795 = load i64, i64* %10794
  store i64 %10795, i64* %RAX, align 8, !tbaa !2428
  %10796 = load i64, i64* %RAX
  %10797 = load i64, i64* %PC
  %10798 = add i64 %10797, 3
  store i64 %10798, i64* %PC
  %10799 = inttoptr i64 %10796 to i64*
  %10800 = load i64, i64* %10799
  store i64 %10800, i64* %RAX, align 8, !tbaa !2428
  %10801 = load i64, i64* %RBP
  %10802 = sub i64 %10801, 32
  %10803 = load i64, i64* %PC
  %10804 = add i64 %10803, 4
  store i64 %10804, i64* %PC
  %10805 = inttoptr i64 %10802 to i64*
  %10806 = load i64, i64* %10805
  store i64 %10806, i64* %RCX, align 8, !tbaa !2428
  %10807 = load i64, i64* %RCX
  %10808 = add i64 %10807, 12
  %10809 = load i64, i64* %PC
  %10810 = add i64 %10809, 4
  store i64 %10810, i64* %PC
  %10811 = inttoptr i64 %10808 to i32*
  %10812 = load i32, i32* %10811
  %10813 = sext i32 %10812 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %10814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10814, align 1, !tbaa !2434
  %10815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %10815, align 1, !tbaa !2448
  %10816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10816, align 1, !tbaa !2449
  %10817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10817, align 1, !tbaa !2450
  %10818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %10818, align 1, !tbaa !2451
  %10819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10819, align 1, !tbaa !2452
  %10820 = load i64, i64* %RBP
  %10821 = sub i64 %10820, 32
  %10822 = load i64, i64* %PC
  %10823 = add i64 %10822, 4
  store i64 %10823, i64* %PC
  %10824 = inttoptr i64 %10821 to i64*
  %10825 = load i64, i64* %10824
  store i64 %10825, i64* %RCX, align 8, !tbaa !2428
  %10826 = load i64, i64* %RDX
  %10827 = load i64, i64* %RCX
  %10828 = add i64 %10827, 16
  %10829 = load i64, i64* %PC
  %10830 = add i64 %10829, 4
  store i64 %10830, i64* %PC
  %10831 = inttoptr i64 %10828 to i32*
  %10832 = load i32, i32* %10831
  %10833 = shl i64 %10826, 32
  %10834 = ashr exact i64 %10833, 32
  %10835 = sext i32 %10832 to i64
  %10836 = mul nsw i64 %10835, %10834
  %10837 = trunc i64 %10836 to i32
  %10838 = and i64 %10836, 4294967295
  store i64 %10838, i64* %RDX, align 8, !tbaa !2428
  %10839 = shl i64 %10836, 32
  %10840 = ashr exact i64 %10839, 32
  %10841 = icmp ne i64 %10840, %10836
  %10842 = zext i1 %10841 to i8
  %10843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10842, i8* %10843, align 1, !tbaa !2434
  %10844 = and i32 %10837, 255
  %10845 = call i32 @llvm.ctpop.i32(i32 %10844) #16
  %10846 = trunc i32 %10845 to i8
  %10847 = and i8 %10846, 1
  %10848 = xor i8 %10847, 1
  %10849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10848, i8* %10849, align 1, !tbaa !2448
  %10850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10850, align 1, !tbaa !2449
  %10851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10851, align 1, !tbaa !2450
  %10852 = lshr i32 %10837, 31
  %10853 = trunc i32 %10852 to i8
  %10854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10853, i8* %10854, align 1, !tbaa !2451
  %10855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10842, i8* %10855, align 1, !tbaa !2452
  %10856 = load i64, i64* %RBP
  %10857 = sub i64 %10856, 32
  %10858 = load i64, i64* %PC
  %10859 = add i64 %10858, 4
  store i64 %10859, i64* %PC
  %10860 = inttoptr i64 %10857 to i64*
  %10861 = load i64, i64* %10860
  store i64 %10861, i64* %RCX, align 8, !tbaa !2428
  %10862 = load i64, i64* %RDX
  %10863 = load i64, i64* %RCX
  %10864 = add i64 %10863, 20
  %10865 = load i64, i64* %PC
  %10866 = add i64 %10865, 4
  store i64 %10866, i64* %PC
  %10867 = inttoptr i64 %10864 to i32*
  %10868 = load i32, i32* %10867
  %10869 = shl i64 %10862, 32
  %10870 = ashr exact i64 %10869, 32
  %10871 = sext i32 %10868 to i64
  %10872 = mul nsw i64 %10871, %10870
  %10873 = trunc i64 %10872 to i32
  %10874 = and i64 %10872, 4294967295
  store i64 %10874, i64* %RDX, align 8, !tbaa !2428
  %10875 = shl i64 %10872, 32
  %10876 = ashr exact i64 %10875, 32
  %10877 = icmp ne i64 %10876, %10872
  %10878 = zext i1 %10877 to i8
  %10879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10878, i8* %10879, align 1, !tbaa !2434
  %10880 = and i32 %10873, 255
  %10881 = call i32 @llvm.ctpop.i32(i32 %10880) #16
  %10882 = trunc i32 %10881 to i8
  %10883 = and i8 %10882, 1
  %10884 = xor i8 %10883, 1
  %10885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10884, i8* %10885, align 1, !tbaa !2448
  %10886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10886, align 1, !tbaa !2449
  %10887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10887, align 1, !tbaa !2450
  %10888 = lshr i32 %10873, 31
  %10889 = trunc i32 %10888 to i8
  %10890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10889, i8* %10890, align 1, !tbaa !2451
  %10891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10878, i8* %10891, align 1, !tbaa !2452
  %10892 = load i64, i64* %RBP
  %10893 = sub i64 %10892, 68
  %10894 = load i64, i64* %PC
  %10895 = add i64 %10894, 3
  store i64 %10895, i64* %PC
  %10896 = inttoptr i64 %10893 to i32*
  %10897 = load i32, i32* %10896
  %10898 = zext i32 %10897 to i64
  store i64 %10898, i64* %RSI, align 8, !tbaa !2428
  %10899 = load i64, i64* %RBP
  %10900 = sub i64 %10899, 32
  %10901 = load i64, i64* %PC
  %10902 = add i64 %10901, 4
  store i64 %10902, i64* %PC
  %10903 = inttoptr i64 %10900 to i64*
  %10904 = load i64, i64* %10903
  store i64 %10904, i64* %RCX, align 8, !tbaa !2428
  %10905 = load i64, i64* %RSI
  %10906 = load i64, i64* %RCX
  %10907 = add i64 %10906, 16
  %10908 = load i64, i64* %PC
  %10909 = add i64 %10908, 4
  store i64 %10909, i64* %PC
  %10910 = inttoptr i64 %10907 to i32*
  %10911 = load i32, i32* %10910
  %10912 = shl i64 %10905, 32
  %10913 = ashr exact i64 %10912, 32
  %10914 = sext i32 %10911 to i64
  %10915 = mul nsw i64 %10914, %10913
  %10916 = trunc i64 %10915 to i32
  %10917 = and i64 %10915, 4294967295
  store i64 %10917, i64* %RSI, align 8, !tbaa !2428
  %10918 = shl i64 %10915, 32
  %10919 = ashr exact i64 %10918, 32
  %10920 = icmp ne i64 %10919, %10915
  %10921 = zext i1 %10920 to i8
  %10922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10921, i8* %10922, align 1, !tbaa !2434
  %10923 = and i32 %10916, 255
  %10924 = call i32 @llvm.ctpop.i32(i32 %10923) #16
  %10925 = trunc i32 %10924 to i8
  %10926 = and i8 %10925, 1
  %10927 = xor i8 %10926, 1
  %10928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10927, i8* %10928, align 1, !tbaa !2448
  %10929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10929, align 1, !tbaa !2449
  %10930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10930, align 1, !tbaa !2450
  %10931 = lshr i32 %10916, 31
  %10932 = trunc i32 %10931 to i8
  %10933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10932, i8* %10933, align 1, !tbaa !2451
  %10934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10921, i8* %10934, align 1, !tbaa !2452
  %10935 = load i64, i64* %RBP
  %10936 = sub i64 %10935, 32
  %10937 = load i64, i64* %PC
  %10938 = add i64 %10937, 4
  store i64 %10938, i64* %PC
  %10939 = inttoptr i64 %10936 to i64*
  %10940 = load i64, i64* %10939
  store i64 %10940, i64* %RCX, align 8, !tbaa !2428
  %10941 = load i64, i64* %RSI
  %10942 = load i64, i64* %RCX
  %10943 = add i64 %10942, 20
  %10944 = load i64, i64* %PC
  %10945 = add i64 %10944, 4
  store i64 %10945, i64* %PC
  %10946 = inttoptr i64 %10943 to i32*
  %10947 = load i32, i32* %10946
  %10948 = shl i64 %10941, 32
  %10949 = ashr exact i64 %10948, 32
  %10950 = sext i32 %10947 to i64
  %10951 = mul nsw i64 %10950, %10949
  %10952 = trunc i64 %10951 to i32
  %10953 = and i64 %10951, 4294967295
  store i64 %10953, i64* %RSI, align 8, !tbaa !2428
  %10954 = shl i64 %10951, 32
  %10955 = ashr exact i64 %10954, 32
  %10956 = icmp ne i64 %10955, %10951
  %10957 = zext i1 %10956 to i8
  %10958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10957, i8* %10958, align 1, !tbaa !2434
  %10959 = and i32 %10952, 255
  %10960 = call i32 @llvm.ctpop.i32(i32 %10959) #16
  %10961 = trunc i32 %10960 to i8
  %10962 = and i8 %10961, 1
  %10963 = xor i8 %10962, 1
  %10964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10963, i8* %10964, align 1, !tbaa !2448
  %10965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10965, align 1, !tbaa !2449
  %10966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %10966, align 1, !tbaa !2450
  %10967 = lshr i32 %10952, 31
  %10968 = trunc i32 %10967 to i8
  %10969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10968, i8* %10969, align 1, !tbaa !2451
  %10970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10957, i8* %10970, align 1, !tbaa !2452
  %10971 = load i64, i64* %RDX
  %10972 = load i32, i32* %ESI
  %10973 = zext i32 %10972 to i64
  %10974 = load i64, i64* %PC
  %10975 = add i64 %10974, 2
  store i64 %10975, i64* %PC
  %10976 = trunc i64 %10971 to i32
  %10977 = add i32 %10972, %10976
  %10978 = zext i32 %10977 to i64
  store i64 %10978, i64* %RDX, align 8, !tbaa !2428
  %10979 = icmp ult i32 %10977, %10976
  %10980 = icmp ult i32 %10977, %10972
  %10981 = or i1 %10979, %10980
  %10982 = zext i1 %10981 to i8
  %10983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10982, i8* %10983, align 1, !tbaa !2434
  %10984 = and i32 %10977, 255
  %10985 = call i32 @llvm.ctpop.i32(i32 %10984) #16
  %10986 = trunc i32 %10985 to i8
  %10987 = and i8 %10986, 1
  %10988 = xor i8 %10987, 1
  %10989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10988, i8* %10989, align 1, !tbaa !2448
  %10990 = xor i64 %10973, %10971
  %10991 = trunc i64 %10990 to i32
  %10992 = xor i32 %10991, %10977
  %10993 = lshr i32 %10992, 4
  %10994 = trunc i32 %10993 to i8
  %10995 = and i8 %10994, 1
  %10996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10995, i8* %10996, align 1, !tbaa !2449
  %10997 = icmp eq i32 %10977, 0
  %10998 = zext i1 %10997 to i8
  %10999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10998, i8* %10999, align 1, !tbaa !2450
  %11000 = lshr i32 %10977, 31
  %11001 = trunc i32 %11000 to i8
  %11002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11001, i8* %11002, align 1, !tbaa !2451
  %11003 = lshr i32 %10976, 31
  %11004 = lshr i32 %10972, 31
  %11005 = xor i32 %11000, %11003
  %11006 = xor i32 %11000, %11004
  %11007 = add nuw nsw i32 %11005, %11006
  %11008 = icmp eq i32 %11007, 2
  %11009 = zext i1 %11008 to i8
  %11010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11009, i8* %11010, align 1, !tbaa !2452
  %11011 = load i64, i64* %RBP
  %11012 = sub i64 %11011, 72
  %11013 = load i64, i64* %PC
  %11014 = add i64 %11013, 3
  store i64 %11014, i64* %PC
  %11015 = inttoptr i64 %11012 to i32*
  %11016 = load i32, i32* %11015
  %11017 = zext i32 %11016 to i64
  store i64 %11017, i64* %RSI, align 8, !tbaa !2428
  %11018 = load i64, i64* %RBP
  %11019 = sub i64 %11018, 32
  %11020 = load i64, i64* %PC
  %11021 = add i64 %11020, 4
  store i64 %11021, i64* %PC
  %11022 = inttoptr i64 %11019 to i64*
  %11023 = load i64, i64* %11022
  store i64 %11023, i64* %RCX, align 8, !tbaa !2428
  %11024 = load i64, i64* %RSI
  %11025 = load i64, i64* %RCX
  %11026 = add i64 %11025, 20
  %11027 = load i64, i64* %PC
  %11028 = add i64 %11027, 4
  store i64 %11028, i64* %PC
  %11029 = inttoptr i64 %11026 to i32*
  %11030 = load i32, i32* %11029
  %11031 = shl i64 %11024, 32
  %11032 = ashr exact i64 %11031, 32
  %11033 = sext i32 %11030 to i64
  %11034 = mul nsw i64 %11033, %11032
  %11035 = trunc i64 %11034 to i32
  %11036 = and i64 %11034, 4294967295
  store i64 %11036, i64* %RSI, align 8, !tbaa !2428
  %11037 = shl i64 %11034, 32
  %11038 = ashr exact i64 %11037, 32
  %11039 = icmp ne i64 %11038, %11034
  %11040 = zext i1 %11039 to i8
  %11041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11040, i8* %11041, align 1, !tbaa !2434
  %11042 = and i32 %11035, 255
  %11043 = call i32 @llvm.ctpop.i32(i32 %11042) #16
  %11044 = trunc i32 %11043 to i8
  %11045 = and i8 %11044, 1
  %11046 = xor i8 %11045, 1
  %11047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11046, i8* %11047, align 1, !tbaa !2448
  %11048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11048, align 1, !tbaa !2449
  %11049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11049, align 1, !tbaa !2450
  %11050 = lshr i32 %11035, 31
  %11051 = trunc i32 %11050 to i8
  %11052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11051, i8* %11052, align 1, !tbaa !2451
  %11053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11040, i8* %11053, align 1, !tbaa !2452
  %11054 = load i64, i64* %RDX
  %11055 = load i32, i32* %ESI
  %11056 = zext i32 %11055 to i64
  %11057 = load i64, i64* %PC
  %11058 = add i64 %11057, 2
  store i64 %11058, i64* %PC
  %11059 = trunc i64 %11054 to i32
  %11060 = add i32 %11055, %11059
  %11061 = zext i32 %11060 to i64
  store i64 %11061, i64* %RDX, align 8, !tbaa !2428
  %11062 = icmp ult i32 %11060, %11059
  %11063 = icmp ult i32 %11060, %11055
  %11064 = or i1 %11062, %11063
  %11065 = zext i1 %11064 to i8
  %11066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11065, i8* %11066, align 1, !tbaa !2434
  %11067 = and i32 %11060, 255
  %11068 = call i32 @llvm.ctpop.i32(i32 %11067) #16
  %11069 = trunc i32 %11068 to i8
  %11070 = and i8 %11069, 1
  %11071 = xor i8 %11070, 1
  %11072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11071, i8* %11072, align 1, !tbaa !2448
  %11073 = xor i64 %11056, %11054
  %11074 = trunc i64 %11073 to i32
  %11075 = xor i32 %11074, %11060
  %11076 = lshr i32 %11075, 4
  %11077 = trunc i32 %11076 to i8
  %11078 = and i8 %11077, 1
  %11079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11078, i8* %11079, align 1, !tbaa !2449
  %11080 = icmp eq i32 %11060, 0
  %11081 = zext i1 %11080 to i8
  %11082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11081, i8* %11082, align 1, !tbaa !2450
  %11083 = lshr i32 %11060, 31
  %11084 = trunc i32 %11083 to i8
  %11085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11084, i8* %11085, align 1, !tbaa !2451
  %11086 = lshr i32 %11059, 31
  %11087 = lshr i32 %11055, 31
  %11088 = xor i32 %11083, %11086
  %11089 = xor i32 %11083, %11087
  %11090 = add nuw nsw i32 %11088, %11089
  %11091 = icmp eq i32 %11090, 2
  %11092 = zext i1 %11091 to i8
  %11093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11092, i8* %11093, align 1, !tbaa !2452
  %11094 = load i64, i64* %RDX
  %11095 = load i64, i64* %RBP
  %11096 = sub i64 %11095, 76
  %11097 = load i64, i64* %PC
  %11098 = add i64 %11097, 3
  store i64 %11098, i64* %PC
  %11099 = trunc i64 %11094 to i32
  %11100 = inttoptr i64 %11096 to i32*
  %11101 = load i32, i32* %11100
  %11102 = add i32 %11101, %11099
  %11103 = zext i32 %11102 to i64
  store i64 %11103, i64* %RDX, align 8, !tbaa !2428
  %11104 = icmp ult i32 %11102, %11099
  %11105 = icmp ult i32 %11102, %11101
  %11106 = or i1 %11104, %11105
  %11107 = zext i1 %11106 to i8
  %11108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11107, i8* %11108, align 1, !tbaa !2434
  %11109 = and i32 %11102, 255
  %11110 = call i32 @llvm.ctpop.i32(i32 %11109) #16
  %11111 = trunc i32 %11110 to i8
  %11112 = and i8 %11111, 1
  %11113 = xor i8 %11112, 1
  %11114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11113, i8* %11114, align 1, !tbaa !2448
  %11115 = xor i32 %11101, %11099
  %11116 = xor i32 %11115, %11102
  %11117 = lshr i32 %11116, 4
  %11118 = trunc i32 %11117 to i8
  %11119 = and i8 %11118, 1
  %11120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11119, i8* %11120, align 1, !tbaa !2449
  %11121 = icmp eq i32 %11102, 0
  %11122 = zext i1 %11121 to i8
  %11123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11122, i8* %11123, align 1, !tbaa !2450
  %11124 = lshr i32 %11102, 31
  %11125 = trunc i32 %11124 to i8
  %11126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11125, i8* %11126, align 1, !tbaa !2451
  %11127 = lshr i32 %11099, 31
  %11128 = lshr i32 %11101, 31
  %11129 = xor i32 %11124, %11127
  %11130 = xor i32 %11124, %11128
  %11131 = add nuw nsw i32 %11129, %11130
  %11132 = icmp eq i32 %11131, 2
  %11133 = zext i1 %11132 to i8
  %11134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11133, i8* %11134, align 1, !tbaa !2452
  %11135 = load i32, i32* %EDX
  %11136 = zext i32 %11135 to i64
  %11137 = load i64, i64* %PC
  %11138 = add i64 %11137, 3
  store i64 %11138, i64* %PC
  %11139 = shl i64 %11136, 32
  %11140 = ashr exact i64 %11139, 32
  store i64 %11140, i64* %RCX, align 8, !tbaa !2428
  %11141 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11142 = load i64, i64* %RAX
  %11143 = load i64, i64* %RCX
  %11144 = mul i64 %11143, 4
  %11145 = add i64 %11144, %11142
  %11146 = load i64, i64* %PC
  %11147 = add i64 %11146, 5
  store i64 %11147, i64* %PC
  %11148 = inttoptr i64 %11145 to float*
  %11149 = load float, float* %11148
  %11150 = bitcast i8* %11141 to float*
  store float %11149, float* %11150, align 1, !tbaa !2453
  %11151 = getelementptr inbounds i8, i8* %11141, i64 4
  %11152 = bitcast i8* %11151 to float*
  store float 0.000000e+00, float* %11152, align 1, !tbaa !2453
  %11153 = getelementptr inbounds i8, i8* %11141, i64 8
  %11154 = bitcast i8* %11153 to float*
  store float 0.000000e+00, float* %11154, align 1, !tbaa !2453
  %11155 = getelementptr inbounds i8, i8* %11141, i64 12
  %11156 = bitcast i8* %11155 to float*
  store float 0.000000e+00, float* %11156, align 1, !tbaa !2453
  %11157 = load i64, i64* %RBP
  %11158 = sub i64 %11157, 40
  %11159 = load i64, i64* %PC
  %11160 = add i64 %11159, 4
  store i64 %11160, i64* %PC
  %11161 = inttoptr i64 %11158 to i64*
  %11162 = load i64, i64* %11161
  store i64 %11162, i64* %RAX, align 8, !tbaa !2428
  %11163 = load i64, i64* %RAX
  %11164 = load i64, i64* %PC
  %11165 = add i64 %11164, 3
  store i64 %11165, i64* %PC
  %11166 = inttoptr i64 %11163 to i64*
  %11167 = load i64, i64* %11166
  store i64 %11167, i64* %RAX, align 8, !tbaa !2428
  %11168 = load i64, i64* %RBP
  %11169 = sub i64 %11168, 40
  %11170 = load i64, i64* %PC
  %11171 = add i64 %11170, 4
  store i64 %11171, i64* %PC
  %11172 = inttoptr i64 %11169 to i64*
  %11173 = load i64, i64* %11172
  store i64 %11173, i64* %RCX, align 8, !tbaa !2428
  %11174 = load i64, i64* %RCX
  %11175 = add i64 %11174, 12
  %11176 = load i64, i64* %PC
  %11177 = add i64 %11176, 4
  store i64 %11177, i64* %PC
  %11178 = inttoptr i64 %11175 to i32*
  %11179 = load i32, i32* %11178
  %11180 = sext i32 %11179 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %11181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11181, align 1, !tbaa !2434
  %11182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11182, align 1, !tbaa !2448
  %11183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11183, align 1, !tbaa !2449
  %11184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11184, align 1, !tbaa !2450
  %11185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %11185, align 1, !tbaa !2451
  %11186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11186, align 1, !tbaa !2452
  %11187 = load i64, i64* %RBP
  %11188 = sub i64 %11187, 40
  %11189 = load i64, i64* %PC
  %11190 = add i64 %11189, 4
  store i64 %11190, i64* %PC
  %11191 = inttoptr i64 %11188 to i64*
  %11192 = load i64, i64* %11191
  store i64 %11192, i64* %RCX, align 8, !tbaa !2428
  %11193 = load i64, i64* %RDX
  %11194 = load i64, i64* %RCX
  %11195 = add i64 %11194, 16
  %11196 = load i64, i64* %PC
  %11197 = add i64 %11196, 4
  store i64 %11197, i64* %PC
  %11198 = inttoptr i64 %11195 to i32*
  %11199 = load i32, i32* %11198
  %11200 = shl i64 %11193, 32
  %11201 = ashr exact i64 %11200, 32
  %11202 = sext i32 %11199 to i64
  %11203 = mul nsw i64 %11202, %11201
  %11204 = trunc i64 %11203 to i32
  %11205 = and i64 %11203, 4294967295
  store i64 %11205, i64* %RDX, align 8, !tbaa !2428
  %11206 = shl i64 %11203, 32
  %11207 = ashr exact i64 %11206, 32
  %11208 = icmp ne i64 %11207, %11203
  %11209 = zext i1 %11208 to i8
  %11210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11209, i8* %11210, align 1, !tbaa !2434
  %11211 = and i32 %11204, 255
  %11212 = call i32 @llvm.ctpop.i32(i32 %11211) #16
  %11213 = trunc i32 %11212 to i8
  %11214 = and i8 %11213, 1
  %11215 = xor i8 %11214, 1
  %11216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11215, i8* %11216, align 1, !tbaa !2448
  %11217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11217, align 1, !tbaa !2449
  %11218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11218, align 1, !tbaa !2450
  %11219 = lshr i32 %11204, 31
  %11220 = trunc i32 %11219 to i8
  %11221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11220, i8* %11221, align 1, !tbaa !2451
  %11222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11209, i8* %11222, align 1, !tbaa !2452
  %11223 = load i64, i64* %RBP
  %11224 = sub i64 %11223, 40
  %11225 = load i64, i64* %PC
  %11226 = add i64 %11225, 4
  store i64 %11226, i64* %PC
  %11227 = inttoptr i64 %11224 to i64*
  %11228 = load i64, i64* %11227
  store i64 %11228, i64* %RCX, align 8, !tbaa !2428
  %11229 = load i64, i64* %RDX
  %11230 = load i64, i64* %RCX
  %11231 = add i64 %11230, 20
  %11232 = load i64, i64* %PC
  %11233 = add i64 %11232, 4
  store i64 %11233, i64* %PC
  %11234 = inttoptr i64 %11231 to i32*
  %11235 = load i32, i32* %11234
  %11236 = shl i64 %11229, 32
  %11237 = ashr exact i64 %11236, 32
  %11238 = sext i32 %11235 to i64
  %11239 = mul nsw i64 %11238, %11237
  %11240 = trunc i64 %11239 to i32
  %11241 = and i64 %11239, 4294967295
  store i64 %11241, i64* %RDX, align 8, !tbaa !2428
  %11242 = shl i64 %11239, 32
  %11243 = ashr exact i64 %11242, 32
  %11244 = icmp ne i64 %11243, %11239
  %11245 = zext i1 %11244 to i8
  %11246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11245, i8* %11246, align 1, !tbaa !2434
  %11247 = and i32 %11240, 255
  %11248 = call i32 @llvm.ctpop.i32(i32 %11247) #16
  %11249 = trunc i32 %11248 to i8
  %11250 = and i8 %11249, 1
  %11251 = xor i8 %11250, 1
  %11252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11251, i8* %11252, align 1, !tbaa !2448
  %11253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11253, align 1, !tbaa !2449
  %11254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11254, align 1, !tbaa !2450
  %11255 = lshr i32 %11240, 31
  %11256 = trunc i32 %11255 to i8
  %11257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11256, i8* %11257, align 1, !tbaa !2451
  %11258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11245, i8* %11258, align 1, !tbaa !2452
  %11259 = load i64, i64* %RBP
  %11260 = sub i64 %11259, 68
  %11261 = load i64, i64* %PC
  %11262 = add i64 %11261, 3
  store i64 %11262, i64* %PC
  %11263 = inttoptr i64 %11260 to i32*
  %11264 = load i32, i32* %11263
  %11265 = zext i32 %11264 to i64
  store i64 %11265, i64* %RSI, align 8, !tbaa !2428
  %11266 = load i64, i64* %RSI
  %11267 = load i64, i64* %PC
  %11268 = add i64 %11267, 3
  store i64 %11268, i64* %PC
  %11269 = trunc i64 %11266 to i32
  %11270 = sub i32 %11269, 1
  %11271 = zext i32 %11270 to i64
  store i64 %11271, i64* %RSI, align 8, !tbaa !2428
  %11272 = icmp ult i32 %11269, 1
  %11273 = zext i1 %11272 to i8
  %11274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11273, i8* %11274, align 1, !tbaa !2434
  %11275 = and i32 %11270, 255
  %11276 = call i32 @llvm.ctpop.i32(i32 %11275) #16
  %11277 = trunc i32 %11276 to i8
  %11278 = and i8 %11277, 1
  %11279 = xor i8 %11278, 1
  %11280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11279, i8* %11280, align 1, !tbaa !2448
  %11281 = xor i64 1, %11266
  %11282 = trunc i64 %11281 to i32
  %11283 = xor i32 %11282, %11270
  %11284 = lshr i32 %11283, 4
  %11285 = trunc i32 %11284 to i8
  %11286 = and i8 %11285, 1
  %11287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11286, i8* %11287, align 1, !tbaa !2449
  %11288 = icmp eq i32 %11270, 0
  %11289 = zext i1 %11288 to i8
  %11290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11289, i8* %11290, align 1, !tbaa !2450
  %11291 = lshr i32 %11270, 31
  %11292 = trunc i32 %11291 to i8
  %11293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11292, i8* %11293, align 1, !tbaa !2451
  %11294 = lshr i32 %11269, 31
  %11295 = xor i32 %11291, %11294
  %11296 = add nuw nsw i32 %11295, %11294
  %11297 = icmp eq i32 %11296, 2
  %11298 = zext i1 %11297 to i8
  %11299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11298, i8* %11299, align 1, !tbaa !2452
  %11300 = load i64, i64* %RBP
  %11301 = sub i64 %11300, 40
  %11302 = load i64, i64* %PC
  %11303 = add i64 %11302, 4
  store i64 %11303, i64* %PC
  %11304 = inttoptr i64 %11301 to i64*
  %11305 = load i64, i64* %11304
  store i64 %11305, i64* %RCX, align 8, !tbaa !2428
  %11306 = load i64, i64* %RSI
  %11307 = load i64, i64* %RCX
  %11308 = add i64 %11307, 16
  %11309 = load i64, i64* %PC
  %11310 = add i64 %11309, 4
  store i64 %11310, i64* %PC
  %11311 = inttoptr i64 %11308 to i32*
  %11312 = load i32, i32* %11311
  %11313 = shl i64 %11306, 32
  %11314 = ashr exact i64 %11313, 32
  %11315 = sext i32 %11312 to i64
  %11316 = mul nsw i64 %11315, %11314
  %11317 = trunc i64 %11316 to i32
  %11318 = and i64 %11316, 4294967295
  store i64 %11318, i64* %RSI, align 8, !tbaa !2428
  %11319 = shl i64 %11316, 32
  %11320 = ashr exact i64 %11319, 32
  %11321 = icmp ne i64 %11320, %11316
  %11322 = zext i1 %11321 to i8
  %11323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11322, i8* %11323, align 1, !tbaa !2434
  %11324 = and i32 %11317, 255
  %11325 = call i32 @llvm.ctpop.i32(i32 %11324) #16
  %11326 = trunc i32 %11325 to i8
  %11327 = and i8 %11326, 1
  %11328 = xor i8 %11327, 1
  %11329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11328, i8* %11329, align 1, !tbaa !2448
  %11330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11330, align 1, !tbaa !2449
  %11331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11331, align 1, !tbaa !2450
  %11332 = lshr i32 %11317, 31
  %11333 = trunc i32 %11332 to i8
  %11334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11333, i8* %11334, align 1, !tbaa !2451
  %11335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11322, i8* %11335, align 1, !tbaa !2452
  %11336 = load i64, i64* %RBP
  %11337 = sub i64 %11336, 40
  %11338 = load i64, i64* %PC
  %11339 = add i64 %11338, 4
  store i64 %11339, i64* %PC
  %11340 = inttoptr i64 %11337 to i64*
  %11341 = load i64, i64* %11340
  store i64 %11341, i64* %RCX, align 8, !tbaa !2428
  %11342 = load i64, i64* %RSI
  %11343 = load i64, i64* %RCX
  %11344 = add i64 %11343, 20
  %11345 = load i64, i64* %PC
  %11346 = add i64 %11345, 4
  store i64 %11346, i64* %PC
  %11347 = inttoptr i64 %11344 to i32*
  %11348 = load i32, i32* %11347
  %11349 = shl i64 %11342, 32
  %11350 = ashr exact i64 %11349, 32
  %11351 = sext i32 %11348 to i64
  %11352 = mul nsw i64 %11351, %11350
  %11353 = trunc i64 %11352 to i32
  %11354 = and i64 %11352, 4294967295
  store i64 %11354, i64* %RSI, align 8, !tbaa !2428
  %11355 = shl i64 %11352, 32
  %11356 = ashr exact i64 %11355, 32
  %11357 = icmp ne i64 %11356, %11352
  %11358 = zext i1 %11357 to i8
  %11359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11358, i8* %11359, align 1, !tbaa !2434
  %11360 = and i32 %11353, 255
  %11361 = call i32 @llvm.ctpop.i32(i32 %11360) #16
  %11362 = trunc i32 %11361 to i8
  %11363 = and i8 %11362, 1
  %11364 = xor i8 %11363, 1
  %11365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11364, i8* %11365, align 1, !tbaa !2448
  %11366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11366, align 1, !tbaa !2449
  %11367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11367, align 1, !tbaa !2450
  %11368 = lshr i32 %11353, 31
  %11369 = trunc i32 %11368 to i8
  %11370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11369, i8* %11370, align 1, !tbaa !2451
  %11371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11358, i8* %11371, align 1, !tbaa !2452
  %11372 = load i64, i64* %RDX
  %11373 = load i32, i32* %ESI
  %11374 = zext i32 %11373 to i64
  %11375 = load i64, i64* %PC
  %11376 = add i64 %11375, 2
  store i64 %11376, i64* %PC
  %11377 = trunc i64 %11372 to i32
  %11378 = add i32 %11373, %11377
  %11379 = zext i32 %11378 to i64
  store i64 %11379, i64* %RDX, align 8, !tbaa !2428
  %11380 = icmp ult i32 %11378, %11377
  %11381 = icmp ult i32 %11378, %11373
  %11382 = or i1 %11380, %11381
  %11383 = zext i1 %11382 to i8
  %11384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11383, i8* %11384, align 1, !tbaa !2434
  %11385 = and i32 %11378, 255
  %11386 = call i32 @llvm.ctpop.i32(i32 %11385) #16
  %11387 = trunc i32 %11386 to i8
  %11388 = and i8 %11387, 1
  %11389 = xor i8 %11388, 1
  %11390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11389, i8* %11390, align 1, !tbaa !2448
  %11391 = xor i64 %11374, %11372
  %11392 = trunc i64 %11391 to i32
  %11393 = xor i32 %11392, %11378
  %11394 = lshr i32 %11393, 4
  %11395 = trunc i32 %11394 to i8
  %11396 = and i8 %11395, 1
  %11397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11396, i8* %11397, align 1, !tbaa !2449
  %11398 = icmp eq i32 %11378, 0
  %11399 = zext i1 %11398 to i8
  %11400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11399, i8* %11400, align 1, !tbaa !2450
  %11401 = lshr i32 %11378, 31
  %11402 = trunc i32 %11401 to i8
  %11403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11402, i8* %11403, align 1, !tbaa !2451
  %11404 = lshr i32 %11377, 31
  %11405 = lshr i32 %11373, 31
  %11406 = xor i32 %11401, %11404
  %11407 = xor i32 %11401, %11405
  %11408 = add nuw nsw i32 %11406, %11407
  %11409 = icmp eq i32 %11408, 2
  %11410 = zext i1 %11409 to i8
  %11411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11410, i8* %11411, align 1, !tbaa !2452
  %11412 = load i64, i64* %RBP
  %11413 = sub i64 %11412, 72
  %11414 = load i64, i64* %PC
  %11415 = add i64 %11414, 3
  store i64 %11415, i64* %PC
  %11416 = inttoptr i64 %11413 to i32*
  %11417 = load i32, i32* %11416
  %11418 = zext i32 %11417 to i64
  store i64 %11418, i64* %RSI, align 8, !tbaa !2428
  %11419 = load i64, i64* %RBP
  %11420 = sub i64 %11419, 40
  %11421 = load i64, i64* %PC
  %11422 = add i64 %11421, 4
  store i64 %11422, i64* %PC
  %11423 = inttoptr i64 %11420 to i64*
  %11424 = load i64, i64* %11423
  store i64 %11424, i64* %RCX, align 8, !tbaa !2428
  %11425 = load i64, i64* %RSI
  %11426 = load i64, i64* %RCX
  %11427 = add i64 %11426, 20
  %11428 = load i64, i64* %PC
  %11429 = add i64 %11428, 4
  store i64 %11429, i64* %PC
  %11430 = inttoptr i64 %11427 to i32*
  %11431 = load i32, i32* %11430
  %11432 = shl i64 %11425, 32
  %11433 = ashr exact i64 %11432, 32
  %11434 = sext i32 %11431 to i64
  %11435 = mul nsw i64 %11434, %11433
  %11436 = trunc i64 %11435 to i32
  %11437 = and i64 %11435, 4294967295
  store i64 %11437, i64* %RSI, align 8, !tbaa !2428
  %11438 = shl i64 %11435, 32
  %11439 = ashr exact i64 %11438, 32
  %11440 = icmp ne i64 %11439, %11435
  %11441 = zext i1 %11440 to i8
  %11442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11441, i8* %11442, align 1, !tbaa !2434
  %11443 = and i32 %11436, 255
  %11444 = call i32 @llvm.ctpop.i32(i32 %11443) #16
  %11445 = trunc i32 %11444 to i8
  %11446 = and i8 %11445, 1
  %11447 = xor i8 %11446, 1
  %11448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11447, i8* %11448, align 1, !tbaa !2448
  %11449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11449, align 1, !tbaa !2449
  %11450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11450, align 1, !tbaa !2450
  %11451 = lshr i32 %11436, 31
  %11452 = trunc i32 %11451 to i8
  %11453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11452, i8* %11453, align 1, !tbaa !2451
  %11454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11441, i8* %11454, align 1, !tbaa !2452
  %11455 = load i64, i64* %RDX
  %11456 = load i32, i32* %ESI
  %11457 = zext i32 %11456 to i64
  %11458 = load i64, i64* %PC
  %11459 = add i64 %11458, 2
  store i64 %11459, i64* %PC
  %11460 = trunc i64 %11455 to i32
  %11461 = add i32 %11456, %11460
  %11462 = zext i32 %11461 to i64
  store i64 %11462, i64* %RDX, align 8, !tbaa !2428
  %11463 = icmp ult i32 %11461, %11460
  %11464 = icmp ult i32 %11461, %11456
  %11465 = or i1 %11463, %11464
  %11466 = zext i1 %11465 to i8
  %11467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11466, i8* %11467, align 1, !tbaa !2434
  %11468 = and i32 %11461, 255
  %11469 = call i32 @llvm.ctpop.i32(i32 %11468) #16
  %11470 = trunc i32 %11469 to i8
  %11471 = and i8 %11470, 1
  %11472 = xor i8 %11471, 1
  %11473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11472, i8* %11473, align 1, !tbaa !2448
  %11474 = xor i64 %11457, %11455
  %11475 = trunc i64 %11474 to i32
  %11476 = xor i32 %11475, %11461
  %11477 = lshr i32 %11476, 4
  %11478 = trunc i32 %11477 to i8
  %11479 = and i8 %11478, 1
  %11480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11479, i8* %11480, align 1, !tbaa !2449
  %11481 = icmp eq i32 %11461, 0
  %11482 = zext i1 %11481 to i8
  %11483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11482, i8* %11483, align 1, !tbaa !2450
  %11484 = lshr i32 %11461, 31
  %11485 = trunc i32 %11484 to i8
  %11486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11485, i8* %11486, align 1, !tbaa !2451
  %11487 = lshr i32 %11460, 31
  %11488 = lshr i32 %11456, 31
  %11489 = xor i32 %11484, %11487
  %11490 = xor i32 %11484, %11488
  %11491 = add nuw nsw i32 %11489, %11490
  %11492 = icmp eq i32 %11491, 2
  %11493 = zext i1 %11492 to i8
  %11494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11493, i8* %11494, align 1, !tbaa !2452
  %11495 = load i64, i64* %RDX
  %11496 = load i64, i64* %RBP
  %11497 = sub i64 %11496, 76
  %11498 = load i64, i64* %PC
  %11499 = add i64 %11498, 3
  store i64 %11499, i64* %PC
  %11500 = trunc i64 %11495 to i32
  %11501 = inttoptr i64 %11497 to i32*
  %11502 = load i32, i32* %11501
  %11503 = add i32 %11502, %11500
  %11504 = zext i32 %11503 to i64
  store i64 %11504, i64* %RDX, align 8, !tbaa !2428
  %11505 = icmp ult i32 %11503, %11500
  %11506 = icmp ult i32 %11503, %11502
  %11507 = or i1 %11505, %11506
  %11508 = zext i1 %11507 to i8
  %11509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11508, i8* %11509, align 1, !tbaa !2434
  %11510 = and i32 %11503, 255
  %11511 = call i32 @llvm.ctpop.i32(i32 %11510) #16
  %11512 = trunc i32 %11511 to i8
  %11513 = and i8 %11512, 1
  %11514 = xor i8 %11513, 1
  %11515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11514, i8* %11515, align 1, !tbaa !2448
  %11516 = xor i32 %11502, %11500
  %11517 = xor i32 %11516, %11503
  %11518 = lshr i32 %11517, 4
  %11519 = trunc i32 %11518 to i8
  %11520 = and i8 %11519, 1
  %11521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11520, i8* %11521, align 1, !tbaa !2449
  %11522 = icmp eq i32 %11503, 0
  %11523 = zext i1 %11522 to i8
  %11524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11523, i8* %11524, align 1, !tbaa !2450
  %11525 = lshr i32 %11503, 31
  %11526 = trunc i32 %11525 to i8
  %11527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11526, i8* %11527, align 1, !tbaa !2451
  %11528 = lshr i32 %11500, 31
  %11529 = lshr i32 %11502, 31
  %11530 = xor i32 %11525, %11528
  %11531 = xor i32 %11525, %11529
  %11532 = add nuw nsw i32 %11530, %11531
  %11533 = icmp eq i32 %11532, 2
  %11534 = zext i1 %11533 to i8
  %11535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11534, i8* %11535, align 1, !tbaa !2452
  %11536 = load i32, i32* %EDX
  %11537 = zext i32 %11536 to i64
  %11538 = load i64, i64* %PC
  %11539 = add i64 %11538, 3
  store i64 %11539, i64* %PC
  %11540 = shl i64 %11537, 32
  %11541 = ashr exact i64 %11540, 32
  store i64 %11541, i64* %RCX, align 8, !tbaa !2428
  %11542 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11543 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11544 = load i64, i64* %RAX
  %11545 = load i64, i64* %RCX
  %11546 = mul i64 %11545, 4
  %11547 = add i64 %11546, %11544
  %11548 = load i64, i64* %PC
  %11549 = add i64 %11548, 5
  store i64 %11549, i64* %PC
  %11550 = bitcast i8* %11543 to <2 x float>*
  %11551 = load <2 x float>, <2 x float>* %11550, align 1
  %11552 = getelementptr inbounds i8, i8* %11543, i64 8
  %11553 = bitcast i8* %11552 to <2 x i32>*
  %11554 = load <2 x i32>, <2 x i32>* %11553, align 1
  %11555 = inttoptr i64 %11547 to float*
  %11556 = load float, float* %11555
  %11557 = extractelement <2 x float> %11551, i32 0
  %11558 = fmul float %11557, %11556
  %11559 = bitcast i8* %11542 to float*
  store float %11558, float* %11559, align 1, !tbaa !2453
  %11560 = bitcast <2 x float> %11551 to <2 x i32>
  %11561 = extractelement <2 x i32> %11560, i32 1
  %11562 = getelementptr inbounds i8, i8* %11542, i64 4
  %11563 = bitcast i8* %11562 to i32*
  store i32 %11561, i32* %11563, align 1, !tbaa !2453
  %11564 = extractelement <2 x i32> %11554, i32 0
  %11565 = getelementptr inbounds i8, i8* %11542, i64 8
  %11566 = bitcast i8* %11565 to i32*
  store i32 %11564, i32* %11566, align 1, !tbaa !2453
  %11567 = extractelement <2 x i32> %11554, i32 1
  %11568 = getelementptr inbounds i8, i8* %11542, i64 12
  %11569 = bitcast i8* %11568 to i32*
  store i32 %11567, i32* %11569, align 1, !tbaa !2453
  %11570 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11571 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11572 = bitcast %union.vec128_t* %XMM1 to i8*
  %11573 = load i64, i64* %PC
  %11574 = add i64 %11573, 4
  store i64 %11574, i64* %PC
  %11575 = bitcast i8* %11571 to <2 x float>*
  %11576 = load <2 x float>, <2 x float>* %11575, align 1
  %11577 = getelementptr inbounds i8, i8* %11571, i64 8
  %11578 = bitcast i8* %11577 to <2 x i32>*
  %11579 = load <2 x i32>, <2 x i32>* %11578, align 1
  %11580 = bitcast i8* %11572 to <2 x float>*
  %11581 = load <2 x float>, <2 x float>* %11580, align 1
  %11582 = extractelement <2 x float> %11576, i32 0
  %11583 = extractelement <2 x float> %11581, i32 0
  %11584 = fadd float %11582, %11583
  %11585 = bitcast i8* %11570 to float*
  store float %11584, float* %11585, align 1, !tbaa !2453
  %11586 = bitcast <2 x float> %11576 to <2 x i32>
  %11587 = extractelement <2 x i32> %11586, i32 1
  %11588 = getelementptr inbounds i8, i8* %11570, i64 4
  %11589 = bitcast i8* %11588 to i32*
  store i32 %11587, i32* %11589, align 1, !tbaa !2453
  %11590 = extractelement <2 x i32> %11579, i32 0
  %11591 = getelementptr inbounds i8, i8* %11570, i64 8
  %11592 = bitcast i8* %11591 to i32*
  store i32 %11590, i32* %11592, align 1, !tbaa !2453
  %11593 = extractelement <2 x i32> %11579, i32 1
  %11594 = getelementptr inbounds i8, i8* %11570, i64 12
  %11595 = bitcast i8* %11594 to i32*
  store i32 %11593, i32* %11595, align 1, !tbaa !2453
  %11596 = load i64, i64* %RBP
  %11597 = sub i64 %11596, 32
  %11598 = load i64, i64* %PC
  %11599 = add i64 %11598, 4
  store i64 %11599, i64* %PC
  %11600 = inttoptr i64 %11597 to i64*
  %11601 = load i64, i64* %11600
  store i64 %11601, i64* %RAX, align 8, !tbaa !2428
  %11602 = load i64, i64* %RAX
  %11603 = load i64, i64* %PC
  %11604 = add i64 %11603, 3
  store i64 %11604, i64* %PC
  %11605 = inttoptr i64 %11602 to i64*
  %11606 = load i64, i64* %11605
  store i64 %11606, i64* %RAX, align 8, !tbaa !2428
  %11607 = load i64, i64* %RBP
  %11608 = sub i64 %11607, 32
  %11609 = load i64, i64* %PC
  %11610 = add i64 %11609, 4
  store i64 %11610, i64* %PC
  %11611 = inttoptr i64 %11608 to i64*
  %11612 = load i64, i64* %11611
  store i64 %11612, i64* %RCX, align 8, !tbaa !2428
  %11613 = load i64, i64* %RCX
  %11614 = add i64 %11613, 12
  %11615 = load i64, i64* %PC
  %11616 = add i64 %11615, 3
  store i64 %11616, i64* %PC
  %11617 = inttoptr i64 %11614 to i32*
  %11618 = load i32, i32* %11617
  %11619 = zext i32 %11618 to i64
  store i64 %11619, i64* %RDX, align 8, !tbaa !2428
  %11620 = load i64, i64* %RDX
  %11621 = load i64, i64* %PC
  %11622 = add i64 %11621, 3
  store i64 %11622, i64* %PC
  %11623 = load i64, i64* %RBP
  %11624 = sub i64 %11623, 32
  %11625 = load i64, i64* %PC
  %11626 = add i64 %11625, 4
  store i64 %11626, i64* %PC
  %11627 = inttoptr i64 %11624 to i64*
  %11628 = load i64, i64* %11627
  store i64 %11628, i64* %RCX, align 8, !tbaa !2428
  %11629 = load i64, i64* %RDX
  %11630 = load i64, i64* %RCX
  %11631 = add i64 %11630, 16
  %11632 = load i64, i64* %PC
  %11633 = add i64 %11632, 4
  store i64 %11633, i64* %PC
  %11634 = inttoptr i64 %11631 to i32*
  %11635 = load i32, i32* %11634
  %11636 = shl i64 %11629, 32
  %11637 = ashr exact i64 %11636, 32
  %11638 = sext i32 %11635 to i64
  %11639 = mul nsw i64 %11638, %11637
  %11640 = trunc i64 %11639 to i32
  %11641 = and i64 %11639, 4294967295
  store i64 %11641, i64* %RDX, align 8, !tbaa !2428
  %11642 = shl i64 %11639, 32
  %11643 = ashr exact i64 %11642, 32
  %11644 = icmp ne i64 %11643, %11639
  %11645 = zext i1 %11644 to i8
  %11646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11645, i8* %11646, align 1, !tbaa !2434
  %11647 = and i32 %11640, 255
  %11648 = call i32 @llvm.ctpop.i32(i32 %11647) #16
  %11649 = trunc i32 %11648 to i8
  %11650 = and i8 %11649, 1
  %11651 = xor i8 %11650, 1
  %11652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11651, i8* %11652, align 1, !tbaa !2448
  %11653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11653, align 1, !tbaa !2449
  %11654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11654, align 1, !tbaa !2450
  %11655 = lshr i32 %11640, 31
  %11656 = trunc i32 %11655 to i8
  %11657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11656, i8* %11657, align 1, !tbaa !2451
  %11658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11645, i8* %11658, align 1, !tbaa !2452
  %11659 = load i64, i64* %RBP
  %11660 = sub i64 %11659, 32
  %11661 = load i64, i64* %PC
  %11662 = add i64 %11661, 4
  store i64 %11662, i64* %PC
  %11663 = inttoptr i64 %11660 to i64*
  %11664 = load i64, i64* %11663
  store i64 %11664, i64* %RCX, align 8, !tbaa !2428
  %11665 = load i64, i64* %RDX
  %11666 = load i64, i64* %RCX
  %11667 = add i64 %11666, 20
  %11668 = load i64, i64* %PC
  %11669 = add i64 %11668, 4
  store i64 %11669, i64* %PC
  %11670 = inttoptr i64 %11667 to i32*
  %11671 = load i32, i32* %11670
  %11672 = shl i64 %11665, 32
  %11673 = ashr exact i64 %11672, 32
  %11674 = sext i32 %11671 to i64
  %11675 = mul nsw i64 %11674, %11673
  %11676 = trunc i64 %11675 to i32
  %11677 = and i64 %11675, 4294967295
  store i64 %11677, i64* %RDX, align 8, !tbaa !2428
  %11678 = shl i64 %11675, 32
  %11679 = ashr exact i64 %11678, 32
  %11680 = icmp ne i64 %11679, %11675
  %11681 = zext i1 %11680 to i8
  %11682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11681, i8* %11682, align 1, !tbaa !2434
  %11683 = and i32 %11676, 255
  %11684 = call i32 @llvm.ctpop.i32(i32 %11683) #16
  %11685 = trunc i32 %11684 to i8
  %11686 = and i8 %11685, 1
  %11687 = xor i8 %11686, 1
  %11688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11687, i8* %11688, align 1, !tbaa !2448
  %11689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11689, align 1, !tbaa !2449
  %11690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11690, align 1, !tbaa !2450
  %11691 = lshr i32 %11676, 31
  %11692 = trunc i32 %11691 to i8
  %11693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11692, i8* %11693, align 1, !tbaa !2451
  %11694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11681, i8* %11694, align 1, !tbaa !2452
  %11695 = load i64, i64* %RBP
  %11696 = sub i64 %11695, 68
  %11697 = load i64, i64* %PC
  %11698 = add i64 %11697, 3
  store i64 %11698, i64* %PC
  %11699 = inttoptr i64 %11696 to i32*
  %11700 = load i32, i32* %11699
  %11701 = zext i32 %11700 to i64
  store i64 %11701, i64* %RSI, align 8, !tbaa !2428
  %11702 = load i64, i64* %RBP
  %11703 = sub i64 %11702, 32
  %11704 = load i64, i64* %PC
  %11705 = add i64 %11704, 4
  store i64 %11705, i64* %PC
  %11706 = inttoptr i64 %11703 to i64*
  %11707 = load i64, i64* %11706
  store i64 %11707, i64* %RCX, align 8, !tbaa !2428
  %11708 = load i64, i64* %RSI
  %11709 = load i64, i64* %RCX
  %11710 = add i64 %11709, 16
  %11711 = load i64, i64* %PC
  %11712 = add i64 %11711, 4
  store i64 %11712, i64* %PC
  %11713 = inttoptr i64 %11710 to i32*
  %11714 = load i32, i32* %11713
  %11715 = shl i64 %11708, 32
  %11716 = ashr exact i64 %11715, 32
  %11717 = sext i32 %11714 to i64
  %11718 = mul nsw i64 %11717, %11716
  %11719 = trunc i64 %11718 to i32
  %11720 = and i64 %11718, 4294967295
  store i64 %11720, i64* %RSI, align 8, !tbaa !2428
  %11721 = shl i64 %11718, 32
  %11722 = ashr exact i64 %11721, 32
  %11723 = icmp ne i64 %11722, %11718
  %11724 = zext i1 %11723 to i8
  %11725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11724, i8* %11725, align 1, !tbaa !2434
  %11726 = and i32 %11719, 255
  %11727 = call i32 @llvm.ctpop.i32(i32 %11726) #16
  %11728 = trunc i32 %11727 to i8
  %11729 = and i8 %11728, 1
  %11730 = xor i8 %11729, 1
  %11731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11730, i8* %11731, align 1, !tbaa !2448
  %11732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11732, align 1, !tbaa !2449
  %11733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11733, align 1, !tbaa !2450
  %11734 = lshr i32 %11719, 31
  %11735 = trunc i32 %11734 to i8
  %11736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11735, i8* %11736, align 1, !tbaa !2451
  %11737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11724, i8* %11737, align 1, !tbaa !2452
  %11738 = load i64, i64* %RBP
  %11739 = sub i64 %11738, 32
  %11740 = load i64, i64* %PC
  %11741 = add i64 %11740, 4
  store i64 %11741, i64* %PC
  %11742 = inttoptr i64 %11739 to i64*
  %11743 = load i64, i64* %11742
  store i64 %11743, i64* %RCX, align 8, !tbaa !2428
  %11744 = load i64, i64* %RSI
  %11745 = load i64, i64* %RCX
  %11746 = add i64 %11745, 20
  %11747 = load i64, i64* %PC
  %11748 = add i64 %11747, 4
  store i64 %11748, i64* %PC
  %11749 = inttoptr i64 %11746 to i32*
  %11750 = load i32, i32* %11749
  %11751 = shl i64 %11744, 32
  %11752 = ashr exact i64 %11751, 32
  %11753 = sext i32 %11750 to i64
  %11754 = mul nsw i64 %11753, %11752
  %11755 = trunc i64 %11754 to i32
  %11756 = and i64 %11754, 4294967295
  store i64 %11756, i64* %RSI, align 8, !tbaa !2428
  %11757 = shl i64 %11754, 32
  %11758 = ashr exact i64 %11757, 32
  %11759 = icmp ne i64 %11758, %11754
  %11760 = zext i1 %11759 to i8
  %11761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11760, i8* %11761, align 1, !tbaa !2434
  %11762 = and i32 %11755, 255
  %11763 = call i32 @llvm.ctpop.i32(i32 %11762) #16
  %11764 = trunc i32 %11763 to i8
  %11765 = and i8 %11764, 1
  %11766 = xor i8 %11765, 1
  %11767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11766, i8* %11767, align 1, !tbaa !2448
  %11768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11768, align 1, !tbaa !2449
  %11769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11769, align 1, !tbaa !2450
  %11770 = lshr i32 %11755, 31
  %11771 = trunc i32 %11770 to i8
  %11772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11771, i8* %11772, align 1, !tbaa !2451
  %11773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11760, i8* %11773, align 1, !tbaa !2452
  %11774 = load i64, i64* %RDX
  %11775 = load i32, i32* %ESI
  %11776 = zext i32 %11775 to i64
  %11777 = load i64, i64* %PC
  %11778 = add i64 %11777, 2
  store i64 %11778, i64* %PC
  %11779 = trunc i64 %11774 to i32
  %11780 = add i32 %11775, %11779
  %11781 = zext i32 %11780 to i64
  store i64 %11781, i64* %RDX, align 8, !tbaa !2428
  %11782 = icmp ult i32 %11780, %11779
  %11783 = icmp ult i32 %11780, %11775
  %11784 = or i1 %11782, %11783
  %11785 = zext i1 %11784 to i8
  %11786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11785, i8* %11786, align 1, !tbaa !2434
  %11787 = and i32 %11780, 255
  %11788 = call i32 @llvm.ctpop.i32(i32 %11787) #16
  %11789 = trunc i32 %11788 to i8
  %11790 = and i8 %11789, 1
  %11791 = xor i8 %11790, 1
  %11792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11791, i8* %11792, align 1, !tbaa !2448
  %11793 = xor i64 %11776, %11774
  %11794 = trunc i64 %11793 to i32
  %11795 = xor i32 %11794, %11780
  %11796 = lshr i32 %11795, 4
  %11797 = trunc i32 %11796 to i8
  %11798 = and i8 %11797, 1
  %11799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11798, i8* %11799, align 1, !tbaa !2449
  %11800 = icmp eq i32 %11780, 0
  %11801 = zext i1 %11800 to i8
  %11802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11801, i8* %11802, align 1, !tbaa !2450
  %11803 = lshr i32 %11780, 31
  %11804 = trunc i32 %11803 to i8
  %11805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11804, i8* %11805, align 1, !tbaa !2451
  %11806 = lshr i32 %11779, 31
  %11807 = lshr i32 %11775, 31
  %11808 = xor i32 %11803, %11806
  %11809 = xor i32 %11803, %11807
  %11810 = add nuw nsw i32 %11808, %11809
  %11811 = icmp eq i32 %11810, 2
  %11812 = zext i1 %11811 to i8
  %11813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11812, i8* %11813, align 1, !tbaa !2452
  %11814 = load i64, i64* %RBP
  %11815 = sub i64 %11814, 72
  %11816 = load i64, i64* %PC
  %11817 = add i64 %11816, 3
  store i64 %11817, i64* %PC
  %11818 = inttoptr i64 %11815 to i32*
  %11819 = load i32, i32* %11818
  %11820 = zext i32 %11819 to i64
  store i64 %11820, i64* %RSI, align 8, !tbaa !2428
  %11821 = load i64, i64* %RBP
  %11822 = sub i64 %11821, 32
  %11823 = load i64, i64* %PC
  %11824 = add i64 %11823, 4
  store i64 %11824, i64* %PC
  %11825 = inttoptr i64 %11822 to i64*
  %11826 = load i64, i64* %11825
  store i64 %11826, i64* %RCX, align 8, !tbaa !2428
  %11827 = load i64, i64* %RSI
  %11828 = load i64, i64* %RCX
  %11829 = add i64 %11828, 20
  %11830 = load i64, i64* %PC
  %11831 = add i64 %11830, 4
  store i64 %11831, i64* %PC
  %11832 = inttoptr i64 %11829 to i32*
  %11833 = load i32, i32* %11832
  %11834 = shl i64 %11827, 32
  %11835 = ashr exact i64 %11834, 32
  %11836 = sext i32 %11833 to i64
  %11837 = mul nsw i64 %11836, %11835
  %11838 = trunc i64 %11837 to i32
  %11839 = and i64 %11837, 4294967295
  store i64 %11839, i64* %RSI, align 8, !tbaa !2428
  %11840 = shl i64 %11837, 32
  %11841 = ashr exact i64 %11840, 32
  %11842 = icmp ne i64 %11841, %11837
  %11843 = zext i1 %11842 to i8
  %11844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11843, i8* %11844, align 1, !tbaa !2434
  %11845 = and i32 %11838, 255
  %11846 = call i32 @llvm.ctpop.i32(i32 %11845) #16
  %11847 = trunc i32 %11846 to i8
  %11848 = and i8 %11847, 1
  %11849 = xor i8 %11848, 1
  %11850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11849, i8* %11850, align 1, !tbaa !2448
  %11851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11851, align 1, !tbaa !2449
  %11852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11852, align 1, !tbaa !2450
  %11853 = lshr i32 %11838, 31
  %11854 = trunc i32 %11853 to i8
  %11855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11854, i8* %11855, align 1, !tbaa !2451
  %11856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11843, i8* %11856, align 1, !tbaa !2452
  %11857 = load i64, i64* %RDX
  %11858 = load i32, i32* %ESI
  %11859 = zext i32 %11858 to i64
  %11860 = load i64, i64* %PC
  %11861 = add i64 %11860, 2
  store i64 %11861, i64* %PC
  %11862 = trunc i64 %11857 to i32
  %11863 = add i32 %11858, %11862
  %11864 = zext i32 %11863 to i64
  store i64 %11864, i64* %RDX, align 8, !tbaa !2428
  %11865 = icmp ult i32 %11863, %11862
  %11866 = icmp ult i32 %11863, %11858
  %11867 = or i1 %11865, %11866
  %11868 = zext i1 %11867 to i8
  %11869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11868, i8* %11869, align 1, !tbaa !2434
  %11870 = and i32 %11863, 255
  %11871 = call i32 @llvm.ctpop.i32(i32 %11870) #16
  %11872 = trunc i32 %11871 to i8
  %11873 = and i8 %11872, 1
  %11874 = xor i8 %11873, 1
  %11875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11874, i8* %11875, align 1, !tbaa !2448
  %11876 = xor i64 %11859, %11857
  %11877 = trunc i64 %11876 to i32
  %11878 = xor i32 %11877, %11863
  %11879 = lshr i32 %11878, 4
  %11880 = trunc i32 %11879 to i8
  %11881 = and i8 %11880, 1
  %11882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11881, i8* %11882, align 1, !tbaa !2449
  %11883 = icmp eq i32 %11863, 0
  %11884 = zext i1 %11883 to i8
  %11885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11884, i8* %11885, align 1, !tbaa !2450
  %11886 = lshr i32 %11863, 31
  %11887 = trunc i32 %11886 to i8
  %11888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11887, i8* %11888, align 1, !tbaa !2451
  %11889 = lshr i32 %11862, 31
  %11890 = lshr i32 %11858, 31
  %11891 = xor i32 %11886, %11889
  %11892 = xor i32 %11886, %11890
  %11893 = add nuw nsw i32 %11891, %11892
  %11894 = icmp eq i32 %11893, 2
  %11895 = zext i1 %11894 to i8
  %11896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11895, i8* %11896, align 1, !tbaa !2452
  %11897 = load i64, i64* %RDX
  %11898 = load i64, i64* %RBP
  %11899 = sub i64 %11898, 76
  %11900 = load i64, i64* %PC
  %11901 = add i64 %11900, 3
  store i64 %11901, i64* %PC
  %11902 = trunc i64 %11897 to i32
  %11903 = inttoptr i64 %11899 to i32*
  %11904 = load i32, i32* %11903
  %11905 = add i32 %11904, %11902
  %11906 = zext i32 %11905 to i64
  store i64 %11906, i64* %RDX, align 8, !tbaa !2428
  %11907 = icmp ult i32 %11905, %11902
  %11908 = icmp ult i32 %11905, %11904
  %11909 = or i1 %11907, %11908
  %11910 = zext i1 %11909 to i8
  %11911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11910, i8* %11911, align 1, !tbaa !2434
  %11912 = and i32 %11905, 255
  %11913 = call i32 @llvm.ctpop.i32(i32 %11912) #16
  %11914 = trunc i32 %11913 to i8
  %11915 = and i8 %11914, 1
  %11916 = xor i8 %11915, 1
  %11917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11916, i8* %11917, align 1, !tbaa !2448
  %11918 = xor i32 %11904, %11902
  %11919 = xor i32 %11918, %11905
  %11920 = lshr i32 %11919, 4
  %11921 = trunc i32 %11920 to i8
  %11922 = and i8 %11921, 1
  %11923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11922, i8* %11923, align 1, !tbaa !2449
  %11924 = icmp eq i32 %11905, 0
  %11925 = zext i1 %11924 to i8
  %11926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11925, i8* %11926, align 1, !tbaa !2450
  %11927 = lshr i32 %11905, 31
  %11928 = trunc i32 %11927 to i8
  %11929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11928, i8* %11929, align 1, !tbaa !2451
  %11930 = lshr i32 %11902, 31
  %11931 = lshr i32 %11904, 31
  %11932 = xor i32 %11927, %11930
  %11933 = xor i32 %11927, %11931
  %11934 = add nuw nsw i32 %11932, %11933
  %11935 = icmp eq i32 %11934, 2
  %11936 = zext i1 %11935 to i8
  %11937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11936, i8* %11937, align 1, !tbaa !2452
  %11938 = load i32, i32* %EDX
  %11939 = zext i32 %11938 to i64
  %11940 = load i64, i64* %PC
  %11941 = add i64 %11940, 3
  store i64 %11941, i64* %PC
  %11942 = shl i64 %11939, 32
  %11943 = ashr exact i64 %11942, 32
  store i64 %11943, i64* %RCX, align 8, !tbaa !2428
  %11944 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11945 = load i64, i64* %RAX
  %11946 = load i64, i64* %RCX
  %11947 = mul i64 %11946, 4
  %11948 = add i64 %11947, %11945
  %11949 = load i64, i64* %PC
  %11950 = add i64 %11949, 5
  store i64 %11950, i64* %PC
  %11951 = inttoptr i64 %11948 to float*
  %11952 = load float, float* %11951
  %11953 = bitcast i8* %11944 to float*
  store float %11952, float* %11953, align 1, !tbaa !2453
  %11954 = getelementptr inbounds i8, i8* %11944, i64 4
  %11955 = bitcast i8* %11954 to float*
  store float 0.000000e+00, float* %11955, align 1, !tbaa !2453
  %11956 = getelementptr inbounds i8, i8* %11944, i64 8
  %11957 = bitcast i8* %11956 to float*
  store float 0.000000e+00, float* %11957, align 1, !tbaa !2453
  %11958 = getelementptr inbounds i8, i8* %11944, i64 12
  %11959 = bitcast i8* %11958 to float*
  store float 0.000000e+00, float* %11959, align 1, !tbaa !2453
  %11960 = load i64, i64* %RBP
  %11961 = sub i64 %11960, 40
  %11962 = load i64, i64* %PC
  %11963 = add i64 %11962, 4
  store i64 %11963, i64* %PC
  %11964 = inttoptr i64 %11961 to i64*
  %11965 = load i64, i64* %11964
  store i64 %11965, i64* %RAX, align 8, !tbaa !2428
  %11966 = load i64, i64* %RAX
  %11967 = load i64, i64* %PC
  %11968 = add i64 %11967, 3
  store i64 %11968, i64* %PC
  %11969 = inttoptr i64 %11966 to i64*
  %11970 = load i64, i64* %11969
  store i64 %11970, i64* %RAX, align 8, !tbaa !2428
  %11971 = load i64, i64* %RBP
  %11972 = sub i64 %11971, 40
  %11973 = load i64, i64* %PC
  %11974 = add i64 %11973, 4
  store i64 %11974, i64* %PC
  %11975 = inttoptr i64 %11972 to i64*
  %11976 = load i64, i64* %11975
  store i64 %11976, i64* %RCX, align 8, !tbaa !2428
  %11977 = load i64, i64* %RCX
  %11978 = add i64 %11977, 12
  %11979 = load i64, i64* %PC
  %11980 = add i64 %11979, 4
  store i64 %11980, i64* %PC
  %11981 = inttoptr i64 %11978 to i32*
  %11982 = load i32, i32* %11981
  %11983 = sext i32 %11982 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %11984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11984, align 1, !tbaa !2434
  %11985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %11985, align 1, !tbaa !2448
  %11986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11986, align 1, !tbaa !2449
  %11987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %11987, align 1, !tbaa !2450
  %11988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %11988, align 1, !tbaa !2451
  %11989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11989, align 1, !tbaa !2452
  %11990 = load i64, i64* %RBP
  %11991 = sub i64 %11990, 40
  %11992 = load i64, i64* %PC
  %11993 = add i64 %11992, 4
  store i64 %11993, i64* %PC
  %11994 = inttoptr i64 %11991 to i64*
  %11995 = load i64, i64* %11994
  store i64 %11995, i64* %RCX, align 8, !tbaa !2428
  %11996 = load i64, i64* %RDX
  %11997 = load i64, i64* %RCX
  %11998 = add i64 %11997, 16
  %11999 = load i64, i64* %PC
  %12000 = add i64 %11999, 4
  store i64 %12000, i64* %PC
  %12001 = inttoptr i64 %11998 to i32*
  %12002 = load i32, i32* %12001
  %12003 = shl i64 %11996, 32
  %12004 = ashr exact i64 %12003, 32
  %12005 = sext i32 %12002 to i64
  %12006 = mul nsw i64 %12005, %12004
  %12007 = trunc i64 %12006 to i32
  %12008 = and i64 %12006, 4294967295
  store i64 %12008, i64* %RDX, align 8, !tbaa !2428
  %12009 = shl i64 %12006, 32
  %12010 = ashr exact i64 %12009, 32
  %12011 = icmp ne i64 %12010, %12006
  %12012 = zext i1 %12011 to i8
  %12013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12012, i8* %12013, align 1, !tbaa !2434
  %12014 = and i32 %12007, 255
  %12015 = call i32 @llvm.ctpop.i32(i32 %12014) #16
  %12016 = trunc i32 %12015 to i8
  %12017 = and i8 %12016, 1
  %12018 = xor i8 %12017, 1
  %12019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12018, i8* %12019, align 1, !tbaa !2448
  %12020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12020, align 1, !tbaa !2449
  %12021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12021, align 1, !tbaa !2450
  %12022 = lshr i32 %12007, 31
  %12023 = trunc i32 %12022 to i8
  %12024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12023, i8* %12024, align 1, !tbaa !2451
  %12025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12012, i8* %12025, align 1, !tbaa !2452
  %12026 = load i64, i64* %RBP
  %12027 = sub i64 %12026, 40
  %12028 = load i64, i64* %PC
  %12029 = add i64 %12028, 4
  store i64 %12029, i64* %PC
  %12030 = inttoptr i64 %12027 to i64*
  %12031 = load i64, i64* %12030
  store i64 %12031, i64* %RCX, align 8, !tbaa !2428
  %12032 = load i64, i64* %RDX
  %12033 = load i64, i64* %RCX
  %12034 = add i64 %12033, 20
  %12035 = load i64, i64* %PC
  %12036 = add i64 %12035, 4
  store i64 %12036, i64* %PC
  %12037 = inttoptr i64 %12034 to i32*
  %12038 = load i32, i32* %12037
  %12039 = shl i64 %12032, 32
  %12040 = ashr exact i64 %12039, 32
  %12041 = sext i32 %12038 to i64
  %12042 = mul nsw i64 %12041, %12040
  %12043 = trunc i64 %12042 to i32
  %12044 = and i64 %12042, 4294967295
  store i64 %12044, i64* %RDX, align 8, !tbaa !2428
  %12045 = shl i64 %12042, 32
  %12046 = ashr exact i64 %12045, 32
  %12047 = icmp ne i64 %12046, %12042
  %12048 = zext i1 %12047 to i8
  %12049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12048, i8* %12049, align 1, !tbaa !2434
  %12050 = and i32 %12043, 255
  %12051 = call i32 @llvm.ctpop.i32(i32 %12050) #16
  %12052 = trunc i32 %12051 to i8
  %12053 = and i8 %12052, 1
  %12054 = xor i8 %12053, 1
  %12055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12054, i8* %12055, align 1, !tbaa !2448
  %12056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12056, align 1, !tbaa !2449
  %12057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12057, align 1, !tbaa !2450
  %12058 = lshr i32 %12043, 31
  %12059 = trunc i32 %12058 to i8
  %12060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12059, i8* %12060, align 1, !tbaa !2451
  %12061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12048, i8* %12061, align 1, !tbaa !2452
  %12062 = load i64, i64* %RBP
  %12063 = sub i64 %12062, 68
  %12064 = load i64, i64* %PC
  %12065 = add i64 %12064, 3
  store i64 %12065, i64* %PC
  %12066 = inttoptr i64 %12063 to i32*
  %12067 = load i32, i32* %12066
  %12068 = zext i32 %12067 to i64
  store i64 %12068, i64* %RSI, align 8, !tbaa !2428
  %12069 = load i64, i64* %RBP
  %12070 = sub i64 %12069, 40
  %12071 = load i64, i64* %PC
  %12072 = add i64 %12071, 4
  store i64 %12072, i64* %PC
  %12073 = inttoptr i64 %12070 to i64*
  %12074 = load i64, i64* %12073
  store i64 %12074, i64* %RCX, align 8, !tbaa !2428
  %12075 = load i64, i64* %RSI
  %12076 = load i64, i64* %RCX
  %12077 = add i64 %12076, 16
  %12078 = load i64, i64* %PC
  %12079 = add i64 %12078, 4
  store i64 %12079, i64* %PC
  %12080 = inttoptr i64 %12077 to i32*
  %12081 = load i32, i32* %12080
  %12082 = shl i64 %12075, 32
  %12083 = ashr exact i64 %12082, 32
  %12084 = sext i32 %12081 to i64
  %12085 = mul nsw i64 %12084, %12083
  %12086 = trunc i64 %12085 to i32
  %12087 = and i64 %12085, 4294967295
  store i64 %12087, i64* %RSI, align 8, !tbaa !2428
  %12088 = shl i64 %12085, 32
  %12089 = ashr exact i64 %12088, 32
  %12090 = icmp ne i64 %12089, %12085
  %12091 = zext i1 %12090 to i8
  %12092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12091, i8* %12092, align 1, !tbaa !2434
  %12093 = and i32 %12086, 255
  %12094 = call i32 @llvm.ctpop.i32(i32 %12093) #16
  %12095 = trunc i32 %12094 to i8
  %12096 = and i8 %12095, 1
  %12097 = xor i8 %12096, 1
  %12098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12097, i8* %12098, align 1, !tbaa !2448
  %12099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12099, align 1, !tbaa !2449
  %12100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12100, align 1, !tbaa !2450
  %12101 = lshr i32 %12086, 31
  %12102 = trunc i32 %12101 to i8
  %12103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12102, i8* %12103, align 1, !tbaa !2451
  %12104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12091, i8* %12104, align 1, !tbaa !2452
  %12105 = load i64, i64* %RBP
  %12106 = sub i64 %12105, 40
  %12107 = load i64, i64* %PC
  %12108 = add i64 %12107, 4
  store i64 %12108, i64* %PC
  %12109 = inttoptr i64 %12106 to i64*
  %12110 = load i64, i64* %12109
  store i64 %12110, i64* %RCX, align 8, !tbaa !2428
  %12111 = load i64, i64* %RSI
  %12112 = load i64, i64* %RCX
  %12113 = add i64 %12112, 20
  %12114 = load i64, i64* %PC
  %12115 = add i64 %12114, 4
  store i64 %12115, i64* %PC
  %12116 = inttoptr i64 %12113 to i32*
  %12117 = load i32, i32* %12116
  %12118 = shl i64 %12111, 32
  %12119 = ashr exact i64 %12118, 32
  %12120 = sext i32 %12117 to i64
  %12121 = mul nsw i64 %12120, %12119
  %12122 = trunc i64 %12121 to i32
  %12123 = and i64 %12121, 4294967295
  store i64 %12123, i64* %RSI, align 8, !tbaa !2428
  %12124 = shl i64 %12121, 32
  %12125 = ashr exact i64 %12124, 32
  %12126 = icmp ne i64 %12125, %12121
  %12127 = zext i1 %12126 to i8
  %12128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12127, i8* %12128, align 1, !tbaa !2434
  %12129 = and i32 %12122, 255
  %12130 = call i32 @llvm.ctpop.i32(i32 %12129) #16
  %12131 = trunc i32 %12130 to i8
  %12132 = and i8 %12131, 1
  %12133 = xor i8 %12132, 1
  %12134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12133, i8* %12134, align 1, !tbaa !2448
  %12135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12135, align 1, !tbaa !2449
  %12136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12136, align 1, !tbaa !2450
  %12137 = lshr i32 %12122, 31
  %12138 = trunc i32 %12137 to i8
  %12139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12138, i8* %12139, align 1, !tbaa !2451
  %12140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12127, i8* %12140, align 1, !tbaa !2452
  %12141 = load i64, i64* %RDX
  %12142 = load i32, i32* %ESI
  %12143 = zext i32 %12142 to i64
  %12144 = load i64, i64* %PC
  %12145 = add i64 %12144, 2
  store i64 %12145, i64* %PC
  %12146 = trunc i64 %12141 to i32
  %12147 = add i32 %12142, %12146
  %12148 = zext i32 %12147 to i64
  store i64 %12148, i64* %RDX, align 8, !tbaa !2428
  %12149 = icmp ult i32 %12147, %12146
  %12150 = icmp ult i32 %12147, %12142
  %12151 = or i1 %12149, %12150
  %12152 = zext i1 %12151 to i8
  %12153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12152, i8* %12153, align 1, !tbaa !2434
  %12154 = and i32 %12147, 255
  %12155 = call i32 @llvm.ctpop.i32(i32 %12154) #16
  %12156 = trunc i32 %12155 to i8
  %12157 = and i8 %12156, 1
  %12158 = xor i8 %12157, 1
  %12159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12158, i8* %12159, align 1, !tbaa !2448
  %12160 = xor i64 %12143, %12141
  %12161 = trunc i64 %12160 to i32
  %12162 = xor i32 %12161, %12147
  %12163 = lshr i32 %12162, 4
  %12164 = trunc i32 %12163 to i8
  %12165 = and i8 %12164, 1
  %12166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12165, i8* %12166, align 1, !tbaa !2449
  %12167 = icmp eq i32 %12147, 0
  %12168 = zext i1 %12167 to i8
  %12169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12168, i8* %12169, align 1, !tbaa !2450
  %12170 = lshr i32 %12147, 31
  %12171 = trunc i32 %12170 to i8
  %12172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12171, i8* %12172, align 1, !tbaa !2451
  %12173 = lshr i32 %12146, 31
  %12174 = lshr i32 %12142, 31
  %12175 = xor i32 %12170, %12173
  %12176 = xor i32 %12170, %12174
  %12177 = add nuw nsw i32 %12175, %12176
  %12178 = icmp eq i32 %12177, 2
  %12179 = zext i1 %12178 to i8
  %12180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12179, i8* %12180, align 1, !tbaa !2452
  %12181 = load i64, i64* %RBP
  %12182 = sub i64 %12181, 72
  %12183 = load i64, i64* %PC
  %12184 = add i64 %12183, 3
  store i64 %12184, i64* %PC
  %12185 = inttoptr i64 %12182 to i32*
  %12186 = load i32, i32* %12185
  %12187 = zext i32 %12186 to i64
  store i64 %12187, i64* %RSI, align 8, !tbaa !2428
  %12188 = load i64, i64* %RSI
  %12189 = load i64, i64* %PC
  %12190 = add i64 %12189, 3
  store i64 %12190, i64* %PC
  %12191 = trunc i64 %12188 to i32
  %12192 = sub i32 %12191, 1
  %12193 = zext i32 %12192 to i64
  store i64 %12193, i64* %RSI, align 8, !tbaa !2428
  %12194 = icmp ult i32 %12191, 1
  %12195 = zext i1 %12194 to i8
  %12196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12195, i8* %12196, align 1, !tbaa !2434
  %12197 = and i32 %12192, 255
  %12198 = call i32 @llvm.ctpop.i32(i32 %12197) #16
  %12199 = trunc i32 %12198 to i8
  %12200 = and i8 %12199, 1
  %12201 = xor i8 %12200, 1
  %12202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12201, i8* %12202, align 1, !tbaa !2448
  %12203 = xor i64 1, %12188
  %12204 = trunc i64 %12203 to i32
  %12205 = xor i32 %12204, %12192
  %12206 = lshr i32 %12205, 4
  %12207 = trunc i32 %12206 to i8
  %12208 = and i8 %12207, 1
  %12209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12208, i8* %12209, align 1, !tbaa !2449
  %12210 = icmp eq i32 %12192, 0
  %12211 = zext i1 %12210 to i8
  %12212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12211, i8* %12212, align 1, !tbaa !2450
  %12213 = lshr i32 %12192, 31
  %12214 = trunc i32 %12213 to i8
  %12215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12214, i8* %12215, align 1, !tbaa !2451
  %12216 = lshr i32 %12191, 31
  %12217 = xor i32 %12213, %12216
  %12218 = add nuw nsw i32 %12217, %12216
  %12219 = icmp eq i32 %12218, 2
  %12220 = zext i1 %12219 to i8
  %12221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12220, i8* %12221, align 1, !tbaa !2452
  %12222 = load i64, i64* %RBP
  %12223 = sub i64 %12222, 40
  %12224 = load i64, i64* %PC
  %12225 = add i64 %12224, 4
  store i64 %12225, i64* %PC
  %12226 = inttoptr i64 %12223 to i64*
  %12227 = load i64, i64* %12226
  store i64 %12227, i64* %RCX, align 8, !tbaa !2428
  %12228 = load i64, i64* %RSI
  %12229 = load i64, i64* %RCX
  %12230 = add i64 %12229, 20
  %12231 = load i64, i64* %PC
  %12232 = add i64 %12231, 4
  store i64 %12232, i64* %PC
  %12233 = inttoptr i64 %12230 to i32*
  %12234 = load i32, i32* %12233
  %12235 = shl i64 %12228, 32
  %12236 = ashr exact i64 %12235, 32
  %12237 = sext i32 %12234 to i64
  %12238 = mul nsw i64 %12237, %12236
  %12239 = trunc i64 %12238 to i32
  %12240 = and i64 %12238, 4294967295
  store i64 %12240, i64* %RSI, align 8, !tbaa !2428
  %12241 = shl i64 %12238, 32
  %12242 = ashr exact i64 %12241, 32
  %12243 = icmp ne i64 %12242, %12238
  %12244 = zext i1 %12243 to i8
  %12245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12244, i8* %12245, align 1, !tbaa !2434
  %12246 = and i32 %12239, 255
  %12247 = call i32 @llvm.ctpop.i32(i32 %12246) #16
  %12248 = trunc i32 %12247 to i8
  %12249 = and i8 %12248, 1
  %12250 = xor i8 %12249, 1
  %12251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12250, i8* %12251, align 1, !tbaa !2448
  %12252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12252, align 1, !tbaa !2449
  %12253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12253, align 1, !tbaa !2450
  %12254 = lshr i32 %12239, 31
  %12255 = trunc i32 %12254 to i8
  %12256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12255, i8* %12256, align 1, !tbaa !2451
  %12257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12244, i8* %12257, align 1, !tbaa !2452
  %12258 = load i64, i64* %RDX
  %12259 = load i32, i32* %ESI
  %12260 = zext i32 %12259 to i64
  %12261 = load i64, i64* %PC
  %12262 = add i64 %12261, 2
  store i64 %12262, i64* %PC
  %12263 = trunc i64 %12258 to i32
  %12264 = add i32 %12259, %12263
  %12265 = zext i32 %12264 to i64
  store i64 %12265, i64* %RDX, align 8, !tbaa !2428
  %12266 = icmp ult i32 %12264, %12263
  %12267 = icmp ult i32 %12264, %12259
  %12268 = or i1 %12266, %12267
  %12269 = zext i1 %12268 to i8
  %12270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12269, i8* %12270, align 1, !tbaa !2434
  %12271 = and i32 %12264, 255
  %12272 = call i32 @llvm.ctpop.i32(i32 %12271) #16
  %12273 = trunc i32 %12272 to i8
  %12274 = and i8 %12273, 1
  %12275 = xor i8 %12274, 1
  %12276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12275, i8* %12276, align 1, !tbaa !2448
  %12277 = xor i64 %12260, %12258
  %12278 = trunc i64 %12277 to i32
  %12279 = xor i32 %12278, %12264
  %12280 = lshr i32 %12279, 4
  %12281 = trunc i32 %12280 to i8
  %12282 = and i8 %12281, 1
  %12283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12282, i8* %12283, align 1, !tbaa !2449
  %12284 = icmp eq i32 %12264, 0
  %12285 = zext i1 %12284 to i8
  %12286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12285, i8* %12286, align 1, !tbaa !2450
  %12287 = lshr i32 %12264, 31
  %12288 = trunc i32 %12287 to i8
  %12289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12288, i8* %12289, align 1, !tbaa !2451
  %12290 = lshr i32 %12263, 31
  %12291 = lshr i32 %12259, 31
  %12292 = xor i32 %12287, %12290
  %12293 = xor i32 %12287, %12291
  %12294 = add nuw nsw i32 %12292, %12293
  %12295 = icmp eq i32 %12294, 2
  %12296 = zext i1 %12295 to i8
  %12297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12296, i8* %12297, align 1, !tbaa !2452
  %12298 = load i64, i64* %RDX
  %12299 = load i64, i64* %RBP
  %12300 = sub i64 %12299, 76
  %12301 = load i64, i64* %PC
  %12302 = add i64 %12301, 3
  store i64 %12302, i64* %PC
  %12303 = trunc i64 %12298 to i32
  %12304 = inttoptr i64 %12300 to i32*
  %12305 = load i32, i32* %12304
  %12306 = add i32 %12305, %12303
  %12307 = zext i32 %12306 to i64
  store i64 %12307, i64* %RDX, align 8, !tbaa !2428
  %12308 = icmp ult i32 %12306, %12303
  %12309 = icmp ult i32 %12306, %12305
  %12310 = or i1 %12308, %12309
  %12311 = zext i1 %12310 to i8
  %12312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12311, i8* %12312, align 1, !tbaa !2434
  %12313 = and i32 %12306, 255
  %12314 = call i32 @llvm.ctpop.i32(i32 %12313) #16
  %12315 = trunc i32 %12314 to i8
  %12316 = and i8 %12315, 1
  %12317 = xor i8 %12316, 1
  %12318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12317, i8* %12318, align 1, !tbaa !2448
  %12319 = xor i32 %12305, %12303
  %12320 = xor i32 %12319, %12306
  %12321 = lshr i32 %12320, 4
  %12322 = trunc i32 %12321 to i8
  %12323 = and i8 %12322, 1
  %12324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12323, i8* %12324, align 1, !tbaa !2449
  %12325 = icmp eq i32 %12306, 0
  %12326 = zext i1 %12325 to i8
  %12327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12326, i8* %12327, align 1, !tbaa !2450
  %12328 = lshr i32 %12306, 31
  %12329 = trunc i32 %12328 to i8
  %12330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12329, i8* %12330, align 1, !tbaa !2451
  %12331 = lshr i32 %12303, 31
  %12332 = lshr i32 %12305, 31
  %12333 = xor i32 %12328, %12331
  %12334 = xor i32 %12328, %12332
  %12335 = add nuw nsw i32 %12333, %12334
  %12336 = icmp eq i32 %12335, 2
  %12337 = zext i1 %12336 to i8
  %12338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12337, i8* %12338, align 1, !tbaa !2452
  %12339 = load i32, i32* %EDX
  %12340 = zext i32 %12339 to i64
  %12341 = load i64, i64* %PC
  %12342 = add i64 %12341, 3
  store i64 %12342, i64* %PC
  %12343 = shl i64 %12340, 32
  %12344 = ashr exact i64 %12343, 32
  store i64 %12344, i64* %RCX, align 8, !tbaa !2428
  %12345 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12346 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12347 = load i64, i64* %RAX
  %12348 = load i64, i64* %RCX
  %12349 = mul i64 %12348, 4
  %12350 = add i64 %12349, %12347
  %12351 = load i64, i64* %PC
  %12352 = add i64 %12351, 5
  store i64 %12352, i64* %PC
  %12353 = bitcast i8* %12346 to <2 x float>*
  %12354 = load <2 x float>, <2 x float>* %12353, align 1
  %12355 = getelementptr inbounds i8, i8* %12346, i64 8
  %12356 = bitcast i8* %12355 to <2 x i32>*
  %12357 = load <2 x i32>, <2 x i32>* %12356, align 1
  %12358 = inttoptr i64 %12350 to float*
  %12359 = load float, float* %12358
  %12360 = extractelement <2 x float> %12354, i32 0
  %12361 = fmul float %12360, %12359
  %12362 = bitcast i8* %12345 to float*
  store float %12361, float* %12362, align 1, !tbaa !2453
  %12363 = bitcast <2 x float> %12354 to <2 x i32>
  %12364 = extractelement <2 x i32> %12363, i32 1
  %12365 = getelementptr inbounds i8, i8* %12345, i64 4
  %12366 = bitcast i8* %12365 to i32*
  store i32 %12364, i32* %12366, align 1, !tbaa !2453
  %12367 = extractelement <2 x i32> %12357, i32 0
  %12368 = getelementptr inbounds i8, i8* %12345, i64 8
  %12369 = bitcast i8* %12368 to i32*
  store i32 %12367, i32* %12369, align 1, !tbaa !2453
  %12370 = extractelement <2 x i32> %12357, i32 1
  %12371 = getelementptr inbounds i8, i8* %12345, i64 12
  %12372 = bitcast i8* %12371 to i32*
  store i32 %12370, i32* %12372, align 1, !tbaa !2453
  %12373 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12375 = bitcast %union.vec128_t* %XMM1 to i8*
  %12376 = load i64, i64* %PC
  %12377 = add i64 %12376, 4
  store i64 %12377, i64* %PC
  %12378 = bitcast i8* %12374 to <2 x float>*
  %12379 = load <2 x float>, <2 x float>* %12378, align 1
  %12380 = getelementptr inbounds i8, i8* %12374, i64 8
  %12381 = bitcast i8* %12380 to <2 x i32>*
  %12382 = load <2 x i32>, <2 x i32>* %12381, align 1
  %12383 = bitcast i8* %12375 to <2 x float>*
  %12384 = load <2 x float>, <2 x float>* %12383, align 1
  %12385 = extractelement <2 x float> %12379, i32 0
  %12386 = extractelement <2 x float> %12384, i32 0
  %12387 = fadd float %12385, %12386
  %12388 = bitcast i8* %12373 to float*
  store float %12387, float* %12388, align 1, !tbaa !2453
  %12389 = bitcast <2 x float> %12379 to <2 x i32>
  %12390 = extractelement <2 x i32> %12389, i32 1
  %12391 = getelementptr inbounds i8, i8* %12373, i64 4
  %12392 = bitcast i8* %12391 to i32*
  store i32 %12390, i32* %12392, align 1, !tbaa !2453
  %12393 = extractelement <2 x i32> %12382, i32 0
  %12394 = getelementptr inbounds i8, i8* %12373, i64 8
  %12395 = bitcast i8* %12394 to i32*
  store i32 %12393, i32* %12395, align 1, !tbaa !2453
  %12396 = extractelement <2 x i32> %12382, i32 1
  %12397 = getelementptr inbounds i8, i8* %12373, i64 12
  %12398 = bitcast i8* %12397 to i32*
  store i32 %12396, i32* %12398, align 1, !tbaa !2453
  %12399 = load i64, i64* %RBP
  %12400 = sub i64 %12399, 32
  %12401 = load i64, i64* %PC
  %12402 = add i64 %12401, 4
  store i64 %12402, i64* %PC
  %12403 = inttoptr i64 %12400 to i64*
  %12404 = load i64, i64* %12403
  store i64 %12404, i64* %RAX, align 8, !tbaa !2428
  %12405 = load i64, i64* %RAX
  %12406 = load i64, i64* %PC
  %12407 = add i64 %12406, 3
  store i64 %12407, i64* %PC
  %12408 = inttoptr i64 %12405 to i64*
  %12409 = load i64, i64* %12408
  store i64 %12409, i64* %RAX, align 8, !tbaa !2428
  %12410 = load i64, i64* %RBP
  %12411 = sub i64 %12410, 32
  %12412 = load i64, i64* %PC
  %12413 = add i64 %12412, 4
  store i64 %12413, i64* %PC
  %12414 = inttoptr i64 %12411 to i64*
  %12415 = load i64, i64* %12414
  store i64 %12415, i64* %RCX, align 8, !tbaa !2428
  %12416 = load i64, i64* %RCX
  %12417 = add i64 %12416, 12
  %12418 = load i64, i64* %PC
  %12419 = add i64 %12418, 3
  store i64 %12419, i64* %PC
  %12420 = inttoptr i64 %12417 to i32*
  %12421 = load i32, i32* %12420
  %12422 = zext i32 %12421 to i64
  store i64 %12422, i64* %RDX, align 8, !tbaa !2428
  %12423 = load i64, i64* %RDX
  %12424 = load i64, i64* %PC
  %12425 = add i64 %12424, 3
  store i64 %12425, i64* %PC
  %12426 = trunc i64 %12423 to i32
  %12427 = shl i32 %12426, 1
  %12428 = icmp slt i32 %12426, 0
  %12429 = icmp slt i32 %12427, 0
  %12430 = xor i1 %12428, %12429
  %12431 = zext i32 %12427 to i64
  store i64 %12431, i64* %RDX, align 8, !tbaa !2428
  %12432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12433 = zext i1 %12428 to i8
  store i8 %12433, i8* %12432, align 1, !tbaa !2455
  %12434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12435 = and i32 %12427, 254
  %12436 = call i32 @llvm.ctpop.i32(i32 %12435) #16
  %12437 = trunc i32 %12436 to i8
  %12438 = and i8 %12437, 1
  %12439 = xor i8 %12438, 1
  store i8 %12439, i8* %12434, align 1, !tbaa !2455
  %12440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12440, align 1, !tbaa !2455
  %12441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12442 = icmp eq i32 %12427, 0
  %12443 = zext i1 %12442 to i8
  store i8 %12443, i8* %12441, align 1, !tbaa !2455
  %12444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12445 = lshr i32 %12427, 31
  %12446 = trunc i32 %12445 to i8
  store i8 %12446, i8* %12444, align 1, !tbaa !2455
  %12447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %12448 = zext i1 %12430 to i8
  store i8 %12448, i8* %12447, align 1, !tbaa !2455
  %12449 = load i64, i64* %RBP
  %12450 = sub i64 %12449, 32
  %12451 = load i64, i64* %PC
  %12452 = add i64 %12451, 4
  store i64 %12452, i64* %PC
  %12453 = inttoptr i64 %12450 to i64*
  %12454 = load i64, i64* %12453
  store i64 %12454, i64* %RCX, align 8, !tbaa !2428
  %12455 = load i64, i64* %RDX
  %12456 = load i64, i64* %RCX
  %12457 = add i64 %12456, 16
  %12458 = load i64, i64* %PC
  %12459 = add i64 %12458, 4
  store i64 %12459, i64* %PC
  %12460 = inttoptr i64 %12457 to i32*
  %12461 = load i32, i32* %12460
  %12462 = shl i64 %12455, 32
  %12463 = ashr exact i64 %12462, 32
  %12464 = sext i32 %12461 to i64
  %12465 = mul nsw i64 %12464, %12463
  %12466 = trunc i64 %12465 to i32
  %12467 = and i64 %12465, 4294967295
  store i64 %12467, i64* %RDX, align 8, !tbaa !2428
  %12468 = shl i64 %12465, 32
  %12469 = ashr exact i64 %12468, 32
  %12470 = icmp ne i64 %12469, %12465
  %12471 = zext i1 %12470 to i8
  %12472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12471, i8* %12472, align 1, !tbaa !2434
  %12473 = and i32 %12466, 255
  %12474 = call i32 @llvm.ctpop.i32(i32 %12473) #16
  %12475 = trunc i32 %12474 to i8
  %12476 = and i8 %12475, 1
  %12477 = xor i8 %12476, 1
  %12478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12477, i8* %12478, align 1, !tbaa !2448
  %12479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12479, align 1, !tbaa !2449
  %12480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12480, align 1, !tbaa !2450
  %12481 = lshr i32 %12466, 31
  %12482 = trunc i32 %12481 to i8
  %12483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12482, i8* %12483, align 1, !tbaa !2451
  %12484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12471, i8* %12484, align 1, !tbaa !2452
  %12485 = load i64, i64* %RBP
  %12486 = sub i64 %12485, 32
  %12487 = load i64, i64* %PC
  %12488 = add i64 %12487, 4
  store i64 %12488, i64* %PC
  %12489 = inttoptr i64 %12486 to i64*
  %12490 = load i64, i64* %12489
  store i64 %12490, i64* %RCX, align 8, !tbaa !2428
  %12491 = load i64, i64* %RDX
  %12492 = load i64, i64* %RCX
  %12493 = add i64 %12492, 20
  %12494 = load i64, i64* %PC
  %12495 = add i64 %12494, 4
  store i64 %12495, i64* %PC
  %12496 = inttoptr i64 %12493 to i32*
  %12497 = load i32, i32* %12496
  %12498 = shl i64 %12491, 32
  %12499 = ashr exact i64 %12498, 32
  %12500 = sext i32 %12497 to i64
  %12501 = mul nsw i64 %12500, %12499
  %12502 = trunc i64 %12501 to i32
  %12503 = and i64 %12501, 4294967295
  store i64 %12503, i64* %RDX, align 8, !tbaa !2428
  %12504 = shl i64 %12501, 32
  %12505 = ashr exact i64 %12504, 32
  %12506 = icmp ne i64 %12505, %12501
  %12507 = zext i1 %12506 to i8
  %12508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12507, i8* %12508, align 1, !tbaa !2434
  %12509 = and i32 %12502, 255
  %12510 = call i32 @llvm.ctpop.i32(i32 %12509) #16
  %12511 = trunc i32 %12510 to i8
  %12512 = and i8 %12511, 1
  %12513 = xor i8 %12512, 1
  %12514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12513, i8* %12514, align 1, !tbaa !2448
  %12515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12515, align 1, !tbaa !2449
  %12516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12516, align 1, !tbaa !2450
  %12517 = lshr i32 %12502, 31
  %12518 = trunc i32 %12517 to i8
  %12519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12518, i8* %12519, align 1, !tbaa !2451
  %12520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12507, i8* %12520, align 1, !tbaa !2452
  %12521 = load i64, i64* %RBP
  %12522 = sub i64 %12521, 68
  %12523 = load i64, i64* %PC
  %12524 = add i64 %12523, 3
  store i64 %12524, i64* %PC
  %12525 = inttoptr i64 %12522 to i32*
  %12526 = load i32, i32* %12525
  %12527 = zext i32 %12526 to i64
  store i64 %12527, i64* %RSI, align 8, !tbaa !2428
  %12528 = load i64, i64* %RBP
  %12529 = sub i64 %12528, 32
  %12530 = load i64, i64* %PC
  %12531 = add i64 %12530, 4
  store i64 %12531, i64* %PC
  %12532 = inttoptr i64 %12529 to i64*
  %12533 = load i64, i64* %12532
  store i64 %12533, i64* %RCX, align 8, !tbaa !2428
  %12534 = load i64, i64* %RSI
  %12535 = load i64, i64* %RCX
  %12536 = add i64 %12535, 16
  %12537 = load i64, i64* %PC
  %12538 = add i64 %12537, 4
  store i64 %12538, i64* %PC
  %12539 = inttoptr i64 %12536 to i32*
  %12540 = load i32, i32* %12539
  %12541 = shl i64 %12534, 32
  %12542 = ashr exact i64 %12541, 32
  %12543 = sext i32 %12540 to i64
  %12544 = mul nsw i64 %12543, %12542
  %12545 = trunc i64 %12544 to i32
  %12546 = and i64 %12544, 4294967295
  store i64 %12546, i64* %RSI, align 8, !tbaa !2428
  %12547 = shl i64 %12544, 32
  %12548 = ashr exact i64 %12547, 32
  %12549 = icmp ne i64 %12548, %12544
  %12550 = zext i1 %12549 to i8
  %12551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12550, i8* %12551, align 1, !tbaa !2434
  %12552 = and i32 %12545, 255
  %12553 = call i32 @llvm.ctpop.i32(i32 %12552) #16
  %12554 = trunc i32 %12553 to i8
  %12555 = and i8 %12554, 1
  %12556 = xor i8 %12555, 1
  %12557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12556, i8* %12557, align 1, !tbaa !2448
  %12558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12558, align 1, !tbaa !2449
  %12559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12559, align 1, !tbaa !2450
  %12560 = lshr i32 %12545, 31
  %12561 = trunc i32 %12560 to i8
  %12562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12561, i8* %12562, align 1, !tbaa !2451
  %12563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12550, i8* %12563, align 1, !tbaa !2452
  %12564 = load i64, i64* %RBP
  %12565 = sub i64 %12564, 32
  %12566 = load i64, i64* %PC
  %12567 = add i64 %12566, 4
  store i64 %12567, i64* %PC
  %12568 = inttoptr i64 %12565 to i64*
  %12569 = load i64, i64* %12568
  store i64 %12569, i64* %RCX, align 8, !tbaa !2428
  %12570 = load i64, i64* %RSI
  %12571 = load i64, i64* %RCX
  %12572 = add i64 %12571, 20
  %12573 = load i64, i64* %PC
  %12574 = add i64 %12573, 4
  store i64 %12574, i64* %PC
  %12575 = inttoptr i64 %12572 to i32*
  %12576 = load i32, i32* %12575
  %12577 = shl i64 %12570, 32
  %12578 = ashr exact i64 %12577, 32
  %12579 = sext i32 %12576 to i64
  %12580 = mul nsw i64 %12579, %12578
  %12581 = trunc i64 %12580 to i32
  %12582 = and i64 %12580, 4294967295
  store i64 %12582, i64* %RSI, align 8, !tbaa !2428
  %12583 = shl i64 %12580, 32
  %12584 = ashr exact i64 %12583, 32
  %12585 = icmp ne i64 %12584, %12580
  %12586 = zext i1 %12585 to i8
  %12587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12586, i8* %12587, align 1, !tbaa !2434
  %12588 = and i32 %12581, 255
  %12589 = call i32 @llvm.ctpop.i32(i32 %12588) #16
  %12590 = trunc i32 %12589 to i8
  %12591 = and i8 %12590, 1
  %12592 = xor i8 %12591, 1
  %12593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12592, i8* %12593, align 1, !tbaa !2448
  %12594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12594, align 1, !tbaa !2449
  %12595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12595, align 1, !tbaa !2450
  %12596 = lshr i32 %12581, 31
  %12597 = trunc i32 %12596 to i8
  %12598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12597, i8* %12598, align 1, !tbaa !2451
  %12599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12586, i8* %12599, align 1, !tbaa !2452
  %12600 = load i64, i64* %RDX
  %12601 = load i32, i32* %ESI
  %12602 = zext i32 %12601 to i64
  %12603 = load i64, i64* %PC
  %12604 = add i64 %12603, 2
  store i64 %12604, i64* %PC
  %12605 = trunc i64 %12600 to i32
  %12606 = add i32 %12601, %12605
  %12607 = zext i32 %12606 to i64
  store i64 %12607, i64* %RDX, align 8, !tbaa !2428
  %12608 = icmp ult i32 %12606, %12605
  %12609 = icmp ult i32 %12606, %12601
  %12610 = or i1 %12608, %12609
  %12611 = zext i1 %12610 to i8
  %12612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12611, i8* %12612, align 1, !tbaa !2434
  %12613 = and i32 %12606, 255
  %12614 = call i32 @llvm.ctpop.i32(i32 %12613) #16
  %12615 = trunc i32 %12614 to i8
  %12616 = and i8 %12615, 1
  %12617 = xor i8 %12616, 1
  %12618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12617, i8* %12618, align 1, !tbaa !2448
  %12619 = xor i64 %12602, %12600
  %12620 = trunc i64 %12619 to i32
  %12621 = xor i32 %12620, %12606
  %12622 = lshr i32 %12621, 4
  %12623 = trunc i32 %12622 to i8
  %12624 = and i8 %12623, 1
  %12625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12624, i8* %12625, align 1, !tbaa !2449
  %12626 = icmp eq i32 %12606, 0
  %12627 = zext i1 %12626 to i8
  %12628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12627, i8* %12628, align 1, !tbaa !2450
  %12629 = lshr i32 %12606, 31
  %12630 = trunc i32 %12629 to i8
  %12631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12630, i8* %12631, align 1, !tbaa !2451
  %12632 = lshr i32 %12605, 31
  %12633 = lshr i32 %12601, 31
  %12634 = xor i32 %12629, %12632
  %12635 = xor i32 %12629, %12633
  %12636 = add nuw nsw i32 %12634, %12635
  %12637 = icmp eq i32 %12636, 2
  %12638 = zext i1 %12637 to i8
  %12639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12638, i8* %12639, align 1, !tbaa !2452
  %12640 = load i64, i64* %RBP
  %12641 = sub i64 %12640, 72
  %12642 = load i64, i64* %PC
  %12643 = add i64 %12642, 3
  store i64 %12643, i64* %PC
  %12644 = inttoptr i64 %12641 to i32*
  %12645 = load i32, i32* %12644
  %12646 = zext i32 %12645 to i64
  store i64 %12646, i64* %RSI, align 8, !tbaa !2428
  %12647 = load i64, i64* %RBP
  %12648 = sub i64 %12647, 32
  %12649 = load i64, i64* %PC
  %12650 = add i64 %12649, 4
  store i64 %12650, i64* %PC
  %12651 = inttoptr i64 %12648 to i64*
  %12652 = load i64, i64* %12651
  store i64 %12652, i64* %RCX, align 8, !tbaa !2428
  %12653 = load i64, i64* %RSI
  %12654 = load i64, i64* %RCX
  %12655 = add i64 %12654, 20
  %12656 = load i64, i64* %PC
  %12657 = add i64 %12656, 4
  store i64 %12657, i64* %PC
  %12658 = inttoptr i64 %12655 to i32*
  %12659 = load i32, i32* %12658
  %12660 = shl i64 %12653, 32
  %12661 = ashr exact i64 %12660, 32
  %12662 = sext i32 %12659 to i64
  %12663 = mul nsw i64 %12662, %12661
  %12664 = trunc i64 %12663 to i32
  %12665 = and i64 %12663, 4294967295
  store i64 %12665, i64* %RSI, align 8, !tbaa !2428
  %12666 = shl i64 %12663, 32
  %12667 = ashr exact i64 %12666, 32
  %12668 = icmp ne i64 %12667, %12663
  %12669 = zext i1 %12668 to i8
  %12670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12669, i8* %12670, align 1, !tbaa !2434
  %12671 = and i32 %12664, 255
  %12672 = call i32 @llvm.ctpop.i32(i32 %12671) #16
  %12673 = trunc i32 %12672 to i8
  %12674 = and i8 %12673, 1
  %12675 = xor i8 %12674, 1
  %12676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12675, i8* %12676, align 1, !tbaa !2448
  %12677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12677, align 1, !tbaa !2449
  %12678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12678, align 1, !tbaa !2450
  %12679 = lshr i32 %12664, 31
  %12680 = trunc i32 %12679 to i8
  %12681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12680, i8* %12681, align 1, !tbaa !2451
  %12682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12669, i8* %12682, align 1, !tbaa !2452
  %12683 = load i64, i64* %RDX
  %12684 = load i32, i32* %ESI
  %12685 = zext i32 %12684 to i64
  %12686 = load i64, i64* %PC
  %12687 = add i64 %12686, 2
  store i64 %12687, i64* %PC
  %12688 = trunc i64 %12683 to i32
  %12689 = add i32 %12684, %12688
  %12690 = zext i32 %12689 to i64
  store i64 %12690, i64* %RDX, align 8, !tbaa !2428
  %12691 = icmp ult i32 %12689, %12688
  %12692 = icmp ult i32 %12689, %12684
  %12693 = or i1 %12691, %12692
  %12694 = zext i1 %12693 to i8
  %12695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12694, i8* %12695, align 1, !tbaa !2434
  %12696 = and i32 %12689, 255
  %12697 = call i32 @llvm.ctpop.i32(i32 %12696) #16
  %12698 = trunc i32 %12697 to i8
  %12699 = and i8 %12698, 1
  %12700 = xor i8 %12699, 1
  %12701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12700, i8* %12701, align 1, !tbaa !2448
  %12702 = xor i64 %12685, %12683
  %12703 = trunc i64 %12702 to i32
  %12704 = xor i32 %12703, %12689
  %12705 = lshr i32 %12704, 4
  %12706 = trunc i32 %12705 to i8
  %12707 = and i8 %12706, 1
  %12708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12707, i8* %12708, align 1, !tbaa !2449
  %12709 = icmp eq i32 %12689, 0
  %12710 = zext i1 %12709 to i8
  %12711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12710, i8* %12711, align 1, !tbaa !2450
  %12712 = lshr i32 %12689, 31
  %12713 = trunc i32 %12712 to i8
  %12714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12713, i8* %12714, align 1, !tbaa !2451
  %12715 = lshr i32 %12688, 31
  %12716 = lshr i32 %12684, 31
  %12717 = xor i32 %12712, %12715
  %12718 = xor i32 %12712, %12716
  %12719 = add nuw nsw i32 %12717, %12718
  %12720 = icmp eq i32 %12719, 2
  %12721 = zext i1 %12720 to i8
  %12722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12721, i8* %12722, align 1, !tbaa !2452
  %12723 = load i64, i64* %RDX
  %12724 = load i64, i64* %RBP
  %12725 = sub i64 %12724, 76
  %12726 = load i64, i64* %PC
  %12727 = add i64 %12726, 3
  store i64 %12727, i64* %PC
  %12728 = trunc i64 %12723 to i32
  %12729 = inttoptr i64 %12725 to i32*
  %12730 = load i32, i32* %12729
  %12731 = add i32 %12730, %12728
  %12732 = zext i32 %12731 to i64
  store i64 %12732, i64* %RDX, align 8, !tbaa !2428
  %12733 = icmp ult i32 %12731, %12728
  %12734 = icmp ult i32 %12731, %12730
  %12735 = or i1 %12733, %12734
  %12736 = zext i1 %12735 to i8
  %12737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12736, i8* %12737, align 1, !tbaa !2434
  %12738 = and i32 %12731, 255
  %12739 = call i32 @llvm.ctpop.i32(i32 %12738) #16
  %12740 = trunc i32 %12739 to i8
  %12741 = and i8 %12740, 1
  %12742 = xor i8 %12741, 1
  %12743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12742, i8* %12743, align 1, !tbaa !2448
  %12744 = xor i32 %12730, %12728
  %12745 = xor i32 %12744, %12731
  %12746 = lshr i32 %12745, 4
  %12747 = trunc i32 %12746 to i8
  %12748 = and i8 %12747, 1
  %12749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12748, i8* %12749, align 1, !tbaa !2449
  %12750 = icmp eq i32 %12731, 0
  %12751 = zext i1 %12750 to i8
  %12752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12751, i8* %12752, align 1, !tbaa !2450
  %12753 = lshr i32 %12731, 31
  %12754 = trunc i32 %12753 to i8
  %12755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12754, i8* %12755, align 1, !tbaa !2451
  %12756 = lshr i32 %12728, 31
  %12757 = lshr i32 %12730, 31
  %12758 = xor i32 %12753, %12756
  %12759 = xor i32 %12753, %12757
  %12760 = add nuw nsw i32 %12758, %12759
  %12761 = icmp eq i32 %12760, 2
  %12762 = zext i1 %12761 to i8
  %12763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12762, i8* %12763, align 1, !tbaa !2452
  %12764 = load i32, i32* %EDX
  %12765 = zext i32 %12764 to i64
  %12766 = load i64, i64* %PC
  %12767 = add i64 %12766, 3
  store i64 %12767, i64* %PC
  %12768 = shl i64 %12765, 32
  %12769 = ashr exact i64 %12768, 32
  store i64 %12769, i64* %RCX, align 8, !tbaa !2428
  %12770 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12771 = load i64, i64* %RAX
  %12772 = load i64, i64* %RCX
  %12773 = mul i64 %12772, 4
  %12774 = add i64 %12773, %12771
  %12775 = load i64, i64* %PC
  %12776 = add i64 %12775, 5
  store i64 %12776, i64* %PC
  %12777 = inttoptr i64 %12774 to float*
  %12778 = load float, float* %12777
  %12779 = bitcast i8* %12770 to float*
  store float %12778, float* %12779, align 1, !tbaa !2453
  %12780 = getelementptr inbounds i8, i8* %12770, i64 4
  %12781 = bitcast i8* %12780 to float*
  store float 0.000000e+00, float* %12781, align 1, !tbaa !2453
  %12782 = getelementptr inbounds i8, i8* %12770, i64 8
  %12783 = bitcast i8* %12782 to float*
  store float 0.000000e+00, float* %12783, align 1, !tbaa !2453
  %12784 = getelementptr inbounds i8, i8* %12770, i64 12
  %12785 = bitcast i8* %12784 to float*
  store float 0.000000e+00, float* %12785, align 1, !tbaa !2453
  %12786 = load i64, i64* %RBP
  %12787 = sub i64 %12786, 40
  %12788 = load i64, i64* %PC
  %12789 = add i64 %12788, 4
  store i64 %12789, i64* %PC
  %12790 = inttoptr i64 %12787 to i64*
  %12791 = load i64, i64* %12790
  store i64 %12791, i64* %RAX, align 8, !tbaa !2428
  %12792 = load i64, i64* %RAX
  %12793 = load i64, i64* %PC
  %12794 = add i64 %12793, 3
  store i64 %12794, i64* %PC
  %12795 = inttoptr i64 %12792 to i64*
  %12796 = load i64, i64* %12795
  store i64 %12796, i64* %RAX, align 8, !tbaa !2428
  %12797 = load i64, i64* %RBP
  %12798 = sub i64 %12797, 40
  %12799 = load i64, i64* %PC
  %12800 = add i64 %12799, 4
  store i64 %12800, i64* %PC
  %12801 = inttoptr i64 %12798 to i64*
  %12802 = load i64, i64* %12801
  store i64 %12802, i64* %RCX, align 8, !tbaa !2428
  %12803 = load i64, i64* %RCX
  %12804 = add i64 %12803, 12
  %12805 = load i64, i64* %PC
  %12806 = add i64 %12805, 4
  store i64 %12806, i64* %PC
  %12807 = inttoptr i64 %12804 to i32*
  %12808 = load i32, i32* %12807
  %12809 = sext i32 %12808 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %12810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12810, align 1, !tbaa !2434
  %12811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12811, align 1, !tbaa !2448
  %12812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12812, align 1, !tbaa !2449
  %12813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12813, align 1, !tbaa !2450
  %12814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12814, align 1, !tbaa !2451
  %12815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12815, align 1, !tbaa !2452
  %12816 = load i64, i64* %RBP
  %12817 = sub i64 %12816, 40
  %12818 = load i64, i64* %PC
  %12819 = add i64 %12818, 4
  store i64 %12819, i64* %PC
  %12820 = inttoptr i64 %12817 to i64*
  %12821 = load i64, i64* %12820
  store i64 %12821, i64* %RCX, align 8, !tbaa !2428
  %12822 = load i64, i64* %RDX
  %12823 = load i64, i64* %RCX
  %12824 = add i64 %12823, 16
  %12825 = load i64, i64* %PC
  %12826 = add i64 %12825, 4
  store i64 %12826, i64* %PC
  %12827 = inttoptr i64 %12824 to i32*
  %12828 = load i32, i32* %12827
  %12829 = shl i64 %12822, 32
  %12830 = ashr exact i64 %12829, 32
  %12831 = sext i32 %12828 to i64
  %12832 = mul nsw i64 %12831, %12830
  %12833 = trunc i64 %12832 to i32
  %12834 = and i64 %12832, 4294967295
  store i64 %12834, i64* %RDX, align 8, !tbaa !2428
  %12835 = shl i64 %12832, 32
  %12836 = ashr exact i64 %12835, 32
  %12837 = icmp ne i64 %12836, %12832
  %12838 = zext i1 %12837 to i8
  %12839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12838, i8* %12839, align 1, !tbaa !2434
  %12840 = and i32 %12833, 255
  %12841 = call i32 @llvm.ctpop.i32(i32 %12840) #16
  %12842 = trunc i32 %12841 to i8
  %12843 = and i8 %12842, 1
  %12844 = xor i8 %12843, 1
  %12845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12844, i8* %12845, align 1, !tbaa !2448
  %12846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12846, align 1, !tbaa !2449
  %12847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12847, align 1, !tbaa !2450
  %12848 = lshr i32 %12833, 31
  %12849 = trunc i32 %12848 to i8
  %12850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12849, i8* %12850, align 1, !tbaa !2451
  %12851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12838, i8* %12851, align 1, !tbaa !2452
  %12852 = load i64, i64* %RBP
  %12853 = sub i64 %12852, 40
  %12854 = load i64, i64* %PC
  %12855 = add i64 %12854, 4
  store i64 %12855, i64* %PC
  %12856 = inttoptr i64 %12853 to i64*
  %12857 = load i64, i64* %12856
  store i64 %12857, i64* %RCX, align 8, !tbaa !2428
  %12858 = load i64, i64* %RDX
  %12859 = load i64, i64* %RCX
  %12860 = add i64 %12859, 20
  %12861 = load i64, i64* %PC
  %12862 = add i64 %12861, 4
  store i64 %12862, i64* %PC
  %12863 = inttoptr i64 %12860 to i32*
  %12864 = load i32, i32* %12863
  %12865 = shl i64 %12858, 32
  %12866 = ashr exact i64 %12865, 32
  %12867 = sext i32 %12864 to i64
  %12868 = mul nsw i64 %12867, %12866
  %12869 = trunc i64 %12868 to i32
  %12870 = and i64 %12868, 4294967295
  store i64 %12870, i64* %RDX, align 8, !tbaa !2428
  %12871 = shl i64 %12868, 32
  %12872 = ashr exact i64 %12871, 32
  %12873 = icmp ne i64 %12872, %12868
  %12874 = zext i1 %12873 to i8
  %12875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12874, i8* %12875, align 1, !tbaa !2434
  %12876 = and i32 %12869, 255
  %12877 = call i32 @llvm.ctpop.i32(i32 %12876) #16
  %12878 = trunc i32 %12877 to i8
  %12879 = and i8 %12878, 1
  %12880 = xor i8 %12879, 1
  %12881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12880, i8* %12881, align 1, !tbaa !2448
  %12882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12882, align 1, !tbaa !2449
  %12883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12883, align 1, !tbaa !2450
  %12884 = lshr i32 %12869, 31
  %12885 = trunc i32 %12884 to i8
  %12886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12885, i8* %12886, align 1, !tbaa !2451
  %12887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12874, i8* %12887, align 1, !tbaa !2452
  %12888 = load i64, i64* %RBP
  %12889 = sub i64 %12888, 68
  %12890 = load i64, i64* %PC
  %12891 = add i64 %12890, 3
  store i64 %12891, i64* %PC
  %12892 = inttoptr i64 %12889 to i32*
  %12893 = load i32, i32* %12892
  %12894 = zext i32 %12893 to i64
  store i64 %12894, i64* %RSI, align 8, !tbaa !2428
  %12895 = load i64, i64* %RBP
  %12896 = sub i64 %12895, 40
  %12897 = load i64, i64* %PC
  %12898 = add i64 %12897, 4
  store i64 %12898, i64* %PC
  %12899 = inttoptr i64 %12896 to i64*
  %12900 = load i64, i64* %12899
  store i64 %12900, i64* %RCX, align 8, !tbaa !2428
  %12901 = load i64, i64* %RSI
  %12902 = load i64, i64* %RCX
  %12903 = add i64 %12902, 16
  %12904 = load i64, i64* %PC
  %12905 = add i64 %12904, 4
  store i64 %12905, i64* %PC
  %12906 = inttoptr i64 %12903 to i32*
  %12907 = load i32, i32* %12906
  %12908 = shl i64 %12901, 32
  %12909 = ashr exact i64 %12908, 32
  %12910 = sext i32 %12907 to i64
  %12911 = mul nsw i64 %12910, %12909
  %12912 = trunc i64 %12911 to i32
  %12913 = and i64 %12911, 4294967295
  store i64 %12913, i64* %RSI, align 8, !tbaa !2428
  %12914 = shl i64 %12911, 32
  %12915 = ashr exact i64 %12914, 32
  %12916 = icmp ne i64 %12915, %12911
  %12917 = zext i1 %12916 to i8
  %12918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12917, i8* %12918, align 1, !tbaa !2434
  %12919 = and i32 %12912, 255
  %12920 = call i32 @llvm.ctpop.i32(i32 %12919) #16
  %12921 = trunc i32 %12920 to i8
  %12922 = and i8 %12921, 1
  %12923 = xor i8 %12922, 1
  %12924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12923, i8* %12924, align 1, !tbaa !2448
  %12925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12925, align 1, !tbaa !2449
  %12926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12926, align 1, !tbaa !2450
  %12927 = lshr i32 %12912, 31
  %12928 = trunc i32 %12927 to i8
  %12929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12928, i8* %12929, align 1, !tbaa !2451
  %12930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12917, i8* %12930, align 1, !tbaa !2452
  %12931 = load i64, i64* %RBP
  %12932 = sub i64 %12931, 40
  %12933 = load i64, i64* %PC
  %12934 = add i64 %12933, 4
  store i64 %12934, i64* %PC
  %12935 = inttoptr i64 %12932 to i64*
  %12936 = load i64, i64* %12935
  store i64 %12936, i64* %RCX, align 8, !tbaa !2428
  %12937 = load i64, i64* %RSI
  %12938 = load i64, i64* %RCX
  %12939 = add i64 %12938, 20
  %12940 = load i64, i64* %PC
  %12941 = add i64 %12940, 4
  store i64 %12941, i64* %PC
  %12942 = inttoptr i64 %12939 to i32*
  %12943 = load i32, i32* %12942
  %12944 = shl i64 %12937, 32
  %12945 = ashr exact i64 %12944, 32
  %12946 = sext i32 %12943 to i64
  %12947 = mul nsw i64 %12946, %12945
  %12948 = trunc i64 %12947 to i32
  %12949 = and i64 %12947, 4294967295
  store i64 %12949, i64* %RSI, align 8, !tbaa !2428
  %12950 = shl i64 %12947, 32
  %12951 = ashr exact i64 %12950, 32
  %12952 = icmp ne i64 %12951, %12947
  %12953 = zext i1 %12952 to i8
  %12954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12953, i8* %12954, align 1, !tbaa !2434
  %12955 = and i32 %12948, 255
  %12956 = call i32 @llvm.ctpop.i32(i32 %12955) #16
  %12957 = trunc i32 %12956 to i8
  %12958 = and i8 %12957, 1
  %12959 = xor i8 %12958, 1
  %12960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12959, i8* %12960, align 1, !tbaa !2448
  %12961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12961, align 1, !tbaa !2449
  %12962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %12962, align 1, !tbaa !2450
  %12963 = lshr i32 %12948, 31
  %12964 = trunc i32 %12963 to i8
  %12965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12964, i8* %12965, align 1, !tbaa !2451
  %12966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12953, i8* %12966, align 1, !tbaa !2452
  %12967 = load i64, i64* %RDX
  %12968 = load i32, i32* %ESI
  %12969 = zext i32 %12968 to i64
  %12970 = load i64, i64* %PC
  %12971 = add i64 %12970, 2
  store i64 %12971, i64* %PC
  %12972 = trunc i64 %12967 to i32
  %12973 = add i32 %12968, %12972
  %12974 = zext i32 %12973 to i64
  store i64 %12974, i64* %RDX, align 8, !tbaa !2428
  %12975 = icmp ult i32 %12973, %12972
  %12976 = icmp ult i32 %12973, %12968
  %12977 = or i1 %12975, %12976
  %12978 = zext i1 %12977 to i8
  %12979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12978, i8* %12979, align 1, !tbaa !2434
  %12980 = and i32 %12973, 255
  %12981 = call i32 @llvm.ctpop.i32(i32 %12980) #16
  %12982 = trunc i32 %12981 to i8
  %12983 = and i8 %12982, 1
  %12984 = xor i8 %12983, 1
  %12985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12984, i8* %12985, align 1, !tbaa !2448
  %12986 = xor i64 %12969, %12967
  %12987 = trunc i64 %12986 to i32
  %12988 = xor i32 %12987, %12973
  %12989 = lshr i32 %12988, 4
  %12990 = trunc i32 %12989 to i8
  %12991 = and i8 %12990, 1
  %12992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12991, i8* %12992, align 1, !tbaa !2449
  %12993 = icmp eq i32 %12973, 0
  %12994 = zext i1 %12993 to i8
  %12995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12994, i8* %12995, align 1, !tbaa !2450
  %12996 = lshr i32 %12973, 31
  %12997 = trunc i32 %12996 to i8
  %12998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12997, i8* %12998, align 1, !tbaa !2451
  %12999 = lshr i32 %12972, 31
  %13000 = lshr i32 %12968, 31
  %13001 = xor i32 %12996, %12999
  %13002 = xor i32 %12996, %13000
  %13003 = add nuw nsw i32 %13001, %13002
  %13004 = icmp eq i32 %13003, 2
  %13005 = zext i1 %13004 to i8
  %13006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13005, i8* %13006, align 1, !tbaa !2452
  %13007 = load i64, i64* %RBP
  %13008 = sub i64 %13007, 72
  %13009 = load i64, i64* %PC
  %13010 = add i64 %13009, 3
  store i64 %13010, i64* %PC
  %13011 = inttoptr i64 %13008 to i32*
  %13012 = load i32, i32* %13011
  %13013 = zext i32 %13012 to i64
  store i64 %13013, i64* %RSI, align 8, !tbaa !2428
  %13014 = load i64, i64* %RBP
  %13015 = sub i64 %13014, 40
  %13016 = load i64, i64* %PC
  %13017 = add i64 %13016, 4
  store i64 %13017, i64* %PC
  %13018 = inttoptr i64 %13015 to i64*
  %13019 = load i64, i64* %13018
  store i64 %13019, i64* %RCX, align 8, !tbaa !2428
  %13020 = load i64, i64* %RSI
  %13021 = load i64, i64* %RCX
  %13022 = add i64 %13021, 20
  %13023 = load i64, i64* %PC
  %13024 = add i64 %13023, 4
  store i64 %13024, i64* %PC
  %13025 = inttoptr i64 %13022 to i32*
  %13026 = load i32, i32* %13025
  %13027 = shl i64 %13020, 32
  %13028 = ashr exact i64 %13027, 32
  %13029 = sext i32 %13026 to i64
  %13030 = mul nsw i64 %13029, %13028
  %13031 = trunc i64 %13030 to i32
  %13032 = and i64 %13030, 4294967295
  store i64 %13032, i64* %RSI, align 8, !tbaa !2428
  %13033 = shl i64 %13030, 32
  %13034 = ashr exact i64 %13033, 32
  %13035 = icmp ne i64 %13034, %13030
  %13036 = zext i1 %13035 to i8
  %13037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13036, i8* %13037, align 1, !tbaa !2434
  %13038 = and i32 %13031, 255
  %13039 = call i32 @llvm.ctpop.i32(i32 %13038) #16
  %13040 = trunc i32 %13039 to i8
  %13041 = and i8 %13040, 1
  %13042 = xor i8 %13041, 1
  %13043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13042, i8* %13043, align 1, !tbaa !2448
  %13044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13044, align 1, !tbaa !2449
  %13045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13045, align 1, !tbaa !2450
  %13046 = lshr i32 %13031, 31
  %13047 = trunc i32 %13046 to i8
  %13048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13047, i8* %13048, align 1, !tbaa !2451
  %13049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13036, i8* %13049, align 1, !tbaa !2452
  %13050 = load i64, i64* %RDX
  %13051 = load i32, i32* %ESI
  %13052 = zext i32 %13051 to i64
  %13053 = load i64, i64* %PC
  %13054 = add i64 %13053, 2
  store i64 %13054, i64* %PC
  %13055 = trunc i64 %13050 to i32
  %13056 = add i32 %13051, %13055
  %13057 = zext i32 %13056 to i64
  store i64 %13057, i64* %RDX, align 8, !tbaa !2428
  %13058 = icmp ult i32 %13056, %13055
  %13059 = icmp ult i32 %13056, %13051
  %13060 = or i1 %13058, %13059
  %13061 = zext i1 %13060 to i8
  %13062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13061, i8* %13062, align 1, !tbaa !2434
  %13063 = and i32 %13056, 255
  %13064 = call i32 @llvm.ctpop.i32(i32 %13063) #16
  %13065 = trunc i32 %13064 to i8
  %13066 = and i8 %13065, 1
  %13067 = xor i8 %13066, 1
  %13068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13067, i8* %13068, align 1, !tbaa !2448
  %13069 = xor i64 %13052, %13050
  %13070 = trunc i64 %13069 to i32
  %13071 = xor i32 %13070, %13056
  %13072 = lshr i32 %13071, 4
  %13073 = trunc i32 %13072 to i8
  %13074 = and i8 %13073, 1
  %13075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13074, i8* %13075, align 1, !tbaa !2449
  %13076 = icmp eq i32 %13056, 0
  %13077 = zext i1 %13076 to i8
  %13078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13077, i8* %13078, align 1, !tbaa !2450
  %13079 = lshr i32 %13056, 31
  %13080 = trunc i32 %13079 to i8
  %13081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13080, i8* %13081, align 1, !tbaa !2451
  %13082 = lshr i32 %13055, 31
  %13083 = lshr i32 %13051, 31
  %13084 = xor i32 %13079, %13082
  %13085 = xor i32 %13079, %13083
  %13086 = add nuw nsw i32 %13084, %13085
  %13087 = icmp eq i32 %13086, 2
  %13088 = zext i1 %13087 to i8
  %13089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13088, i8* %13089, align 1, !tbaa !2452
  %13090 = load i64, i64* %RBP
  %13091 = sub i64 %13090, 76
  %13092 = load i64, i64* %PC
  %13093 = add i64 %13092, 3
  store i64 %13093, i64* %PC
  %13094 = inttoptr i64 %13091 to i32*
  %13095 = load i32, i32* %13094
  %13096 = zext i32 %13095 to i64
  store i64 %13096, i64* %RSI, align 8, !tbaa !2428
  %13097 = load i64, i64* %RSI
  %13098 = load i64, i64* %PC
  %13099 = add i64 %13098, 3
  store i64 %13099, i64* %PC
  %13100 = trunc i64 %13097 to i32
  %13101 = sub i32 %13100, 1
  %13102 = zext i32 %13101 to i64
  store i64 %13102, i64* %RSI, align 8, !tbaa !2428
  %13103 = icmp ult i32 %13100, 1
  %13104 = zext i1 %13103 to i8
  %13105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13104, i8* %13105, align 1, !tbaa !2434
  %13106 = and i32 %13101, 255
  %13107 = call i32 @llvm.ctpop.i32(i32 %13106) #16
  %13108 = trunc i32 %13107 to i8
  %13109 = and i8 %13108, 1
  %13110 = xor i8 %13109, 1
  %13111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13110, i8* %13111, align 1, !tbaa !2448
  %13112 = xor i64 1, %13097
  %13113 = trunc i64 %13112 to i32
  %13114 = xor i32 %13113, %13101
  %13115 = lshr i32 %13114, 4
  %13116 = trunc i32 %13115 to i8
  %13117 = and i8 %13116, 1
  %13118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13117, i8* %13118, align 1, !tbaa !2449
  %13119 = icmp eq i32 %13101, 0
  %13120 = zext i1 %13119 to i8
  %13121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13120, i8* %13121, align 1, !tbaa !2450
  %13122 = lshr i32 %13101, 31
  %13123 = trunc i32 %13122 to i8
  %13124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13123, i8* %13124, align 1, !tbaa !2451
  %13125 = lshr i32 %13100, 31
  %13126 = xor i32 %13122, %13125
  %13127 = add nuw nsw i32 %13126, %13125
  %13128 = icmp eq i32 %13127, 2
  %13129 = zext i1 %13128 to i8
  %13130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13129, i8* %13130, align 1, !tbaa !2452
  %13131 = load i64, i64* %RDX
  %13132 = load i32, i32* %ESI
  %13133 = zext i32 %13132 to i64
  %13134 = load i64, i64* %PC
  %13135 = add i64 %13134, 2
  store i64 %13135, i64* %PC
  %13136 = trunc i64 %13131 to i32
  %13137 = add i32 %13132, %13136
  %13138 = zext i32 %13137 to i64
  store i64 %13138, i64* %RDX, align 8, !tbaa !2428
  %13139 = icmp ult i32 %13137, %13136
  %13140 = icmp ult i32 %13137, %13132
  %13141 = or i1 %13139, %13140
  %13142 = zext i1 %13141 to i8
  %13143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13142, i8* %13143, align 1, !tbaa !2434
  %13144 = and i32 %13137, 255
  %13145 = call i32 @llvm.ctpop.i32(i32 %13144) #16
  %13146 = trunc i32 %13145 to i8
  %13147 = and i8 %13146, 1
  %13148 = xor i8 %13147, 1
  %13149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13148, i8* %13149, align 1, !tbaa !2448
  %13150 = xor i64 %13133, %13131
  %13151 = trunc i64 %13150 to i32
  %13152 = xor i32 %13151, %13137
  %13153 = lshr i32 %13152, 4
  %13154 = trunc i32 %13153 to i8
  %13155 = and i8 %13154, 1
  %13156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13155, i8* %13156, align 1, !tbaa !2449
  %13157 = icmp eq i32 %13137, 0
  %13158 = zext i1 %13157 to i8
  %13159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13158, i8* %13159, align 1, !tbaa !2450
  %13160 = lshr i32 %13137, 31
  %13161 = trunc i32 %13160 to i8
  %13162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13161, i8* %13162, align 1, !tbaa !2451
  %13163 = lshr i32 %13136, 31
  %13164 = lshr i32 %13132, 31
  %13165 = xor i32 %13160, %13163
  %13166 = xor i32 %13160, %13164
  %13167 = add nuw nsw i32 %13165, %13166
  %13168 = icmp eq i32 %13167, 2
  %13169 = zext i1 %13168 to i8
  %13170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13169, i8* %13170, align 1, !tbaa !2452
  %13171 = load i32, i32* %EDX
  %13172 = zext i32 %13171 to i64
  %13173 = load i64, i64* %PC
  %13174 = add i64 %13173, 3
  store i64 %13174, i64* %PC
  %13175 = shl i64 %13172, 32
  %13176 = ashr exact i64 %13175, 32
  store i64 %13176, i64* %RCX, align 8, !tbaa !2428
  %13177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13178 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13179 = load i64, i64* %RAX
  %13180 = load i64, i64* %RCX
  %13181 = mul i64 %13180, 4
  %13182 = add i64 %13181, %13179
  %13183 = load i64, i64* %PC
  %13184 = add i64 %13183, 5
  store i64 %13184, i64* %PC
  %13185 = bitcast i8* %13178 to <2 x float>*
  %13186 = load <2 x float>, <2 x float>* %13185, align 1
  %13187 = getelementptr inbounds i8, i8* %13178, i64 8
  %13188 = bitcast i8* %13187 to <2 x i32>*
  %13189 = load <2 x i32>, <2 x i32>* %13188, align 1
  %13190 = inttoptr i64 %13182 to float*
  %13191 = load float, float* %13190
  %13192 = extractelement <2 x float> %13186, i32 0
  %13193 = fmul float %13192, %13191
  %13194 = bitcast i8* %13177 to float*
  store float %13193, float* %13194, align 1, !tbaa !2453
  %13195 = bitcast <2 x float> %13186 to <2 x i32>
  %13196 = extractelement <2 x i32> %13195, i32 1
  %13197 = getelementptr inbounds i8, i8* %13177, i64 4
  %13198 = bitcast i8* %13197 to i32*
  store i32 %13196, i32* %13198, align 1, !tbaa !2453
  %13199 = extractelement <2 x i32> %13189, i32 0
  %13200 = getelementptr inbounds i8, i8* %13177, i64 8
  %13201 = bitcast i8* %13200 to i32*
  store i32 %13199, i32* %13201, align 1, !tbaa !2453
  %13202 = extractelement <2 x i32> %13189, i32 1
  %13203 = getelementptr inbounds i8, i8* %13177, i64 12
  %13204 = bitcast i8* %13203 to i32*
  store i32 %13202, i32* %13204, align 1, !tbaa !2453
  %13205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13206 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13207 = bitcast %union.vec128_t* %XMM1 to i8*
  %13208 = load i64, i64* %PC
  %13209 = add i64 %13208, 4
  store i64 %13209, i64* %PC
  %13210 = bitcast i8* %13206 to <2 x float>*
  %13211 = load <2 x float>, <2 x float>* %13210, align 1
  %13212 = getelementptr inbounds i8, i8* %13206, i64 8
  %13213 = bitcast i8* %13212 to <2 x i32>*
  %13214 = load <2 x i32>, <2 x i32>* %13213, align 1
  %13215 = bitcast i8* %13207 to <2 x float>*
  %13216 = load <2 x float>, <2 x float>* %13215, align 1
  %13217 = extractelement <2 x float> %13211, i32 0
  %13218 = extractelement <2 x float> %13216, i32 0
  %13219 = fadd float %13217, %13218
  %13220 = bitcast i8* %13205 to float*
  store float %13219, float* %13220, align 1, !tbaa !2453
  %13221 = bitcast <2 x float> %13211 to <2 x i32>
  %13222 = extractelement <2 x i32> %13221, i32 1
  %13223 = getelementptr inbounds i8, i8* %13205, i64 4
  %13224 = bitcast i8* %13223 to i32*
  store i32 %13222, i32* %13224, align 1, !tbaa !2453
  %13225 = extractelement <2 x i32> %13214, i32 0
  %13226 = getelementptr inbounds i8, i8* %13205, i64 8
  %13227 = bitcast i8* %13226 to i32*
  store i32 %13225, i32* %13227, align 1, !tbaa !2453
  %13228 = extractelement <2 x i32> %13214, i32 1
  %13229 = getelementptr inbounds i8, i8* %13205, i64 12
  %13230 = bitcast i8* %13229 to i32*
  store i32 %13228, i32* %13230, align 1, !tbaa !2453
  %13231 = load i64, i64* %RBP
  %13232 = sub i64 %13231, 56
  %13233 = load i64, i64* %PC
  %13234 = add i64 %13233, 4
  store i64 %13234, i64* %PC
  %13235 = inttoptr i64 %13232 to i64*
  %13236 = load i64, i64* %13235
  store i64 %13236, i64* %RAX, align 8, !tbaa !2428
  %13237 = load i64, i64* %RAX
  %13238 = load i64, i64* %PC
  %13239 = add i64 %13238, 3
  store i64 %13239, i64* %PC
  %13240 = inttoptr i64 %13237 to i64*
  %13241 = load i64, i64* %13240
  store i64 %13241, i64* %RAX, align 8, !tbaa !2428
  %13242 = load i64, i64* %RBP
  %13243 = sub i64 %13242, 56
  %13244 = load i64, i64* %PC
  %13245 = add i64 %13244, 4
  store i64 %13245, i64* %PC
  %13246 = inttoptr i64 %13243 to i64*
  %13247 = load i64, i64* %13246
  store i64 %13247, i64* %RCX, align 8, !tbaa !2428
  %13248 = load i64, i64* %RCX
  %13249 = add i64 %13248, 12
  %13250 = load i64, i64* %PC
  %13251 = add i64 %13250, 4
  store i64 %13251, i64* %PC
  %13252 = inttoptr i64 %13249 to i32*
  %13253 = load i32, i32* %13252
  %13254 = sext i32 %13253 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %13255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %13255, align 1, !tbaa !2434
  %13256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %13256, align 1, !tbaa !2448
  %13257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13257, align 1, !tbaa !2449
  %13258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13258, align 1, !tbaa !2450
  %13259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %13259, align 1, !tbaa !2451
  %13260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13260, align 1, !tbaa !2452
  %13261 = load i64, i64* %RBP
  %13262 = sub i64 %13261, 56
  %13263 = load i64, i64* %PC
  %13264 = add i64 %13263, 4
  store i64 %13264, i64* %PC
  %13265 = inttoptr i64 %13262 to i64*
  %13266 = load i64, i64* %13265
  store i64 %13266, i64* %RCX, align 8, !tbaa !2428
  %13267 = load i64, i64* %RDX
  %13268 = load i64, i64* %RCX
  %13269 = add i64 %13268, 16
  %13270 = load i64, i64* %PC
  %13271 = add i64 %13270, 4
  store i64 %13271, i64* %PC
  %13272 = inttoptr i64 %13269 to i32*
  %13273 = load i32, i32* %13272
  %13274 = shl i64 %13267, 32
  %13275 = ashr exact i64 %13274, 32
  %13276 = sext i32 %13273 to i64
  %13277 = mul nsw i64 %13276, %13275
  %13278 = trunc i64 %13277 to i32
  %13279 = and i64 %13277, 4294967295
  store i64 %13279, i64* %RDX, align 8, !tbaa !2428
  %13280 = shl i64 %13277, 32
  %13281 = ashr exact i64 %13280, 32
  %13282 = icmp ne i64 %13281, %13277
  %13283 = zext i1 %13282 to i8
  %13284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13283, i8* %13284, align 1, !tbaa !2434
  %13285 = and i32 %13278, 255
  %13286 = call i32 @llvm.ctpop.i32(i32 %13285) #16
  %13287 = trunc i32 %13286 to i8
  %13288 = and i8 %13287, 1
  %13289 = xor i8 %13288, 1
  %13290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13289, i8* %13290, align 1, !tbaa !2448
  %13291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13291, align 1, !tbaa !2449
  %13292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13292, align 1, !tbaa !2450
  %13293 = lshr i32 %13278, 31
  %13294 = trunc i32 %13293 to i8
  %13295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13294, i8* %13295, align 1, !tbaa !2451
  %13296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13283, i8* %13296, align 1, !tbaa !2452
  %13297 = load i64, i64* %RBP
  %13298 = sub i64 %13297, 56
  %13299 = load i64, i64* %PC
  %13300 = add i64 %13299, 4
  store i64 %13300, i64* %PC
  %13301 = inttoptr i64 %13298 to i64*
  %13302 = load i64, i64* %13301
  store i64 %13302, i64* %RCX, align 8, !tbaa !2428
  %13303 = load i64, i64* %RDX
  %13304 = load i64, i64* %RCX
  %13305 = add i64 %13304, 20
  %13306 = load i64, i64* %PC
  %13307 = add i64 %13306, 4
  store i64 %13307, i64* %PC
  %13308 = inttoptr i64 %13305 to i32*
  %13309 = load i32, i32* %13308
  %13310 = shl i64 %13303, 32
  %13311 = ashr exact i64 %13310, 32
  %13312 = sext i32 %13309 to i64
  %13313 = mul nsw i64 %13312, %13311
  %13314 = trunc i64 %13313 to i32
  %13315 = and i64 %13313, 4294967295
  store i64 %13315, i64* %RDX, align 8, !tbaa !2428
  %13316 = shl i64 %13313, 32
  %13317 = ashr exact i64 %13316, 32
  %13318 = icmp ne i64 %13317, %13313
  %13319 = zext i1 %13318 to i8
  %13320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13319, i8* %13320, align 1, !tbaa !2434
  %13321 = and i32 %13314, 255
  %13322 = call i32 @llvm.ctpop.i32(i32 %13321) #16
  %13323 = trunc i32 %13322 to i8
  %13324 = and i8 %13323, 1
  %13325 = xor i8 %13324, 1
  %13326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13325, i8* %13326, align 1, !tbaa !2448
  %13327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13327, align 1, !tbaa !2449
  %13328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13328, align 1, !tbaa !2450
  %13329 = lshr i32 %13314, 31
  %13330 = trunc i32 %13329 to i8
  %13331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13330, i8* %13331, align 1, !tbaa !2451
  %13332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13319, i8* %13332, align 1, !tbaa !2452
  %13333 = load i64, i64* %RBP
  %13334 = sub i64 %13333, 68
  %13335 = load i64, i64* %PC
  %13336 = add i64 %13335, 3
  store i64 %13336, i64* %PC
  %13337 = inttoptr i64 %13334 to i32*
  %13338 = load i32, i32* %13337
  %13339 = zext i32 %13338 to i64
  store i64 %13339, i64* %RSI, align 8, !tbaa !2428
  %13340 = load i64, i64* %RBP
  %13341 = sub i64 %13340, 56
  %13342 = load i64, i64* %PC
  %13343 = add i64 %13342, 4
  store i64 %13343, i64* %PC
  %13344 = inttoptr i64 %13341 to i64*
  %13345 = load i64, i64* %13344
  store i64 %13345, i64* %RCX, align 8, !tbaa !2428
  %13346 = load i64, i64* %RSI
  %13347 = load i64, i64* %RCX
  %13348 = add i64 %13347, 16
  %13349 = load i64, i64* %PC
  %13350 = add i64 %13349, 4
  store i64 %13350, i64* %PC
  %13351 = inttoptr i64 %13348 to i32*
  %13352 = load i32, i32* %13351
  %13353 = shl i64 %13346, 32
  %13354 = ashr exact i64 %13353, 32
  %13355 = sext i32 %13352 to i64
  %13356 = mul nsw i64 %13355, %13354
  %13357 = trunc i64 %13356 to i32
  %13358 = and i64 %13356, 4294967295
  store i64 %13358, i64* %RSI, align 8, !tbaa !2428
  %13359 = shl i64 %13356, 32
  %13360 = ashr exact i64 %13359, 32
  %13361 = icmp ne i64 %13360, %13356
  %13362 = zext i1 %13361 to i8
  %13363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13362, i8* %13363, align 1, !tbaa !2434
  %13364 = and i32 %13357, 255
  %13365 = call i32 @llvm.ctpop.i32(i32 %13364) #16
  %13366 = trunc i32 %13365 to i8
  %13367 = and i8 %13366, 1
  %13368 = xor i8 %13367, 1
  %13369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13368, i8* %13369, align 1, !tbaa !2448
  %13370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13370, align 1, !tbaa !2449
  %13371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13371, align 1, !tbaa !2450
  %13372 = lshr i32 %13357, 31
  %13373 = trunc i32 %13372 to i8
  %13374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13373, i8* %13374, align 1, !tbaa !2451
  %13375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13362, i8* %13375, align 1, !tbaa !2452
  %13376 = load i64, i64* %RBP
  %13377 = sub i64 %13376, 56
  %13378 = load i64, i64* %PC
  %13379 = add i64 %13378, 4
  store i64 %13379, i64* %PC
  %13380 = inttoptr i64 %13377 to i64*
  %13381 = load i64, i64* %13380
  store i64 %13381, i64* %RCX, align 8, !tbaa !2428
  %13382 = load i64, i64* %RSI
  %13383 = load i64, i64* %RCX
  %13384 = add i64 %13383, 20
  %13385 = load i64, i64* %PC
  %13386 = add i64 %13385, 4
  store i64 %13386, i64* %PC
  %13387 = inttoptr i64 %13384 to i32*
  %13388 = load i32, i32* %13387
  %13389 = shl i64 %13382, 32
  %13390 = ashr exact i64 %13389, 32
  %13391 = sext i32 %13388 to i64
  %13392 = mul nsw i64 %13391, %13390
  %13393 = trunc i64 %13392 to i32
  %13394 = and i64 %13392, 4294967295
  store i64 %13394, i64* %RSI, align 8, !tbaa !2428
  %13395 = shl i64 %13392, 32
  %13396 = ashr exact i64 %13395, 32
  %13397 = icmp ne i64 %13396, %13392
  %13398 = zext i1 %13397 to i8
  %13399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13398, i8* %13399, align 1, !tbaa !2434
  %13400 = and i32 %13393, 255
  %13401 = call i32 @llvm.ctpop.i32(i32 %13400) #16
  %13402 = trunc i32 %13401 to i8
  %13403 = and i8 %13402, 1
  %13404 = xor i8 %13403, 1
  %13405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13404, i8* %13405, align 1, !tbaa !2448
  %13406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13406, align 1, !tbaa !2449
  %13407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13407, align 1, !tbaa !2450
  %13408 = lshr i32 %13393, 31
  %13409 = trunc i32 %13408 to i8
  %13410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13409, i8* %13410, align 1, !tbaa !2451
  %13411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13398, i8* %13411, align 1, !tbaa !2452
  %13412 = load i64, i64* %RDX
  %13413 = load i32, i32* %ESI
  %13414 = zext i32 %13413 to i64
  %13415 = load i64, i64* %PC
  %13416 = add i64 %13415, 2
  store i64 %13416, i64* %PC
  %13417 = trunc i64 %13412 to i32
  %13418 = add i32 %13413, %13417
  %13419 = zext i32 %13418 to i64
  store i64 %13419, i64* %RDX, align 8, !tbaa !2428
  %13420 = icmp ult i32 %13418, %13417
  %13421 = icmp ult i32 %13418, %13413
  %13422 = or i1 %13420, %13421
  %13423 = zext i1 %13422 to i8
  %13424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13423, i8* %13424, align 1, !tbaa !2434
  %13425 = and i32 %13418, 255
  %13426 = call i32 @llvm.ctpop.i32(i32 %13425) #16
  %13427 = trunc i32 %13426 to i8
  %13428 = and i8 %13427, 1
  %13429 = xor i8 %13428, 1
  %13430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13429, i8* %13430, align 1, !tbaa !2448
  %13431 = xor i64 %13414, %13412
  %13432 = trunc i64 %13431 to i32
  %13433 = xor i32 %13432, %13418
  %13434 = lshr i32 %13433, 4
  %13435 = trunc i32 %13434 to i8
  %13436 = and i8 %13435, 1
  %13437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13436, i8* %13437, align 1, !tbaa !2449
  %13438 = icmp eq i32 %13418, 0
  %13439 = zext i1 %13438 to i8
  %13440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13439, i8* %13440, align 1, !tbaa !2450
  %13441 = lshr i32 %13418, 31
  %13442 = trunc i32 %13441 to i8
  %13443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13442, i8* %13443, align 1, !tbaa !2451
  %13444 = lshr i32 %13417, 31
  %13445 = lshr i32 %13413, 31
  %13446 = xor i32 %13441, %13444
  %13447 = xor i32 %13441, %13445
  %13448 = add nuw nsw i32 %13446, %13447
  %13449 = icmp eq i32 %13448, 2
  %13450 = zext i1 %13449 to i8
  %13451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13450, i8* %13451, align 1, !tbaa !2452
  %13452 = load i64, i64* %RBP
  %13453 = sub i64 %13452, 72
  %13454 = load i64, i64* %PC
  %13455 = add i64 %13454, 3
  store i64 %13455, i64* %PC
  %13456 = inttoptr i64 %13453 to i32*
  %13457 = load i32, i32* %13456
  %13458 = zext i32 %13457 to i64
  store i64 %13458, i64* %RSI, align 8, !tbaa !2428
  %13459 = load i64, i64* %RBP
  %13460 = sub i64 %13459, 56
  %13461 = load i64, i64* %PC
  %13462 = add i64 %13461, 4
  store i64 %13462, i64* %PC
  %13463 = inttoptr i64 %13460 to i64*
  %13464 = load i64, i64* %13463
  store i64 %13464, i64* %RCX, align 8, !tbaa !2428
  %13465 = load i64, i64* %RSI
  %13466 = load i64, i64* %RCX
  %13467 = add i64 %13466, 20
  %13468 = load i64, i64* %PC
  %13469 = add i64 %13468, 4
  store i64 %13469, i64* %PC
  %13470 = inttoptr i64 %13467 to i32*
  %13471 = load i32, i32* %13470
  %13472 = shl i64 %13465, 32
  %13473 = ashr exact i64 %13472, 32
  %13474 = sext i32 %13471 to i64
  %13475 = mul nsw i64 %13474, %13473
  %13476 = trunc i64 %13475 to i32
  %13477 = and i64 %13475, 4294967295
  store i64 %13477, i64* %RSI, align 8, !tbaa !2428
  %13478 = shl i64 %13475, 32
  %13479 = ashr exact i64 %13478, 32
  %13480 = icmp ne i64 %13479, %13475
  %13481 = zext i1 %13480 to i8
  %13482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13481, i8* %13482, align 1, !tbaa !2434
  %13483 = and i32 %13476, 255
  %13484 = call i32 @llvm.ctpop.i32(i32 %13483) #16
  %13485 = trunc i32 %13484 to i8
  %13486 = and i8 %13485, 1
  %13487 = xor i8 %13486, 1
  %13488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13487, i8* %13488, align 1, !tbaa !2448
  %13489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13489, align 1, !tbaa !2449
  %13490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13490, align 1, !tbaa !2450
  %13491 = lshr i32 %13476, 31
  %13492 = trunc i32 %13491 to i8
  %13493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13492, i8* %13493, align 1, !tbaa !2451
  %13494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13481, i8* %13494, align 1, !tbaa !2452
  %13495 = load i64, i64* %RDX
  %13496 = load i32, i32* %ESI
  %13497 = zext i32 %13496 to i64
  %13498 = load i64, i64* %PC
  %13499 = add i64 %13498, 2
  store i64 %13499, i64* %PC
  %13500 = trunc i64 %13495 to i32
  %13501 = add i32 %13496, %13500
  %13502 = zext i32 %13501 to i64
  store i64 %13502, i64* %RDX, align 8, !tbaa !2428
  %13503 = icmp ult i32 %13501, %13500
  %13504 = icmp ult i32 %13501, %13496
  %13505 = or i1 %13503, %13504
  %13506 = zext i1 %13505 to i8
  %13507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13506, i8* %13507, align 1, !tbaa !2434
  %13508 = and i32 %13501, 255
  %13509 = call i32 @llvm.ctpop.i32(i32 %13508) #16
  %13510 = trunc i32 %13509 to i8
  %13511 = and i8 %13510, 1
  %13512 = xor i8 %13511, 1
  %13513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13512, i8* %13513, align 1, !tbaa !2448
  %13514 = xor i64 %13497, %13495
  %13515 = trunc i64 %13514 to i32
  %13516 = xor i32 %13515, %13501
  %13517 = lshr i32 %13516, 4
  %13518 = trunc i32 %13517 to i8
  %13519 = and i8 %13518, 1
  %13520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13519, i8* %13520, align 1, !tbaa !2449
  %13521 = icmp eq i32 %13501, 0
  %13522 = zext i1 %13521 to i8
  %13523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13522, i8* %13523, align 1, !tbaa !2450
  %13524 = lshr i32 %13501, 31
  %13525 = trunc i32 %13524 to i8
  %13526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13525, i8* %13526, align 1, !tbaa !2451
  %13527 = lshr i32 %13500, 31
  %13528 = lshr i32 %13496, 31
  %13529 = xor i32 %13524, %13527
  %13530 = xor i32 %13524, %13528
  %13531 = add nuw nsw i32 %13529, %13530
  %13532 = icmp eq i32 %13531, 2
  %13533 = zext i1 %13532 to i8
  %13534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13533, i8* %13534, align 1, !tbaa !2452
  %13535 = load i64, i64* %RDX
  %13536 = load i64, i64* %RBP
  %13537 = sub i64 %13536, 76
  %13538 = load i64, i64* %PC
  %13539 = add i64 %13538, 3
  store i64 %13539, i64* %PC
  %13540 = trunc i64 %13535 to i32
  %13541 = inttoptr i64 %13537 to i32*
  %13542 = load i32, i32* %13541
  %13543 = add i32 %13542, %13540
  %13544 = zext i32 %13543 to i64
  store i64 %13544, i64* %RDX, align 8, !tbaa !2428
  %13545 = icmp ult i32 %13543, %13540
  %13546 = icmp ult i32 %13543, %13542
  %13547 = or i1 %13545, %13546
  %13548 = zext i1 %13547 to i8
  %13549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13548, i8* %13549, align 1, !tbaa !2434
  %13550 = and i32 %13543, 255
  %13551 = call i32 @llvm.ctpop.i32(i32 %13550) #16
  %13552 = trunc i32 %13551 to i8
  %13553 = and i8 %13552, 1
  %13554 = xor i8 %13553, 1
  %13555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13554, i8* %13555, align 1, !tbaa !2448
  %13556 = xor i32 %13542, %13540
  %13557 = xor i32 %13556, %13543
  %13558 = lshr i32 %13557, 4
  %13559 = trunc i32 %13558 to i8
  %13560 = and i8 %13559, 1
  %13561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13560, i8* %13561, align 1, !tbaa !2449
  %13562 = icmp eq i32 %13543, 0
  %13563 = zext i1 %13562 to i8
  %13564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13563, i8* %13564, align 1, !tbaa !2450
  %13565 = lshr i32 %13543, 31
  %13566 = trunc i32 %13565 to i8
  %13567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13566, i8* %13567, align 1, !tbaa !2451
  %13568 = lshr i32 %13540, 31
  %13569 = lshr i32 %13542, 31
  %13570 = xor i32 %13565, %13568
  %13571 = xor i32 %13565, %13569
  %13572 = add nuw nsw i32 %13570, %13571
  %13573 = icmp eq i32 %13572, 2
  %13574 = zext i1 %13573 to i8
  %13575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13574, i8* %13575, align 1, !tbaa !2452
  %13576 = load i32, i32* %EDX
  %13577 = zext i32 %13576 to i64
  %13578 = load i64, i64* %PC
  %13579 = add i64 %13578, 3
  store i64 %13579, i64* %PC
  %13580 = shl i64 %13577, 32
  %13581 = ashr exact i64 %13580, 32
  store i64 %13581, i64* %RCX, align 8, !tbaa !2428
  %13582 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13583 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13584 = load i64, i64* %RAX
  %13585 = load i64, i64* %RCX
  %13586 = mul i64 %13585, 4
  %13587 = add i64 %13586, %13584
  %13588 = load i64, i64* %PC
  %13589 = add i64 %13588, 5
  store i64 %13589, i64* %PC
  %13590 = bitcast i8* %13583 to <2 x float>*
  %13591 = load <2 x float>, <2 x float>* %13590, align 1
  %13592 = getelementptr inbounds i8, i8* %13583, i64 8
  %13593 = bitcast i8* %13592 to <2 x i32>*
  %13594 = load <2 x i32>, <2 x i32>* %13593, align 1
  %13595 = inttoptr i64 %13587 to float*
  %13596 = load float, float* %13595
  %13597 = extractelement <2 x float> %13591, i32 0
  %13598 = fadd float %13597, %13596
  %13599 = bitcast i8* %13582 to float*
  store float %13598, float* %13599, align 1, !tbaa !2453
  %13600 = bitcast <2 x float> %13591 to <2 x i32>
  %13601 = extractelement <2 x i32> %13600, i32 1
  %13602 = getelementptr inbounds i8, i8* %13582, i64 4
  %13603 = bitcast i8* %13602 to i32*
  store i32 %13601, i32* %13603, align 1, !tbaa !2453
  %13604 = extractelement <2 x i32> %13594, i32 0
  %13605 = getelementptr inbounds i8, i8* %13582, i64 8
  %13606 = bitcast i8* %13605 to i32*
  store i32 %13604, i32* %13606, align 1, !tbaa !2453
  %13607 = extractelement <2 x i32> %13594, i32 1
  %13608 = getelementptr inbounds i8, i8* %13582, i64 12
  %13609 = bitcast i8* %13608 to i32*
  store i32 %13607, i32* %13609, align 1, !tbaa !2453
  %13610 = load i64, i64* %RBP
  %13611 = sub i64 %13610, 100
  %13612 = bitcast %union.vec128_t* %XMM0 to i8*
  %13613 = load i64, i64* %PC
  %13614 = add i64 %13613, 5
  store i64 %13614, i64* %PC
  %13615 = bitcast i8* %13612 to <2 x float>*
  %13616 = load <2 x float>, <2 x float>* %13615, align 1
  %13617 = extractelement <2 x float> %13616, i32 0
  %13618 = inttoptr i64 %13611 to float*
  store float %13617, float* %13618
  %13619 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13620 = load i64, i64* %RBP
  %13621 = sub i64 %13620, 100
  %13622 = load i64, i64* %PC
  %13623 = add i64 %13622, 5
  store i64 %13623, i64* %PC
  %13624 = inttoptr i64 %13621 to float*
  %13625 = load float, float* %13624
  %13626 = bitcast i8* %13619 to float*
  store float %13625, float* %13626, align 1, !tbaa !2453
  %13627 = getelementptr inbounds i8, i8* %13619, i64 4
  %13628 = bitcast i8* %13627 to float*
  store float 0.000000e+00, float* %13628, align 1, !tbaa !2453
  %13629 = getelementptr inbounds i8, i8* %13619, i64 8
  %13630 = bitcast i8* %13629 to float*
  store float 0.000000e+00, float* %13630, align 1, !tbaa !2453
  %13631 = getelementptr inbounds i8, i8* %13619, i64 12
  %13632 = bitcast i8* %13631 to float*
  store float 0.000000e+00, float* %13632, align 1, !tbaa !2453
  %13633 = load i64, i64* %RBP
  %13634 = sub i64 %13633, 16
  %13635 = load i64, i64* %PC
  %13636 = add i64 %13635, 4
  store i64 %13636, i64* %PC
  %13637 = inttoptr i64 %13634 to i64*
  %13638 = load i64, i64* %13637
  store i64 %13638, i64* %RAX, align 8, !tbaa !2428
  %13639 = load i64, i64* %RAX
  %13640 = load i64, i64* %PC
  %13641 = add i64 %13640, 3
  store i64 %13641, i64* %PC
  %13642 = inttoptr i64 %13639 to i64*
  %13643 = load i64, i64* %13642
  store i64 %13643, i64* %RAX, align 8, !tbaa !2428
  %13644 = load i64, i64* %RBP
  %13645 = sub i64 %13644, 16
  %13646 = load i64, i64* %PC
  %13647 = add i64 %13646, 4
  store i64 %13647, i64* %PC
  %13648 = inttoptr i64 %13645 to i64*
  %13649 = load i64, i64* %13648
  store i64 %13649, i64* %RCX, align 8, !tbaa !2428
  %13650 = load i64, i64* %RCX
  %13651 = add i64 %13650, 12
  %13652 = load i64, i64* %PC
  %13653 = add i64 %13652, 4
  store i64 %13653, i64* %PC
  %13654 = inttoptr i64 %13651 to i32*
  %13655 = load i32, i32* %13654
  %13656 = sext i32 %13655 to i64
  %13657 = mul nsw i64 %13656, 3
  %13658 = trunc i64 %13657 to i32
  %13659 = and i64 %13657, 4294967295
  store i64 %13659, i64* %RDX, align 8, !tbaa !2428
  %13660 = shl i64 %13657, 32
  %13661 = ashr exact i64 %13660, 32
  %13662 = icmp ne i64 %13661, %13657
  %13663 = zext i1 %13662 to i8
  %13664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13663, i8* %13664, align 1, !tbaa !2434
  %13665 = and i32 %13658, 255
  %13666 = call i32 @llvm.ctpop.i32(i32 %13665) #16
  %13667 = trunc i32 %13666 to i8
  %13668 = and i8 %13667, 1
  %13669 = xor i8 %13668, 1
  %13670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13669, i8* %13670, align 1, !tbaa !2448
  %13671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13671, align 1, !tbaa !2449
  %13672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13672, align 1, !tbaa !2450
  %13673 = lshr i32 %13658, 31
  %13674 = trunc i32 %13673 to i8
  %13675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13674, i8* %13675, align 1, !tbaa !2451
  %13676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13663, i8* %13676, align 1, !tbaa !2452
  %13677 = load i64, i64* %RBP
  %13678 = sub i64 %13677, 16
  %13679 = load i64, i64* %PC
  %13680 = add i64 %13679, 4
  store i64 %13680, i64* %PC
  %13681 = inttoptr i64 %13678 to i64*
  %13682 = load i64, i64* %13681
  store i64 %13682, i64* %RCX, align 8, !tbaa !2428
  %13683 = load i64, i64* %RDX
  %13684 = load i64, i64* %RCX
  %13685 = add i64 %13684, 16
  %13686 = load i64, i64* %PC
  %13687 = add i64 %13686, 4
  store i64 %13687, i64* %PC
  %13688 = inttoptr i64 %13685 to i32*
  %13689 = load i32, i32* %13688
  %13690 = shl i64 %13683, 32
  %13691 = ashr exact i64 %13690, 32
  %13692 = sext i32 %13689 to i64
  %13693 = mul nsw i64 %13692, %13691
  %13694 = trunc i64 %13693 to i32
  %13695 = and i64 %13693, 4294967295
  store i64 %13695, i64* %RDX, align 8, !tbaa !2428
  %13696 = shl i64 %13693, 32
  %13697 = ashr exact i64 %13696, 32
  %13698 = icmp ne i64 %13697, %13693
  %13699 = zext i1 %13698 to i8
  %13700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13699, i8* %13700, align 1, !tbaa !2434
  %13701 = and i32 %13694, 255
  %13702 = call i32 @llvm.ctpop.i32(i32 %13701) #16
  %13703 = trunc i32 %13702 to i8
  %13704 = and i8 %13703, 1
  %13705 = xor i8 %13704, 1
  %13706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13705, i8* %13706, align 1, !tbaa !2448
  %13707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13707, align 1, !tbaa !2449
  %13708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13708, align 1, !tbaa !2450
  %13709 = lshr i32 %13694, 31
  %13710 = trunc i32 %13709 to i8
  %13711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13710, i8* %13711, align 1, !tbaa !2451
  %13712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13699, i8* %13712, align 1, !tbaa !2452
  %13713 = load i64, i64* %RBP
  %13714 = sub i64 %13713, 16
  %13715 = load i64, i64* %PC
  %13716 = add i64 %13715, 4
  store i64 %13716, i64* %PC
  %13717 = inttoptr i64 %13714 to i64*
  %13718 = load i64, i64* %13717
  store i64 %13718, i64* %RCX, align 8, !tbaa !2428
  %13719 = load i64, i64* %RDX
  %13720 = load i64, i64* %RCX
  %13721 = add i64 %13720, 20
  %13722 = load i64, i64* %PC
  %13723 = add i64 %13722, 4
  store i64 %13723, i64* %PC
  %13724 = inttoptr i64 %13721 to i32*
  %13725 = load i32, i32* %13724
  %13726 = shl i64 %13719, 32
  %13727 = ashr exact i64 %13726, 32
  %13728 = sext i32 %13725 to i64
  %13729 = mul nsw i64 %13728, %13727
  %13730 = trunc i64 %13729 to i32
  %13731 = and i64 %13729, 4294967295
  store i64 %13731, i64* %RDX, align 8, !tbaa !2428
  %13732 = shl i64 %13729, 32
  %13733 = ashr exact i64 %13732, 32
  %13734 = icmp ne i64 %13733, %13729
  %13735 = zext i1 %13734 to i8
  %13736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13735, i8* %13736, align 1, !tbaa !2434
  %13737 = and i32 %13730, 255
  %13738 = call i32 @llvm.ctpop.i32(i32 %13737) #16
  %13739 = trunc i32 %13738 to i8
  %13740 = and i8 %13739, 1
  %13741 = xor i8 %13740, 1
  %13742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13741, i8* %13742, align 1, !tbaa !2448
  %13743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13743, align 1, !tbaa !2449
  %13744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13744, align 1, !tbaa !2450
  %13745 = lshr i32 %13730, 31
  %13746 = trunc i32 %13745 to i8
  %13747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13746, i8* %13747, align 1, !tbaa !2451
  %13748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13735, i8* %13748, align 1, !tbaa !2452
  %13749 = load i64, i64* %RBP
  %13750 = sub i64 %13749, 68
  %13751 = load i64, i64* %PC
  %13752 = add i64 %13751, 3
  store i64 %13752, i64* %PC
  %13753 = inttoptr i64 %13750 to i32*
  %13754 = load i32, i32* %13753
  %13755 = zext i32 %13754 to i64
  store i64 %13755, i64* %RSI, align 8, !tbaa !2428
  %13756 = load i64, i64* %RBP
  %13757 = sub i64 %13756, 16
  %13758 = load i64, i64* %PC
  %13759 = add i64 %13758, 4
  store i64 %13759, i64* %PC
  %13760 = inttoptr i64 %13757 to i64*
  %13761 = load i64, i64* %13760
  store i64 %13761, i64* %RCX, align 8, !tbaa !2428
  %13762 = load i64, i64* %RSI
  %13763 = load i64, i64* %RCX
  %13764 = add i64 %13763, 16
  %13765 = load i64, i64* %PC
  %13766 = add i64 %13765, 4
  store i64 %13766, i64* %PC
  %13767 = inttoptr i64 %13764 to i32*
  %13768 = load i32, i32* %13767
  %13769 = shl i64 %13762, 32
  %13770 = ashr exact i64 %13769, 32
  %13771 = sext i32 %13768 to i64
  %13772 = mul nsw i64 %13771, %13770
  %13773 = trunc i64 %13772 to i32
  %13774 = and i64 %13772, 4294967295
  store i64 %13774, i64* %RSI, align 8, !tbaa !2428
  %13775 = shl i64 %13772, 32
  %13776 = ashr exact i64 %13775, 32
  %13777 = icmp ne i64 %13776, %13772
  %13778 = zext i1 %13777 to i8
  %13779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13778, i8* %13779, align 1, !tbaa !2434
  %13780 = and i32 %13773, 255
  %13781 = call i32 @llvm.ctpop.i32(i32 %13780) #16
  %13782 = trunc i32 %13781 to i8
  %13783 = and i8 %13782, 1
  %13784 = xor i8 %13783, 1
  %13785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13784, i8* %13785, align 1, !tbaa !2448
  %13786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13786, align 1, !tbaa !2449
  %13787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13787, align 1, !tbaa !2450
  %13788 = lshr i32 %13773, 31
  %13789 = trunc i32 %13788 to i8
  %13790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13789, i8* %13790, align 1, !tbaa !2451
  %13791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13778, i8* %13791, align 1, !tbaa !2452
  %13792 = load i64, i64* %RBP
  %13793 = sub i64 %13792, 16
  %13794 = load i64, i64* %PC
  %13795 = add i64 %13794, 4
  store i64 %13795, i64* %PC
  %13796 = inttoptr i64 %13793 to i64*
  %13797 = load i64, i64* %13796
  store i64 %13797, i64* %RCX, align 8, !tbaa !2428
  %13798 = load i64, i64* %RSI
  %13799 = load i64, i64* %RCX
  %13800 = add i64 %13799, 20
  %13801 = load i64, i64* %PC
  %13802 = add i64 %13801, 4
  store i64 %13802, i64* %PC
  %13803 = inttoptr i64 %13800 to i32*
  %13804 = load i32, i32* %13803
  %13805 = shl i64 %13798, 32
  %13806 = ashr exact i64 %13805, 32
  %13807 = sext i32 %13804 to i64
  %13808 = mul nsw i64 %13807, %13806
  %13809 = trunc i64 %13808 to i32
  %13810 = and i64 %13808, 4294967295
  store i64 %13810, i64* %RSI, align 8, !tbaa !2428
  %13811 = shl i64 %13808, 32
  %13812 = ashr exact i64 %13811, 32
  %13813 = icmp ne i64 %13812, %13808
  %13814 = zext i1 %13813 to i8
  %13815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13814, i8* %13815, align 1, !tbaa !2434
  %13816 = and i32 %13809, 255
  %13817 = call i32 @llvm.ctpop.i32(i32 %13816) #16
  %13818 = trunc i32 %13817 to i8
  %13819 = and i8 %13818, 1
  %13820 = xor i8 %13819, 1
  %13821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13820, i8* %13821, align 1, !tbaa !2448
  %13822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13822, align 1, !tbaa !2449
  %13823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13823, align 1, !tbaa !2450
  %13824 = lshr i32 %13809, 31
  %13825 = trunc i32 %13824 to i8
  %13826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13825, i8* %13826, align 1, !tbaa !2451
  %13827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13814, i8* %13827, align 1, !tbaa !2452
  %13828 = load i64, i64* %RDX
  %13829 = load i32, i32* %ESI
  %13830 = zext i32 %13829 to i64
  %13831 = load i64, i64* %PC
  %13832 = add i64 %13831, 2
  store i64 %13832, i64* %PC
  %13833 = trunc i64 %13828 to i32
  %13834 = add i32 %13829, %13833
  %13835 = zext i32 %13834 to i64
  store i64 %13835, i64* %RDX, align 8, !tbaa !2428
  %13836 = icmp ult i32 %13834, %13833
  %13837 = icmp ult i32 %13834, %13829
  %13838 = or i1 %13836, %13837
  %13839 = zext i1 %13838 to i8
  %13840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13839, i8* %13840, align 1, !tbaa !2434
  %13841 = and i32 %13834, 255
  %13842 = call i32 @llvm.ctpop.i32(i32 %13841) #16
  %13843 = trunc i32 %13842 to i8
  %13844 = and i8 %13843, 1
  %13845 = xor i8 %13844, 1
  %13846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13845, i8* %13846, align 1, !tbaa !2448
  %13847 = xor i64 %13830, %13828
  %13848 = trunc i64 %13847 to i32
  %13849 = xor i32 %13848, %13834
  %13850 = lshr i32 %13849, 4
  %13851 = trunc i32 %13850 to i8
  %13852 = and i8 %13851, 1
  %13853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13852, i8* %13853, align 1, !tbaa !2449
  %13854 = icmp eq i32 %13834, 0
  %13855 = zext i1 %13854 to i8
  %13856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13855, i8* %13856, align 1, !tbaa !2450
  %13857 = lshr i32 %13834, 31
  %13858 = trunc i32 %13857 to i8
  %13859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13858, i8* %13859, align 1, !tbaa !2451
  %13860 = lshr i32 %13833, 31
  %13861 = lshr i32 %13829, 31
  %13862 = xor i32 %13857, %13860
  %13863 = xor i32 %13857, %13861
  %13864 = add nuw nsw i32 %13862, %13863
  %13865 = icmp eq i32 %13864, 2
  %13866 = zext i1 %13865 to i8
  %13867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13866, i8* %13867, align 1, !tbaa !2452
  %13868 = load i64, i64* %RBP
  %13869 = sub i64 %13868, 72
  %13870 = load i64, i64* %PC
  %13871 = add i64 %13870, 3
  store i64 %13871, i64* %PC
  %13872 = inttoptr i64 %13869 to i32*
  %13873 = load i32, i32* %13872
  %13874 = zext i32 %13873 to i64
  store i64 %13874, i64* %RSI, align 8, !tbaa !2428
  %13875 = load i64, i64* %RBP
  %13876 = sub i64 %13875, 16
  %13877 = load i64, i64* %PC
  %13878 = add i64 %13877, 4
  store i64 %13878, i64* %PC
  %13879 = inttoptr i64 %13876 to i64*
  %13880 = load i64, i64* %13879
  store i64 %13880, i64* %RCX, align 8, !tbaa !2428
  %13881 = load i64, i64* %RSI
  %13882 = load i64, i64* %RCX
  %13883 = add i64 %13882, 20
  %13884 = load i64, i64* %PC
  %13885 = add i64 %13884, 4
  store i64 %13885, i64* %PC
  %13886 = inttoptr i64 %13883 to i32*
  %13887 = load i32, i32* %13886
  %13888 = shl i64 %13881, 32
  %13889 = ashr exact i64 %13888, 32
  %13890 = sext i32 %13887 to i64
  %13891 = mul nsw i64 %13890, %13889
  %13892 = trunc i64 %13891 to i32
  %13893 = and i64 %13891, 4294967295
  store i64 %13893, i64* %RSI, align 8, !tbaa !2428
  %13894 = shl i64 %13891, 32
  %13895 = ashr exact i64 %13894, 32
  %13896 = icmp ne i64 %13895, %13891
  %13897 = zext i1 %13896 to i8
  %13898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13897, i8* %13898, align 1, !tbaa !2434
  %13899 = and i32 %13892, 255
  %13900 = call i32 @llvm.ctpop.i32(i32 %13899) #16
  %13901 = trunc i32 %13900 to i8
  %13902 = and i8 %13901, 1
  %13903 = xor i8 %13902, 1
  %13904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13903, i8* %13904, align 1, !tbaa !2448
  %13905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13905, align 1, !tbaa !2449
  %13906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %13906, align 1, !tbaa !2450
  %13907 = lshr i32 %13892, 31
  %13908 = trunc i32 %13907 to i8
  %13909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13908, i8* %13909, align 1, !tbaa !2451
  %13910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13897, i8* %13910, align 1, !tbaa !2452
  %13911 = load i64, i64* %RDX
  %13912 = load i32, i32* %ESI
  %13913 = zext i32 %13912 to i64
  %13914 = load i64, i64* %PC
  %13915 = add i64 %13914, 2
  store i64 %13915, i64* %PC
  %13916 = trunc i64 %13911 to i32
  %13917 = add i32 %13912, %13916
  %13918 = zext i32 %13917 to i64
  store i64 %13918, i64* %RDX, align 8, !tbaa !2428
  %13919 = icmp ult i32 %13917, %13916
  %13920 = icmp ult i32 %13917, %13912
  %13921 = or i1 %13919, %13920
  %13922 = zext i1 %13921 to i8
  %13923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13922, i8* %13923, align 1, !tbaa !2434
  %13924 = and i32 %13917, 255
  %13925 = call i32 @llvm.ctpop.i32(i32 %13924) #16
  %13926 = trunc i32 %13925 to i8
  %13927 = and i8 %13926, 1
  %13928 = xor i8 %13927, 1
  %13929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13928, i8* %13929, align 1, !tbaa !2448
  %13930 = xor i64 %13913, %13911
  %13931 = trunc i64 %13930 to i32
  %13932 = xor i32 %13931, %13917
  %13933 = lshr i32 %13932, 4
  %13934 = trunc i32 %13933 to i8
  %13935 = and i8 %13934, 1
  %13936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13935, i8* %13936, align 1, !tbaa !2449
  %13937 = icmp eq i32 %13917, 0
  %13938 = zext i1 %13937 to i8
  %13939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13938, i8* %13939, align 1, !tbaa !2450
  %13940 = lshr i32 %13917, 31
  %13941 = trunc i32 %13940 to i8
  %13942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13941, i8* %13942, align 1, !tbaa !2451
  %13943 = lshr i32 %13916, 31
  %13944 = lshr i32 %13912, 31
  %13945 = xor i32 %13940, %13943
  %13946 = xor i32 %13940, %13944
  %13947 = add nuw nsw i32 %13945, %13946
  %13948 = icmp eq i32 %13947, 2
  %13949 = zext i1 %13948 to i8
  %13950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13949, i8* %13950, align 1, !tbaa !2452
  %13951 = load i64, i64* %RDX
  %13952 = load i64, i64* %RBP
  %13953 = sub i64 %13952, 76
  %13954 = load i64, i64* %PC
  %13955 = add i64 %13954, 3
  store i64 %13955, i64* %PC
  %13956 = trunc i64 %13951 to i32
  %13957 = inttoptr i64 %13953 to i32*
  %13958 = load i32, i32* %13957
  %13959 = add i32 %13958, %13956
  %13960 = zext i32 %13959 to i64
  store i64 %13960, i64* %RDX, align 8, !tbaa !2428
  %13961 = icmp ult i32 %13959, %13956
  %13962 = icmp ult i32 %13959, %13958
  %13963 = or i1 %13961, %13962
  %13964 = zext i1 %13963 to i8
  %13965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13964, i8* %13965, align 1, !tbaa !2434
  %13966 = and i32 %13959, 255
  %13967 = call i32 @llvm.ctpop.i32(i32 %13966) #16
  %13968 = trunc i32 %13967 to i8
  %13969 = and i8 %13968, 1
  %13970 = xor i8 %13969, 1
  %13971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13970, i8* %13971, align 1, !tbaa !2448
  %13972 = xor i32 %13958, %13956
  %13973 = xor i32 %13972, %13959
  %13974 = lshr i32 %13973, 4
  %13975 = trunc i32 %13974 to i8
  %13976 = and i8 %13975, 1
  %13977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13976, i8* %13977, align 1, !tbaa !2449
  %13978 = icmp eq i32 %13959, 0
  %13979 = zext i1 %13978 to i8
  %13980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13979, i8* %13980, align 1, !tbaa !2450
  %13981 = lshr i32 %13959, 31
  %13982 = trunc i32 %13981 to i8
  %13983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13982, i8* %13983, align 1, !tbaa !2451
  %13984 = lshr i32 %13956, 31
  %13985 = lshr i32 %13958, 31
  %13986 = xor i32 %13981, %13984
  %13987 = xor i32 %13981, %13985
  %13988 = add nuw nsw i32 %13986, %13987
  %13989 = icmp eq i32 %13988, 2
  %13990 = zext i1 %13989 to i8
  %13991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13990, i8* %13991, align 1, !tbaa !2452
  %13992 = load i32, i32* %EDX
  %13993 = zext i32 %13992 to i64
  %13994 = load i64, i64* %PC
  %13995 = add i64 %13994, 3
  store i64 %13995, i64* %PC
  %13996 = shl i64 %13993, 32
  %13997 = ashr exact i64 %13996, 32
  store i64 %13997, i64* %RCX, align 8, !tbaa !2428
  %13998 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13999 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14000 = load i64, i64* %RAX
  %14001 = load i64, i64* %RCX
  %14002 = mul i64 %14001, 4
  %14003 = add i64 %14002, %14000
  %14004 = load i64, i64* %PC
  %14005 = add i64 %14004, 5
  store i64 %14005, i64* %PC
  %14006 = bitcast i8* %13999 to <2 x float>*
  %14007 = load <2 x float>, <2 x float>* %14006, align 1
  %14008 = getelementptr inbounds i8, i8* %13999, i64 8
  %14009 = bitcast i8* %14008 to <2 x i32>*
  %14010 = load <2 x i32>, <2 x i32>* %14009, align 1
  %14011 = inttoptr i64 %14003 to float*
  %14012 = load float, float* %14011
  %14013 = extractelement <2 x float> %14007, i32 0
  %14014 = fmul float %14013, %14012
  %14015 = bitcast i8* %13998 to float*
  store float %14014, float* %14015, align 1, !tbaa !2453
  %14016 = bitcast <2 x float> %14007 to <2 x i32>
  %14017 = extractelement <2 x i32> %14016, i32 1
  %14018 = getelementptr inbounds i8, i8* %13998, i64 4
  %14019 = bitcast i8* %14018 to i32*
  store i32 %14017, i32* %14019, align 1, !tbaa !2453
  %14020 = extractelement <2 x i32> %14010, i32 0
  %14021 = getelementptr inbounds i8, i8* %13998, i64 8
  %14022 = bitcast i8* %14021 to i32*
  store i32 %14020, i32* %14022, align 1, !tbaa !2453
  %14023 = extractelement <2 x i32> %14010, i32 1
  %14024 = getelementptr inbounds i8, i8* %13998, i64 12
  %14025 = bitcast i8* %14024 to i32*
  store i32 %14023, i32* %14025, align 1, !tbaa !2453
  %14026 = load i64, i64* %RBP
  %14027 = sub i64 %14026, 40
  %14028 = load i64, i64* %PC
  %14029 = add i64 %14028, 4
  store i64 %14029, i64* %PC
  %14030 = inttoptr i64 %14027 to i64*
  %14031 = load i64, i64* %14030
  store i64 %14031, i64* %RAX, align 8, !tbaa !2428
  %14032 = load i64, i64* %RAX
  %14033 = load i64, i64* %PC
  %14034 = add i64 %14033, 3
  store i64 %14034, i64* %PC
  %14035 = inttoptr i64 %14032 to i64*
  %14036 = load i64, i64* %14035
  store i64 %14036, i64* %RAX, align 8, !tbaa !2428
  %14037 = load i64, i64* %RBP
  %14038 = sub i64 %14037, 40
  %14039 = load i64, i64* %PC
  %14040 = add i64 %14039, 4
  store i64 %14040, i64* %PC
  %14041 = inttoptr i64 %14038 to i64*
  %14042 = load i64, i64* %14041
  store i64 %14042, i64* %RCX, align 8, !tbaa !2428
  %14043 = load i64, i64* %RCX
  %14044 = add i64 %14043, 12
  %14045 = load i64, i64* %PC
  %14046 = add i64 %14045, 4
  store i64 %14046, i64* %PC
  %14047 = inttoptr i64 %14044 to i32*
  %14048 = load i32, i32* %14047
  %14049 = sext i32 %14048 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14050, align 1, !tbaa !2434
  %14051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14051, align 1, !tbaa !2448
  %14052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14052, align 1, !tbaa !2449
  %14053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14053, align 1, !tbaa !2450
  %14054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14054, align 1, !tbaa !2451
  %14055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14055, align 1, !tbaa !2452
  %14056 = load i64, i64* %RBP
  %14057 = sub i64 %14056, 40
  %14058 = load i64, i64* %PC
  %14059 = add i64 %14058, 4
  store i64 %14059, i64* %PC
  %14060 = inttoptr i64 %14057 to i64*
  %14061 = load i64, i64* %14060
  store i64 %14061, i64* %RCX, align 8, !tbaa !2428
  %14062 = load i64, i64* %RDX
  %14063 = load i64, i64* %RCX
  %14064 = add i64 %14063, 16
  %14065 = load i64, i64* %PC
  %14066 = add i64 %14065, 4
  store i64 %14066, i64* %PC
  %14067 = inttoptr i64 %14064 to i32*
  %14068 = load i32, i32* %14067
  %14069 = shl i64 %14062, 32
  %14070 = ashr exact i64 %14069, 32
  %14071 = sext i32 %14068 to i64
  %14072 = mul nsw i64 %14071, %14070
  %14073 = trunc i64 %14072 to i32
  %14074 = and i64 %14072, 4294967295
  store i64 %14074, i64* %RDX, align 8, !tbaa !2428
  %14075 = shl i64 %14072, 32
  %14076 = ashr exact i64 %14075, 32
  %14077 = icmp ne i64 %14076, %14072
  %14078 = zext i1 %14077 to i8
  %14079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14078, i8* %14079, align 1, !tbaa !2434
  %14080 = and i32 %14073, 255
  %14081 = call i32 @llvm.ctpop.i32(i32 %14080) #16
  %14082 = trunc i32 %14081 to i8
  %14083 = and i8 %14082, 1
  %14084 = xor i8 %14083, 1
  %14085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14084, i8* %14085, align 1, !tbaa !2448
  %14086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14086, align 1, !tbaa !2449
  %14087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14087, align 1, !tbaa !2450
  %14088 = lshr i32 %14073, 31
  %14089 = trunc i32 %14088 to i8
  %14090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14089, i8* %14090, align 1, !tbaa !2451
  %14091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14078, i8* %14091, align 1, !tbaa !2452
  %14092 = load i64, i64* %RBP
  %14093 = sub i64 %14092, 40
  %14094 = load i64, i64* %PC
  %14095 = add i64 %14094, 4
  store i64 %14095, i64* %PC
  %14096 = inttoptr i64 %14093 to i64*
  %14097 = load i64, i64* %14096
  store i64 %14097, i64* %RCX, align 8, !tbaa !2428
  %14098 = load i64, i64* %RDX
  %14099 = load i64, i64* %RCX
  %14100 = add i64 %14099, 20
  %14101 = load i64, i64* %PC
  %14102 = add i64 %14101, 4
  store i64 %14102, i64* %PC
  %14103 = inttoptr i64 %14100 to i32*
  %14104 = load i32, i32* %14103
  %14105 = shl i64 %14098, 32
  %14106 = ashr exact i64 %14105, 32
  %14107 = sext i32 %14104 to i64
  %14108 = mul nsw i64 %14107, %14106
  %14109 = trunc i64 %14108 to i32
  %14110 = and i64 %14108, 4294967295
  store i64 %14110, i64* %RDX, align 8, !tbaa !2428
  %14111 = shl i64 %14108, 32
  %14112 = ashr exact i64 %14111, 32
  %14113 = icmp ne i64 %14112, %14108
  %14114 = zext i1 %14113 to i8
  %14115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14114, i8* %14115, align 1, !tbaa !2434
  %14116 = and i32 %14109, 255
  %14117 = call i32 @llvm.ctpop.i32(i32 %14116) #16
  %14118 = trunc i32 %14117 to i8
  %14119 = and i8 %14118, 1
  %14120 = xor i8 %14119, 1
  %14121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14120, i8* %14121, align 1, !tbaa !2448
  %14122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14122, align 1, !tbaa !2449
  %14123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14123, align 1, !tbaa !2450
  %14124 = lshr i32 %14109, 31
  %14125 = trunc i32 %14124 to i8
  %14126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14125, i8* %14126, align 1, !tbaa !2451
  %14127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14114, i8* %14127, align 1, !tbaa !2452
  %14128 = load i64, i64* %RBP
  %14129 = sub i64 %14128, 68
  %14130 = load i64, i64* %PC
  %14131 = add i64 %14130, 3
  store i64 %14131, i64* %PC
  %14132 = inttoptr i64 %14129 to i32*
  %14133 = load i32, i32* %14132
  %14134 = zext i32 %14133 to i64
  store i64 %14134, i64* %RSI, align 8, !tbaa !2428
  %14135 = load i64, i64* %RBP
  %14136 = sub i64 %14135, 40
  %14137 = load i64, i64* %PC
  %14138 = add i64 %14137, 4
  store i64 %14138, i64* %PC
  %14139 = inttoptr i64 %14136 to i64*
  %14140 = load i64, i64* %14139
  store i64 %14140, i64* %RCX, align 8, !tbaa !2428
  %14141 = load i64, i64* %RSI
  %14142 = load i64, i64* %RCX
  %14143 = add i64 %14142, 16
  %14144 = load i64, i64* %PC
  %14145 = add i64 %14144, 4
  store i64 %14145, i64* %PC
  %14146 = inttoptr i64 %14143 to i32*
  %14147 = load i32, i32* %14146
  %14148 = shl i64 %14141, 32
  %14149 = ashr exact i64 %14148, 32
  %14150 = sext i32 %14147 to i64
  %14151 = mul nsw i64 %14150, %14149
  %14152 = trunc i64 %14151 to i32
  %14153 = and i64 %14151, 4294967295
  store i64 %14153, i64* %RSI, align 8, !tbaa !2428
  %14154 = shl i64 %14151, 32
  %14155 = ashr exact i64 %14154, 32
  %14156 = icmp ne i64 %14155, %14151
  %14157 = zext i1 %14156 to i8
  %14158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14157, i8* %14158, align 1, !tbaa !2434
  %14159 = and i32 %14152, 255
  %14160 = call i32 @llvm.ctpop.i32(i32 %14159) #16
  %14161 = trunc i32 %14160 to i8
  %14162 = and i8 %14161, 1
  %14163 = xor i8 %14162, 1
  %14164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14163, i8* %14164, align 1, !tbaa !2448
  %14165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14165, align 1, !tbaa !2449
  %14166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14166, align 1, !tbaa !2450
  %14167 = lshr i32 %14152, 31
  %14168 = trunc i32 %14167 to i8
  %14169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14168, i8* %14169, align 1, !tbaa !2451
  %14170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14157, i8* %14170, align 1, !tbaa !2452
  %14171 = load i64, i64* %RBP
  %14172 = sub i64 %14171, 40
  %14173 = load i64, i64* %PC
  %14174 = add i64 %14173, 4
  store i64 %14174, i64* %PC
  %14175 = inttoptr i64 %14172 to i64*
  %14176 = load i64, i64* %14175
  store i64 %14176, i64* %RCX, align 8, !tbaa !2428
  %14177 = load i64, i64* %RSI
  %14178 = load i64, i64* %RCX
  %14179 = add i64 %14178, 20
  %14180 = load i64, i64* %PC
  %14181 = add i64 %14180, 4
  store i64 %14181, i64* %PC
  %14182 = inttoptr i64 %14179 to i32*
  %14183 = load i32, i32* %14182
  %14184 = shl i64 %14177, 32
  %14185 = ashr exact i64 %14184, 32
  %14186 = sext i32 %14183 to i64
  %14187 = mul nsw i64 %14186, %14185
  %14188 = trunc i64 %14187 to i32
  %14189 = and i64 %14187, 4294967295
  store i64 %14189, i64* %RSI, align 8, !tbaa !2428
  %14190 = shl i64 %14187, 32
  %14191 = ashr exact i64 %14190, 32
  %14192 = icmp ne i64 %14191, %14187
  %14193 = zext i1 %14192 to i8
  %14194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14193, i8* %14194, align 1, !tbaa !2434
  %14195 = and i32 %14188, 255
  %14196 = call i32 @llvm.ctpop.i32(i32 %14195) #16
  %14197 = trunc i32 %14196 to i8
  %14198 = and i8 %14197, 1
  %14199 = xor i8 %14198, 1
  %14200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14199, i8* %14200, align 1, !tbaa !2448
  %14201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14201, align 1, !tbaa !2449
  %14202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14202, align 1, !tbaa !2450
  %14203 = lshr i32 %14188, 31
  %14204 = trunc i32 %14203 to i8
  %14205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14204, i8* %14205, align 1, !tbaa !2451
  %14206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14193, i8* %14206, align 1, !tbaa !2452
  %14207 = load i64, i64* %RDX
  %14208 = load i32, i32* %ESI
  %14209 = zext i32 %14208 to i64
  %14210 = load i64, i64* %PC
  %14211 = add i64 %14210, 2
  store i64 %14211, i64* %PC
  %14212 = trunc i64 %14207 to i32
  %14213 = add i32 %14208, %14212
  %14214 = zext i32 %14213 to i64
  store i64 %14214, i64* %RDX, align 8, !tbaa !2428
  %14215 = icmp ult i32 %14213, %14212
  %14216 = icmp ult i32 %14213, %14208
  %14217 = or i1 %14215, %14216
  %14218 = zext i1 %14217 to i8
  %14219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14218, i8* %14219, align 1, !tbaa !2434
  %14220 = and i32 %14213, 255
  %14221 = call i32 @llvm.ctpop.i32(i32 %14220) #16
  %14222 = trunc i32 %14221 to i8
  %14223 = and i8 %14222, 1
  %14224 = xor i8 %14223, 1
  %14225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14224, i8* %14225, align 1, !tbaa !2448
  %14226 = xor i64 %14209, %14207
  %14227 = trunc i64 %14226 to i32
  %14228 = xor i32 %14227, %14213
  %14229 = lshr i32 %14228, 4
  %14230 = trunc i32 %14229 to i8
  %14231 = and i8 %14230, 1
  %14232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14231, i8* %14232, align 1, !tbaa !2449
  %14233 = icmp eq i32 %14213, 0
  %14234 = zext i1 %14233 to i8
  %14235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14234, i8* %14235, align 1, !tbaa !2450
  %14236 = lshr i32 %14213, 31
  %14237 = trunc i32 %14236 to i8
  %14238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14237, i8* %14238, align 1, !tbaa !2451
  %14239 = lshr i32 %14212, 31
  %14240 = lshr i32 %14208, 31
  %14241 = xor i32 %14236, %14239
  %14242 = xor i32 %14236, %14240
  %14243 = add nuw nsw i32 %14241, %14242
  %14244 = icmp eq i32 %14243, 2
  %14245 = zext i1 %14244 to i8
  %14246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14245, i8* %14246, align 1, !tbaa !2452
  %14247 = load i64, i64* %RBP
  %14248 = sub i64 %14247, 72
  %14249 = load i64, i64* %PC
  %14250 = add i64 %14249, 3
  store i64 %14250, i64* %PC
  %14251 = inttoptr i64 %14248 to i32*
  %14252 = load i32, i32* %14251
  %14253 = zext i32 %14252 to i64
  store i64 %14253, i64* %RSI, align 8, !tbaa !2428
  %14254 = load i64, i64* %RBP
  %14255 = sub i64 %14254, 40
  %14256 = load i64, i64* %PC
  %14257 = add i64 %14256, 4
  store i64 %14257, i64* %PC
  %14258 = inttoptr i64 %14255 to i64*
  %14259 = load i64, i64* %14258
  store i64 %14259, i64* %RCX, align 8, !tbaa !2428
  %14260 = load i64, i64* %RSI
  %14261 = load i64, i64* %RCX
  %14262 = add i64 %14261, 20
  %14263 = load i64, i64* %PC
  %14264 = add i64 %14263, 4
  store i64 %14264, i64* %PC
  %14265 = inttoptr i64 %14262 to i32*
  %14266 = load i32, i32* %14265
  %14267 = shl i64 %14260, 32
  %14268 = ashr exact i64 %14267, 32
  %14269 = sext i32 %14266 to i64
  %14270 = mul nsw i64 %14269, %14268
  %14271 = trunc i64 %14270 to i32
  %14272 = and i64 %14270, 4294967295
  store i64 %14272, i64* %RSI, align 8, !tbaa !2428
  %14273 = shl i64 %14270, 32
  %14274 = ashr exact i64 %14273, 32
  %14275 = icmp ne i64 %14274, %14270
  %14276 = zext i1 %14275 to i8
  %14277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14276, i8* %14277, align 1, !tbaa !2434
  %14278 = and i32 %14271, 255
  %14279 = call i32 @llvm.ctpop.i32(i32 %14278) #16
  %14280 = trunc i32 %14279 to i8
  %14281 = and i8 %14280, 1
  %14282 = xor i8 %14281, 1
  %14283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14282, i8* %14283, align 1, !tbaa !2448
  %14284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14284, align 1, !tbaa !2449
  %14285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14285, align 1, !tbaa !2450
  %14286 = lshr i32 %14271, 31
  %14287 = trunc i32 %14286 to i8
  %14288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14287, i8* %14288, align 1, !tbaa !2451
  %14289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14276, i8* %14289, align 1, !tbaa !2452
  %14290 = load i64, i64* %RDX
  %14291 = load i32, i32* %ESI
  %14292 = zext i32 %14291 to i64
  %14293 = load i64, i64* %PC
  %14294 = add i64 %14293, 2
  store i64 %14294, i64* %PC
  %14295 = trunc i64 %14290 to i32
  %14296 = add i32 %14291, %14295
  %14297 = zext i32 %14296 to i64
  store i64 %14297, i64* %RDX, align 8, !tbaa !2428
  %14298 = icmp ult i32 %14296, %14295
  %14299 = icmp ult i32 %14296, %14291
  %14300 = or i1 %14298, %14299
  %14301 = zext i1 %14300 to i8
  %14302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14301, i8* %14302, align 1, !tbaa !2434
  %14303 = and i32 %14296, 255
  %14304 = call i32 @llvm.ctpop.i32(i32 %14303) #16
  %14305 = trunc i32 %14304 to i8
  %14306 = and i8 %14305, 1
  %14307 = xor i8 %14306, 1
  %14308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14307, i8* %14308, align 1, !tbaa !2448
  %14309 = xor i64 %14292, %14290
  %14310 = trunc i64 %14309 to i32
  %14311 = xor i32 %14310, %14296
  %14312 = lshr i32 %14311, 4
  %14313 = trunc i32 %14312 to i8
  %14314 = and i8 %14313, 1
  %14315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14314, i8* %14315, align 1, !tbaa !2449
  %14316 = icmp eq i32 %14296, 0
  %14317 = zext i1 %14316 to i8
  %14318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14317, i8* %14318, align 1, !tbaa !2450
  %14319 = lshr i32 %14296, 31
  %14320 = trunc i32 %14319 to i8
  %14321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14320, i8* %14321, align 1, !tbaa !2451
  %14322 = lshr i32 %14295, 31
  %14323 = lshr i32 %14291, 31
  %14324 = xor i32 %14319, %14322
  %14325 = xor i32 %14319, %14323
  %14326 = add nuw nsw i32 %14324, %14325
  %14327 = icmp eq i32 %14326, 2
  %14328 = zext i1 %14327 to i8
  %14329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14328, i8* %14329, align 1, !tbaa !2452
  %14330 = load i64, i64* %RDX
  %14331 = load i64, i64* %RBP
  %14332 = sub i64 %14331, 76
  %14333 = load i64, i64* %PC
  %14334 = add i64 %14333, 3
  store i64 %14334, i64* %PC
  %14335 = trunc i64 %14330 to i32
  %14336 = inttoptr i64 %14332 to i32*
  %14337 = load i32, i32* %14336
  %14338 = add i32 %14337, %14335
  %14339 = zext i32 %14338 to i64
  store i64 %14339, i64* %RDX, align 8, !tbaa !2428
  %14340 = icmp ult i32 %14338, %14335
  %14341 = icmp ult i32 %14338, %14337
  %14342 = or i1 %14340, %14341
  %14343 = zext i1 %14342 to i8
  %14344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14343, i8* %14344, align 1, !tbaa !2434
  %14345 = and i32 %14338, 255
  %14346 = call i32 @llvm.ctpop.i32(i32 %14345) #16
  %14347 = trunc i32 %14346 to i8
  %14348 = and i8 %14347, 1
  %14349 = xor i8 %14348, 1
  %14350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14349, i8* %14350, align 1, !tbaa !2448
  %14351 = xor i32 %14337, %14335
  %14352 = xor i32 %14351, %14338
  %14353 = lshr i32 %14352, 4
  %14354 = trunc i32 %14353 to i8
  %14355 = and i8 %14354, 1
  %14356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14355, i8* %14356, align 1, !tbaa !2449
  %14357 = icmp eq i32 %14338, 0
  %14358 = zext i1 %14357 to i8
  %14359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14358, i8* %14359, align 1, !tbaa !2450
  %14360 = lshr i32 %14338, 31
  %14361 = trunc i32 %14360 to i8
  %14362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14361, i8* %14362, align 1, !tbaa !2451
  %14363 = lshr i32 %14335, 31
  %14364 = lshr i32 %14337, 31
  %14365 = xor i32 %14360, %14363
  %14366 = xor i32 %14360, %14364
  %14367 = add nuw nsw i32 %14365, %14366
  %14368 = icmp eq i32 %14367, 2
  %14369 = zext i1 %14368 to i8
  %14370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14369, i8* %14370, align 1, !tbaa !2452
  %14371 = load i32, i32* %EDX
  %14372 = zext i32 %14371 to i64
  %14373 = load i64, i64* %PC
  %14374 = add i64 %14373, 3
  store i64 %14374, i64* %PC
  %14375 = shl i64 %14372, 32
  %14376 = ashr exact i64 %14375, 32
  store i64 %14376, i64* %RCX, align 8, !tbaa !2428
  %14377 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14378 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14379 = load i64, i64* %RAX
  %14380 = load i64, i64* %RCX
  %14381 = mul i64 %14380, 4
  %14382 = add i64 %14381, %14379
  %14383 = load i64, i64* %PC
  %14384 = add i64 %14383, 5
  store i64 %14384, i64* %PC
  %14385 = bitcast i8* %14378 to <2 x float>*
  %14386 = load <2 x float>, <2 x float>* %14385, align 1
  %14387 = getelementptr inbounds i8, i8* %14378, i64 8
  %14388 = bitcast i8* %14387 to <2 x i32>*
  %14389 = load <2 x i32>, <2 x i32>* %14388, align 1
  %14390 = inttoptr i64 %14382 to float*
  %14391 = load float, float* %14390
  %14392 = extractelement <2 x float> %14386, i32 0
  %14393 = fsub float %14392, %14391
  %14394 = bitcast i8* %14377 to float*
  store float %14393, float* %14394, align 1, !tbaa !2453
  %14395 = bitcast <2 x float> %14386 to <2 x i32>
  %14396 = extractelement <2 x i32> %14395, i32 1
  %14397 = getelementptr inbounds i8, i8* %14377, i64 4
  %14398 = bitcast i8* %14397 to i32*
  store i32 %14396, i32* %14398, align 1, !tbaa !2453
  %14399 = extractelement <2 x i32> %14389, i32 0
  %14400 = getelementptr inbounds i8, i8* %14377, i64 8
  %14401 = bitcast i8* %14400 to i32*
  store i32 %14399, i32* %14401, align 1, !tbaa !2453
  %14402 = extractelement <2 x i32> %14389, i32 1
  %14403 = getelementptr inbounds i8, i8* %14377, i64 12
  %14404 = bitcast i8* %14403 to i32*
  store i32 %14402, i32* %14404, align 1, !tbaa !2453
  %14405 = load i64, i64* %RBP
  %14406 = sub i64 %14405, 48
  %14407 = load i64, i64* %PC
  %14408 = add i64 %14407, 4
  store i64 %14408, i64* %PC
  %14409 = inttoptr i64 %14406 to i64*
  %14410 = load i64, i64* %14409
  store i64 %14410, i64* %RAX, align 8, !tbaa !2428
  %14411 = load i64, i64* %RAX
  %14412 = load i64, i64* %PC
  %14413 = add i64 %14412, 3
  store i64 %14413, i64* %PC
  %14414 = inttoptr i64 %14411 to i64*
  %14415 = load i64, i64* %14414
  store i64 %14415, i64* %RAX, align 8, !tbaa !2428
  %14416 = load i64, i64* %RBP
  %14417 = sub i64 %14416, 48
  %14418 = load i64, i64* %PC
  %14419 = add i64 %14418, 4
  store i64 %14419, i64* %PC
  %14420 = inttoptr i64 %14417 to i64*
  %14421 = load i64, i64* %14420
  store i64 %14421, i64* %RCX, align 8, !tbaa !2428
  %14422 = load i64, i64* %RCX
  %14423 = add i64 %14422, 12
  %14424 = load i64, i64* %PC
  %14425 = add i64 %14424, 4
  store i64 %14425, i64* %PC
  %14426 = inttoptr i64 %14423 to i32*
  %14427 = load i32, i32* %14426
  %14428 = sext i32 %14427 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14429, align 1, !tbaa !2434
  %14430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14430, align 1, !tbaa !2448
  %14431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14431, align 1, !tbaa !2449
  %14432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14432, align 1, !tbaa !2450
  %14433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14433, align 1, !tbaa !2451
  %14434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14434, align 1, !tbaa !2452
  %14435 = load i64, i64* %RBP
  %14436 = sub i64 %14435, 48
  %14437 = load i64, i64* %PC
  %14438 = add i64 %14437, 4
  store i64 %14438, i64* %PC
  %14439 = inttoptr i64 %14436 to i64*
  %14440 = load i64, i64* %14439
  store i64 %14440, i64* %RCX, align 8, !tbaa !2428
  %14441 = load i64, i64* %RDX
  %14442 = load i64, i64* %RCX
  %14443 = add i64 %14442, 16
  %14444 = load i64, i64* %PC
  %14445 = add i64 %14444, 4
  store i64 %14445, i64* %PC
  %14446 = inttoptr i64 %14443 to i32*
  %14447 = load i32, i32* %14446
  %14448 = shl i64 %14441, 32
  %14449 = ashr exact i64 %14448, 32
  %14450 = sext i32 %14447 to i64
  %14451 = mul nsw i64 %14450, %14449
  %14452 = trunc i64 %14451 to i32
  %14453 = and i64 %14451, 4294967295
  store i64 %14453, i64* %RDX, align 8, !tbaa !2428
  %14454 = shl i64 %14451, 32
  %14455 = ashr exact i64 %14454, 32
  %14456 = icmp ne i64 %14455, %14451
  %14457 = zext i1 %14456 to i8
  %14458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14457, i8* %14458, align 1, !tbaa !2434
  %14459 = and i32 %14452, 255
  %14460 = call i32 @llvm.ctpop.i32(i32 %14459) #16
  %14461 = trunc i32 %14460 to i8
  %14462 = and i8 %14461, 1
  %14463 = xor i8 %14462, 1
  %14464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14463, i8* %14464, align 1, !tbaa !2448
  %14465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14465, align 1, !tbaa !2449
  %14466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14466, align 1, !tbaa !2450
  %14467 = lshr i32 %14452, 31
  %14468 = trunc i32 %14467 to i8
  %14469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14468, i8* %14469, align 1, !tbaa !2451
  %14470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14457, i8* %14470, align 1, !tbaa !2452
  %14471 = load i64, i64* %RBP
  %14472 = sub i64 %14471, 48
  %14473 = load i64, i64* %PC
  %14474 = add i64 %14473, 4
  store i64 %14474, i64* %PC
  %14475 = inttoptr i64 %14472 to i64*
  %14476 = load i64, i64* %14475
  store i64 %14476, i64* %RCX, align 8, !tbaa !2428
  %14477 = load i64, i64* %RDX
  %14478 = load i64, i64* %RCX
  %14479 = add i64 %14478, 20
  %14480 = load i64, i64* %PC
  %14481 = add i64 %14480, 4
  store i64 %14481, i64* %PC
  %14482 = inttoptr i64 %14479 to i32*
  %14483 = load i32, i32* %14482
  %14484 = shl i64 %14477, 32
  %14485 = ashr exact i64 %14484, 32
  %14486 = sext i32 %14483 to i64
  %14487 = mul nsw i64 %14486, %14485
  %14488 = trunc i64 %14487 to i32
  %14489 = and i64 %14487, 4294967295
  store i64 %14489, i64* %RDX, align 8, !tbaa !2428
  %14490 = shl i64 %14487, 32
  %14491 = ashr exact i64 %14490, 32
  %14492 = icmp ne i64 %14491, %14487
  %14493 = zext i1 %14492 to i8
  %14494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14493, i8* %14494, align 1, !tbaa !2434
  %14495 = and i32 %14488, 255
  %14496 = call i32 @llvm.ctpop.i32(i32 %14495) #16
  %14497 = trunc i32 %14496 to i8
  %14498 = and i8 %14497, 1
  %14499 = xor i8 %14498, 1
  %14500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14499, i8* %14500, align 1, !tbaa !2448
  %14501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14501, align 1, !tbaa !2449
  %14502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14502, align 1, !tbaa !2450
  %14503 = lshr i32 %14488, 31
  %14504 = trunc i32 %14503 to i8
  %14505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14504, i8* %14505, align 1, !tbaa !2451
  %14506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14493, i8* %14506, align 1, !tbaa !2452
  %14507 = load i64, i64* %RBP
  %14508 = sub i64 %14507, 68
  %14509 = load i64, i64* %PC
  %14510 = add i64 %14509, 3
  store i64 %14510, i64* %PC
  %14511 = inttoptr i64 %14508 to i32*
  %14512 = load i32, i32* %14511
  %14513 = zext i32 %14512 to i64
  store i64 %14513, i64* %RSI, align 8, !tbaa !2428
  %14514 = load i64, i64* %RBP
  %14515 = sub i64 %14514, 48
  %14516 = load i64, i64* %PC
  %14517 = add i64 %14516, 4
  store i64 %14517, i64* %PC
  %14518 = inttoptr i64 %14515 to i64*
  %14519 = load i64, i64* %14518
  store i64 %14519, i64* %RCX, align 8, !tbaa !2428
  %14520 = load i64, i64* %RSI
  %14521 = load i64, i64* %RCX
  %14522 = add i64 %14521, 16
  %14523 = load i64, i64* %PC
  %14524 = add i64 %14523, 4
  store i64 %14524, i64* %PC
  %14525 = inttoptr i64 %14522 to i32*
  %14526 = load i32, i32* %14525
  %14527 = shl i64 %14520, 32
  %14528 = ashr exact i64 %14527, 32
  %14529 = sext i32 %14526 to i64
  %14530 = mul nsw i64 %14529, %14528
  %14531 = trunc i64 %14530 to i32
  %14532 = and i64 %14530, 4294967295
  store i64 %14532, i64* %RSI, align 8, !tbaa !2428
  %14533 = shl i64 %14530, 32
  %14534 = ashr exact i64 %14533, 32
  %14535 = icmp ne i64 %14534, %14530
  %14536 = zext i1 %14535 to i8
  %14537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14536, i8* %14537, align 1, !tbaa !2434
  %14538 = and i32 %14531, 255
  %14539 = call i32 @llvm.ctpop.i32(i32 %14538) #16
  %14540 = trunc i32 %14539 to i8
  %14541 = and i8 %14540, 1
  %14542 = xor i8 %14541, 1
  %14543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14542, i8* %14543, align 1, !tbaa !2448
  %14544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14544, align 1, !tbaa !2449
  %14545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14545, align 1, !tbaa !2450
  %14546 = lshr i32 %14531, 31
  %14547 = trunc i32 %14546 to i8
  %14548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14547, i8* %14548, align 1, !tbaa !2451
  %14549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14536, i8* %14549, align 1, !tbaa !2452
  %14550 = load i64, i64* %RBP
  %14551 = sub i64 %14550, 48
  %14552 = load i64, i64* %PC
  %14553 = add i64 %14552, 4
  store i64 %14553, i64* %PC
  %14554 = inttoptr i64 %14551 to i64*
  %14555 = load i64, i64* %14554
  store i64 %14555, i64* %RCX, align 8, !tbaa !2428
  %14556 = load i64, i64* %RSI
  %14557 = load i64, i64* %RCX
  %14558 = add i64 %14557, 20
  %14559 = load i64, i64* %PC
  %14560 = add i64 %14559, 4
  store i64 %14560, i64* %PC
  %14561 = inttoptr i64 %14558 to i32*
  %14562 = load i32, i32* %14561
  %14563 = shl i64 %14556, 32
  %14564 = ashr exact i64 %14563, 32
  %14565 = sext i32 %14562 to i64
  %14566 = mul nsw i64 %14565, %14564
  %14567 = trunc i64 %14566 to i32
  %14568 = and i64 %14566, 4294967295
  store i64 %14568, i64* %RSI, align 8, !tbaa !2428
  %14569 = shl i64 %14566, 32
  %14570 = ashr exact i64 %14569, 32
  %14571 = icmp ne i64 %14570, %14566
  %14572 = zext i1 %14571 to i8
  %14573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14572, i8* %14573, align 1, !tbaa !2434
  %14574 = and i32 %14567, 255
  %14575 = call i32 @llvm.ctpop.i32(i32 %14574) #16
  %14576 = trunc i32 %14575 to i8
  %14577 = and i8 %14576, 1
  %14578 = xor i8 %14577, 1
  %14579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14578, i8* %14579, align 1, !tbaa !2448
  %14580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14580, align 1, !tbaa !2449
  %14581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14581, align 1, !tbaa !2450
  %14582 = lshr i32 %14567, 31
  %14583 = trunc i32 %14582 to i8
  %14584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14583, i8* %14584, align 1, !tbaa !2451
  %14585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14572, i8* %14585, align 1, !tbaa !2452
  %14586 = load i64, i64* %RDX
  %14587 = load i32, i32* %ESI
  %14588 = zext i32 %14587 to i64
  %14589 = load i64, i64* %PC
  %14590 = add i64 %14589, 2
  store i64 %14590, i64* %PC
  %14591 = trunc i64 %14586 to i32
  %14592 = add i32 %14587, %14591
  %14593 = zext i32 %14592 to i64
  store i64 %14593, i64* %RDX, align 8, !tbaa !2428
  %14594 = icmp ult i32 %14592, %14591
  %14595 = icmp ult i32 %14592, %14587
  %14596 = or i1 %14594, %14595
  %14597 = zext i1 %14596 to i8
  %14598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14597, i8* %14598, align 1, !tbaa !2434
  %14599 = and i32 %14592, 255
  %14600 = call i32 @llvm.ctpop.i32(i32 %14599) #16
  %14601 = trunc i32 %14600 to i8
  %14602 = and i8 %14601, 1
  %14603 = xor i8 %14602, 1
  %14604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14603, i8* %14604, align 1, !tbaa !2448
  %14605 = xor i64 %14588, %14586
  %14606 = trunc i64 %14605 to i32
  %14607 = xor i32 %14606, %14592
  %14608 = lshr i32 %14607, 4
  %14609 = trunc i32 %14608 to i8
  %14610 = and i8 %14609, 1
  %14611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14610, i8* %14611, align 1, !tbaa !2449
  %14612 = icmp eq i32 %14592, 0
  %14613 = zext i1 %14612 to i8
  %14614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14613, i8* %14614, align 1, !tbaa !2450
  %14615 = lshr i32 %14592, 31
  %14616 = trunc i32 %14615 to i8
  %14617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14616, i8* %14617, align 1, !tbaa !2451
  %14618 = lshr i32 %14591, 31
  %14619 = lshr i32 %14587, 31
  %14620 = xor i32 %14615, %14618
  %14621 = xor i32 %14615, %14619
  %14622 = add nuw nsw i32 %14620, %14621
  %14623 = icmp eq i32 %14622, 2
  %14624 = zext i1 %14623 to i8
  %14625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14624, i8* %14625, align 1, !tbaa !2452
  %14626 = load i64, i64* %RBP
  %14627 = sub i64 %14626, 72
  %14628 = load i64, i64* %PC
  %14629 = add i64 %14628, 3
  store i64 %14629, i64* %PC
  %14630 = inttoptr i64 %14627 to i32*
  %14631 = load i32, i32* %14630
  %14632 = zext i32 %14631 to i64
  store i64 %14632, i64* %RSI, align 8, !tbaa !2428
  %14633 = load i64, i64* %RBP
  %14634 = sub i64 %14633, 48
  %14635 = load i64, i64* %PC
  %14636 = add i64 %14635, 4
  store i64 %14636, i64* %PC
  %14637 = inttoptr i64 %14634 to i64*
  %14638 = load i64, i64* %14637
  store i64 %14638, i64* %RCX, align 8, !tbaa !2428
  %14639 = load i64, i64* %RSI
  %14640 = load i64, i64* %RCX
  %14641 = add i64 %14640, 20
  %14642 = load i64, i64* %PC
  %14643 = add i64 %14642, 4
  store i64 %14643, i64* %PC
  %14644 = inttoptr i64 %14641 to i32*
  %14645 = load i32, i32* %14644
  %14646 = shl i64 %14639, 32
  %14647 = ashr exact i64 %14646, 32
  %14648 = sext i32 %14645 to i64
  %14649 = mul nsw i64 %14648, %14647
  %14650 = trunc i64 %14649 to i32
  %14651 = and i64 %14649, 4294967295
  store i64 %14651, i64* %RSI, align 8, !tbaa !2428
  %14652 = shl i64 %14649, 32
  %14653 = ashr exact i64 %14652, 32
  %14654 = icmp ne i64 %14653, %14649
  %14655 = zext i1 %14654 to i8
  %14656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14655, i8* %14656, align 1, !tbaa !2434
  %14657 = and i32 %14650, 255
  %14658 = call i32 @llvm.ctpop.i32(i32 %14657) #16
  %14659 = trunc i32 %14658 to i8
  %14660 = and i8 %14659, 1
  %14661 = xor i8 %14660, 1
  %14662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14661, i8* %14662, align 1, !tbaa !2448
  %14663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14663, align 1, !tbaa !2449
  %14664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14664, align 1, !tbaa !2450
  %14665 = lshr i32 %14650, 31
  %14666 = trunc i32 %14665 to i8
  %14667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14666, i8* %14667, align 1, !tbaa !2451
  %14668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14655, i8* %14668, align 1, !tbaa !2452
  %14669 = load i64, i64* %RDX
  %14670 = load i32, i32* %ESI
  %14671 = zext i32 %14670 to i64
  %14672 = load i64, i64* %PC
  %14673 = add i64 %14672, 2
  store i64 %14673, i64* %PC
  %14674 = trunc i64 %14669 to i32
  %14675 = add i32 %14670, %14674
  %14676 = zext i32 %14675 to i64
  store i64 %14676, i64* %RDX, align 8, !tbaa !2428
  %14677 = icmp ult i32 %14675, %14674
  %14678 = icmp ult i32 %14675, %14670
  %14679 = or i1 %14677, %14678
  %14680 = zext i1 %14679 to i8
  %14681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14680, i8* %14681, align 1, !tbaa !2434
  %14682 = and i32 %14675, 255
  %14683 = call i32 @llvm.ctpop.i32(i32 %14682) #16
  %14684 = trunc i32 %14683 to i8
  %14685 = and i8 %14684, 1
  %14686 = xor i8 %14685, 1
  %14687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14686, i8* %14687, align 1, !tbaa !2448
  %14688 = xor i64 %14671, %14669
  %14689 = trunc i64 %14688 to i32
  %14690 = xor i32 %14689, %14675
  %14691 = lshr i32 %14690, 4
  %14692 = trunc i32 %14691 to i8
  %14693 = and i8 %14692, 1
  %14694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14693, i8* %14694, align 1, !tbaa !2449
  %14695 = icmp eq i32 %14675, 0
  %14696 = zext i1 %14695 to i8
  %14697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14696, i8* %14697, align 1, !tbaa !2450
  %14698 = lshr i32 %14675, 31
  %14699 = trunc i32 %14698 to i8
  %14700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14699, i8* %14700, align 1, !tbaa !2451
  %14701 = lshr i32 %14674, 31
  %14702 = lshr i32 %14670, 31
  %14703 = xor i32 %14698, %14701
  %14704 = xor i32 %14698, %14702
  %14705 = add nuw nsw i32 %14703, %14704
  %14706 = icmp eq i32 %14705, 2
  %14707 = zext i1 %14706 to i8
  %14708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14707, i8* %14708, align 1, !tbaa !2452
  %14709 = load i64, i64* %RDX
  %14710 = load i64, i64* %RBP
  %14711 = sub i64 %14710, 76
  %14712 = load i64, i64* %PC
  %14713 = add i64 %14712, 3
  store i64 %14713, i64* %PC
  %14714 = trunc i64 %14709 to i32
  %14715 = inttoptr i64 %14711 to i32*
  %14716 = load i32, i32* %14715
  %14717 = add i32 %14716, %14714
  %14718 = zext i32 %14717 to i64
  store i64 %14718, i64* %RDX, align 8, !tbaa !2428
  %14719 = icmp ult i32 %14717, %14714
  %14720 = icmp ult i32 %14717, %14716
  %14721 = or i1 %14719, %14720
  %14722 = zext i1 %14721 to i8
  %14723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14722, i8* %14723, align 1, !tbaa !2434
  %14724 = and i32 %14717, 255
  %14725 = call i32 @llvm.ctpop.i32(i32 %14724) #16
  %14726 = trunc i32 %14725 to i8
  %14727 = and i8 %14726, 1
  %14728 = xor i8 %14727, 1
  %14729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14728, i8* %14729, align 1, !tbaa !2448
  %14730 = xor i32 %14716, %14714
  %14731 = xor i32 %14730, %14717
  %14732 = lshr i32 %14731, 4
  %14733 = trunc i32 %14732 to i8
  %14734 = and i8 %14733, 1
  %14735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14734, i8* %14735, align 1, !tbaa !2449
  %14736 = icmp eq i32 %14717, 0
  %14737 = zext i1 %14736 to i8
  %14738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14737, i8* %14738, align 1, !tbaa !2450
  %14739 = lshr i32 %14717, 31
  %14740 = trunc i32 %14739 to i8
  %14741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14740, i8* %14741, align 1, !tbaa !2451
  %14742 = lshr i32 %14714, 31
  %14743 = lshr i32 %14716, 31
  %14744 = xor i32 %14739, %14742
  %14745 = xor i32 %14739, %14743
  %14746 = add nuw nsw i32 %14744, %14745
  %14747 = icmp eq i32 %14746, 2
  %14748 = zext i1 %14747 to i8
  %14749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14748, i8* %14749, align 1, !tbaa !2452
  %14750 = load i32, i32* %EDX
  %14751 = zext i32 %14750 to i64
  %14752 = load i64, i64* %PC
  %14753 = add i64 %14752, 3
  store i64 %14753, i64* %PC
  %14754 = shl i64 %14751, 32
  %14755 = ashr exact i64 %14754, 32
  store i64 %14755, i64* %RCX, align 8, !tbaa !2428
  %14756 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14757 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14758 = load i64, i64* %RAX
  %14759 = load i64, i64* %RCX
  %14760 = mul i64 %14759, 4
  %14761 = add i64 %14760, %14758
  %14762 = load i64, i64* %PC
  %14763 = add i64 %14762, 5
  store i64 %14763, i64* %PC
  %14764 = bitcast i8* %14757 to <2 x float>*
  %14765 = load <2 x float>, <2 x float>* %14764, align 1
  %14766 = getelementptr inbounds i8, i8* %14757, i64 8
  %14767 = bitcast i8* %14766 to <2 x i32>*
  %14768 = load <2 x i32>, <2 x i32>* %14767, align 1
  %14769 = inttoptr i64 %14761 to float*
  %14770 = load float, float* %14769
  %14771 = extractelement <2 x float> %14765, i32 0
  %14772 = fmul float %14771, %14770
  %14773 = bitcast i8* %14756 to float*
  store float %14772, float* %14773, align 1, !tbaa !2453
  %14774 = bitcast <2 x float> %14765 to <2 x i32>
  %14775 = extractelement <2 x i32> %14774, i32 1
  %14776 = getelementptr inbounds i8, i8* %14756, i64 4
  %14777 = bitcast i8* %14776 to i32*
  store i32 %14775, i32* %14777, align 1, !tbaa !2453
  %14778 = extractelement <2 x i32> %14768, i32 0
  %14779 = getelementptr inbounds i8, i8* %14756, i64 8
  %14780 = bitcast i8* %14779 to i32*
  store i32 %14778, i32* %14780, align 1, !tbaa !2453
  %14781 = extractelement <2 x i32> %14768, i32 1
  %14782 = getelementptr inbounds i8, i8* %14756, i64 12
  %14783 = bitcast i8* %14782 to i32*
  store i32 %14781, i32* %14783, align 1, !tbaa !2453
  %14784 = load i64, i64* %RBP
  %14785 = sub i64 %14784, 104
  %14786 = bitcast %union.vec128_t* %XMM0 to i8*
  %14787 = load i64, i64* %PC
  %14788 = add i64 %14787, 5
  store i64 %14788, i64* %PC
  %14789 = bitcast i8* %14786 to <2 x float>*
  %14790 = load <2 x float>, <2 x float>* %14789, align 1
  %14791 = extractelement <2 x float> %14790, i32 0
  %14792 = inttoptr i64 %14785 to float*
  store float %14791, float* %14792
  %14793 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14794 = load i64, i64* %RBP
  %14795 = sub i64 %14794, 104
  %14796 = load i64, i64* %PC
  %14797 = add i64 %14796, 5
  store i64 %14797, i64* %PC
  %14798 = inttoptr i64 %14795 to float*
  %14799 = load float, float* %14798
  %14800 = bitcast i8* %14793 to float*
  store float %14799, float* %14800, align 1, !tbaa !2453
  %14801 = getelementptr inbounds i8, i8* %14793, i64 4
  %14802 = bitcast i8* %14801 to float*
  store float 0.000000e+00, float* %14802, align 1, !tbaa !2453
  %14803 = getelementptr inbounds i8, i8* %14793, i64 8
  %14804 = bitcast i8* %14803 to float*
  store float 0.000000e+00, float* %14804, align 1, !tbaa !2453
  %14805 = getelementptr inbounds i8, i8* %14793, i64 12
  %14806 = bitcast i8* %14805 to float*
  store float 0.000000e+00, float* %14806, align 1, !tbaa !2453
  %14807 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14808 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14809 = load i64, i64* %RBP
  %14810 = sub i64 %14809, 104
  %14811 = load i64, i64* %PC
  %14812 = add i64 %14811, 5
  store i64 %14812, i64* %PC
  %14813 = bitcast i8* %14808 to <2 x float>*
  %14814 = load <2 x float>, <2 x float>* %14813, align 1
  %14815 = getelementptr inbounds i8, i8* %14808, i64 8
  %14816 = bitcast i8* %14815 to <2 x i32>*
  %14817 = load <2 x i32>, <2 x i32>* %14816, align 1
  %14818 = inttoptr i64 %14810 to float*
  %14819 = load float, float* %14818
  %14820 = extractelement <2 x float> %14814, i32 0
  %14821 = fmul float %14820, %14819
  %14822 = bitcast i8* %14807 to float*
  store float %14821, float* %14822, align 1, !tbaa !2453
  %14823 = bitcast <2 x float> %14814 to <2 x i32>
  %14824 = extractelement <2 x i32> %14823, i32 1
  %14825 = getelementptr inbounds i8, i8* %14807, i64 4
  %14826 = bitcast i8* %14825 to i32*
  store i32 %14824, i32* %14826, align 1, !tbaa !2453
  %14827 = extractelement <2 x i32> %14817, i32 0
  %14828 = getelementptr inbounds i8, i8* %14807, i64 8
  %14829 = bitcast i8* %14828 to i32*
  store i32 %14827, i32* %14829, align 1, !tbaa !2453
  %14830 = extractelement <2 x i32> %14817, i32 1
  %14831 = getelementptr inbounds i8, i8* %14807, i64 12
  %14832 = bitcast i8* %14831 to i32*
  store i32 %14830, i32* %14832, align 1, !tbaa !2453
  %14833 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14834 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14835 = load i64, i64* %RBP
  %14836 = sub i64 %14835, 96
  %14837 = load i64, i64* %PC
  %14838 = add i64 %14837, 5
  store i64 %14838, i64* %PC
  %14839 = bitcast i8* %14834 to <2 x float>*
  %14840 = load <2 x float>, <2 x float>* %14839, align 1
  %14841 = getelementptr inbounds i8, i8* %14834, i64 8
  %14842 = bitcast i8* %14841 to <2 x i32>*
  %14843 = load <2 x i32>, <2 x i32>* %14842, align 1
  %14844 = inttoptr i64 %14836 to float*
  %14845 = load float, float* %14844
  %14846 = extractelement <2 x float> %14840, i32 0
  %14847 = fadd float %14846, %14845
  %14848 = bitcast i8* %14833 to float*
  store float %14847, float* %14848, align 1, !tbaa !2453
  %14849 = bitcast <2 x float> %14840 to <2 x i32>
  %14850 = extractelement <2 x i32> %14849, i32 1
  %14851 = getelementptr inbounds i8, i8* %14833, i64 4
  %14852 = bitcast i8* %14851 to i32*
  store i32 %14850, i32* %14852, align 1, !tbaa !2453
  %14853 = extractelement <2 x i32> %14843, i32 0
  %14854 = getelementptr inbounds i8, i8* %14833, i64 8
  %14855 = bitcast i8* %14854 to i32*
  store i32 %14853, i32* %14855, align 1, !tbaa !2453
  %14856 = extractelement <2 x i32> %14843, i32 1
  %14857 = getelementptr inbounds i8, i8* %14833, i64 12
  %14858 = bitcast i8* %14857 to i32*
  store i32 %14856, i32* %14858, align 1, !tbaa !2453
  %14859 = load i64, i64* %RBP
  %14860 = sub i64 %14859, 96
  %14861 = bitcast %union.vec128_t* %XMM0 to i8*
  %14862 = load i64, i64* %PC
  %14863 = add i64 %14862, 5
  store i64 %14863, i64* %PC
  %14864 = bitcast i8* %14861 to <2 x float>*
  %14865 = load <2 x float>, <2 x float>* %14864, align 1
  %14866 = extractelement <2 x float> %14865, i32 0
  %14867 = inttoptr i64 %14860 to float*
  store float %14866, float* %14867
  %14868 = load i64, i64* %RBP
  %14869 = sub i64 %14868, 40
  %14870 = load i64, i64* %PC
  %14871 = add i64 %14870, 4
  store i64 %14871, i64* %PC
  %14872 = inttoptr i64 %14869 to i64*
  %14873 = load i64, i64* %14872
  store i64 %14873, i64* %RAX, align 8, !tbaa !2428
  %14874 = load i64, i64* %RAX
  %14875 = load i64, i64* %PC
  %14876 = add i64 %14875, 3
  store i64 %14876, i64* %PC
  %14877 = inttoptr i64 %14874 to i64*
  %14878 = load i64, i64* %14877
  store i64 %14878, i64* %RAX, align 8, !tbaa !2428
  %14879 = load i64, i64* %RBP
  %14880 = sub i64 %14879, 40
  %14881 = load i64, i64* %PC
  %14882 = add i64 %14881, 4
  store i64 %14882, i64* %PC
  %14883 = inttoptr i64 %14880 to i64*
  %14884 = load i64, i64* %14883
  store i64 %14884, i64* %RCX, align 8, !tbaa !2428
  %14885 = load i64, i64* %RCX
  %14886 = add i64 %14885, 12
  %14887 = load i64, i64* %PC
  %14888 = add i64 %14887, 4
  store i64 %14888, i64* %PC
  %14889 = inttoptr i64 %14886 to i32*
  %14890 = load i32, i32* %14889
  %14891 = sext i32 %14890 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %14892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14892, align 1, !tbaa !2434
  %14893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %14893, align 1, !tbaa !2448
  %14894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14894, align 1, !tbaa !2449
  %14895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14895, align 1, !tbaa !2450
  %14896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14896, align 1, !tbaa !2451
  %14897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14897, align 1, !tbaa !2452
  %14898 = load i64, i64* %RBP
  %14899 = sub i64 %14898, 40
  %14900 = load i64, i64* %PC
  %14901 = add i64 %14900, 4
  store i64 %14901, i64* %PC
  %14902 = inttoptr i64 %14899 to i64*
  %14903 = load i64, i64* %14902
  store i64 %14903, i64* %RCX, align 8, !tbaa !2428
  %14904 = load i64, i64* %RDX
  %14905 = load i64, i64* %RCX
  %14906 = add i64 %14905, 16
  %14907 = load i64, i64* %PC
  %14908 = add i64 %14907, 4
  store i64 %14908, i64* %PC
  %14909 = inttoptr i64 %14906 to i32*
  %14910 = load i32, i32* %14909
  %14911 = shl i64 %14904, 32
  %14912 = ashr exact i64 %14911, 32
  %14913 = sext i32 %14910 to i64
  %14914 = mul nsw i64 %14913, %14912
  %14915 = trunc i64 %14914 to i32
  %14916 = and i64 %14914, 4294967295
  store i64 %14916, i64* %RDX, align 8, !tbaa !2428
  %14917 = shl i64 %14914, 32
  %14918 = ashr exact i64 %14917, 32
  %14919 = icmp ne i64 %14918, %14914
  %14920 = zext i1 %14919 to i8
  %14921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14920, i8* %14921, align 1, !tbaa !2434
  %14922 = and i32 %14915, 255
  %14923 = call i32 @llvm.ctpop.i32(i32 %14922) #16
  %14924 = trunc i32 %14923 to i8
  %14925 = and i8 %14924, 1
  %14926 = xor i8 %14925, 1
  %14927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14926, i8* %14927, align 1, !tbaa !2448
  %14928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14928, align 1, !tbaa !2449
  %14929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14929, align 1, !tbaa !2450
  %14930 = lshr i32 %14915, 31
  %14931 = trunc i32 %14930 to i8
  %14932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14931, i8* %14932, align 1, !tbaa !2451
  %14933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14920, i8* %14933, align 1, !tbaa !2452
  %14934 = load i64, i64* %RBP
  %14935 = sub i64 %14934, 40
  %14936 = load i64, i64* %PC
  %14937 = add i64 %14936, 4
  store i64 %14937, i64* %PC
  %14938 = inttoptr i64 %14935 to i64*
  %14939 = load i64, i64* %14938
  store i64 %14939, i64* %RCX, align 8, !tbaa !2428
  %14940 = load i64, i64* %RDX
  %14941 = load i64, i64* %RCX
  %14942 = add i64 %14941, 20
  %14943 = load i64, i64* %PC
  %14944 = add i64 %14943, 4
  store i64 %14944, i64* %PC
  %14945 = inttoptr i64 %14942 to i32*
  %14946 = load i32, i32* %14945
  %14947 = shl i64 %14940, 32
  %14948 = ashr exact i64 %14947, 32
  %14949 = sext i32 %14946 to i64
  %14950 = mul nsw i64 %14949, %14948
  %14951 = trunc i64 %14950 to i32
  %14952 = and i64 %14950, 4294967295
  store i64 %14952, i64* %RDX, align 8, !tbaa !2428
  %14953 = shl i64 %14950, 32
  %14954 = ashr exact i64 %14953, 32
  %14955 = icmp ne i64 %14954, %14950
  %14956 = zext i1 %14955 to i8
  %14957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14956, i8* %14957, align 1, !tbaa !2434
  %14958 = and i32 %14951, 255
  %14959 = call i32 @llvm.ctpop.i32(i32 %14958) #16
  %14960 = trunc i32 %14959 to i8
  %14961 = and i8 %14960, 1
  %14962 = xor i8 %14961, 1
  %14963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14962, i8* %14963, align 1, !tbaa !2448
  %14964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14964, align 1, !tbaa !2449
  %14965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %14965, align 1, !tbaa !2450
  %14966 = lshr i32 %14951, 31
  %14967 = trunc i32 %14966 to i8
  %14968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14967, i8* %14968, align 1, !tbaa !2451
  %14969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14956, i8* %14969, align 1, !tbaa !2452
  %14970 = load i64, i64* %RBP
  %14971 = sub i64 %14970, 68
  %14972 = load i64, i64* %PC
  %14973 = add i64 %14972, 3
  store i64 %14973, i64* %PC
  %14974 = inttoptr i64 %14971 to i32*
  %14975 = load i32, i32* %14974
  %14976 = zext i32 %14975 to i64
  store i64 %14976, i64* %RSI, align 8, !tbaa !2428
  %14977 = load i64, i64* %RBP
  %14978 = sub i64 %14977, 40
  %14979 = load i64, i64* %PC
  %14980 = add i64 %14979, 4
  store i64 %14980, i64* %PC
  %14981 = inttoptr i64 %14978 to i64*
  %14982 = load i64, i64* %14981
  store i64 %14982, i64* %RCX, align 8, !tbaa !2428
  %14983 = load i64, i64* %RSI
  %14984 = load i64, i64* %RCX
  %14985 = add i64 %14984, 16
  %14986 = load i64, i64* %PC
  %14987 = add i64 %14986, 4
  store i64 %14987, i64* %PC
  %14988 = inttoptr i64 %14985 to i32*
  %14989 = load i32, i32* %14988
  %14990 = shl i64 %14983, 32
  %14991 = ashr exact i64 %14990, 32
  %14992 = sext i32 %14989 to i64
  %14993 = mul nsw i64 %14992, %14991
  %14994 = trunc i64 %14993 to i32
  %14995 = and i64 %14993, 4294967295
  store i64 %14995, i64* %RSI, align 8, !tbaa !2428
  %14996 = shl i64 %14993, 32
  %14997 = ashr exact i64 %14996, 32
  %14998 = icmp ne i64 %14997, %14993
  %14999 = zext i1 %14998 to i8
  %15000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14999, i8* %15000, align 1, !tbaa !2434
  %15001 = and i32 %14994, 255
  %15002 = call i32 @llvm.ctpop.i32(i32 %15001) #16
  %15003 = trunc i32 %15002 to i8
  %15004 = and i8 %15003, 1
  %15005 = xor i8 %15004, 1
  %15006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15005, i8* %15006, align 1, !tbaa !2448
  %15007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15007, align 1, !tbaa !2449
  %15008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15008, align 1, !tbaa !2450
  %15009 = lshr i32 %14994, 31
  %15010 = trunc i32 %15009 to i8
  %15011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15010, i8* %15011, align 1, !tbaa !2451
  %15012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14999, i8* %15012, align 1, !tbaa !2452
  %15013 = load i64, i64* %RBP
  %15014 = sub i64 %15013, 40
  %15015 = load i64, i64* %PC
  %15016 = add i64 %15015, 4
  store i64 %15016, i64* %PC
  %15017 = inttoptr i64 %15014 to i64*
  %15018 = load i64, i64* %15017
  store i64 %15018, i64* %RCX, align 8, !tbaa !2428
  %15019 = load i64, i64* %RSI
  %15020 = load i64, i64* %RCX
  %15021 = add i64 %15020, 20
  %15022 = load i64, i64* %PC
  %15023 = add i64 %15022, 4
  store i64 %15023, i64* %PC
  %15024 = inttoptr i64 %15021 to i32*
  %15025 = load i32, i32* %15024
  %15026 = shl i64 %15019, 32
  %15027 = ashr exact i64 %15026, 32
  %15028 = sext i32 %15025 to i64
  %15029 = mul nsw i64 %15028, %15027
  %15030 = trunc i64 %15029 to i32
  %15031 = and i64 %15029, 4294967295
  store i64 %15031, i64* %RSI, align 8, !tbaa !2428
  %15032 = shl i64 %15029, 32
  %15033 = ashr exact i64 %15032, 32
  %15034 = icmp ne i64 %15033, %15029
  %15035 = zext i1 %15034 to i8
  %15036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15035, i8* %15036, align 1, !tbaa !2434
  %15037 = and i32 %15030, 255
  %15038 = call i32 @llvm.ctpop.i32(i32 %15037) #16
  %15039 = trunc i32 %15038 to i8
  %15040 = and i8 %15039, 1
  %15041 = xor i8 %15040, 1
  %15042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15041, i8* %15042, align 1, !tbaa !2448
  %15043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15043, align 1, !tbaa !2449
  %15044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15044, align 1, !tbaa !2450
  %15045 = lshr i32 %15030, 31
  %15046 = trunc i32 %15045 to i8
  %15047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15046, i8* %15047, align 1, !tbaa !2451
  %15048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15035, i8* %15048, align 1, !tbaa !2452
  %15049 = load i64, i64* %RDX
  %15050 = load i32, i32* %ESI
  %15051 = zext i32 %15050 to i64
  %15052 = load i64, i64* %PC
  %15053 = add i64 %15052, 2
  store i64 %15053, i64* %PC
  %15054 = trunc i64 %15049 to i32
  %15055 = add i32 %15050, %15054
  %15056 = zext i32 %15055 to i64
  store i64 %15056, i64* %RDX, align 8, !tbaa !2428
  %15057 = icmp ult i32 %15055, %15054
  %15058 = icmp ult i32 %15055, %15050
  %15059 = or i1 %15057, %15058
  %15060 = zext i1 %15059 to i8
  %15061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15060, i8* %15061, align 1, !tbaa !2434
  %15062 = and i32 %15055, 255
  %15063 = call i32 @llvm.ctpop.i32(i32 %15062) #16
  %15064 = trunc i32 %15063 to i8
  %15065 = and i8 %15064, 1
  %15066 = xor i8 %15065, 1
  %15067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15066, i8* %15067, align 1, !tbaa !2448
  %15068 = xor i64 %15051, %15049
  %15069 = trunc i64 %15068 to i32
  %15070 = xor i32 %15069, %15055
  %15071 = lshr i32 %15070, 4
  %15072 = trunc i32 %15071 to i8
  %15073 = and i8 %15072, 1
  %15074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15073, i8* %15074, align 1, !tbaa !2449
  %15075 = icmp eq i32 %15055, 0
  %15076 = zext i1 %15075 to i8
  %15077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15076, i8* %15077, align 1, !tbaa !2450
  %15078 = lshr i32 %15055, 31
  %15079 = trunc i32 %15078 to i8
  %15080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15079, i8* %15080, align 1, !tbaa !2451
  %15081 = lshr i32 %15054, 31
  %15082 = lshr i32 %15050, 31
  %15083 = xor i32 %15078, %15081
  %15084 = xor i32 %15078, %15082
  %15085 = add nuw nsw i32 %15083, %15084
  %15086 = icmp eq i32 %15085, 2
  %15087 = zext i1 %15086 to i8
  %15088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15087, i8* %15088, align 1, !tbaa !2452
  %15089 = load i64, i64* %RBP
  %15090 = sub i64 %15089, 72
  %15091 = load i64, i64* %PC
  %15092 = add i64 %15091, 3
  store i64 %15092, i64* %PC
  %15093 = inttoptr i64 %15090 to i32*
  %15094 = load i32, i32* %15093
  %15095 = zext i32 %15094 to i64
  store i64 %15095, i64* %RSI, align 8, !tbaa !2428
  %15096 = load i64, i64* %RBP
  %15097 = sub i64 %15096, 40
  %15098 = load i64, i64* %PC
  %15099 = add i64 %15098, 4
  store i64 %15099, i64* %PC
  %15100 = inttoptr i64 %15097 to i64*
  %15101 = load i64, i64* %15100
  store i64 %15101, i64* %RCX, align 8, !tbaa !2428
  %15102 = load i64, i64* %RSI
  %15103 = load i64, i64* %RCX
  %15104 = add i64 %15103, 20
  %15105 = load i64, i64* %PC
  %15106 = add i64 %15105, 4
  store i64 %15106, i64* %PC
  %15107 = inttoptr i64 %15104 to i32*
  %15108 = load i32, i32* %15107
  %15109 = shl i64 %15102, 32
  %15110 = ashr exact i64 %15109, 32
  %15111 = sext i32 %15108 to i64
  %15112 = mul nsw i64 %15111, %15110
  %15113 = trunc i64 %15112 to i32
  %15114 = and i64 %15112, 4294967295
  store i64 %15114, i64* %RSI, align 8, !tbaa !2428
  %15115 = shl i64 %15112, 32
  %15116 = ashr exact i64 %15115, 32
  %15117 = icmp ne i64 %15116, %15112
  %15118 = zext i1 %15117 to i8
  %15119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15118, i8* %15119, align 1, !tbaa !2434
  %15120 = and i32 %15113, 255
  %15121 = call i32 @llvm.ctpop.i32(i32 %15120) #16
  %15122 = trunc i32 %15121 to i8
  %15123 = and i8 %15122, 1
  %15124 = xor i8 %15123, 1
  %15125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15124, i8* %15125, align 1, !tbaa !2448
  %15126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15126, align 1, !tbaa !2449
  %15127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15127, align 1, !tbaa !2450
  %15128 = lshr i32 %15113, 31
  %15129 = trunc i32 %15128 to i8
  %15130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15129, i8* %15130, align 1, !tbaa !2451
  %15131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15118, i8* %15131, align 1, !tbaa !2452
  %15132 = load i64, i64* %RDX
  %15133 = load i32, i32* %ESI
  %15134 = zext i32 %15133 to i64
  %15135 = load i64, i64* %PC
  %15136 = add i64 %15135, 2
  store i64 %15136, i64* %PC
  %15137 = trunc i64 %15132 to i32
  %15138 = add i32 %15133, %15137
  %15139 = zext i32 %15138 to i64
  store i64 %15139, i64* %RDX, align 8, !tbaa !2428
  %15140 = icmp ult i32 %15138, %15137
  %15141 = icmp ult i32 %15138, %15133
  %15142 = or i1 %15140, %15141
  %15143 = zext i1 %15142 to i8
  %15144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15143, i8* %15144, align 1, !tbaa !2434
  %15145 = and i32 %15138, 255
  %15146 = call i32 @llvm.ctpop.i32(i32 %15145) #16
  %15147 = trunc i32 %15146 to i8
  %15148 = and i8 %15147, 1
  %15149 = xor i8 %15148, 1
  %15150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15149, i8* %15150, align 1, !tbaa !2448
  %15151 = xor i64 %15134, %15132
  %15152 = trunc i64 %15151 to i32
  %15153 = xor i32 %15152, %15138
  %15154 = lshr i32 %15153, 4
  %15155 = trunc i32 %15154 to i8
  %15156 = and i8 %15155, 1
  %15157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15156, i8* %15157, align 1, !tbaa !2449
  %15158 = icmp eq i32 %15138, 0
  %15159 = zext i1 %15158 to i8
  %15160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15159, i8* %15160, align 1, !tbaa !2450
  %15161 = lshr i32 %15138, 31
  %15162 = trunc i32 %15161 to i8
  %15163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15162, i8* %15163, align 1, !tbaa !2451
  %15164 = lshr i32 %15137, 31
  %15165 = lshr i32 %15133, 31
  %15166 = xor i32 %15161, %15164
  %15167 = xor i32 %15161, %15165
  %15168 = add nuw nsw i32 %15166, %15167
  %15169 = icmp eq i32 %15168, 2
  %15170 = zext i1 %15169 to i8
  %15171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15170, i8* %15171, align 1, !tbaa !2452
  %15172 = load i64, i64* %RDX
  %15173 = load i64, i64* %RBP
  %15174 = sub i64 %15173, 76
  %15175 = load i64, i64* %PC
  %15176 = add i64 %15175, 3
  store i64 %15176, i64* %PC
  %15177 = trunc i64 %15172 to i32
  %15178 = inttoptr i64 %15174 to i32*
  %15179 = load i32, i32* %15178
  %15180 = add i32 %15179, %15177
  %15181 = zext i32 %15180 to i64
  store i64 %15181, i64* %RDX, align 8, !tbaa !2428
  %15182 = icmp ult i32 %15180, %15177
  %15183 = icmp ult i32 %15180, %15179
  %15184 = or i1 %15182, %15183
  %15185 = zext i1 %15184 to i8
  %15186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15185, i8* %15186, align 1, !tbaa !2434
  %15187 = and i32 %15180, 255
  %15188 = call i32 @llvm.ctpop.i32(i32 %15187) #16
  %15189 = trunc i32 %15188 to i8
  %15190 = and i8 %15189, 1
  %15191 = xor i8 %15190, 1
  %15192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15191, i8* %15192, align 1, !tbaa !2448
  %15193 = xor i32 %15179, %15177
  %15194 = xor i32 %15193, %15180
  %15195 = lshr i32 %15194, 4
  %15196 = trunc i32 %15195 to i8
  %15197 = and i8 %15196, 1
  %15198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15197, i8* %15198, align 1, !tbaa !2449
  %15199 = icmp eq i32 %15180, 0
  %15200 = zext i1 %15199 to i8
  %15201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15200, i8* %15201, align 1, !tbaa !2450
  %15202 = lshr i32 %15180, 31
  %15203 = trunc i32 %15202 to i8
  %15204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15203, i8* %15204, align 1, !tbaa !2451
  %15205 = lshr i32 %15177, 31
  %15206 = lshr i32 %15179, 31
  %15207 = xor i32 %15202, %15205
  %15208 = xor i32 %15202, %15206
  %15209 = add nuw nsw i32 %15207, %15208
  %15210 = icmp eq i32 %15209, 2
  %15211 = zext i1 %15210 to i8
  %15212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15211, i8* %15212, align 1, !tbaa !2452
  %15213 = load i32, i32* %EDX
  %15214 = zext i32 %15213 to i64
  %15215 = load i64, i64* %PC
  %15216 = add i64 %15215, 3
  store i64 %15216, i64* %PC
  %15217 = shl i64 %15214, 32
  %15218 = ashr exact i64 %15217, 32
  store i64 %15218, i64* %RCX, align 8, !tbaa !2428
  %15219 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15220 = load i64, i64* %RAX
  %15221 = load i64, i64* %RCX
  %15222 = mul i64 %15221, 4
  %15223 = add i64 %15222, %15220
  %15224 = load i64, i64* %PC
  %15225 = add i64 %15224, 5
  store i64 %15225, i64* %PC
  %15226 = inttoptr i64 %15223 to float*
  %15227 = load float, float* %15226
  %15228 = bitcast i8* %15219 to float*
  store float %15227, float* %15228, align 1, !tbaa !2453
  %15229 = getelementptr inbounds i8, i8* %15219, i64 4
  %15230 = bitcast i8* %15229 to float*
  store float 0.000000e+00, float* %15230, align 1, !tbaa !2453
  %15231 = getelementptr inbounds i8, i8* %15219, i64 8
  %15232 = bitcast i8* %15231 to float*
  store float 0.000000e+00, float* %15232, align 1, !tbaa !2453
  %15233 = getelementptr inbounds i8, i8* %15219, i64 12
  %15234 = bitcast i8* %15233 to float*
  store float 0.000000e+00, float* %15234, align 1, !tbaa !2453
  %15235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15236 = load i64, i64* %PC
  %15237 = add i64 %15236, 9
  store i64 %15237, i64* %PC
  %15238 = load float, float* bitcast (%omega_type* @omega to float*)
  %15239 = bitcast i8* %15235 to float*
  store float %15238, float* %15239, align 1, !tbaa !2453
  %15240 = getelementptr inbounds i8, i8* %15235, i64 4
  %15241 = bitcast i8* %15240 to float*
  store float 0.000000e+00, float* %15241, align 1, !tbaa !2453
  %15242 = getelementptr inbounds i8, i8* %15235, i64 8
  %15243 = bitcast i8* %15242 to float*
  store float 0.000000e+00, float* %15243, align 1, !tbaa !2453
  %15244 = getelementptr inbounds i8, i8* %15235, i64 12
  %15245 = bitcast i8* %15244 to float*
  store float 0.000000e+00, float* %15245, align 1, !tbaa !2453
  %15246 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15247 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %15248 = load i64, i64* %RBP
  %15249 = sub i64 %15248, 104
  %15250 = load i64, i64* %PC
  %15251 = add i64 %15250, 5
  store i64 %15251, i64* %PC
  %15252 = bitcast i8* %15247 to <2 x float>*
  %15253 = load <2 x float>, <2 x float>* %15252, align 1
  %15254 = getelementptr inbounds i8, i8* %15247, i64 8
  %15255 = bitcast i8* %15254 to <2 x i32>*
  %15256 = load <2 x i32>, <2 x i32>* %15255, align 1
  %15257 = inttoptr i64 %15249 to float*
  %15258 = load float, float* %15257
  %15259 = extractelement <2 x float> %15253, i32 0
  %15260 = fmul float %15259, %15258
  %15261 = bitcast i8* %15246 to float*
  store float %15260, float* %15261, align 1, !tbaa !2453
  %15262 = bitcast <2 x float> %15253 to <2 x i32>
  %15263 = extractelement <2 x i32> %15262, i32 1
  %15264 = getelementptr inbounds i8, i8* %15246, i64 4
  %15265 = bitcast i8* %15264 to i32*
  store i32 %15263, i32* %15265, align 1, !tbaa !2453
  %15266 = extractelement <2 x i32> %15256, i32 0
  %15267 = getelementptr inbounds i8, i8* %15246, i64 8
  %15268 = bitcast i8* %15267 to i32*
  store i32 %15266, i32* %15268, align 1, !tbaa !2453
  %15269 = extractelement <2 x i32> %15256, i32 1
  %15270 = getelementptr inbounds i8, i8* %15246, i64 12
  %15271 = bitcast i8* %15270 to i32*
  store i32 %15269, i32* %15271, align 1, !tbaa !2453
  %15272 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15273 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %15274 = bitcast %union.vec128_t* %XMM1 to i8*
  %15275 = load i64, i64* %PC
  %15276 = add i64 %15275, 4
  store i64 %15276, i64* %PC
  %15277 = bitcast i8* %15273 to <2 x float>*
  %15278 = load <2 x float>, <2 x float>* %15277, align 1
  %15279 = getelementptr inbounds i8, i8* %15273, i64 8
  %15280 = bitcast i8* %15279 to <2 x i32>*
  %15281 = load <2 x i32>, <2 x i32>* %15280, align 1
  %15282 = bitcast i8* %15274 to <2 x float>*
  %15283 = load <2 x float>, <2 x float>* %15282, align 1
  %15284 = extractelement <2 x float> %15278, i32 0
  %15285 = extractelement <2 x float> %15283, i32 0
  %15286 = fadd float %15284, %15285
  %15287 = bitcast i8* %15272 to float*
  store float %15286, float* %15287, align 1, !tbaa !2453
  %15288 = bitcast <2 x float> %15278 to <2 x i32>
  %15289 = extractelement <2 x i32> %15288, i32 1
  %15290 = getelementptr inbounds i8, i8* %15272, i64 4
  %15291 = bitcast i8* %15290 to i32*
  store i32 %15289, i32* %15291, align 1, !tbaa !2453
  %15292 = extractelement <2 x i32> %15281, i32 0
  %15293 = getelementptr inbounds i8, i8* %15272, i64 8
  %15294 = bitcast i8* %15293 to i32*
  store i32 %15292, i32* %15294, align 1, !tbaa !2453
  %15295 = extractelement <2 x i32> %15281, i32 1
  %15296 = getelementptr inbounds i8, i8* %15272, i64 12
  %15297 = bitcast i8* %15296 to i32*
  store i32 %15295, i32* %15297, align 1, !tbaa !2453
  %15298 = load i64, i64* %RBP
  %15299 = sub i64 %15298, 64
  %15300 = load i64, i64* %PC
  %15301 = add i64 %15300, 4
  store i64 %15301, i64* %PC
  %15302 = inttoptr i64 %15299 to i64*
  %15303 = load i64, i64* %15302
  store i64 %15303, i64* %RAX, align 8, !tbaa !2428
  %15304 = load i64, i64* %RAX
  %15305 = load i64, i64* %PC
  %15306 = add i64 %15305, 3
  store i64 %15306, i64* %PC
  %15307 = inttoptr i64 %15304 to i64*
  %15308 = load i64, i64* %15307
  store i64 %15308, i64* %RAX, align 8, !tbaa !2428
  %15309 = load i64, i64* %RBP
  %15310 = sub i64 %15309, 64
  %15311 = load i64, i64* %PC
  %15312 = add i64 %15311, 4
  store i64 %15312, i64* %PC
  %15313 = inttoptr i64 %15310 to i64*
  %15314 = load i64, i64* %15313
  store i64 %15314, i64* %RCX, align 8, !tbaa !2428
  %15315 = load i64, i64* %RCX
  %15316 = add i64 %15315, 12
  %15317 = load i64, i64* %PC
  %15318 = add i64 %15317, 4
  store i64 %15318, i64* %PC
  %15319 = inttoptr i64 %15316 to i32*
  %15320 = load i32, i32* %15319
  %15321 = sext i32 %15320 to i64
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %15322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15322, align 1, !tbaa !2434
  %15323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %15323, align 1, !tbaa !2448
  %15324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15324, align 1, !tbaa !2449
  %15325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15325, align 1, !tbaa !2450
  %15326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %15326, align 1, !tbaa !2451
  %15327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %15327, align 1, !tbaa !2452
  %15328 = load i64, i64* %RBP
  %15329 = sub i64 %15328, 64
  %15330 = load i64, i64* %PC
  %15331 = add i64 %15330, 4
  store i64 %15331, i64* %PC
  %15332 = inttoptr i64 %15329 to i64*
  %15333 = load i64, i64* %15332
  store i64 %15333, i64* %RCX, align 8, !tbaa !2428
  %15334 = load i64, i64* %RDX
  %15335 = load i64, i64* %RCX
  %15336 = add i64 %15335, 16
  %15337 = load i64, i64* %PC
  %15338 = add i64 %15337, 4
  store i64 %15338, i64* %PC
  %15339 = inttoptr i64 %15336 to i32*
  %15340 = load i32, i32* %15339
  %15341 = shl i64 %15334, 32
  %15342 = ashr exact i64 %15341, 32
  %15343 = sext i32 %15340 to i64
  %15344 = mul nsw i64 %15343, %15342
  %15345 = trunc i64 %15344 to i32
  %15346 = and i64 %15344, 4294967295
  store i64 %15346, i64* %RDX, align 8, !tbaa !2428
  %15347 = shl i64 %15344, 32
  %15348 = ashr exact i64 %15347, 32
  %15349 = icmp ne i64 %15348, %15344
  %15350 = zext i1 %15349 to i8
  %15351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15350, i8* %15351, align 1, !tbaa !2434
  %15352 = and i32 %15345, 255
  %15353 = call i32 @llvm.ctpop.i32(i32 %15352) #16
  %15354 = trunc i32 %15353 to i8
  %15355 = and i8 %15354, 1
  %15356 = xor i8 %15355, 1
  %15357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15356, i8* %15357, align 1, !tbaa !2448
  %15358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15358, align 1, !tbaa !2449
  %15359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15359, align 1, !tbaa !2450
  %15360 = lshr i32 %15345, 31
  %15361 = trunc i32 %15360 to i8
  %15362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15361, i8* %15362, align 1, !tbaa !2451
  %15363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15350, i8* %15363, align 1, !tbaa !2452
  %15364 = load i64, i64* %RBP
  %15365 = sub i64 %15364, 64
  %15366 = load i64, i64* %PC
  %15367 = add i64 %15366, 4
  store i64 %15367, i64* %PC
  %15368 = inttoptr i64 %15365 to i64*
  %15369 = load i64, i64* %15368
  store i64 %15369, i64* %RCX, align 8, !tbaa !2428
  %15370 = load i64, i64* %RDX
  %15371 = load i64, i64* %RCX
  %15372 = add i64 %15371, 20
  %15373 = load i64, i64* %PC
  %15374 = add i64 %15373, 4
  store i64 %15374, i64* %PC
  %15375 = inttoptr i64 %15372 to i32*
  %15376 = load i32, i32* %15375
  %15377 = shl i64 %15370, 32
  %15378 = ashr exact i64 %15377, 32
  %15379 = sext i32 %15376 to i64
  %15380 = mul nsw i64 %15379, %15378
  %15381 = trunc i64 %15380 to i32
  %15382 = and i64 %15380, 4294967295
  store i64 %15382, i64* %RDX, align 8, !tbaa !2428
  %15383 = shl i64 %15380, 32
  %15384 = ashr exact i64 %15383, 32
  %15385 = icmp ne i64 %15384, %15380
  %15386 = zext i1 %15385 to i8
  %15387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15386, i8* %15387, align 1, !tbaa !2434
  %15388 = and i32 %15381, 255
  %15389 = call i32 @llvm.ctpop.i32(i32 %15388) #16
  %15390 = trunc i32 %15389 to i8
  %15391 = and i8 %15390, 1
  %15392 = xor i8 %15391, 1
  %15393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15392, i8* %15393, align 1, !tbaa !2448
  %15394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15394, align 1, !tbaa !2449
  %15395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15395, align 1, !tbaa !2450
  %15396 = lshr i32 %15381, 31
  %15397 = trunc i32 %15396 to i8
  %15398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15397, i8* %15398, align 1, !tbaa !2451
  %15399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15386, i8* %15399, align 1, !tbaa !2452
  %15400 = load i64, i64* %RBP
  %15401 = sub i64 %15400, 68
  %15402 = load i64, i64* %PC
  %15403 = add i64 %15402, 3
  store i64 %15403, i64* %PC
  %15404 = inttoptr i64 %15401 to i32*
  %15405 = load i32, i32* %15404
  %15406 = zext i32 %15405 to i64
  store i64 %15406, i64* %RSI, align 8, !tbaa !2428
  %15407 = load i64, i64* %RBP
  %15408 = sub i64 %15407, 64
  %15409 = load i64, i64* %PC
  %15410 = add i64 %15409, 4
  store i64 %15410, i64* %PC
  %15411 = inttoptr i64 %15408 to i64*
  %15412 = load i64, i64* %15411
  store i64 %15412, i64* %RCX, align 8, !tbaa !2428
  %15413 = load i64, i64* %RSI
  %15414 = load i64, i64* %RCX
  %15415 = add i64 %15414, 16
  %15416 = load i64, i64* %PC
  %15417 = add i64 %15416, 4
  store i64 %15417, i64* %PC
  %15418 = inttoptr i64 %15415 to i32*
  %15419 = load i32, i32* %15418
  %15420 = shl i64 %15413, 32
  %15421 = ashr exact i64 %15420, 32
  %15422 = sext i32 %15419 to i64
  %15423 = mul nsw i64 %15422, %15421
  %15424 = trunc i64 %15423 to i32
  %15425 = and i64 %15423, 4294967295
  store i64 %15425, i64* %RSI, align 8, !tbaa !2428
  %15426 = shl i64 %15423, 32
  %15427 = ashr exact i64 %15426, 32
  %15428 = icmp ne i64 %15427, %15423
  %15429 = zext i1 %15428 to i8
  %15430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15429, i8* %15430, align 1, !tbaa !2434
  %15431 = and i32 %15424, 255
  %15432 = call i32 @llvm.ctpop.i32(i32 %15431) #16
  %15433 = trunc i32 %15432 to i8
  %15434 = and i8 %15433, 1
  %15435 = xor i8 %15434, 1
  %15436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15435, i8* %15436, align 1, !tbaa !2448
  %15437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15437, align 1, !tbaa !2449
  %15438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15438, align 1, !tbaa !2450
  %15439 = lshr i32 %15424, 31
  %15440 = trunc i32 %15439 to i8
  %15441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15440, i8* %15441, align 1, !tbaa !2451
  %15442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15429, i8* %15442, align 1, !tbaa !2452
  %15443 = load i64, i64* %RBP
  %15444 = sub i64 %15443, 64
  %15445 = load i64, i64* %PC
  %15446 = add i64 %15445, 4
  store i64 %15446, i64* %PC
  %15447 = inttoptr i64 %15444 to i64*
  %15448 = load i64, i64* %15447
  store i64 %15448, i64* %RCX, align 8, !tbaa !2428
  %15449 = load i64, i64* %RSI
  %15450 = load i64, i64* %RCX
  %15451 = add i64 %15450, 20
  %15452 = load i64, i64* %PC
  %15453 = add i64 %15452, 4
  store i64 %15453, i64* %PC
  %15454 = inttoptr i64 %15451 to i32*
  %15455 = load i32, i32* %15454
  %15456 = shl i64 %15449, 32
  %15457 = ashr exact i64 %15456, 32
  %15458 = sext i32 %15455 to i64
  %15459 = mul nsw i64 %15458, %15457
  %15460 = trunc i64 %15459 to i32
  %15461 = and i64 %15459, 4294967295
  store i64 %15461, i64* %RSI, align 8, !tbaa !2428
  %15462 = shl i64 %15459, 32
  %15463 = ashr exact i64 %15462, 32
  %15464 = icmp ne i64 %15463, %15459
  %15465 = zext i1 %15464 to i8
  %15466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15465, i8* %15466, align 1, !tbaa !2434
  %15467 = and i32 %15460, 255
  %15468 = call i32 @llvm.ctpop.i32(i32 %15467) #16
  %15469 = trunc i32 %15468 to i8
  %15470 = and i8 %15469, 1
  %15471 = xor i8 %15470, 1
  %15472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15471, i8* %15472, align 1, !tbaa !2448
  %15473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15473, align 1, !tbaa !2449
  %15474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15474, align 1, !tbaa !2450
  %15475 = lshr i32 %15460, 31
  %15476 = trunc i32 %15475 to i8
  %15477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15476, i8* %15477, align 1, !tbaa !2451
  %15478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15465, i8* %15478, align 1, !tbaa !2452
  %15479 = load i64, i64* %RDX
  %15480 = load i32, i32* %ESI
  %15481 = zext i32 %15480 to i64
  %15482 = load i64, i64* %PC
  %15483 = add i64 %15482, 2
  store i64 %15483, i64* %PC
  %15484 = trunc i64 %15479 to i32
  %15485 = add i32 %15480, %15484
  %15486 = zext i32 %15485 to i64
  store i64 %15486, i64* %RDX, align 8, !tbaa !2428
  %15487 = icmp ult i32 %15485, %15484
  %15488 = icmp ult i32 %15485, %15480
  %15489 = or i1 %15487, %15488
  %15490 = zext i1 %15489 to i8
  %15491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15490, i8* %15491, align 1, !tbaa !2434
  %15492 = and i32 %15485, 255
  %15493 = call i32 @llvm.ctpop.i32(i32 %15492) #16
  %15494 = trunc i32 %15493 to i8
  %15495 = and i8 %15494, 1
  %15496 = xor i8 %15495, 1
  %15497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15496, i8* %15497, align 1, !tbaa !2448
  %15498 = xor i64 %15481, %15479
  %15499 = trunc i64 %15498 to i32
  %15500 = xor i32 %15499, %15485
  %15501 = lshr i32 %15500, 4
  %15502 = trunc i32 %15501 to i8
  %15503 = and i8 %15502, 1
  %15504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15503, i8* %15504, align 1, !tbaa !2449
  %15505 = icmp eq i32 %15485, 0
  %15506 = zext i1 %15505 to i8
  %15507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15506, i8* %15507, align 1, !tbaa !2450
  %15508 = lshr i32 %15485, 31
  %15509 = trunc i32 %15508 to i8
  %15510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15509, i8* %15510, align 1, !tbaa !2451
  %15511 = lshr i32 %15484, 31
  %15512 = lshr i32 %15480, 31
  %15513 = xor i32 %15508, %15511
  %15514 = xor i32 %15508, %15512
  %15515 = add nuw nsw i32 %15513, %15514
  %15516 = icmp eq i32 %15515, 2
  %15517 = zext i1 %15516 to i8
  %15518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15517, i8* %15518, align 1, !tbaa !2452
  %15519 = load i64, i64* %RBP
  %15520 = sub i64 %15519, 72
  %15521 = load i64, i64* %PC
  %15522 = add i64 %15521, 3
  store i64 %15522, i64* %PC
  %15523 = inttoptr i64 %15520 to i32*
  %15524 = load i32, i32* %15523
  %15525 = zext i32 %15524 to i64
  store i64 %15525, i64* %RSI, align 8, !tbaa !2428
  %15526 = load i64, i64* %RBP
  %15527 = sub i64 %15526, 64
  %15528 = load i64, i64* %PC
  %15529 = add i64 %15528, 4
  store i64 %15529, i64* %PC
  %15530 = inttoptr i64 %15527 to i64*
  %15531 = load i64, i64* %15530
  store i64 %15531, i64* %RCX, align 8, !tbaa !2428
  %15532 = load i64, i64* %RSI
  %15533 = load i64, i64* %RCX
  %15534 = add i64 %15533, 20
  %15535 = load i64, i64* %PC
  %15536 = add i64 %15535, 4
  store i64 %15536, i64* %PC
  %15537 = inttoptr i64 %15534 to i32*
  %15538 = load i32, i32* %15537
  %15539 = shl i64 %15532, 32
  %15540 = ashr exact i64 %15539, 32
  %15541 = sext i32 %15538 to i64
  %15542 = mul nsw i64 %15541, %15540
  %15543 = trunc i64 %15542 to i32
  %15544 = and i64 %15542, 4294967295
  store i64 %15544, i64* %RSI, align 8, !tbaa !2428
  %15545 = shl i64 %15542, 32
  %15546 = ashr exact i64 %15545, 32
  %15547 = icmp ne i64 %15546, %15542
  %15548 = zext i1 %15547 to i8
  %15549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15548, i8* %15549, align 1, !tbaa !2434
  %15550 = and i32 %15543, 255
  %15551 = call i32 @llvm.ctpop.i32(i32 %15550) #16
  %15552 = trunc i32 %15551 to i8
  %15553 = and i8 %15552, 1
  %15554 = xor i8 %15553, 1
  %15555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15554, i8* %15555, align 1, !tbaa !2448
  %15556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15556, align 1, !tbaa !2449
  %15557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %15557, align 1, !tbaa !2450
  %15558 = lshr i32 %15543, 31
  %15559 = trunc i32 %15558 to i8
  %15560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15559, i8* %15560, align 1, !tbaa !2451
  %15561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15548, i8* %15561, align 1, !tbaa !2452
  %15562 = load i64, i64* %RDX
  %15563 = load i32, i32* %ESI
  %15564 = zext i32 %15563 to i64
  %15565 = load i64, i64* %PC
  %15566 = add i64 %15565, 2
  store i64 %15566, i64* %PC
  %15567 = trunc i64 %15562 to i32
  %15568 = add i32 %15563, %15567
  %15569 = zext i32 %15568 to i64
  store i64 %15569, i64* %RDX, align 8, !tbaa !2428
  %15570 = icmp ult i32 %15568, %15567
  %15571 = icmp ult i32 %15568, %15563
  %15572 = or i1 %15570, %15571
  %15573 = zext i1 %15572 to i8
  %15574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15573, i8* %15574, align 1, !tbaa !2434
  %15575 = and i32 %15568, 255
  %15576 = call i32 @llvm.ctpop.i32(i32 %15575) #16
  %15577 = trunc i32 %15576 to i8
  %15578 = and i8 %15577, 1
  %15579 = xor i8 %15578, 1
  %15580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15579, i8* %15580, align 1, !tbaa !2448
  %15581 = xor i64 %15564, %15562
  %15582 = trunc i64 %15581 to i32
  %15583 = xor i32 %15582, %15568
  %15584 = lshr i32 %15583, 4
  %15585 = trunc i32 %15584 to i8
  %15586 = and i8 %15585, 1
  %15587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15586, i8* %15587, align 1, !tbaa !2449
  %15588 = icmp eq i32 %15568, 0
  %15589 = zext i1 %15588 to i8
  %15590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15589, i8* %15590, align 1, !tbaa !2450
  %15591 = lshr i32 %15568, 31
  %15592 = trunc i32 %15591 to i8
  %15593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15592, i8* %15593, align 1, !tbaa !2451
  %15594 = lshr i32 %15567, 31
  %15595 = lshr i32 %15563, 31
  %15596 = xor i32 %15591, %15594
  %15597 = xor i32 %15591, %15595
  %15598 = add nuw nsw i32 %15596, %15597
  %15599 = icmp eq i32 %15598, 2
  %15600 = zext i1 %15599 to i8
  %15601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15600, i8* %15601, align 1, !tbaa !2452
  %15602 = load i64, i64* %RDX
  %15603 = load i64, i64* %RBP
  %15604 = sub i64 %15603, 76
  %15605 = load i64, i64* %PC
  %15606 = add i64 %15605, 3
  store i64 %15606, i64* %PC
  %15607 = trunc i64 %15602 to i32
  %15608 = inttoptr i64 %15604 to i32*
  %15609 = load i32, i32* %15608
  %15610 = add i32 %15609, %15607
  %15611 = zext i32 %15610 to i64
  store i64 %15611, i64* %RDX, align 8, !tbaa !2428
  %15612 = icmp ult i32 %15610, %15607
  %15613 = icmp ult i32 %15610, %15609
  %15614 = or i1 %15612, %15613
  %15615 = zext i1 %15614 to i8
  %15616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15615, i8* %15616, align 1, !tbaa !2434
  %15617 = and i32 %15610, 255
  %15618 = call i32 @llvm.ctpop.i32(i32 %15617) #16
  %15619 = trunc i32 %15618 to i8
  %15620 = and i8 %15619, 1
  %15621 = xor i8 %15620, 1
  %15622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15621, i8* %15622, align 1, !tbaa !2448
  %15623 = xor i32 %15609, %15607
  %15624 = xor i32 %15623, %15610
  %15625 = lshr i32 %15624, 4
  %15626 = trunc i32 %15625 to i8
  %15627 = and i8 %15626, 1
  %15628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15627, i8* %15628, align 1, !tbaa !2449
  %15629 = icmp eq i32 %15610, 0
  %15630 = zext i1 %15629 to i8
  %15631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15630, i8* %15631, align 1, !tbaa !2450
  %15632 = lshr i32 %15610, 31
  %15633 = trunc i32 %15632 to i8
  %15634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15633, i8* %15634, align 1, !tbaa !2451
  %15635 = lshr i32 %15607, 31
  %15636 = lshr i32 %15609, 31
  %15637 = xor i32 %15632, %15635
  %15638 = xor i32 %15632, %15636
  %15639 = add nuw nsw i32 %15637, %15638
  %15640 = icmp eq i32 %15639, 2
  %15641 = zext i1 %15640 to i8
  %15642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15641, i8* %15642, align 1, !tbaa !2452
  %15643 = load i32, i32* %EDX
  %15644 = zext i32 %15643 to i64
  %15645 = load i64, i64* %PC
  %15646 = add i64 %15645, 3
  store i64 %15646, i64* %PC
  %15647 = shl i64 %15644, 32
  %15648 = ashr exact i64 %15647, 32
  store i64 %15648, i64* %RCX, align 8, !tbaa !2428
  %15649 = load i64, i64* %RAX
  %15650 = load i64, i64* %RCX
  %15651 = mul i64 %15650, 4
  %15652 = add i64 %15651, %15649
  %15653 = bitcast %union.vec128_t* %XMM0 to i8*
  %15654 = load i64, i64* %PC
  %15655 = add i64 %15654, 5
  store i64 %15655, i64* %PC
  %15656 = bitcast i8* %15653 to <2 x float>*
  %15657 = load <2 x float>, <2 x float>* %15656, align 1
  %15658 = extractelement <2 x float> %15657, i32 0
  %15659 = inttoptr i64 %15652 to float*
  store float %15658, float* %15659
  %15660 = load i64, i64* %RBP
  %15661 = sub i64 %15660, 76
  %15662 = load i64, i64* %PC
  %15663 = add i64 %15662, 3
  store i64 %15663, i64* %PC
  %15664 = inttoptr i64 %15661 to i32*
  %15665 = load i32, i32* %15664
  %15666 = zext i32 %15665 to i64
  store i64 %15666, i64* %RAX, align 8, !tbaa !2428
  %15667 = load i64, i64* %RAX
  %15668 = load i64, i64* %PC
  %15669 = add i64 %15668, 3
  store i64 %15669, i64* %PC
  %15670 = trunc i64 %15667 to i32
  %15671 = add i32 1, %15670
  %15672 = zext i32 %15671 to i64
  store i64 %15672, i64* %RAX, align 8, !tbaa !2428
  %15673 = icmp ult i32 %15671, %15670
  %15674 = icmp ult i32 %15671, 1
  %15675 = or i1 %15673, %15674
  %15676 = zext i1 %15675 to i8
  %15677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15676, i8* %15677, align 1, !tbaa !2434
  %15678 = and i32 %15671, 255
  %15679 = call i32 @llvm.ctpop.i32(i32 %15678) #16
  %15680 = trunc i32 %15679 to i8
  %15681 = and i8 %15680, 1
  %15682 = xor i8 %15681, 1
  %15683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15682, i8* %15683, align 1, !tbaa !2448
  %15684 = xor i64 1, %15667
  %15685 = trunc i64 %15684 to i32
  %15686 = xor i32 %15685, %15671
  %15687 = lshr i32 %15686, 4
  %15688 = trunc i32 %15687 to i8
  %15689 = and i8 %15688, 1
  %15690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15689, i8* %15690, align 1, !tbaa !2449
  %15691 = icmp eq i32 %15671, 0
  %15692 = zext i1 %15691 to i8
  %15693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15692, i8* %15693, align 1, !tbaa !2450
  %15694 = lshr i32 %15671, 31
  %15695 = trunc i32 %15694 to i8
  %15696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15695, i8* %15696, align 1, !tbaa !2451
  %15697 = lshr i32 %15670, 31
  %15698 = xor i32 %15694, %15697
  %15699 = add nuw nsw i32 %15698, %15694
  %15700 = icmp eq i32 %15699, 2
  %15701 = zext i1 %15700 to i8
  %15702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15701, i8* %15702, align 1, !tbaa !2452
  %15703 = load i64, i64* %RBP
  %15704 = sub i64 %15703, 76
  %15705 = load i32, i32* %EAX
  %15706 = zext i32 %15705 to i64
  %15707 = load i64, i64* %PC
  %15708 = add i64 %15707, 3
  store i64 %15708, i64* %PC
  %15709 = inttoptr i64 %15704 to i32*
  store i32 %15705, i32* %15709
  %15710 = load i64, i64* %PC
  %15711 = sub i64 %15710, 2748
  %15712 = load i64, i64* %PC
  %15713 = add i64 %15712, 5
  store i64 %15713, i64* %PC
  %15714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %15711, i64* %15714, align 8, !tbaa !2428
  br label %block_400d8a

block_40188b:                                     ; preds = %block_401884, %block_401950
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.0, %block_401884 ], [ %MEMORY.3, %block_401950 ]
  %15715 = load i64, i64* %RBP
  %15716 = sub i64 %15715, 72
  %15717 = load i64, i64* %PC
  %15718 = add i64 %15717, 3
  store i64 %15718, i64* %PC
  %15719 = inttoptr i64 %15716 to i32*
  %15720 = load i32, i32* %15719
  %15721 = zext i32 %15720 to i64
  store i64 %15721, i64* %RAX, align 8, !tbaa !2428
  %15722 = load i32, i32* %EAX
  %15723 = zext i32 %15722 to i64
  %15724 = load i64, i64* %RBP
  %15725 = sub i64 %15724, 88
  %15726 = load i64, i64* %PC
  %15727 = add i64 %15726, 3
  store i64 %15727, i64* %PC
  %15728 = inttoptr i64 %15725 to i32*
  %15729 = load i32, i32* %15728
  %15730 = sub i32 %15722, %15729
  %15731 = icmp ult i32 %15722, %15729
  %15732 = zext i1 %15731 to i8
  %15733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15732, i8* %15733, align 1, !tbaa !2434
  %15734 = and i32 %15730, 255
  %15735 = call i32 @llvm.ctpop.i32(i32 %15734) #16
  %15736 = trunc i32 %15735 to i8
  %15737 = and i8 %15736, 1
  %15738 = xor i8 %15737, 1
  %15739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15738, i8* %15739, align 1, !tbaa !2448
  %15740 = xor i32 %15729, %15722
  %15741 = xor i32 %15740, %15730
  %15742 = lshr i32 %15741, 4
  %15743 = trunc i32 %15742 to i8
  %15744 = and i8 %15743, 1
  %15745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15744, i8* %15745, align 1, !tbaa !2449
  %15746 = icmp eq i32 %15730, 0
  %15747 = zext i1 %15746 to i8
  %15748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15747, i8* %15748, align 1, !tbaa !2450
  %15749 = lshr i32 %15730, 31
  %15750 = trunc i32 %15749 to i8
  %15751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15750, i8* %15751, align 1, !tbaa !2451
  %15752 = lshr i32 %15722, 31
  %15753 = lshr i32 %15729, 31
  %15754 = xor i32 %15753, %15752
  %15755 = xor i32 %15749, %15752
  %15756 = add nuw nsw i32 %15755, %15754
  %15757 = icmp eq i32 %15756, 2
  %15758 = zext i1 %15757 to i8
  %15759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15758, i8* %15759, align 1, !tbaa !2452
  %15760 = load i64, i64* %PC
  %15761 = add i64 %15760, 210
  %15762 = load i64, i64* %PC
  %15763 = add i64 %15762, 6
  %15764 = load i64, i64* %PC
  %15765 = add i64 %15764, 6
  store i64 %15765, i64* %PC
  %15766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15767 = load i8, i8* %15766, align 1, !tbaa !2451
  %15768 = icmp ne i8 %15767, 0
  %15769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15770 = load i8, i8* %15769, align 1, !tbaa !2452
  %15771 = icmp ne i8 %15770, 0
  %15772 = xor i1 %15768, %15771
  %15773 = xor i1 %15772, true
  %15774 = zext i1 %15773 to i8
  store i8 %15774, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %15775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15776 = select i1 %15772, i64 %15763, i64 %15761
  store i64 %15776, i64* %15775, align 8, !tbaa !2428
  %15777 = load i8, i8* %BRANCH_TAKEN
  %15778 = icmp eq i8 %15777, 1
  br i1 %15778, label %block_401963, label %block_401897

block_400d8a:                                     ; preds = %block_400d83, %block_400d96
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_400d83 ], [ %MEMORY.5, %block_400d96 ]
  %15779 = load i64, i64* %RBP
  %15780 = sub i64 %15779, 76
  %15781 = load i64, i64* %PC
  %15782 = add i64 %15781, 3
  store i64 %15782, i64* %PC
  %15783 = inttoptr i64 %15780 to i32*
  %15784 = load i32, i32* %15783
  %15785 = zext i32 %15784 to i64
  store i64 %15785, i64* %RAX, align 8, !tbaa !2428
  %15786 = load i32, i32* %EAX
  %15787 = zext i32 %15786 to i64
  %15788 = load i64, i64* %RBP
  %15789 = sub i64 %15788, 92
  %15790 = load i64, i64* %PC
  %15791 = add i64 %15790, 3
  store i64 %15791, i64* %PC
  %15792 = inttoptr i64 %15789 to i32*
  %15793 = load i32, i32* %15792
  %15794 = sub i32 %15786, %15793
  %15795 = icmp ult i32 %15786, %15793
  %15796 = zext i1 %15795 to i8
  %15797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15796, i8* %15797, align 1, !tbaa !2434
  %15798 = and i32 %15794, 255
  %15799 = call i32 @llvm.ctpop.i32(i32 %15798) #16
  %15800 = trunc i32 %15799 to i8
  %15801 = and i8 %15800, 1
  %15802 = xor i8 %15801, 1
  %15803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15802, i8* %15803, align 1, !tbaa !2448
  %15804 = xor i32 %15793, %15786
  %15805 = xor i32 %15804, %15794
  %15806 = lshr i32 %15805, 4
  %15807 = trunc i32 %15806 to i8
  %15808 = and i8 %15807, 1
  %15809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15808, i8* %15809, align 1, !tbaa !2449
  %15810 = icmp eq i32 %15794, 0
  %15811 = zext i1 %15810 to i8
  %15812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15811, i8* %15812, align 1, !tbaa !2450
  %15813 = lshr i32 %15794, 31
  %15814 = trunc i32 %15813 to i8
  %15815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15814, i8* %15815, align 1, !tbaa !2451
  %15816 = lshr i32 %15786, 31
  %15817 = lshr i32 %15793, 31
  %15818 = xor i32 %15817, %15816
  %15819 = xor i32 %15813, %15816
  %15820 = add nuw nsw i32 %15819, %15818
  %15821 = icmp eq i32 %15820, 2
  %15822 = zext i1 %15821 to i8
  %15823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15822, i8* %15823, align 1, !tbaa !2452
  %15824 = load i64, i64* %PC
  %15825 = add i64 %15824, 2747
  %15826 = load i64, i64* %PC
  %15827 = add i64 %15826, 6
  %15828 = load i64, i64* %PC
  %15829 = add i64 %15828, 6
  store i64 %15829, i64* %PC
  %15830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15831 = load i8, i8* %15830, align 1, !tbaa !2451
  %15832 = icmp ne i8 %15831, 0
  %15833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15834 = load i8, i8* %15833, align 1, !tbaa !2452
  %15835 = icmp ne i8 %15834, 0
  %15836 = xor i1 %15832, %15835
  %15837 = xor i1 %15836, true
  %15838 = zext i1 %15837 to i8
  store i8 %15838, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %15839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15840 = select i1 %15836, i64 %15827, i64 %15825
  store i64 %15840, i64* %15839, align 8, !tbaa !2428
  %15841 = load i8, i8* %BRANCH_TAKEN
  %15842 = icmp eq i8 %15841, 1
  br i1 %15842, label %block_40184b, label %block_400d96

block_401989:                                     ; preds = %block_400d49
  %15843 = load i64, i64* %RBP
  %15844 = sub i64 %15843, 96
  %15845 = load i64, i64* %PC
  %15846 = add i64 %15845, 5
  store i64 %15846, i64* %PC
  %15847 = inttoptr i64 %15844 to float*
  %15848 = load float, float* %15847
  %15849 = bitcast i8* %15940 to float*
  store float %15848, float* %15849, align 1, !tbaa !2453
  %15850 = getelementptr inbounds i8, i8* %15940, i64 4
  %15851 = bitcast i8* %15850 to float*
  store float 0.000000e+00, float* %15851, align 1, !tbaa !2453
  %15852 = getelementptr inbounds i8, i8* %15940, i64 8
  %15853 = bitcast i8* %15852 to float*
  store float 0.000000e+00, float* %15853, align 1, !tbaa !2453
  %15854 = getelementptr inbounds i8, i8* %15940, i64 12
  %15855 = bitcast i8* %15854 to float*
  store float 0.000000e+00, float* %15855, align 1, !tbaa !2453
  %15856 = load i64, i64* %PC
  %15857 = add i64 %15856, 1
  store i64 %15857, i64* %PC
  %15858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15859 = load i64, i64* %15858, align 8, !tbaa !2428
  %15860 = add i64 %15859, 8
  %15861 = inttoptr i64 %15859 to i64*
  %15862 = load i64, i64* %15861
  store i64 %15862, i64* %RBP, align 8, !tbaa !2428
  store i64 %15860, i64* %15858, align 8, !tbaa !2428
  %15863 = load i64, i64* %PC
  %15864 = add i64 %15863, 1
  store i64 %15864, i64* %PC
  %15865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %15867 = load i64, i64* %15866, align 8, !tbaa !2428
  %15868 = inttoptr i64 %15867 to i64*
  %15869 = load i64, i64* %15868
  store i64 %15869, i64* %15865, align 8, !tbaa !2428
  %15870 = add i64 %15867, 8
  store i64 %15870, i64* %15866, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_401884:                                     ; preds = %block_401878
  %15871 = load i64, i64* %RBP
  %15872 = sub i64 %15871, 72
  %15873 = load i64, i64* %PC
  %15874 = add i64 %15873, 7
  store i64 %15874, i64* %PC
  %15875 = inttoptr i64 %15872 to i32*
  store i32 1, i32* %15875
  br label %block_40188b

block_400d49:                                     ; preds = %block_401976, %block_400cf0
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_400cf0 ], [ %MEMORY.0, %block_401976 ]
  %15876 = load i64, i64* %RBP
  %15877 = sub i64 %15876, 80
  %15878 = load i64, i64* %PC
  %15879 = add i64 %15878, 3
  store i64 %15879, i64* %PC
  %15880 = inttoptr i64 %15877 to i32*
  %15881 = load i32, i32* %15880
  %15882 = zext i32 %15881 to i64
  store i64 %15882, i64* %RAX, align 8, !tbaa !2428
  %15883 = load i32, i32* %EAX
  %15884 = zext i32 %15883 to i64
  %15885 = load i64, i64* %RBP
  %15886 = sub i64 %15885, 4
  %15887 = load i64, i64* %PC
  %15888 = add i64 %15887, 3
  store i64 %15888, i64* %PC
  %15889 = inttoptr i64 %15886 to i32*
  %15890 = load i32, i32* %15889
  %15891 = sub i32 %15883, %15890
  %15892 = icmp ult i32 %15883, %15890
  %15893 = zext i1 %15892 to i8
  %15894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15893, i8* %15894, align 1, !tbaa !2434
  %15895 = and i32 %15891, 255
  %15896 = call i32 @llvm.ctpop.i32(i32 %15895) #16
  %15897 = trunc i32 %15896 to i8
  %15898 = and i8 %15897, 1
  %15899 = xor i8 %15898, 1
  %15900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15899, i8* %15900, align 1, !tbaa !2448
  %15901 = xor i32 %15890, %15883
  %15902 = xor i32 %15901, %15891
  %15903 = lshr i32 %15902, 4
  %15904 = trunc i32 %15903 to i8
  %15905 = and i8 %15904, 1
  %15906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %15905, i8* %15906, align 1, !tbaa !2449
  %15907 = icmp eq i32 %15891, 0
  %15908 = zext i1 %15907 to i8
  %15909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15908, i8* %15909, align 1, !tbaa !2450
  %15910 = lshr i32 %15891, 31
  %15911 = trunc i32 %15910 to i8
  %15912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15911, i8* %15912, align 1, !tbaa !2451
  %15913 = lshr i32 %15883, 31
  %15914 = lshr i32 %15890, 31
  %15915 = xor i32 %15914, %15913
  %15916 = xor i32 %15910, %15913
  %15917 = add nuw nsw i32 %15916, %15915
  %15918 = icmp eq i32 %15917, 2
  %15919 = zext i1 %15918 to i8
  %15920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %15919, i8* %15920, align 1, !tbaa !2452
  %15921 = load i64, i64* %PC
  %15922 = add i64 %15921, 3130
  %15923 = load i64, i64* %PC
  %15924 = add i64 %15923, 6
  %15925 = load i64, i64* %PC
  %15926 = add i64 %15925, 6
  store i64 %15926, i64* %PC
  %15927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15928 = load i8, i8* %15927, align 1, !tbaa !2451
  %15929 = icmp ne i8 %15928, 0
  %15930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %15931 = load i8, i8* %15930, align 1, !tbaa !2452
  %15932 = icmp ne i8 %15931, 0
  %15933 = xor i1 %15929, %15932
  %15934 = xor i1 %15933, true
  %15935 = zext i1 %15934 to i8
  store i8 %15935, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %15936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %15937 = select i1 %15933, i64 %15924, i64 %15922
  store i64 %15937, i64* %15936, align 8, !tbaa !2428
  %15938 = load i8, i8* %BRANCH_TAKEN
  %15939 = icmp eq i8 %15938, 1
  %15940 = bitcast %"class.std::bitset"* %YMM0 to i8*
  br i1 %15939, label %block_401989, label %block_400d55

block_400d83:                                     ; preds = %block_400d77
  %15941 = load i64, i64* %RBP
  %15942 = sub i64 %15941, 76
  %15943 = load i64, i64* %PC
  %15944 = add i64 %15943, 7
  store i64 %15944, i64* %PC
  %15945 = inttoptr i64 %15942 to i32*
  store i32 1, i32* %15945
  br label %block_400d8a
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005c0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005c0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401a50_mflops(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401a50:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 11
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EDI = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 15
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RBP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %16 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %15, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %16 to %"class.std::bitset"*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %18 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %17, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %18 to %"class.std::bitset"*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %20 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %19, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %20 to %"class.std::bitset"*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %22 to %union.vec128_t*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %24 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %23, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %24 to %union.vec128_t*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %26 to %union.vec128_t*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 8
  store i64 %39, i64* %PC
  %40 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 24) to double*)
  %41 = bitcast i8* %37 to double*
  store double %40, double* %41, align 1, !tbaa !2432
  %42 = getelementptr inbounds i8, i8* %37, i64 8
  %43 = bitcast i8* %42 to double*
  store double 0.000000e+00, double* %43, align 1, !tbaa !2432
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 4
  %46 = load i32, i32* %EDI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = bitcast %union.vec128_t* %XMM0 to i8*
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = bitcast i8* %53 to double*
  %57 = load double, double* %56, align 1
  %58 = inttoptr i64 %52 to double*
  store double %57, double* %58
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 24
  %61 = bitcast %union.vec128_t* %XMM1 to i8*
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 5
  store i64 %63, i64* %PC
  %64 = bitcast i8* %61 to double*
  %65 = load double, double* %64, align 1
  %66 = inttoptr i64 %60 to double*
  store double %65, double* %66
  %67 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %68 = load i64, i64* %RBP
  %69 = sub i64 %68, 24
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %69 to double*
  %73 = load double, double* %72
  %74 = bitcast i8* %67 to double*
  store double %73, double* %74, align 1, !tbaa !2432
  %75 = getelementptr inbounds i8, i8* %67, i64 8
  %76 = bitcast i8* %75 to double*
  store double 0.000000e+00, double* %76, align 1, !tbaa !2432
  %77 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %78 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 5
  store i64 %82, i64* %PC
  %83 = bitcast i8* %78 to double*
  %84 = load double, double* %83, align 1
  %85 = getelementptr inbounds i8, i8* %78, i64 8
  %86 = bitcast i8* %85 to i64*
  %87 = load i64, i64* %86, align 1
  %88 = inttoptr i64 %80 to double*
  %89 = load double, double* %88
  %90 = fdiv double %84, %89
  %91 = bitcast i8* %77 to double*
  store double %90, double* %91, align 1, !tbaa !2432
  %92 = getelementptr inbounds i8, i8* %77, i64 8
  %93 = bitcast i8* %92 to i64*
  store i64 %87, i64* %93, align 1, !tbaa !2432
  %94 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %95 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %96 = bitcast %union.vec128_t* %XMM2 to i8*
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = bitcast i8* %95 to double*
  %100 = load double, double* %99, align 1
  %101 = getelementptr inbounds i8, i8* %95, i64 8
  %102 = bitcast i8* %101 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = bitcast i8* %96 to double*
  %105 = load double, double* %104, align 1
  %106 = fmul double %100, %105
  %107 = bitcast i8* %94 to double*
  store double %106, double* %107, align 1, !tbaa !2432
  %108 = getelementptr inbounds i8, i8* %94, i64 8
  %109 = bitcast i8* %108 to i64*
  store i64 %103, i64* %109, align 1, !tbaa !2432
  %110 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 4
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 5
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i32*
  %116 = load i32, i32* %115
  %117 = sitofp i32 %116 to double
  %118 = bitcast i8* %110 to double*
  store double %117, double* %118, align 1, !tbaa !2432
  %119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %121 = bitcast %union.vec128_t* %XMM1 to i8*
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = bitcast i8* %120 to double*
  %125 = load double, double* %124, align 1
  %126 = getelementptr inbounds i8, i8* %120, i64 8
  %127 = bitcast i8* %126 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = bitcast i8* %121 to double*
  %130 = load double, double* %129, align 1
  %131 = fmul double %125, %130
  %132 = bitcast i8* %119 to double*
  store double %131, double* %132, align 1, !tbaa !2432
  %133 = getelementptr inbounds i8, i8* %119, i64 8
  %134 = bitcast i8* %133 to i64*
  store i64 %128, i64* %134, align 1, !tbaa !2432
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, 8
  %140 = inttoptr i64 %138 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RBP, align 8, !tbaa !2428
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 1
  store i64 %143, i64* %PC
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !tbaa !2428
  %147 = inttoptr i64 %146 to i64*
  %148 = load i64, i64* %147
  store i64 %148, i64* %144, align 8, !tbaa !2428
  %149 = add i64 %146, 8
  store i64 %149, i64* %145, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401d30___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401d30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2434
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2449
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2450
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2451
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2452
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2434
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2448
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2449
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2450
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2451
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2452
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2455
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2455
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2455
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2455
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2455
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2455
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 6228
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400508__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2434
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2448
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2450
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2451
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2452
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2449
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2450
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401d86, label %block_401d66

block_401d86:                                     ; preds = %block_401d70, %block_401d30
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_401d30 ], [ %387, %block_401d70 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2434
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2448
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2450
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2451
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2452
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401d66:                                     ; preds = %block_401d30
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2434
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2448
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2450
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2451
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2452
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2449
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401d70

block_401d70:                                     ; preds = %block_401d70, %block_401d66
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401d66 ], [ %387, %block_401d70 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2434
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2448
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2449
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2450
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2451
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2452
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2434
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2448
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2449
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2450
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2451
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2452
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2450
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401d70, label %block_401d86
}

; Function Attrs: noinline
define %struct.Memory* @sub_400a80_newMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400a80:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 5
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %ECX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 17
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R8D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 1
  store i64 %38, i64* %PC
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %40 = load i64, i64* %39, align 8, !tbaa !2428
  %41 = add i64 %40, -8
  %42 = inttoptr i64 %41 to i64*
  store i64 %36, i64* %42
  store i64 %41, i64* %39, align 8, !tbaa !2428
  %43 = load i64, i64* %RSP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %46 = load i64, i64* %RSP
  %47 = load i64, i64* %PC
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC
  %49 = sub i64 %46, 32
  store i64 %49, i64* %RSP, align 8, !tbaa !2428
  %50 = icmp ult i64 %46, 32
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %51, i8* %52, align 1, !tbaa !2434
  %53 = trunc i64 %49 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = xor i64 32, %46
  %61 = xor i64 %60, %49
  %62 = lshr i64 %61, 4
  %63 = trunc i64 %62 to i8
  %64 = and i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = icmp eq i64 %49, 0
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %49, 63
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %70, i8* %71, align 1, !tbaa !2451
  %72 = lshr i64 %46, 63
  %73 = xor i64 %69, %72
  %74 = add nuw nsw i64 %73, %72
  %75 = icmp eq i64 %74, 2
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %76, i8* %77, align 1, !tbaa !2452
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 8
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 12
  %86 = load i32, i32* %ESI
  %87 = zext i32 %86 to i64
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 3
  store i64 %89, i64* %PC
  %90 = inttoptr i64 %85 to i32*
  store i32 %86, i32* %90
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i32, i32* %EDX
  %94 = zext i32 %93 to i64
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %92 to i32*
  store i32 %93, i32* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 20
  %100 = load i32, i32* %ECX
  %101 = zext i32 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 3
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %99 to i32*
  store i32 %100, i32* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 24
  %107 = load i32, i32* %R8D
  %108 = zext i32 %107 to i64
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %106 to i32*
  store i32 %107, i32* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 12
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 3
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i32*
  %117 = load i32, i32* %116
  %118 = zext i32 %117 to i64
  store i64 %118, i64* %RCX, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 8
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  store i64 %124, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %RDI
  %126 = add i64 %125, 8
  %127 = load i32, i32* %ECX
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 3
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %126 to i32*
  store i32 %127, i32* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 16
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 3
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %RCX, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 8
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %145 = load i64, i64* %RDI
  %146 = add i64 %145, 12
  %147 = load i32, i32* %ECX
  %148 = zext i32 %147 to i64
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %146 to i32*
  store i32 %147, i32* %151
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 20
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 3
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RCX, align 8, !tbaa !2428
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RDI, align 8, !tbaa !2428
  %165 = load i64, i64* %RDI
  %166 = add i64 %165, 16
  %167 = load i32, i32* %ECX
  %168 = zext i32 %167 to i64
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 3
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %166 to i32*
  store i32 %167, i32* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 24
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RDI, align 8, !tbaa !2428
  %185 = load i64, i64* %RDI
  %186 = add i64 %185, 20
  %187 = load i32, i32* %ECX
  %188 = zext i32 %187 to i64
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %186 to i32*
  store i32 %187, i32* %191
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %198 = load i64, i64* %RDI
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 7
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i64*
  store i64 0, i64* %201
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 12
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 3
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = load i64, i64* %RCX
  %210 = load i64, i64* %RBP
  %211 = sub i64 %210, 16
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  %215 = load i32, i32* %214
  %216 = shl i64 %209, 32
  %217 = ashr exact i64 %216, 32
  %218 = sext i32 %215 to i64
  %219 = mul nsw i64 %218, %217
  %220 = trunc i64 %219 to i32
  %221 = and i64 %219, 4294967295
  store i64 %221, i64* %RCX, align 8, !tbaa !2428
  %222 = shl i64 %219, 32
  %223 = ashr exact i64 %222, 32
  %224 = icmp ne i64 %223, %219
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %225, i8* %226, align 1, !tbaa !2434
  %227 = and i32 %220, 255
  %228 = call i32 @llvm.ctpop.i32(i32 %227) #16
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %231, i8* %232, align 1, !tbaa !2448
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %233, align 1, !tbaa !2449
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %234, align 1, !tbaa !2450
  %235 = lshr i32 %220, 31
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %236, i8* %237, align 1, !tbaa !2451
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %238, align 1, !tbaa !2452
  %239 = load i64, i64* %RCX
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 20
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i32*
  %245 = load i32, i32* %244
  %246 = shl i64 %239, 32
  %247 = ashr exact i64 %246, 32
  %248 = sext i32 %245 to i64
  %249 = mul nsw i64 %248, %247
  %250 = trunc i64 %249 to i32
  %251 = and i64 %249, 4294967295
  store i64 %251, i64* %RCX, align 8, !tbaa !2428
  %252 = shl i64 %249, 32
  %253 = ashr exact i64 %252, 32
  %254 = icmp ne i64 %253, %249
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %255, i8* %256, align 1, !tbaa !2434
  %257 = and i32 %250, 255
  %258 = call i32 @llvm.ctpop.i32(i32 %257) #16
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %261, i8* %262, align 1, !tbaa !2448
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %263, align 1, !tbaa !2449
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %264, align 1, !tbaa !2450
  %265 = lshr i32 %250, 31
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2451
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %268, align 1, !tbaa !2452
  %269 = load i64, i64* %RCX
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 24
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = shl i64 %269, 32
  %277 = ashr exact i64 %276, 32
  %278 = sext i32 %275 to i64
  %279 = mul nsw i64 %278, %277
  %280 = trunc i64 %279 to i32
  %281 = and i64 %279, 4294967295
  store i64 %281, i64* %RCX, align 8, !tbaa !2428
  %282 = shl i64 %279, 32
  %283 = ashr exact i64 %282, 32
  %284 = icmp ne i64 %283, %279
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %285, i8* %286, align 1, !tbaa !2434
  %287 = and i32 %280, 255
  %288 = call i32 @llvm.ctpop.i32(i32 %287) #16
  %289 = trunc i32 %288 to i8
  %290 = and i8 %289, 1
  %291 = xor i8 %290, 1
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %291, i8* %292, align 1, !tbaa !2448
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %293, align 1, !tbaa !2449
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %294, align 1, !tbaa !2450
  %295 = lshr i32 %280, 31
  %296 = trunc i32 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %296, i8* %297, align 1, !tbaa !2451
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %285, i8* %298, align 1, !tbaa !2452
  %299 = load i32, i32* %ECX
  %300 = zext i32 %299 to i64
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 3
  store i64 %302, i64* %PC
  %303 = shl i64 %300, 32
  %304 = ashr exact i64 %303, 32
  store i64 %304, i64* %RDI, align 8, !tbaa !2428
  %305 = load i64, i64* %RDI
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = shl i64 %305, 1
  %309 = icmp slt i64 %308, 0
  %310 = shl i64 %308, 1
  store i64 %310, i64* %RDI, align 8, !tbaa !2428
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %312 = zext i1 %309 to i8
  store i8 %312, i8* %311, align 1, !tbaa !2455
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %314 = trunc i64 %310 to i32
  %315 = and i32 %314, 254
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %313, align 1, !tbaa !2455
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %320, align 1, !tbaa !2455
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %322 = icmp eq i64 %310, 0
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %321, align 1, !tbaa !2455
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %325 = lshr i64 %310, 63
  %326 = trunc i64 %325 to i8
  store i8 %326, i8* %324, align 1, !tbaa !2455
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %327, align 1, !tbaa !2455
  %328 = load i64, i64* %PC
  %329 = sub i64 %328, 1394
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 5
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %335 = load i64, i64* %334, align 8, !tbaa !2428
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %331, i64* %337
  store i64 %336, i64* %334, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %338, align 8, !tbaa !2428
  %339 = load i64, i64* %PC
  %340 = call %struct.Memory* @ext_603140_malloc(%struct.State* %0, i64 %339, %struct.Memory* %2)
  %341 = load i64, i64* %RCX
  %342 = load i32, i32* %ECX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 2
  store i64 %345, i64* %PC
  %346 = xor i64 %343, %341
  %347 = trunc i64 %346 to i32
  %348 = and i64 %346, 4294967295
  store i64 %348, i64* %RCX, align 8, !tbaa !2428
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %349, align 1, !tbaa !2434
  %350 = and i32 %347, 255
  %351 = call i32 @llvm.ctpop.i32(i32 %350) #16
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %354, i8* %355, align 1, !tbaa !2448
  %356 = icmp eq i32 %347, 0
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %357, i8* %358, align 1, !tbaa !2450
  %359 = lshr i32 %347, 31
  %360 = trunc i32 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %360, i8* %361, align 1, !tbaa !2451
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %362, align 1, !tbaa !2452
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %363, align 1, !tbaa !2449
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  store i64 %365, i64* %PC
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 8
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 4
  store i64 %369, i64* %PC
  %370 = inttoptr i64 %367 to i64*
  %371 = load i64, i64* %370
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %372 = load i64, i64* %RDI
  %373 = load i64, i64* %RAX
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 3
  store i64 %375, i64* %PC
  %376 = inttoptr i64 %372 to i64*
  store i64 %373, i64* %376
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 8
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = load i64, i64* %RAX
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %388, align 1, !tbaa !2434
  %389 = trunc i64 %387 to i32
  %390 = and i32 %389, 255
  %391 = call i32 @llvm.ctpop.i32(i32 %390) #16
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %394, i8* %395, align 1, !tbaa !2448
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %396, align 1, !tbaa !2449
  %397 = icmp eq i64 %387, 0
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %398, i8* %399, align 1, !tbaa !2450
  %400 = lshr i64 %387, 63
  %401 = trunc i64 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %401, i8* %402, align 1, !tbaa !2451
  %403 = lshr i64 %387, 63
  %404 = xor i64 %400, %403
  %405 = add nuw nsw i64 %404, %403
  %406 = icmp eq i64 %405, 2
  %407 = zext i1 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %407, i8* %408, align 1, !tbaa !2452
  %409 = load i32, i32* %EDX
  %410 = zext i32 %409 to i64
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 3
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %414 = load i8, i8* %413, align 1, !tbaa !2450
  %415 = icmp eq i8 %414, 0
  %416 = load i64, i64* %RCX, align 8, !tbaa !2428
  %417 = select i1 %415, i64 %410, i64 %416
  %418 = and i64 %417, 4294967295
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = load i32, i32* %ECX
  %420 = zext i32 %419 to i64
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 2
  store i64 %422, i64* %PC
  %423 = and i64 %420, 4294967295
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RSP
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = add i64 32, %424
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 32
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2434
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2448
  %440 = xor i64 32, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2450
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2451
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2452
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 1
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %461 = load i64, i64* %460, align 8, !tbaa !2428
  %462 = add i64 %461, 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %RBP, align 8, !tbaa !2428
  store i64 %462, i64* %460, align 8, !tbaa !2428
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 1
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %469 = load i64, i64* %468, align 8, !tbaa !2428
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %467, align 8, !tbaa !2428
  %472 = add i64 %469, 8
  store i64 %472, i64* %468, align 8, !tbaa !2428
  ret %struct.Memory* %340
}

; Function Attrs: noinline
define %struct.Memory* @sub_401c80_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2434
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2449
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2451
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2452
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 16
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %RAX
  %89 = load i32, i32* %EAX
  %90 = zext i32 %89 to i64
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = xor i64 %90, %88
  %94 = trunc i64 %93 to i32
  %95 = and i64 %93, 4294967295
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2434
  %97 = and i32 %94, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2448
  %103 = icmp eq i32 %94, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2450
  %106 = lshr i32 %94, 31
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2451
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %109, align 1, !tbaa !2452
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %110, align 1, !tbaa !2449
  %111 = load i32, i32* %EAX
  %112 = zext i32 %111 to i64
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 2
  store i64 %114, i64* %PC
  %115 = and i64 %112, 4294967295
  store i64 %115, i64* %RSI, align 8, !tbaa !2428
  %116 = load i64, i64* %PC
  %117 = sub i64 %116, 5952
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 5
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %123 = load i64, i64* %122, align 8, !tbaa !2428
  %124 = add i64 %123, -8
  %125 = inttoptr i64 %124 to i64*
  store i64 %119, i64* %125
  store i64 %124, i64* %122, align 8, !tbaa !2428
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %117, i64* %126, align 8, !tbaa !2428
  %127 = load i64, i64* %PC
  %128 = call %struct.Memory* @ext_603160_gettimeofday(%struct.State* %0, i64 %127, %struct.Memory* %2)
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 8
  store i64 %130, i64* %PC
  %131 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %132, align 1, !tbaa !2434
  %133 = and i32 %131, 255
  %134 = call i32 @llvm.ctpop.i32(i32 %133) #16
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %137, i8* %138, align 1, !tbaa !2448
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %139, align 1, !tbaa !2449
  %140 = icmp eq i32 %131, 0
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %141, i8* %142, align 1, !tbaa !2450
  %143 = lshr i32 %131, 31
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %144, i8* %145, align 1, !tbaa !2451
  %146 = lshr i32 %131, 31
  %147 = xor i32 %143, %146
  %148 = add nuw nsw i32 %147, %146
  %149 = icmp eq i32 %148, 2
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %150, i8* %151, align 1, !tbaa !2452
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 28
  %154 = load i32, i32* %EAX
  %155 = zext i32 %154 to i64
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %153 to i32*
  store i32 %154, i32* %158
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 59
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 6
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 6
  store i64 %164, i64* %PC
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %166 = load i8, i8* %165, align 1, !tbaa !2450
  %167 = icmp eq i8 %166, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %170 = select i1 %167, i64 %160, i64 %162
  store i64 %170, i64* %169, align 8, !tbaa !2428
  %171 = load i8, i8* %BRANCH_TAKEN
  %172 = icmp eq i8 %171, 1
  br i1 %172, label %block_401cdb, label %block_401ca6

block_401d18:                                     ; preds = %block_401cdb, %block_401cb4
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_401cdb ], [ %128, %block_401cb4 ]
  %173 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 24
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 5
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to double*
  %179 = load double, double* %178
  %180 = bitcast i8* %173 to double*
  store double %179, double* %180, align 1, !tbaa !2432
  %181 = getelementptr inbounds i8, i8* %173, i64 8
  %182 = bitcast i8* %181 to double*
  store double 0.000000e+00, double* %182, align 1, !tbaa !2432
  %183 = load i64, i64* %RSP
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 4
  store i64 %185, i64* %PC
  %186 = add i64 32, %183
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  %187 = icmp ult i64 %186, %183
  %188 = icmp ult i64 %186, 32
  %189 = or i1 %187, %188
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %190, i8* %191, align 1, !tbaa !2434
  %192 = trunc i64 %186 to i32
  %193 = and i32 %192, 255
  %194 = call i32 @llvm.ctpop.i32(i32 %193) #16
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %197, i8* %198, align 1, !tbaa !2448
  %199 = xor i64 32, %183
  %200 = xor i64 %199, %186
  %201 = lshr i64 %200, 4
  %202 = trunc i64 %201 to i8
  %203 = and i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %203, i8* %204, align 1, !tbaa !2449
  %205 = icmp eq i64 %186, 0
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %206, i8* %207, align 1, !tbaa !2450
  %208 = lshr i64 %186, 63
  %209 = trunc i64 %208 to i8
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %209, i8* %210, align 1, !tbaa !2451
  %211 = lshr i64 %183, 63
  %212 = xor i64 %208, %211
  %213 = add nuw nsw i64 %212, %208
  %214 = icmp eq i64 %213, 2
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %215, i8* %216, align 1, !tbaa !2452
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 1
  store i64 %218, i64* %PC
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %220 = load i64, i64* %219, align 8, !tbaa !2428
  %221 = add i64 %220, 8
  %222 = inttoptr i64 %220 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %RBP, align 8, !tbaa !2428
  store i64 %221, i64* %219, align 8, !tbaa !2428
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 1
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %228 = load i64, i64* %227, align 8, !tbaa !2428
  %229 = inttoptr i64 %228 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %226, align 8, !tbaa !2428
  %231 = add i64 %228, 8
  store i64 %231, i64* %227, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401cb4:                                     ; preds = %block_401ca6
  %232 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %233 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %234 = bitcast %union.vec128_t* %XMM0 to i8*
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 3
  store i64 %236, i64* %PC
  %237 = bitcast i8* %233 to i64*
  %238 = load i64, i64* %237, align 1
  %239 = getelementptr inbounds i8, i8* %233, i64 8
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240, align 1
  %242 = bitcast i8* %234 to i64*
  %243 = load i64, i64* %242, align 1
  %244 = getelementptr inbounds i8, i8* %234, i64 8
  %245 = bitcast i8* %244 to i64*
  %246 = load i64, i64* %245, align 1
  %247 = xor i64 %243, %238
  %248 = xor i64 %246, %241
  %249 = trunc i64 %247 to i32
  %250 = lshr i64 %247, 32
  %251 = trunc i64 %250 to i32
  %252 = bitcast i8* %232 to i32*
  store i32 %249, i32* %252, align 1, !tbaa !2456
  %253 = getelementptr inbounds i8, i8* %232, i64 4
  %254 = bitcast i8* %253 to i32*
  store i32 %251, i32* %254, align 1, !tbaa !2456
  %255 = trunc i64 %248 to i32
  %256 = getelementptr inbounds i8, i8* %232, i64 8
  %257 = bitcast i8* %256 to i32*
  store i32 %255, i32* %257, align 1, !tbaa !2456
  %258 = lshr i64 %248, 32
  %259 = trunc i64 %258 to i32
  %260 = getelementptr inbounds i8, i8* %232, i64 12
  %261 = bitcast i8* %260 to i32*
  store i32 %259, i32* %261, align 1, !tbaa !2456
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 16
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i32, i32* %EAX
  %269 = zext i32 %268 to i64
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 2
  store i64 %271, i64* %PC
  %272 = and i64 %269, 4294967295
  store i64 %272, i64* %RCX, align 8, !tbaa !2428
  %273 = load i32, i32* %ECX
  %274 = zext i32 %273 to i64
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 7
  store i64 %276, i64* %PC
  store i32 %273, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 8
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = load i32, i32* %EAX
  %284 = zext i32 %283 to i64
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 2
  store i64 %286, i64* %PC
  %287 = and i64 %284, 4294967295
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = load i32, i32* %ECX
  %289 = zext i32 %288 to i64
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 7
  store i64 %291, i64* %PC
  store i32 %288, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 24
  %294 = bitcast %union.vec128_t* %XMM0 to i8*
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = bitcast i8* %294 to double*
  %298 = load double, double* %297, align 1
  %299 = inttoptr i64 %293 to double*
  store double %298, double* %299
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 66
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 5
  store i64 %303, i64* %PC
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %301, i64* %304, align 8, !tbaa !2428
  br label %block_401d18

block_401ca6:                                     ; preds = %block_401c80
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 8
  store i64 %306, i64* %PC
  %307 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %308, align 1, !tbaa !2434
  %309 = and i32 %307, 255
  %310 = call i32 @llvm.ctpop.i32(i32 %309) #16
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %313, i8* %314, align 1, !tbaa !2448
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %315, align 1, !tbaa !2449
  %316 = icmp eq i32 %307, 0
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %317, i8* %318, align 1, !tbaa !2450
  %319 = lshr i32 %307, 31
  %320 = trunc i32 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %320, i8* %321, align 1, !tbaa !2451
  %322 = lshr i32 %307, 31
  %323 = xor i32 %319, %322
  %324 = add nuw nsw i32 %323, %322
  %325 = icmp eq i32 %324, 2
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %326, i8* %327, align 1, !tbaa !2452
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 45
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 6
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 6
  store i64 %333, i64* %PC
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %335 = load i8, i8* %334, align 1, !tbaa !2450
  %336 = icmp eq i8 %335, 0
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %339 = select i1 %336, i64 %329, i64 %331
  store i64 %339, i64* %338, align 8, !tbaa !2428
  %340 = load i8, i8* %BRANCH_TAKEN
  %341 = icmp eq i8 %340, 1
  br i1 %341, label %block_401cdb, label %block_401cb4

block_401cdb:                                     ; preds = %block_401ca6, %block_401c80
  %MEMORY.1 = phi %struct.Memory* [ %128, %block_401c80 ], [ %128, %block_401ca6 ]
  %342 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 8
  store i64 %344, i64* %PC
  %345 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_401db0__rodata_type* @seg_401db0__rodata to i64), i64 32) to double*)
  %346 = bitcast i8* %342 to double*
  store double %345, double* %346, align 1, !tbaa !2432
  %347 = getelementptr inbounds i8, i8* %342, i64 8
  %348 = bitcast i8* %347 to double*
  store double 0.000000e+00, double* %348, align 1, !tbaa !2432
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 16
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %RAX, align 8, !tbaa !2428
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 8
  store i64 %356, i64* %PC
  %357 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 4) to i32*)
  %358 = sext i32 %357 to i64
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = load i64, i64* %RAX
  %360 = load i64, i64* %RCX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  %363 = sub i64 %359, %360
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = icmp ult i64 %359, %360
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %365, i8* %366, align 1, !tbaa !2434
  %367 = trunc i64 %363 to i32
  %368 = and i32 %367, 255
  %369 = call i32 @llvm.ctpop.i32(i32 %368) #16
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %372, i8* %373, align 1, !tbaa !2448
  %374 = xor i64 %360, %359
  %375 = xor i64 %374, %363
  %376 = lshr i64 %375, 4
  %377 = trunc i64 %376 to i8
  %378 = and i8 %377, 1
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = icmp eq i64 %363, 0
  %381 = zext i1 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %381, i8* %382, align 1, !tbaa !2450
  %383 = lshr i64 %363, 63
  %384 = trunc i64 %383 to i8
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %384, i8* %385, align 1, !tbaa !2451
  %386 = lshr i64 %359, 63
  %387 = lshr i64 %360, 63
  %388 = xor i64 %387, %386
  %389 = xor i64 %383, %386
  %390 = add nuw nsw i64 %389, %388
  %391 = icmp eq i64 %390, 2
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %392, i8* %393, align 1, !tbaa !2452
  %394 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %395 = load i64, i64* %RAX
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 5
  store i64 %397, i64* %PC
  %398 = sitofp i64 %395 to double
  %399 = bitcast i8* %394 to double*
  store double %398, double* %399, align 1, !tbaa !2432
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 8
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i64*
  %405 = load i64, i64* %404
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 8
  store i64 %407, i64* %PC
  %408 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_603060__bss_type* @seg_603060__bss to i64), i64 8) to i32*)
  %409 = sext i32 %408 to i64
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RAX
  %411 = load i64, i64* %RCX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = sub i64 %410, %411
  store i64 %414, i64* %RAX, align 8, !tbaa !2428
  %415 = icmp ult i64 %410, %411
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %416, i8* %417, align 1, !tbaa !2434
  %418 = trunc i64 %414 to i32
  %419 = and i32 %418, 255
  %420 = call i32 @llvm.ctpop.i32(i32 %419) #16
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %423, i8* %424, align 1, !tbaa !2448
  %425 = xor i64 %411, %410
  %426 = xor i64 %425, %414
  %427 = lshr i64 %426, 4
  %428 = trunc i64 %427 to i8
  %429 = and i8 %428, 1
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %429, i8* %430, align 1, !tbaa !2449
  %431 = icmp eq i64 %414, 0
  %432 = zext i1 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %432, i8* %433, align 1, !tbaa !2450
  %434 = lshr i64 %414, 63
  %435 = trunc i64 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %435, i8* %436, align 1, !tbaa !2451
  %437 = lshr i64 %410, 63
  %438 = lshr i64 %411, 63
  %439 = xor i64 %438, %437
  %440 = xor i64 %434, %437
  %441 = add nuw nsw i64 %440, %439
  %442 = icmp eq i64 %441, 2
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %443, i8* %444, align 1, !tbaa !2452
  %445 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %446 = load i64, i64* %RAX
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 5
  store i64 %448, i64* %PC
  %449 = sitofp i64 %446 to double
  %450 = bitcast i8* %445 to double*
  store double %449, double* %450, align 1, !tbaa !2432
  %451 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %452 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %453 = bitcast %union.vec128_t* %XMM0 to i8*
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = bitcast i8* %452 to double*
  %457 = load double, double* %456, align 1
  %458 = getelementptr inbounds i8, i8* %452, i64 8
  %459 = bitcast i8* %458 to i64*
  %460 = load i64, i64* %459, align 1
  %461 = bitcast i8* %453 to double*
  %462 = load double, double* %461, align 1
  %463 = fdiv double %457, %462
  %464 = bitcast i8* %451 to double*
  store double %463, double* %464, align 1, !tbaa !2432
  %465 = getelementptr inbounds i8, i8* %451, i64 8
  %466 = bitcast i8* %465 to i64*
  store i64 %460, i64* %466, align 1, !tbaa !2432
  %467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %468 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %469 = bitcast %union.vec128_t* %XMM2 to i8*
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 4
  store i64 %471, i64* %PC
  %472 = bitcast i8* %468 to double*
  %473 = load double, double* %472, align 1
  %474 = getelementptr inbounds i8, i8* %468, i64 8
  %475 = bitcast i8* %474 to i64*
  %476 = load i64, i64* %475, align 1
  %477 = bitcast i8* %469 to double*
  %478 = load double, double* %477, align 1
  %479 = fadd double %473, %478
  %480 = bitcast i8* %467 to double*
  store double %479, double* %480, align 1, !tbaa !2432
  %481 = getelementptr inbounds i8, i8* %467, i64 8
  %482 = bitcast i8* %481 to i64*
  store i64 %476, i64* %482, align 1, !tbaa !2432
  %483 = load i64, i64* %RBP
  %484 = sub i64 %483, 24
  %485 = bitcast %union.vec128_t* %XMM1 to i8*
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 5
  store i64 %487, i64* %PC
  %488 = bitcast i8* %485 to double*
  %489 = load double, double* %488, align 1
  %490 = inttoptr i64 %484 to double*
  store double %489, double* %490
  br label %block_401d18
}

; Function Attrs: noinline
define %struct.Memory* @sub_400c10_mat_set(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400c10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 7
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 9
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSI = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 11
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 13
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSP = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 15
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RBP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %37 to %"class.std::bitset"*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RBP
  %51 = sub i64 %50, 8
  %52 = load i64, i64* %RDI
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 12
  %58 = load i32, i32* %ESI
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  %62 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %62
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 16
  %65 = bitcast %union.vec128_t* %XMM0 to i8*
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 5
  store i64 %67, i64* %PC
  %68 = bitcast i8* %65 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 1
  %70 = extractelement <2 x float> %69, i32 0
  %71 = inttoptr i64 %64 to float*
  store float %70, float* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 20
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 7
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i32*
  store i32 0, i32* %76
  br label %block_400c27

block_400c55:                                     ; preds = %block_400c65, %block_400c4e
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_400c4e ], [ %MEMORY.0, %block_400c65 ]
  %77 = load i64, i64* %RBP
  %78 = sub i64 %77, 28
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i32*
  %82 = load i32, i32* %81
  %83 = zext i32 %82 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 8
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88
  store i64 %89, i64* %RCX, align 8, !tbaa !2428
  %90 = load i32, i32* %EAX
  %91 = zext i32 %90 to i64
  %92 = load i64, i64* %RCX
  %93 = add i64 %92, 20
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i32*
  %97 = load i32, i32* %96
  %98 = sub i32 %90, %97
  %99 = icmp ult i32 %90, %97
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2434
  %102 = and i32 %98, 255
  %103 = call i32 @llvm.ctpop.i32(i32 %102) #16
  %104 = trunc i32 %103 to i8
  %105 = and i8 %104, 1
  %106 = xor i8 %105, 1
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %106, i8* %107, align 1, !tbaa !2448
  %108 = xor i32 %97, %90
  %109 = xor i32 %108, %98
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = icmp eq i32 %98, 0
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %115, i8* %116, align 1, !tbaa !2450
  %117 = lshr i32 %98, 31
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %118, i8* %119, align 1, !tbaa !2451
  %120 = lshr i32 %90, 31
  %121 = lshr i32 %97, 31
  %122 = xor i32 %121, %120
  %123 = xor i32 %117, %120
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %126, i8* %127, align 1, !tbaa !2452
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 104
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 6
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 6
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %135 = load i8, i8* %134, align 1, !tbaa !2451
  %136 = icmp ne i8 %135, 0
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %138 = load i8, i8* %137, align 1, !tbaa !2452
  %139 = icmp ne i8 %138, 0
  %140 = xor i1 %136, %139
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %144 = select i1 %140, i64 %131, i64 %129
  store i64 %144, i64* %143, align 8, !tbaa !2428
  %145 = load i8, i8* %BRANCH_TAKEN
  %146 = icmp eq i8 %145, 1
  br i1 %146, label %block_400cc7, label %block_400c65

block_400c37:                                     ; preds = %block_400c27
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 24
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 7
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i32*
  store i32 0, i32* %151
  br label %block_400c3e

block_400ced:                                     ; preds = %block_400c27
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 1
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %155 = load i64, i64* %154, align 8, !tbaa !2428
  %156 = add i64 %155, 8
  %157 = inttoptr i64 %155 to i64*
  %158 = load i64, i64* %157
  store i64 %158, i64* %RBP, align 8, !tbaa !2428
  store i64 %156, i64* %154, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 1
  store i64 %160, i64* %PC
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %163 = load i64, i64* %162, align 8, !tbaa !2428
  %164 = inttoptr i64 %163 to i64*
  %165 = load i64, i64* %164
  store i64 %165, i64* %161, align 8, !tbaa !2428
  %166 = add i64 %163, 8
  store i64 %166, i64* %162, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400c4e:                                     ; preds = %block_400c3e
  %167 = load i64, i64* %RBP
  %168 = sub i64 %167, 28
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 7
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i32*
  store i32 0, i32* %171
  br label %block_400c55

block_400c27:                                     ; preds = %block_400cda, %block_400c10
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400c10 ], [ %MEMORY.2, %block_400cda ]
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 20
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 8
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = load i32, i32* %EAX
  %186 = zext i32 %185 to i64
  %187 = load i64, i64* %RCX
  %188 = add i64 %187, 12
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 3
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  %192 = load i32, i32* %191
  %193 = sub i32 %185, %192
  %194 = icmp ult i32 %185, %192
  %195 = zext i1 %194 to i8
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %195, i8* %196, align 1, !tbaa !2434
  %197 = and i32 %193, 255
  %198 = call i32 @llvm.ctpop.i32(i32 %197) #16
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  %201 = xor i8 %200, 1
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %201, i8* %202, align 1, !tbaa !2448
  %203 = xor i32 %192, %185
  %204 = xor i32 %203, %193
  %205 = lshr i32 %204, 4
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %207, i8* %208, align 1, !tbaa !2449
  %209 = icmp eq i32 %193, 0
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %210, i8* %211, align 1, !tbaa !2450
  %212 = lshr i32 %193, 31
  %213 = trunc i32 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %213, i8* %214, align 1, !tbaa !2451
  %215 = lshr i32 %185, 31
  %216 = lshr i32 %192, 31
  %217 = xor i32 %216, %215
  %218 = xor i32 %212, %215
  %219 = add nuw nsw i32 %218, %217
  %220 = icmp eq i32 %219, 2
  %221 = zext i1 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %221, i8* %222, align 1, !tbaa !2452
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 188
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 6
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 6
  store i64 %228, i64* %PC
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %230 = load i8, i8* %229, align 1, !tbaa !2451
  %231 = icmp ne i8 %230, 0
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %233 = load i8, i8* %232, align 1, !tbaa !2452
  %234 = icmp ne i8 %233, 0
  %235 = xor i1 %231, %234
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %239 = select i1 %235, i64 %226, i64 %224
  store i64 %239, i64* %238, align 8, !tbaa !2428
  %240 = load i8, i8* %BRANCH_TAKEN
  %241 = icmp eq i8 %240, 1
  br i1 %241, label %block_400ced, label %block_400c37

block_400cc7:                                     ; preds = %block_400c55
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 5
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 5
  store i64 %245, i64* %PC
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %243, i64* %246, align 8, !tbaa !2428
  %247 = load i64, i64* %RBP
  %248 = sub i64 %247, 24
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 3
  store i64 %250, i64* %PC
  %251 = inttoptr i64 %248 to i32*
  %252 = load i32, i32* %251
  %253 = zext i32 %252 to i64
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = trunc i64 %254 to i32
  %258 = add i32 1, %257
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = icmp ult i32 %258, %257
  %261 = icmp ult i32 %258, 1
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %263, i8* %264, align 1, !tbaa !2434
  %265 = and i32 %258, 255
  %266 = call i32 @llvm.ctpop.i32(i32 %265) #16
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = xor i64 1, %254
  %272 = trunc i64 %271 to i32
  %273 = xor i32 %272, %258
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %276, i8* %277, align 1, !tbaa !2449
  %278 = icmp eq i32 %258, 0
  %279 = zext i1 %278 to i8
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %279, i8* %280, align 1, !tbaa !2450
  %281 = lshr i32 %258, 31
  %282 = trunc i32 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %282, i8* %283, align 1, !tbaa !2451
  %284 = lshr i32 %257, 31
  %285 = xor i32 %281, %284
  %286 = add nuw nsw i32 %285, %281
  %287 = icmp eq i32 %286, 2
  %288 = zext i1 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %288, i8* %289, align 1, !tbaa !2452
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 24
  %292 = load i32, i32* %EAX
  %293 = zext i32 %292 to i64
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 3
  store i64 %295, i64* %PC
  %296 = inttoptr i64 %291 to i32*
  store i32 %292, i32* %296
  %297 = load i64, i64* %PC
  %298 = sub i64 %297, 151
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 5
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %298, i64* %301, align 8, !tbaa !2428
  br label %block_400c3e

block_400c3e:                                     ; preds = %block_400cc7, %block_400c37
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400c37 ], [ %MEMORY.0, %block_400cc7 ]
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 24
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 3
  store i64 %305, i64* %PC
  %306 = inttoptr i64 %303 to i32*
  %307 = load i32, i32* %306
  %308 = zext i32 %307 to i64
  store i64 %308, i64* %RAX, align 8, !tbaa !2428
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RCX, align 8, !tbaa !2428
  %315 = load i32, i32* %EAX
  %316 = zext i32 %315 to i64
  %317 = load i64, i64* %RCX
  %318 = add i64 %317, 16
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = sub i32 %315, %322
  %324 = icmp ult i32 %315, %322
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %325, i8* %326, align 1, !tbaa !2434
  %327 = and i32 %323, 255
  %328 = call i32 @llvm.ctpop.i32(i32 %327) #16
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = xor i32 %322, %315
  %334 = xor i32 %333, %323
  %335 = lshr i32 %334, 4
  %336 = trunc i32 %335 to i8
  %337 = and i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %337, i8* %338, align 1, !tbaa !2449
  %339 = icmp eq i32 %323, 0
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %340, i8* %341, align 1, !tbaa !2450
  %342 = lshr i32 %323, 31
  %343 = trunc i32 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %343, i8* %344, align 1, !tbaa !2451
  %345 = lshr i32 %315, 31
  %346 = lshr i32 %322, 31
  %347 = xor i32 %346, %345
  %348 = xor i32 %342, %345
  %349 = add nuw nsw i32 %348, %347
  %350 = icmp eq i32 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2452
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 146
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 6
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 6
  store i64 %358, i64* %PC
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %360 = load i8, i8* %359, align 1, !tbaa !2451
  %361 = icmp ne i8 %360, 0
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %363 = load i8, i8* %362, align 1, !tbaa !2452
  %364 = icmp ne i8 %363, 0
  %365 = xor i1 %361, %364
  %366 = xor i1 %365, true
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %369 = select i1 %365, i64 %356, i64 %354
  store i64 %369, i64* %368, align 8, !tbaa !2428
  %370 = load i8, i8* %BRANCH_TAKEN
  %371 = icmp eq i8 %370, 1
  br i1 %371, label %block_400cda, label %block_400c4e

block_400cda:                                     ; preds = %block_400c3e
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 5
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  store i64 %375, i64* %PC
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %376, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP
  %378 = sub i64 %377, 20
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RAX, align 8, !tbaa !2428
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 3
  store i64 %386, i64* %PC
  %387 = trunc i64 %384 to i32
  %388 = add i32 1, %387
  %389 = zext i32 %388 to i64
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = icmp ult i32 %388, %387
  %391 = icmp ult i32 %388, 1
  %392 = or i1 %390, %391
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %393, i8* %394, align 1, !tbaa !2434
  %395 = and i32 %388, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2448
  %401 = xor i64 1, %384
  %402 = trunc i64 %401 to i32
  %403 = xor i32 %402, %388
  %404 = lshr i32 %403, 4
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %406, i8* %407, align 1, !tbaa !2449
  %408 = icmp eq i32 %388, 0
  %409 = zext i1 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %409, i8* %410, align 1, !tbaa !2450
  %411 = lshr i32 %388, 31
  %412 = trunc i32 %411 to i8
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %412, i8* %413, align 1, !tbaa !2451
  %414 = lshr i32 %387, 31
  %415 = xor i32 %411, %414
  %416 = add nuw nsw i32 %415, %411
  %417 = icmp eq i32 %416, 2
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %418, i8* %419, align 1, !tbaa !2452
  %420 = load i64, i64* %RBP
  %421 = sub i64 %420, 20
  %422 = load i32, i32* %EAX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %421 to i32*
  store i32 %422, i32* %426
  %427 = load i64, i64* %PC
  %428 = sub i64 %427, 193
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 5
  store i64 %430, i64* %PC
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %428, i64* %431, align 8, !tbaa !2428
  br label %block_400c27

block_400c65:                                     ; preds = %block_400c55
  %432 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = inttoptr i64 %434 to float*
  %438 = load float, float* %437
  %439 = bitcast i8* %432 to float*
  store float %438, float* %439, align 1, !tbaa !2453
  %440 = getelementptr inbounds i8, i8* %432, i64 4
  %441 = bitcast i8* %440 to float*
  store float 0.000000e+00, float* %441, align 1, !tbaa !2453
  %442 = getelementptr inbounds i8, i8* %432, i64 8
  %443 = bitcast i8* %442 to float*
  store float 0.000000e+00, float* %443, align 1, !tbaa !2453
  %444 = getelementptr inbounds i8, i8* %432, i64 12
  %445 = bitcast i8* %444 to float*
  store float 0.000000e+00, float* %445, align 1, !tbaa !2453
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 8
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RAX
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 3
  store i64 %454, i64* %PC
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = load i64, i64* %RBP
  %458 = sub i64 %457, 12
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 3
  store i64 %460, i64* %PC
  %461 = inttoptr i64 %458 to i32*
  %462 = load i32, i32* %461
  %463 = zext i32 %462 to i64
  store i64 %463, i64* %RCX, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP
  %465 = sub i64 %464, 8
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 4
  store i64 %467, i64* %PC
  %468 = inttoptr i64 %465 to i64*
  %469 = load i64, i64* %468
  store i64 %469, i64* %RDX, align 8, !tbaa !2428
  %470 = load i64, i64* %RCX
  %471 = load i64, i64* %RDX
  %472 = add i64 %471, 12
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i32*
  %476 = load i32, i32* %475
  %477 = shl i64 %470, 32
  %478 = ashr exact i64 %477, 32
  %479 = sext i32 %476 to i64
  %480 = mul nsw i64 %479, %478
  %481 = trunc i64 %480 to i32
  %482 = and i64 %480, 4294967295
  store i64 %482, i64* %RCX, align 8, !tbaa !2428
  %483 = shl i64 %480, 32
  %484 = ashr exact i64 %483, 32
  %485 = icmp ne i64 %484, %480
  %486 = zext i1 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %486, i8* %487, align 1, !tbaa !2434
  %488 = and i32 %481, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2448
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2449
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %495, align 1, !tbaa !2450
  %496 = lshr i32 %481, 31
  %497 = trunc i32 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2451
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %486, i8* %499, align 1, !tbaa !2452
  %500 = load i64, i64* %RBP
  %501 = sub i64 %500, 8
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  %505 = load i64, i64* %504
  store i64 %505, i64* %RDX, align 8, !tbaa !2428
  %506 = load i64, i64* %RCX
  %507 = load i64, i64* %RDX
  %508 = add i64 %507, 16
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i32*
  %512 = load i32, i32* %511
  %513 = shl i64 %506, 32
  %514 = ashr exact i64 %513, 32
  %515 = sext i32 %512 to i64
  %516 = mul nsw i64 %515, %514
  %517 = trunc i64 %516 to i32
  %518 = and i64 %516, 4294967295
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = shl i64 %516, 32
  %520 = ashr exact i64 %519, 32
  %521 = icmp ne i64 %520, %516
  %522 = zext i1 %521 to i8
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %522, i8* %523, align 1, !tbaa !2434
  %524 = and i32 %517, 255
  %525 = call i32 @llvm.ctpop.i32(i32 %524) #16
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %528, i8* %529, align 1, !tbaa !2448
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %530, align 1, !tbaa !2449
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %531, align 1, !tbaa !2450
  %532 = lshr i32 %517, 31
  %533 = trunc i32 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %533, i8* %534, align 1, !tbaa !2451
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %522, i8* %535, align 1, !tbaa !2452
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 8
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540
  store i64 %541, i64* %RDX, align 8, !tbaa !2428
  %542 = load i64, i64* %RCX
  %543 = load i64, i64* %RDX
  %544 = add i64 %543, 20
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 4
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547
  %549 = shl i64 %542, 32
  %550 = ashr exact i64 %549, 32
  %551 = sext i32 %548 to i64
  %552 = mul nsw i64 %551, %550
  %553 = trunc i64 %552 to i32
  %554 = and i64 %552, 4294967295
  store i64 %554, i64* %RCX, align 8, !tbaa !2428
  %555 = shl i64 %552, 32
  %556 = ashr exact i64 %555, 32
  %557 = icmp ne i64 %556, %552
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %558, i8* %559, align 1, !tbaa !2434
  %560 = and i32 %553, 255
  %561 = call i32 @llvm.ctpop.i32(i32 %560) #16
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  %564 = xor i8 %563, 1
  %565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %564, i8* %565, align 1, !tbaa !2448
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %566, align 1, !tbaa !2449
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %567, align 1, !tbaa !2450
  %568 = lshr i32 %553, 31
  %569 = trunc i32 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %569, i8* %570, align 1, !tbaa !2451
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %558, i8* %571, align 1, !tbaa !2452
  %572 = load i64, i64* %RBP
  %573 = sub i64 %572, 20
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 3
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %573 to i32*
  %577 = load i32, i32* %576
  %578 = zext i32 %577 to i64
  store i64 %578, i64* %RSI, align 8, !tbaa !2428
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 8
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RDX, align 8, !tbaa !2428
  %585 = load i64, i64* %RSI
  %586 = load i64, i64* %RDX
  %587 = add i64 %586, 16
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i32*
  %591 = load i32, i32* %590
  %592 = shl i64 %585, 32
  %593 = ashr exact i64 %592, 32
  %594 = sext i32 %591 to i64
  %595 = mul nsw i64 %594, %593
  %596 = trunc i64 %595 to i32
  %597 = and i64 %595, 4294967295
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %598 = shl i64 %595, 32
  %599 = ashr exact i64 %598, 32
  %600 = icmp ne i64 %599, %595
  %601 = zext i1 %600 to i8
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %601, i8* %602, align 1, !tbaa !2434
  %603 = and i32 %596, 255
  %604 = call i32 @llvm.ctpop.i32(i32 %603) #16
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %607, i8* %608, align 1, !tbaa !2448
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %609, align 1, !tbaa !2449
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %610, align 1, !tbaa !2450
  %611 = lshr i32 %596, 31
  %612 = trunc i32 %611 to i8
  %613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %612, i8* %613, align 1, !tbaa !2451
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %601, i8* %614, align 1, !tbaa !2452
  %615 = load i64, i64* %RBP
  %616 = sub i64 %615, 8
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 4
  store i64 %618, i64* %PC
  %619 = inttoptr i64 %616 to i64*
  %620 = load i64, i64* %619
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = load i64, i64* %RSI
  %622 = load i64, i64* %RDX
  %623 = add i64 %622, 20
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i32*
  %627 = load i32, i32* %626
  %628 = shl i64 %621, 32
  %629 = ashr exact i64 %628, 32
  %630 = sext i32 %627 to i64
  %631 = mul nsw i64 %630, %629
  %632 = trunc i64 %631 to i32
  %633 = and i64 %631, 4294967295
  store i64 %633, i64* %RSI, align 8, !tbaa !2428
  %634 = shl i64 %631, 32
  %635 = ashr exact i64 %634, 32
  %636 = icmp ne i64 %635, %631
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %637, i8* %638, align 1, !tbaa !2434
  %639 = and i32 %632, 255
  %640 = call i32 @llvm.ctpop.i32(i32 %639) #16
  %641 = trunc i32 %640 to i8
  %642 = and i8 %641, 1
  %643 = xor i8 %642, 1
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %643, i8* %644, align 1, !tbaa !2448
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %645, align 1, !tbaa !2449
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %646, align 1, !tbaa !2450
  %647 = lshr i32 %632, 31
  %648 = trunc i32 %647 to i8
  %649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %648, i8* %649, align 1, !tbaa !2451
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %637, i8* %650, align 1, !tbaa !2452
  %651 = load i64, i64* %RCX
  %652 = load i32, i32* %ESI
  %653 = zext i32 %652 to i64
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 2
  store i64 %655, i64* %PC
  %656 = trunc i64 %651 to i32
  %657 = add i32 %652, %656
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RCX, align 8, !tbaa !2428
  %659 = icmp ult i32 %657, %656
  %660 = icmp ult i32 %657, %652
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %662, i8* %663, align 1, !tbaa !2434
  %664 = and i32 %657, 255
  %665 = call i32 @llvm.ctpop.i32(i32 %664) #16
  %666 = trunc i32 %665 to i8
  %667 = and i8 %666, 1
  %668 = xor i8 %667, 1
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %668, i8* %669, align 1, !tbaa !2448
  %670 = xor i64 %653, %651
  %671 = trunc i64 %670 to i32
  %672 = xor i32 %671, %657
  %673 = lshr i32 %672, 4
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = icmp eq i32 %657, 0
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = lshr i32 %657, 31
  %681 = trunc i32 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %681, i8* %682, align 1, !tbaa !2451
  %683 = lshr i32 %656, 31
  %684 = lshr i32 %652, 31
  %685 = xor i32 %680, %683
  %686 = xor i32 %680, %684
  %687 = add nuw nsw i32 %685, %686
  %688 = icmp eq i32 %687, 2
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %689, i8* %690, align 1, !tbaa !2452
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 24
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 3
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i32*
  %696 = load i32, i32* %695
  %697 = zext i32 %696 to i64
  store i64 %697, i64* %RSI, align 8, !tbaa !2428
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 8
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 4
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i64*
  %703 = load i64, i64* %702
  store i64 %703, i64* %RDX, align 8, !tbaa !2428
  %704 = load i64, i64* %RSI
  %705 = load i64, i64* %RDX
  %706 = add i64 %705, 20
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 4
  store i64 %708, i64* %PC
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709
  %711 = shl i64 %704, 32
  %712 = ashr exact i64 %711, 32
  %713 = sext i32 %710 to i64
  %714 = mul nsw i64 %713, %712
  %715 = trunc i64 %714 to i32
  %716 = and i64 %714, 4294967295
  store i64 %716, i64* %RSI, align 8, !tbaa !2428
  %717 = shl i64 %714, 32
  %718 = ashr exact i64 %717, 32
  %719 = icmp ne i64 %718, %714
  %720 = zext i1 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %720, i8* %721, align 1, !tbaa !2434
  %722 = and i32 %715, 255
  %723 = call i32 @llvm.ctpop.i32(i32 %722) #16
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = xor i8 %725, 1
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %726, i8* %727, align 1, !tbaa !2448
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %728, align 1, !tbaa !2449
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %729, align 1, !tbaa !2450
  %730 = lshr i32 %715, 31
  %731 = trunc i32 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2451
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %720, i8* %733, align 1, !tbaa !2452
  %734 = load i64, i64* %RCX
  %735 = load i32, i32* %ESI
  %736 = zext i32 %735 to i64
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 2
  store i64 %738, i64* %PC
  %739 = trunc i64 %734 to i32
  %740 = add i32 %735, %739
  %741 = zext i32 %740 to i64
  store i64 %741, i64* %RCX, align 8, !tbaa !2428
  %742 = icmp ult i32 %740, %739
  %743 = icmp ult i32 %740, %735
  %744 = or i1 %742, %743
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %745, i8* %746, align 1, !tbaa !2434
  %747 = and i32 %740, 255
  %748 = call i32 @llvm.ctpop.i32(i32 %747) #16
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %751, i8* %752, align 1, !tbaa !2448
  %753 = xor i64 %736, %734
  %754 = trunc i64 %753 to i32
  %755 = xor i32 %754, %740
  %756 = lshr i32 %755, 4
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %758, i8* %759, align 1, !tbaa !2449
  %760 = icmp eq i32 %740, 0
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %761, i8* %762, align 1, !tbaa !2450
  %763 = lshr i32 %740, 31
  %764 = trunc i32 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %764, i8* %765, align 1, !tbaa !2451
  %766 = lshr i32 %739, 31
  %767 = lshr i32 %735, 31
  %768 = xor i32 %763, %766
  %769 = xor i32 %763, %767
  %770 = add nuw nsw i32 %768, %769
  %771 = icmp eq i32 %770, 2
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %772, i8* %773, align 1, !tbaa !2452
  %774 = load i64, i64* %RCX
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 28
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = trunc i64 %774 to i32
  %780 = inttoptr i64 %776 to i32*
  %781 = load i32, i32* %780
  %782 = add i32 %781, %779
  %783 = zext i32 %782 to i64
  store i64 %783, i64* %RCX, align 8, !tbaa !2428
  %784 = icmp ult i32 %782, %779
  %785 = icmp ult i32 %782, %781
  %786 = or i1 %784, %785
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %787, i8* %788, align 1, !tbaa !2434
  %789 = and i32 %782, 255
  %790 = call i32 @llvm.ctpop.i32(i32 %789) #16
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  %793 = xor i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %793, i8* %794, align 1, !tbaa !2448
  %795 = xor i32 %781, %779
  %796 = xor i32 %795, %782
  %797 = lshr i32 %796, 4
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = icmp eq i32 %782, 0
  %802 = zext i1 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %802, i8* %803, align 1, !tbaa !2450
  %804 = lshr i32 %782, 31
  %805 = trunc i32 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %805, i8* %806, align 1, !tbaa !2451
  %807 = lshr i32 %779, 31
  %808 = lshr i32 %781, 31
  %809 = xor i32 %804, %807
  %810 = xor i32 %804, %808
  %811 = add nuw nsw i32 %809, %810
  %812 = icmp eq i32 %811, 2
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %813, i8* %814, align 1, !tbaa !2452
  %815 = load i32, i32* %ECX
  %816 = zext i32 %815 to i64
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 3
  store i64 %818, i64* %PC
  %819 = shl i64 %816, 32
  %820 = ashr exact i64 %819, 32
  store i64 %820, i64* %RDX, align 8, !tbaa !2428
  %821 = load i64, i64* %RAX
  %822 = load i64, i64* %RDX
  %823 = mul i64 %822, 4
  %824 = add i64 %823, %821
  %825 = bitcast %union.vec128_t* %XMM0 to i8*
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC
  %828 = bitcast i8* %825 to <2 x float>*
  %829 = load <2 x float>, <2 x float>* %828, align 1
  %830 = extractelement <2 x float> %829, i32 0
  %831 = inttoptr i64 %824 to float*
  store float %830, float* %831
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 28
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 3
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i32*
  %837 = load i32, i32* %836
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RAX
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 3
  store i64 %841, i64* %PC
  %842 = trunc i64 %839 to i32
  %843 = add i32 1, %842
  %844 = zext i32 %843 to i64
  store i64 %844, i64* %RAX, align 8, !tbaa !2428
  %845 = icmp ult i32 %843, %842
  %846 = icmp ult i32 %843, 1
  %847 = or i1 %845, %846
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %848, i8* %849, align 1, !tbaa !2434
  %850 = and i32 %843, 255
  %851 = call i32 @llvm.ctpop.i32(i32 %850) #16
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = xor i8 %853, 1
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %854, i8* %855, align 1, !tbaa !2448
  %856 = xor i64 1, %839
  %857 = trunc i64 %856 to i32
  %858 = xor i32 %857, %843
  %859 = lshr i32 %858, 4
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %861, i8* %862, align 1, !tbaa !2449
  %863 = icmp eq i32 %843, 0
  %864 = zext i1 %863 to i8
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %864, i8* %865, align 1, !tbaa !2450
  %866 = lshr i32 %843, 31
  %867 = trunc i32 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %867, i8* %868, align 1, !tbaa !2451
  %869 = lshr i32 %842, 31
  %870 = xor i32 %866, %869
  %871 = add nuw nsw i32 %870, %866
  %872 = icmp eq i32 %871, 2
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %873, i8* %874, align 1, !tbaa !2452
  %875 = load i64, i64* %RBP
  %876 = sub i64 %875, 28
  %877 = load i32, i32* %EAX
  %878 = zext i32 %877 to i64
  %879 = load i64, i64* %PC
  %880 = add i64 %879, 3
  store i64 %880, i64* %PC
  %881 = inttoptr i64 %876 to i32*
  store i32 %877, i32* %881
  %882 = load i64, i64* %PC
  %883 = sub i64 %882, 109
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 5
  store i64 %885, i64* %PC
  %886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %883, i64* %886, align 8, !tbaa !2428
  br label %block_400c55
}

; Function Attrs: noinline
define %struct.Memory* @sub_401990_clearMat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401990:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDI = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2434
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2448
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2449
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2450
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2451
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2452
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 8
  %62 = load i64, i64* %RDI
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 8
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70
  store i64 %71, i64* %RDI, align 8, !tbaa !2428
  %72 = load i64, i64* %RDI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %77, align 1, !tbaa !2434
  %78 = trunc i64 %76 to i32
  %79 = and i32 %78, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %85, align 1, !tbaa !2449
  %86 = icmp eq i64 %76, 0
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %87, i8* %88, align 1, !tbaa !2450
  %89 = lshr i64 %76, 63
  %90 = trunc i64 %89 to i8
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %90, i8* %91, align 1, !tbaa !2451
  %92 = lshr i64 %76, 63
  %93 = xor i64 %89, %92
  %94 = add nuw nsw i64 %93, %92
  %95 = icmp eq i64 %94, 2
  %96 = zext i1 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %96, i8* %97, align 1, !tbaa !2452
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 21
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 6
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %105 = load i8, i8* %104, align 1, !tbaa !2450
  store i8 %105, i8* %BRANCH_TAKEN, align 1, !tbaa !2455
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %107 = icmp ne i8 %105, 0
  %108 = select i1 %107, i64 %99, i64 %101
  store i64 %108, i64* %106, align 8, !tbaa !2428
  %109 = load i8, i8* %BRANCH_TAKEN
  %110 = icmp eq i8 %109, 1
  br i1 %110, label %block_4019b9, label %block_4019aa

block_4019aa:                                     ; preds = %block_401990
  %111 = load i64, i64* %RBP
  %112 = sub i64 %111, 8
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RAX, align 8, !tbaa !2428
  %117 = load i64, i64* %RAX
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 3
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  %121 = load i64, i64* %120
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  %126 = sub i64 %125, 5252
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  store i64 %128, i64* %134
  store i64 %133, i64* %131, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %126, i64* %135, align 8, !tbaa !2428
  %136 = load i64, i64* %PC
  %137 = call %struct.Memory* @ext_603118_free(%struct.State* %0, i64 %136, %struct.Memory* %2)
  br label %block_4019b9

block_4019b9:                                     ; preds = %block_4019aa, %block_401990
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401990 ], [ %137, %block_4019aa ]
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 8
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 7
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  store i64 0, i64* %147
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 8
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX
  %155 = add i64 %154, 8
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 7
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i32*
  store i32 0, i32* %158
  %159 = load i64, i64* %RBP
  %160 = sub i64 %159, 8
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX
  %166 = add i64 %165, 16
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 7
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i32*
  store i32 0, i32* %169
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 8
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %RAX, align 8, !tbaa !2428
  %176 = load i64, i64* %RAX
  %177 = add i64 %176, 12
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 7
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i32*
  store i32 0, i32* %180
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 8
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = load i64, i64* %RAX
  %188 = add i64 %187, 20
  %189 = load i64, i64* %PC
  %190 = add i64 %189, 7
  store i64 %190, i64* %PC
  %191 = inttoptr i64 %188 to i32*
  store i32 0, i32* %191
  %192 = load i64, i64* %RSP
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = add i64 16, %192
  store i64 %195, i64* %RSP, align 8, !tbaa !2428
  %196 = icmp ult i64 %195, %192
  %197 = icmp ult i64 %195, 16
  %198 = or i1 %196, %197
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %199, i8* %200, align 1, !tbaa !2434
  %201 = trunc i64 %195 to i32
  %202 = and i32 %201, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2448
  %208 = xor i64 16, %192
  %209 = xor i64 %208, %195
  %210 = lshr i64 %209, 4
  %211 = trunc i64 %210 to i8
  %212 = and i8 %211, 1
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = icmp eq i64 %195, 0
  %215 = zext i1 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %215, i8* %216, align 1, !tbaa !2450
  %217 = lshr i64 %195, 63
  %218 = trunc i64 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %218, i8* %219, align 1, !tbaa !2451
  %220 = lshr i64 %192, 63
  %221 = xor i64 %217, %220
  %222 = add nuw nsw i64 %221, %217
  %223 = icmp eq i64 %222, 2
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %224, i8* %225, align 1, !tbaa !2452
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %RBP, align 8, !tbaa !2428
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 1
  store i64 %234, i64* %PC
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %237 = load i64, i64* %236, align 8, !tbaa !2428
  %238 = inttoptr i64 %237 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %235, align 8, !tbaa !2428
  %240 = add i64 %237, 8
  store i64 %240, i64* %236, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400670_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400670;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400670_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400670_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400640___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400640;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400640___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400640___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603138_strcmp(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcmp to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603120_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400580_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401da0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401da0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401da0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401da0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401d30___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401d30___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401d30___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400680_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603168___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603140_malloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603160_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603118_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @second() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c80_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mflops() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @mflops_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a50_mflops(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @newMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400a80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @newMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400a80_newMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400c10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400c10_mat_set(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @jacobi() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400cf0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @jacobi_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400cf0_jacobi(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400508;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400508__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @fflop() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a00;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @fflop_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a00_fflop(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401da4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401da4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @set_param() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401a90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @set_param_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401a90_set_param(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @mat_set_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400b10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @mat_set_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400b10_mat_set_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @clearMat() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401990;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @clearMat_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401990_clearMat(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401da0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_401d30___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2433, i64 0}
!2433 = !{!"double", !2430, i64 0}
!2434 = !{!2435, !2430, i64 2065}
!2435 = !{!"_ZTS5State", !2430, i64 16, !2436, i64 2064, !2430, i64 2080, !2437, i64 2088, !2439, i64 2112, !2441, i64 2208, !2442, i64 2480, !2443, i64 2608, !2444, i64 2736, !2430, i64 2760, !2430, i64 2768, !2445, i64 3280}
!2436 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2437 = !{!"_ZTS8Segments", !2438, i64 0, !2430, i64 2, !2438, i64 4, !2430, i64 6, !2438, i64 8, !2430, i64 10, !2438, i64 12, !2430, i64 14, !2438, i64 16, !2430, i64 18, !2438, i64 20, !2430, i64 22}
!2438 = !{!"short", !2430, i64 0}
!2439 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2440, i64 8, !2429, i64 16, !2440, i64 24, !2429, i64 32, !2440, i64 40, !2429, i64 48, !2440, i64 56, !2429, i64 64, !2440, i64 72, !2429, i64 80, !2440, i64 88}
!2440 = !{!"_ZTS3Reg", !2430, i64 0}
!2441 = !{!"_ZTS3GPR", !2429, i64 0, !2440, i64 8, !2429, i64 16, !2440, i64 24, !2429, i64 32, !2440, i64 40, !2429, i64 48, !2440, i64 56, !2429, i64 64, !2440, i64 72, !2429, i64 80, !2440, i64 88, !2429, i64 96, !2440, i64 104, !2429, i64 112, !2440, i64 120, !2429, i64 128, !2440, i64 136, !2429, i64 144, !2440, i64 152, !2429, i64 160, !2440, i64 168, !2429, i64 176, !2440, i64 184, !2429, i64 192, !2440, i64 200, !2429, i64 208, !2440, i64 216, !2429, i64 224, !2440, i64 232, !2429, i64 240, !2440, i64 248, !2429, i64 256, !2440, i64 264}
!2442 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2443 = !{!"_ZTS3MMX", !2430, i64 0}
!2444 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2445 = !{!"_ZTS13SegmentCaches", !2446, i64 0, !2446, i64 16, !2446, i64 32, !2446, i64 48, !2446, i64 64, !2446, i64 80}
!2446 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2447, i64 8, !2447, i64 12}
!2447 = !{!"int", !2430, i64 0}
!2448 = !{!2435, !2430, i64 2067}
!2449 = !{!2435, !2430, i64 2069}
!2450 = !{!2435, !2430, i64 2071}
!2451 = !{!2435, !2430, i64 2073}
!2452 = !{!2435, !2430, i64 2077}
!2453 = !{!2454, !2454, i64 0}
!2454 = !{!"float", !2430, i64 0}
!2455 = !{!2430, !2430, i64 0}
!2456 = !{!2447, !2447, i64 0}
