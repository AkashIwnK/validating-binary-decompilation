Writing '/tmp/tmp9d6wq76y.dot'...
Writing '/tmp/tmp9d6wq76y.dot':Done

Reading LLVM: /tmp/tmp5g9_tjhc-query.ll
Extracting function [show_data] from /tmp/tmp5g9_tjhc-query.ll
Dot file generated!
Writing '/tmp/tmp60gxfbbm.dot'...
Writing '/tmp/tmp60gxfbbm.dot':Done

Reading LLVM: /tmp/tmpuny0l_te-target.ll
Extracting function [show_data] from /tmp/tmpuny0l_te-target.ll
Dot file generated!
================ Starting round 0
MAPPING:
- 0 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 2 %4 = load i64, i64* %RBP.i, align 8
- 3 %5 = add i64 %1, 1
- 4 store i64 %5, i64* %3, align 8
- 5 %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 6 %7 = load i64, i64* %6, align 8
- 7 %8 = add i64 %7, -8
- 8 %9 = inttoptr i64 %8 to i64*
- 9 store i64 %4, i64* %9, align 8
- 10 %10 = load i64, i64* %3, align 8
- 11 store i64 %8, i64* %RBP.i, align 8
- 12 %11 = add i64 %7, -40
- 13 store i64 %11, i64* %6, align 8
- 14 %12 = icmp ult i64 %8, 32
- 15 %13 = zext i1 %12 to i8
- 16 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 17 store i8 %13, i8* %14, align 1
- 18 %15 = trunc i64 %11 to i32
- 19 %16 = and i32 %15, 255
- 20 %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
- 21 %18 = trunc i32 %17 to i8
- 22 %19 = and i8 %18, 1
- 23 %20 = xor i8 %19, 1
- 24 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 25 store i8 %20, i8* %21, align 1
- 26 %22 = xor i64 %8, %11
- 27 %23 = lshr i64 %22, 4
- 28 %24 = trunc i64 %23 to i8
- 29 %25 = and i8 %24, 1
- 30 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 31 store i8 %25, i8* %26, align 1
- 32 %27 = icmp eq i64 %11, 0
- 33 %28 = zext i1 %27 to i8
- 34 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 35 store i8 %28, i8* %29, align 1
- 36 %30 = lshr i64 %11, 63
- 37 %31 = trunc i64 %30 to i8
- 38 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 39 store i8 %31, i8* %32, align 1
- 40 %33 = lshr i64 %8, 63
- 41 %34 = xor i64 %30, %33
- 42 %35 = add nuw nsw i64 %34, %33
- 43 %36 = icmp eq i64 %35, 2
- 44 %37 = zext i1 %36 to i8
- 45 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 46 store i8 %37, i8* %38, align 1
- 47 %RDI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 48 %39 = add i64 %7, -16
- 49 %40 = load i64, i64* %RDI.i51, align 8
- 50 %41 = add i64 %10, 11
- 51 store i64 %41, i64* %3, align 8
- 52 %42 = inttoptr i64 %39 to i64*
- 53 store i64 %40, i64* %42, align 8
- 54 %43 = load i64, i64* %RBP.i, align 8
- 55 %44 = add i64 %43, -12
- 56 %45 = load i64, i64* %3, align 8
- 57 %46 = add i64 %45, 7
- 58 store i64 %46, i64* %3, align 8
- 59 %47 = inttoptr i64 %44 to i32*
- 60 store i32 0, i32* %47, align 4
- 61 %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 62 %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0
- 63 %EAX.i44 = bitcast %union.anon* %48 to i32*
- 64 %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 65 %RCX.i35 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
- 66 %ECX.i32 = bitcast %union.anon* %49 to i32*
- 67 %RDX.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 68 %RSI.i27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 69 %AL.i = bitcast %union.anon* %48 to i8*
- 70 %.pre = load i64, i64* %3, align 8
- 71 \<badref\> = br label %block_.L_400a13
- 72 %50 = phi i64 [ %.pre, %entry ], [ %183, %block_.L_400a69 ]
- 73 %MEMORY.0 = phi %struct.Memory* [ %2, %entry ], [ %MEMORY.1, %block_.L_400a69 ]
- 74 %51 = load i64, i64* %RBP.i, align 8
- 75 %52 = add i64 %51, -12
- 76 %53 = add i64 %50, 3
- 77 store i64 %53, i64* %3, align 8
- 78 %54 = inttoptr i64 %52 to i32*
- 79 %55 = load i32, i32* %54, align 4
- 80 %56 = zext i32 %55 to i64
- 81 store i64 %56, i64* %RAX.i46, align 8
- 82 %57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 83 %58 = sub i32 %55, %57
- 84 %59 = icmp ult i32 %55, %57
- 85 %60 = zext i1 %59 to i8
- 86 store i8 %60, i8* %14, align 1
- 87 %61 = and i32 %58, 255
- 88 %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
- 89 %63 = trunc i32 %62 to i8
- 90 %64 = and i8 %63, 1
- 91 %65 = xor i8 %64, 1
- 92 store i8 %65, i8* %21, align 1
- 93 %66 = xor i32 %57, %55
- 94 %67 = xor i32 %66, %58
- 95 %68 = lshr i32 %67, 4
- 96 %69 = trunc i32 %68 to i8
- 97 %70 = and i8 %69, 1
- 98 store i8 %70, i8* %26, align 1
- 99 %71 = icmp eq i32 %58, 0
- 100 %72 = zext i1 %71 to i8
- 101 store i8 %72, i8* %29, align 1
- 102 %73 = lshr i32 %58, 31
- 103 %74 = trunc i32 %73 to i8
- 104 store i8 %74, i8* %32, align 1
- 105 %75 = lshr i32 %55, 31
- 106 %76 = lshr i32 %57, 31
- 107 %77 = xor i32 %76, %75
- 108 %78 = xor i32 %73, %75
- 109 %79 = add nuw nsw i32 %78, %77
- 110 %80 = icmp eq i32 %79, 2
- 111 %81 = zext i1 %80 to i8
- 112 store i8 %81, i8* %38, align 1
- 113 %.v = select i1 %71, i64 91, i64 16
- 114 %82 = add i64 %50, %.v
- 115 store i64 %82, i64* %3, align 8
- 116 \<badref\> = br i1 %71, label %block_.L_400a6e, label %block_400a23
- 117 store i64 ptrtoint (%G__0x4017c4_type* @G__0x4017c4 to i64), i64* %RDI.i51, align 8
- 118 %83 = add i64 %51, -8
- 119 %84 = add i64 %82, 14
- 120 store i64 %84, i64* %3, align 8
- 121 %85 = inttoptr i64 %83 to i64*
- 122 %86 = load i64, i64* %85, align 8
- 123 store i64 %86, i64* %RAX.i46, align 8
- 124 %87 = add i64 %82, 17
- 125 store i64 %87, i64* %3, align 8
- 126 %88 = load i32, i32* %54, align 4
- 127 %89 = zext i32 %88 to i64
- 128 store i64 %89, i64* %RCX.i35, align 8
- 129 %90 = add i32 %88, 1
- 130 %91 = zext i32 %90 to i64
- 131 store i64 %91, i64* %RDX.i33, align 8
- 132 %92 = icmp eq i32 %88, -1
- 133 %93 = icmp eq i32 %90, 0
- 134 %94 = or i1 %92, %93
- 135 %95 = zext i1 %94 to i8
- 136 store i8 %95, i8* %14, align 1
- 137 %96 = and i32 %90, 255
- 138 %97 = tail call i32 @llvm.ctpop.i32(i32 %96)
- 139 %98 = trunc i32 %97 to i8
- 140 %99 = and i8 %98, 1
- 141 %100 = xor i8 %99, 1
- 142 store i8 %100, i8* %21, align 1
- 143 %101 = xor i32 %90, %88
- 144 %102 = lshr i32 %101, 4
- 145 %103 = trunc i32 %102 to i8
- 146 %104 = and i8 %103, 1
- 147 store i8 %104, i8* %26, align 1
- 148 %105 = zext i1 %93 to i8
- 149 store i8 %105, i8* %29, align 1
- 150 %106 = lshr i32 %90, 31
- 151 %107 = trunc i32 %106 to i8
- 152 store i8 %107, i8* %32, align 1
- 153 %108 = lshr i32 %88, 31
- 154 %109 = xor i32 %106, %108
- 155 %110 = add nuw nsw i32 %109, %106
- 156 %111 = icmp eq i32 %110, 2
- 157 %112 = zext i1 %111 to i8
- 158 store i8 %112, i8* %38, align 1
- 159 %113 = add i64 %82, 25
- 160 store i64 %113, i64* %3, align 8
- 161 store i32 %90, i32* %54, align 4
- 162 %114 = load i32, i32* %ECX.i32, align 4
- 163 %115 = load i64, i64* %3, align 8
- 164 %116 = sext i32 %114 to i64
- 165 store i64 %116, i64* %RSI.i27, align 8
- 166 %117 = load i64, i64* %RAX.i46, align 8
- 167 %118 = shl nsw i64 %116, 2
- 168 %119 = add i64 %117, %118
- 169 %120 = add i64 %115, 6
- 170 store i64 %120, i64* %3, align 8
- 171 %121 = inttoptr i64 %119 to i32*
- 172 %122 = load i32, i32* %121, align 4
- 173 %123 = zext i32 %122 to i64
- 174 store i64 %123, i64* %RSI.i27, align 8
- 175 store i8 0, i8* %AL.i, align 1
- 176 %124 = add i64 %115, -1260
- 177 %125 = add i64 %115, 13
- 178 %126 = load i64, i64* %6, align 8
- 179 %127 = add i64 %126, -8
- 180 %128 = inttoptr i64 %127 to i64*
- 181 store i64 %125, i64* %128, align 8
- 182 store i64 %127, i64* %6, align 8
- 183 store i64 %124, i64* %3, align 8
- 184 %129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.0)
- 185 %130 = load i64, i64* %RBP.i, align 8
- 186 %131 = add i64 %130, -12
- 187 %132 = load i64, i64* %3, align 8
- 188 %133 = add i64 %132, 3
- 189 store i64 %133, i64* %3, align 8
- 190 %134 = inttoptr i64 %131 to i32*
- 191 %135 = load i32, i32* %134, align 4
- 192 %136 = zext i32 %135 to i64
- 193 store i64 %136, i64* %RCX.i35, align 8
- 194 %137 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 195 %138 = sub i32 %135, %137
- 196 %139 = icmp ult i32 %135, %137
- 197 %140 = zext i1 %139 to i8
- 198 store i8 %140, i8* %14, align 1
- 199 %141 = and i32 %138, 255
- 200 %142 = tail call i32 @llvm.ctpop.i32(i32 %141)
- 201 %143 = trunc i32 %142 to i8
- 202 %144 = and i8 %143, 1
- 203 %145 = xor i8 %144, 1
- 204 store i8 %145, i8* %21, align 1
- 205 %146 = xor i32 %137, %135
- 206 %147 = xor i32 %146, %138
- 207 %148 = lshr i32 %147, 4
- 208 %149 = trunc i32 %148 to i8
- 209 %150 = and i8 %149, 1
- 210 store i8 %150, i8* %26, align 1
- 211 %151 = icmp eq i32 %138, 0
- 212 %152 = zext i1 %151 to i8
- 213 store i8 %152, i8* %29, align 1
- 214 %153 = lshr i32 %138, 31
- 215 %154 = trunc i32 %153 to i8
- 216 store i8 %154, i8* %32, align 1
- 217 %155 = lshr i32 %135, 31
- 218 %156 = lshr i32 %137, 31
- 219 %157 = xor i32 %156, %155
- 220 %158 = xor i32 %153, %155
- 221 %159 = add nuw nsw i32 %158, %157
- 222 %160 = icmp eq i32 %159, 2
- 223 %161 = zext i1 %160 to i8
- 224 store i8 %161, i8* %38, align 1
- 225 %162 = add i64 %130, -16
- 226 %163 = load i32, i32* %EAX.i44, align 4
- 227 %164 = add i64 %132, 13
- 228 store i64 %164, i64* %3, align 8
- 229 %165 = inttoptr i64 %162 to i32*
- 230 store i32 %163, i32* %165, align 4
- 231 %166 = load i64, i64* %3, align 8
- 232 %167 = load i8, i8* %29, align 1
- 233 %168 = icmp ne i8 %167, 0
- 234 %.v3 = select i1 %168, i64 19, i64 6
- 235 %169 = add i64 %166, %.v3
- 236 store i64 %169, i64* %3, align 8
- 237 %cmpBr_400a56 = icmp eq i8 %167, 1
- 238 \<badref\> = br i1 %cmpBr_400a56, label %block_.L_400a69, label %block_400a5c
- 239 store i64 44, i64* %RDI.i51, align 8
- 240 %170 = add i64 %169, -1308
- 241 %171 = add i64 %169, 10
- 242 %172 = load i64, i64* %6, align 8
- 243 %173 = add i64 %172, -8
- 244 %174 = inttoptr i64 %173 to i64*
- 245 store i64 %171, i64* %174, align 8
- 246 store i64 %173, i64* %6, align 8
- 247 store i64 %170, i64* %3, align 8
- 248 %175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %129)
- 249 %176 = load i64, i64* %RBP.i, align 8
- 250 %177 = add i64 %176, -20
- 251 %178 = load i32, i32* %EAX.i44, align 4
- 252 %179 = load i64, i64* %3, align 8
- 253 %180 = add i64 %179, 3
- 254 store i64 %180, i64* %3, align 8
- 255 %181 = inttoptr i64 %177 to i32*
- 256 store i32 %178, i32* %181, align 4
- 257 %.pre2 = load i64, i64* %3, align 8
- 258 \<badref\> = br label %block_.L_400a69
- 259 %182 = phi i64 [ %169, %block_400a23 ], [ %.pre2, %block_400a5c ]
- 260 %MEMORY.1 = phi %struct.Memory* [ %129, %block_400a23 ], [ %175, %block_400a5c ]
- 261 %183 = add i64 %182, -86
- 262 store i64 %183, i64* %3, align 8
- 263 \<badref\> = br label %block_.L_400a13
- 264 %184 = load i64, i64* %6, align 8
- 265 %185 = add i64 %184, 32
- 266 store i64 %185, i64* %6, align 8
- 267 %186 = icmp ugt i64 %184, -33
- 268 %187 = zext i1 %186 to i8
- 269 store i8 %187, i8* %14, align 1
- 270 %188 = trunc i64 %185 to i32
- 271 %189 = and i32 %188, 255
- 272 %190 = tail call i32 @llvm.ctpop.i32(i32 %189)
- 273 %191 = trunc i32 %190 to i8
- 274 %192 = and i8 %191, 1
- 275 %193 = xor i8 %192, 1
- 276 store i8 %193, i8* %21, align 1
- 277 %194 = xor i64 %185, %184
- 278 %195 = lshr i64 %194, 4
- 279 %196 = trunc i64 %195 to i8
- 280 %197 = and i8 %196, 1
- 281 store i8 %197, i8* %26, align 1
- 282 %198 = icmp eq i64 %185, 0
- 283 %199 = zext i1 %198 to i8
- 284 store i8 %199, i8* %29, align 1
- 285 %200 = lshr i64 %185, 63
- 286 %201 = trunc i64 %200 to i8
- 287 store i8 %201, i8* %32, align 1
- 288 %202 = lshr i64 %184, 63
- 289 %203 = xor i64 %200, %202
- 290 %204 = add nuw nsw i64 %203, %200
- 291 %205 = icmp eq i64 %204, 2
- 292 %206 = zext i1 %205 to i8
- 293 store i8 %206, i8* %38, align 1
- 294 %207 = add i64 %82, 5
- 295 store i64 %207, i64* %3, align 8
- 296 %208 = add i64 %184, 40
- 297 %209 = inttoptr i64 %185 to i64*
- 298 %210 = load i64, i64* %209, align 8
- 299 store i64 %210, i64* %RBP.i, align 8
- 300 store i64 %208, i64* %6, align 8
- 301 %211 = add i64 %82, 6
- 302 store i64 %211, i64* %3, align 8
- 303 %212 = inttoptr i64 %208 to i64*
- 304 %213 = load i64, i64* %212, align 8
- 305 store i64 %213, i64* %3, align 8
- 306 %214 = add i64 %184, 48
- 307 store i64 %214, i64* %6, align 8
- 308 ret %struct.Memory* %MEMORY.0
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d3df730>, {0: {0}, 1: {12}, 2: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 3: {14, 199}, 4: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 5: {11}, 6: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 7: {17, 188, 76, 249}, 8: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 9: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 10: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 11: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 12: {22}, 13: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 14: {24}, 15: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 16: {26}, 17: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 18: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 19: {107, 269, 207, 144, 29}, 20: {108, 270, 208, 81, 145, 254, 30}, 21: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 22: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 23: {33, 111, 273, 211, 148}, 24: {34}, 25: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 26: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 27: {37, 115, 277, 214, 151}, 28: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 29: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 30: {40}, 31: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 32: {104, 42, 203, 266, 303, 119, 281, 155}, 33: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 34: {44}, 35: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 36: {161, 50, 158, 46}, 37: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 38: {48}, 39: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 40: {161, 50, 158, 46}, 41: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 42: {129, 225, 163, 291, 134, 238, 305, 52}, 43: {130, 226, 164, 292, 53}, 44: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 45: {55}, 46: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 47: {10}, 48: {57, 295}, 49: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 50: {59}, 51: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 52: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 53: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 54: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 55: {64, 256, 95}, 56: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 57: {66}, 58: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 59: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 60: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 61: {1}, 62: {6, 7}, 63: {2, 3, 5}, 64: {4}, 65: {6, 7}, 66: {2, 3, 5}, 67: {8}, 68: {9}, 69: {2, 3, 5}, 70: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 71: {186, 91, 71}, 72: {92, 93, 182, 183}, 73: {92, 93, 182, 183}, 74: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 75: {64, 256, 95}, 76: {96, 258, 86}, 77: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 78: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 79: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 80: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 81: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 82: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 83: {265, 103}, 84: {104, 42, 203, 266, 303, 119, 281, 155}, 85: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 86: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 87: {107, 269, 207, 144, 29}, 88: {108, 270, 208, 81, 145, 254, 30}, 89: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 90: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 91: {33, 111, 273, 211, 148}, 92: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 93: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 94: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 95: {37, 115, 277, 214, 151}, 96: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 97: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 98: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 99: {104, 42, 203, 266, 303, 119, 281, 155}, 100: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 101: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 102: {288, 287, 284, 122, 220, 125, 126, 223}, 103: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 104: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 105: {288, 287, 284, 122, 220, 125, 126, 223}, 106: {288, 287, 284, 122, 220, 125, 126, 223}, 107: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 108: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 109: {129, 225, 163, 291, 134, 238, 305, 52}, 110: {130, 226, 164, 292, 53}, 111: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 112: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 113: {133}, 114: {129, 225, 163, 291, 134, 238, 305, 52}, 115: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 116: {136, 308}, 117: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 118: {17, 188, 76, 249}, 119: {189}, 120: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 121: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 122: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 123: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 124: {194}, 125: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 126: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 127: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 128: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 129: {14, 199}, 130: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 131: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 132: {202}, 133: {104, 42, 203, 266, 303, 119, 281, 155}, 134: {204}, 135: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 136: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 137: {107, 269, 207, 144, 29}, 138: {108, 270, 208, 81, 145, 254, 30}, 139: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 140: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 141: {33, 111, 273, 211, 148}, 142: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 143: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 144: {37, 115, 277, 214, 151}, 145: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 146: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 147: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 148: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 149: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 150: {288, 287, 284, 122, 220, 125, 126, 223}, 151: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 152: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 153: {288, 287, 284, 122, 220, 125, 126, 223}, 154: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 155: {129, 225, 163, 291, 134, 238, 305, 52}, 156: {130, 226, 164, 292, 53}, 157: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 158: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 159: {229}, 160: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 161: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 162: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 163: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 164: {234}, 165: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 166: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 167: {237}, 168: {129, 225, 163, 291, 134, 238, 305, 52}, 169: {174, 239}, 170: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 171: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 172: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 173: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 174: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 175: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 176: {246}, 177: {297, 247}, 178: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 179: {17, 188, 76, 249}, 180: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 181: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 182: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 183: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 184: {108, 270, 208, 81, 145, 254, 30}, 185: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 186: {64, 256, 95}, 187: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 188: {96, 258, 86}, 189: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 190: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 191: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 192: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 193: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 194: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 195: {265, 103}, 196: {104, 42, 203, 266, 303, 119, 281, 155}, 197: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 198: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 199: {107, 269, 207, 144, 29}, 200: {108, 270, 208, 81, 145, 254, 30}, 201: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 202: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 203: {33, 111, 273, 211, 148}, 204: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 205: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 206: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 207: {37, 115, 277, 214, 151}, 208: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 209: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 210: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 211: {104, 42, 203, 266, 303, 119, 281, 155}, 212: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 213: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 214: {288, 287, 284, 122, 220, 125, 126, 223}, 215: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 216: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 217: {288, 287, 284, 122, 220, 125, 126, 223}, 218: {288, 287, 284, 122, 220, 125, 126, 223}, 219: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 220: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 221: {129, 225, 163, 291, 134, 238, 305, 52}, 222: {130, 226, 164, 292, 53}, 223: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 224: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 225: {57, 295}, 226: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 227: {297, 247}, 228: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 229: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 230: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 231: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 232: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 233: {104, 42, 203, 266, 303, 119, 281, 155}, 234: {304}, 235: {129, 225, 163, 291, 134, 238, 305, 52}, 236: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 237: {307}, 238: {136, 308}, 239: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 240: {73}, 241: {74}, 242: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 243: {17, 188, 76, 249}, 244: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 245: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 246: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 247: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 248: {108, 270, 208, 81, 145, 254, 30}, 249: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 250: {83}, 251: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 252: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 253: {96, 258, 86}, 254: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 255: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 256: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 257: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 258: {186, 91, 71}, 259: {92, 93, 182, 183}, 260: {92, 93, 182, 183}, 261: {184}, 262: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 263: {186, 91, 71}, 264: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 265: {138}, 266: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 267: {140}, 268: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 269: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 270: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 271: {107, 269, 207, 144, 29}, 272: {108, 270, 208, 81, 145, 254, 30}, 273: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 274: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 275: {33, 111, 273, 211, 148}, 276: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 277: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 278: {37, 115, 277, 214, 151}, 279: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 280: {32, 39, 110, 272, 210, 147, 117, 279, 216, 153}, 281: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 282: {104, 42, 203, 266, 303, 119, 281, 155}, 283: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 284: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 285: {161, 50, 158, 46}, 286: {159, 38, 109, 47, 143, 209, 146, 271, 116, 278, 215, 152, 285, 123, 28, 221, 31}, 287: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 288: {161, 50, 158, 46}, 289: {128, 224, 162, 289, 36, 290, 113, 114, 51, 275, 213, 150, 276, 127}, 290: {129, 225, 163, 291, 134, 238, 305, 52}, 291: {130, 226, 164, 292, 53}, 292: {131, 100, 165, 197, 227, 200, 105, 262, 43, 267, 141, 205, 282, 293, 243, 54, 120, 25, 218, 156}, 293: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 294: {167}, 295: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 296: {169}, 297: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 298: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 299: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 300: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 301: {174, 239}, 302: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 303: {98, 68, 260, 170, 299, 77, 176, 241, 18, 88, 250, 61, 191}, 304: {257, 261, 264, 137, 13, 16, 20, 296, 171, 301, 302, 177, 58, 63, 192, 65, 196, 70, 75, 82, 84, 85, 90, 94, 99, 102, 232, 233, 236, 242, 248, 255}, 305: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 306: {179}, 307: {259, 132, 135, 263, 139, 268, 142, 15, 274, 19, 21, 149, 23, 280, 154, 27, 283, 157, 286, 160, 35, 166, 294, 168, 41, 298, 172, 45, 173, 175, 300, 49, 178, 306, 180, 56, 185, 187, 60, 62, 190, 193, 67, 195, 69, 198, 72, 201, 78, 79, 80, 206, 212, 87, 89, 217, 219, 222, 97, 228, 101, 230, 231, 106, 235, 112, 240, 244, 245, 118, 252, 121, 251, 124, 253}, 308: {181}})
Equivalent! frozenset({186, 91, 71}) {258, 263, 71}
Equivalent! frozenset({265, 103}) {83, 195}
Equivalent! frozenset({104, 266}) {196, 84}
Equivalent! frozenset({105, 267}) {197, 85}
Equivalent! frozenset({106, 268}) {198, 86}
Equivalent! frozenset({107, 269}) {199, 87}
Equivalent! frozenset({108, 270}) {88, 200}
Equivalent! frozenset({109, 271}) {89, 201}
Equivalent! frozenset({272, 110}) {202, 90}
Equivalent! frozenset({273, 111}) {91, 203}
Equivalent! frozenset({112, 274}) {204, 92}
Equivalent! frozenset({113, 275}) {205, 93}
Equivalent! frozenset({114, 276}) {206, 94}
Equivalent! frozenset({115, 277}) {207, 95}
Equivalent! frozenset({116, 278}) {96, 208}
Equivalent! frozenset({117, 279}) {97, 209}
Equivalent! frozenset({280, 118}) {210, 98}
Equivalent! frozenset({281, 119}) {99, 211}
Equivalent! frozenset({120, 282}) {212, 100}
Equivalent! frozenset({121, 283}) {213, 101}
Equivalent! frozenset({122, 284}) {214, 102}
Equivalent! frozenset({123, 285}) {215, 103}
Equivalent! frozenset({124, 286}) {104, 216}
Equivalent! frozenset({125, 287}) {105, 217}
Equivalent! frozenset({128, 290}) {220, 108}
Equivalent! frozenset({129, 291}) {221, 109}
Equivalent! frozenset({130, 292}) {222, 110}
Equivalent! frozenset({131, 293}) {223, 111}
Equivalent! frozenset({132, 294}) {112, 224}
Equivalent! frozenset({72, 187}) {117, 239}
Equivalent! frozenset({197, 262}) {192, 127}
Equivalent! frozenset({198, 263}) {128, 193}
Equivalent! frozenset({248, 75}) {178, 242}
Equivalent! frozenset({249, 76}) {179, 243}
Equivalent! frozenset({252, 79}) {182, 246}
Equivalent! frozenset({257, 85}) {187, 252}
Equivalent! frozenset({258, 86}) {188, 253}
Equivalent! frozenset({259, 87}) {189, 254}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d3df730>, {0: {0}, 1: {12}, 2: {13}, 3: {14}, 4: {15}, 5: {11}, 6: {16}, 7: {17}, 8: {18}, 9: {19}, 10: {20}, 11: {21}, 12: {22}, 13: {23}, 14: {24}, 15: {25}, 16: {26}, 17: {27}, 18: {28}, 19: {29}, 20: {30}, 21: {31}, 22: {32}, 23: {33}, 24: {34}, 25: {35}, 26: {36}, 27: {37}, 28: {38}, 29: {39}, 30: {40}, 31: {41}, 32: {42}, 33: {43}, 34: {44}, 35: {45}, 36: {46}, 37: {47}, 38: {48}, 39: {49}, 40: {50}, 41: {51}, 42: {52}, 43: {53}, 44: {54}, 45: {55}, 46: {56}, 47: {10}, 48: {57}, 49: {58}, 50: {59}, 51: {60}, 52: {61}, 53: {62}, 54: {94, 63}, 55: {64, 95}, 56: {65}, 57: {66}, 58: {67}, 59: {98, 68}, 60: {69, 231}, 61: {1}, 62: {6}, 63: {3}, 64: {4}, 65: {7}, 66: {5}, 67: {8}, 68: {9}, 69: {2}, 70: {70}, 71: {71}, 72: {92}, 73: {93}, 74: {94, 255}, 75: {256, 95}, 76: {96}, 77: {97}, 78: {98, 260}, 79: {99, 261}, 80: {100}, 81: {101}, 82: {261, 264, 99, 102}, 83: {265}, 84: {266}, 85: {267}, 86: {268}, 87: {269}, 88: {108}, 89: {109}, 90: {110}, 91: {273}, 92: {274}, 93: {275}, 94: {276}, 95: {277}, 96: {116}, 97: {117}, 98: {118}, 99: {281}, 100: {282}, 101: {283}, 102: {284}, 103: {285}, 104: {124}, 105: {125}, 106: {288, 125, 126, 287}, 107: {128, 289, 290, 127}, 108: {290}, 109: {291}, 110: {292}, 111: {293}, 112: {132}, 113: {133}, 114: {134}, 115: {135}, 116: {136}, 117: {72}, 118: {188}, 119: {189}, 120: {190}, 121: {191}, 122: {192}, 123: {193}, 124: {194}, 125: {195}, 126: {196, 261}, 127: {262}, 128: {198}, 129: {199}, 130: {200}, 131: {201}, 132: {202}, 133: {203}, 134: {204}, 135: {205}, 136: {206}, 137: {207}, 138: {208}, 139: {209}, 140: {210}, 141: {211}, 142: {212}, 143: {213}, 144: {214}, 145: {215}, 146: {216}, 147: {217}, 148: {218}, 149: {219}, 150: {220}, 151: {221}, 152: {222}, 153: {223}, 154: {224}, 155: {225}, 156: {226}, 157: {227}, 158: {228}, 159: {229}, 160: {230}, 161: {231}, 162: {232}, 163: {233}, 164: {234}, 165: {235}, 166: {236}, 167: {237}, 168: {238}, 169: {239}, 170: {240}, 171: {241}, 172: {242}, 173: {243}, 174: {244}, 175: {245}, 176: {246}, 177: {247}, 178: {248}, 179: {249}, 180: {250}, 181: {251}, 182: {252}, 183: {253}, 184: {254}, 185: {94, 255}, 186: {256, 95}, 187: {257}, 188: {258}, 189: {259}, 190: {98, 260}, 191: {99, 196, 261}, 192: {197}, 193: {263}, 194: {261, 264, 99, 102}, 195: {103}, 196: {104}, 197: {105}, 198: {106}, 199: {107}, 200: {270}, 201: {271}, 202: {272}, 203: {111}, 204: {112}, 205: {113}, 206: {114}, 207: {115}, 208: {278}, 209: {279}, 210: {280}, 211: {119}, 212: {120}, 213: {121}, 214: {122}, 215: {123}, 216: {286}, 217: {287}, 218: {288, 125, 126, 287}, 219: {128, 289, 290, 127}, 220: {128}, 221: {129}, 222: {130}, 223: {131}, 224: {294}, 225: {295}, 226: {296}, 227: {297}, 228: {298}, 229: {299}, 230: {300}, 231: {301}, 232: {302}, 233: {303}, 234: {304}, 235: {305}, 236: {306}, 237: {307}, 238: {308}, 239: {187}, 240: {73}, 241: {74}, 242: {75}, 243: {76}, 244: {77}, 245: {78}, 246: {79}, 247: {80}, 248: {81}, 249: {82}, 250: {83}, 251: {84}, 252: {85}, 253: {86}, 254: {87}, 255: {88}, 256: {89}, 257: {90}, 258: {186}, 259: {182}, 260: {183}, 261: {184}, 262: {185}, 263: {91}, 264: {137}, 265: {138}, 266: {139}, 267: {140}, 268: {141}, 269: {142}, 270: {143}, 271: {144}, 272: {145}, 273: {146}, 274: {147}, 275: {148}, 276: {149}, 277: {150}, 278: {151}, 279: {152}, 280: {153}, 281: {154}, 282: {155}, 283: {156}, 284: {157}, 285: {158}, 286: {159}, 287: {160}, 288: {161}, 289: {162}, 290: {163}, 291: {164}, 292: {165}, 293: {166}, 294: {167}, 295: {168}, 296: {169}, 297: {170}, 298: {171}, 299: {172}, 300: {173}, 301: {174}, 302: {175}, 303: {176}, 304: {177}, 305: {178}, 306: {179}, 307: {180}, 308: {181}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 store store
EXACT 5 getelementptr getelementptr
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 store store
EXACT 10 load load
EXACT 11 store store
EXACT 12 add add
EXACT 13 store store
EXACT 14 icmp icmp
EXACT 15 zext zext
EXACT 16 getelementptr getelementptr
EXACT 17 store store
EXACT 18 trunc trunc
EXACT 19 and and
EXACT 20 tail tail
EXACT 21 trunc trunc
EXACT 22 and and
EXACT 23 xor xor
EXACT 24 getelementptr getelementptr
EXACT 25 store store
EXACT 26 xor xor
EXACT 27 lshr lshr
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 getelementptr getelementptr
EXACT 31 store store
EXACT 32 icmp icmp
EXACT 33 zext zext
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 lshr lshr
EXACT 37 trunc trunc
EXACT 38 getelementptr getelementptr
EXACT 39 store store
EXACT 40 lshr lshr
EXACT 41 xor xor
EXACT 42 add add
EXACT 43 icmp icmp
EXACT 44 zext zext
EXACT 45 getelementptr getelementptr
EXACT 46 store store
EXACT 47 getelementptr getelementptr
EXACT 48 add add
EXACT 49 load load
EXACT 50 add add
EXACT 51 store store
EXACT 52 inttoptr inttoptr
EXACT 53 store store
MORE 54 POT: 2
MORE 55 POT: 2
EXACT 56 load load
EXACT 57 add add
EXACT 58 store store
MORE 59 POT: 2
MORE 60 POT: 2
EXACT 61 getelementptr getelementptr
EXACT 62 getelementptr getelementptr
EXACT 63 bitcast bitcast
EXACT 64 getelementptr getelementptr
EXACT 65 getelementptr getelementptr
EXACT 66 bitcast bitcast
EXACT 67 getelementptr getelementptr
EXACT 68 getelementptr getelementptr
EXACT 69 bitcast bitcast
EXACT 70 load load
EXACT 71 br br
EXACT 72 phi phi
EXACT 73 phi phi
MORE 74 POT: 2
MORE 75 POT: 2
EXACT 76 add add
EXACT 77 store store
MORE 78 POT: 2
MORE 79 POT: 2
EXACT 80 zext zext
EXACT 81 store store
MORE 82 POT: 4
EXACT 83 sub sub
EXACT 84 icmp icmp
EXACT 85 zext zext
EXACT 86 store store
EXACT 87 and and
EXACT 88 tail tail
EXACT 89 trunc trunc
EXACT 90 and and
EXACT 91 xor xor
EXACT 92 store store
EXACT 93 xor xor
EXACT 94 xor xor
EXACT 95 lshr lshr
EXACT 96 trunc trunc
EXACT 97 and and
EXACT 98 store store
EXACT 99 icmp icmp
EXACT 100 zext zext
EXACT 101 store store
EXACT 102 lshr lshr
EXACT 103 trunc trunc
EXACT 104 store store
EXACT 105 lshr lshr
MORE 106 POT: 4
MORE 107 POT: 4
EXACT 108 xor xor
EXACT 109 add add
EXACT 110 icmp icmp
EXACT 111 zext zext
EXACT 112 store store
EXACT 113 select select
EXACT 114 add add
EXACT 115 store store
EXACT 116 br br
EXACT 117 store store
EXACT 118 add add
EXACT 119 add add
EXACT 120 store store
EXACT 121 inttoptr inttoptr
EXACT 122 load load
EXACT 123 store store
EXACT 124 add add
EXACT 125 store store
MORE 126 POT: 2
EXACT 127 zext zext
EXACT 128 store store
EXACT 129 add add
EXACT 130 zext zext
EXACT 131 store store
EXACT 132 icmp icmp
EXACT 133 icmp icmp
EXACT 134 or or
EXACT 135 zext zext
EXACT 136 store store
EXACT 137 and and
EXACT 138 tail tail
EXACT 139 trunc trunc
EXACT 140 and and
EXACT 141 xor xor
EXACT 142 store store
EXACT 143 xor xor
EXACT 144 lshr lshr
EXACT 145 trunc trunc
EXACT 146 and and
EXACT 147 store store
EXACT 148 zext zext
EXACT 149 store store
EXACT 150 lshr lshr
EXACT 151 trunc trunc
EXACT 152 store store
EXACT 153 lshr lshr
EXACT 154 xor xor
EXACT 155 add add
EXACT 156 icmp icmp
EXACT 157 zext zext
EXACT 158 store store
EXACT 159 add add
EXACT 160 store store
EXACT 161 store store
EXACT 162 load load
EXACT 163 load load
EXACT 164 sext sext
EXACT 165 store store
EXACT 166 load load
EXACT 167 shl shl
EXACT 168 add add
EXACT 169 add add
EXACT 170 store store
EXACT 171 inttoptr inttoptr
EXACT 172 load load
EXACT 173 zext zext
EXACT 174 store store
EXACT 175 store store
EXACT 176 add add
EXACT 177 add add
EXACT 178 load load
EXACT 179 add add
EXACT 180 inttoptr inttoptr
EXACT 181 store store
EXACT 182 store store
EXACT 183 store store
EXACT 184 tail tail
MORE 185 POT: 2
MORE 186 POT: 2
EXACT 187 load load
EXACT 188 add add
EXACT 189 store store
MORE 190 POT: 2
MORE 191 POT: 3
EXACT 192 zext zext
EXACT 193 store store
MORE 194 POT: 4
EXACT 195 sub sub
EXACT 196 icmp icmp
EXACT 197 zext zext
EXACT 198 store store
EXACT 199 and and
EXACT 200 tail tail
EXACT 201 trunc trunc
EXACT 202 and and
EXACT 203 xor xor
EXACT 204 store store
EXACT 205 xor xor
EXACT 206 xor xor
EXACT 207 lshr lshr
EXACT 208 trunc trunc
EXACT 209 and and
EXACT 210 store store
EXACT 211 icmp icmp
EXACT 212 zext zext
EXACT 213 store store
EXACT 214 lshr lshr
EXACT 215 trunc trunc
EXACT 216 store store
EXACT 217 lshr lshr
MORE 218 POT: 4
MORE 219 POT: 4
EXACT 220 xor xor
EXACT 221 add add
EXACT 222 icmp icmp
EXACT 223 zext zext
EXACT 224 store store
EXACT 225 add add
EXACT 226 load load
EXACT 227 add add
EXACT 228 store store
EXACT 229 inttoptr inttoptr
EXACT 230 store store
EXACT 231 load load
EXACT 232 load load
EXACT 233 icmp icmp
EXACT 234 select select
EXACT 235 add add
EXACT 236 store store
EXACT 237 icmp icmp
EXACT 238 br br
EXACT 239 store store
EXACT 240 add add
EXACT 241 add add
EXACT 242 load load
EXACT 243 add add
EXACT 244 inttoptr inttoptr
EXACT 245 store store
EXACT 246 store store
EXACT 247 store store
EXACT 248 tail tail
EXACT 249 load load
EXACT 250 add add
EXACT 251 load load
EXACT 252 load load
EXACT 253 add add
EXACT 254 store store
EXACT 255 inttoptr inttoptr
EXACT 256 store store
EXACT 257 load load
EXACT 258 br br
EXACT 259 phi phi
EXACT 260 phi phi
EXACT 261 add add
EXACT 262 store store
EXACT 263 br br
EXACT 264 load load
EXACT 265 add add
EXACT 266 store store
EXACT 267 icmp icmp
EXACT 268 zext zext
EXACT 269 store store
EXACT 270 trunc trunc
EXACT 271 and and
EXACT 272 tail tail
EXACT 273 trunc trunc
EXACT 274 and and
EXACT 275 xor xor
EXACT 276 store store
EXACT 277 xor xor
EXACT 278 lshr lshr
EXACT 279 trunc trunc
EXACT 280 and and
EXACT 281 store store
EXACT 282 icmp icmp
EXACT 283 zext zext
EXACT 284 store store
EXACT 285 lshr lshr
EXACT 286 trunc trunc
EXACT 287 store store
EXACT 288 lshr lshr
EXACT 289 xor xor
EXACT 290 add add
EXACT 291 icmp icmp
EXACT 292 zext zext
EXACT 293 store store
EXACT 294 add add
EXACT 295 store store
EXACT 296 add add
EXACT 297 inttoptr inttoptr
EXACT 298 load load
EXACT 299 store store
EXACT 300 store store
EXACT 301 add add
EXACT 302 store store
EXACT 303 inttoptr inttoptr
EXACT 304 load load
EXACT 305 store store
EXACT 306 add add
EXACT 307 store store
EXACT 308 ret ret
================ Starting round 1
MAPPING:
- 0 %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
- 1 %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
- 2 %AL = bitcast %union.anon* %3 to i8*
- 3 %EAX = bitcast %union.anon* %3 to i32*
- 4 %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
- 5 %ECX = bitcast %union.anon* %4 to i32*
- 6 %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
- 7 %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
- 8 %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
- 9 %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
- 10 %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
- 11 %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
- 12 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 13 %5 = load i64, i64* %RBP, align 8
- 14 %6 = add i64 %1, 1
- 15 store i64 %6, i64* %PC, align 8
- 16 %7 = load i64, i64* %RSP, align 8
- 17 %8 = add i64 %7, -8
- 18 %9 = inttoptr i64 %8 to i64*
- 19 store i64 %5, i64* %9, align 8
- 20 %10 = load i64, i64* %PC, align 8
- 21 store i64 %8, i64* %RBP, align 8
- 22 %11 = add i64 %7, -40
- 23 store i64 %11, i64* %RSP, align 8
- 24 %12 = icmp ult i64 %8, 32
- 25 %13 = zext i1 %12 to i8
- 26 %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
- 27 store i8 %13, i8* %14, align 1
- 28 %15 = trunc i64 %11 to i32
- 29 %16 = and i32 %15, 255
- 30 %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
- 31 %18 = trunc i32 %17 to i8
- 32 %19 = and i8 %18, 1
- 33 %20 = xor i8 %19, 1
- 34 %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
- 35 store i8 %20, i8* %21, align 1
- 36 %22 = xor i64 %8, %11
- 37 %23 = lshr i64 %22, 4
- 38 %24 = trunc i64 %23 to i8
- 39 %25 = and i8 %24, 1
- 40 %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
- 41 store i8 %25, i8* %26, align 1
- 42 %27 = icmp eq i64 %11, 0
- 43 %28 = zext i1 %27 to i8
- 44 %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 45 store i8 %28, i8* %29, align 1
- 46 %30 = lshr i64 %11, 63
- 47 %31 = trunc i64 %30 to i8
- 48 %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
- 49 store i8 %31, i8* %32, align 1
- 50 %33 = lshr i64 %8, 63
- 51 %34 = xor i64 %30, %33
- 52 %35 = add nuw nsw i64 %34, %33
- 53 %36 = icmp eq i64 %35, 2
- 54 %37 = zext i1 %36 to i8
- 55 %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
- 56 store i8 %37, i8* %38, align 1
- 57 %39 = add i64 %7, -16
- 58 %40 = load i64, i64* %RDI, align 8
- 59 %41 = add i64 %10, 11
- 60 store i64 %41, i64* %PC, align 8
- 61 %42 = inttoptr i64 %39 to i64*
- 62 store i64 %40, i64* %42, align 8
- 63 %43 = load i64, i64* %RBP, align 8
- 64 %44 = add i64 %43, -12
- 65 %45 = load i64, i64* %PC, align 8
- 66 %46 = add i64 %45, 7
- 67 store i64 %46, i64* %PC, align 8
- 68 %47 = inttoptr i64 %44 to i32*
- 69 store i32 0, i32* %47, align 4
- 70 %.pre = load i64, i64* %PC, align 8
- 71 \<badref\> = br label %block_400a13
- 72 store i64 44, i64* %RDI, align 8
- 73 %48 = add i64 %212, -1308
- 74 %49 = add i64 %212, 10
- 75 %50 = load i64, i64* %RSP, align 8
- 76 %51 = add i64 %50, -8
- 77 %52 = inttoptr i64 %51 to i64*
- 78 store i64 %49, i64* %52, align 8
- 79 store i64 %51, i64* %RSP, align 8
- 80 store i64 %48, i64* %PC, align 8
- 81 %53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %172)
- 82 %54 = load i64, i64* %RBP, align 8
- 83 %55 = add i64 %54, -20
- 84 %56 = load i32, i32* %EAX, align 4
- 85 %57 = load i64, i64* %PC, align 8
- 86 %58 = add i64 %57, 3
- 87 store i64 %58, i64* %PC, align 8
- 88 %59 = inttoptr i64 %55 to i32*
- 89 store i32 %56, i32* %59, align 4
- 90 %.pre2 = load i64, i64* %PC, align 8
- 91 \<badref\> = br label %block_400a69
- 92 %60 = phi i64 [ %.pre, %block_400a00 ], [ %125, %block_400a69 ]
- 93 %MEMORY.0 = phi %struct.Memory* [ %2, %block_400a00 ], [ %MEMORY.1, %block_400a69 ]
- 94 %61 = load i64, i64* %RBP, align 8
- 95 %62 = add i64 %61, -12
- 96 %63 = add i64 %60, 3
- 97 store i64 %63, i64* %PC, align 8
- 98 %64 = inttoptr i64 %62 to i32*
- 99 %65 = load i32, i32* %64, align 4
- 100 %66 = zext i32 %65 to i64
- 101 store i64 %66, i64* %RAX, align 8
- 102 %67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 103 %68 = sub i32 %65, %67
- 104 %69 = icmp ult i32 %65, %67
- 105 %70 = zext i1 %69 to i8
- 106 store i8 %70, i8* %14, align 1
- 107 %71 = and i32 %68, 255
- 108 %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
- 109 %73 = trunc i32 %72 to i8
- 110 %74 = and i8 %73, 1
- 111 %75 = xor i8 %74, 1
- 112 store i8 %75, i8* %21, align 1
- 113 %76 = xor i32 %67, %65
- 114 %77 = xor i32 %76, %68
- 115 %78 = lshr i32 %77, 4
- 116 %79 = trunc i32 %78 to i8
- 117 %80 = and i8 %79, 1
- 118 store i8 %80, i8* %26, align 1
- 119 %81 = icmp eq i32 %68, 0
- 120 %82 = zext i1 %81 to i8
- 121 store i8 %82, i8* %29, align 1
- 122 %83 = lshr i32 %68, 31
- 123 %84 = trunc i32 %83 to i8
- 124 store i8 %84, i8* %32, align 1
- 125 %85 = lshr i32 %65, 31
- 126 %86 = lshr i32 %67, 31
- 127 %87 = xor i32 %86, %85
- 128 %88 = xor i32 %83, %85
- 129 %89 = add nuw nsw i32 %88, %87
- 130 %90 = icmp eq i32 %89, 2
- 131 %91 = zext i1 %90 to i8
- 132 store i8 %91, i8* %38, align 1
- 133 %.v = select i1 %81, i64 91, i64 16
- 134 %92 = add i64 %60, %.v
- 135 store i64 %92, i64* %PC, align 8
- 136 \<badref\> = br i1 %81, label %block_400a6e, label %block_400a23
- 137 %93 = load i64, i64* %RSP, align 8
- 138 %94 = add i64 %93, 32
- 139 store i64 %94, i64* %RSP, align 8
- 140 %95 = icmp ugt i64 %93, -33
- 141 %96 = zext i1 %95 to i8
- 142 store i8 %96, i8* %14, align 1
- 143 %97 = trunc i64 %94 to i32
- 144 %98 = and i32 %97, 255
- 145 %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12
- 146 %100 = trunc i32 %99 to i8
- 147 %101 = and i8 %100, 1
- 148 %102 = xor i8 %101, 1
- 149 store i8 %102, i8* %21, align 1
- 150 %103 = xor i64 %94, %93
- 151 %104 = lshr i64 %103, 4
- 152 %105 = trunc i64 %104 to i8
- 153 %106 = and i8 %105, 1
- 154 store i8 %106, i8* %26, align 1
- 155 %107 = icmp eq i64 %94, 0
- 156 %108 = zext i1 %107 to i8
- 157 store i8 %108, i8* %29, align 1
- 158 %109 = lshr i64 %94, 63
- 159 %110 = trunc i64 %109 to i8
- 160 store i8 %110, i8* %32, align 1
- 161 %111 = lshr i64 %93, 63
- 162 %112 = xor i64 %109, %111
- 163 %113 = add nuw nsw i64 %112, %109
- 164 %114 = icmp eq i64 %113, 2
- 165 %115 = zext i1 %114 to i8
- 166 store i8 %115, i8* %38, align 1
- 167 %116 = add i64 %92, 5
- 168 store i64 %116, i64* %PC, align 8
- 169 %117 = add i64 %93, 40
- 170 %118 = inttoptr i64 %94 to i64*
- 171 %119 = load i64, i64* %118, align 8
- 172 store i64 %119, i64* %RBP, align 8
- 173 store i64 %117, i64* %RSP, align 8
- 174 %120 = add i64 %92, 6
- 175 store i64 %120, i64* %PC, align 8
- 176 %121 = inttoptr i64 %117 to i64*
- 177 %122 = load i64, i64* %121, align 8
- 178 store i64 %122, i64* %PC, align 8
- 179 %123 = add i64 %93, 48
- 180 store i64 %123, i64* %RSP, align 8
- 181 ret %struct.Memory* %MEMORY.0
- 182 %124 = phi i64 [ %212, %block_400a23 ], [ %.pre2, %block_400a5c ]
- 183 %MEMORY.1 = phi %struct.Memory* [ %172, %block_400a23 ], [ %53, %block_400a5c ]
- 184 %125 = add i64 %124, -86
- 185 store i64 %125, i64* %PC, align 8
- 186 \<badref\> = br label %block_400a13
- 187 store i64 add (i64 ptrtoint (%seg_4017c0__rodata_type* @seg_4017c0__rodata to i64), i64 4), i64* %RDI, align 8
- 188 %126 = add i64 %61, -8
- 189 %127 = add i64 %92, 14
- 190 store i64 %127, i64* %PC, align 8
- 191 %128 = inttoptr i64 %126 to i64*
- 192 %129 = load i64, i64* %128, align 8
- 193 store i64 %129, i64* %RAX, align 8
- 194 %130 = add i64 %92, 17
- 195 store i64 %130, i64* %PC, align 8
- 196 %131 = load i32, i32* %64, align 4
- 197 %132 = zext i32 %131 to i64
- 198 store i64 %132, i64* %RCX, align 8
- 199 %133 = add i32 %131, 1
- 200 %134 = zext i32 %133 to i64
- 201 store i64 %134, i64* %RDX, align 8
- 202 %135 = icmp eq i32 %131, -1
- 203 %136 = icmp eq i32 %133, 0
- 204 %137 = or i1 %135, %136
- 205 %138 = zext i1 %137 to i8
- 206 store i8 %138, i8* %14, align 1
- 207 %139 = and i32 %133, 255
- 208 %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #12
- 209 %141 = trunc i32 %140 to i8
- 210 %142 = and i8 %141, 1
- 211 %143 = xor i8 %142, 1
- 212 store i8 %143, i8* %21, align 1
- 213 %144 = xor i32 %133, %131
- 214 %145 = lshr i32 %144, 4
- 215 %146 = trunc i32 %145 to i8
- 216 %147 = and i8 %146, 1
- 217 store i8 %147, i8* %26, align 1
- 218 %148 = zext i1 %136 to i8
- 219 store i8 %148, i8* %29, align 1
- 220 %149 = lshr i32 %133, 31
- 221 %150 = trunc i32 %149 to i8
- 222 store i8 %150, i8* %32, align 1
- 223 %151 = lshr i32 %131, 31
- 224 %152 = xor i32 %149, %151
- 225 %153 = add nuw nsw i32 %152, %149
- 226 %154 = icmp eq i32 %153, 2
- 227 %155 = zext i1 %154 to i8
- 228 store i8 %155, i8* %38, align 1
- 229 %156 = add i64 %92, 25
- 230 store i64 %156, i64* %PC, align 8
- 231 store i32 %133, i32* %64, align 4
- 232 %157 = load i32, i32* %ECX, align 4
- 233 %158 = load i64, i64* %PC, align 8
- 234 %159 = sext i32 %157 to i64
- 235 store i64 %159, i64* %RSI, align 8
- 236 %160 = load i64, i64* %RAX, align 8
- 237 %161 = shl nsw i64 %159, 2
- 238 %162 = add i64 %160, %161
- 239 %163 = add i64 %158, 6
- 240 store i64 %163, i64* %PC, align 8
- 241 %164 = inttoptr i64 %162 to i32*
- 242 %165 = load i32, i32* %164, align 4
- 243 %166 = zext i32 %165 to i64
- 244 store i64 %166, i64* %RSI, align 8
- 245 store i8 0, i8* %AL, align 1
- 246 %167 = add i64 %158, -1260
- 247 %168 = add i64 %158, 13
- 248 %169 = load i64, i64* %RSP, align 8
- 249 %170 = add i64 %169, -8
- 250 %171 = inttoptr i64 %170 to i64*
- 251 store i64 %168, i64* %171, align 8
- 252 store i64 %170, i64* %RSP, align 8
- 253 store i64 %167, i64* %PC, align 8
- 254 %172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
- 255 %173 = load i64, i64* %RBP, align 8
- 256 %174 = add i64 %173, -12
- 257 %175 = load i64, i64* %PC, align 8
- 258 %176 = add i64 %175, 3
- 259 store i64 %176, i64* %PC, align 8
- 260 %177 = inttoptr i64 %174 to i32*
- 261 %178 = load i32, i32* %177, align 4
- 262 %179 = zext i32 %178 to i64
- 263 store i64 %179, i64* %RCX, align 8
- 264 %180 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 265 %181 = sub i32 %178, %180
- 266 %182 = icmp ult i32 %178, %180
- 267 %183 = zext i1 %182 to i8
- 268 store i8 %183, i8* %14, align 1
- 269 %184 = and i32 %181, 255
- 270 %185 = tail call i32 @llvm.ctpop.i32(i32 %184) #12
- 271 %186 = trunc i32 %185 to i8
- 272 %187 = and i8 %186, 1
- 273 %188 = xor i8 %187, 1
- 274 store i8 %188, i8* %21, align 1
- 275 %189 = xor i32 %180, %178
- 276 %190 = xor i32 %189, %181
- 277 %191 = lshr i32 %190, 4
- 278 %192 = trunc i32 %191 to i8
- 279 %193 = and i8 %192, 1
- 280 store i8 %193, i8* %26, align 1
- 281 %194 = icmp eq i32 %181, 0
- 282 %195 = zext i1 %194 to i8
- 283 store i8 %195, i8* %29, align 1
- 284 %196 = lshr i32 %181, 31
- 285 %197 = trunc i32 %196 to i8
- 286 store i8 %197, i8* %32, align 1
- 287 %198 = lshr i32 %178, 31
- 288 %199 = lshr i32 %180, 31
- 289 %200 = xor i32 %199, %198
- 290 %201 = xor i32 %196, %198
- 291 %202 = add nuw nsw i32 %201, %200
- 292 %203 = icmp eq i32 %202, 2
- 293 %204 = zext i1 %203 to i8
- 294 store i8 %204, i8* %38, align 1
- 295 %205 = add i64 %173, -16
- 296 %206 = load i32, i32* %EAX, align 4
- 297 %207 = add i64 %175, 13
- 298 store i64 %207, i64* %PC, align 8
- 299 %208 = inttoptr i64 %205 to i32*
- 300 store i32 %206, i32* %208, align 4
- 301 %209 = load i64, i64* %PC, align 8
- 302 %210 = load i8, i8* %29, align 1
- 303 %211 = icmp ne i8 %210, 0
- 304 %.v3 = select i1 %211, i64 19, i64 6
- 305 %212 = add i64 %209, %.v3
- 306 store i64 %212, i64* %PC, align 8
- 307 %213 = icmp eq i8 %210, 1
- 308 \<badref\> = br i1 %213, label %block_400a69, label %block_400a5c
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d3df8c8>, {0: {0}, 1: {61}, 2: {66, 69, 63}, 3: {66, 69, 63}, 4: {64}, 5: {66, 69, 63}, 6: {65, 62}, 7: {65, 62}, 8: {67}, 9: {68}, 10: {47}, 11: {5}, 12: {1}, 13: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 14: {129, 3}, 15: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 16: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 17: {179, 243, 118, 7}, 18: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 19: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 20: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 21: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 22: {12}, 23: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 24: {14}, 25: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 26: {16}, 27: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 28: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 29: {199, 137, 271, 19, 87}, 30: {248, 200, 138, 272, 20, 88, 184}, 31: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 32: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 33: {203, 141, 275, 23, 91}, 34: {24}, 35: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 36: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 37: {207, 144, 278, 27, 95}, 38: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 39: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 40: {30}, 41: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 42: {32, 99, 196, 133, 233, 211, 84, 282}, 43: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 44: {34}, 45: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 46: {40, 288, 36, 285}, 47: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 48: {38}, 49: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 50: {40, 288, 36, 285}, 51: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 52: {290, 168, 42, 235, 109, 114, 155, 221}, 53: {291, 43, 110, 156, 222}, 54: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 55: {45}, 56: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 57: {48, 225}, 58: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 59: {50}, 60: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 61: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 62: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 63: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 64: {186, 75, 55}, 65: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 66: {57}, 67: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 68: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 69: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 70: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 71: {258, 263, 71}, 72: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 73: {240}, 74: {241}, 75: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 76: {179, 243, 118, 7}, 77: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 78: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 79: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 80: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 81: {248, 200, 138, 272, 20, 88, 184}, 82: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 83: {250}, 84: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 85: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 86: {188, 76, 253}, 87: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 88: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 89: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 90: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 91: {258, 263, 71}, 92: {72, 73, 259, 260}, 93: {72, 73, 259, 260}, 94: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 95: {186, 75, 55}, 96: {188, 76, 253}, 97: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 98: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 99: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 100: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 101: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 102: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 103: {83, 195}, 104: {32, 99, 196, 133, 233, 211, 84, 282}, 105: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 106: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 107: {199, 137, 271, 19, 87}, 108: {248, 200, 138, 272, 20, 88, 184}, 109: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 110: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 111: {203, 141, 275, 23, 91}, 112: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 113: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 114: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 115: {207, 144, 278, 27, 95}, 116: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 117: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 118: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 119: {32, 99, 196, 133, 233, 211, 84, 282}, 120: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 121: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 122: {217, 102, 105, 106, 150, 214, 153, 218}, 123: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 124: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 125: {217, 102, 105, 106, 150, 214, 153, 218}, 126: {217, 102, 105, 106, 150, 214, 153, 218}, 127: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 128: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 129: {290, 168, 42, 235, 109, 114, 155, 221}, 130: {291, 43, 110, 156, 222}, 131: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 132: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 133: {113}, 134: {290, 168, 42, 235, 109, 114, 155, 221}, 135: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 136: {116, 238}, 137: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 138: {265}, 139: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 140: {267}, 141: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 142: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 143: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 144: {199, 137, 271, 19, 87}, 145: {248, 200, 138, 272, 20, 88, 184}, 146: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 147: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 148: {203, 141, 275, 23, 91}, 149: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 150: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 151: {207, 144, 278, 27, 95}, 152: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 153: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 154: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 155: {32, 99, 196, 133, 233, 211, 84, 282}, 156: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 157: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 158: {40, 288, 36, 285}, 159: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 160: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 161: {40, 288, 36, 285}, 162: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 163: {290, 168, 42, 235, 109, 114, 155, 221}, 164: {291, 43, 110, 156, 222}, 165: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 166: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 167: {294}, 168: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 169: {296}, 170: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 171: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 172: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 173: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 174: {169, 301}, 175: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 176: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 177: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 178: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 179: {306}, 180: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 181: {308}, 182: {72, 73, 259, 260}, 183: {72, 73, 259, 260}, 184: {261}, 185: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 186: {258, 263, 71}, 187: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 188: {179, 243, 118, 7}, 189: {119}, 190: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 191: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 192: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 193: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 194: {124}, 195: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 196: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 197: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 198: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 199: {129, 3}, 200: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 201: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 202: {132}, 203: {32, 99, 196, 133, 233, 211, 84, 282}, 204: {134}, 205: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 206: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 207: {199, 137, 271, 19, 87}, 208: {248, 200, 138, 272, 20, 88, 184}, 209: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 210: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 211: {203, 141, 275, 23, 91}, 212: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 213: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 214: {207, 144, 278, 27, 95}, 215: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 216: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 217: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 218: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 219: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 220: {217, 102, 105, 106, 150, 214, 153, 218}, 221: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 222: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 223: {217, 102, 105, 106, 150, 214, 153, 218}, 224: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 225: {290, 168, 42, 235, 109, 114, 155, 221}, 226: {291, 43, 110, 156, 222}, 227: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 228: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 229: {159}, 230: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 231: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 232: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 233: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 234: {164}, 235: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 236: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 237: {167}, 238: {290, 168, 42, 235, 109, 114, 155, 221}, 239: {169, 301}, 240: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 241: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 242: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 243: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 244: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 245: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 246: {176}, 247: {177, 227}, 248: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 249: {179, 243, 118, 7}, 250: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 251: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 252: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 253: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 254: {248, 200, 138, 272, 20, 88, 184}, 255: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 256: {186, 75, 55}, 257: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 258: {188, 76, 253}, 259: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 260: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 261: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 262: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 263: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 264: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 265: {83, 195}, 266: {32, 99, 196, 133, 233, 211, 84, 282}, 267: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 268: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 269: {199, 137, 271, 19, 87}, 270: {248, 200, 138, 272, 20, 88, 184}, 271: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 272: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 273: {203, 141, 275, 23, 91}, 274: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 275: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 276: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 277: {207, 144, 278, 27, 95}, 278: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 279: {97, 202, 140, 209, 146, 274, 22, 280, 90, 29}, 280: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 281: {32, 99, 196, 133, 233, 211, 84, 282}, 282: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 283: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 284: {217, 102, 105, 106, 150, 214, 153, 218}, 285: {96, 37, 103, 201, 139, 279, 270, 208, 145, 18, 273, 21, 151, 89, 215, 28, 286}, 286: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 287: {217, 102, 105, 106, 150, 214, 153, 218}, 288: {217, 102, 105, 106, 150, 214, 153, 218}, 289: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 290: {289, 154, 41, 107, 108, 205, 206, 143, 277, 26, 219, 220, 93, 94}, 291: {290, 168, 42, 235, 109, 114, 155, 221}, 292: {291, 43, 110, 156, 222}, 293: {192, 33, 130, 223, 100, 197, 292, 135, 44, 173, 268, 15, 80, 111, 148, 85, 212, 283, 157, 127}, 294: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 295: {48, 225}, 296: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 297: {177, 227}, 298: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 299: {229, 8, 297, 171, 78, 303, 52, 180, 244, 121, 59, 190, 255}, 300: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 301: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 302: {257, 2, 6, 264, 10, 162, 163, 166, 298, 172, 304, 49, 178, 54, 56, 185, 187, 191, 194, 70, 74, 79, 82, 226, 231, 232, 242, 249, 122, 251, 252, 126}, 303: {32, 99, 196, 133, 233, 211, 84, 282}, 304: {234}, 305: {290, 168, 42, 235, 109, 114, 155, 221}, 306: {128, 256, 131, 4, 262, 136, 9, 266, 11, 13, 142, 269, 17, 147, 276, 149, 152, 25, 281, 284, 158, 31, 160, 161, 287, 35, 165, 293, 39, 295, 170, 299, 300, 46, 174, 175, 302, 305, 51, 307, 53, 181, 182, 183, 58, 60, 189, 193, 198, 204, 77, 81, 210, 213, 86, 216, 247, 92, 224, 98, 228, 101, 230, 104, 236, 239, 112, 115, 117, 245, 246, 120, 123, 125, 254}, 307: {237}, 308: {116, 238}})
Equivalent! frozenset({258, 263, 71}) {186, 91, 71}
Equivalent! frozenset({117, 239}) {72, 187}
Equivalent! frozenset({178, 242}) {248, 75}
Equivalent! frozenset({179, 243}) {249, 76}
Equivalent! frozenset({182, 246}) {252, 79}
Equivalent! frozenset({187, 252}) {257, 85}
Equivalent! frozenset({188, 253}) {258, 86}
Equivalent! frozenset({189, 254}) {259, 87}
Equivalent! frozenset({83, 195}) {265, 103}
Equivalent! frozenset({196, 84}) {104, 266}
Equivalent! frozenset({197, 85}) {105, 267}
Equivalent! frozenset({198, 86}) {106, 268}
Equivalent! frozenset({87, 199}) {107, 269}
Equivalent! frozenset({88, 200}) {108, 270}
Equivalent! frozenset({89, 201}) {109, 271}
Equivalent! frozenset({202, 90}) {272, 110}
Equivalent! frozenset({91, 203}) {273, 111}
Equivalent! frozenset({204, 92}) {112, 274}
Equivalent! frozenset({205, 93}) {113, 275}
Equivalent! frozenset({206, 94}) {114, 276}
Equivalent! frozenset({207, 95}) {115, 277}
Equivalent! frozenset({208, 96}) {116, 278}
Equivalent! frozenset({209, 97}) {117, 279}
Equivalent! frozenset({210, 98}) {280, 118}
Equivalent! frozenset({99, 211}) {281, 119}
Equivalent! frozenset({100, 212}) {120, 282}
Equivalent! frozenset({101, 213}) {121, 283}
Equivalent! frozenset({102, 214}) {122, 284}
Equivalent! frozenset({103, 215}) {123, 285}
Equivalent! frozenset({104, 216}) {124, 286}
Equivalent! frozenset({217, 105}) {125, 287}
Equivalent! frozenset({220, 108}) {128, 290}
Equivalent! frozenset({221, 109}) {129, 291}
Equivalent! frozenset({222, 110}) {130, 292}
Equivalent! frozenset({223, 111}) {131, 293}
Equivalent! frozenset({224, 112}) {132, 294}
Equivalent! frozenset({192, 127}) {197, 262}
Equivalent! frozenset({128, 193}) {198, 263}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d3df8c8>, {0: {0}, 1: {61}, 2: {69}, 3: {63}, 4: {64}, 5: {66}, 6: {62}, 7: {65}, 8: {67}, 9: {68}, 10: {47}, 11: {5}, 12: {1}, 13: {2}, 14: {3}, 15: {4}, 16: {6}, 17: {7}, 18: {8}, 19: {9}, 20: {10}, 21: {11}, 22: {12}, 23: {13}, 24: {14}, 25: {15}, 26: {16}, 27: {17}, 28: {18}, 29: {19}, 30: {20}, 31: {21}, 32: {22}, 33: {23}, 34: {24}, 35: {25}, 36: {26}, 37: {27}, 38: {28}, 39: {29}, 40: {30}, 41: {31}, 42: {32}, 43: {33}, 44: {34}, 45: {35}, 46: {36}, 47: {37}, 48: {38}, 49: {39}, 50: {40}, 51: {41}, 52: {42}, 53: {43}, 54: {44}, 55: {45}, 56: {46}, 57: {48}, 58: {49}, 59: {50}, 60: {51}, 61: {52}, 62: {53}, 63: {74, 54}, 64: {75, 55}, 65: {56}, 66: {57}, 67: {58}, 68: {59, 78}, 69: {161, 60}, 70: {70}, 71: {71}, 72: {117}, 73: {240}, 74: {241}, 75: {242}, 76: {243}, 77: {244}, 78: {245}, 79: {246}, 80: {247}, 81: {248}, 82: {249}, 83: {250}, 84: {251}, 85: {252}, 86: {253}, 87: {254}, 88: {255}, 89: {256}, 90: {257}, 91: {263}, 92: {72}, 93: {73}, 94: {185, 74}, 95: {186, 75}, 96: {76}, 97: {77}, 98: {190, 78}, 99: {191, 79}, 100: {80}, 101: {81}, 102: {191, 194, 79, 82}, 103: {195}, 104: {196}, 105: {197}, 106: {198}, 107: {87}, 108: {88}, 109: {89}, 110: {90}, 111: {203}, 112: {204}, 113: {205}, 114: {206}, 115: {207}, 116: {208}, 117: {209}, 118: {98}, 119: {211}, 120: {100}, 121: {101}, 122: {102}, 123: {103}, 124: {104}, 125: {217}, 126: {105, 218, 217, 106}, 127: {108, 107, 220, 219}, 128: {220}, 129: {221}, 130: {222}, 131: {223}, 132: {224}, 133: {113}, 134: {114}, 135: {115}, 136: {116}, 137: {264}, 138: {265}, 139: {266}, 140: {267}, 141: {268}, 142: {269}, 143: {270}, 144: {271}, 145: {272}, 146: {273}, 147: {274}, 148: {275}, 149: {276}, 150: {277}, 151: {278}, 152: {279}, 153: {280}, 154: {281}, 155: {282}, 156: {283}, 157: {284}, 158: {285}, 159: {286}, 160: {287}, 161: {288}, 162: {289}, 163: {290}, 164: {291}, 165: {292}, 166: {293}, 167: {294}, 168: {295}, 169: {296}, 170: {297}, 171: {298}, 172: {299}, 173: {300}, 174: {301}, 175: {302}, 176: {303}, 177: {304}, 178: {305}, 179: {306}, 180: {307}, 181: {308}, 182: {259}, 183: {260}, 184: {261}, 185: {262}, 186: {258}, 187: {239}, 188: {118}, 189: {119}, 190: {120}, 191: {121}, 192: {122}, 193: {123}, 194: {124}, 195: {125}, 196: {126, 191}, 197: {192}, 198: {128}, 199: {129}, 200: {130}, 201: {131}, 202: {132}, 203: {133}, 204: {134}, 205: {135}, 206: {136}, 207: {137}, 208: {138}, 209: {139}, 210: {140}, 211: {141}, 212: {142}, 213: {143}, 214: {144}, 215: {145}, 216: {146}, 217: {147}, 218: {148}, 219: {149}, 220: {150}, 221: {151}, 222: {152}, 223: {153}, 224: {154}, 225: {155}, 226: {156}, 227: {157}, 228: {158}, 229: {159}, 230: {160}, 231: {161}, 232: {162}, 233: {163}, 234: {164}, 235: {165}, 236: {166}, 237: {167}, 238: {168}, 239: {169}, 240: {170}, 241: {171}, 242: {172}, 243: {173}, 244: {174}, 245: {175}, 246: {176}, 247: {177}, 248: {178}, 249: {179}, 250: {180}, 251: {181}, 252: {182}, 253: {183}, 254: {184}, 255: {185, 74}, 256: {186, 75}, 257: {187}, 258: {188}, 259: {189}, 260: {190, 78}, 261: {191, 126, 79}, 262: {127}, 263: {193}, 264: {191, 194, 79, 82}, 265: {83}, 266: {84}, 267: {85}, 268: {86}, 269: {199}, 270: {200}, 271: {201}, 272: {202}, 273: {91}, 274: {92}, 275: {93}, 276: {94}, 277: {95}, 278: {96}, 279: {97}, 280: {210}, 281: {99}, 282: {212}, 283: {213}, 284: {214}, 285: {215}, 286: {216}, 287: {105}, 288: {105, 218, 217, 106}, 289: {108, 107, 220, 219}, 290: {108}, 291: {109}, 292: {110}, 293: {111}, 294: {112}, 295: {225}, 296: {226}, 297: {227}, 298: {228}, 299: {229}, 300: {230}, 301: {231}, 302: {232}, 303: {233}, 304: {234}, 305: {235}, 306: {236}, 307: {237}, 308: {238}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 bitcast bitcast
EXACT 3 bitcast bitcast
EXACT 4 getelementptr getelementptr
EXACT 5 bitcast bitcast
EXACT 6 getelementptr getelementptr
EXACT 7 getelementptr getelementptr
EXACT 8 getelementptr getelementptr
EXACT 9 getelementptr getelementptr
EXACT 10 getelementptr getelementptr
EXACT 11 getelementptr getelementptr
EXACT 12 getelementptr getelementptr
EXACT 13 load load
EXACT 14 add add
EXACT 15 store store
EXACT 16 load load
EXACT 17 add add
EXACT 18 inttoptr inttoptr
EXACT 19 store store
EXACT 20 load load
EXACT 21 store store
EXACT 22 add add
EXACT 23 store store
EXACT 24 icmp icmp
EXACT 25 zext zext
EXACT 26 getelementptr getelementptr
EXACT 27 store store
EXACT 28 trunc trunc
EXACT 29 and and
EXACT 30 tail tail
EXACT 31 trunc trunc
EXACT 32 and and
EXACT 33 xor xor
EXACT 34 getelementptr getelementptr
EXACT 35 store store
EXACT 36 xor xor
EXACT 37 lshr lshr
EXACT 38 trunc trunc
EXACT 39 and and
EXACT 40 getelementptr getelementptr
EXACT 41 store store
EXACT 42 icmp icmp
EXACT 43 zext zext
EXACT 44 getelementptr getelementptr
EXACT 45 store store
EXACT 46 lshr lshr
EXACT 47 trunc trunc
EXACT 48 getelementptr getelementptr
EXACT 49 store store
EXACT 50 lshr lshr
EXACT 51 xor xor
EXACT 52 add add
EXACT 53 icmp icmp
EXACT 54 zext zext
EXACT 55 getelementptr getelementptr
EXACT 56 store store
EXACT 57 add add
EXACT 58 load load
EXACT 59 add add
EXACT 60 store store
EXACT 61 inttoptr inttoptr
EXACT 62 store store
MORE 63 POT: 2
MORE 64 POT: 2
EXACT 65 load load
EXACT 66 add add
EXACT 67 store store
MORE 68 POT: 2
MORE 69 POT: 2
EXACT 70 load load
EXACT 71 br br
EXACT 72 store store
EXACT 73 add add
EXACT 74 add add
EXACT 75 load load
EXACT 76 add add
EXACT 77 inttoptr inttoptr
EXACT 78 store store
EXACT 79 store store
EXACT 80 store store
EXACT 81 tail tail
EXACT 82 load load
EXACT 83 add add
EXACT 84 load load
EXACT 85 load load
EXACT 86 add add
EXACT 87 store store
EXACT 88 inttoptr inttoptr
EXACT 89 store store
EXACT 90 load load
EXACT 91 br br
EXACT 92 phi phi
EXACT 93 phi phi
MORE 94 POT: 2
MORE 95 POT: 2
EXACT 96 add add
EXACT 97 store store
MORE 98 POT: 2
MORE 99 POT: 2
EXACT 100 zext zext
EXACT 101 store store
MORE 102 POT: 4
EXACT 103 sub sub
EXACT 104 icmp icmp
EXACT 105 zext zext
EXACT 106 store store
EXACT 107 and and
EXACT 108 tail tail
EXACT 109 trunc trunc
EXACT 110 and and
EXACT 111 xor xor
EXACT 112 store store
EXACT 113 xor xor
EXACT 114 xor xor
EXACT 115 lshr lshr
EXACT 116 trunc trunc
EXACT 117 and and
EXACT 118 store store
EXACT 119 icmp icmp
EXACT 120 zext zext
EXACT 121 store store
EXACT 122 lshr lshr
EXACT 123 trunc trunc
EXACT 124 store store
EXACT 125 lshr lshr
MORE 126 POT: 4
MORE 127 POT: 4
EXACT 128 xor xor
EXACT 129 add add
EXACT 130 icmp icmp
EXACT 131 zext zext
EXACT 132 store store
EXACT 133 select select
EXACT 134 add add
EXACT 135 store store
EXACT 136 br br
EXACT 137 load load
EXACT 138 add add
EXACT 139 store store
EXACT 140 icmp icmp
EXACT 141 zext zext
EXACT 142 store store
EXACT 143 trunc trunc
EXACT 144 and and
EXACT 145 tail tail
EXACT 146 trunc trunc
EXACT 147 and and
EXACT 148 xor xor
EXACT 149 store store
EXACT 150 xor xor
EXACT 151 lshr lshr
EXACT 152 trunc trunc
EXACT 153 and and
EXACT 154 store store
EXACT 155 icmp icmp
EXACT 156 zext zext
EXACT 157 store store
EXACT 158 lshr lshr
EXACT 159 trunc trunc
EXACT 160 store store
EXACT 161 lshr lshr
EXACT 162 xor xor
EXACT 163 add add
EXACT 164 icmp icmp
EXACT 165 zext zext
EXACT 166 store store
EXACT 167 add add
EXACT 168 store store
EXACT 169 add add
EXACT 170 inttoptr inttoptr
EXACT 171 load load
EXACT 172 store store
EXACT 173 store store
EXACT 174 add add
EXACT 175 store store
EXACT 176 inttoptr inttoptr
EXACT 177 load load
EXACT 178 store store
EXACT 179 add add
EXACT 180 store store
EXACT 181 ret ret
EXACT 182 phi phi
EXACT 183 phi phi
EXACT 184 add add
EXACT 185 store store
EXACT 186 br br
EXACT 187 store store
EXACT 188 add add
EXACT 189 add add
EXACT 190 store store
EXACT 191 inttoptr inttoptr
EXACT 192 load load
EXACT 193 store store
EXACT 194 add add
EXACT 195 store store
MORE 196 POT: 2
EXACT 197 zext zext
EXACT 198 store store
EXACT 199 add add
EXACT 200 zext zext
EXACT 201 store store
EXACT 202 icmp icmp
EXACT 203 icmp icmp
EXACT 204 or or
EXACT 205 zext zext
EXACT 206 store store
EXACT 207 and and
EXACT 208 tail tail
EXACT 209 trunc trunc
EXACT 210 and and
EXACT 211 xor xor
EXACT 212 store store
EXACT 213 xor xor
EXACT 214 lshr lshr
EXACT 215 trunc trunc
EXACT 216 and and
EXACT 217 store store
EXACT 218 zext zext
EXACT 219 store store
EXACT 220 lshr lshr
EXACT 221 trunc trunc
EXACT 222 store store
EXACT 223 lshr lshr
EXACT 224 xor xor
EXACT 225 add add
EXACT 226 icmp icmp
EXACT 227 zext zext
EXACT 228 store store
EXACT 229 add add
EXACT 230 store store
EXACT 231 store store
EXACT 232 load load
EXACT 233 load load
EXACT 234 sext sext
EXACT 235 store store
EXACT 236 load load
EXACT 237 shl shl
EXACT 238 add add
EXACT 239 add add
EXACT 240 store store
EXACT 241 inttoptr inttoptr
EXACT 242 load load
EXACT 243 zext zext
EXACT 244 store store
EXACT 245 store store
EXACT 246 add add
EXACT 247 add add
EXACT 248 load load
EXACT 249 add add
EXACT 250 inttoptr inttoptr
EXACT 251 store store
EXACT 252 store store
EXACT 253 store store
EXACT 254 tail tail
MORE 255 POT: 2
MORE 256 POT: 2
EXACT 257 load load
EXACT 258 add add
EXACT 259 store store
MORE 260 POT: 2
MORE 261 POT: 3
EXACT 262 zext zext
EXACT 263 store store
MORE 264 POT: 4
EXACT 265 sub sub
EXACT 266 icmp icmp
EXACT 267 zext zext
EXACT 268 store store
EXACT 269 and and
EXACT 270 tail tail
EXACT 271 trunc trunc
EXACT 272 and and
EXACT 273 xor xor
EXACT 274 store store
EXACT 275 xor xor
EXACT 276 xor xor
EXACT 277 lshr lshr
EXACT 278 trunc trunc
EXACT 279 and and
EXACT 280 store store
EXACT 281 icmp icmp
EXACT 282 zext zext
EXACT 283 store store
EXACT 284 lshr lshr
EXACT 285 trunc trunc
EXACT 286 store store
EXACT 287 lshr lshr
MORE 288 POT: 4
MORE 289 POT: 4
EXACT 290 xor xor
EXACT 291 add add
EXACT 292 icmp icmp
EXACT 293 zext zext
EXACT 294 store store
EXACT 295 add add
EXACT 296 load load
EXACT 297 add add
EXACT 298 store store
EXACT 299 inttoptr inttoptr
EXACT 300 store store
EXACT 301 load load
EXACT 302 load load
EXACT 303 icmp icmp
EXACT 304 select select
EXACT 305 add add
EXACT 306 store store
EXACT 307 icmp icmp
EXACT 308 br br
FP: 63 1.0 False
TO REMOVE: dict_keys(['%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%4 = load i64, i64* %RBP.i, align 8', '%5 = add i64 %1, 1', 'store i64 %5, i64* %3, align 8', '%6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%7 = load i64, i64* %6, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %4, i64* %9, align 8', '%10 = load i64, i64* %3, align 8', 'store i64 %8, i64* %RBP.i, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %6, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16)', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%RDI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI.i51, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %3, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%45 = load i64, i64* %3, align 8', '%46 = add i64 %45, 7', 'store i64 %46, i64* %3, align 8', '%48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0', '%EAX.i44 = bitcast %union.anon* %48 to i32*', '%49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%RCX.i35 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0', '%ECX.i32 = bitcast %union.anon* %49 to i32*', '%RDX.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI.i27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%AL.i = bitcast %union.anon* %48 to i8*', '%.pre = load i64, i64* %3, align 8', '%50 = phi i64 [ %.pre, %entry ], [ %183, %block_.L_400a69 ]', '%53 = add i64 %50, 3', 'store i64 %53, i64* %3, align 8', '%56 = zext i32 %55 to i64', 'store i64 %56, i64* %RAX.i46, align 8', '%59 = icmp ult i32 %55, %57', '%60 = zext i1 %59 to i8', 'store i8 %60, i8* %14, align 1', '%61 = and i32 %58, 255', '%62 = tail call i32 @llvm.ctpop.i32(i32 %61)', '%63 = trunc i32 %62 to i8', '%64 = and i8 %63, 1', '%65 = xor i8 %64, 1', 'store i8 %65, i8* %21, align 1', '%66 = xor i32 %57, %55', '%67 = xor i32 %66, %58', '%68 = lshr i32 %67, 4', '%69 = trunc i32 %68 to i8', '%70 = and i8 %69, 1', 'store i8 %70, i8* %26, align 1', '%72 = zext i1 %71 to i8', 'store i8 %72, i8* %29, align 1', '%73 = lshr i32 %58, 31', '%74 = trunc i32 %73 to i8', 'store i8 %74, i8* %32, align 1', '%78 = xor i32 %73, %75', '%79 = add nuw nsw i32 %78, %77', '%80 = icmp eq i32 %79, 2', '%81 = zext i1 %80 to i8', 'store i8 %81, i8* %38, align 1', '%.v = select i1 %71, i64 91, i64 16', '%82 = add i64 %50, %.v', 'store i64 %82, i64* %3, align 8', 'store i64 ptrtoint (%G__0x4017c4_type* @G__0x4017c4 to i64), i64* %RDI.i51, align 8', '%83 = add i64 %51, -8', '%84 = add i64 %82, 14', 'store i64 %84, i64* %3, align 8', '%85 = inttoptr i64 %83 to i64*', '%86 = load i64, i64* %85, align 8', 'store i64 %86, i64* %RAX.i46, align 8', '%87 = add i64 %82, 17', 'store i64 %87, i64* %3, align 8', '%89 = zext i32 %88 to i64', 'store i64 %89, i64* %RCX.i35, align 8', '%90 = add i32 %88, 1', '%91 = zext i32 %90 to i64', 'store i64 %91, i64* %RDX.i33, align 8', '%92 = icmp eq i32 %88, -1', '%93 = icmp eq i32 %90, 0', '%94 = or i1 %92, %93', '%95 = zext i1 %94 to i8', 'store i8 %95, i8* %14, align 1', '%96 = and i32 %90, 255', '%97 = tail call i32 @llvm.ctpop.i32(i32 %96)', '%98 = trunc i32 %97 to i8', '%99 = and i8 %98, 1', '%100 = xor i8 %99, 1', 'store i8 %100, i8* %21, align 1', '%101 = xor i32 %90, %88', '%102 = lshr i32 %101, 4', '%103 = trunc i32 %102 to i8', '%104 = and i8 %103, 1', 'store i8 %104, i8* %26, align 1', '%105 = zext i1 %93 to i8', 'store i8 %105, i8* %29, align 1', '%106 = lshr i32 %90, 31', '%107 = trunc i32 %106 to i8', 'store i8 %107, i8* %32, align 1', '%108 = lshr i32 %88, 31', '%109 = xor i32 %106, %108', '%110 = add nuw nsw i32 %109, %106', '%111 = icmp eq i32 %110, 2', '%112 = zext i1 %111 to i8', 'store i8 %112, i8* %38, align 1', '%113 = add i64 %82, 25', 'store i64 %113, i64* %3, align 8', 'store i32 %90, i32* %54, align 4', '%114 = load i32, i32* %ECX.i32, align 4', '%115 = load i64, i64* %3, align 8', '%116 = sext i32 %114 to i64', 'store i64 %116, i64* %RSI.i27, align 8', '%117 = load i64, i64* %RAX.i46, align 8', '%118 = shl nsw i64 %116, 2', '%119 = add i64 %117, %118', '%120 = add i64 %115, 6', 'store i64 %120, i64* %3, align 8', '%121 = inttoptr i64 %119 to i32*', '%122 = load i32, i32* %121, align 4', '%123 = zext i32 %122 to i64', 'store i64 %123, i64* %RSI.i27, align 8', 'store i8 0, i8* %AL.i, align 1', '%124 = add i64 %115, -1260', '%125 = add i64 %115, 13', '%126 = load i64, i64* %6, align 8', '%127 = add i64 %126, -8', '%128 = inttoptr i64 %127 to i64*', 'store i64 %125, i64* %128, align 8', 'store i64 %127, i64* %6, align 8', 'store i64 %124, i64* %3, align 8', '%132 = load i64, i64* %3, align 8', '%133 = add i64 %132, 3', 'store i64 %133, i64* %3, align 8', '%136 = zext i32 %135 to i64', 'store i64 %136, i64* %RCX.i35, align 8', '%138 = sub i32 %135, %137', '%139 = icmp ult i32 %135, %137', '%140 = zext i1 %139 to i8', 'store i8 %140, i8* %14, align 1', '%141 = and i32 %138, 255', '%142 = tail call i32 @llvm.ctpop.i32(i32 %141)', '%143 = trunc i32 %142 to i8', '%144 = and i8 %143, 1', '%145 = xor i8 %144, 1', 'store i8 %145, i8* %21, align 1', '%146 = xor i32 %137, %135', '%147 = xor i32 %146, %138', '%148 = lshr i32 %147, 4', '%149 = trunc i32 %148 to i8', '%150 = and i8 %149, 1', 'store i8 %150, i8* %26, align 1', '%151 = icmp eq i32 %138, 0', '%152 = zext i1 %151 to i8', 'store i8 %152, i8* %29, align 1', '%153 = lshr i32 %138, 31', '%154 = trunc i32 %153 to i8', 'store i8 %154, i8* %32, align 1', '%158 = xor i32 %153, %155', '%159 = add nuw nsw i32 %158, %157', '%160 = icmp eq i32 %159, 2', '%161 = zext i1 %160 to i8', 'store i8 %161, i8* %38, align 1', '%162 = add i64 %130, -16', '%163 = load i32, i32* %EAX.i44, align 4', '%164 = add i64 %132, 13', 'store i64 %164, i64* %3, align 8', '%165 = inttoptr i64 %162 to i32*', 'store i32 %163, i32* %165, align 4', '%166 = load i64, i64* %3, align 8', '%168 = icmp ne i8 %167, 0', '%.v3 = select i1 %168, i64 19, i64 6', '%169 = add i64 %166, %.v3', 'store i64 %169, i64* %3, align 8', 'store i64 44, i64* %RDI.i51, align 8', '%170 = add i64 %169, -1308', '%171 = add i64 %169, 10', '%172 = load i64, i64* %6, align 8', '%173 = add i64 %172, -8', '%174 = inttoptr i64 %173 to i64*', 'store i64 %171, i64* %174, align 8', 'store i64 %173, i64* %6, align 8', 'store i64 %170, i64* %3, align 8', '%176 = load i64, i64* %RBP.i, align 8', '%177 = add i64 %176, -20', '%178 = load i32, i32* %EAX.i44, align 4', '%179 = load i64, i64* %3, align 8', '%180 = add i64 %179, 3', 'store i64 %180, i64* %3, align 8', '%181 = inttoptr i64 %177 to i32*', 'store i32 %178, i32* %181, align 4', '%.pre2 = load i64, i64* %3, align 8', '%182 = phi i64 [ %169, %block_400a23 ], [ %.pre2, %block_400a5c ]', '%183 = add i64 %182, -86', 'store i64 %183, i64* %3, align 8', '%184 = load i64, i64* %6, align 8', '%185 = add i64 %184, 32', 'store i64 %185, i64* %6, align 8', '%186 = icmp ugt i64 %184, -33', '%187 = zext i1 %186 to i8', 'store i8 %187, i8* %14, align 1', '%188 = trunc i64 %185 to i32', '%189 = and i32 %188, 255', '%190 = tail call i32 @llvm.ctpop.i32(i32 %189)', '%191 = trunc i32 %190 to i8', '%192 = and i8 %191, 1', '%193 = xor i8 %192, 1', 'store i8 %193, i8* %21, align 1', '%194 = xor i64 %185, %184', '%195 = lshr i64 %194, 4', '%196 = trunc i64 %195 to i8', '%197 = and i8 %196, 1', 'store i8 %197, i8* %26, align 1', '%198 = icmp eq i64 %185, 0', '%199 = zext i1 %198 to i8', 'store i8 %199, i8* %29, align 1', '%200 = lshr i64 %185, 63', '%201 = trunc i64 %200 to i8', 'store i8 %201, i8* %32, align 1', '%202 = lshr i64 %184, 63', '%203 = xor i64 %200, %202', '%204 = add nuw nsw i64 %203, %200', '%205 = icmp eq i64 %204, 2', '%206 = zext i1 %205 to i8', 'store i8 %206, i8* %38, align 1', '%207 = add i64 %82, 5', 'store i64 %207, i64* %3, align 8', '%208 = add i64 %184, 40', '%209 = inttoptr i64 %185 to i64*', '%210 = load i64, i64* %209, align 8', 'store i64 %210, i64* %RBP.i, align 8', 'store i64 %208, i64* %6, align 8', '%211 = add i64 %82, 6', 'store i64 %211, i64* %3, align 8', '%212 = inttoptr i64 %208 to i64*', '%213 = load i64, i64* %212, align 8', 'store i64 %213, i64* %3, align 8', '%214 = add i64 %184, 48', 'store i64 %214, i64* %6, align 8', 'ret %struct.Memory* %MEMORY.0'])
Keep: entry:
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %4 = load i64, i64* %RBP.i, align 8
Found line to remove! %5 = add i64 %1, 1
Found line to remove! store i64 %5, i64* %3, align 8
Found line to remove! %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Found line to remove! %7 = load i64, i64* %6, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %4, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %3, align 8
Found line to remove! store i64 %8, i64* %RBP.i, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %6, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %RDI.i51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI.i51, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %3, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Keep: %43 = load i64, i64* %RBP.i, align 8
Keep: %44 = add i64 %43, -12
Found line to remove! %45 = load i64, i64* %3, align 8
Found line to remove! %46 = add i64 %45, 7
Found line to remove! store i64 %46, i64* %3, align 8
Keep: %47 = inttoptr i64 %44 to i32*
Keep: store i32 0, i32* %47, align 4
Found line to remove! %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %RAX.i46 = getelementptr inbounds %union.anon, %union.anon* %48, i64 0, i32 0
Found line to remove! %EAX.i44 = bitcast %union.anon* %48 to i32*
Found line to remove! %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %RCX.i35 = getelementptr inbounds %union.anon, %union.anon* %49, i64 0, i32 0
Found line to remove! %ECX.i32 = bitcast %union.anon* %49 to i32*
Found line to remove! %RDX.i33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI.i27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %AL.i = bitcast %union.anon* %48 to i8*
Found line to remove! %.pre = load i64, i64* %3, align 8
Keep: br label %block_.L_400a13
Keep: 
Keep: block_.L_400a13:                                  ; preds = %block_.L_400a69, %entry
Found line to remove! %50 = phi i64 [ %.pre, %entry ], [ %183, %block_.L_400a69 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %entry ], [ %MEMORY.1, %block_.L_400a69 ]
Keep: %51 = load i64, i64* %RBP.i, align 8
Keep: %52 = add i64 %51, -12
Found line to remove! %53 = add i64 %50, 3
Found line to remove! store i64 %53, i64* %3, align 8
Keep: %54 = inttoptr i64 %52 to i32*
Keep: %55 = load i32, i32* %54, align 4
Found line to remove! %56 = zext i32 %55 to i64
Found line to remove! store i64 %56, i64* %RAX.i46, align 8
Keep: %57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Keep: %58 = sub i32 %55, %57
Found line to remove! %59 = icmp ult i32 %55, %57
Found line to remove! %60 = zext i1 %59 to i8
Found line to remove! store i8 %60, i8* %14, align 1
Found line to remove! %61 = and i32 %58, 255
Found line to remove! %62 = tail call i32 @llvm.ctpop.i32(i32 %61)
Found line to remove! %63 = trunc i32 %62 to i8
Found line to remove! %64 = and i8 %63, 1
Found line to remove! %65 = xor i8 %64, 1
Found line to remove! store i8 %65, i8* %21, align 1
Found line to remove! %66 = xor i32 %57, %55
Found line to remove! %67 = xor i32 %66, %58
Found line to remove! %68 = lshr i32 %67, 4
Found line to remove! %69 = trunc i32 %68 to i8
Found line to remove! %70 = and i8 %69, 1
Found line to remove! store i8 %70, i8* %26, align 1
Keep: %71 = icmp eq i32 %58, 0
Found line to remove! %72 = zext i1 %71 to i8
Found line to remove! store i8 %72, i8* %29, align 1
Found line to remove! %73 = lshr i32 %58, 31
Found line to remove! %74 = trunc i32 %73 to i8
Found line to remove! store i8 %74, i8* %32, align 1
Keep: %75 = lshr i32 %55, 31
Keep: %76 = lshr i32 %57, 31
Keep: %77 = xor i32 %76, %75
Found line to remove! %78 = xor i32 %73, %75
Found line to remove! %79 = add nuw nsw i32 %78, %77
Found line to remove! %80 = icmp eq i32 %79, 2
Found line to remove! %81 = zext i1 %80 to i8
Found line to remove! store i8 %81, i8* %38, align 1
Found line to remove! %.v = select i1 %71, i64 91, i64 16
Found line to remove! %82 = add i64 %50, %.v
Found line to remove! store i64 %82, i64* %3, align 8
Keep: br i1 %71, label %block_.L_400a6e, label %block_400a23
Keep: 
Keep: block_400a23:                                     ; preds = %block_.L_400a13
Found line to remove! store i64 ptrtoint (%G__0x4017c4_type* @G__0x4017c4 to i64), i64* %RDI.i51, align 8
Found line to remove! %83 = add i64 %51, -8
Found line to remove! %84 = add i64 %82, 14
Found line to remove! store i64 %84, i64* %3, align 8
Found line to remove! %85 = inttoptr i64 %83 to i64*
Found line to remove! %86 = load i64, i64* %85, align 8
Found line to remove! store i64 %86, i64* %RAX.i46, align 8
Found line to remove! %87 = add i64 %82, 17
Found line to remove! store i64 %87, i64* %3, align 8
Keep: %88 = load i32, i32* %54, align 4
Found line to remove! %89 = zext i32 %88 to i64
Found line to remove! store i64 %89, i64* %RCX.i35, align 8
Found line to remove! %90 = add i32 %88, 1
Found line to remove! %91 = zext i32 %90 to i64
Found line to remove! store i64 %91, i64* %RDX.i33, align 8
Found line to remove! %92 = icmp eq i32 %88, -1
Found line to remove! %93 = icmp eq i32 %90, 0
Found line to remove! %94 = or i1 %92, %93
Found line to remove! %95 = zext i1 %94 to i8
Found line to remove! store i8 %95, i8* %14, align 1
Found line to remove! %96 = and i32 %90, 255
Found line to remove! %97 = tail call i32 @llvm.ctpop.i32(i32 %96)
Found line to remove! %98 = trunc i32 %97 to i8
Found line to remove! %99 = and i8 %98, 1
Found line to remove! %100 = xor i8 %99, 1
Found line to remove! store i8 %100, i8* %21, align 1
Found line to remove! %101 = xor i32 %90, %88
Found line to remove! %102 = lshr i32 %101, 4
Found line to remove! %103 = trunc i32 %102 to i8
Found line to remove! %104 = and i8 %103, 1
Found line to remove! store i8 %104, i8* %26, align 1
Found line to remove! %105 = zext i1 %93 to i8
Found line to remove! store i8 %105, i8* %29, align 1
Found line to remove! %106 = lshr i32 %90, 31
Found line to remove! %107 = trunc i32 %106 to i8
Found line to remove! store i8 %107, i8* %32, align 1
Found line to remove! %108 = lshr i32 %88, 31
Found line to remove! %109 = xor i32 %106, %108
Found line to remove! %110 = add nuw nsw i32 %109, %106
Found line to remove! %111 = icmp eq i32 %110, 2
Found line to remove! %112 = zext i1 %111 to i8
Found line to remove! store i8 %112, i8* %38, align 1
Found line to remove! %113 = add i64 %82, 25
Found line to remove! store i64 %113, i64* %3, align 8
Found line to remove! store i32 %90, i32* %54, align 4
Found line to remove! %114 = load i32, i32* %ECX.i32, align 4
Found line to remove! %115 = load i64, i64* %3, align 8
Found line to remove! %116 = sext i32 %114 to i64
Found line to remove! store i64 %116, i64* %RSI.i27, align 8
Found line to remove! %117 = load i64, i64* %RAX.i46, align 8
Found line to remove! %118 = shl nsw i64 %116, 2
Found line to remove! %119 = add i64 %117, %118
Found line to remove! %120 = add i64 %115, 6
Found line to remove! store i64 %120, i64* %3, align 8
Found line to remove! %121 = inttoptr i64 %119 to i32*
Found line to remove! %122 = load i32, i32* %121, align 4
Found line to remove! %123 = zext i32 %122 to i64
Found line to remove! store i64 %123, i64* %RSI.i27, align 8
Found line to remove! store i8 0, i8* %AL.i, align 1
Found line to remove! %124 = add i64 %115, -1260
Found line to remove! %125 = add i64 %115, 13
Found line to remove! %126 = load i64, i64* %6, align 8
Found line to remove! %127 = add i64 %126, -8
Found line to remove! %128 = inttoptr i64 %127 to i64*
Found line to remove! store i64 %125, i64* %128, align 8
Found line to remove! store i64 %127, i64* %6, align 8
Found line to remove! store i64 %124, i64* %3, align 8
Keep: %129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.0)
Keep: %130 = load i64, i64* %RBP.i, align 8
Keep: %131 = add i64 %130, -12
Found line to remove! %132 = load i64, i64* %3, align 8
Found line to remove! %133 = add i64 %132, 3
Found line to remove! store i64 %133, i64* %3, align 8
Keep: %134 = inttoptr i64 %131 to i32*
Keep: %135 = load i32, i32* %134, align 4
Found line to remove! %136 = zext i32 %135 to i64
Found line to remove! store i64 %136, i64* %RCX.i35, align 8
Keep: %137 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Found line to remove! %138 = sub i32 %135, %137
Found line to remove! %139 = icmp ult i32 %135, %137
Found line to remove! %140 = zext i1 %139 to i8
Found line to remove! store i8 %140, i8* %14, align 1
Found line to remove! %141 = and i32 %138, 255
Found line to remove! %142 = tail call i32 @llvm.ctpop.i32(i32 %141)
Found line to remove! %143 = trunc i32 %142 to i8
Found line to remove! %144 = and i8 %143, 1
Found line to remove! %145 = xor i8 %144, 1
Found line to remove! store i8 %145, i8* %21, align 1
Found line to remove! %146 = xor i32 %137, %135
Found line to remove! %147 = xor i32 %146, %138
Found line to remove! %148 = lshr i32 %147, 4
Found line to remove! %149 = trunc i32 %148 to i8
Found line to remove! %150 = and i8 %149, 1
Found line to remove! store i8 %150, i8* %26, align 1
Found line to remove! %151 = icmp eq i32 %138, 0
Found line to remove! %152 = zext i1 %151 to i8
Found line to remove! store i8 %152, i8* %29, align 1
Found line to remove! %153 = lshr i32 %138, 31
Found line to remove! %154 = trunc i32 %153 to i8
Found line to remove! store i8 %154, i8* %32, align 1
Keep: %155 = lshr i32 %135, 31
Keep: %156 = lshr i32 %137, 31
Keep: %157 = xor i32 %156, %155
Found line to remove! %158 = xor i32 %153, %155
Found line to remove! %159 = add nuw nsw i32 %158, %157
Found line to remove! %160 = icmp eq i32 %159, 2
Found line to remove! %161 = zext i1 %160 to i8
Found line to remove! store i8 %161, i8* %38, align 1
Found line to remove! %162 = add i64 %130, -16
Found line to remove! %163 = load i32, i32* %EAX.i44, align 4
Found line to remove! %164 = add i64 %132, 13
Found line to remove! store i64 %164, i64* %3, align 8
Found line to remove! %165 = inttoptr i64 %162 to i32*
Found line to remove! store i32 %163, i32* %165, align 4
Found line to remove! %166 = load i64, i64* %3, align 8
Keep: %167 = load i8, i8* %29, align 1
Found line to remove! %168 = icmp ne i8 %167, 0
Found line to remove! %.v3 = select i1 %168, i64 19, i64 6
Found line to remove! %169 = add i64 %166, %.v3
Found line to remove! store i64 %169, i64* %3, align 8
Keep: %cmpBr_400a56 = icmp eq i8 %167, 1
Keep: br i1 %cmpBr_400a56, label %block_.L_400a69, label %block_400a5c
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Found line to remove! store i64 44, i64* %RDI.i51, align 8
Found line to remove! %170 = add i64 %169, -1308
Found line to remove! %171 = add i64 %169, 10
Found line to remove! %172 = load i64, i64* %6, align 8
Found line to remove! %173 = add i64 %172, -8
Found line to remove! %174 = inttoptr i64 %173 to i64*
Found line to remove! store i64 %171, i64* %174, align 8
Found line to remove! store i64 %173, i64* %6, align 8
Found line to remove! store i64 %170, i64* %3, align 8
Keep: %175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %129)
Found line to remove! %176 = load i64, i64* %RBP.i, align 8
Found line to remove! %177 = add i64 %176, -20
Found line to remove! %178 = load i32, i32* %EAX.i44, align 4
Found line to remove! %179 = load i64, i64* %3, align 8
Found line to remove! %180 = add i64 %179, 3
Found line to remove! store i64 %180, i64* %3, align 8
Found line to remove! %181 = inttoptr i64 %177 to i32*
Found line to remove! store i32 %178, i32* %181, align 4
Found line to remove! %.pre2 = load i64, i64* %3, align 8
Keep: br label %block_.L_400a69
Keep: 
Keep: block_.L_400a69:                                  ; preds = %block_400a5c, %block_400a23
Found line to remove! %182 = phi i64 [ %169, %block_400a23 ], [ %.pre2, %block_400a5c ]
Keep: %MEMORY.1 = phi %struct.Memory* [ %129, %block_400a23 ], [ %175, %block_400a5c ]
Found line to remove! %183 = add i64 %182, -86
Found line to remove! store i64 %183, i64* %3, align 8
Keep: br label %block_.L_400a13
Keep: 
Keep: block_.L_400a6e:                                  ; preds = %block_.L_400a13
Found line to remove! %184 = load i64, i64* %6, align 8
Found line to remove! %185 = add i64 %184, 32
Found line to remove! store i64 %185, i64* %6, align 8
Found line to remove! %186 = icmp ugt i64 %184, -33
Found line to remove! %187 = zext i1 %186 to i8
Found line to remove! store i8 %187, i8* %14, align 1
Found line to remove! %188 = trunc i64 %185 to i32
Found line to remove! %189 = and i32 %188, 255
Found line to remove! %190 = tail call i32 @llvm.ctpop.i32(i32 %189)
Found line to remove! %191 = trunc i32 %190 to i8
Found line to remove! %192 = and i8 %191, 1
Found line to remove! %193 = xor i8 %192, 1
Found line to remove! store i8 %193, i8* %21, align 1
Found line to remove! %194 = xor i64 %185, %184
Found line to remove! %195 = lshr i64 %194, 4
Found line to remove! %196 = trunc i64 %195 to i8
Found line to remove! %197 = and i8 %196, 1
Found line to remove! store i8 %197, i8* %26, align 1
Found line to remove! %198 = icmp eq i64 %185, 0
Found line to remove! %199 = zext i1 %198 to i8
Found line to remove! store i8 %199, i8* %29, align 1
Found line to remove! %200 = lshr i64 %185, 63
Found line to remove! %201 = trunc i64 %200 to i8
Found line to remove! store i8 %201, i8* %32, align 1
Found line to remove! %202 = lshr i64 %184, 63
Found line to remove! %203 = xor i64 %200, %202
Found line to remove! %204 = add nuw nsw i64 %203, %200
Found line to remove! %205 = icmp eq i64 %204, 2
Found line to remove! %206 = zext i1 %205 to i8
Found line to remove! store i8 %206, i8* %38, align 1
Found line to remove! %207 = add i64 %82, 5
Found line to remove! store i64 %207, i64* %3, align 8
Found line to remove! %208 = add i64 %184, 40
Found line to remove! %209 = inttoptr i64 %185 to i64*
Found line to remove! %210 = load i64, i64* %209, align 8
Found line to remove! store i64 %210, i64* %RBP.i, align 8
Found line to remove! store i64 %208, i64* %6, align 8
Found line to remove! %211 = add i64 %82, 6
Found line to remove! store i64 %211, i64* %3, align 8
Found line to remove! %212 = inttoptr i64 %208 to i64*
Found line to remove! %213 = load i64, i64* %212, align 8
Found line to remove! store i64 %213, i64* %3, align 8
Found line to remove! %214 = add i64 %184, 48
Found line to remove! store i64 %214, i64* %6, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
TO REMOVE: dict_keys(['%PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0', '%3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0', '%AL = bitcast %union.anon* %3 to i8*', '%EAX = bitcast %union.anon* %3 to i32*', '%4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0', '%ECX = bitcast %union.anon* %4 to i32*', '%RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0', '%RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0', '%RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0', '%RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0', '%RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0', '%RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0', '%5 = load i64, i64* %RBP, align 8', '%6 = add i64 %1, 1', 'store i64 %6, i64* %PC, align 8', '%7 = load i64, i64* %RSP, align 8', '%8 = add i64 %7, -8', '%9 = inttoptr i64 %8 to i64*', 'store i64 %5, i64* %9, align 8', '%10 = load i64, i64* %PC, align 8', 'store i64 %8, i64* %RBP, align 8', '%11 = add i64 %7, -40', 'store i64 %11, i64* %RSP, align 8', '%12 = icmp ult i64 %8, 32', '%13 = zext i1 %12 to i8', '%14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1', 'store i8 %13, i8* %14, align 1', '%15 = trunc i64 %11 to i32', '%16 = and i32 %15, 255', '%17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12', '%18 = trunc i32 %17 to i8', '%19 = and i8 %18, 1', '%20 = xor i8 %19, 1', '%21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3', 'store i8 %20, i8* %21, align 1', '%22 = xor i64 %8, %11', '%23 = lshr i64 %22, 4', '%24 = trunc i64 %23 to i8', '%25 = and i8 %24, 1', '%26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5', 'store i8 %25, i8* %26, align 1', '%27 = icmp eq i64 %11, 0', '%28 = zext i1 %27 to i8', 'store i8 %28, i8* %29, align 1', '%30 = lshr i64 %11, 63', '%31 = trunc i64 %30 to i8', '%32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9', 'store i8 %31, i8* %32, align 1', '%33 = lshr i64 %8, 63', '%34 = xor i64 %30, %33', '%35 = add nuw nsw i64 %34, %33', '%36 = icmp eq i64 %35, 2', '%37 = zext i1 %36 to i8', '%38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13', 'store i8 %37, i8* %38, align 1', '%39 = add i64 %7, -16', '%40 = load i64, i64* %RDI, align 8', '%41 = add i64 %10, 11', 'store i64 %41, i64* %PC, align 8', '%42 = inttoptr i64 %39 to i64*', 'store i64 %40, i64* %42, align 8', '%45 = load i64, i64* %PC, align 8', '%46 = add i64 %45, 7', 'store i64 %46, i64* %PC, align 8', '%.pre = load i64, i64* %PC, align 8', 'store i64 44, i64* %RDI, align 8', '%48 = add i64 %212, -1308', '%49 = add i64 %212, 10', '%50 = load i64, i64* %RSP, align 8', '%51 = add i64 %50, -8', '%52 = inttoptr i64 %51 to i64*', 'store i64 %49, i64* %52, align 8', 'store i64 %51, i64* %RSP, align 8', 'store i64 %48, i64* %PC, align 8', '%54 = load i64, i64* %RBP, align 8', '%55 = add i64 %54, -20', '%56 = load i32, i32* %EAX, align 4', '%57 = load i64, i64* %PC, align 8', '%58 = add i64 %57, 3', 'store i64 %58, i64* %PC, align 8', '%59 = inttoptr i64 %55 to i32*', 'store i32 %56, i32* %59, align 4', '%.pre2 = load i64, i64* %PC, align 8', '%60 = phi i64 [ %.pre, %block_400a00 ], [ %125, %block_400a69 ]', '%63 = add i64 %60, 3', 'store i64 %63, i64* %PC, align 8', '%66 = zext i32 %65 to i64', 'store i64 %66, i64* %RAX, align 8', '%69 = icmp ult i32 %65, %67', '%70 = zext i1 %69 to i8', 'store i8 %70, i8* %14, align 1', '%71 = and i32 %68, 255', '%72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12', '%73 = trunc i32 %72 to i8', '%74 = and i8 %73, 1', '%75 = xor i8 %74, 1', 'store i8 %75, i8* %21, align 1', '%76 = xor i32 %67, %65', '%77 = xor i32 %76, %68', '%78 = lshr i32 %77, 4', '%79 = trunc i32 %78 to i8', '%80 = and i8 %79, 1', 'store i8 %80, i8* %26, align 1', '%82 = zext i1 %81 to i8', 'store i8 %82, i8* %29, align 1', '%83 = lshr i32 %68, 31', '%84 = trunc i32 %83 to i8', 'store i8 %84, i8* %32, align 1', '%88 = xor i32 %83, %85', '%89 = add nuw nsw i32 %88, %87', '%90 = icmp eq i32 %89, 2', '%91 = zext i1 %90 to i8', 'store i8 %91, i8* %38, align 1', '%.v = select i1 %81, i64 91, i64 16', '%92 = add i64 %60, %.v', 'store i64 %92, i64* %PC, align 8', '%93 = load i64, i64* %RSP, align 8', '%94 = add i64 %93, 32', 'store i64 %94, i64* %RSP, align 8', '%95 = icmp ugt i64 %93, -33', '%96 = zext i1 %95 to i8', 'store i8 %96, i8* %14, align 1', '%97 = trunc i64 %94 to i32', '%98 = and i32 %97, 255', '%99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12', '%100 = trunc i32 %99 to i8', '%101 = and i8 %100, 1', '%102 = xor i8 %101, 1', 'store i8 %102, i8* %21, align 1', '%103 = xor i64 %94, %93', '%104 = lshr i64 %103, 4', '%105 = trunc i64 %104 to i8', '%106 = and i8 %105, 1', 'store i8 %106, i8* %26, align 1', '%107 = icmp eq i64 %94, 0', '%108 = zext i1 %107 to i8', 'store i8 %108, i8* %29, align 1', '%109 = lshr i64 %94, 63', '%110 = trunc i64 %109 to i8', 'store i8 %110, i8* %32, align 1', '%111 = lshr i64 %93, 63', '%112 = xor i64 %109, %111', '%113 = add nuw nsw i64 %112, %109', '%114 = icmp eq i64 %113, 2', '%115 = zext i1 %114 to i8', 'store i8 %115, i8* %38, align 1', '%116 = add i64 %92, 5', 'store i64 %116, i64* %PC, align 8', '%117 = add i64 %93, 40', '%118 = inttoptr i64 %94 to i64*', '%119 = load i64, i64* %118, align 8', 'store i64 %119, i64* %RBP, align 8', 'store i64 %117, i64* %RSP, align 8', '%120 = add i64 %92, 6', 'store i64 %120, i64* %PC, align 8', '%121 = inttoptr i64 %117 to i64*', '%122 = load i64, i64* %121, align 8', 'store i64 %122, i64* %PC, align 8', '%123 = add i64 %93, 48', 'store i64 %123, i64* %RSP, align 8', 'ret %struct.Memory* %MEMORY.0', '%124 = phi i64 [ %212, %block_400a23 ], [ %.pre2, %block_400a5c ]', '%125 = add i64 %124, -86', 'store i64 %125, i64* %PC, align 8', 'store i64 add (i64 ptrtoint (%seg_4017c0__rodata_type* @seg_4017c0__rodata to i64), i64 4), i64* %RDI, align 8', '%126 = add i64 %61, -8', '%127 = add i64 %92, 14', 'store i64 %127, i64* %PC, align 8', '%128 = inttoptr i64 %126 to i64*', '%129 = load i64, i64* %128, align 8', 'store i64 %129, i64* %RAX, align 8', '%130 = add i64 %92, 17', 'store i64 %130, i64* %PC, align 8', '%132 = zext i32 %131 to i64', 'store i64 %132, i64* %RCX, align 8', '%133 = add i32 %131, 1', '%134 = zext i32 %133 to i64', 'store i64 %134, i64* %RDX, align 8', '%135 = icmp eq i32 %131, -1', '%136 = icmp eq i32 %133, 0', '%137 = or i1 %135, %136', '%138 = zext i1 %137 to i8', 'store i8 %138, i8* %14, align 1', '%139 = and i32 %133, 255', '%140 = tail call i32 @llvm.ctpop.i32(i32 %139) #12', '%141 = trunc i32 %140 to i8', '%142 = and i8 %141, 1', '%143 = xor i8 %142, 1', 'store i8 %143, i8* %21, align 1', '%144 = xor i32 %133, %131', '%145 = lshr i32 %144, 4', '%146 = trunc i32 %145 to i8', '%147 = and i8 %146, 1', 'store i8 %147, i8* %26, align 1', '%148 = zext i1 %136 to i8', 'store i8 %148, i8* %29, align 1', '%149 = lshr i32 %133, 31', '%150 = trunc i32 %149 to i8', 'store i8 %150, i8* %32, align 1', '%151 = lshr i32 %131, 31', '%152 = xor i32 %149, %151', '%153 = add nuw nsw i32 %152, %149', '%154 = icmp eq i32 %153, 2', '%155 = zext i1 %154 to i8', 'store i8 %155, i8* %38, align 1', '%156 = add i64 %92, 25', 'store i64 %156, i64* %PC, align 8', 'store i32 %133, i32* %64, align 4', '%157 = load i32, i32* %ECX, align 4', '%158 = load i64, i64* %PC, align 8', '%159 = sext i32 %157 to i64', 'store i64 %159, i64* %RSI, align 8', '%160 = load i64, i64* %RAX, align 8', '%161 = shl nsw i64 %159, 2', '%162 = add i64 %160, %161', '%163 = add i64 %158, 6', 'store i64 %163, i64* %PC, align 8', '%164 = inttoptr i64 %162 to i32*', '%165 = load i32, i32* %164, align 4', '%166 = zext i32 %165 to i64', 'store i64 %166, i64* %RSI, align 8', 'store i8 0, i8* %AL, align 1', '%167 = add i64 %158, -1260', '%168 = add i64 %158, 13', '%169 = load i64, i64* %RSP, align 8', '%170 = add i64 %169, -8', '%171 = inttoptr i64 %170 to i64*', 'store i64 %168, i64* %171, align 8', 'store i64 %170, i64* %RSP, align 8', 'store i64 %167, i64* %PC, align 8', '%175 = load i64, i64* %PC, align 8', '%176 = add i64 %175, 3', 'store i64 %176, i64* %PC, align 8', '%179 = zext i32 %178 to i64', 'store i64 %179, i64* %RCX, align 8', '%181 = sub i32 %178, %180', '%182 = icmp ult i32 %178, %180', '%183 = zext i1 %182 to i8', 'store i8 %183, i8* %14, align 1', '%184 = and i32 %181, 255', '%185 = tail call i32 @llvm.ctpop.i32(i32 %184) #12', '%186 = trunc i32 %185 to i8', '%187 = and i8 %186, 1', '%188 = xor i8 %187, 1', 'store i8 %188, i8* %21, align 1', '%189 = xor i32 %180, %178', '%190 = xor i32 %189, %181', '%191 = lshr i32 %190, 4', '%192 = trunc i32 %191 to i8', '%193 = and i8 %192, 1', 'store i8 %193, i8* %26, align 1', '%194 = icmp eq i32 %181, 0', '%195 = zext i1 %194 to i8', 'store i8 %195, i8* %29, align 1', '%196 = lshr i32 %181, 31', '%197 = trunc i32 %196 to i8', 'store i8 %197, i8* %32, align 1', '%201 = xor i32 %196, %198', '%202 = add nuw nsw i32 %201, %200', '%203 = icmp eq i32 %202, 2', '%204 = zext i1 %203 to i8', 'store i8 %204, i8* %38, align 1', '%205 = add i64 %173, -16', '%206 = load i32, i32* %EAX, align 4', '%207 = add i64 %175, 13', 'store i64 %207, i64* %PC, align 8', '%208 = inttoptr i64 %205 to i32*', 'store i32 %206, i32* %208, align 4', '%209 = load i64, i64* %PC, align 8', '%211 = icmp ne i8 %210, 0', '%.v3 = select i1 %211, i64 19, i64 6', '%212 = add i64 %209, %.v3', 'store i64 %212, i64* %PC, align 8'])
Keep: block_400a00:
Found line to remove! %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
Found line to remove! %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
Found line to remove! %AL = bitcast %union.anon* %3 to i8*
Found line to remove! %EAX = bitcast %union.anon* %3 to i32*
Found line to remove! %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
Found line to remove! %ECX = bitcast %union.anon* %4 to i32*
Found line to remove! %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
Found line to remove! %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
Found line to remove! %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
Found line to remove! %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
Found line to remove! %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
Found line to remove! %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Found line to remove! %5 = load i64, i64* %RBP, align 8
Found line to remove! %6 = add i64 %1, 1
Found line to remove! store i64 %6, i64* %PC, align 8
Found line to remove! %7 = load i64, i64* %RSP, align 8
Found line to remove! %8 = add i64 %7, -8
Found line to remove! %9 = inttoptr i64 %8 to i64*
Found line to remove! store i64 %5, i64* %9, align 8
Found line to remove! %10 = load i64, i64* %PC, align 8
Found line to remove! store i64 %8, i64* %RBP, align 8
Found line to remove! %11 = add i64 %7, -40
Found line to remove! store i64 %11, i64* %RSP, align 8
Found line to remove! %12 = icmp ult i64 %8, 32
Found line to remove! %13 = zext i1 %12 to i8
Found line to remove! %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
Found line to remove! store i8 %13, i8* %14, align 1
Found line to remove! %15 = trunc i64 %11 to i32
Found line to remove! %16 = and i32 %15, 255
Found line to remove! %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
Found line to remove! %18 = trunc i32 %17 to i8
Found line to remove! %19 = and i8 %18, 1
Found line to remove! %20 = xor i8 %19, 1
Found line to remove! %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
Found line to remove! store i8 %20, i8* %21, align 1
Found line to remove! %22 = xor i64 %8, %11
Found line to remove! %23 = lshr i64 %22, 4
Found line to remove! %24 = trunc i64 %23 to i8
Found line to remove! %25 = and i8 %24, 1
Found line to remove! %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
Found line to remove! store i8 %25, i8* %26, align 1
Found line to remove! %27 = icmp eq i64 %11, 0
Found line to remove! %28 = zext i1 %27 to i8
Keep: %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! store i8 %28, i8* %29, align 1
Found line to remove! %30 = lshr i64 %11, 63
Found line to remove! %31 = trunc i64 %30 to i8
Found line to remove! %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
Found line to remove! store i8 %31, i8* %32, align 1
Found line to remove! %33 = lshr i64 %8, 63
Found line to remove! %34 = xor i64 %30, %33
Found line to remove! %35 = add nuw nsw i64 %34, %33
Found line to remove! %36 = icmp eq i64 %35, 2
Found line to remove! %37 = zext i1 %36 to i8
Found line to remove! %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
Found line to remove! store i8 %37, i8* %38, align 1
Found line to remove! %39 = add i64 %7, -16
Found line to remove! %40 = load i64, i64* %RDI, align 8
Found line to remove! %41 = add i64 %10, 11
Found line to remove! store i64 %41, i64* %PC, align 8
Found line to remove! %42 = inttoptr i64 %39 to i64*
Found line to remove! store i64 %40, i64* %42, align 8
Keep: %43 = load i64, i64* %RBP, align 8
Keep: %44 = add i64 %43, -12
Found line to remove! %45 = load i64, i64* %PC, align 8
Found line to remove! %46 = add i64 %45, 7
Found line to remove! store i64 %46, i64* %PC, align 8
Keep: %47 = inttoptr i64 %44 to i32*
Keep: store i32 0, i32* %47, align 4
Found line to remove! %.pre = load i64, i64* %PC, align 8
Keep: br label %block_400a13
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Found line to remove! store i64 44, i64* %RDI, align 8
Found line to remove! %48 = add i64 %212, -1308
Found line to remove! %49 = add i64 %212, 10
Found line to remove! %50 = load i64, i64* %RSP, align 8
Found line to remove! %51 = add i64 %50, -8
Found line to remove! %52 = inttoptr i64 %51 to i64*
Found line to remove! store i64 %49, i64* %52, align 8
Found line to remove! store i64 %51, i64* %RSP, align 8
Found line to remove! store i64 %48, i64* %PC, align 8
Keep: %53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %172)
Found line to remove! %54 = load i64, i64* %RBP, align 8
Found line to remove! %55 = add i64 %54, -20
Found line to remove! %56 = load i32, i32* %EAX, align 4
Found line to remove! %57 = load i64, i64* %PC, align 8
Found line to remove! %58 = add i64 %57, 3
Found line to remove! store i64 %58, i64* %PC, align 8
Found line to remove! %59 = inttoptr i64 %55 to i32*
Found line to remove! store i32 %56, i32* %59, align 4
Found line to remove! %.pre2 = load i64, i64* %PC, align 8
Keep: br label %block_400a69
Keep: 
Keep: block_400a13:                                     ; preds = %block_400a69, %block_400a00
Found line to remove! %60 = phi i64 [ %.pre, %block_400a00 ], [ %125, %block_400a69 ]
Keep: %MEMORY.0 = phi %struct.Memory* [ %2, %block_400a00 ], [ %MEMORY.1, %block_400a69 ]
Keep: %61 = load i64, i64* %RBP, align 8
Keep: %62 = add i64 %61, -12
Found line to remove! %63 = add i64 %60, 3
Found line to remove! store i64 %63, i64* %PC, align 8
Keep: %64 = inttoptr i64 %62 to i32*
Keep: %65 = load i32, i32* %64, align 4
Found line to remove! %66 = zext i32 %65 to i64
Found line to remove! store i64 %66, i64* %RAX, align 8
Keep: %67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Keep: %68 = sub i32 %65, %67
Found line to remove! %69 = icmp ult i32 %65, %67
Found line to remove! %70 = zext i1 %69 to i8
Found line to remove! store i8 %70, i8* %14, align 1
Found line to remove! %71 = and i32 %68, 255
Found line to remove! %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
Found line to remove! %73 = trunc i32 %72 to i8
Found line to remove! %74 = and i8 %73, 1
Found line to remove! %75 = xor i8 %74, 1
Found line to remove! store i8 %75, i8* %21, align 1
Found line to remove! %76 = xor i32 %67, %65
Found line to remove! %77 = xor i32 %76, %68
Found line to remove! %78 = lshr i32 %77, 4
Found line to remove! %79 = trunc i32 %78 to i8
Found line to remove! %80 = and i8 %79, 1
Found line to remove! store i8 %80, i8* %26, align 1
Keep: %81 = icmp eq i32 %68, 0
Found line to remove! %82 = zext i1 %81 to i8
Found line to remove! store i8 %82, i8* %29, align 1
Found line to remove! %83 = lshr i32 %68, 31
Found line to remove! %84 = trunc i32 %83 to i8
Found line to remove! store i8 %84, i8* %32, align 1
Keep: %85 = lshr i32 %65, 31
Keep: %86 = lshr i32 %67, 31
Keep: %87 = xor i32 %86, %85
Found line to remove! %88 = xor i32 %83, %85
Found line to remove! %89 = add nuw nsw i32 %88, %87
Found line to remove! %90 = icmp eq i32 %89, 2
Found line to remove! %91 = zext i1 %90 to i8
Found line to remove! store i8 %91, i8* %38, align 1
Found line to remove! %.v = select i1 %81, i64 91, i64 16
Found line to remove! %92 = add i64 %60, %.v
Found line to remove! store i64 %92, i64* %PC, align 8
Keep: br i1 %81, label %block_400a6e, label %block_400a23
Keep: 
Keep: block_400a6e:                                     ; preds = %block_400a13
Found line to remove! %93 = load i64, i64* %RSP, align 8
Found line to remove! %94 = add i64 %93, 32
Found line to remove! store i64 %94, i64* %RSP, align 8
Found line to remove! %95 = icmp ugt i64 %93, -33
Found line to remove! %96 = zext i1 %95 to i8
Found line to remove! store i8 %96, i8* %14, align 1
Found line to remove! %97 = trunc i64 %94 to i32
Found line to remove! %98 = and i32 %97, 255
Found line to remove! %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12
Found line to remove! %100 = trunc i32 %99 to i8
Found line to remove! %101 = and i8 %100, 1
Found line to remove! %102 = xor i8 %101, 1
Found line to remove! store i8 %102, i8* %21, align 1
Found line to remove! %103 = xor i64 %94, %93
Found line to remove! %104 = lshr i64 %103, 4
Found line to remove! %105 = trunc i64 %104 to i8
Found line to remove! %106 = and i8 %105, 1
Found line to remove! store i8 %106, i8* %26, align 1
Found line to remove! %107 = icmp eq i64 %94, 0
Found line to remove! %108 = zext i1 %107 to i8
Found line to remove! store i8 %108, i8* %29, align 1
Found line to remove! %109 = lshr i64 %94, 63
Found line to remove! %110 = trunc i64 %109 to i8
Found line to remove! store i8 %110, i8* %32, align 1
Found line to remove! %111 = lshr i64 %93, 63
Found line to remove! %112 = xor i64 %109, %111
Found line to remove! %113 = add nuw nsw i64 %112, %109
Found line to remove! %114 = icmp eq i64 %113, 2
Found line to remove! %115 = zext i1 %114 to i8
Found line to remove! store i8 %115, i8* %38, align 1
Found line to remove! %116 = add i64 %92, 5
Found line to remove! store i64 %116, i64* %PC, align 8
Found line to remove! %117 = add i64 %93, 40
Found line to remove! %118 = inttoptr i64 %94 to i64*
Found line to remove! %119 = load i64, i64* %118, align 8
Found line to remove! store i64 %119, i64* %RBP, align 8
Found line to remove! store i64 %117, i64* %RSP, align 8
Found line to remove! %120 = add i64 %92, 6
Found line to remove! store i64 %120, i64* %PC, align 8
Found line to remove! %121 = inttoptr i64 %117 to i64*
Found line to remove! %122 = load i64, i64* %121, align 8
Found line to remove! store i64 %122, i64* %PC, align 8
Found line to remove! %123 = add i64 %93, 48
Found line to remove! store i64 %123, i64* %RSP, align 8
Found line to remove! ret %struct.Memory* %MEMORY.0
Keep: 
Keep: block_400a69:                                     ; preds = %block_400a23, %block_400a5c
Found line to remove! %124 = phi i64 [ %212, %block_400a23 ], [ %.pre2, %block_400a5c ]
Keep: %MEMORY.1 = phi %struct.Memory* [ %172, %block_400a23 ], [ %53, %block_400a5c ]
Found line to remove! %125 = add i64 %124, -86
Found line to remove! store i64 %125, i64* %PC, align 8
Keep: br label %block_400a13
Keep: 
Keep: block_400a23:                                     ; preds = %block_400a13
Found line to remove! store i64 add (i64 ptrtoint (%seg_4017c0__rodata_type* @seg_4017c0__rodata to i64), i64 4), i64* %RDI, align 8
Found line to remove! %126 = add i64 %61, -8
Found line to remove! %127 = add i64 %92, 14
Found line to remove! store i64 %127, i64* %PC, align 8
Found line to remove! %128 = inttoptr i64 %126 to i64*
Found line to remove! %129 = load i64, i64* %128, align 8
Found line to remove! store i64 %129, i64* %RAX, align 8
Found line to remove! %130 = add i64 %92, 17
Found line to remove! store i64 %130, i64* %PC, align 8
Keep: %131 = load i32, i32* %64, align 4
Found line to remove! %132 = zext i32 %131 to i64
Found line to remove! store i64 %132, i64* %RCX, align 8
Found line to remove! %133 = add i32 %131, 1
Found line to remove! %134 = zext i32 %133 to i64
Found line to remove! store i64 %134, i64* %RDX, align 8
Found line to remove! %135 = icmp eq i32 %131, -1
Found line to remove! %136 = icmp eq i32 %133, 0
Found line to remove! %137 = or i1 %135, %136
Found line to remove! %138 = zext i1 %137 to i8
Found line to remove! store i8 %138, i8* %14, align 1
Found line to remove! %139 = and i32 %133, 255
Found line to remove! %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #12
Found line to remove! %141 = trunc i32 %140 to i8
Found line to remove! %142 = and i8 %141, 1
Found line to remove! %143 = xor i8 %142, 1
Found line to remove! store i8 %143, i8* %21, align 1
Found line to remove! %144 = xor i32 %133, %131
Found line to remove! %145 = lshr i32 %144, 4
Found line to remove! %146 = trunc i32 %145 to i8
Found line to remove! %147 = and i8 %146, 1
Found line to remove! store i8 %147, i8* %26, align 1
Found line to remove! %148 = zext i1 %136 to i8
Found line to remove! store i8 %148, i8* %29, align 1
Found line to remove! %149 = lshr i32 %133, 31
Found line to remove! %150 = trunc i32 %149 to i8
Found line to remove! store i8 %150, i8* %32, align 1
Found line to remove! %151 = lshr i32 %131, 31
Found line to remove! %152 = xor i32 %149, %151
Found line to remove! %153 = add nuw nsw i32 %152, %149
Found line to remove! %154 = icmp eq i32 %153, 2
Found line to remove! %155 = zext i1 %154 to i8
Found line to remove! store i8 %155, i8* %38, align 1
Found line to remove! %156 = add i64 %92, 25
Found line to remove! store i64 %156, i64* %PC, align 8
Found line to remove! store i32 %133, i32* %64, align 4
Found line to remove! %157 = load i32, i32* %ECX, align 4
Found line to remove! %158 = load i64, i64* %PC, align 8
Found line to remove! %159 = sext i32 %157 to i64
Found line to remove! store i64 %159, i64* %RSI, align 8
Found line to remove! %160 = load i64, i64* %RAX, align 8
Found line to remove! %161 = shl nsw i64 %159, 2
Found line to remove! %162 = add i64 %160, %161
Found line to remove! %163 = add i64 %158, 6
Found line to remove! store i64 %163, i64* %PC, align 8
Found line to remove! %164 = inttoptr i64 %162 to i32*
Found line to remove! %165 = load i32, i32* %164, align 4
Found line to remove! %166 = zext i32 %165 to i64
Found line to remove! store i64 %166, i64* %RSI, align 8
Found line to remove! store i8 0, i8* %AL, align 1
Found line to remove! %167 = add i64 %158, -1260
Found line to remove! %168 = add i64 %158, 13
Found line to remove! %169 = load i64, i64* %RSP, align 8
Found line to remove! %170 = add i64 %169, -8
Found line to remove! %171 = inttoptr i64 %170 to i64*
Found line to remove! store i64 %168, i64* %171, align 8
Found line to remove! store i64 %170, i64* %RSP, align 8
Found line to remove! store i64 %167, i64* %PC, align 8
Keep: %172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
Keep: %173 = load i64, i64* %RBP, align 8
Keep: %174 = add i64 %173, -12
Found line to remove! %175 = load i64, i64* %PC, align 8
Found line to remove! %176 = add i64 %175, 3
Found line to remove! store i64 %176, i64* %PC, align 8
Keep: %177 = inttoptr i64 %174 to i32*
Keep: %178 = load i32, i32* %177, align 4
Found line to remove! %179 = zext i32 %178 to i64
Found line to remove! store i64 %179, i64* %RCX, align 8
Keep: %180 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Found line to remove! %181 = sub i32 %178, %180
Found line to remove! %182 = icmp ult i32 %178, %180
Found line to remove! %183 = zext i1 %182 to i8
Found line to remove! store i8 %183, i8* %14, align 1
Found line to remove! %184 = and i32 %181, 255
Found line to remove! %185 = tail call i32 @llvm.ctpop.i32(i32 %184) #12
Found line to remove! %186 = trunc i32 %185 to i8
Found line to remove! %187 = and i8 %186, 1
Found line to remove! %188 = xor i8 %187, 1
Found line to remove! store i8 %188, i8* %21, align 1
Found line to remove! %189 = xor i32 %180, %178
Found line to remove! %190 = xor i32 %189, %181
Found line to remove! %191 = lshr i32 %190, 4
Found line to remove! %192 = trunc i32 %191 to i8
Found line to remove! %193 = and i8 %192, 1
Found line to remove! store i8 %193, i8* %26, align 1
Found line to remove! %194 = icmp eq i32 %181, 0
Found line to remove! %195 = zext i1 %194 to i8
Found line to remove! store i8 %195, i8* %29, align 1
Found line to remove! %196 = lshr i32 %181, 31
Found line to remove! %197 = trunc i32 %196 to i8
Found line to remove! store i8 %197, i8* %32, align 1
Keep: %198 = lshr i32 %178, 31
Keep: %199 = lshr i32 %180, 31
Keep: %200 = xor i32 %199, %198
Found line to remove! %201 = xor i32 %196, %198
Found line to remove! %202 = add nuw nsw i32 %201, %200
Found line to remove! %203 = icmp eq i32 %202, 2
Found line to remove! %204 = zext i1 %203 to i8
Found line to remove!Writing '/tmp/tmpliav5rs6.dot'...
Writing '/tmp/tmpliav5rs6.dot':Done

Reading LLVM: /tmp/tmp5g9_tjhc-query.ll
Extracting function [show_data] from /tmp/tmp5g9_tjhc-query.ll
Dot file generated!
Writing '/tmp/tmpvar5306q.dot'...
Writing '/tmp/tmpvar5306q.dot':Done

Reading LLVM: /tmp/tmpuny0l_te-target.ll
Extracting function [show_data] from /tmp/tmpuny0l_te-target.ll
Dot file generated!
 store i8 %204, i8* %38, align 1
Found line to remove! %205 = add i64 %173, -16
Found line to remove! %206 = load i32, i32* %EAX, align 4
Found line to remove! %207 = add i64 %175, 13
Found line to remove! store i64 %207, i64* %PC, align 8
Found line to remove! %208 = inttoptr i64 %205 to i32*
Found line to remove! store i32 %206, i32* %208, align 4
Found line to remove! %209 = load i64, i64* %PC, align 8
Keep: %210 = load i8, i8* %29, align 1
Found line to remove! %211 = icmp ne i8 %210, 0
Found line to remove! %.v3 = select i1 %211, i64 19, i64 6
Found line to remove! %212 = add i64 %209, %.v3
Found line to remove! store i64 %212, i64* %PC, align 8
Keep: %213 = icmp eq i8 %210, 1
Keep: br i1 %213, label %block_400a69, label %block_400a5c
================ Starting round 2
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 2 %var_2_43 = load i64, i64* %RBP.i, align 8
- 3 %var_2_44 = add i64 %var_2_43, -12
- 4 %var_2_47 = inttoptr i64 %var_2_44 to i32*
- 5 store i32 0, i32* %var_2_47, align 4
- 6 %var_2_511 = load i64, i64* %RBP.i, align 8
- 7 %var_2_522 = add i64 %var_2_511, -12
- 8 %var_2_543 = inttoptr i64 %var_2_522 to i32*
- 9 %var_2_554 = load i32, i32* %var_2_543, align 4
- 10 %var_2_575 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 11 %var_2_716 = icmp eq i32 %var_2_554, %var_2_575
- 12 \<badref\> = br i1 %var_2_716, label %block_.L_400a6e, label %block_400a23.preheader
- 13 \<badref\> = br label %block_400a23
- 14 %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_.L_400a13.backedge ], [ %2, %block_400a23.preheader ]
- 15 %var_2_129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.07)
- 16 %var_2_167 = load i8, i8* %var_2_29, align 1
- 17 %cmpBr_400a56 = icmp eq i8 %var_2_167, 1
- 18 \<badref\> = br i1 %cmpBr_400a56, label %block_.L_400a13.backedge, label %block_400a5c
- 19 %var_2_175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %var_2_129)
- 20 \<badref\> = br label %block_.L_400a13.backedge
- 21 %MEMORY.0.be = phi %struct.Memory* [ %var_2_129, %block_400a23 ], [ %var_2_175, %block_400a5c ]
- 22 %var_2_51 = load i64, i64* %RBP.i, align 8
- 23 %var_2_52 = add i64 %var_2_51, -12
- 24 %var_2_54 = inttoptr i64 %var_2_52 to i32*
- 25 %var_2_55 = load i32, i32* %var_2_54, align 4
- 26 %var_2_57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 27 %var_2_71 = icmp eq i32 %var_2_55, %var_2_57
- 28 \<badref\> = br i1 %var_2_71, label %block_.L_400a6e.loopexit, label %block_400a23
- 29 \<badref\> = br label %block_.L_400a6e
- 30 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460cfc57b8>, {0: {0}, 1: {1}, 2: {2, 6, 9, 10, 20, 24, 27, 28}, 3: {25, 3, 7}, 4: {8, 26, 4}, 5: {5}, 6: {2, 6, 9, 10, 20, 24, 27, 28}, 7: {25, 3, 7}, 8: {8, 26, 4}, 9: {2, 6, 9, 10, 20, 24, 27, 28}, 10: {2, 6, 9, 10, 20, 24, 27, 28}, 11: {11, 29}, 12: {12, 22, 30}, 13: {16, 13, 15}, 14: {18, 23}, 15: {19, 14}, 16: {2, 6, 9, 10, 20, 24, 27, 28}, 17: {21}, 18: {12, 22, 30}, 19: {19, 14}, 20: {16, 13, 15}, 21: {18, 23}, 22: {2, 6, 9, 10, 20, 24, 27, 28}, 23: {25, 3, 7}, 24: {8, 26, 4}, 25: {2, 6, 9, 10, 20, 24, 27, 28}, 26: {2, 6, 9, 10, 20, 24, 27, 28}, 27: {11, 29}, 28: {12, 22, 30}, 29: {16, 13, 15}, 30: {17}})
Equivalent! frozenset({24, 6}) {6, 22}
Equivalent! frozenset({25, 7}) {23, 7}
Equivalent! frozenset({8, 26}) {8, 24}
Equivalent! frozenset({9, 27}) {9, 25}
Equivalent! frozenset({11, 29}) {27, 11}
Equivalent! frozenset({12, 30}) {12, 28}
Equivalent! frozenset({16, 13, 15}) {29, 20, 13}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460cfc57b8>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {24}, 7: {7}, 8: {8}, 9: {9}, 10: {9, 10, 27, 28}, 11: {29}, 12: {12}, 13: {15}, 14: {18}, 15: {19}, 16: {20}, 17: {21}, 18: {22}, 19: {14}, 20: {13}, 21: {23}, 22: {6}, 23: {25}, 24: {26}, 25: {27}, 26: {9, 10, 27, 28}, 27: {11}, 28: {30}, 29: {16}, 30: {17}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
MORE 10 POT: 4
EXACT 11 icmp icmp
EXACT 12 br br
EXACT 13 br br
EXACT 14 phi phi
EXACT 15 tail tail
EXACT 16 load load
EXACT 17 icmp icmp
EXACT 18 br br
EXACT 19 tail tail
EXACT 20 br br
EXACT 21 phi phi
EXACT 22 load load
EXACT 23 add add
EXACT 24 inttoptr inttoptr
EXACT 25 load load
MORE 26 POT: 4
EXACT 27 icmp icmp
EXACT 28 br br
EXACT 29 br br
EXACT 30 ret ret
================ Starting round 3
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 2 %var_2_43 = load i64, i64* %RBP, align 8
- 3 %var_2_44 = add i64 %var_2_43, -12
- 4 %var_2_47 = inttoptr i64 %var_2_44 to i32*
- 5 store i32 0, i32* %var_2_47, align 4
- 6 %var_2_611 = load i64, i64* %RBP, align 8
- 7 %var_2_622 = add i64 %var_2_611, -12
- 8 %var_2_643 = inttoptr i64 %var_2_622 to i32*
- 9 %var_2_654 = load i32, i32* %var_2_643, align 4
- 10 %var_2_675 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 11 %var_2_816 = icmp eq i32 %var_2_654, %var_2_675
- 12 \<badref\> = br i1 %var_2_816, label %block_400a6e, label %block_400a23.preheader
- 13 \<badref\> = br label %block_400a23
- 14 %var_2_53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %var_2_172)
- 15 \<badref\> = br label %block_400a13.backedge
- 16 \<badref\> = br label %block_400a6e
- 17 ret %struct.Memory* %2
- 18 %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_400a13.backedge ], [ %2, %block_400a23.preheader ]
- 19 %var_2_172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.07)
- 20 %var_2_210 = load i8, i8* %var_2_29, align 1
- 21 %var_2_213 = icmp eq i8 %var_2_210, 1
- 22 \<badref\> = br i1 %var_2_213, label %block_400a13.backedge, label %block_400a5c
- 23 %MEMORY.0.be = phi %struct.Memory* [ %var_2_172, %block_400a23 ], [ %var_2_53, %block_400a5c ]
- 24 %var_2_61 = load i64, i64* %RBP, align 8
- 25 %var_2_62 = add i64 %var_2_61, -12
- 26 %var_2_64 = inttoptr i64 %var_2_62 to i32*
- 27 %var_2_65 = load i32, i32* %var_2_64, align 4
- 28 %var_2_67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 29 %var_2_81 = icmp eq i32 %var_2_65, %var_2_67
- 30 \<badref\> = br i1 %var_2_81, label %block_400a6e.loopexit, label %block_400a23
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460ca5e950>, {0: {0}, 1: {1}, 2: {2, 6, 9, 10, 16, 22, 25, 26}, 3: {3, 23, 7}, 4: {8, 24, 4}, 5: {5}, 6: {2, 6, 9, 10, 16, 22, 25, 26}, 7: {3, 23, 7}, 8: {8, 24, 4}, 9: {2, 6, 9, 10, 16, 22, 25, 26}, 10: {2, 6, 9, 10, 16, 22, 25, 26}, 11: {27, 11}, 12: {18, 12, 28}, 13: {29, 20, 13}, 14: {19, 15}, 15: {29, 20, 13}, 16: {29, 20, 13}, 17: {30}, 18: {21, 14}, 19: {19, 15}, 20: {2, 6, 9, 10, 16, 22, 25, 26}, 21: {17}, 22: {18, 12, 28}, 23: {21, 14}, 24: {2, 6, 9, 10, 16, 22, 25, 26}, 25: {3, 23, 7}, 26: {8, 24, 4}, 27: {2, 6, 9, 10, 16, 22, 25, 26}, 28: {2, 6, 9, 10, 16, 22, 25, 26}, 29: {27, 11}, 30: {18, 12, 28}})
Equivalent! frozenset({22, 6}) {24, 6}
Equivalent! frozenset({23, 7}) {25, 7}
Equivalent! frozenset({24, 8}) {8, 26}
Equivalent! frozenset({25, 9}) {9, 27}
Equivalent! frozenset({11, 27}) {11, 29}
Equivalent! frozenset({12, 28}) {12, 30}
Equivalent! frozenset({29, 20, 13}) {16, 13, 15}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460ca5e950>, {0: {0}, 1: {1}, 2: {2}, 3: {3}, 4: {4}, 5: {5}, 6: {6}, 7: {7}, 8: {24}, 9: {25}, 10: {9, 10, 25, 26}, 11: {11}, 12: {12}, 13: {20}, 14: {19}, 15: {13}, 16: {29}, 17: {30}, 18: {14}, 19: {15}, 20: {16}, 21: {17}, 22: {18}, 23: {21}, 24: {22}, 25: {23}, 26: {8}, 27: {9}, 28: {9, 10, 25, 26}, 29: {27}, 30: {28}})Writing '/tmp/tmppde81m4x.dot'...
Writing '/tmp/tmppde81m4x.dot':Done

Reading LLVM: /tmp/tmp5g9_tjhc-query.ll
Extracting function [show_data] from /tmp/tmp5g9_tjhc-query.ll
Dot file generated!
Writing '/tmp/tmpr2yx5cqz.dot'...
Writing '/tmp/tmpr2yx5cqz.dot':Done

Reading LLVM: /tmp/tmpuny0l_te-target.ll
Extracting function [show_data] from /tmp/tmpuny0l_te-target.ll
Dot file generated!

EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 store store
EXACT 6 load load
EXACT 7 add add
EXACT 8 inttoptr inttoptr
EXACT 9 load load
MORE 10 POT: 4
EXACT 11 icmp icmp
EXACT 12 br br
EXACT 13 br br
EXACT 14 tail tail
EXACT 15 br br
EXACT 16 br br
EXACT 17 ret ret
EXACT 18 phi phi
EXACT 19 tail tail
EXACT 20 load load
EXACT 21 icmp icmp
EXACT 22 br br
EXACT 23 phi phi
EXACT 24 load load
EXACT 25 add add
EXACT 26 inttoptr inttoptr
EXACT 27 load load
MORE 28 POT: 4
EXACT 29 icmp icmp
EXACT 30 br br
FP: 63 2.0 False
TO REMOVE: dict_keys(['%var_2_43 = load i64, i64* %RBP.i, align 8', '%var_2_44 = add i64 %var_2_43, -12', '%var_2_47 = inttoptr i64 %var_2_44 to i32*', 'store i32 0, i32* %var_2_47, align 4', 'ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_43 = load i64, i64* %RBP.i, align 8
Found line to remove! %var_2_44 = add i64 %var_2_43, -12
Found line to remove! %var_2_47 = inttoptr i64 %var_2_44 to i32*
Found line to remove! store i32 0, i32* %var_2_47, align 4
Keep: %var_2_511 = load i64, i64* %RBP.i, align 8
Keep: %var_2_522 = add i64 %var_2_511, -12
Keep: %var_2_543 = inttoptr i64 %var_2_522 to i32*
Keep: %var_2_554 = load i32, i32* %var_2_543, align 4
Keep: %var_2_575 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Keep: %var_2_716 = icmp eq i32 %var_2_554, %var_2_575
Keep: br i1 %var_2_716, label %block_.L_400a6e, label %block_400a23.preheader
Keep: 
Keep: block_400a23.preheader:                           ; preds = %entry
Keep: br label %block_400a23
Keep: 
Keep: block_400a23:                                     ; preds = %block_400a23.preheader, %block_.L_400a13.backedge
Keep: %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_.L_400a13.backedge ], [ %2, %block_400a23.preheader ]
Keep: %var_2_129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.07)
Keep: %var_2_167 = load i8, i8* %var_2_29, align 1
Keep: %cmpBr_400a56 = icmp eq i8 %var_2_167, 1
Keep: br i1 %cmpBr_400a56, label %block_.L_400a13.backedge, label %block_400a5c
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Keep: %var_2_175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %var_2_129)
Keep: br label %block_.L_400a13.backedge
Keep: 
Keep: block_.L_400a13.backedge:                         ; preds = %block_400a5c, %block_400a23
Keep: %MEMORY.0.be = phi %struct.Memory* [ %var_2_129, %block_400a23 ], [ %var_2_175, %block_400a5c ]
Keep: %var_2_51 = load i64, i64* %RBP.i, align 8
Keep: %var_2_52 = add i64 %var_2_51, -12
Keep: %var_2_54 = inttoptr i64 %var_2_52 to i32*
Keep: %var_2_55 = load i32, i32* %var_2_54, align 4
Keep: %var_2_57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Keep: %var_2_71 = icmp eq i32 %var_2_55, %var_2_57
Keep: br i1 %var_2_71, label %block_.L_400a6e.loopexit, label %block_400a23
Keep: 
Keep: block_.L_400a6e.loopexit:                         ; preds = %block_.L_400a13.backedge
Keep: br label %block_.L_400a6e
Keep: 
Keep: block_.L_400a6e:                                  ; preds = %block_.L_400a6e.loopexit, %entry
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['%var_2_43 = load i64, i64* %RBP, align 8', '%var_2_44 = add i64 %var_2_43, -12', '%var_2_47 = inttoptr i64 %var_2_44 to i32*', 'store i32 0, i32* %var_2_47, align 4', 'ret %struct.Memory* %2'])
Keep: block_400a00:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Found line to remove! %var_2_43 = load i64, i64* %RBP, align 8
Found line to remove! %var_2_44 = add i64 %var_2_43, -12
Found line to remove! %var_2_47 = inttoptr i64 %var_2_44 to i32*
Found line to remove! store i32 0, i32* %var_2_47, align 4
Keep: %var_2_611 = load i64, i64* %RBP, align 8
Keep: %var_2_622 = add i64 %var_2_611, -12
Keep: %var_2_643 = inttoptr i64 %var_2_622 to i32*
Keep: %var_2_654 = load i32, i32* %var_2_643, align 4
Keep: %var_2_675 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Keep: %var_2_816 = icmp eq i32 %var_2_654, %var_2_675
Keep: br i1 %var_2_816, label %block_400a6e, label %block_400a23.preheader
Keep: 
Keep: block_400a23.preheader:                           ; preds = %block_400a00
Keep: br label %block_400a23
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Keep: %var_2_53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %var_2_172)
Keep: br label %block_400a13.backedge
Keep: 
Keep: block_400a6e.loopexit:                            ; preds = %block_400a13.backedge
Keep: br label %block_400a6e
Keep: 
Keep: block_400a6e:                                     ; preds = %block_400a6e.loopexit, %block_400a00
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400a23:                                     ; preds = %block_400a23.preheader, %block_400a13.backedge
Keep: %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_400a13.backedge ], [ %2, %block_400a23.preheader ]
Keep: %var_2_172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.07)
Keep: %var_2_210 = load i8, i8* %var_2_29, align 1
Keep: %var_2_213 = icmp eq i8 %var_2_210, 1
Keep: br i1 %var_2_213, label %block_400a13.backedge, label %block_400a5c
Keep: 
Keep: block_400a13.backedge:                            ; preds = %block_400a23, %block_400a5c
Keep: %MEMORY.0.be = phi %struct.Memory* [ %var_2_172, %block_400a23 ], [ %var_2_53, %block_400a5c ]
Keep: %var_2_61 = load i64, i64* %RBP, align 8
Keep: %var_2_62 = add i64 %var_2_61, -12
Keep: %var_2_64 = inttoptr i64 %var_2_62 to i32*
Keep: %var_2_65 = load i32, i32* %var_2_64, align 4
Keep: %var_2_67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Keep: %var_2_81 = icmp eq i32 %var_2_65, %var_2_67
Keep: br i1 %var_2_81, label %block_400a6e.loopexit, label %block_400a23
================ Starting round 4
MAPPING:
- 0 %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 2 %var_2_511 = load i64, i64* %RBP.i, align 8
- 3 %var_2_522 = add i64 %var_2_511, -12
- 4 %var_2_543 = inttoptr i64 %var_2_522 to i32*
- 5 %var_2_554 = load i32, i32* %var_2_543, align 4
- 6 %var_2_575 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 7 %var_2_716 = icmp eq i32 %var_2_554, %var_2_575
- 8 \<badref\> = br i1 %var_2_716, label %block_.L_400a6e, label %block_400a23.preheader
- 9 \<badref\> = br label %block_400a23
- 10 %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_.L_400a13.backedge ], [ %2, %block_400a23.preheader ]
- 11 %var_2_129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.07)
- 12 %var_2_167 = load i8, i8* %var_2_29, align 1
- 13 %cmpBr_400a56 = icmp eq i8 %var_2_167, 1
- 14 \<badref\> = br i1 %cmpBr_400a56, label %block_.L_400a13.backedge, label %block_400a5c
- 15 %var_2_175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %var_2_129)
- 16 \<badref\> = br label %block_.L_400a13.backedge
- 17 %MEMORY.0.be = phi %struct.Memory* [ %var_2_129, %block_400a23 ], [ %var_2_175, %block_400a5c ]
- 18 %var_2_51 = load i64, i64* %RBP.i, align 8
- 19 %var_2_52 = add i64 %var_2_51, -12
- 20 %var_2_54 = inttoptr i64 %var_2_52 to i32*
- 21 %var_2_55 = load i32, i32* %var_2_54, align 4
- 22 %var_2_57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
- 23 %var_2_71 = icmp eq i32 %var_2_55, %var_2_57
- 24 \<badref\> = br i1 %var_2_71, label %block_.L_400a6e.loopexit, label %block_400a23
- 25 \<badref\> = br label %block_.L_400a6e
- 26 ret %struct.Memory* %2
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460c679a60>, {0: {0}, 1: {1}, 2: {2, 5, 6, 16, 20, 23, 24}, 3: {3, 21}, 4: {4, 22}, 5: {2, 5, 6, 16, 20, 23, 24}, 6: {2, 5, 6, 16, 20, 23, 24}, 7: {25, 7}, 8: {8, 18, 26}, 9: {9, 11, 12}, 10: {19, 14}, 11: {10, 15}, 12: {2, 5, 6, 16, 20, 23, 24}, 13: {17}, 14: {8, 18, 26}, 15: {10, 15}, 16: {9, 11, 12}, 17: {19, 14}, 18: {2, 5, 6, 16, 20, 23, 24}, 19: {3, 21}, 20: {4, 22}, 21: {2, 5, 6, 16, 20, 23, 24}, 22: {2, 5, 6, 16, 20, 23, 24}, 23: {25, 7}, 24: {8, 18, 26}, 25: {9, 11, 12}, 26: {13}})
Equivalent! frozenset({2, 20}) {2, 18}
Equivalent! frozenset({3, 21}) {19, 3}
Equivalent! frozenset({4, 22}) {4, 20}
Equivalent! frozenset({5, 23}) {21, 5}
Equivalent! frozenset({25, 7}) {23, 7}
Equivalent! frozenset({8, 26}) {8, 24}
Equivalent! frozenset({9, 11, 12}) {16, 9, 25}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460c679a60>, {0: {0}, 1: {1}, 2: {2}, 3: {21}, 4: {4}, 5: {23}, 6: {5, 6, 23, 24}, 7: {7}, 8: {8}, 9: {11}, 10: {14}, 11: {15}, 12: {16}, 13: {17}, 14: {18}, 15: {10}, 16: {9}, 17: {19}, 18: {20}, 19: {3}, 20: {22}, 21: {5}, 22: {5, 6, 23, 24}, 23: {25}, 24: {26}, 25: {12}, 26: {13}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
MORE 6 POT: 4
EXACT 7 icmp icmp
EXACT 8 br br
EXACT 9 br br
EXACT 10 phi phi
EXACT 11 tail tail
EXACT 12 load load
EXACT 13 icmp icmp
EXACT 14 br br
EXACT 15 tail tail
EXACT 16 br br
EXACT 17 phi phi
EXACT 18 load load
EXACT 19 add add
EXACT 20 inttoptr inttoptr
EXACT 21 load load
MORE 22 POT: 4
EXACT 23 icmp icmp
EXACT 24 br br
EXACT 25 br br
EXACT 26 ret ret
================ Starting round 5
MAPPING:
- 0 %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
- 1 %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
- 2 %var_2_611 = load i64, i64* %RBP, align 8
- 3 %var_2_622 = add i64 %var_2_611, -12
- 4 %var_2_643 = inttoptr i64 %var_2_622 to i32*
- 5 %var_2_654 = load i32, i32* %var_2_643, align 4
- 6 %var_2_675 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 7 %var_2_816 = icmp eq i32 %var_2_654, %var_2_675
- 8 \<badref\> = br i1 %var_2_816, label %block_400a6e, label %block_400a23.preheader
- 9 \<badref\> = br label %block_400a23
- 10 %var_2_53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %var_2_172)
- 11 \<badref\> = br label %block_400a13.backedge
- 12 \<badref\> = br label %block_400a6e
- 13 ret %struct.Memory* %2
- 14 %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_400a13.backedge ], [ %2, %block_400a23.preheader ]
- 15 %var_2_172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.07)
- 16 %var_2_210 = load i8, i8* %var_2_29, align 1
- 17 %var_2_213 = icmp eq i8 %var_2_210, 1
- 18 \<badref\> = br i1 %var_2_213, label %block_400a13.backedge, label %block_400a5c
- 19 %MEMORY.0.be = phi %struct.Memory* [ %var_2_172, %block_400a23 ], [ %var_2_53, %block_400a5c ]
- 20 %var_2_61 = load i64, i64* %RBP, align 8
- 21 %var_2_62 = add i64 %var_2_61, -12
- 22 %var_2_64 = inttoptr i64 %var_2_62 to i32*
- 23 %var_2_65 = load i32, i32* %var_2_64, align 4
- 24 %var_2_67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
- 25 %var_2_81 = icmp eq i32 %var_2_65, %var_2_67
- 26 \<badref\> = br i1 %var_2_81, label %block_400a6e.loopexit, label %block_400a23
Initial Matches: defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d0c7268>, {0: {0}, 1: {1}, 2: {2, 5, 6, 12, 18, 21, 22}, 3: {19, 3}, 4: {4, 20}, 5: {2, 5, 6, 12, 18, 21, 22}, 6: {2, 5, 6, 12, 18, 21, 22}, 7: {23, 7}, 8: {8, 24, 14}, 9: {16, 9, 25}, 10: {11, 15}, 11: {16, 9, 25}, 12: {16, 9, 25}, 13: {26}, 14: {17, 10}, 15: {11, 15}, 16: {2, 5, 6, 12, 18, 21, 22}, 17: {13}, 18: {8, 24, 14}, 19: {17, 10}, 20: {2, 5, 6, 12, 18, 21, 22}, 21: {19, 3}, 22: {4, 20}, 23: {2, 5, 6, 12, 18, 21, 22}, 24: {2, 5, 6, 12, 18, 21, 22}, 25: {23, 7}, 26: {8, 24, 14}})
Equivalent! frozenset({18, 2}) {2, 20}
Equivalent! frozenset({19, 3}) {3, 21}
Equivalent! frozenset({20, 4}) {4, 22}
Equivalent! frozenset({21, 5}) {5, 23}
Equivalent! frozenset({23, 7}) {25, 7}
Equivalent! frozenset({24, 8}) {8, 26}
Equivalent! frozenset({16, 9, 25}) {9, 11, 12}
PHIS defaultdict(<function Matcher._new_round.<locals>.<lambda> at 0x7f460d0c7268>, {0: {0}, 1: {1}, 2: {18}, 3: {19}, 4: {20}, 5: {21}, 6: {5, 6, 21, 22}, 7: {7}, 8: {24}, 9: {16}, 10: {15}, 11: {9}, 12: {25}, 13: {26}, 14: {10}, 15: {11}, 16: {12}, 17: {13}, 18: {14}, 19: {17}, 20: {2}, 21: {3}, 22: {4}, 23: {5}, 24: {5, 6, 21, 22}, 25: {23}, 26: {8}})
EXACT 0 getelementptr getelementptr
EXACT 1 getelementptr getelementptr
EXACT 2 load load
EXACT 3 add add
EXACT 4 inttoptr inttoptr
EXACT 5 load load
MORE 6 POT: 4
EXACT 7 icmp icmp
EXACT 8 br br
EXACT 9 br br
EXACT 10 tail tail
EXACT 11 br br
EXACT 12 br br
EXACT 13 ret ret
EXACT 14 phi phi
EXACT 15 tail tail
EXACT 16 load load
EXACT 17 icmp icmp
EXACT 18 br br
EXACT 19 phi phi
EXACT 20 load load
EXACT 21 add add
EXACT 22 inttoptr inttoptr
EXACT 23 load load
MORE 24 POT: 4
EXACT 25 icmp icmp
EXACT 26 br br
FP: 63 3.0 False
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: entry:
Keep: %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %var_2_511 = load i64, i64* %RBP.i, align 8
Keep: %var_2_522 = add i64 %var_2_511, -12
Keep: %var_2_543 = inttoptr i64 %var_2_522 to i32*
Keep: %var_2_554 = load i32, i32* %var_2_543, align 4
Keep: %var_2_575 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Keep: %var_2_716 = icmp eq i32 %var_2_554, %var_2_575
Keep: br i1 %var_2_716, label %block_.L_400a6e, label %block_400a23.preheader
Keep: 
Keep: block_400a23.preheader:                           ; preds = %entry
Keep: br label %block_400a23
Keep: 
Keep: block_400a23:                                     ; preds = %block_400a23.preheader, %block_.L_400a13.backedge
Keep: %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_.L_400a13.backedge ], [ %2, %block_400a23.preheader ]
Keep: %var_2_129 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %MEMORY.07)
Keep: %var_2_167 = load i8, i8* %var_2_29, align 1
Keep: %cmpBr_400a56 = icmp eq i8 %var_2_167, 1
Keep: br i1 %cmpBr_400a56, label %block_.L_400a13.backedge, label %block_400a5c
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Keep: %var_2_175 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @putchar to i64), %struct.Memory* %var_2_129)
Keep: br label %block_.L_400a13.backedge
Keep: 
Keep: block_.L_400a13.backedge:                         ; preds = %block_400a5c, %block_400a23
Keep: %MEMORY.0.be = phi %struct.Memory* [ %var_2_129, %block_400a23 ], [ %var_2_175, %block_400a5c ]
Keep: %var_2_51 = load i64, i64* %RBP.i, align 8
Keep: %var_2_52 = add i64 %var_2_51, -12
Keep: %var_2_54 = inttoptr i64 %var_2_52 to i32*
Keep: %var_2_55 = load i32, i32* %var_2_54, align 4
Keep: %var_2_57 = load i32, i32* bitcast (%G_0x602068_type* @G_0x602068 to i32*), align 8
Keep: %var_2_71 = icmp eq i32 %var_2_55, %var_2_57
Keep: br i1 %var_2_71, label %block_.L_400a6e.loopexit, label %block_400a23
Keep: 
Keep: block_.L_400a6e.loopexit:                         ; preds = %block_.L_400a13.backedge
Keep: br label %block_.L_400a6e
Keep: 
Keep: block_.L_400a6e:                                  ; preds = %block_.L_400a6e.loopexit, %entry
Found line to remove! ret %struct.Memory* %2
TO REMOVE: dict_keys(['ret %struct.Memory* %2'])
Keep: block_400a00:
Keep: %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
Keep: %var_2_29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
Keep: %var_2_611 = load i64, i64* %RBP, align 8
Keep: %var_2_622 = add i64 %var_2_611, -12
Keep: %var_2_643 = inttoptr i64 %var_2_622 to i32*
Keep: %var_2_654 = load i32, i32* %var_2_643, align 4
Keep: %var_2_675 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Keep: %var_2_816 = icmp eq i32 %var_2_654, %var_2_675
Keep: br i1 %var_2_816, label %block_400a6e, label %block_400a23.preheader
Keep: 
Keep: block_400a23.preheader:                           ; preds = %block_400a00
Keep: br label %block_400a23
Keep: 
Keep: block_400a5c:                                     ; preds = %block_400a23
Keep: %var_2_53 = tail call fastcc %struct.Memory* @ext_6020a8_putchar(%struct.State* nonnull %0, %struct.Memory* %var_2_172)
Keep: br label %block_400a13.backedge
Keep: 
Keep: block_400a6e.loopexit:                            ; preds = %block_400a13.backedge
Keep: br label %block_400a6e
Keep: 
Keep: block_400a6e:                                     ; preds = %block_400a6e.loopexit, %block_400a00
Found line to remove! ret %struct.Memory* %2
Keep: 
Keep: block_400a23:                                     ; preds = %block_400a23.preheader, %block_400a13.backedge
Keep: %MEMORY.07 = phi %struct.Memory* [ %MEMORY.0.be, %block_400a13.backedge ], [ %2, %block_400a23.preheader ]
Keep: %var_2_172 = tail call fastcc %struct.Memory* @ext_6020b0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.07)
Keep: %var_2_210 = load i8, i8* %var_2_29, align 1
Keep: %var_2_213 = icmp eq i8 %var_2_210, 1
Keep: br i1 %var_2_213, label %block_400a13.backedge, label %block_400a5c
Keep: 
Keep: block_400a13.backedge:                            ; preds = %block_400a23, %block_400a5c
Keep: %MEMORY.0.be = phi %struct.Memory* [ %var_2_172, %block_400a23 ], [ %var_2_53, %block_400a5c ]
Keep: %var_2_61 = load i64, i64* %RBP, align 8
Keep: %var_2_62 = add i64 %var_2_61, -12
Keep: %var_2_64 = inttoptr i64 %var_2_62 to i32*
Keep: %var_2_65 = load i32, i32* %var_2_64, align 4
Keep: %var_2_67 = load i32, i32* bitcast (%ncol_type* @ncol to i32*), align 8
Keep: %var_2_81 = icmp eq i32 %var_2_65, %var_2_67
Keep: br i1 %var_2_81, label %block_400a6e.loopexit, label %block_400a23
[x] Exhausted iterations without definitive match! /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/chomp/show_data/mcsema/test.proposed.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/chomp/binary/test.mcsema.calls_renamed.ll show_data
[x] Saved reduced files to /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/chomp/show_data/mcsema/test.proposed.reduced.ll /home/ubuntu/Github/validating-binary-decompilation/tests/program_translation_validation/single-source-benchmark/chomp/binary/test.mcsema.calls_renamed.reduced.ll
/home/ubuntu/Github/llir-matcher/matcher/match.py:718: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  config = yaml.load(fd)
