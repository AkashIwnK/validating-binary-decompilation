[Info]: Check for multiple matches
Multiple matches exist for [0x55880f6b1358]:   %160 = tail call fastcc %struct.Memory* @ext_400530_free(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
[0x55880f8c7cf0]:   %call2_400ef0 = tail call %struct.Memory.32* @sub_4006e0.next_data(%struct.State.1* nonnull %0, i64 %123, %struct.Memory.32* %MEMORY.0)
[0x55880f8d28f0]:   %373 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8d3a50]:   %167 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8f4040]:   %call2_400f02 = tail call %struct.Memory.32* @sub_400870.valid_data(%struct.State.1* nonnull %0, i64 %145, %struct.Memory.32* %MEMORY.0)
Multiple matches exist for [0x55880f6bbeb8]:   %MEMORY.3 = phi %struct.Memory* [ %272, %block_400f43 ], [ %408, %block_400fa8 ]
[0x55880f8d49c8]:   %MEMORY.0 = phi %struct.Memory.32* [ %call2_400ed8, %entry ], [ %MEMORY.3, %block_.L_400fd0 ]
[0x55880f8db6c8]:   %MEMORY.2 = phi %struct.Memory.32* [ %call2_400f64, %block_.L_400f43 ], [ %call2_400fc2, %block_400fa8 ]
Multiple matches exist for [0x55880f6bc548]:   %363 = tail call fastcc %struct.Memory* @ext_602090_malloc(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
[0x55880f8c7cf0]:   %call2_400ef0 = tail call %struct.Memory.32* @sub_4006e0.next_data(%struct.State.1* nonnull %0, i64 %123, %struct.Memory.32* %MEMORY.0)
[0x55880f8d28f0]:   %373 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8d3a50]:   %167 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8f4040]:   %call2_400f02 = tail call %struct.Memory.32* @sub_400870.valid_data(%struct.State.1* nonnull %0, i64 %145, %struct.Memory.32* %MEMORY.0)
Multiple matches exist for [0x55880f6bde78]:   %397 = tail call fastcc %struct.Memory* @ext_400530_free(%struct.State* nonnull %0, %struct.Memory* %272)
[0x55880f8c7cf0]:   %call2_400ef0 = tail call %struct.Memory.32* @sub_4006e0.next_data(%struct.State.1* nonnull %0, i64 %123, %struct.Memory.32* %MEMORY.0)
[0x55880f8cd9e0]:   %call2_400f64 = tail call %struct.Memory.32* @sub_400cb0.make_list(%struct.State.1* nonnull %0, i64 %233, %struct.Memory.32* %call2_400f47)
[0x55880f8d28f0]:   %373 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8d2a20]:   %call2_400fc2 = tail call %struct.Memory.32* @sub_400c10.make_data(%struct.State.1* nonnull %0, i64 %336, %struct.Memory.32* %330)
[0x55880f8d2c80]:   %330 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory.32* %call2_400f64)
[0x55880f8d3920]:   %call2_400f47 = tail call %struct.Memory.32* @sub_400670.copy_data(%struct.State.1* nonnull %0, i64 %206, %struct.Memory.32* %167)
[0x55880f8d3a50]:   %167 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* nonnull %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory.32* %MEMORY.0)
[0x55880f8dddf0]:   %call2_400ed8 = tail call %struct.Memory.32* @sub_400c10.make_data(%struct.State.1* %0, i64 %72, %struct.Memory.32* %52)
[0x55880f8e7190]:   %52 = tail call %struct.Memory.32* @__remill_function_call(%struct.State.1* %0, i64 ptrtoint (i64 (i64)* @malloc to i64), %struct.Memory.32* %2)
[0x55880f8f4040]:   %call2_400f02 = tail call %struct.Memory.32* @sub_400870.valid_data(%struct.State.1* nonnull %0, i64 %145, %struct.Memory.32* %MEMORY.0)
Iso Match NOT Found
Writing 'sub_400ea0_make_play-mcsema-diff.dot'...
Writing 'sub_400ea0_make_play-mcsema-diff.dot':Done

Writing 'make_play-proposed-diff.dot'...
Writing 'make_play-proposed-diff.dot':Done

Reading LLVM: ../binary/test.mcsema.opt.ll
Reading LLVM: mcsema/test.proposed.opt.ll
Extracting function [make_play] from ../binary/test.mcsema.opt.ll
Extracting function [make_play] from mcsema/test.proposed.opt.ll
Matcher Done...
32.84user 42.76system 1:16.37elapsed 98%CPU (0avgtext+0avgdata 15852maxresident)k
0inputs+8008outputs (0major+3261minor)pagefaults 0swaps
